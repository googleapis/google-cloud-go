// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/servicehealth/v1/event_service.proto

package servicehealthpb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ServiceHealth_ListEvents_FullMethodName              = "/google.cloud.servicehealth.v1.ServiceHealth/ListEvents"
	ServiceHealth_GetEvent_FullMethodName                = "/google.cloud.servicehealth.v1.ServiceHealth/GetEvent"
	ServiceHealth_ListOrganizationEvents_FullMethodName  = "/google.cloud.servicehealth.v1.ServiceHealth/ListOrganizationEvents"
	ServiceHealth_GetOrganizationEvent_FullMethodName    = "/google.cloud.servicehealth.v1.ServiceHealth/GetOrganizationEvent"
	ServiceHealth_ListOrganizationImpacts_FullMethodName = "/google.cloud.servicehealth.v1.ServiceHealth/ListOrganizationImpacts"
	ServiceHealth_GetOrganizationImpact_FullMethodName   = "/google.cloud.servicehealth.v1.ServiceHealth/GetOrganizationImpact"
)

// ServiceHealthClient is the client API for ServiceHealth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceHealthClient interface {
	// Lists events under a given project and location.
	ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*ListEventsResponse, error)
	// Retrieves a resource containing information about an event.
	GetEvent(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*Event, error)
	// Lists organization events under a given organization and location.
	ListOrganizationEvents(ctx context.Context, in *ListOrganizationEventsRequest, opts ...grpc.CallOption) (*ListOrganizationEventsResponse, error)
	// Retrieves a resource containing information about an event affecting an
	// organization .
	GetOrganizationEvent(ctx context.Context, in *GetOrganizationEventRequest, opts ...grpc.CallOption) (*OrganizationEvent, error)
	// Lists assets impacted by organization events under a given organization and
	// location.
	ListOrganizationImpacts(ctx context.Context, in *ListOrganizationImpactsRequest, opts ...grpc.CallOption) (*ListOrganizationImpactsResponse, error)
	// Retrieves a resource containing information about impact to an asset under
	// an organization affected by a service health event.
	GetOrganizationImpact(ctx context.Context, in *GetOrganizationImpactRequest, opts ...grpc.CallOption) (*OrganizationImpact, error)
}

type serviceHealthClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceHealthClient(cc grpc.ClientConnInterface) ServiceHealthClient {
	return &serviceHealthClient{cc}
}

func (c *serviceHealthClient) ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*ListEventsResponse, error) {
	out := new(ListEventsResponse)
	err := c.cc.Invoke(ctx, ServiceHealth_ListEvents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceHealthClient) GetEvent(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, ServiceHealth_GetEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceHealthClient) ListOrganizationEvents(ctx context.Context, in *ListOrganizationEventsRequest, opts ...grpc.CallOption) (*ListOrganizationEventsResponse, error) {
	out := new(ListOrganizationEventsResponse)
	err := c.cc.Invoke(ctx, ServiceHealth_ListOrganizationEvents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceHealthClient) GetOrganizationEvent(ctx context.Context, in *GetOrganizationEventRequest, opts ...grpc.CallOption) (*OrganizationEvent, error) {
	out := new(OrganizationEvent)
	err := c.cc.Invoke(ctx, ServiceHealth_GetOrganizationEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceHealthClient) ListOrganizationImpacts(ctx context.Context, in *ListOrganizationImpactsRequest, opts ...grpc.CallOption) (*ListOrganizationImpactsResponse, error) {
	out := new(ListOrganizationImpactsResponse)
	err := c.cc.Invoke(ctx, ServiceHealth_ListOrganizationImpacts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceHealthClient) GetOrganizationImpact(ctx context.Context, in *GetOrganizationImpactRequest, opts ...grpc.CallOption) (*OrganizationImpact, error) {
	out := new(OrganizationImpact)
	err := c.cc.Invoke(ctx, ServiceHealth_GetOrganizationImpact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceHealthServer is the server API for ServiceHealth service.
// All implementations should embed UnimplementedServiceHealthServer
// for forward compatibility
type ServiceHealthServer interface {
	// Lists events under a given project and location.
	ListEvents(context.Context, *ListEventsRequest) (*ListEventsResponse, error)
	// Retrieves a resource containing information about an event.
	GetEvent(context.Context, *GetEventRequest) (*Event, error)
	// Lists organization events under a given organization and location.
	ListOrganizationEvents(context.Context, *ListOrganizationEventsRequest) (*ListOrganizationEventsResponse, error)
	// Retrieves a resource containing information about an event affecting an
	// organization .
	GetOrganizationEvent(context.Context, *GetOrganizationEventRequest) (*OrganizationEvent, error)
	// Lists assets impacted by organization events under a given organization and
	// location.
	ListOrganizationImpacts(context.Context, *ListOrganizationImpactsRequest) (*ListOrganizationImpactsResponse, error)
	// Retrieves a resource containing information about impact to an asset under
	// an organization affected by a service health event.
	GetOrganizationImpact(context.Context, *GetOrganizationImpactRequest) (*OrganizationImpact, error)
}

// UnimplementedServiceHealthServer should be embedded to have forward compatible implementations.
type UnimplementedServiceHealthServer struct {
}

func (UnimplementedServiceHealthServer) ListEvents(context.Context, *ListEventsRequest) (*ListEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEvents not implemented")
}
func (UnimplementedServiceHealthServer) GetEvent(context.Context, *GetEventRequest) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvent not implemented")
}
func (UnimplementedServiceHealthServer) ListOrganizationEvents(context.Context, *ListOrganizationEventsRequest) (*ListOrganizationEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationEvents not implemented")
}
func (UnimplementedServiceHealthServer) GetOrganizationEvent(context.Context, *GetOrganizationEventRequest) (*OrganizationEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationEvent not implemented")
}
func (UnimplementedServiceHealthServer) ListOrganizationImpacts(context.Context, *ListOrganizationImpactsRequest) (*ListOrganizationImpactsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationImpacts not implemented")
}
func (UnimplementedServiceHealthServer) GetOrganizationImpact(context.Context, *GetOrganizationImpactRequest) (*OrganizationImpact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationImpact not implemented")
}

// UnsafeServiceHealthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceHealthServer will
// result in compilation errors.
type UnsafeServiceHealthServer interface {
	mustEmbedUnimplementedServiceHealthServer()
}

func RegisterServiceHealthServer(s grpc.ServiceRegistrar, srv ServiceHealthServer) {
	s.RegisterService(&ServiceHealth_ServiceDesc, srv)
}

func _ServiceHealth_ListEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceHealthServer).ListEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceHealth_ListEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceHealthServer).ListEvents(ctx, req.(*ListEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceHealth_GetEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceHealthServer).GetEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceHealth_GetEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceHealthServer).GetEvent(ctx, req.(*GetEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceHealth_ListOrganizationEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceHealthServer).ListOrganizationEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceHealth_ListOrganizationEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceHealthServer).ListOrganizationEvents(ctx, req.(*ListOrganizationEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceHealth_GetOrganizationEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceHealthServer).GetOrganizationEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceHealth_GetOrganizationEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceHealthServer).GetOrganizationEvent(ctx, req.(*GetOrganizationEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceHealth_ListOrganizationImpacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationImpactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceHealthServer).ListOrganizationImpacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceHealth_ListOrganizationImpacts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceHealthServer).ListOrganizationImpacts(ctx, req.(*ListOrganizationImpactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceHealth_GetOrganizationImpact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationImpactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceHealthServer).GetOrganizationImpact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceHealth_GetOrganizationImpact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceHealthServer).GetOrganizationImpact(ctx, req.(*GetOrganizationImpactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceHealth_ServiceDesc is the grpc.ServiceDesc for ServiceHealth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceHealth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.servicehealth.v1.ServiceHealth",
	HandlerType: (*ServiceHealthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListEvents",
			Handler:    _ServiceHealth_ListEvents_Handler,
		},
		{
			MethodName: "GetEvent",
			Handler:    _ServiceHealth_GetEvent_Handler,
		},
		{
			MethodName: "ListOrganizationEvents",
			Handler:    _ServiceHealth_ListOrganizationEvents_Handler,
		},
		{
			MethodName: "GetOrganizationEvent",
			Handler:    _ServiceHealth_GetOrganizationEvent_Handler,
		},
		{
			MethodName: "ListOrganizationImpacts",
			Handler:    _ServiceHealth_ListOrganizationImpacts_Handler,
		},
		{
			MethodName: "GetOrganizationImpact",
			Handler:    _ServiceHealth_GetOrganizationImpact_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/servicehealth/v1/event_service.proto",
}
