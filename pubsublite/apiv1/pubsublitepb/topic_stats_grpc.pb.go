// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/pubsublite/v1/topic_stats.proto

package pubsublitepb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TopicStatsService_ComputeMessageStats_FullMethodName = "/google.cloud.pubsublite.v1.TopicStatsService/ComputeMessageStats"
	TopicStatsService_ComputeHeadCursor_FullMethodName   = "/google.cloud.pubsublite.v1.TopicStatsService/ComputeHeadCursor"
	TopicStatsService_ComputeTimeCursor_FullMethodName   = "/google.cloud.pubsublite.v1.TopicStatsService/ComputeTimeCursor"
)

// TopicStatsServiceClient is the client API for TopicStatsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TopicStatsServiceClient interface {
	// Compute statistics about a range of messages in a given topic and
	// partition.
	ComputeMessageStats(ctx context.Context, in *ComputeMessageStatsRequest, opts ...grpc.CallOption) (*ComputeMessageStatsResponse, error)
	// Compute the head cursor for the partition.
	// The head cursor's offset is guaranteed to be less than or equal to all
	// messages which have not yet been acknowledged as published, and
	// greater than the offset of any message whose publish has already
	// been acknowledged. It is zero if there have never been messages in the
	// partition.
	ComputeHeadCursor(ctx context.Context, in *ComputeHeadCursorRequest, opts ...grpc.CallOption) (*ComputeHeadCursorResponse, error)
	// Compute the corresponding cursor for a publish or event time in a topic
	// partition.
	ComputeTimeCursor(ctx context.Context, in *ComputeTimeCursorRequest, opts ...grpc.CallOption) (*ComputeTimeCursorResponse, error)
}

type topicStatsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTopicStatsServiceClient(cc grpc.ClientConnInterface) TopicStatsServiceClient {
	return &topicStatsServiceClient{cc}
}

func (c *topicStatsServiceClient) ComputeMessageStats(ctx context.Context, in *ComputeMessageStatsRequest, opts ...grpc.CallOption) (*ComputeMessageStatsResponse, error) {
	out := new(ComputeMessageStatsResponse)
	err := c.cc.Invoke(ctx, TopicStatsService_ComputeMessageStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topicStatsServiceClient) ComputeHeadCursor(ctx context.Context, in *ComputeHeadCursorRequest, opts ...grpc.CallOption) (*ComputeHeadCursorResponse, error) {
	out := new(ComputeHeadCursorResponse)
	err := c.cc.Invoke(ctx, TopicStatsService_ComputeHeadCursor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topicStatsServiceClient) ComputeTimeCursor(ctx context.Context, in *ComputeTimeCursorRequest, opts ...grpc.CallOption) (*ComputeTimeCursorResponse, error) {
	out := new(ComputeTimeCursorResponse)
	err := c.cc.Invoke(ctx, TopicStatsService_ComputeTimeCursor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TopicStatsServiceServer is the server API for TopicStatsService service.
// All implementations should embed UnimplementedTopicStatsServiceServer
// for forward compatibility
type TopicStatsServiceServer interface {
	// Compute statistics about a range of messages in a given topic and
	// partition.
	ComputeMessageStats(context.Context, *ComputeMessageStatsRequest) (*ComputeMessageStatsResponse, error)
	// Compute the head cursor for the partition.
	// The head cursor's offset is guaranteed to be less than or equal to all
	// messages which have not yet been acknowledged as published, and
	// greater than the offset of any message whose publish has already
	// been acknowledged. It is zero if there have never been messages in the
	// partition.
	ComputeHeadCursor(context.Context, *ComputeHeadCursorRequest) (*ComputeHeadCursorResponse, error)
	// Compute the corresponding cursor for a publish or event time in a topic
	// partition.
	ComputeTimeCursor(context.Context, *ComputeTimeCursorRequest) (*ComputeTimeCursorResponse, error)
}

// UnimplementedTopicStatsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTopicStatsServiceServer struct {
}

func (UnimplementedTopicStatsServiceServer) ComputeMessageStats(context.Context, *ComputeMessageStatsRequest) (*ComputeMessageStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComputeMessageStats not implemented")
}
func (UnimplementedTopicStatsServiceServer) ComputeHeadCursor(context.Context, *ComputeHeadCursorRequest) (*ComputeHeadCursorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComputeHeadCursor not implemented")
}
func (UnimplementedTopicStatsServiceServer) ComputeTimeCursor(context.Context, *ComputeTimeCursorRequest) (*ComputeTimeCursorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComputeTimeCursor not implemented")
}

// UnsafeTopicStatsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TopicStatsServiceServer will
// result in compilation errors.
type UnsafeTopicStatsServiceServer interface {
	mustEmbedUnimplementedTopicStatsServiceServer()
}

func RegisterTopicStatsServiceServer(s grpc.ServiceRegistrar, srv TopicStatsServiceServer) {
	s.RegisterService(&TopicStatsService_ServiceDesc, srv)
}

func _TopicStatsService_ComputeMessageStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComputeMessageStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopicStatsServiceServer).ComputeMessageStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopicStatsService_ComputeMessageStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopicStatsServiceServer).ComputeMessageStats(ctx, req.(*ComputeMessageStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopicStatsService_ComputeHeadCursor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComputeHeadCursorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopicStatsServiceServer).ComputeHeadCursor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopicStatsService_ComputeHeadCursor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopicStatsServiceServer).ComputeHeadCursor(ctx, req.(*ComputeHeadCursorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopicStatsService_ComputeTimeCursor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComputeTimeCursorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopicStatsServiceServer).ComputeTimeCursor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopicStatsService_ComputeTimeCursor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopicStatsServiceServer).ComputeTimeCursor(ctx, req.(*ComputeTimeCursorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TopicStatsService_ServiceDesc is the grpc.ServiceDesc for TopicStatsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TopicStatsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.pubsublite.v1.TopicStatsService",
	HandlerType: (*TopicStatsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ComputeMessageStats",
			Handler:    _TopicStatsService_ComputeMessageStats_Handler,
		},
		{
			MethodName: "ComputeHeadCursor",
			Handler:    _TopicStatsService_ComputeHeadCursor_Handler,
		},
		{
			MethodName: "ComputeTimeCursor",
			Handler:    _TopicStatsService_ComputeTimeCursor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/pubsublite/v1/topic_stats.proto",
}
