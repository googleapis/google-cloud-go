// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/pubsublite/v1/cursor.proto

package pubsublitepb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CursorService_StreamingCommitCursor_FullMethodName = "/google.cloud.pubsublite.v1.CursorService/StreamingCommitCursor"
	CursorService_CommitCursor_FullMethodName          = "/google.cloud.pubsublite.v1.CursorService/CommitCursor"
	CursorService_ListPartitionCursors_FullMethodName  = "/google.cloud.pubsublite.v1.CursorService/ListPartitionCursors"
)

// CursorServiceClient is the client API for CursorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CursorServiceClient interface {
	// Establishes a stream with the server for managing committed cursors.
	StreamingCommitCursor(ctx context.Context, opts ...grpc.CallOption) (CursorService_StreamingCommitCursorClient, error)
	// Updates the committed cursor.
	CommitCursor(ctx context.Context, in *CommitCursorRequest, opts ...grpc.CallOption) (*CommitCursorResponse, error)
	// Returns all committed cursor information for a subscription.
	ListPartitionCursors(ctx context.Context, in *ListPartitionCursorsRequest, opts ...grpc.CallOption) (*ListPartitionCursorsResponse, error)
}

type cursorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCursorServiceClient(cc grpc.ClientConnInterface) CursorServiceClient {
	return &cursorServiceClient{cc}
}

func (c *cursorServiceClient) StreamingCommitCursor(ctx context.Context, opts ...grpc.CallOption) (CursorService_StreamingCommitCursorClient, error) {
	stream, err := c.cc.NewStream(ctx, &CursorService_ServiceDesc.Streams[0], CursorService_StreamingCommitCursor_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &cursorServiceStreamingCommitCursorClient{stream}
	return x, nil
}

type CursorService_StreamingCommitCursorClient interface {
	Send(*StreamingCommitCursorRequest) error
	Recv() (*StreamingCommitCursorResponse, error)
	grpc.ClientStream
}

type cursorServiceStreamingCommitCursorClient struct {
	grpc.ClientStream
}

func (x *cursorServiceStreamingCommitCursorClient) Send(m *StreamingCommitCursorRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cursorServiceStreamingCommitCursorClient) Recv() (*StreamingCommitCursorResponse, error) {
	m := new(StreamingCommitCursorResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cursorServiceClient) CommitCursor(ctx context.Context, in *CommitCursorRequest, opts ...grpc.CallOption) (*CommitCursorResponse, error) {
	out := new(CommitCursorResponse)
	err := c.cc.Invoke(ctx, CursorService_CommitCursor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cursorServiceClient) ListPartitionCursors(ctx context.Context, in *ListPartitionCursorsRequest, opts ...grpc.CallOption) (*ListPartitionCursorsResponse, error) {
	out := new(ListPartitionCursorsResponse)
	err := c.cc.Invoke(ctx, CursorService_ListPartitionCursors_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CursorServiceServer is the server API for CursorService service.
// All implementations should embed UnimplementedCursorServiceServer
// for forward compatibility
type CursorServiceServer interface {
	// Establishes a stream with the server for managing committed cursors.
	StreamingCommitCursor(CursorService_StreamingCommitCursorServer) error
	// Updates the committed cursor.
	CommitCursor(context.Context, *CommitCursorRequest) (*CommitCursorResponse, error)
	// Returns all committed cursor information for a subscription.
	ListPartitionCursors(context.Context, *ListPartitionCursorsRequest) (*ListPartitionCursorsResponse, error)
}

// UnimplementedCursorServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCursorServiceServer struct {
}

func (UnimplementedCursorServiceServer) StreamingCommitCursor(CursorService_StreamingCommitCursorServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamingCommitCursor not implemented")
}
func (UnimplementedCursorServiceServer) CommitCursor(context.Context, *CommitCursorRequest) (*CommitCursorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitCursor not implemented")
}
func (UnimplementedCursorServiceServer) ListPartitionCursors(context.Context, *ListPartitionCursorsRequest) (*ListPartitionCursorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPartitionCursors not implemented")
}

// UnsafeCursorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CursorServiceServer will
// result in compilation errors.
type UnsafeCursorServiceServer interface {
	mustEmbedUnimplementedCursorServiceServer()
}

func RegisterCursorServiceServer(s grpc.ServiceRegistrar, srv CursorServiceServer) {
	s.RegisterService(&CursorService_ServiceDesc, srv)
}

func _CursorService_StreamingCommitCursor_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CursorServiceServer).StreamingCommitCursor(&cursorServiceStreamingCommitCursorServer{stream})
}

type CursorService_StreamingCommitCursorServer interface {
	Send(*StreamingCommitCursorResponse) error
	Recv() (*StreamingCommitCursorRequest, error)
	grpc.ServerStream
}

type cursorServiceStreamingCommitCursorServer struct {
	grpc.ServerStream
}

func (x *cursorServiceStreamingCommitCursorServer) Send(m *StreamingCommitCursorResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cursorServiceStreamingCommitCursorServer) Recv() (*StreamingCommitCursorRequest, error) {
	m := new(StreamingCommitCursorRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CursorService_CommitCursor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitCursorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CursorServiceServer).CommitCursor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CursorService_CommitCursor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CursorServiceServer).CommitCursor(ctx, req.(*CommitCursorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CursorService_ListPartitionCursors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPartitionCursorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CursorServiceServer).ListPartitionCursors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CursorService_ListPartitionCursors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CursorServiceServer).ListPartitionCursors(ctx, req.(*ListPartitionCursorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CursorService_ServiceDesc is the grpc.ServiceDesc for CursorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CursorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.pubsublite.v1.CursorService",
	HandlerType: (*CursorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CommitCursor",
			Handler:    _CursorService_CommitCursor_Handler,
		},
		{
			MethodName: "ListPartitionCursors",
			Handler:    _CursorService_ListPartitionCursors_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingCommitCursor",
			Handler:       _CursorService_StreamingCommitCursor_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "google/cloud/pubsublite/v1/cursor.proto",
}
