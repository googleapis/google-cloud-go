// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package datacatalog_test

import (
	"context"

	datacatalog "cloud.google.com/go/datacatalog/apiv1beta1"
	"google.golang.org/api/iterator"
	datacatalogpb "google.golang.org/genproto/googleapis/cloud/datacatalog/v1beta1"
	iampb "google.golang.org/genproto/googleapis/iam/v1"
)

func ExampleNewPolicyTagManagerClient() {
	ctx := context.Background()
	c, err := datacatalog.NewPolicyTagManagerClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use client.
	_ = c
}

func ExamplePolicyTagManagerClient_CreateTaxonomy() {
	// import datacatalogpb "google.golang.org/genproto/googleapis/cloud/datacatalog/v1beta1"

	ctx := context.Background()
	c, err := datacatalog.NewPolicyTagManagerClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &datacatalogpb.CreateTaxonomyRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.CreateTaxonomy(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExamplePolicyTagManagerClient_DeleteTaxonomy() {
	ctx := context.Background()
	c, err := datacatalog.NewPolicyTagManagerClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &datacatalogpb.DeleteTaxonomyRequest{
		// TODO: Fill request struct fields.
	}
	err = c.DeleteTaxonomy(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
}

func ExamplePolicyTagManagerClient_UpdateTaxonomy() {
	// import datacatalogpb "google.golang.org/genproto/googleapis/cloud/datacatalog/v1beta1"

	ctx := context.Background()
	c, err := datacatalog.NewPolicyTagManagerClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &datacatalogpb.UpdateTaxonomyRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.UpdateTaxonomy(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExamplePolicyTagManagerClient_ListTaxonomies() {
	// import datacatalogpb "google.golang.org/genproto/googleapis/cloud/datacatalog/v1beta1"
	// import "google.golang.org/api/iterator"

	ctx := context.Background()
	c, err := datacatalog.NewPolicyTagManagerClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &datacatalogpb.ListTaxonomiesRequest{
		// TODO: Fill request struct fields.
	}
	it := c.ListTaxonomies(ctx, req)
	for {
		resp, err := it.Next()
		if err == iterator.Done {
			break
		}
		if err != nil {
			// TODO: Handle error.
		}
		// TODO: Use resp.
		_ = resp
	}
}

func ExamplePolicyTagManagerClient_GetTaxonomy() {
	// import datacatalogpb "google.golang.org/genproto/googleapis/cloud/datacatalog/v1beta1"

	ctx := context.Background()
	c, err := datacatalog.NewPolicyTagManagerClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &datacatalogpb.GetTaxonomyRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.GetTaxonomy(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExamplePolicyTagManagerClient_CreatePolicyTag() {
	// import datacatalogpb "google.golang.org/genproto/googleapis/cloud/datacatalog/v1beta1"

	ctx := context.Background()
	c, err := datacatalog.NewPolicyTagManagerClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &datacatalogpb.CreatePolicyTagRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.CreatePolicyTag(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExamplePolicyTagManagerClient_DeletePolicyTag() {
	ctx := context.Background()
	c, err := datacatalog.NewPolicyTagManagerClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &datacatalogpb.DeletePolicyTagRequest{
		// TODO: Fill request struct fields.
	}
	err = c.DeletePolicyTag(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
}

func ExamplePolicyTagManagerClient_UpdatePolicyTag() {
	// import datacatalogpb "google.golang.org/genproto/googleapis/cloud/datacatalog/v1beta1"

	ctx := context.Background()
	c, err := datacatalog.NewPolicyTagManagerClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &datacatalogpb.UpdatePolicyTagRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.UpdatePolicyTag(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExamplePolicyTagManagerClient_ListPolicyTags() {
	// import datacatalogpb "google.golang.org/genproto/googleapis/cloud/datacatalog/v1beta1"
	// import "google.golang.org/api/iterator"

	ctx := context.Background()
	c, err := datacatalog.NewPolicyTagManagerClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &datacatalogpb.ListPolicyTagsRequest{
		// TODO: Fill request struct fields.
	}
	it := c.ListPolicyTags(ctx, req)
	for {
		resp, err := it.Next()
		if err == iterator.Done {
			break
		}
		if err != nil {
			// TODO: Handle error.
		}
		// TODO: Use resp.
		_ = resp
	}
}

func ExamplePolicyTagManagerClient_GetPolicyTag() {
	// import datacatalogpb "google.golang.org/genproto/googleapis/cloud/datacatalog/v1beta1"

	ctx := context.Background()
	c, err := datacatalog.NewPolicyTagManagerClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &datacatalogpb.GetPolicyTagRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.GetPolicyTag(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExamplePolicyTagManagerClient_GetIamPolicy() {
	// import iampb "google.golang.org/genproto/googleapis/iam/v1"

	ctx := context.Background()
	c, err := datacatalog.NewPolicyTagManagerClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &iampb.GetIamPolicyRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.GetIamPolicy(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExamplePolicyTagManagerClient_SetIamPolicy() {
	// import iampb "google.golang.org/genproto/googleapis/iam/v1"

	ctx := context.Background()
	c, err := datacatalog.NewPolicyTagManagerClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &iampb.SetIamPolicyRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.SetIamPolicy(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExamplePolicyTagManagerClient_TestIamPermissions() {
	// import iampb "google.golang.org/genproto/googleapis/iam/v1"

	ctx := context.Background()
	c, err := datacatalog.NewPolicyTagManagerClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &iampb.TestIamPermissionsRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.TestIamPermissions(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}
