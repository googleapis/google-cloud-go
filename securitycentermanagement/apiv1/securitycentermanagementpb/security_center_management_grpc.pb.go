// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/securitycentermanagement/v1/security_center_management.proto

package securitycentermanagementpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SecurityCenterManagement_ListEffectiveSecurityHealthAnalyticsCustomModules_FullMethodName  = "/google.cloud.securitycentermanagement.v1.SecurityCenterManagement/ListEffectiveSecurityHealthAnalyticsCustomModules"
	SecurityCenterManagement_GetEffectiveSecurityHealthAnalyticsCustomModule_FullMethodName    = "/google.cloud.securitycentermanagement.v1.SecurityCenterManagement/GetEffectiveSecurityHealthAnalyticsCustomModule"
	SecurityCenterManagement_ListSecurityHealthAnalyticsCustomModules_FullMethodName           = "/google.cloud.securitycentermanagement.v1.SecurityCenterManagement/ListSecurityHealthAnalyticsCustomModules"
	SecurityCenterManagement_ListDescendantSecurityHealthAnalyticsCustomModules_FullMethodName = "/google.cloud.securitycentermanagement.v1.SecurityCenterManagement/ListDescendantSecurityHealthAnalyticsCustomModules"
	SecurityCenterManagement_GetSecurityHealthAnalyticsCustomModule_FullMethodName             = "/google.cloud.securitycentermanagement.v1.SecurityCenterManagement/GetSecurityHealthAnalyticsCustomModule"
	SecurityCenterManagement_CreateSecurityHealthAnalyticsCustomModule_FullMethodName          = "/google.cloud.securitycentermanagement.v1.SecurityCenterManagement/CreateSecurityHealthAnalyticsCustomModule"
	SecurityCenterManagement_UpdateSecurityHealthAnalyticsCustomModule_FullMethodName          = "/google.cloud.securitycentermanagement.v1.SecurityCenterManagement/UpdateSecurityHealthAnalyticsCustomModule"
	SecurityCenterManagement_DeleteSecurityHealthAnalyticsCustomModule_FullMethodName          = "/google.cloud.securitycentermanagement.v1.SecurityCenterManagement/DeleteSecurityHealthAnalyticsCustomModule"
	SecurityCenterManagement_SimulateSecurityHealthAnalyticsCustomModule_FullMethodName        = "/google.cloud.securitycentermanagement.v1.SecurityCenterManagement/SimulateSecurityHealthAnalyticsCustomModule"
	SecurityCenterManagement_ListEffectiveEventThreatDetectionCustomModules_FullMethodName     = "/google.cloud.securitycentermanagement.v1.SecurityCenterManagement/ListEffectiveEventThreatDetectionCustomModules"
	SecurityCenterManagement_GetEffectiveEventThreatDetectionCustomModule_FullMethodName       = "/google.cloud.securitycentermanagement.v1.SecurityCenterManagement/GetEffectiveEventThreatDetectionCustomModule"
	SecurityCenterManagement_ListEventThreatDetectionCustomModules_FullMethodName              = "/google.cloud.securitycentermanagement.v1.SecurityCenterManagement/ListEventThreatDetectionCustomModules"
	SecurityCenterManagement_ListDescendantEventThreatDetectionCustomModules_FullMethodName    = "/google.cloud.securitycentermanagement.v1.SecurityCenterManagement/ListDescendantEventThreatDetectionCustomModules"
	SecurityCenterManagement_GetEventThreatDetectionCustomModule_FullMethodName                = "/google.cloud.securitycentermanagement.v1.SecurityCenterManagement/GetEventThreatDetectionCustomModule"
	SecurityCenterManagement_CreateEventThreatDetectionCustomModule_FullMethodName             = "/google.cloud.securitycentermanagement.v1.SecurityCenterManagement/CreateEventThreatDetectionCustomModule"
	SecurityCenterManagement_UpdateEventThreatDetectionCustomModule_FullMethodName             = "/google.cloud.securitycentermanagement.v1.SecurityCenterManagement/UpdateEventThreatDetectionCustomModule"
	SecurityCenterManagement_DeleteEventThreatDetectionCustomModule_FullMethodName             = "/google.cloud.securitycentermanagement.v1.SecurityCenterManagement/DeleteEventThreatDetectionCustomModule"
	SecurityCenterManagement_ValidateEventThreatDetectionCustomModule_FullMethodName           = "/google.cloud.securitycentermanagement.v1.SecurityCenterManagement/ValidateEventThreatDetectionCustomModule"
	SecurityCenterManagement_GetSecurityCenterService_FullMethodName                           = "/google.cloud.securitycentermanagement.v1.SecurityCenterManagement/GetSecurityCenterService"
	SecurityCenterManagement_ListSecurityCenterServices_FullMethodName                         = "/google.cloud.securitycentermanagement.v1.SecurityCenterManagement/ListSecurityCenterServices"
	SecurityCenterManagement_UpdateSecurityCenterService_FullMethodName                        = "/google.cloud.securitycentermanagement.v1.SecurityCenterManagement/UpdateSecurityCenterService"
)

// SecurityCenterManagementClient is the client API for SecurityCenterManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecurityCenterManagementClient interface {
	// Returns a list of all
	// [EffectiveSecurityHealthAnalyticsCustomModule][google.cloud.securitycentermanagement.v1.EffectiveSecurityHealthAnalyticsCustomModule]
	// resources for the given parent. This includes resident modules defined at
	// the scope of the parent, and inherited modules, inherited from ancestor
	// organizations, folders, and projects (no descendants).
	ListEffectiveSecurityHealthAnalyticsCustomModules(ctx context.Context, in *ListEffectiveSecurityHealthAnalyticsCustomModulesRequest, opts ...grpc.CallOption) (*ListEffectiveSecurityHealthAnalyticsCustomModulesResponse, error)
	// Gets details of a single
	// [EffectiveSecurityHealthAnalyticsCustomModule][google.cloud.securitycentermanagement.v1.EffectiveSecurityHealthAnalyticsCustomModule].
	GetEffectiveSecurityHealthAnalyticsCustomModule(ctx context.Context, in *GetEffectiveSecurityHealthAnalyticsCustomModuleRequest, opts ...grpc.CallOption) (*EffectiveSecurityHealthAnalyticsCustomModule, error)
	// Returns a list of all
	// [SecurityHealthAnalyticsCustomModule][google.cloud.securitycentermanagement.v1.SecurityHealthAnalyticsCustomModule]
	// resources for the given parent. This includes resident modules defined at
	// the scope of the parent, and inherited modules, inherited from ancestor
	// organizations, folders, and projects (no descendants).
	ListSecurityHealthAnalyticsCustomModules(ctx context.Context, in *ListSecurityHealthAnalyticsCustomModulesRequest, opts ...grpc.CallOption) (*ListSecurityHealthAnalyticsCustomModulesResponse, error)
	// Returns a list of all resident
	// [SecurityHealthAnalyticsCustomModule][google.cloud.securitycentermanagement.v1.SecurityHealthAnalyticsCustomModule]
	// resources under the given organization, folder, or project and all of its
	// descendants.
	ListDescendantSecurityHealthAnalyticsCustomModules(ctx context.Context, in *ListDescendantSecurityHealthAnalyticsCustomModulesRequest, opts ...grpc.CallOption) (*ListDescendantSecurityHealthAnalyticsCustomModulesResponse, error)
	// Retrieves a
	// [SecurityHealthAnalyticsCustomModule][google.cloud.securitycentermanagement.v1.SecurityHealthAnalyticsCustomModule].
	GetSecurityHealthAnalyticsCustomModule(ctx context.Context, in *GetSecurityHealthAnalyticsCustomModuleRequest, opts ...grpc.CallOption) (*SecurityHealthAnalyticsCustomModule, error)
	// Creates a resident
	// [SecurityHealthAnalyticsCustomModule][google.cloud.securitycentermanagement.v1.SecurityHealthAnalyticsCustomModule]
	// at the scope of the given organization, folder, or project, and also
	// creates inherited `SecurityHealthAnalyticsCustomModule` resources for all
	// folders and projects that are descendants of the given parent. These
	// modules are enabled by default.
	CreateSecurityHealthAnalyticsCustomModule(ctx context.Context, in *CreateSecurityHealthAnalyticsCustomModuleRequest, opts ...grpc.CallOption) (*SecurityHealthAnalyticsCustomModule, error)
	// Updates the
	// [SecurityHealthAnalyticsCustomModule][google.cloud.securitycentermanagement.v1.SecurityHealthAnalyticsCustomModule]
	// under the given name based on the given update mask. Updating the
	// enablement state is supported on both resident and inherited modules
	// (though resident modules cannot have an enablement state of "inherited").
	// Updating the display name and custom configuration of a module is supported
	// on resident modules only.
	UpdateSecurityHealthAnalyticsCustomModule(ctx context.Context, in *UpdateSecurityHealthAnalyticsCustomModuleRequest, opts ...grpc.CallOption) (*SecurityHealthAnalyticsCustomModule, error)
	// Deletes the specified
	// [SecurityHealthAnalyticsCustomModule][google.cloud.securitycentermanagement.v1.SecurityHealthAnalyticsCustomModule]
	// and all of its descendants in the resource hierarchy. This method is only
	// supported for resident custom modules.
	DeleteSecurityHealthAnalyticsCustomModule(ctx context.Context, in *DeleteSecurityHealthAnalyticsCustomModuleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Simulates the result of using a
	// [SecurityHealthAnalyticsCustomModule][google.cloud.securitycentermanagement.v1.SecurityHealthAnalyticsCustomModule]
	// to check a resource.
	SimulateSecurityHealthAnalyticsCustomModule(ctx context.Context, in *SimulateSecurityHealthAnalyticsCustomModuleRequest, opts ...grpc.CallOption) (*SimulateSecurityHealthAnalyticsCustomModuleResponse, error)
	// Lists all effective Event Threat Detection custom modules for the
	// given parent. This includes resident modules defined at the scope of the
	// parent along with modules inherited from its ancestors.
	ListEffectiveEventThreatDetectionCustomModules(ctx context.Context, in *ListEffectiveEventThreatDetectionCustomModulesRequest, opts ...grpc.CallOption) (*ListEffectiveEventThreatDetectionCustomModulesResponse, error)
	// Gets the effective Event Threat Detection custom module at the given level.
	//
	// The difference between an
	// [EffectiveEventThreatDetectionCustomModule][google.cloud.securitycentermanagement.v1.EffectiveEventThreatDetectionCustomModule]
	// and an
	// [EventThreatDetectionCustomModule][google.cloud.securitycentermanagement.v1.EventThreatDetectionCustomModule]
	// is that the fields for an `EffectiveEventThreatDetectionCustomModule` are
	// computed from ancestors if needed. For example, the enablement state for an
	// `EventThreatDetectionCustomModule` can be `ENABLED`, `DISABLED`, or
	// `INHERITED`. In contrast, the enablement state for an
	// `EffectiveEventThreatDetectionCustomModule` is always computed as `ENABLED`
	// or `DISABLED`.
	GetEffectiveEventThreatDetectionCustomModule(ctx context.Context, in *GetEffectiveEventThreatDetectionCustomModuleRequest, opts ...grpc.CallOption) (*EffectiveEventThreatDetectionCustomModule, error)
	// Lists all Event Threat Detection custom modules for the given organization,
	// folder, or project. This includes resident modules defined at the scope of
	// the parent along with modules inherited from ancestors.
	ListEventThreatDetectionCustomModules(ctx context.Context, in *ListEventThreatDetectionCustomModulesRequest, opts ...grpc.CallOption) (*ListEventThreatDetectionCustomModulesResponse, error)
	// Lists all resident Event Threat Detection custom modules for the given
	// organization, folder, or project and its descendants.
	ListDescendantEventThreatDetectionCustomModules(ctx context.Context, in *ListDescendantEventThreatDetectionCustomModulesRequest, opts ...grpc.CallOption) (*ListDescendantEventThreatDetectionCustomModulesResponse, error)
	// Gets an Event Threat Detection custom module.
	GetEventThreatDetectionCustomModule(ctx context.Context, in *GetEventThreatDetectionCustomModuleRequest, opts ...grpc.CallOption) (*EventThreatDetectionCustomModule, error)
	// Creates a resident Event Threat Detection custom module at the scope of the
	// given organization, folder, or project, and creates inherited custom
	// modules for all descendants of the given parent. These modules are enabled
	// by default.
	CreateEventThreatDetectionCustomModule(ctx context.Context, in *CreateEventThreatDetectionCustomModuleRequest, opts ...grpc.CallOption) (*EventThreatDetectionCustomModule, error)
	// Updates the Event Threat Detection custom module with the given name based
	// on the given update mask. Updating the enablement state is supported for
	// both resident and inherited modules (though resident modules cannot have an
	// enablement state of "inherited"). Updating the display name or
	// configuration of a module is supported for resident modules only. The type
	// of a module cannot be changed.
	UpdateEventThreatDetectionCustomModule(ctx context.Context, in *UpdateEventThreatDetectionCustomModuleRequest, opts ...grpc.CallOption) (*EventThreatDetectionCustomModule, error)
	// Deletes the specified Event Threat Detection custom module and all of its
	// descendants in the resource hierarchy. This method is only supported for
	// resident custom modules.
	DeleteEventThreatDetectionCustomModule(ctx context.Context, in *DeleteEventThreatDetectionCustomModuleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Validates the given Event Threat Detection custom module.
	ValidateEventThreatDetectionCustomModule(ctx context.Context, in *ValidateEventThreatDetectionCustomModuleRequest, opts ...grpc.CallOption) (*ValidateEventThreatDetectionCustomModuleResponse, error)
	// Gets service settings for the specified Security Command Center service.
	GetSecurityCenterService(ctx context.Context, in *GetSecurityCenterServiceRequest, opts ...grpc.CallOption) (*SecurityCenterService, error)
	// Returns a list of all Security Command Center services for the given
	// parent.
	ListSecurityCenterServices(ctx context.Context, in *ListSecurityCenterServicesRequest, opts ...grpc.CallOption) (*ListSecurityCenterServicesResponse, error)
	// Updates a Security Command Center service using the given update mask.
	UpdateSecurityCenterService(ctx context.Context, in *UpdateSecurityCenterServiceRequest, opts ...grpc.CallOption) (*SecurityCenterService, error)
}

type securityCenterManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewSecurityCenterManagementClient(cc grpc.ClientConnInterface) SecurityCenterManagementClient {
	return &securityCenterManagementClient{cc}
}

func (c *securityCenterManagementClient) ListEffectiveSecurityHealthAnalyticsCustomModules(ctx context.Context, in *ListEffectiveSecurityHealthAnalyticsCustomModulesRequest, opts ...grpc.CallOption) (*ListEffectiveSecurityHealthAnalyticsCustomModulesResponse, error) {
	out := new(ListEffectiveSecurityHealthAnalyticsCustomModulesResponse)
	err := c.cc.Invoke(ctx, SecurityCenterManagement_ListEffectiveSecurityHealthAnalyticsCustomModules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityCenterManagementClient) GetEffectiveSecurityHealthAnalyticsCustomModule(ctx context.Context, in *GetEffectiveSecurityHealthAnalyticsCustomModuleRequest, opts ...grpc.CallOption) (*EffectiveSecurityHealthAnalyticsCustomModule, error) {
	out := new(EffectiveSecurityHealthAnalyticsCustomModule)
	err := c.cc.Invoke(ctx, SecurityCenterManagement_GetEffectiveSecurityHealthAnalyticsCustomModule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityCenterManagementClient) ListSecurityHealthAnalyticsCustomModules(ctx context.Context, in *ListSecurityHealthAnalyticsCustomModulesRequest, opts ...grpc.CallOption) (*ListSecurityHealthAnalyticsCustomModulesResponse, error) {
	out := new(ListSecurityHealthAnalyticsCustomModulesResponse)
	err := c.cc.Invoke(ctx, SecurityCenterManagement_ListSecurityHealthAnalyticsCustomModules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityCenterManagementClient) ListDescendantSecurityHealthAnalyticsCustomModules(ctx context.Context, in *ListDescendantSecurityHealthAnalyticsCustomModulesRequest, opts ...grpc.CallOption) (*ListDescendantSecurityHealthAnalyticsCustomModulesResponse, error) {
	out := new(ListDescendantSecurityHealthAnalyticsCustomModulesResponse)
	err := c.cc.Invoke(ctx, SecurityCenterManagement_ListDescendantSecurityHealthAnalyticsCustomModules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityCenterManagementClient) GetSecurityHealthAnalyticsCustomModule(ctx context.Context, in *GetSecurityHealthAnalyticsCustomModuleRequest, opts ...grpc.CallOption) (*SecurityHealthAnalyticsCustomModule, error) {
	out := new(SecurityHealthAnalyticsCustomModule)
	err := c.cc.Invoke(ctx, SecurityCenterManagement_GetSecurityHealthAnalyticsCustomModule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityCenterManagementClient) CreateSecurityHealthAnalyticsCustomModule(ctx context.Context, in *CreateSecurityHealthAnalyticsCustomModuleRequest, opts ...grpc.CallOption) (*SecurityHealthAnalyticsCustomModule, error) {
	out := new(SecurityHealthAnalyticsCustomModule)
	err := c.cc.Invoke(ctx, SecurityCenterManagement_CreateSecurityHealthAnalyticsCustomModule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityCenterManagementClient) UpdateSecurityHealthAnalyticsCustomModule(ctx context.Context, in *UpdateSecurityHealthAnalyticsCustomModuleRequest, opts ...grpc.CallOption) (*SecurityHealthAnalyticsCustomModule, error) {
	out := new(SecurityHealthAnalyticsCustomModule)
	err := c.cc.Invoke(ctx, SecurityCenterManagement_UpdateSecurityHealthAnalyticsCustomModule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityCenterManagementClient) DeleteSecurityHealthAnalyticsCustomModule(ctx context.Context, in *DeleteSecurityHealthAnalyticsCustomModuleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SecurityCenterManagement_DeleteSecurityHealthAnalyticsCustomModule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityCenterManagementClient) SimulateSecurityHealthAnalyticsCustomModule(ctx context.Context, in *SimulateSecurityHealthAnalyticsCustomModuleRequest, opts ...grpc.CallOption) (*SimulateSecurityHealthAnalyticsCustomModuleResponse, error) {
	out := new(SimulateSecurityHealthAnalyticsCustomModuleResponse)
	err := c.cc.Invoke(ctx, SecurityCenterManagement_SimulateSecurityHealthAnalyticsCustomModule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityCenterManagementClient) ListEffectiveEventThreatDetectionCustomModules(ctx context.Context, in *ListEffectiveEventThreatDetectionCustomModulesRequest, opts ...grpc.CallOption) (*ListEffectiveEventThreatDetectionCustomModulesResponse, error) {
	out := new(ListEffectiveEventThreatDetectionCustomModulesResponse)
	err := c.cc.Invoke(ctx, SecurityCenterManagement_ListEffectiveEventThreatDetectionCustomModules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityCenterManagementClient) GetEffectiveEventThreatDetectionCustomModule(ctx context.Context, in *GetEffectiveEventThreatDetectionCustomModuleRequest, opts ...grpc.CallOption) (*EffectiveEventThreatDetectionCustomModule, error) {
	out := new(EffectiveEventThreatDetectionCustomModule)
	err := c.cc.Invoke(ctx, SecurityCenterManagement_GetEffectiveEventThreatDetectionCustomModule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityCenterManagementClient) ListEventThreatDetectionCustomModules(ctx context.Context, in *ListEventThreatDetectionCustomModulesRequest, opts ...grpc.CallOption) (*ListEventThreatDetectionCustomModulesResponse, error) {
	out := new(ListEventThreatDetectionCustomModulesResponse)
	err := c.cc.Invoke(ctx, SecurityCenterManagement_ListEventThreatDetectionCustomModules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityCenterManagementClient) ListDescendantEventThreatDetectionCustomModules(ctx context.Context, in *ListDescendantEventThreatDetectionCustomModulesRequest, opts ...grpc.CallOption) (*ListDescendantEventThreatDetectionCustomModulesResponse, error) {
	out := new(ListDescendantEventThreatDetectionCustomModulesResponse)
	err := c.cc.Invoke(ctx, SecurityCenterManagement_ListDescendantEventThreatDetectionCustomModules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityCenterManagementClient) GetEventThreatDetectionCustomModule(ctx context.Context, in *GetEventThreatDetectionCustomModuleRequest, opts ...grpc.CallOption) (*EventThreatDetectionCustomModule, error) {
	out := new(EventThreatDetectionCustomModule)
	err := c.cc.Invoke(ctx, SecurityCenterManagement_GetEventThreatDetectionCustomModule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityCenterManagementClient) CreateEventThreatDetectionCustomModule(ctx context.Context, in *CreateEventThreatDetectionCustomModuleRequest, opts ...grpc.CallOption) (*EventThreatDetectionCustomModule, error) {
	out := new(EventThreatDetectionCustomModule)
	err := c.cc.Invoke(ctx, SecurityCenterManagement_CreateEventThreatDetectionCustomModule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityCenterManagementClient) UpdateEventThreatDetectionCustomModule(ctx context.Context, in *UpdateEventThreatDetectionCustomModuleRequest, opts ...grpc.CallOption) (*EventThreatDetectionCustomModule, error) {
	out := new(EventThreatDetectionCustomModule)
	err := c.cc.Invoke(ctx, SecurityCenterManagement_UpdateEventThreatDetectionCustomModule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityCenterManagementClient) DeleteEventThreatDetectionCustomModule(ctx context.Context, in *DeleteEventThreatDetectionCustomModuleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SecurityCenterManagement_DeleteEventThreatDetectionCustomModule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityCenterManagementClient) ValidateEventThreatDetectionCustomModule(ctx context.Context, in *ValidateEventThreatDetectionCustomModuleRequest, opts ...grpc.CallOption) (*ValidateEventThreatDetectionCustomModuleResponse, error) {
	out := new(ValidateEventThreatDetectionCustomModuleResponse)
	err := c.cc.Invoke(ctx, SecurityCenterManagement_ValidateEventThreatDetectionCustomModule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityCenterManagementClient) GetSecurityCenterService(ctx context.Context, in *GetSecurityCenterServiceRequest, opts ...grpc.CallOption) (*SecurityCenterService, error) {
	out := new(SecurityCenterService)
	err := c.cc.Invoke(ctx, SecurityCenterManagement_GetSecurityCenterService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityCenterManagementClient) ListSecurityCenterServices(ctx context.Context, in *ListSecurityCenterServicesRequest, opts ...grpc.CallOption) (*ListSecurityCenterServicesResponse, error) {
	out := new(ListSecurityCenterServicesResponse)
	err := c.cc.Invoke(ctx, SecurityCenterManagement_ListSecurityCenterServices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityCenterManagementClient) UpdateSecurityCenterService(ctx context.Context, in *UpdateSecurityCenterServiceRequest, opts ...grpc.CallOption) (*SecurityCenterService, error) {
	out := new(SecurityCenterService)
	err := c.cc.Invoke(ctx, SecurityCenterManagement_UpdateSecurityCenterService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecurityCenterManagementServer is the server API for SecurityCenterManagement service.
// All implementations should embed UnimplementedSecurityCenterManagementServer
// for forward compatibility
type SecurityCenterManagementServer interface {
	// Returns a list of all
	// [EffectiveSecurityHealthAnalyticsCustomModule][google.cloud.securitycentermanagement.v1.EffectiveSecurityHealthAnalyticsCustomModule]
	// resources for the given parent. This includes resident modules defined at
	// the scope of the parent, and inherited modules, inherited from ancestor
	// organizations, folders, and projects (no descendants).
	ListEffectiveSecurityHealthAnalyticsCustomModules(context.Context, *ListEffectiveSecurityHealthAnalyticsCustomModulesRequest) (*ListEffectiveSecurityHealthAnalyticsCustomModulesResponse, error)
	// Gets details of a single
	// [EffectiveSecurityHealthAnalyticsCustomModule][google.cloud.securitycentermanagement.v1.EffectiveSecurityHealthAnalyticsCustomModule].
	GetEffectiveSecurityHealthAnalyticsCustomModule(context.Context, *GetEffectiveSecurityHealthAnalyticsCustomModuleRequest) (*EffectiveSecurityHealthAnalyticsCustomModule, error)
	// Returns a list of all
	// [SecurityHealthAnalyticsCustomModule][google.cloud.securitycentermanagement.v1.SecurityHealthAnalyticsCustomModule]
	// resources for the given parent. This includes resident modules defined at
	// the scope of the parent, and inherited modules, inherited from ancestor
	// organizations, folders, and projects (no descendants).
	ListSecurityHealthAnalyticsCustomModules(context.Context, *ListSecurityHealthAnalyticsCustomModulesRequest) (*ListSecurityHealthAnalyticsCustomModulesResponse, error)
	// Returns a list of all resident
	// [SecurityHealthAnalyticsCustomModule][google.cloud.securitycentermanagement.v1.SecurityHealthAnalyticsCustomModule]
	// resources under the given organization, folder, or project and all of its
	// descendants.
	ListDescendantSecurityHealthAnalyticsCustomModules(context.Context, *ListDescendantSecurityHealthAnalyticsCustomModulesRequest) (*ListDescendantSecurityHealthAnalyticsCustomModulesResponse, error)
	// Retrieves a
	// [SecurityHealthAnalyticsCustomModule][google.cloud.securitycentermanagement.v1.SecurityHealthAnalyticsCustomModule].
	GetSecurityHealthAnalyticsCustomModule(context.Context, *GetSecurityHealthAnalyticsCustomModuleRequest) (*SecurityHealthAnalyticsCustomModule, error)
	// Creates a resident
	// [SecurityHealthAnalyticsCustomModule][google.cloud.securitycentermanagement.v1.SecurityHealthAnalyticsCustomModule]
	// at the scope of the given organization, folder, or project, and also
	// creates inherited `SecurityHealthAnalyticsCustomModule` resources for all
	// folders and projects that are descendants of the given parent. These
	// modules are enabled by default.
	CreateSecurityHealthAnalyticsCustomModule(context.Context, *CreateSecurityHealthAnalyticsCustomModuleRequest) (*SecurityHealthAnalyticsCustomModule, error)
	// Updates the
	// [SecurityHealthAnalyticsCustomModule][google.cloud.securitycentermanagement.v1.SecurityHealthAnalyticsCustomModule]
	// under the given name based on the given update mask. Updating the
	// enablement state is supported on both resident and inherited modules
	// (though resident modules cannot have an enablement state of "inherited").
	// Updating the display name and custom configuration of a module is supported
	// on resident modules only.
	UpdateSecurityHealthAnalyticsCustomModule(context.Context, *UpdateSecurityHealthAnalyticsCustomModuleRequest) (*SecurityHealthAnalyticsCustomModule, error)
	// Deletes the specified
	// [SecurityHealthAnalyticsCustomModule][google.cloud.securitycentermanagement.v1.SecurityHealthAnalyticsCustomModule]
	// and all of its descendants in the resource hierarchy. This method is only
	// supported for resident custom modules.
	DeleteSecurityHealthAnalyticsCustomModule(context.Context, *DeleteSecurityHealthAnalyticsCustomModuleRequest) (*emptypb.Empty, error)
	// Simulates the result of using a
	// [SecurityHealthAnalyticsCustomModule][google.cloud.securitycentermanagement.v1.SecurityHealthAnalyticsCustomModule]
	// to check a resource.
	SimulateSecurityHealthAnalyticsCustomModule(context.Context, *SimulateSecurityHealthAnalyticsCustomModuleRequest) (*SimulateSecurityHealthAnalyticsCustomModuleResponse, error)
	// Lists all effective Event Threat Detection custom modules for the
	// given parent. This includes resident modules defined at the scope of the
	// parent along with modules inherited from its ancestors.
	ListEffectiveEventThreatDetectionCustomModules(context.Context, *ListEffectiveEventThreatDetectionCustomModulesRequest) (*ListEffectiveEventThreatDetectionCustomModulesResponse, error)
	// Gets the effective Event Threat Detection custom module at the given level.
	//
	// The difference between an
	// [EffectiveEventThreatDetectionCustomModule][google.cloud.securitycentermanagement.v1.EffectiveEventThreatDetectionCustomModule]
	// and an
	// [EventThreatDetectionCustomModule][google.cloud.securitycentermanagement.v1.EventThreatDetectionCustomModule]
	// is that the fields for an `EffectiveEventThreatDetectionCustomModule` are
	// computed from ancestors if needed. For example, the enablement state for an
	// `EventThreatDetectionCustomModule` can be `ENABLED`, `DISABLED`, or
	// `INHERITED`. In contrast, the enablement state for an
	// `EffectiveEventThreatDetectionCustomModule` is always computed as `ENABLED`
	// or `DISABLED`.
	GetEffectiveEventThreatDetectionCustomModule(context.Context, *GetEffectiveEventThreatDetectionCustomModuleRequest) (*EffectiveEventThreatDetectionCustomModule, error)
	// Lists all Event Threat Detection custom modules for the given organization,
	// folder, or project. This includes resident modules defined at the scope of
	// the parent along with modules inherited from ancestors.
	ListEventThreatDetectionCustomModules(context.Context, *ListEventThreatDetectionCustomModulesRequest) (*ListEventThreatDetectionCustomModulesResponse, error)
	// Lists all resident Event Threat Detection custom modules for the given
	// organization, folder, or project and its descendants.
	ListDescendantEventThreatDetectionCustomModules(context.Context, *ListDescendantEventThreatDetectionCustomModulesRequest) (*ListDescendantEventThreatDetectionCustomModulesResponse, error)
	// Gets an Event Threat Detection custom module.
	GetEventThreatDetectionCustomModule(context.Context, *GetEventThreatDetectionCustomModuleRequest) (*EventThreatDetectionCustomModule, error)
	// Creates a resident Event Threat Detection custom module at the scope of the
	// given organization, folder, or project, and creates inherited custom
	// modules for all descendants of the given parent. These modules are enabled
	// by default.
	CreateEventThreatDetectionCustomModule(context.Context, *CreateEventThreatDetectionCustomModuleRequest) (*EventThreatDetectionCustomModule, error)
	// Updates the Event Threat Detection custom module with the given name based
	// on the given update mask. Updating the enablement state is supported for
	// both resident and inherited modules (though resident modules cannot have an
	// enablement state of "inherited"). Updating the display name or
	// configuration of a module is supported for resident modules only. The type
	// of a module cannot be changed.
	UpdateEventThreatDetectionCustomModule(context.Context, *UpdateEventThreatDetectionCustomModuleRequest) (*EventThreatDetectionCustomModule, error)
	// Deletes the specified Event Threat Detection custom module and all of its
	// descendants in the resource hierarchy. This method is only supported for
	// resident custom modules.
	DeleteEventThreatDetectionCustomModule(context.Context, *DeleteEventThreatDetectionCustomModuleRequest) (*emptypb.Empty, error)
	// Validates the given Event Threat Detection custom module.
	ValidateEventThreatDetectionCustomModule(context.Context, *ValidateEventThreatDetectionCustomModuleRequest) (*ValidateEventThreatDetectionCustomModuleResponse, error)
	// Gets service settings for the specified Security Command Center service.
	GetSecurityCenterService(context.Context, *GetSecurityCenterServiceRequest) (*SecurityCenterService, error)
	// Returns a list of all Security Command Center services for the given
	// parent.
	ListSecurityCenterServices(context.Context, *ListSecurityCenterServicesRequest) (*ListSecurityCenterServicesResponse, error)
	// Updates a Security Command Center service using the given update mask.
	UpdateSecurityCenterService(context.Context, *UpdateSecurityCenterServiceRequest) (*SecurityCenterService, error)
}

// UnimplementedSecurityCenterManagementServer should be embedded to have forward compatible implementations.
type UnimplementedSecurityCenterManagementServer struct {
}

func (UnimplementedSecurityCenterManagementServer) ListEffectiveSecurityHealthAnalyticsCustomModules(context.Context, *ListEffectiveSecurityHealthAnalyticsCustomModulesRequest) (*ListEffectiveSecurityHealthAnalyticsCustomModulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEffectiveSecurityHealthAnalyticsCustomModules not implemented")
}
func (UnimplementedSecurityCenterManagementServer) GetEffectiveSecurityHealthAnalyticsCustomModule(context.Context, *GetEffectiveSecurityHealthAnalyticsCustomModuleRequest) (*EffectiveSecurityHealthAnalyticsCustomModule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEffectiveSecurityHealthAnalyticsCustomModule not implemented")
}
func (UnimplementedSecurityCenterManagementServer) ListSecurityHealthAnalyticsCustomModules(context.Context, *ListSecurityHealthAnalyticsCustomModulesRequest) (*ListSecurityHealthAnalyticsCustomModulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSecurityHealthAnalyticsCustomModules not implemented")
}
func (UnimplementedSecurityCenterManagementServer) ListDescendantSecurityHealthAnalyticsCustomModules(context.Context, *ListDescendantSecurityHealthAnalyticsCustomModulesRequest) (*ListDescendantSecurityHealthAnalyticsCustomModulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDescendantSecurityHealthAnalyticsCustomModules not implemented")
}
func (UnimplementedSecurityCenterManagementServer) GetSecurityHealthAnalyticsCustomModule(context.Context, *GetSecurityHealthAnalyticsCustomModuleRequest) (*SecurityHealthAnalyticsCustomModule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecurityHealthAnalyticsCustomModule not implemented")
}
func (UnimplementedSecurityCenterManagementServer) CreateSecurityHealthAnalyticsCustomModule(context.Context, *CreateSecurityHealthAnalyticsCustomModuleRequest) (*SecurityHealthAnalyticsCustomModule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSecurityHealthAnalyticsCustomModule not implemented")
}
func (UnimplementedSecurityCenterManagementServer) UpdateSecurityHealthAnalyticsCustomModule(context.Context, *UpdateSecurityHealthAnalyticsCustomModuleRequest) (*SecurityHealthAnalyticsCustomModule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSecurityHealthAnalyticsCustomModule not implemented")
}
func (UnimplementedSecurityCenterManagementServer) DeleteSecurityHealthAnalyticsCustomModule(context.Context, *DeleteSecurityHealthAnalyticsCustomModuleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSecurityHealthAnalyticsCustomModule not implemented")
}
func (UnimplementedSecurityCenterManagementServer) SimulateSecurityHealthAnalyticsCustomModule(context.Context, *SimulateSecurityHealthAnalyticsCustomModuleRequest) (*SimulateSecurityHealthAnalyticsCustomModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimulateSecurityHealthAnalyticsCustomModule not implemented")
}
func (UnimplementedSecurityCenterManagementServer) ListEffectiveEventThreatDetectionCustomModules(context.Context, *ListEffectiveEventThreatDetectionCustomModulesRequest) (*ListEffectiveEventThreatDetectionCustomModulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEffectiveEventThreatDetectionCustomModules not implemented")
}
func (UnimplementedSecurityCenterManagementServer) GetEffectiveEventThreatDetectionCustomModule(context.Context, *GetEffectiveEventThreatDetectionCustomModuleRequest) (*EffectiveEventThreatDetectionCustomModule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEffectiveEventThreatDetectionCustomModule not implemented")
}
func (UnimplementedSecurityCenterManagementServer) ListEventThreatDetectionCustomModules(context.Context, *ListEventThreatDetectionCustomModulesRequest) (*ListEventThreatDetectionCustomModulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEventThreatDetectionCustomModules not implemented")
}
func (UnimplementedSecurityCenterManagementServer) ListDescendantEventThreatDetectionCustomModules(context.Context, *ListDescendantEventThreatDetectionCustomModulesRequest) (*ListDescendantEventThreatDetectionCustomModulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDescendantEventThreatDetectionCustomModules not implemented")
}
func (UnimplementedSecurityCenterManagementServer) GetEventThreatDetectionCustomModule(context.Context, *GetEventThreatDetectionCustomModuleRequest) (*EventThreatDetectionCustomModule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventThreatDetectionCustomModule not implemented")
}
func (UnimplementedSecurityCenterManagementServer) CreateEventThreatDetectionCustomModule(context.Context, *CreateEventThreatDetectionCustomModuleRequest) (*EventThreatDetectionCustomModule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEventThreatDetectionCustomModule not implemented")
}
func (UnimplementedSecurityCenterManagementServer) UpdateEventThreatDetectionCustomModule(context.Context, *UpdateEventThreatDetectionCustomModuleRequest) (*EventThreatDetectionCustomModule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEventThreatDetectionCustomModule not implemented")
}
func (UnimplementedSecurityCenterManagementServer) DeleteEventThreatDetectionCustomModule(context.Context, *DeleteEventThreatDetectionCustomModuleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEventThreatDetectionCustomModule not implemented")
}
func (UnimplementedSecurityCenterManagementServer) ValidateEventThreatDetectionCustomModule(context.Context, *ValidateEventThreatDetectionCustomModuleRequest) (*ValidateEventThreatDetectionCustomModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateEventThreatDetectionCustomModule not implemented")
}
func (UnimplementedSecurityCenterManagementServer) GetSecurityCenterService(context.Context, *GetSecurityCenterServiceRequest) (*SecurityCenterService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecurityCenterService not implemented")
}
func (UnimplementedSecurityCenterManagementServer) ListSecurityCenterServices(context.Context, *ListSecurityCenterServicesRequest) (*ListSecurityCenterServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSecurityCenterServices not implemented")
}
func (UnimplementedSecurityCenterManagementServer) UpdateSecurityCenterService(context.Context, *UpdateSecurityCenterServiceRequest) (*SecurityCenterService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSecurityCenterService not implemented")
}

// UnsafeSecurityCenterManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecurityCenterManagementServer will
// result in compilation errors.
type UnsafeSecurityCenterManagementServer interface {
	mustEmbedUnimplementedSecurityCenterManagementServer()
}

func RegisterSecurityCenterManagementServer(s grpc.ServiceRegistrar, srv SecurityCenterManagementServer) {
	s.RegisterService(&SecurityCenterManagement_ServiceDesc, srv)
}

func _SecurityCenterManagement_ListEffectiveSecurityHealthAnalyticsCustomModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEffectiveSecurityHealthAnalyticsCustomModulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityCenterManagementServer).ListEffectiveSecurityHealthAnalyticsCustomModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityCenterManagement_ListEffectiveSecurityHealthAnalyticsCustomModules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityCenterManagementServer).ListEffectiveSecurityHealthAnalyticsCustomModules(ctx, req.(*ListEffectiveSecurityHealthAnalyticsCustomModulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityCenterManagement_GetEffectiveSecurityHealthAnalyticsCustomModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEffectiveSecurityHealthAnalyticsCustomModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityCenterManagementServer).GetEffectiveSecurityHealthAnalyticsCustomModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityCenterManagement_GetEffectiveSecurityHealthAnalyticsCustomModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityCenterManagementServer).GetEffectiveSecurityHealthAnalyticsCustomModule(ctx, req.(*GetEffectiveSecurityHealthAnalyticsCustomModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityCenterManagement_ListSecurityHealthAnalyticsCustomModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSecurityHealthAnalyticsCustomModulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityCenterManagementServer).ListSecurityHealthAnalyticsCustomModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityCenterManagement_ListSecurityHealthAnalyticsCustomModules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityCenterManagementServer).ListSecurityHealthAnalyticsCustomModules(ctx, req.(*ListSecurityHealthAnalyticsCustomModulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityCenterManagement_ListDescendantSecurityHealthAnalyticsCustomModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDescendantSecurityHealthAnalyticsCustomModulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityCenterManagementServer).ListDescendantSecurityHealthAnalyticsCustomModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityCenterManagement_ListDescendantSecurityHealthAnalyticsCustomModules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityCenterManagementServer).ListDescendantSecurityHealthAnalyticsCustomModules(ctx, req.(*ListDescendantSecurityHealthAnalyticsCustomModulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityCenterManagement_GetSecurityHealthAnalyticsCustomModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecurityHealthAnalyticsCustomModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityCenterManagementServer).GetSecurityHealthAnalyticsCustomModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityCenterManagement_GetSecurityHealthAnalyticsCustomModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityCenterManagementServer).GetSecurityHealthAnalyticsCustomModule(ctx, req.(*GetSecurityHealthAnalyticsCustomModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityCenterManagement_CreateSecurityHealthAnalyticsCustomModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSecurityHealthAnalyticsCustomModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityCenterManagementServer).CreateSecurityHealthAnalyticsCustomModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityCenterManagement_CreateSecurityHealthAnalyticsCustomModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityCenterManagementServer).CreateSecurityHealthAnalyticsCustomModule(ctx, req.(*CreateSecurityHealthAnalyticsCustomModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityCenterManagement_UpdateSecurityHealthAnalyticsCustomModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSecurityHealthAnalyticsCustomModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityCenterManagementServer).UpdateSecurityHealthAnalyticsCustomModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityCenterManagement_UpdateSecurityHealthAnalyticsCustomModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityCenterManagementServer).UpdateSecurityHealthAnalyticsCustomModule(ctx, req.(*UpdateSecurityHealthAnalyticsCustomModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityCenterManagement_DeleteSecurityHealthAnalyticsCustomModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSecurityHealthAnalyticsCustomModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityCenterManagementServer).DeleteSecurityHealthAnalyticsCustomModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityCenterManagement_DeleteSecurityHealthAnalyticsCustomModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityCenterManagementServer).DeleteSecurityHealthAnalyticsCustomModule(ctx, req.(*DeleteSecurityHealthAnalyticsCustomModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityCenterManagement_SimulateSecurityHealthAnalyticsCustomModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimulateSecurityHealthAnalyticsCustomModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityCenterManagementServer).SimulateSecurityHealthAnalyticsCustomModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityCenterManagement_SimulateSecurityHealthAnalyticsCustomModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityCenterManagementServer).SimulateSecurityHealthAnalyticsCustomModule(ctx, req.(*SimulateSecurityHealthAnalyticsCustomModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityCenterManagement_ListEffectiveEventThreatDetectionCustomModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEffectiveEventThreatDetectionCustomModulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityCenterManagementServer).ListEffectiveEventThreatDetectionCustomModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityCenterManagement_ListEffectiveEventThreatDetectionCustomModules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityCenterManagementServer).ListEffectiveEventThreatDetectionCustomModules(ctx, req.(*ListEffectiveEventThreatDetectionCustomModulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityCenterManagement_GetEffectiveEventThreatDetectionCustomModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEffectiveEventThreatDetectionCustomModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityCenterManagementServer).GetEffectiveEventThreatDetectionCustomModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityCenterManagement_GetEffectiveEventThreatDetectionCustomModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityCenterManagementServer).GetEffectiveEventThreatDetectionCustomModule(ctx, req.(*GetEffectiveEventThreatDetectionCustomModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityCenterManagement_ListEventThreatDetectionCustomModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventThreatDetectionCustomModulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityCenterManagementServer).ListEventThreatDetectionCustomModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityCenterManagement_ListEventThreatDetectionCustomModules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityCenterManagementServer).ListEventThreatDetectionCustomModules(ctx, req.(*ListEventThreatDetectionCustomModulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityCenterManagement_ListDescendantEventThreatDetectionCustomModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDescendantEventThreatDetectionCustomModulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityCenterManagementServer).ListDescendantEventThreatDetectionCustomModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityCenterManagement_ListDescendantEventThreatDetectionCustomModules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityCenterManagementServer).ListDescendantEventThreatDetectionCustomModules(ctx, req.(*ListDescendantEventThreatDetectionCustomModulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityCenterManagement_GetEventThreatDetectionCustomModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventThreatDetectionCustomModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityCenterManagementServer).GetEventThreatDetectionCustomModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityCenterManagement_GetEventThreatDetectionCustomModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityCenterManagementServer).GetEventThreatDetectionCustomModule(ctx, req.(*GetEventThreatDetectionCustomModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityCenterManagement_CreateEventThreatDetectionCustomModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventThreatDetectionCustomModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityCenterManagementServer).CreateEventThreatDetectionCustomModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityCenterManagement_CreateEventThreatDetectionCustomModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityCenterManagementServer).CreateEventThreatDetectionCustomModule(ctx, req.(*CreateEventThreatDetectionCustomModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityCenterManagement_UpdateEventThreatDetectionCustomModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEventThreatDetectionCustomModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityCenterManagementServer).UpdateEventThreatDetectionCustomModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityCenterManagement_UpdateEventThreatDetectionCustomModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityCenterManagementServer).UpdateEventThreatDetectionCustomModule(ctx, req.(*UpdateEventThreatDetectionCustomModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityCenterManagement_DeleteEventThreatDetectionCustomModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEventThreatDetectionCustomModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityCenterManagementServer).DeleteEventThreatDetectionCustomModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityCenterManagement_DeleteEventThreatDetectionCustomModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityCenterManagementServer).DeleteEventThreatDetectionCustomModule(ctx, req.(*DeleteEventThreatDetectionCustomModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityCenterManagement_ValidateEventThreatDetectionCustomModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateEventThreatDetectionCustomModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityCenterManagementServer).ValidateEventThreatDetectionCustomModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityCenterManagement_ValidateEventThreatDetectionCustomModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityCenterManagementServer).ValidateEventThreatDetectionCustomModule(ctx, req.(*ValidateEventThreatDetectionCustomModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityCenterManagement_GetSecurityCenterService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecurityCenterServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityCenterManagementServer).GetSecurityCenterService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityCenterManagement_GetSecurityCenterService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityCenterManagementServer).GetSecurityCenterService(ctx, req.(*GetSecurityCenterServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityCenterManagement_ListSecurityCenterServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSecurityCenterServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityCenterManagementServer).ListSecurityCenterServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityCenterManagement_ListSecurityCenterServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityCenterManagementServer).ListSecurityCenterServices(ctx, req.(*ListSecurityCenterServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityCenterManagement_UpdateSecurityCenterService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSecurityCenterServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityCenterManagementServer).UpdateSecurityCenterService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityCenterManagement_UpdateSecurityCenterService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityCenterManagementServer).UpdateSecurityCenterService(ctx, req.(*UpdateSecurityCenterServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SecurityCenterManagement_ServiceDesc is the grpc.ServiceDesc for SecurityCenterManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecurityCenterManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.securitycentermanagement.v1.SecurityCenterManagement",
	HandlerType: (*SecurityCenterManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListEffectiveSecurityHealthAnalyticsCustomModules",
			Handler:    _SecurityCenterManagement_ListEffectiveSecurityHealthAnalyticsCustomModules_Handler,
		},
		{
			MethodName: "GetEffectiveSecurityHealthAnalyticsCustomModule",
			Handler:    _SecurityCenterManagement_GetEffectiveSecurityHealthAnalyticsCustomModule_Handler,
		},
		{
			MethodName: "ListSecurityHealthAnalyticsCustomModules",
			Handler:    _SecurityCenterManagement_ListSecurityHealthAnalyticsCustomModules_Handler,
		},
		{
			MethodName: "ListDescendantSecurityHealthAnalyticsCustomModules",
			Handler:    _SecurityCenterManagement_ListDescendantSecurityHealthAnalyticsCustomModules_Handler,
		},
		{
			MethodName: "GetSecurityHealthAnalyticsCustomModule",
			Handler:    _SecurityCenterManagement_GetSecurityHealthAnalyticsCustomModule_Handler,
		},
		{
			MethodName: "CreateSecurityHealthAnalyticsCustomModule",
			Handler:    _SecurityCenterManagement_CreateSecurityHealthAnalyticsCustomModule_Handler,
		},
		{
			MethodName: "UpdateSecurityHealthAnalyticsCustomModule",
			Handler:    _SecurityCenterManagement_UpdateSecurityHealthAnalyticsCustomModule_Handler,
		},
		{
			MethodName: "DeleteSecurityHealthAnalyticsCustomModule",
			Handler:    _SecurityCenterManagement_DeleteSecurityHealthAnalyticsCustomModule_Handler,
		},
		{
			MethodName: "SimulateSecurityHealthAnalyticsCustomModule",
			Handler:    _SecurityCenterManagement_SimulateSecurityHealthAnalyticsCustomModule_Handler,
		},
		{
			MethodName: "ListEffectiveEventThreatDetectionCustomModules",
			Handler:    _SecurityCenterManagement_ListEffectiveEventThreatDetectionCustomModules_Handler,
		},
		{
			MethodName: "GetEffectiveEventThreatDetectionCustomModule",
			Handler:    _SecurityCenterManagement_GetEffectiveEventThreatDetectionCustomModule_Handler,
		},
		{
			MethodName: "ListEventThreatDetectionCustomModules",
			Handler:    _SecurityCenterManagement_ListEventThreatDetectionCustomModules_Handler,
		},
		{
			MethodName: "ListDescendantEventThreatDetectionCustomModules",
			Handler:    _SecurityCenterManagement_ListDescendantEventThreatDetectionCustomModules_Handler,
		},
		{
			MethodName: "GetEventThreatDetectionCustomModule",
			Handler:    _SecurityCenterManagement_GetEventThreatDetectionCustomModule_Handler,
		},
		{
			MethodName: "CreateEventThreatDetectionCustomModule",
			Handler:    _SecurityCenterManagement_CreateEventThreatDetectionCustomModule_Handler,
		},
		{
			MethodName: "UpdateEventThreatDetectionCustomModule",
			Handler:    _SecurityCenterManagement_UpdateEventThreatDetectionCustomModule_Handler,
		},
		{
			MethodName: "DeleteEventThreatDetectionCustomModule",
			Handler:    _SecurityCenterManagement_DeleteEventThreatDetectionCustomModule_Handler,
		},
		{
			MethodName: "ValidateEventThreatDetectionCustomModule",
			Handler:    _SecurityCenterManagement_ValidateEventThreatDetectionCustomModule_Handler,
		},
		{
			MethodName: "GetSecurityCenterService",
			Handler:    _SecurityCenterManagement_GetSecurityCenterService_Handler,
		},
		{
			MethodName: "ListSecurityCenterServices",
			Handler:    _SecurityCenterManagement_ListSecurityCenterServices_Handler,
		},
		{
			MethodName: "UpdateSecurityCenterService",
			Handler:    _SecurityCenterManagement_UpdateSecurityCenterService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/securitycentermanagement/v1/security_center_management.proto",
}
