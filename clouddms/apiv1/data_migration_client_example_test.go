// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package clouddms_test

import (
	"context"

	clouddms "cloud.google.com/go/clouddms/apiv1"
	"google.golang.org/api/iterator"
	clouddmspb "google.golang.org/genproto/googleapis/cloud/clouddms/v1"
)

func ExampleNewDataMigrationClient() {
	ctx := context.Background()
	c, err := clouddms.NewDataMigrationClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use client.
	_ = c
}

func ExampleDataMigrationClient_ListMigrationJobs() {
	// import clouddmspb "google.golang.org/genproto/googleapis/cloud/clouddms/v1"
	// import "google.golang.org/api/iterator"

	ctx := context.Background()
	c, err := clouddms.NewDataMigrationClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &clouddmspb.ListMigrationJobsRequest{
		// TODO: Fill request struct fields.
	}
	it := c.ListMigrationJobs(ctx, req)
	for {
		resp, err := it.Next()
		if err == iterator.Done {
			break
		}
		if err != nil {
			// TODO: Handle error.
		}
		// TODO: Use resp.
		_ = resp
	}
}

func ExampleDataMigrationClient_GetMigrationJob() {
	// import clouddmspb "google.golang.org/genproto/googleapis/cloud/clouddms/v1"

	ctx := context.Background()
	c, err := clouddms.NewDataMigrationClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &clouddmspb.GetMigrationJobRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.GetMigrationJob(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleDataMigrationClient_CreateMigrationJob() {
	// import clouddmspb "google.golang.org/genproto/googleapis/cloud/clouddms/v1"

	ctx := context.Background()
	c, err := clouddms.NewDataMigrationClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &clouddmspb.CreateMigrationJobRequest{
		// TODO: Fill request struct fields.
	}
	op, err := c.CreateMigrationJob(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}

	resp, err := op.Wait(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleDataMigrationClient_UpdateMigrationJob() {
	// import clouddmspb "google.golang.org/genproto/googleapis/cloud/clouddms/v1"

	ctx := context.Background()
	c, err := clouddms.NewDataMigrationClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &clouddmspb.UpdateMigrationJobRequest{
		// TODO: Fill request struct fields.
	}
	op, err := c.UpdateMigrationJob(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}

	resp, err := op.Wait(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleDataMigrationClient_DeleteMigrationJob() {
	// import clouddmspb "google.golang.org/genproto/googleapis/cloud/clouddms/v1"

	ctx := context.Background()
	c, err := clouddms.NewDataMigrationClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &clouddmspb.DeleteMigrationJobRequest{
		// TODO: Fill request struct fields.
	}
	op, err := c.DeleteMigrationJob(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}

	err = op.Wait(ctx)
	if err != nil {
		// TODO: Handle error.
	}
}

func ExampleDataMigrationClient_StartMigrationJob() {
	// import clouddmspb "google.golang.org/genproto/googleapis/cloud/clouddms/v1"

	ctx := context.Background()
	c, err := clouddms.NewDataMigrationClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &clouddmspb.StartMigrationJobRequest{
		// TODO: Fill request struct fields.
	}
	op, err := c.StartMigrationJob(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}

	resp, err := op.Wait(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleDataMigrationClient_StopMigrationJob() {
	// import clouddmspb "google.golang.org/genproto/googleapis/cloud/clouddms/v1"

	ctx := context.Background()
	c, err := clouddms.NewDataMigrationClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &clouddmspb.StopMigrationJobRequest{
		// TODO: Fill request struct fields.
	}
	op, err := c.StopMigrationJob(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}

	resp, err := op.Wait(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleDataMigrationClient_ResumeMigrationJob() {
	// import clouddmspb "google.golang.org/genproto/googleapis/cloud/clouddms/v1"

	ctx := context.Background()
	c, err := clouddms.NewDataMigrationClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &clouddmspb.ResumeMigrationJobRequest{
		// TODO: Fill request struct fields.
	}
	op, err := c.ResumeMigrationJob(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}

	resp, err := op.Wait(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleDataMigrationClient_PromoteMigrationJob() {
	// import clouddmspb "google.golang.org/genproto/googleapis/cloud/clouddms/v1"

	ctx := context.Background()
	c, err := clouddms.NewDataMigrationClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &clouddmspb.PromoteMigrationJobRequest{
		// TODO: Fill request struct fields.
	}
	op, err := c.PromoteMigrationJob(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}

	resp, err := op.Wait(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleDataMigrationClient_VerifyMigrationJob() {
	// import clouddmspb "google.golang.org/genproto/googleapis/cloud/clouddms/v1"

	ctx := context.Background()
	c, err := clouddms.NewDataMigrationClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &clouddmspb.VerifyMigrationJobRequest{
		// TODO: Fill request struct fields.
	}
	op, err := c.VerifyMigrationJob(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}

	resp, err := op.Wait(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleDataMigrationClient_RestartMigrationJob() {
	// import clouddmspb "google.golang.org/genproto/googleapis/cloud/clouddms/v1"

	ctx := context.Background()
	c, err := clouddms.NewDataMigrationClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &clouddmspb.RestartMigrationJobRequest{
		// TODO: Fill request struct fields.
	}
	op, err := c.RestartMigrationJob(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}

	resp, err := op.Wait(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleDataMigrationClient_GenerateSshScript() {
	// import clouddmspb "google.golang.org/genproto/googleapis/cloud/clouddms/v1"

	ctx := context.Background()
	c, err := clouddms.NewDataMigrationClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &clouddmspb.GenerateSshScriptRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.GenerateSshScript(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleDataMigrationClient_ListConnectionProfiles() {
	// import clouddmspb "google.golang.org/genproto/googleapis/cloud/clouddms/v1"
	// import "google.golang.org/api/iterator"

	ctx := context.Background()
	c, err := clouddms.NewDataMigrationClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &clouddmspb.ListConnectionProfilesRequest{
		// TODO: Fill request struct fields.
	}
	it := c.ListConnectionProfiles(ctx, req)
	for {
		resp, err := it.Next()
		if err == iterator.Done {
			break
		}
		if err != nil {
			// TODO: Handle error.
		}
		// TODO: Use resp.
		_ = resp
	}
}

func ExampleDataMigrationClient_GetConnectionProfile() {
	// import clouddmspb "google.golang.org/genproto/googleapis/cloud/clouddms/v1"

	ctx := context.Background()
	c, err := clouddms.NewDataMigrationClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &clouddmspb.GetConnectionProfileRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.GetConnectionProfile(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleDataMigrationClient_CreateConnectionProfile() {
	// import clouddmspb "google.golang.org/genproto/googleapis/cloud/clouddms/v1"

	ctx := context.Background()
	c, err := clouddms.NewDataMigrationClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &clouddmspb.CreateConnectionProfileRequest{
		// TODO: Fill request struct fields.
	}
	op, err := c.CreateConnectionProfile(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}

	resp, err := op.Wait(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleDataMigrationClient_UpdateConnectionProfile() {
	// import clouddmspb "google.golang.org/genproto/googleapis/cloud/clouddms/v1"

	ctx := context.Background()
	c, err := clouddms.NewDataMigrationClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &clouddmspb.UpdateConnectionProfileRequest{
		// TODO: Fill request struct fields.
	}
	op, err := c.UpdateConnectionProfile(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}

	resp, err := op.Wait(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleDataMigrationClient_DeleteConnectionProfile() {
	// import clouddmspb "google.golang.org/genproto/googleapis/cloud/clouddms/v1"

	ctx := context.Background()
	c, err := clouddms.NewDataMigrationClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &clouddmspb.DeleteConnectionProfileRequest{
		// TODO: Fill request struct fields.
	}
	op, err := c.DeleteConnectionProfile(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}

	err = op.Wait(ctx)
	if err != nil {
		// TODO: Handle error.
	}
}
