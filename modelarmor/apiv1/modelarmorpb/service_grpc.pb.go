// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/modelarmor/v1/service.proto

package modelarmorpb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ModelArmor_ListTemplates_FullMethodName         = "/google.cloud.modelarmor.v1.ModelArmor/ListTemplates"
	ModelArmor_GetTemplate_FullMethodName           = "/google.cloud.modelarmor.v1.ModelArmor/GetTemplate"
	ModelArmor_CreateTemplate_FullMethodName        = "/google.cloud.modelarmor.v1.ModelArmor/CreateTemplate"
	ModelArmor_UpdateTemplate_FullMethodName        = "/google.cloud.modelarmor.v1.ModelArmor/UpdateTemplate"
	ModelArmor_DeleteTemplate_FullMethodName        = "/google.cloud.modelarmor.v1.ModelArmor/DeleteTemplate"
	ModelArmor_GetFloorSetting_FullMethodName       = "/google.cloud.modelarmor.v1.ModelArmor/GetFloorSetting"
	ModelArmor_UpdateFloorSetting_FullMethodName    = "/google.cloud.modelarmor.v1.ModelArmor/UpdateFloorSetting"
	ModelArmor_SanitizeUserPrompt_FullMethodName    = "/google.cloud.modelarmor.v1.ModelArmor/SanitizeUserPrompt"
	ModelArmor_SanitizeModelResponse_FullMethodName = "/google.cloud.modelarmor.v1.ModelArmor/SanitizeModelResponse"
)

// ModelArmorClient is the client API for ModelArmor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModelArmorClient interface {
	// Lists Templates in a given project and location.
	ListTemplates(ctx context.Context, in *ListTemplatesRequest, opts ...grpc.CallOption) (*ListTemplatesResponse, error)
	// Gets details of a single Template.
	GetTemplate(ctx context.Context, in *GetTemplateRequest, opts ...grpc.CallOption) (*Template, error)
	// Creates a new Template in a given project and location.
	CreateTemplate(ctx context.Context, in *CreateTemplateRequest, opts ...grpc.CallOption) (*Template, error)
	// Updates the parameters of a single Template.
	UpdateTemplate(ctx context.Context, in *UpdateTemplateRequest, opts ...grpc.CallOption) (*Template, error)
	// Deletes a single Template.
	DeleteTemplate(ctx context.Context, in *DeleteTemplateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Gets details of a single floor setting of a project
	GetFloorSetting(ctx context.Context, in *GetFloorSettingRequest, opts ...grpc.CallOption) (*FloorSetting, error)
	// Updates the parameters of a single floor setting of a project
	UpdateFloorSetting(ctx context.Context, in *UpdateFloorSettingRequest, opts ...grpc.CallOption) (*FloorSetting, error)
	// Sanitizes User Prompt.
	SanitizeUserPrompt(ctx context.Context, in *SanitizeUserPromptRequest, opts ...grpc.CallOption) (*SanitizeUserPromptResponse, error)
	// Sanitizes Model Response.
	SanitizeModelResponse(ctx context.Context, in *SanitizeModelResponseRequest, opts ...grpc.CallOption) (*SanitizeModelResponseResponse, error)
}

type modelArmorClient struct {
	cc grpc.ClientConnInterface
}

func NewModelArmorClient(cc grpc.ClientConnInterface) ModelArmorClient {
	return &modelArmorClient{cc}
}

func (c *modelArmorClient) ListTemplates(ctx context.Context, in *ListTemplatesRequest, opts ...grpc.CallOption) (*ListTemplatesResponse, error) {
	out := new(ListTemplatesResponse)
	err := c.cc.Invoke(ctx, ModelArmor_ListTemplates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelArmorClient) GetTemplate(ctx context.Context, in *GetTemplateRequest, opts ...grpc.CallOption) (*Template, error) {
	out := new(Template)
	err := c.cc.Invoke(ctx, ModelArmor_GetTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelArmorClient) CreateTemplate(ctx context.Context, in *CreateTemplateRequest, opts ...grpc.CallOption) (*Template, error) {
	out := new(Template)
	err := c.cc.Invoke(ctx, ModelArmor_CreateTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelArmorClient) UpdateTemplate(ctx context.Context, in *UpdateTemplateRequest, opts ...grpc.CallOption) (*Template, error) {
	out := new(Template)
	err := c.cc.Invoke(ctx, ModelArmor_UpdateTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelArmorClient) DeleteTemplate(ctx context.Context, in *DeleteTemplateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ModelArmor_DeleteTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelArmorClient) GetFloorSetting(ctx context.Context, in *GetFloorSettingRequest, opts ...grpc.CallOption) (*FloorSetting, error) {
	out := new(FloorSetting)
	err := c.cc.Invoke(ctx, ModelArmor_GetFloorSetting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelArmorClient) UpdateFloorSetting(ctx context.Context, in *UpdateFloorSettingRequest, opts ...grpc.CallOption) (*FloorSetting, error) {
	out := new(FloorSetting)
	err := c.cc.Invoke(ctx, ModelArmor_UpdateFloorSetting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelArmorClient) SanitizeUserPrompt(ctx context.Context, in *SanitizeUserPromptRequest, opts ...grpc.CallOption) (*SanitizeUserPromptResponse, error) {
	out := new(SanitizeUserPromptResponse)
	err := c.cc.Invoke(ctx, ModelArmor_SanitizeUserPrompt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelArmorClient) SanitizeModelResponse(ctx context.Context, in *SanitizeModelResponseRequest, opts ...grpc.CallOption) (*SanitizeModelResponseResponse, error) {
	out := new(SanitizeModelResponseResponse)
	err := c.cc.Invoke(ctx, ModelArmor_SanitizeModelResponse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModelArmorServer is the server API for ModelArmor service.
// All implementations should embed UnimplementedModelArmorServer
// for forward compatibility
type ModelArmorServer interface {
	// Lists Templates in a given project and location.
	ListTemplates(context.Context, *ListTemplatesRequest) (*ListTemplatesResponse, error)
	// Gets details of a single Template.
	GetTemplate(context.Context, *GetTemplateRequest) (*Template, error)
	// Creates a new Template in a given project and location.
	CreateTemplate(context.Context, *CreateTemplateRequest) (*Template, error)
	// Updates the parameters of a single Template.
	UpdateTemplate(context.Context, *UpdateTemplateRequest) (*Template, error)
	// Deletes a single Template.
	DeleteTemplate(context.Context, *DeleteTemplateRequest) (*emptypb.Empty, error)
	// Gets details of a single floor setting of a project
	GetFloorSetting(context.Context, *GetFloorSettingRequest) (*FloorSetting, error)
	// Updates the parameters of a single floor setting of a project
	UpdateFloorSetting(context.Context, *UpdateFloorSettingRequest) (*FloorSetting, error)
	// Sanitizes User Prompt.
	SanitizeUserPrompt(context.Context, *SanitizeUserPromptRequest) (*SanitizeUserPromptResponse, error)
	// Sanitizes Model Response.
	SanitizeModelResponse(context.Context, *SanitizeModelResponseRequest) (*SanitizeModelResponseResponse, error)
}

// UnimplementedModelArmorServer should be embedded to have forward compatible implementations.
type UnimplementedModelArmorServer struct {
}

func (UnimplementedModelArmorServer) ListTemplates(context.Context, *ListTemplatesRequest) (*ListTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplates not implemented")
}
func (UnimplementedModelArmorServer) GetTemplate(context.Context, *GetTemplateRequest) (*Template, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplate not implemented")
}
func (UnimplementedModelArmorServer) CreateTemplate(context.Context, *CreateTemplateRequest) (*Template, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTemplate not implemented")
}
func (UnimplementedModelArmorServer) UpdateTemplate(context.Context, *UpdateTemplateRequest) (*Template, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTemplate not implemented")
}
func (UnimplementedModelArmorServer) DeleteTemplate(context.Context, *DeleteTemplateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTemplate not implemented")
}
func (UnimplementedModelArmorServer) GetFloorSetting(context.Context, *GetFloorSettingRequest) (*FloorSetting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFloorSetting not implemented")
}
func (UnimplementedModelArmorServer) UpdateFloorSetting(context.Context, *UpdateFloorSettingRequest) (*FloorSetting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFloorSetting not implemented")
}
func (UnimplementedModelArmorServer) SanitizeUserPrompt(context.Context, *SanitizeUserPromptRequest) (*SanitizeUserPromptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SanitizeUserPrompt not implemented")
}
func (UnimplementedModelArmorServer) SanitizeModelResponse(context.Context, *SanitizeModelResponseRequest) (*SanitizeModelResponseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SanitizeModelResponse not implemented")
}

// UnsafeModelArmorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModelArmorServer will
// result in compilation errors.
type UnsafeModelArmorServer interface {
	mustEmbedUnimplementedModelArmorServer()
}

func RegisterModelArmorServer(s grpc.ServiceRegistrar, srv ModelArmorServer) {
	s.RegisterService(&ModelArmor_ServiceDesc, srv)
}

func _ModelArmor_ListTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelArmorServer).ListTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelArmor_ListTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelArmorServer).ListTemplates(ctx, req.(*ListTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelArmor_GetTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelArmorServer).GetTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelArmor_GetTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelArmorServer).GetTemplate(ctx, req.(*GetTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelArmor_CreateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelArmorServer).CreateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelArmor_CreateTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelArmorServer).CreateTemplate(ctx, req.(*CreateTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelArmor_UpdateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelArmorServer).UpdateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelArmor_UpdateTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelArmorServer).UpdateTemplate(ctx, req.(*UpdateTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelArmor_DeleteTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelArmorServer).DeleteTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelArmor_DeleteTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelArmorServer).DeleteTemplate(ctx, req.(*DeleteTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelArmor_GetFloorSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFloorSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelArmorServer).GetFloorSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelArmor_GetFloorSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelArmorServer).GetFloorSetting(ctx, req.(*GetFloorSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelArmor_UpdateFloorSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFloorSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelArmorServer).UpdateFloorSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelArmor_UpdateFloorSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelArmorServer).UpdateFloorSetting(ctx, req.(*UpdateFloorSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelArmor_SanitizeUserPrompt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SanitizeUserPromptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelArmorServer).SanitizeUserPrompt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelArmor_SanitizeUserPrompt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelArmorServer).SanitizeUserPrompt(ctx, req.(*SanitizeUserPromptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelArmor_SanitizeModelResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SanitizeModelResponseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelArmorServer).SanitizeModelResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelArmor_SanitizeModelResponse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelArmorServer).SanitizeModelResponse(ctx, req.(*SanitizeModelResponseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ModelArmor_ServiceDesc is the grpc.ServiceDesc for ModelArmor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModelArmor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.modelarmor.v1.ModelArmor",
	HandlerType: (*ModelArmorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTemplates",
			Handler:    _ModelArmor_ListTemplates_Handler,
		},
		{
			MethodName: "GetTemplate",
			Handler:    _ModelArmor_GetTemplate_Handler,
		},
		{
			MethodName: "CreateTemplate",
			Handler:    _ModelArmor_CreateTemplate_Handler,
		},
		{
			MethodName: "UpdateTemplate",
			Handler:    _ModelArmor_UpdateTemplate_Handler,
		},
		{
			MethodName: "DeleteTemplate",
			Handler:    _ModelArmor_DeleteTemplate_Handler,
		},
		{
			MethodName: "GetFloorSetting",
			Handler:    _ModelArmor_GetFloorSetting_Handler,
		},
		{
			MethodName: "UpdateFloorSetting",
			Handler:    _ModelArmor_UpdateFloorSetting_Handler,
		},
		{
			MethodName: "SanitizeUserPrompt",
			Handler:    _ModelArmor_SanitizeUserPrompt_Handler,
		},
		{
			MethodName: "SanitizeModelResponse",
			Handler:    _ModelArmor_SanitizeModelResponse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/modelarmor/v1/service.proto",
}
