// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/edgenetwork/v1/service.proto

package edgenetworkpb

import (
	context "context"

	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EdgeNetwork_InitializeZone_FullMethodName               = "/google.cloud.edgenetwork.v1.EdgeNetwork/InitializeZone"
	EdgeNetwork_ListZones_FullMethodName                    = "/google.cloud.edgenetwork.v1.EdgeNetwork/ListZones"
	EdgeNetwork_GetZone_FullMethodName                      = "/google.cloud.edgenetwork.v1.EdgeNetwork/GetZone"
	EdgeNetwork_ListNetworks_FullMethodName                 = "/google.cloud.edgenetwork.v1.EdgeNetwork/ListNetworks"
	EdgeNetwork_GetNetwork_FullMethodName                   = "/google.cloud.edgenetwork.v1.EdgeNetwork/GetNetwork"
	EdgeNetwork_DiagnoseNetwork_FullMethodName              = "/google.cloud.edgenetwork.v1.EdgeNetwork/DiagnoseNetwork"
	EdgeNetwork_CreateNetwork_FullMethodName                = "/google.cloud.edgenetwork.v1.EdgeNetwork/CreateNetwork"
	EdgeNetwork_DeleteNetwork_FullMethodName                = "/google.cloud.edgenetwork.v1.EdgeNetwork/DeleteNetwork"
	EdgeNetwork_ListSubnets_FullMethodName                  = "/google.cloud.edgenetwork.v1.EdgeNetwork/ListSubnets"
	EdgeNetwork_GetSubnet_FullMethodName                    = "/google.cloud.edgenetwork.v1.EdgeNetwork/GetSubnet"
	EdgeNetwork_CreateSubnet_FullMethodName                 = "/google.cloud.edgenetwork.v1.EdgeNetwork/CreateSubnet"
	EdgeNetwork_UpdateSubnet_FullMethodName                 = "/google.cloud.edgenetwork.v1.EdgeNetwork/UpdateSubnet"
	EdgeNetwork_DeleteSubnet_FullMethodName                 = "/google.cloud.edgenetwork.v1.EdgeNetwork/DeleteSubnet"
	EdgeNetwork_ListInterconnects_FullMethodName            = "/google.cloud.edgenetwork.v1.EdgeNetwork/ListInterconnects"
	EdgeNetwork_GetInterconnect_FullMethodName              = "/google.cloud.edgenetwork.v1.EdgeNetwork/GetInterconnect"
	EdgeNetwork_DiagnoseInterconnect_FullMethodName         = "/google.cloud.edgenetwork.v1.EdgeNetwork/DiagnoseInterconnect"
	EdgeNetwork_ListInterconnectAttachments_FullMethodName  = "/google.cloud.edgenetwork.v1.EdgeNetwork/ListInterconnectAttachments"
	EdgeNetwork_GetInterconnectAttachment_FullMethodName    = "/google.cloud.edgenetwork.v1.EdgeNetwork/GetInterconnectAttachment"
	EdgeNetwork_CreateInterconnectAttachment_FullMethodName = "/google.cloud.edgenetwork.v1.EdgeNetwork/CreateInterconnectAttachment"
	EdgeNetwork_DeleteInterconnectAttachment_FullMethodName = "/google.cloud.edgenetwork.v1.EdgeNetwork/DeleteInterconnectAttachment"
	EdgeNetwork_ListRouters_FullMethodName                  = "/google.cloud.edgenetwork.v1.EdgeNetwork/ListRouters"
	EdgeNetwork_GetRouter_FullMethodName                    = "/google.cloud.edgenetwork.v1.EdgeNetwork/GetRouter"
	EdgeNetwork_DiagnoseRouter_FullMethodName               = "/google.cloud.edgenetwork.v1.EdgeNetwork/DiagnoseRouter"
	EdgeNetwork_CreateRouter_FullMethodName                 = "/google.cloud.edgenetwork.v1.EdgeNetwork/CreateRouter"
	EdgeNetwork_UpdateRouter_FullMethodName                 = "/google.cloud.edgenetwork.v1.EdgeNetwork/UpdateRouter"
	EdgeNetwork_DeleteRouter_FullMethodName                 = "/google.cloud.edgenetwork.v1.EdgeNetwork/DeleteRouter"
)

// EdgeNetworkClient is the client API for EdgeNetwork service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EdgeNetworkClient interface {
	// InitializeZone will initialize resources for a zone in a project.
	InitializeZone(ctx context.Context, in *InitializeZoneRequest, opts ...grpc.CallOption) (*InitializeZoneResponse, error)
	// Deprecated: Do not use.
	// Deprecated: not implemented.
	// Lists Zones in a given project and location.
	ListZones(ctx context.Context, in *ListZonesRequest, opts ...grpc.CallOption) (*ListZonesResponse, error)
	// Deprecated: Do not use.
	// Deprecated: not implemented.
	// Gets details of a single Zone.
	GetZone(ctx context.Context, in *GetZoneRequest, opts ...grpc.CallOption) (*Zone, error)
	// Lists Networks in a given project and location.
	ListNetworks(ctx context.Context, in *ListNetworksRequest, opts ...grpc.CallOption) (*ListNetworksResponse, error)
	// Gets details of a single Network.
	GetNetwork(ctx context.Context, in *GetNetworkRequest, opts ...grpc.CallOption) (*Network, error)
	// Get the diagnostics of a single network resource.
	DiagnoseNetwork(ctx context.Context, in *DiagnoseNetworkRequest, opts ...grpc.CallOption) (*DiagnoseNetworkResponse, error)
	// Creates a new Network in a given project and location.
	CreateNetwork(ctx context.Context, in *CreateNetworkRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single Network.
	DeleteNetwork(ctx context.Context, in *DeleteNetworkRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists Subnets in a given project and location.
	ListSubnets(ctx context.Context, in *ListSubnetsRequest, opts ...grpc.CallOption) (*ListSubnetsResponse, error)
	// Gets details of a single Subnet.
	GetSubnet(ctx context.Context, in *GetSubnetRequest, opts ...grpc.CallOption) (*Subnet, error)
	// Creates a new Subnet in a given project and location.
	CreateSubnet(ctx context.Context, in *CreateSubnetRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates the parameters of a single Subnet.
	UpdateSubnet(ctx context.Context, in *UpdateSubnetRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single Subnet.
	DeleteSubnet(ctx context.Context, in *DeleteSubnetRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists Interconnects in a given project and location.
	ListInterconnects(ctx context.Context, in *ListInterconnectsRequest, opts ...grpc.CallOption) (*ListInterconnectsResponse, error)
	// Gets details of a single Interconnect.
	GetInterconnect(ctx context.Context, in *GetInterconnectRequest, opts ...grpc.CallOption) (*Interconnect, error)
	// Get the diagnostics of a single interconnect resource.
	DiagnoseInterconnect(ctx context.Context, in *DiagnoseInterconnectRequest, opts ...grpc.CallOption) (*DiagnoseInterconnectResponse, error)
	// Lists InterconnectAttachments in a given project and location.
	ListInterconnectAttachments(ctx context.Context, in *ListInterconnectAttachmentsRequest, opts ...grpc.CallOption) (*ListInterconnectAttachmentsResponse, error)
	// Gets details of a single InterconnectAttachment.
	GetInterconnectAttachment(ctx context.Context, in *GetInterconnectAttachmentRequest, opts ...grpc.CallOption) (*InterconnectAttachment, error)
	// Creates a new InterconnectAttachment in a given project and location.
	CreateInterconnectAttachment(ctx context.Context, in *CreateInterconnectAttachmentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single InterconnectAttachment.
	DeleteInterconnectAttachment(ctx context.Context, in *DeleteInterconnectAttachmentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists Routers in a given project and location.
	ListRouters(ctx context.Context, in *ListRoutersRequest, opts ...grpc.CallOption) (*ListRoutersResponse, error)
	// Gets details of a single Router.
	GetRouter(ctx context.Context, in *GetRouterRequest, opts ...grpc.CallOption) (*Router, error)
	// Get the diagnostics of a single router resource.
	DiagnoseRouter(ctx context.Context, in *DiagnoseRouterRequest, opts ...grpc.CallOption) (*DiagnoseRouterResponse, error)
	// Creates a new Router in a given project and location.
	CreateRouter(ctx context.Context, in *CreateRouterRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates the parameters of a single Router.
	UpdateRouter(ctx context.Context, in *UpdateRouterRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single Router.
	DeleteRouter(ctx context.Context, in *DeleteRouterRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type edgeNetworkClient struct {
	cc grpc.ClientConnInterface
}

func NewEdgeNetworkClient(cc grpc.ClientConnInterface) EdgeNetworkClient {
	return &edgeNetworkClient{cc}
}

func (c *edgeNetworkClient) InitializeZone(ctx context.Context, in *InitializeZoneRequest, opts ...grpc.CallOption) (*InitializeZoneResponse, error) {
	out := new(InitializeZoneResponse)
	err := c.cc.Invoke(ctx, EdgeNetwork_InitializeZone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *edgeNetworkClient) ListZones(ctx context.Context, in *ListZonesRequest, opts ...grpc.CallOption) (*ListZonesResponse, error) {
	out := new(ListZonesResponse)
	err := c.cc.Invoke(ctx, EdgeNetwork_ListZones_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *edgeNetworkClient) GetZone(ctx context.Context, in *GetZoneRequest, opts ...grpc.CallOption) (*Zone, error) {
	out := new(Zone)
	err := c.cc.Invoke(ctx, EdgeNetwork_GetZone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeNetworkClient) ListNetworks(ctx context.Context, in *ListNetworksRequest, opts ...grpc.CallOption) (*ListNetworksResponse, error) {
	out := new(ListNetworksResponse)
	err := c.cc.Invoke(ctx, EdgeNetwork_ListNetworks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeNetworkClient) GetNetwork(ctx context.Context, in *GetNetworkRequest, opts ...grpc.CallOption) (*Network, error) {
	out := new(Network)
	err := c.cc.Invoke(ctx, EdgeNetwork_GetNetwork_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeNetworkClient) DiagnoseNetwork(ctx context.Context, in *DiagnoseNetworkRequest, opts ...grpc.CallOption) (*DiagnoseNetworkResponse, error) {
	out := new(DiagnoseNetworkResponse)
	err := c.cc.Invoke(ctx, EdgeNetwork_DiagnoseNetwork_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeNetworkClient) CreateNetwork(ctx context.Context, in *CreateNetworkRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, EdgeNetwork_CreateNetwork_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeNetworkClient) DeleteNetwork(ctx context.Context, in *DeleteNetworkRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, EdgeNetwork_DeleteNetwork_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeNetworkClient) ListSubnets(ctx context.Context, in *ListSubnetsRequest, opts ...grpc.CallOption) (*ListSubnetsResponse, error) {
	out := new(ListSubnetsResponse)
	err := c.cc.Invoke(ctx, EdgeNetwork_ListSubnets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeNetworkClient) GetSubnet(ctx context.Context, in *GetSubnetRequest, opts ...grpc.CallOption) (*Subnet, error) {
	out := new(Subnet)
	err := c.cc.Invoke(ctx, EdgeNetwork_GetSubnet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeNetworkClient) CreateSubnet(ctx context.Context, in *CreateSubnetRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, EdgeNetwork_CreateSubnet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeNetworkClient) UpdateSubnet(ctx context.Context, in *UpdateSubnetRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, EdgeNetwork_UpdateSubnet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeNetworkClient) DeleteSubnet(ctx context.Context, in *DeleteSubnetRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, EdgeNetwork_DeleteSubnet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeNetworkClient) ListInterconnects(ctx context.Context, in *ListInterconnectsRequest, opts ...grpc.CallOption) (*ListInterconnectsResponse, error) {
	out := new(ListInterconnectsResponse)
	err := c.cc.Invoke(ctx, EdgeNetwork_ListInterconnects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeNetworkClient) GetInterconnect(ctx context.Context, in *GetInterconnectRequest, opts ...grpc.CallOption) (*Interconnect, error) {
	out := new(Interconnect)
	err := c.cc.Invoke(ctx, EdgeNetwork_GetInterconnect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeNetworkClient) DiagnoseInterconnect(ctx context.Context, in *DiagnoseInterconnectRequest, opts ...grpc.CallOption) (*DiagnoseInterconnectResponse, error) {
	out := new(DiagnoseInterconnectResponse)
	err := c.cc.Invoke(ctx, EdgeNetwork_DiagnoseInterconnect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeNetworkClient) ListInterconnectAttachments(ctx context.Context, in *ListInterconnectAttachmentsRequest, opts ...grpc.CallOption) (*ListInterconnectAttachmentsResponse, error) {
	out := new(ListInterconnectAttachmentsResponse)
	err := c.cc.Invoke(ctx, EdgeNetwork_ListInterconnectAttachments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeNetworkClient) GetInterconnectAttachment(ctx context.Context, in *GetInterconnectAttachmentRequest, opts ...grpc.CallOption) (*InterconnectAttachment, error) {
	out := new(InterconnectAttachment)
	err := c.cc.Invoke(ctx, EdgeNetwork_GetInterconnectAttachment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeNetworkClient) CreateInterconnectAttachment(ctx context.Context, in *CreateInterconnectAttachmentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, EdgeNetwork_CreateInterconnectAttachment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeNetworkClient) DeleteInterconnectAttachment(ctx context.Context, in *DeleteInterconnectAttachmentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, EdgeNetwork_DeleteInterconnectAttachment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeNetworkClient) ListRouters(ctx context.Context, in *ListRoutersRequest, opts ...grpc.CallOption) (*ListRoutersResponse, error) {
	out := new(ListRoutersResponse)
	err := c.cc.Invoke(ctx, EdgeNetwork_ListRouters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeNetworkClient) GetRouter(ctx context.Context, in *GetRouterRequest, opts ...grpc.CallOption) (*Router, error) {
	out := new(Router)
	err := c.cc.Invoke(ctx, EdgeNetwork_GetRouter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeNetworkClient) DiagnoseRouter(ctx context.Context, in *DiagnoseRouterRequest, opts ...grpc.CallOption) (*DiagnoseRouterResponse, error) {
	out := new(DiagnoseRouterResponse)
	err := c.cc.Invoke(ctx, EdgeNetwork_DiagnoseRouter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeNetworkClient) CreateRouter(ctx context.Context, in *CreateRouterRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, EdgeNetwork_CreateRouter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeNetworkClient) UpdateRouter(ctx context.Context, in *UpdateRouterRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, EdgeNetwork_UpdateRouter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeNetworkClient) DeleteRouter(ctx context.Context, in *DeleteRouterRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, EdgeNetwork_DeleteRouter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EdgeNetworkServer is the server API for EdgeNetwork service.
// All implementations should embed UnimplementedEdgeNetworkServer
// for forward compatibility
type EdgeNetworkServer interface {
	// InitializeZone will initialize resources for a zone in a project.
	InitializeZone(context.Context, *InitializeZoneRequest) (*InitializeZoneResponse, error)
	// Deprecated: Do not use.
	// Deprecated: not implemented.
	// Lists Zones in a given project and location.
	ListZones(context.Context, *ListZonesRequest) (*ListZonesResponse, error)
	// Deprecated: Do not use.
	// Deprecated: not implemented.
	// Gets details of a single Zone.
	GetZone(context.Context, *GetZoneRequest) (*Zone, error)
	// Lists Networks in a given project and location.
	ListNetworks(context.Context, *ListNetworksRequest) (*ListNetworksResponse, error)
	// Gets details of a single Network.
	GetNetwork(context.Context, *GetNetworkRequest) (*Network, error)
	// Get the diagnostics of a single network resource.
	DiagnoseNetwork(context.Context, *DiagnoseNetworkRequest) (*DiagnoseNetworkResponse, error)
	// Creates a new Network in a given project and location.
	CreateNetwork(context.Context, *CreateNetworkRequest) (*longrunningpb.Operation, error)
	// Deletes a single Network.
	DeleteNetwork(context.Context, *DeleteNetworkRequest) (*longrunningpb.Operation, error)
	// Lists Subnets in a given project and location.
	ListSubnets(context.Context, *ListSubnetsRequest) (*ListSubnetsResponse, error)
	// Gets details of a single Subnet.
	GetSubnet(context.Context, *GetSubnetRequest) (*Subnet, error)
	// Creates a new Subnet in a given project and location.
	CreateSubnet(context.Context, *CreateSubnetRequest) (*longrunningpb.Operation, error)
	// Updates the parameters of a single Subnet.
	UpdateSubnet(context.Context, *UpdateSubnetRequest) (*longrunningpb.Operation, error)
	// Deletes a single Subnet.
	DeleteSubnet(context.Context, *DeleteSubnetRequest) (*longrunningpb.Operation, error)
	// Lists Interconnects in a given project and location.
	ListInterconnects(context.Context, *ListInterconnectsRequest) (*ListInterconnectsResponse, error)
	// Gets details of a single Interconnect.
	GetInterconnect(context.Context, *GetInterconnectRequest) (*Interconnect, error)
	// Get the diagnostics of a single interconnect resource.
	DiagnoseInterconnect(context.Context, *DiagnoseInterconnectRequest) (*DiagnoseInterconnectResponse, error)
	// Lists InterconnectAttachments in a given project and location.
	ListInterconnectAttachments(context.Context, *ListInterconnectAttachmentsRequest) (*ListInterconnectAttachmentsResponse, error)
	// Gets details of a single InterconnectAttachment.
	GetInterconnectAttachment(context.Context, *GetInterconnectAttachmentRequest) (*InterconnectAttachment, error)
	// Creates a new InterconnectAttachment in a given project and location.
	CreateInterconnectAttachment(context.Context, *CreateInterconnectAttachmentRequest) (*longrunningpb.Operation, error)
	// Deletes a single InterconnectAttachment.
	DeleteInterconnectAttachment(context.Context, *DeleteInterconnectAttachmentRequest) (*longrunningpb.Operation, error)
	// Lists Routers in a given project and location.
	ListRouters(context.Context, *ListRoutersRequest) (*ListRoutersResponse, error)
	// Gets details of a single Router.
	GetRouter(context.Context, *GetRouterRequest) (*Router, error)
	// Get the diagnostics of a single router resource.
	DiagnoseRouter(context.Context, *DiagnoseRouterRequest) (*DiagnoseRouterResponse, error)
	// Creates a new Router in a given project and location.
	CreateRouter(context.Context, *CreateRouterRequest) (*longrunningpb.Operation, error)
	// Updates the parameters of a single Router.
	UpdateRouter(context.Context, *UpdateRouterRequest) (*longrunningpb.Operation, error)
	// Deletes a single Router.
	DeleteRouter(context.Context, *DeleteRouterRequest) (*longrunningpb.Operation, error)
}

// UnimplementedEdgeNetworkServer should be embedded to have forward compatible implementations.
type UnimplementedEdgeNetworkServer struct {
}

func (UnimplementedEdgeNetworkServer) InitializeZone(context.Context, *InitializeZoneRequest) (*InitializeZoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitializeZone not implemented")
}
func (UnimplementedEdgeNetworkServer) ListZones(context.Context, *ListZonesRequest) (*ListZonesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListZones not implemented")
}
func (UnimplementedEdgeNetworkServer) GetZone(context.Context, *GetZoneRequest) (*Zone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetZone not implemented")
}
func (UnimplementedEdgeNetworkServer) ListNetworks(context.Context, *ListNetworksRequest) (*ListNetworksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNetworks not implemented")
}
func (UnimplementedEdgeNetworkServer) GetNetwork(context.Context, *GetNetworkRequest) (*Network, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetwork not implemented")
}
func (UnimplementedEdgeNetworkServer) DiagnoseNetwork(context.Context, *DiagnoseNetworkRequest) (*DiagnoseNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiagnoseNetwork not implemented")
}
func (UnimplementedEdgeNetworkServer) CreateNetwork(context.Context, *CreateNetworkRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNetwork not implemented")
}
func (UnimplementedEdgeNetworkServer) DeleteNetwork(context.Context, *DeleteNetworkRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNetwork not implemented")
}
func (UnimplementedEdgeNetworkServer) ListSubnets(context.Context, *ListSubnetsRequest) (*ListSubnetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubnets not implemented")
}
func (UnimplementedEdgeNetworkServer) GetSubnet(context.Context, *GetSubnetRequest) (*Subnet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnet not implemented")
}
func (UnimplementedEdgeNetworkServer) CreateSubnet(context.Context, *CreateSubnetRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubnet not implemented")
}
func (UnimplementedEdgeNetworkServer) UpdateSubnet(context.Context, *UpdateSubnetRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubnet not implemented")
}
func (UnimplementedEdgeNetworkServer) DeleteSubnet(context.Context, *DeleteSubnetRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubnet not implemented")
}
func (UnimplementedEdgeNetworkServer) ListInterconnects(context.Context, *ListInterconnectsRequest) (*ListInterconnectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInterconnects not implemented")
}
func (UnimplementedEdgeNetworkServer) GetInterconnect(context.Context, *GetInterconnectRequest) (*Interconnect, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInterconnect not implemented")
}
func (UnimplementedEdgeNetworkServer) DiagnoseInterconnect(context.Context, *DiagnoseInterconnectRequest) (*DiagnoseInterconnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiagnoseInterconnect not implemented")
}
func (UnimplementedEdgeNetworkServer) ListInterconnectAttachments(context.Context, *ListInterconnectAttachmentsRequest) (*ListInterconnectAttachmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInterconnectAttachments not implemented")
}
func (UnimplementedEdgeNetworkServer) GetInterconnectAttachment(context.Context, *GetInterconnectAttachmentRequest) (*InterconnectAttachment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInterconnectAttachment not implemented")
}
func (UnimplementedEdgeNetworkServer) CreateInterconnectAttachment(context.Context, *CreateInterconnectAttachmentRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInterconnectAttachment not implemented")
}
func (UnimplementedEdgeNetworkServer) DeleteInterconnectAttachment(context.Context, *DeleteInterconnectAttachmentRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInterconnectAttachment not implemented")
}
func (UnimplementedEdgeNetworkServer) ListRouters(context.Context, *ListRoutersRequest) (*ListRoutersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRouters not implemented")
}
func (UnimplementedEdgeNetworkServer) GetRouter(context.Context, *GetRouterRequest) (*Router, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRouter not implemented")
}
func (UnimplementedEdgeNetworkServer) DiagnoseRouter(context.Context, *DiagnoseRouterRequest) (*DiagnoseRouterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiagnoseRouter not implemented")
}
func (UnimplementedEdgeNetworkServer) CreateRouter(context.Context, *CreateRouterRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRouter not implemented")
}
func (UnimplementedEdgeNetworkServer) UpdateRouter(context.Context, *UpdateRouterRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRouter not implemented")
}
func (UnimplementedEdgeNetworkServer) DeleteRouter(context.Context, *DeleteRouterRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRouter not implemented")
}

// UnsafeEdgeNetworkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EdgeNetworkServer will
// result in compilation errors.
type UnsafeEdgeNetworkServer interface {
	mustEmbedUnimplementedEdgeNetworkServer()
}

func RegisterEdgeNetworkServer(s grpc.ServiceRegistrar, srv EdgeNetworkServer) {
	s.RegisterService(&EdgeNetwork_ServiceDesc, srv)
}

func _EdgeNetwork_InitializeZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitializeZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeNetworkServer).InitializeZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EdgeNetwork_InitializeZone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeNetworkServer).InitializeZone(ctx, req.(*InitializeZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeNetwork_ListZones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListZonesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeNetworkServer).ListZones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EdgeNetwork_ListZones_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeNetworkServer).ListZones(ctx, req.(*ListZonesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeNetwork_GetZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeNetworkServer).GetZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EdgeNetwork_GetZone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeNetworkServer).GetZone(ctx, req.(*GetZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeNetwork_ListNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNetworksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeNetworkServer).ListNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EdgeNetwork_ListNetworks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeNetworkServer).ListNetworks(ctx, req.(*ListNetworksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeNetwork_GetNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeNetworkServer).GetNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EdgeNetwork_GetNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeNetworkServer).GetNetwork(ctx, req.(*GetNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeNetwork_DiagnoseNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiagnoseNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeNetworkServer).DiagnoseNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EdgeNetwork_DiagnoseNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeNetworkServer).DiagnoseNetwork(ctx, req.(*DiagnoseNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeNetwork_CreateNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeNetworkServer).CreateNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EdgeNetwork_CreateNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeNetworkServer).CreateNetwork(ctx, req.(*CreateNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeNetwork_DeleteNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeNetworkServer).DeleteNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EdgeNetwork_DeleteNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeNetworkServer).DeleteNetwork(ctx, req.(*DeleteNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeNetwork_ListSubnets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubnetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeNetworkServer).ListSubnets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EdgeNetwork_ListSubnets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeNetworkServer).ListSubnets(ctx, req.(*ListSubnetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeNetwork_GetSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeNetworkServer).GetSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EdgeNetwork_GetSubnet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeNetworkServer).GetSubnet(ctx, req.(*GetSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeNetwork_CreateSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeNetworkServer).CreateSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EdgeNetwork_CreateSubnet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeNetworkServer).CreateSubnet(ctx, req.(*CreateSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeNetwork_UpdateSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeNetworkServer).UpdateSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EdgeNetwork_UpdateSubnet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeNetworkServer).UpdateSubnet(ctx, req.(*UpdateSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeNetwork_DeleteSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeNetworkServer).DeleteSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EdgeNetwork_DeleteSubnet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeNetworkServer).DeleteSubnet(ctx, req.(*DeleteSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeNetwork_ListInterconnects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInterconnectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeNetworkServer).ListInterconnects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EdgeNetwork_ListInterconnects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeNetworkServer).ListInterconnects(ctx, req.(*ListInterconnectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeNetwork_GetInterconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInterconnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeNetworkServer).GetInterconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EdgeNetwork_GetInterconnect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeNetworkServer).GetInterconnect(ctx, req.(*GetInterconnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeNetwork_DiagnoseInterconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiagnoseInterconnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeNetworkServer).DiagnoseInterconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EdgeNetwork_DiagnoseInterconnect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeNetworkServer).DiagnoseInterconnect(ctx, req.(*DiagnoseInterconnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeNetwork_ListInterconnectAttachments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInterconnectAttachmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeNetworkServer).ListInterconnectAttachments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EdgeNetwork_ListInterconnectAttachments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeNetworkServer).ListInterconnectAttachments(ctx, req.(*ListInterconnectAttachmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeNetwork_GetInterconnectAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInterconnectAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeNetworkServer).GetInterconnectAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EdgeNetwork_GetInterconnectAttachment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeNetworkServer).GetInterconnectAttachment(ctx, req.(*GetInterconnectAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeNetwork_CreateInterconnectAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInterconnectAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeNetworkServer).CreateInterconnectAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EdgeNetwork_CreateInterconnectAttachment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeNetworkServer).CreateInterconnectAttachment(ctx, req.(*CreateInterconnectAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeNetwork_DeleteInterconnectAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInterconnectAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeNetworkServer).DeleteInterconnectAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EdgeNetwork_DeleteInterconnectAttachment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeNetworkServer).DeleteInterconnectAttachment(ctx, req.(*DeleteInterconnectAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeNetwork_ListRouters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoutersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeNetworkServer).ListRouters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EdgeNetwork_ListRouters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeNetworkServer).ListRouters(ctx, req.(*ListRoutersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeNetwork_GetRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRouterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeNetworkServer).GetRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EdgeNetwork_GetRouter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeNetworkServer).GetRouter(ctx, req.(*GetRouterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeNetwork_DiagnoseRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiagnoseRouterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeNetworkServer).DiagnoseRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EdgeNetwork_DiagnoseRouter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeNetworkServer).DiagnoseRouter(ctx, req.(*DiagnoseRouterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeNetwork_CreateRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRouterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeNetworkServer).CreateRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EdgeNetwork_CreateRouter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeNetworkServer).CreateRouter(ctx, req.(*CreateRouterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeNetwork_UpdateRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRouterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeNetworkServer).UpdateRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EdgeNetwork_UpdateRouter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeNetworkServer).UpdateRouter(ctx, req.(*UpdateRouterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeNetwork_DeleteRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRouterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeNetworkServer).DeleteRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EdgeNetwork_DeleteRouter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeNetworkServer).DeleteRouter(ctx, req.(*DeleteRouterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EdgeNetwork_ServiceDesc is the grpc.ServiceDesc for EdgeNetwork service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EdgeNetwork_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.edgenetwork.v1.EdgeNetwork",
	HandlerType: (*EdgeNetworkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitializeZone",
			Handler:    _EdgeNetwork_InitializeZone_Handler,
		},
		{
			MethodName: "ListZones",
			Handler:    _EdgeNetwork_ListZones_Handler,
		},
		{
			MethodName: "GetZone",
			Handler:    _EdgeNetwork_GetZone_Handler,
		},
		{
			MethodName: "ListNetworks",
			Handler:    _EdgeNetwork_ListNetworks_Handler,
		},
		{
			MethodName: "GetNetwork",
			Handler:    _EdgeNetwork_GetNetwork_Handler,
		},
		{
			MethodName: "DiagnoseNetwork",
			Handler:    _EdgeNetwork_DiagnoseNetwork_Handler,
		},
		{
			MethodName: "CreateNetwork",
			Handler:    _EdgeNetwork_CreateNetwork_Handler,
		},
		{
			MethodName: "DeleteNetwork",
			Handler:    _EdgeNetwork_DeleteNetwork_Handler,
		},
		{
			MethodName: "ListSubnets",
			Handler:    _EdgeNetwork_ListSubnets_Handler,
		},
		{
			MethodName: "GetSubnet",
			Handler:    _EdgeNetwork_GetSubnet_Handler,
		},
		{
			MethodName: "CreateSubnet",
			Handler:    _EdgeNetwork_CreateSubnet_Handler,
		},
		{
			MethodName: "UpdateSubnet",
			Handler:    _EdgeNetwork_UpdateSubnet_Handler,
		},
		{
			MethodName: "DeleteSubnet",
			Handler:    _EdgeNetwork_DeleteSubnet_Handler,
		},
		{
			MethodName: "ListInterconnects",
			Handler:    _EdgeNetwork_ListInterconnects_Handler,
		},
		{
			MethodName: "GetInterconnect",
			Handler:    _EdgeNetwork_GetInterconnect_Handler,
		},
		{
			MethodName: "DiagnoseInterconnect",
			Handler:    _EdgeNetwork_DiagnoseInterconnect_Handler,
		},
		{
			MethodName: "ListInterconnectAttachments",
			Handler:    _EdgeNetwork_ListInterconnectAttachments_Handler,
		},
		{
			MethodName: "GetInterconnectAttachment",
			Handler:    _EdgeNetwork_GetInterconnectAttachment_Handler,
		},
		{
			MethodName: "CreateInterconnectAttachment",
			Handler:    _EdgeNetwork_CreateInterconnectAttachment_Handler,
		},
		{
			MethodName: "DeleteInterconnectAttachment",
			Handler:    _EdgeNetwork_DeleteInterconnectAttachment_Handler,
		},
		{
			MethodName: "ListRouters",
			Handler:    _EdgeNetwork_ListRouters_Handler,
		},
		{
			MethodName: "GetRouter",
			Handler:    _EdgeNetwork_GetRouter_Handler,
		},
		{
			MethodName: "DiagnoseRouter",
			Handler:    _EdgeNetwork_DiagnoseRouter_Handler,
		},
		{
			MethodName: "CreateRouter",
			Handler:    _EdgeNetwork_CreateRouter_Handler,
		},
		{
			MethodName: "UpdateRouter",
			Handler:    _EdgeNetwork_UpdateRouter_Handler,
		},
		{
			MethodName: "DeleteRouter",
			Handler:    _EdgeNetwork_DeleteRouter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/edgenetwork/v1/service.proto",
}
