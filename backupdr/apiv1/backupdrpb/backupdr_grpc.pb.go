// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/backupdr/v1/backupdr.proto

package backupdrpb

import (
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BackupDR_ListManagementServers_FullMethodName       = "/google.cloud.backupdr.v1.BackupDR/ListManagementServers"
	BackupDR_GetManagementServer_FullMethodName         = "/google.cloud.backupdr.v1.BackupDR/GetManagementServer"
	BackupDR_CreateManagementServer_FullMethodName      = "/google.cloud.backupdr.v1.BackupDR/CreateManagementServer"
	BackupDR_DeleteManagementServer_FullMethodName      = "/google.cloud.backupdr.v1.BackupDR/DeleteManagementServer"
	BackupDR_CreateBackupVault_FullMethodName           = "/google.cloud.backupdr.v1.BackupDR/CreateBackupVault"
	BackupDR_ListBackupVaults_FullMethodName            = "/google.cloud.backupdr.v1.BackupDR/ListBackupVaults"
	BackupDR_FetchUsableBackupVaults_FullMethodName     = "/google.cloud.backupdr.v1.BackupDR/FetchUsableBackupVaults"
	BackupDR_GetBackupVault_FullMethodName              = "/google.cloud.backupdr.v1.BackupDR/GetBackupVault"
	BackupDR_UpdateBackupVault_FullMethodName           = "/google.cloud.backupdr.v1.BackupDR/UpdateBackupVault"
	BackupDR_DeleteBackupVault_FullMethodName           = "/google.cloud.backupdr.v1.BackupDR/DeleteBackupVault"
	BackupDR_ListDataSources_FullMethodName             = "/google.cloud.backupdr.v1.BackupDR/ListDataSources"
	BackupDR_GetDataSource_FullMethodName               = "/google.cloud.backupdr.v1.BackupDR/GetDataSource"
	BackupDR_UpdateDataSource_FullMethodName            = "/google.cloud.backupdr.v1.BackupDR/UpdateDataSource"
	BackupDR_ListBackups_FullMethodName                 = "/google.cloud.backupdr.v1.BackupDR/ListBackups"
	BackupDR_GetBackup_FullMethodName                   = "/google.cloud.backupdr.v1.BackupDR/GetBackup"
	BackupDR_UpdateBackup_FullMethodName                = "/google.cloud.backupdr.v1.BackupDR/UpdateBackup"
	BackupDR_DeleteBackup_FullMethodName                = "/google.cloud.backupdr.v1.BackupDR/DeleteBackup"
	BackupDR_RestoreBackup_FullMethodName               = "/google.cloud.backupdr.v1.BackupDR/RestoreBackup"
	BackupDR_CreateBackupPlan_FullMethodName            = "/google.cloud.backupdr.v1.BackupDR/CreateBackupPlan"
	BackupDR_GetBackupPlan_FullMethodName               = "/google.cloud.backupdr.v1.BackupDR/GetBackupPlan"
	BackupDR_ListBackupPlans_FullMethodName             = "/google.cloud.backupdr.v1.BackupDR/ListBackupPlans"
	BackupDR_DeleteBackupPlan_FullMethodName            = "/google.cloud.backupdr.v1.BackupDR/DeleteBackupPlan"
	BackupDR_CreateBackupPlanAssociation_FullMethodName = "/google.cloud.backupdr.v1.BackupDR/CreateBackupPlanAssociation"
	BackupDR_GetBackupPlanAssociation_FullMethodName    = "/google.cloud.backupdr.v1.BackupDR/GetBackupPlanAssociation"
	BackupDR_ListBackupPlanAssociations_FullMethodName  = "/google.cloud.backupdr.v1.BackupDR/ListBackupPlanAssociations"
	BackupDR_DeleteBackupPlanAssociation_FullMethodName = "/google.cloud.backupdr.v1.BackupDR/DeleteBackupPlanAssociation"
	BackupDR_TriggerBackup_FullMethodName               = "/google.cloud.backupdr.v1.BackupDR/TriggerBackup"
	BackupDR_InitializeService_FullMethodName           = "/google.cloud.backupdr.v1.BackupDR/InitializeService"
)

// BackupDRClient is the client API for BackupDR service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackupDRClient interface {
	// Lists ManagementServers in a given project and location.
	ListManagementServers(ctx context.Context, in *ListManagementServersRequest, opts ...grpc.CallOption) (*ListManagementServersResponse, error)
	// Gets details of a single ManagementServer.
	GetManagementServer(ctx context.Context, in *GetManagementServerRequest, opts ...grpc.CallOption) (*ManagementServer, error)
	// Creates a new ManagementServer in a given project and location.
	CreateManagementServer(ctx context.Context, in *CreateManagementServerRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single ManagementServer.
	DeleteManagementServer(ctx context.Context, in *DeleteManagementServerRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Creates a new BackupVault in a given project and location.
	CreateBackupVault(ctx context.Context, in *CreateBackupVaultRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists BackupVaults in a given project and location.
	ListBackupVaults(ctx context.Context, in *ListBackupVaultsRequest, opts ...grpc.CallOption) (*ListBackupVaultsResponse, error)
	// FetchUsableBackupVaults lists usable BackupVaults in a given project and
	// location. Usable BackupVault are the ones that user has
	// backupdr.backupVaults.get permission.
	FetchUsableBackupVaults(ctx context.Context, in *FetchUsableBackupVaultsRequest, opts ...grpc.CallOption) (*FetchUsableBackupVaultsResponse, error)
	// Gets details of a BackupVault.
	GetBackupVault(ctx context.Context, in *GetBackupVaultRequest, opts ...grpc.CallOption) (*BackupVault, error)
	// Updates the settings of a BackupVault.
	UpdateBackupVault(ctx context.Context, in *UpdateBackupVaultRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a BackupVault.
	DeleteBackupVault(ctx context.Context, in *DeleteBackupVaultRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists DataSources in a given project and location.
	ListDataSources(ctx context.Context, in *ListDataSourcesRequest, opts ...grpc.CallOption) (*ListDataSourcesResponse, error)
	// Gets details of a DataSource.
	GetDataSource(ctx context.Context, in *GetDataSourceRequest, opts ...grpc.CallOption) (*DataSource, error)
	// Updates the settings of a DataSource.
	UpdateDataSource(ctx context.Context, in *UpdateDataSourceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists Backups in a given project and location.
	ListBackups(ctx context.Context, in *ListBackupsRequest, opts ...grpc.CallOption) (*ListBackupsResponse, error)
	// Gets details of a Backup.
	GetBackup(ctx context.Context, in *GetBackupRequest, opts ...grpc.CallOption) (*Backup, error)
	// Updates the settings of a Backup.
	UpdateBackup(ctx context.Context, in *UpdateBackupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a Backup.
	DeleteBackup(ctx context.Context, in *DeleteBackupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Restore from a Backup
	RestoreBackup(ctx context.Context, in *RestoreBackupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Create a BackupPlan
	CreateBackupPlan(ctx context.Context, in *CreateBackupPlanRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets details of a single BackupPlan.
	GetBackupPlan(ctx context.Context, in *GetBackupPlanRequest, opts ...grpc.CallOption) (*BackupPlan, error)
	// Lists BackupPlans in a given project and location.
	ListBackupPlans(ctx context.Context, in *ListBackupPlansRequest, opts ...grpc.CallOption) (*ListBackupPlansResponse, error)
	// Deletes a single BackupPlan.
	DeleteBackupPlan(ctx context.Context, in *DeleteBackupPlanRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Create a BackupPlanAssociation
	CreateBackupPlanAssociation(ctx context.Context, in *CreateBackupPlanAssociationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets details of a single BackupPlanAssociation.
	GetBackupPlanAssociation(ctx context.Context, in *GetBackupPlanAssociationRequest, opts ...grpc.CallOption) (*BackupPlanAssociation, error)
	// Lists BackupPlanAssociations in a given project and location.
	ListBackupPlanAssociations(ctx context.Context, in *ListBackupPlanAssociationsRequest, opts ...grpc.CallOption) (*ListBackupPlanAssociationsResponse, error)
	// Deletes a single BackupPlanAssociation.
	DeleteBackupPlanAssociation(ctx context.Context, in *DeleteBackupPlanAssociationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Triggers a new Backup.
	TriggerBackup(ctx context.Context, in *TriggerBackupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Initializes the service related config for a project.
	InitializeService(ctx context.Context, in *InitializeServiceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type backupDRClient struct {
	cc grpc.ClientConnInterface
}

func NewBackupDRClient(cc grpc.ClientConnInterface) BackupDRClient {
	return &backupDRClient{cc}
}

func (c *backupDRClient) ListManagementServers(ctx context.Context, in *ListManagementServersRequest, opts ...grpc.CallOption) (*ListManagementServersResponse, error) {
	out := new(ListManagementServersResponse)
	err := c.cc.Invoke(ctx, BackupDR_ListManagementServers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupDRClient) GetManagementServer(ctx context.Context, in *GetManagementServerRequest, opts ...grpc.CallOption) (*ManagementServer, error) {
	out := new(ManagementServer)
	err := c.cc.Invoke(ctx, BackupDR_GetManagementServer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupDRClient) CreateManagementServer(ctx context.Context, in *CreateManagementServerRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, BackupDR_CreateManagementServer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupDRClient) DeleteManagementServer(ctx context.Context, in *DeleteManagementServerRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, BackupDR_DeleteManagementServer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupDRClient) CreateBackupVault(ctx context.Context, in *CreateBackupVaultRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, BackupDR_CreateBackupVault_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupDRClient) ListBackupVaults(ctx context.Context, in *ListBackupVaultsRequest, opts ...grpc.CallOption) (*ListBackupVaultsResponse, error) {
	out := new(ListBackupVaultsResponse)
	err := c.cc.Invoke(ctx, BackupDR_ListBackupVaults_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupDRClient) FetchUsableBackupVaults(ctx context.Context, in *FetchUsableBackupVaultsRequest, opts ...grpc.CallOption) (*FetchUsableBackupVaultsResponse, error) {
	out := new(FetchUsableBackupVaultsResponse)
	err := c.cc.Invoke(ctx, BackupDR_FetchUsableBackupVaults_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupDRClient) GetBackupVault(ctx context.Context, in *GetBackupVaultRequest, opts ...grpc.CallOption) (*BackupVault, error) {
	out := new(BackupVault)
	err := c.cc.Invoke(ctx, BackupDR_GetBackupVault_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupDRClient) UpdateBackupVault(ctx context.Context, in *UpdateBackupVaultRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, BackupDR_UpdateBackupVault_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupDRClient) DeleteBackupVault(ctx context.Context, in *DeleteBackupVaultRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, BackupDR_DeleteBackupVault_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupDRClient) ListDataSources(ctx context.Context, in *ListDataSourcesRequest, opts ...grpc.CallOption) (*ListDataSourcesResponse, error) {
	out := new(ListDataSourcesResponse)
	err := c.cc.Invoke(ctx, BackupDR_ListDataSources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupDRClient) GetDataSource(ctx context.Context, in *GetDataSourceRequest, opts ...grpc.CallOption) (*DataSource, error) {
	out := new(DataSource)
	err := c.cc.Invoke(ctx, BackupDR_GetDataSource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupDRClient) UpdateDataSource(ctx context.Context, in *UpdateDataSourceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, BackupDR_UpdateDataSource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupDRClient) ListBackups(ctx context.Context, in *ListBackupsRequest, opts ...grpc.CallOption) (*ListBackupsResponse, error) {
	out := new(ListBackupsResponse)
	err := c.cc.Invoke(ctx, BackupDR_ListBackups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupDRClient) GetBackup(ctx context.Context, in *GetBackupRequest, opts ...grpc.CallOption) (*Backup, error) {
	out := new(Backup)
	err := c.cc.Invoke(ctx, BackupDR_GetBackup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupDRClient) UpdateBackup(ctx context.Context, in *UpdateBackupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, BackupDR_UpdateBackup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupDRClient) DeleteBackup(ctx context.Context, in *DeleteBackupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, BackupDR_DeleteBackup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupDRClient) RestoreBackup(ctx context.Context, in *RestoreBackupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, BackupDR_RestoreBackup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupDRClient) CreateBackupPlan(ctx context.Context, in *CreateBackupPlanRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, BackupDR_CreateBackupPlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupDRClient) GetBackupPlan(ctx context.Context, in *GetBackupPlanRequest, opts ...grpc.CallOption) (*BackupPlan, error) {
	out := new(BackupPlan)
	err := c.cc.Invoke(ctx, BackupDR_GetBackupPlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupDRClient) ListBackupPlans(ctx context.Context, in *ListBackupPlansRequest, opts ...grpc.CallOption) (*ListBackupPlansResponse, error) {
	out := new(ListBackupPlansResponse)
	err := c.cc.Invoke(ctx, BackupDR_ListBackupPlans_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupDRClient) DeleteBackupPlan(ctx context.Context, in *DeleteBackupPlanRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, BackupDR_DeleteBackupPlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupDRClient) CreateBackupPlanAssociation(ctx context.Context, in *CreateBackupPlanAssociationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, BackupDR_CreateBackupPlanAssociation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupDRClient) GetBackupPlanAssociation(ctx context.Context, in *GetBackupPlanAssociationRequest, opts ...grpc.CallOption) (*BackupPlanAssociation, error) {
	out := new(BackupPlanAssociation)
	err := c.cc.Invoke(ctx, BackupDR_GetBackupPlanAssociation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupDRClient) ListBackupPlanAssociations(ctx context.Context, in *ListBackupPlanAssociationsRequest, opts ...grpc.CallOption) (*ListBackupPlanAssociationsResponse, error) {
	out := new(ListBackupPlanAssociationsResponse)
	err := c.cc.Invoke(ctx, BackupDR_ListBackupPlanAssociations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupDRClient) DeleteBackupPlanAssociation(ctx context.Context, in *DeleteBackupPlanAssociationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, BackupDR_DeleteBackupPlanAssociation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupDRClient) TriggerBackup(ctx context.Context, in *TriggerBackupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, BackupDR_TriggerBackup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupDRClient) InitializeService(ctx context.Context, in *InitializeServiceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, BackupDR_InitializeService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackupDRServer is the server API for BackupDR service.
// All implementations should embed UnimplementedBackupDRServer
// for forward compatibility
type BackupDRServer interface {
	// Lists ManagementServers in a given project and location.
	ListManagementServers(context.Context, *ListManagementServersRequest) (*ListManagementServersResponse, error)
	// Gets details of a single ManagementServer.
	GetManagementServer(context.Context, *GetManagementServerRequest) (*ManagementServer, error)
	// Creates a new ManagementServer in a given project and location.
	CreateManagementServer(context.Context, *CreateManagementServerRequest) (*longrunningpb.Operation, error)
	// Deletes a single ManagementServer.
	DeleteManagementServer(context.Context, *DeleteManagementServerRequest) (*longrunningpb.Operation, error)
	// Creates a new BackupVault in a given project and location.
	CreateBackupVault(context.Context, *CreateBackupVaultRequest) (*longrunningpb.Operation, error)
	// Lists BackupVaults in a given project and location.
	ListBackupVaults(context.Context, *ListBackupVaultsRequest) (*ListBackupVaultsResponse, error)
	// FetchUsableBackupVaults lists usable BackupVaults in a given project and
	// location. Usable BackupVault are the ones that user has
	// backupdr.backupVaults.get permission.
	FetchUsableBackupVaults(context.Context, *FetchUsableBackupVaultsRequest) (*FetchUsableBackupVaultsResponse, error)
	// Gets details of a BackupVault.
	GetBackupVault(context.Context, *GetBackupVaultRequest) (*BackupVault, error)
	// Updates the settings of a BackupVault.
	UpdateBackupVault(context.Context, *UpdateBackupVaultRequest) (*longrunningpb.Operation, error)
	// Deletes a BackupVault.
	DeleteBackupVault(context.Context, *DeleteBackupVaultRequest) (*longrunningpb.Operation, error)
	// Lists DataSources in a given project and location.
	ListDataSources(context.Context, *ListDataSourcesRequest) (*ListDataSourcesResponse, error)
	// Gets details of a DataSource.
	GetDataSource(context.Context, *GetDataSourceRequest) (*DataSource, error)
	// Updates the settings of a DataSource.
	UpdateDataSource(context.Context, *UpdateDataSourceRequest) (*longrunningpb.Operation, error)
	// Lists Backups in a given project and location.
	ListBackups(context.Context, *ListBackupsRequest) (*ListBackupsResponse, error)
	// Gets details of a Backup.
	GetBackup(context.Context, *GetBackupRequest) (*Backup, error)
	// Updates the settings of a Backup.
	UpdateBackup(context.Context, *UpdateBackupRequest) (*longrunningpb.Operation, error)
	// Deletes a Backup.
	DeleteBackup(context.Context, *DeleteBackupRequest) (*longrunningpb.Operation, error)
	// Restore from a Backup
	RestoreBackup(context.Context, *RestoreBackupRequest) (*longrunningpb.Operation, error)
	// Create a BackupPlan
	CreateBackupPlan(context.Context, *CreateBackupPlanRequest) (*longrunningpb.Operation, error)
	// Gets details of a single BackupPlan.
	GetBackupPlan(context.Context, *GetBackupPlanRequest) (*BackupPlan, error)
	// Lists BackupPlans in a given project and location.
	ListBackupPlans(context.Context, *ListBackupPlansRequest) (*ListBackupPlansResponse, error)
	// Deletes a single BackupPlan.
	DeleteBackupPlan(context.Context, *DeleteBackupPlanRequest) (*longrunningpb.Operation, error)
	// Create a BackupPlanAssociation
	CreateBackupPlanAssociation(context.Context, *CreateBackupPlanAssociationRequest) (*longrunningpb.Operation, error)
	// Gets details of a single BackupPlanAssociation.
	GetBackupPlanAssociation(context.Context, *GetBackupPlanAssociationRequest) (*BackupPlanAssociation, error)
	// Lists BackupPlanAssociations in a given project and location.
	ListBackupPlanAssociations(context.Context, *ListBackupPlanAssociationsRequest) (*ListBackupPlanAssociationsResponse, error)
	// Deletes a single BackupPlanAssociation.
	DeleteBackupPlanAssociation(context.Context, *DeleteBackupPlanAssociationRequest) (*longrunningpb.Operation, error)
	// Triggers a new Backup.
	TriggerBackup(context.Context, *TriggerBackupRequest) (*longrunningpb.Operation, error)
	// Initializes the service related config for a project.
	InitializeService(context.Context, *InitializeServiceRequest) (*longrunningpb.Operation, error)
}

// UnimplementedBackupDRServer should be embedded to have forward compatible implementations.
type UnimplementedBackupDRServer struct {
}

func (UnimplementedBackupDRServer) ListManagementServers(context.Context, *ListManagementServersRequest) (*ListManagementServersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListManagementServers not implemented")
}
func (UnimplementedBackupDRServer) GetManagementServer(context.Context, *GetManagementServerRequest) (*ManagementServer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManagementServer not implemented")
}
func (UnimplementedBackupDRServer) CreateManagementServer(context.Context, *CreateManagementServerRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateManagementServer not implemented")
}
func (UnimplementedBackupDRServer) DeleteManagementServer(context.Context, *DeleteManagementServerRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteManagementServer not implemented")
}
func (UnimplementedBackupDRServer) CreateBackupVault(context.Context, *CreateBackupVaultRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBackupVault not implemented")
}
func (UnimplementedBackupDRServer) ListBackupVaults(context.Context, *ListBackupVaultsRequest) (*ListBackupVaultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBackupVaults not implemented")
}
func (UnimplementedBackupDRServer) FetchUsableBackupVaults(context.Context, *FetchUsableBackupVaultsRequest) (*FetchUsableBackupVaultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchUsableBackupVaults not implemented")
}
func (UnimplementedBackupDRServer) GetBackupVault(context.Context, *GetBackupVaultRequest) (*BackupVault, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBackupVault not implemented")
}
func (UnimplementedBackupDRServer) UpdateBackupVault(context.Context, *UpdateBackupVaultRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBackupVault not implemented")
}
func (UnimplementedBackupDRServer) DeleteBackupVault(context.Context, *DeleteBackupVaultRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBackupVault not implemented")
}
func (UnimplementedBackupDRServer) ListDataSources(context.Context, *ListDataSourcesRequest) (*ListDataSourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDataSources not implemented")
}
func (UnimplementedBackupDRServer) GetDataSource(context.Context, *GetDataSourceRequest) (*DataSource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataSource not implemented")
}
func (UnimplementedBackupDRServer) UpdateDataSource(context.Context, *UpdateDataSourceRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDataSource not implemented")
}
func (UnimplementedBackupDRServer) ListBackups(context.Context, *ListBackupsRequest) (*ListBackupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBackups not implemented")
}
func (UnimplementedBackupDRServer) GetBackup(context.Context, *GetBackupRequest) (*Backup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBackup not implemented")
}
func (UnimplementedBackupDRServer) UpdateBackup(context.Context, *UpdateBackupRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBackup not implemented")
}
func (UnimplementedBackupDRServer) DeleteBackup(context.Context, *DeleteBackupRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBackup not implemented")
}
func (UnimplementedBackupDRServer) RestoreBackup(context.Context, *RestoreBackupRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreBackup not implemented")
}
func (UnimplementedBackupDRServer) CreateBackupPlan(context.Context, *CreateBackupPlanRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBackupPlan not implemented")
}
func (UnimplementedBackupDRServer) GetBackupPlan(context.Context, *GetBackupPlanRequest) (*BackupPlan, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBackupPlan not implemented")
}
func (UnimplementedBackupDRServer) ListBackupPlans(context.Context, *ListBackupPlansRequest) (*ListBackupPlansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBackupPlans not implemented")
}
func (UnimplementedBackupDRServer) DeleteBackupPlan(context.Context, *DeleteBackupPlanRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBackupPlan not implemented")
}
func (UnimplementedBackupDRServer) CreateBackupPlanAssociation(context.Context, *CreateBackupPlanAssociationRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBackupPlanAssociation not implemented")
}
func (UnimplementedBackupDRServer) GetBackupPlanAssociation(context.Context, *GetBackupPlanAssociationRequest) (*BackupPlanAssociation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBackupPlanAssociation not implemented")
}
func (UnimplementedBackupDRServer) ListBackupPlanAssociations(context.Context, *ListBackupPlanAssociationsRequest) (*ListBackupPlanAssociationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBackupPlanAssociations not implemented")
}
func (UnimplementedBackupDRServer) DeleteBackupPlanAssociation(context.Context, *DeleteBackupPlanAssociationRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBackupPlanAssociation not implemented")
}
func (UnimplementedBackupDRServer) TriggerBackup(context.Context, *TriggerBackupRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerBackup not implemented")
}
func (UnimplementedBackupDRServer) InitializeService(context.Context, *InitializeServiceRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitializeService not implemented")
}

// UnsafeBackupDRServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackupDRServer will
// result in compilation errors.
type UnsafeBackupDRServer interface {
	mustEmbedUnimplementedBackupDRServer()
}

func RegisterBackupDRServer(s grpc.ServiceRegistrar, srv BackupDRServer) {
	s.RegisterService(&BackupDR_ServiceDesc, srv)
}

func _BackupDR_ListManagementServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListManagementServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupDRServer).ListManagementServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackupDR_ListManagementServers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupDRServer).ListManagementServers(ctx, req.(*ListManagementServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackupDR_GetManagementServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetManagementServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupDRServer).GetManagementServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackupDR_GetManagementServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupDRServer).GetManagementServer(ctx, req.(*GetManagementServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackupDR_CreateManagementServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateManagementServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupDRServer).CreateManagementServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackupDR_CreateManagementServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupDRServer).CreateManagementServer(ctx, req.(*CreateManagementServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackupDR_DeleteManagementServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteManagementServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupDRServer).DeleteManagementServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackupDR_DeleteManagementServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupDRServer).DeleteManagementServer(ctx, req.(*DeleteManagementServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackupDR_CreateBackupVault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBackupVaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupDRServer).CreateBackupVault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackupDR_CreateBackupVault_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupDRServer).CreateBackupVault(ctx, req.(*CreateBackupVaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackupDR_ListBackupVaults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBackupVaultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupDRServer).ListBackupVaults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackupDR_ListBackupVaults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupDRServer).ListBackupVaults(ctx, req.(*ListBackupVaultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackupDR_FetchUsableBackupVaults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchUsableBackupVaultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupDRServer).FetchUsableBackupVaults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackupDR_FetchUsableBackupVaults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupDRServer).FetchUsableBackupVaults(ctx, req.(*FetchUsableBackupVaultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackupDR_GetBackupVault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBackupVaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupDRServer).GetBackupVault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackupDR_GetBackupVault_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupDRServer).GetBackupVault(ctx, req.(*GetBackupVaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackupDR_UpdateBackupVault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBackupVaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupDRServer).UpdateBackupVault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackupDR_UpdateBackupVault_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupDRServer).UpdateBackupVault(ctx, req.(*UpdateBackupVaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackupDR_DeleteBackupVault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBackupVaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupDRServer).DeleteBackupVault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackupDR_DeleteBackupVault_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupDRServer).DeleteBackupVault(ctx, req.(*DeleteBackupVaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackupDR_ListDataSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDataSourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupDRServer).ListDataSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackupDR_ListDataSources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupDRServer).ListDataSources(ctx, req.(*ListDataSourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackupDR_GetDataSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupDRServer).GetDataSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackupDR_GetDataSource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupDRServer).GetDataSource(ctx, req.(*GetDataSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackupDR_UpdateDataSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDataSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupDRServer).UpdateDataSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackupDR_UpdateDataSource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupDRServer).UpdateDataSource(ctx, req.(*UpdateDataSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackupDR_ListBackups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBackupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupDRServer).ListBackups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackupDR_ListBackups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupDRServer).ListBackups(ctx, req.(*ListBackupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackupDR_GetBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupDRServer).GetBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackupDR_GetBackup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupDRServer).GetBackup(ctx, req.(*GetBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackupDR_UpdateBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupDRServer).UpdateBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackupDR_UpdateBackup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupDRServer).UpdateBackup(ctx, req.(*UpdateBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackupDR_DeleteBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupDRServer).DeleteBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackupDR_DeleteBackup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupDRServer).DeleteBackup(ctx, req.(*DeleteBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackupDR_RestoreBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupDRServer).RestoreBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackupDR_RestoreBackup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupDRServer).RestoreBackup(ctx, req.(*RestoreBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackupDR_CreateBackupPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBackupPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupDRServer).CreateBackupPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackupDR_CreateBackupPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupDRServer).CreateBackupPlan(ctx, req.(*CreateBackupPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackupDR_GetBackupPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBackupPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupDRServer).GetBackupPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackupDR_GetBackupPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupDRServer).GetBackupPlan(ctx, req.(*GetBackupPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackupDR_ListBackupPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBackupPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupDRServer).ListBackupPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackupDR_ListBackupPlans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupDRServer).ListBackupPlans(ctx, req.(*ListBackupPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackupDR_DeleteBackupPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBackupPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupDRServer).DeleteBackupPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackupDR_DeleteBackupPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupDRServer).DeleteBackupPlan(ctx, req.(*DeleteBackupPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackupDR_CreateBackupPlanAssociation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBackupPlanAssociationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupDRServer).CreateBackupPlanAssociation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackupDR_CreateBackupPlanAssociation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupDRServer).CreateBackupPlanAssociation(ctx, req.(*CreateBackupPlanAssociationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackupDR_GetBackupPlanAssociation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBackupPlanAssociationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupDRServer).GetBackupPlanAssociation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackupDR_GetBackupPlanAssociation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupDRServer).GetBackupPlanAssociation(ctx, req.(*GetBackupPlanAssociationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackupDR_ListBackupPlanAssociations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBackupPlanAssociationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupDRServer).ListBackupPlanAssociations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackupDR_ListBackupPlanAssociations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupDRServer).ListBackupPlanAssociations(ctx, req.(*ListBackupPlanAssociationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackupDR_DeleteBackupPlanAssociation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBackupPlanAssociationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupDRServer).DeleteBackupPlanAssociation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackupDR_DeleteBackupPlanAssociation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupDRServer).DeleteBackupPlanAssociation(ctx, req.(*DeleteBackupPlanAssociationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackupDR_TriggerBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupDRServer).TriggerBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackupDR_TriggerBackup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupDRServer).TriggerBackup(ctx, req.(*TriggerBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackupDR_InitializeService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitializeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupDRServer).InitializeService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackupDR_InitializeService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupDRServer).InitializeService(ctx, req.(*InitializeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BackupDR_ServiceDesc is the grpc.ServiceDesc for BackupDR service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BackupDR_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.backupdr.v1.BackupDR",
	HandlerType: (*BackupDRServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListManagementServers",
			Handler:    _BackupDR_ListManagementServers_Handler,
		},
		{
			MethodName: "GetManagementServer",
			Handler:    _BackupDR_GetManagementServer_Handler,
		},
		{
			MethodName: "CreateManagementServer",
			Handler:    _BackupDR_CreateManagementServer_Handler,
		},
		{
			MethodName: "DeleteManagementServer",
			Handler:    _BackupDR_DeleteManagementServer_Handler,
		},
		{
			MethodName: "CreateBackupVault",
			Handler:    _BackupDR_CreateBackupVault_Handler,
		},
		{
			MethodName: "ListBackupVaults",
			Handler:    _BackupDR_ListBackupVaults_Handler,
		},
		{
			MethodName: "FetchUsableBackupVaults",
			Handler:    _BackupDR_FetchUsableBackupVaults_Handler,
		},
		{
			MethodName: "GetBackupVault",
			Handler:    _BackupDR_GetBackupVault_Handler,
		},
		{
			MethodName: "UpdateBackupVault",
			Handler:    _BackupDR_UpdateBackupVault_Handler,
		},
		{
			MethodName: "DeleteBackupVault",
			Handler:    _BackupDR_DeleteBackupVault_Handler,
		},
		{
			MethodName: "ListDataSources",
			Handler:    _BackupDR_ListDataSources_Handler,
		},
		{
			MethodName: "GetDataSource",
			Handler:    _BackupDR_GetDataSource_Handler,
		},
		{
			MethodName: "UpdateDataSource",
			Handler:    _BackupDR_UpdateDataSource_Handler,
		},
		{
			MethodName: "ListBackups",
			Handler:    _BackupDR_ListBackups_Handler,
		},
		{
			MethodName: "GetBackup",
			Handler:    _BackupDR_GetBackup_Handler,
		},
		{
			MethodName: "UpdateBackup",
			Handler:    _BackupDR_UpdateBackup_Handler,
		},
		{
			MethodName: "DeleteBackup",
			Handler:    _BackupDR_DeleteBackup_Handler,
		},
		{
			MethodName: "RestoreBackup",
			Handler:    _BackupDR_RestoreBackup_Handler,
		},
		{
			MethodName: "CreateBackupPlan",
			Handler:    _BackupDR_CreateBackupPlan_Handler,
		},
		{
			MethodName: "GetBackupPlan",
			Handler:    _BackupDR_GetBackupPlan_Handler,
		},
		{
			MethodName: "ListBackupPlans",
			Handler:    _BackupDR_ListBackupPlans_Handler,
		},
		{
			MethodName: "DeleteBackupPlan",
			Handler:    _BackupDR_DeleteBackupPlan_Handler,
		},
		{
			MethodName: "CreateBackupPlanAssociation",
			Handler:    _BackupDR_CreateBackupPlanAssociation_Handler,
		},
		{
			MethodName: "GetBackupPlanAssociation",
			Handler:    _BackupDR_GetBackupPlanAssociation_Handler,
		},
		{
			MethodName: "ListBackupPlanAssociations",
			Handler:    _BackupDR_ListBackupPlanAssociations_Handler,
		},
		{
			MethodName: "DeleteBackupPlanAssociation",
			Handler:    _BackupDR_DeleteBackupPlanAssociation_Handler,
		},
		{
			MethodName: "TriggerBackup",
			Handler:    _BackupDR_TriggerBackup_Handler,
		},
		{
			MethodName: "InitializeService",
			Handler:    _BackupDR_InitializeService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/backupdr/v1/backupdr.proto",
}
