// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.7
// source: google/cloud/backupdr/v1/datasourcereference.proto

package backupdrpb

import (
	reflect "reflect"
	sync "sync"

	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DataSourceReference is a reference to a DataSource resource.
type DataSourceReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier. The resource name of the DataSourceReference.
	// Format:
	// projects/{project}/locations/{location}/dataSourceReferences/{data_source_reference}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. The resource name of the DataSource.
	// Format:
	// projects/{project}/locations/{location}/backupVaults/{backupVault}/dataSources/{dataSource}
	DataSource string `protobuf:"bytes,2,opt,name=data_source,json=dataSource,proto3" json:"data_source,omitempty"`
	// Output only. The time when the DataSourceReference was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The backup configuration state of the DataSource.
	DataSourceBackupConfigState BackupConfigState `protobuf:"varint,4,opt,name=data_source_backup_config_state,json=dataSourceBackupConfigState,proto3,enum=google.cloud.backupdr.v1.BackupConfigState" json:"data_source_backup_config_state,omitempty"`
	// Output only. Number of backups in the DataSource.
	DataSourceBackupCount int64 `protobuf:"varint,5,opt,name=data_source_backup_count,json=dataSourceBackupCount,proto3" json:"data_source_backup_count,omitempty"`
	// Output only. Information of backup configuration on the DataSource.
	DataSourceBackupConfigInfo *DataSourceBackupConfigInfo `protobuf:"bytes,6,opt,name=data_source_backup_config_info,json=dataSourceBackupConfigInfo,proto3" json:"data_source_backup_config_info,omitempty"`
	// Output only. The GCP resource that the DataSource is associated with.
	DataSourceGcpResourceInfo *DataSourceGcpResourceInfo `protobuf:"bytes,7,opt,name=data_source_gcp_resource_info,json=dataSourceGcpResourceInfo,proto3" json:"data_source_gcp_resource_info,omitempty"`
}

func (x *DataSourceReference) Reset() {
	*x = DataSourceReference{}
	mi := &file_google_cloud_backupdr_v1_datasourcereference_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataSourceReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceReference) ProtoMessage() {}

func (x *DataSourceReference) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_backupdr_v1_datasourcereference_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceReference.ProtoReflect.Descriptor instead.
func (*DataSourceReference) Descriptor() ([]byte, []int) {
	return file_google_cloud_backupdr_v1_datasourcereference_proto_rawDescGZIP(), []int{0}
}

func (x *DataSourceReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DataSourceReference) GetDataSource() string {
	if x != nil {
		return x.DataSource
	}
	return ""
}

func (x *DataSourceReference) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *DataSourceReference) GetDataSourceBackupConfigState() BackupConfigState {
	if x != nil {
		return x.DataSourceBackupConfigState
	}
	return BackupConfigState_BACKUP_CONFIG_STATE_UNSPECIFIED
}

func (x *DataSourceReference) GetDataSourceBackupCount() int64 {
	if x != nil {
		return x.DataSourceBackupCount
	}
	return 0
}

func (x *DataSourceReference) GetDataSourceBackupConfigInfo() *DataSourceBackupConfigInfo {
	if x != nil {
		return x.DataSourceBackupConfigInfo
	}
	return nil
}

func (x *DataSourceReference) GetDataSourceGcpResourceInfo() *DataSourceGcpResourceInfo {
	if x != nil {
		return x.DataSourceGcpResourceInfo
	}
	return nil
}

// Information of backup configuration on the DataSource.
type DataSourceBackupConfigInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The status of the last backup in this DataSource
	LastBackupState BackupConfigInfo_LastBackupState `protobuf:"varint,1,opt,name=last_backup_state,json=lastBackupState,proto3,enum=google.cloud.backupdr.v1.BackupConfigInfo_LastBackupState" json:"last_backup_state,omitempty"`
	// Output only. Timestamp of the last successful backup to this DataSource.
	LastSuccessfulBackupConsistencyTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=last_successful_backup_consistency_time,json=lastSuccessfulBackupConsistencyTime,proto3" json:"last_successful_backup_consistency_time,omitempty"`
}

func (x *DataSourceBackupConfigInfo) Reset() {
	*x = DataSourceBackupConfigInfo{}
	mi := &file_google_cloud_backupdr_v1_datasourcereference_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataSourceBackupConfigInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceBackupConfigInfo) ProtoMessage() {}

func (x *DataSourceBackupConfigInfo) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_backupdr_v1_datasourcereference_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceBackupConfigInfo.ProtoReflect.Descriptor instead.
func (*DataSourceBackupConfigInfo) Descriptor() ([]byte, []int) {
	return file_google_cloud_backupdr_v1_datasourcereference_proto_rawDescGZIP(), []int{1}
}

func (x *DataSourceBackupConfigInfo) GetLastBackupState() BackupConfigInfo_LastBackupState {
	if x != nil {
		return x.LastBackupState
	}
	return BackupConfigInfo_LAST_BACKUP_STATE_UNSPECIFIED
}

func (x *DataSourceBackupConfigInfo) GetLastSuccessfulBackupConsistencyTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastSuccessfulBackupConsistencyTime
	}
	return nil
}

// The GCP resource that the DataSource is associated with.
type DataSourceGcpResourceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The resource name of the GCP resource.
	// Ex: projects/{project}/zones/{zone}/instances/{instance}
	GcpResourcename string `protobuf:"bytes,1,opt,name=gcp_resourcename,json=gcpResourcename,proto3" json:"gcp_resourcename,omitempty"`
	// Output only. The type of the GCP resource.
	// Ex: compute.googleapis.com/Instance
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Output only. The location of the GCP resource.
	// Ex: <region>/<zone>/"global"/"unspecified"
	Location string `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
	// The properties of the GCP resource.
	//
	// Types that are assignable to ResourceProperties:
	//
	//	*DataSourceGcpResourceInfo_CloudSqlInstanceProperties
	ResourceProperties isDataSourceGcpResourceInfo_ResourceProperties `protobuf_oneof:"resource_properties"`
}

func (x *DataSourceGcpResourceInfo) Reset() {
	*x = DataSourceGcpResourceInfo{}
	mi := &file_google_cloud_backupdr_v1_datasourcereference_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataSourceGcpResourceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceGcpResourceInfo) ProtoMessage() {}

func (x *DataSourceGcpResourceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_backupdr_v1_datasourcereference_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceGcpResourceInfo.ProtoReflect.Descriptor instead.
func (*DataSourceGcpResourceInfo) Descriptor() ([]byte, []int) {
	return file_google_cloud_backupdr_v1_datasourcereference_proto_rawDescGZIP(), []int{2}
}

func (x *DataSourceGcpResourceInfo) GetGcpResourcename() string {
	if x != nil {
		return x.GcpResourcename
	}
	return ""
}

func (x *DataSourceGcpResourceInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DataSourceGcpResourceInfo) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (m *DataSourceGcpResourceInfo) GetResourceProperties() isDataSourceGcpResourceInfo_ResourceProperties {
	if m != nil {
		return m.ResourceProperties
	}
	return nil
}

func (x *DataSourceGcpResourceInfo) GetCloudSqlInstanceProperties() *CloudSqlInstanceDataSourceReferenceProperties {
	if x, ok := x.GetResourceProperties().(*DataSourceGcpResourceInfo_CloudSqlInstanceProperties); ok {
		return x.CloudSqlInstanceProperties
	}
	return nil
}

type isDataSourceGcpResourceInfo_ResourceProperties interface {
	isDataSourceGcpResourceInfo_ResourceProperties()
}

type DataSourceGcpResourceInfo_CloudSqlInstanceProperties struct {
	// Output only. The properties of the Cloud SQL instance.
	CloudSqlInstanceProperties *CloudSqlInstanceDataSourceReferenceProperties `protobuf:"bytes,4,opt,name=cloud_sql_instance_properties,json=cloudSqlInstanceProperties,proto3,oneof"`
}

func (*DataSourceGcpResourceInfo_CloudSqlInstanceProperties) isDataSourceGcpResourceInfo_ResourceProperties() {
}

// Request for the GetDataSourceReference method.
type GetDataSourceReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the DataSourceReference to retrieve.
	// Format:
	// projects/{project}/locations/{location}/dataSourceReferences/{data_source_reference}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetDataSourceReferenceRequest) Reset() {
	*x = GetDataSourceReferenceRequest{}
	mi := &file_google_cloud_backupdr_v1_datasourcereference_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDataSourceReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataSourceReferenceRequest) ProtoMessage() {}

func (x *GetDataSourceReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_backupdr_v1_datasourcereference_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataSourceReferenceRequest.ProtoReflect.Descriptor instead.
func (*GetDataSourceReferenceRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_backupdr_v1_datasourcereference_proto_rawDescGZIP(), []int{3}
}

func (x *GetDataSourceReferenceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Request for the FetchDataSourceReferencesForResourceType method.
type FetchDataSourceReferencesForResourceTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent resource name.
	// Format: projects/{project}/locations/{location}
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Required. The type of the GCP resource.
	// Ex: sql.googleapis.com/Instance
	ResourceType string `protobuf:"bytes,2,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	// Optional. The maximum number of DataSourceReferences to return. The service
	// may return fewer than this value. If unspecified, at most 50
	// DataSourceReferences will be returned. The maximum value is 100; values
	// above 100 will be coerced to 100.
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Optional. A page token, received from a previous call of
	// `FetchDataSourceReferencesForResourceType`.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to
	// `FetchDataSourceReferencesForResourceType` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Optional. A filter expression that filters the results fetched in the
	// response. The expression must specify the field name, a comparison
	// operator, and the value that you want to use for filtering. Supported
	// fields:
	// * data_source
	// * data_source_gcp_resource_info.gcp_resourcename
	// * data_source_backup_config_state
	// * data_source_backup_count
	// * data_source_backup_config_info.last_backup_state
	// * data_source_gcp_resource_info.gcp_resourcename
	// * data_source_gcp_resource_info.type
	// * data_source_gcp_resource_info.location
	// * data_source_gcp_resource_info.cloud_sql_instance_properties.instance_create_time
	Filter string `protobuf:"bytes,5,opt,name=filter,proto3" json:"filter,omitempty"`
	// Optional. A comma-separated list of fields to order by, sorted in ascending
	// order. Use "desc" after a field name for descending.
	//
	// Supported fields:
	// * name
	OrderBy string `protobuf:"bytes,6,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *FetchDataSourceReferencesForResourceTypeRequest) Reset() {
	*x = FetchDataSourceReferencesForResourceTypeRequest{}
	mi := &file_google_cloud_backupdr_v1_datasourcereference_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchDataSourceReferencesForResourceTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchDataSourceReferencesForResourceTypeRequest) ProtoMessage() {}

func (x *FetchDataSourceReferencesForResourceTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_backupdr_v1_datasourcereference_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchDataSourceReferencesForResourceTypeRequest.ProtoReflect.Descriptor instead.
func (*FetchDataSourceReferencesForResourceTypeRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_backupdr_v1_datasourcereference_proto_rawDescGZIP(), []int{4}
}

func (x *FetchDataSourceReferencesForResourceTypeRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *FetchDataSourceReferencesForResourceTypeRequest) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *FetchDataSourceReferencesForResourceTypeRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *FetchDataSourceReferencesForResourceTypeRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *FetchDataSourceReferencesForResourceTypeRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *FetchDataSourceReferencesForResourceTypeRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

// Response for the FetchDataSourceReferencesForResourceType method.
type FetchDataSourceReferencesForResourceTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The DataSourceReferences from the specified parent.
	DataSourceReferences []*DataSourceReference `protobuf:"bytes,1,rep,name=data_source_references,json=dataSourceReferences,proto3" json:"data_source_references,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *FetchDataSourceReferencesForResourceTypeResponse) Reset() {
	*x = FetchDataSourceReferencesForResourceTypeResponse{}
	mi := &file_google_cloud_backupdr_v1_datasourcereference_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchDataSourceReferencesForResourceTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchDataSourceReferencesForResourceTypeResponse) ProtoMessage() {}

func (x *FetchDataSourceReferencesForResourceTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_backupdr_v1_datasourcereference_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchDataSourceReferencesForResourceTypeResponse.ProtoReflect.Descriptor instead.
func (*FetchDataSourceReferencesForResourceTypeResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_backupdr_v1_datasourcereference_proto_rawDescGZIP(), []int{5}
}

func (x *FetchDataSourceReferencesForResourceTypeResponse) GetDataSourceReferences() []*DataSourceReference {
	if x != nil {
		return x.DataSourceReferences
	}
	return nil
}

func (x *FetchDataSourceReferencesForResourceTypeResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

var File_google_cloud_backupdr_v1_datasourcereference_proto protoreflect.FileDescriptor

var file_google_cloud_backupdr_v1_datasourcereference_proto_rawDesc = []byte{
	0x0a, 0x32, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x64, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x64, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x64,
	0x72, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x76, 0x61, 0x75, 0x6c, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x64, 0x72, 0x2f, 0x76, 0x31,
	0x2f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x73, 0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa3, 0x06, 0x0a,
	0x13, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x08, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a,
	0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2a, 0xe0, 0x41, 0x03, 0xfa, 0x41, 0x24, 0x0a, 0x22, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x64, 0x72, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0a,
	0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x76, 0x0a, 0x1f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x64, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x1b, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x18, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x15, 0x64, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x7d, 0x0a, 0x1e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x64, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x1a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x7a, 0x0a, 0x1d, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x67, 0x63, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x64, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x63,
	0x70, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x19, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x63,
	0x70, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x3a, 0xb2, 0x01,
	0xea, 0x41, 0xae, 0x01, 0x0a, 0x2b, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x64, 0x72, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x54, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2f,
	0x7b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x7d, 0x2a, 0x14, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x32, 0x13, 0x64,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x22, 0x80, 0x02, 0x0a, 0x1a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x6b, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x64, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0f, 0x6c,
	0x61, 0x73, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x75,
	0x0a, 0x27, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75,
	0x6c, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x23, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb0, 0x02, 0x0a, 0x19, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x47, 0x63, 0x70, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x10, 0x67, 0x63, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x0f, 0x67, 0x63, 0x70, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x91, 0x01,
	0x0a, 0x1d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x73, 0x71, 0x6c, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x64, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x48, 0x00, 0x52, 0x1a, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x71, 0x6c, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x42, 0x15, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0x68, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2d, 0x0a,
	0x2b, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x64, 0x72, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0xab, 0x02, 0x0a, 0x2f, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x46, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2d, 0x12, 0x2b,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x64, 0x72, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79,
	0x22, 0xbf, 0x01, 0x0a, 0x30, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x46, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x16, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x64, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x14, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x42, 0xc8, 0x01, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x64, 0x72,
	0x2e, 0x76, 0x31, 0x42, 0x18, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x38, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x64, 0x72, 0x2f, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x64, 0x72, 0x70, 0x62, 0x3b, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x64, 0x72, 0x70, 0x62, 0xaa, 0x02, 0x18, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44,
	0x52, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x18, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5c, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x5c, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x52, 0x5c, 0x56, 0x31, 0xea,
	0x02, 0x1b, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a,
	0x3a, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x52, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_backupdr_v1_datasourcereference_proto_rawDescOnce sync.Once
	file_google_cloud_backupdr_v1_datasourcereference_proto_rawDescData = file_google_cloud_backupdr_v1_datasourcereference_proto_rawDesc
)

func file_google_cloud_backupdr_v1_datasourcereference_proto_rawDescGZIP() []byte {
	file_google_cloud_backupdr_v1_datasourcereference_proto_rawDescOnce.Do(func() {
		file_google_cloud_backupdr_v1_datasourcereference_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_backupdr_v1_datasourcereference_proto_rawDescData)
	})
	return file_google_cloud_backupdr_v1_datasourcereference_proto_rawDescData
}

var file_google_cloud_backupdr_v1_datasourcereference_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_google_cloud_backupdr_v1_datasourcereference_proto_goTypes = []any{
	(*DataSourceReference)(nil),                              // 0: google.cloud.backupdr.v1.DataSourceReference
	(*DataSourceBackupConfigInfo)(nil),                       // 1: google.cloud.backupdr.v1.DataSourceBackupConfigInfo
	(*DataSourceGcpResourceInfo)(nil),                        // 2: google.cloud.backupdr.v1.DataSourceGcpResourceInfo
	(*GetDataSourceReferenceRequest)(nil),                    // 3: google.cloud.backupdr.v1.GetDataSourceReferenceRequest
	(*FetchDataSourceReferencesForResourceTypeRequest)(nil),  // 4: google.cloud.backupdr.v1.FetchDataSourceReferencesForResourceTypeRequest
	(*FetchDataSourceReferencesForResourceTypeResponse)(nil), // 5: google.cloud.backupdr.v1.FetchDataSourceReferencesForResourceTypeResponse
	(*timestamppb.Timestamp)(nil),                            // 6: google.protobuf.Timestamp
	(BackupConfigState)(0),                                   // 7: google.cloud.backupdr.v1.BackupConfigState
	(BackupConfigInfo_LastBackupState)(0),                    // 8: google.cloud.backupdr.v1.BackupConfigInfo.LastBackupState
	(*CloudSqlInstanceDataSourceReferenceProperties)(nil),    // 9: google.cloud.backupdr.v1.CloudSqlInstanceDataSourceReferenceProperties
}
var file_google_cloud_backupdr_v1_datasourcereference_proto_depIdxs = []int32{
	6, // 0: google.cloud.backupdr.v1.DataSourceReference.create_time:type_name -> google.protobuf.Timestamp
	7, // 1: google.cloud.backupdr.v1.DataSourceReference.data_source_backup_config_state:type_name -> google.cloud.backupdr.v1.BackupConfigState
	1, // 2: google.cloud.backupdr.v1.DataSourceReference.data_source_backup_config_info:type_name -> google.cloud.backupdr.v1.DataSourceBackupConfigInfo
	2, // 3: google.cloud.backupdr.v1.DataSourceReference.data_source_gcp_resource_info:type_name -> google.cloud.backupdr.v1.DataSourceGcpResourceInfo
	8, // 4: google.cloud.backupdr.v1.DataSourceBackupConfigInfo.last_backup_state:type_name -> google.cloud.backupdr.v1.BackupConfigInfo.LastBackupState
	6, // 5: google.cloud.backupdr.v1.DataSourceBackupConfigInfo.last_successful_backup_consistency_time:type_name -> google.protobuf.Timestamp
	9, // 6: google.cloud.backupdr.v1.DataSourceGcpResourceInfo.cloud_sql_instance_properties:type_name -> google.cloud.backupdr.v1.CloudSqlInstanceDataSourceReferenceProperties
	0, // 7: google.cloud.backupdr.v1.FetchDataSourceReferencesForResourceTypeResponse.data_source_references:type_name -> google.cloud.backupdr.v1.DataSourceReference
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_google_cloud_backupdr_v1_datasourcereference_proto_init() }
func file_google_cloud_backupdr_v1_datasourcereference_proto_init() {
	if File_google_cloud_backupdr_v1_datasourcereference_proto != nil {
		return
	}
	file_google_cloud_backupdr_v1_backupvault_proto_init()
	file_google_cloud_backupdr_v1_backupvault_cloudsql_proto_init()
	file_google_cloud_backupdr_v1_datasourcereference_proto_msgTypes[2].OneofWrappers = []any{
		(*DataSourceGcpResourceInfo_CloudSqlInstanceProperties)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_backupdr_v1_datasourcereference_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_cloud_backupdr_v1_datasourcereference_proto_goTypes,
		DependencyIndexes: file_google_cloud_backupdr_v1_datasourcereference_proto_depIdxs,
		MessageInfos:      file_google_cloud_backupdr_v1_datasourcereference_proto_msgTypes,
	}.Build()
	File_google_cloud_backupdr_v1_datasourcereference_proto = out.File
	file_google_cloud_backupdr_v1_datasourcereference_proto_rawDesc = nil
	file_google_cloud_backupdr_v1_datasourcereference_proto_goTypes = nil
	file_google_cloud_backupdr_v1_datasourcereference_proto_depIdxs = nil
}
