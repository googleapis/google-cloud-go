// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.7
// source: google/cloud/backupdr/v1/backupvault_disk.proto

package backupdrpb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The supported access modes of the disk.
type DiskRestoreProperties_AccessMode int32

const (
	// The default AccessMode, means the disk can be attached to single instance
	// in RW mode.
	DiskRestoreProperties_READ_WRITE_SINGLE DiskRestoreProperties_AccessMode = 0
	// The AccessMode means the disk can be attached to multiple instances in RW
	// mode.
	DiskRestoreProperties_READ_WRITE_MANY DiskRestoreProperties_AccessMode = 1
	// The AccessMode means the disk can be attached to multiple instances in RO
	// mode.
	DiskRestoreProperties_READ_ONLY_MANY DiskRestoreProperties_AccessMode = 2
)

// Enum value maps for DiskRestoreProperties_AccessMode.
var (
	DiskRestoreProperties_AccessMode_name = map[int32]string{
		0: "READ_WRITE_SINGLE",
		1: "READ_WRITE_MANY",
		2: "READ_ONLY_MANY",
	}
	DiskRestoreProperties_AccessMode_value = map[string]int32{
		"READ_WRITE_SINGLE": 0,
		"READ_WRITE_MANY":   1,
		"READ_ONLY_MANY":    2,
	}
)

func (x DiskRestoreProperties_AccessMode) Enum() *DiskRestoreProperties_AccessMode {
	p := new(DiskRestoreProperties_AccessMode)
	*p = x
	return p
}

func (x DiskRestoreProperties_AccessMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiskRestoreProperties_AccessMode) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_backupdr_v1_backupvault_disk_proto_enumTypes[0].Descriptor()
}

func (DiskRestoreProperties_AccessMode) Type() protoreflect.EnumType {
	return &file_google_cloud_backupdr_v1_backupvault_disk_proto_enumTypes[0]
}

func (x DiskRestoreProperties_AccessMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiskRestoreProperties_AccessMode.Descriptor instead.
func (DiskRestoreProperties_AccessMode) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_backupdr_v1_backupvault_disk_proto_rawDescGZIP(), []int{2, 0}
}

// Architecture of the source disk.
type DiskRestoreProperties_Architecture int32

const (
	// Default value. This value is unused.
	DiskRestoreProperties_ARCHITECTURE_UNSPECIFIED DiskRestoreProperties_Architecture = 0
	// Disks with architecture X86_64
	DiskRestoreProperties_X86_64 DiskRestoreProperties_Architecture = 1
	// Disks with architecture ARM64
	DiskRestoreProperties_ARM64 DiskRestoreProperties_Architecture = 2
)

// Enum value maps for DiskRestoreProperties_Architecture.
var (
	DiskRestoreProperties_Architecture_name = map[int32]string{
		0: "ARCHITECTURE_UNSPECIFIED",
		1: "X86_64",
		2: "ARM64",
	}
	DiskRestoreProperties_Architecture_value = map[string]int32{
		"ARCHITECTURE_UNSPECIFIED": 0,
		"X86_64":                   1,
		"ARM64":                    2,
	}
)

func (x DiskRestoreProperties_Architecture) Enum() *DiskRestoreProperties_Architecture {
	p := new(DiskRestoreProperties_Architecture)
	*p = x
	return p
}

func (x DiskRestoreProperties_Architecture) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiskRestoreProperties_Architecture) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_backupdr_v1_backupvault_disk_proto_enumTypes[1].Descriptor()
}

func (DiskRestoreProperties_Architecture) Type() protoreflect.EnumType {
	return &file_google_cloud_backupdr_v1_backupvault_disk_proto_enumTypes[1]
}

func (x DiskRestoreProperties_Architecture) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiskRestoreProperties_Architecture.Descriptor instead.
func (DiskRestoreProperties_Architecture) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_backupdr_v1_backupvault_disk_proto_rawDescGZIP(), []int{2, 1}
}

// Architecture of the source disk.
type DiskBackupProperties_Architecture int32

const (
	// Default value. This value is unused.
	DiskBackupProperties_ARCHITECTURE_UNSPECIFIED DiskBackupProperties_Architecture = 0
	// Disks with architecture X86_64
	DiskBackupProperties_X86_64 DiskBackupProperties_Architecture = 1
	// Disks with architecture ARM64
	DiskBackupProperties_ARM64 DiskBackupProperties_Architecture = 2
)

// Enum value maps for DiskBackupProperties_Architecture.
var (
	DiskBackupProperties_Architecture_name = map[int32]string{
		0: "ARCHITECTURE_UNSPECIFIED",
		1: "X86_64",
		2: "ARM64",
	}
	DiskBackupProperties_Architecture_value = map[string]int32{
		"ARCHITECTURE_UNSPECIFIED": 0,
		"X86_64":                   1,
		"ARM64":                    2,
	}
)

func (x DiskBackupProperties_Architecture) Enum() *DiskBackupProperties_Architecture {
	p := new(DiskBackupProperties_Architecture)
	*p = x
	return p
}

func (x DiskBackupProperties_Architecture) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiskBackupProperties_Architecture) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_backupdr_v1_backupvault_disk_proto_enumTypes[2].Descriptor()
}

func (DiskBackupProperties_Architecture) Type() protoreflect.EnumType {
	return &file_google_cloud_backupdr_v1_backupvault_disk_proto_enumTypes[2]
}

func (x DiskBackupProperties_Architecture) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiskBackupProperties_Architecture.Descriptor instead.
func (DiskBackupProperties_Architecture) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_backupdr_v1_backupvault_disk_proto_rawDescGZIP(), []int{3, 0}
}

// DiskTargetEnvironment represents the target environment for the disk.
type DiskTargetEnvironment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Target project for the disk.
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// Required. Target zone for the disk.
	Zone string `protobuf:"bytes,2,opt,name=zone,proto3" json:"zone,omitempty"`
}

func (x *DiskTargetEnvironment) Reset() {
	*x = DiskTargetEnvironment{}
	mi := &file_google_cloud_backupdr_v1_backupvault_disk_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiskTargetEnvironment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskTargetEnvironment) ProtoMessage() {}

func (x *DiskTargetEnvironment) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_backupdr_v1_backupvault_disk_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskTargetEnvironment.ProtoReflect.Descriptor instead.
func (*DiskTargetEnvironment) Descriptor() ([]byte, []int) {
	return file_google_cloud_backupdr_v1_backupvault_disk_proto_rawDescGZIP(), []int{0}
}

func (x *DiskTargetEnvironment) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *DiskTargetEnvironment) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

// RegionDiskTargetEnvironment represents the target environment for the disk.
type RegionDiskTargetEnvironment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Target project for the disk.
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// Required. Target region for the disk.
	Region string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	// Required. Target URLs of the replica zones for the disk.
	ReplicaZones []string `protobuf:"bytes,3,rep,name=replica_zones,json=replicaZones,proto3" json:"replica_zones,omitempty"`
}

func (x *RegionDiskTargetEnvironment) Reset() {
	*x = RegionDiskTargetEnvironment{}
	mi := &file_google_cloud_backupdr_v1_backupvault_disk_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegionDiskTargetEnvironment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionDiskTargetEnvironment) ProtoMessage() {}

func (x *RegionDiskTargetEnvironment) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_backupdr_v1_backupvault_disk_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionDiskTargetEnvironment.ProtoReflect.Descriptor instead.
func (*RegionDiskTargetEnvironment) Descriptor() ([]byte, []int) {
	return file_google_cloud_backupdr_v1_backupvault_disk_proto_rawDescGZIP(), []int{1}
}

func (x *RegionDiskTargetEnvironment) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *RegionDiskTargetEnvironment) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *RegionDiskTargetEnvironment) GetReplicaZones() []string {
	if x != nil {
		return x.ReplicaZones
	}
	return nil
}

// DiskRestoreProperties represents the properties of a Disk restore.
type DiskRestoreProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Name of the disk.
	Name *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// Optional. An optional description of this resource. Provide this property
	// when you create the resource.
	Description *string `protobuf:"bytes,2,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// Required. The size of the disk in GB.
	SizeGb *int64 `protobuf:"varint,3,opt,name=size_gb,json=sizeGb,proto3,oneof" json:"size_gb,omitempty"`
	// Optional. A list of publicly available licenses that are applicable to this
	// backup. This is applicable if the original image had licenses attached,
	// e.g. Windows image
	Licenses []string `protobuf:"bytes,4,rep,name=licenses,proto3" json:"licenses,omitempty"`
	// Optional. A list of features to enable in the guest operating system. This
	// is applicable only for bootable images.
	GuestOsFeature []*GuestOsFeature `protobuf:"bytes,5,rep,name=guest_os_feature,json=guestOsFeature,proto3" json:"guest_os_feature,omitempty"`
	// Optional. Encrypts the disk using a
	// customer-supplied encryption key or a customer-managed encryption key.
	DiskEncryptionKey *CustomerEncryptionKey `protobuf:"bytes,6,opt,name=disk_encryption_key,json=diskEncryptionKey,proto3,oneof" json:"disk_encryption_key,omitempty"`
	// Optional. Physical block size of the persistent disk, in bytes.
	// If not present in a request, a default value is used.
	// Currently, the supported size is 4096.
	PhysicalBlockSizeBytes *int64 `protobuf:"varint,7,opt,name=physical_block_size_bytes,json=physicalBlockSizeBytes,proto3,oneof" json:"physical_block_size_bytes,omitempty"`
	// Optional. Indicates how many IOPS to provision for the disk. This sets the
	// number of I/O operations per second that the disk can handle.
	ProvisionedIops *int64 `protobuf:"varint,8,opt,name=provisioned_iops,json=provisionedIops,proto3,oneof" json:"provisioned_iops,omitempty"`
	// Optional. Indicates how much throughput to provision for the disk. This
	// sets the number of throughput MB per second that the disk can handle.
	ProvisionedThroughput *int64 `protobuf:"varint,9,opt,name=provisioned_throughput,json=provisionedThroughput,proto3,oneof" json:"provisioned_throughput,omitempty"`
	// Optional. Indicates whether this disk is using confidential compute mode.
	// Encryption with a Cloud KMS key is required to enable this option.
	EnableConfidentialCompute *bool `protobuf:"varint,10,opt,name=enable_confidential_compute,json=enableConfidentialCompute,proto3,oneof" json:"enable_confidential_compute,omitempty"`
	// Optional. The storage pool in which the new disk is created. You can
	// provide this as a partial or full URL to the resource.
	StoragePool *string `protobuf:"bytes,11,opt,name=storage_pool,json=storagePool,proto3,oneof" json:"storage_pool,omitempty"`
	// Optional. The access mode of the disk.
	AccessMode *DiskRestoreProperties_AccessMode `protobuf:"varint,12,opt,name=access_mode,json=accessMode,proto3,enum=google.cloud.backupdr.v1.DiskRestoreProperties_AccessMode,oneof" json:"access_mode,omitempty"`
	// Optional. The architecture of the source disk. Valid values are
	// ARM64 or X86_64.
	Architecture *DiskRestoreProperties_Architecture `protobuf:"varint,14,opt,name=architecture,proto3,enum=google.cloud.backupdr.v1.DiskRestoreProperties_Architecture,oneof" json:"architecture,omitempty"`
	// Optional. Resource policies applied to this disk.
	ResourcePolicy []string `protobuf:"bytes,15,rep,name=resource_policy,json=resourcePolicy,proto3" json:"resource_policy,omitempty"`
	// Required. URL of the disk type resource describing which disk type to use
	// to create the disk.
	Type *string `protobuf:"bytes,16,opt,name=type,proto3,oneof" json:"type,omitempty"`
	// Optional. Labels to apply to this disk. These can be modified later using
	// <code>setLabels</code> method. Label values can be empty.
	Labels map[string]string `protobuf:"bytes,17,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Optional. Resource manager tags to be bound to the disk.
	ResourceManagerTags map[string]string `protobuf:"bytes,18,rep,name=resource_manager_tags,json=resourceManagerTags,proto3" json:"resource_manager_tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DiskRestoreProperties) Reset() {
	*x = DiskRestoreProperties{}
	mi := &file_google_cloud_backupdr_v1_backupvault_disk_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiskRestoreProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskRestoreProperties) ProtoMessage() {}

func (x *DiskRestoreProperties) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_backupdr_v1_backupvault_disk_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskRestoreProperties.ProtoReflect.Descriptor instead.
func (*DiskRestoreProperties) Descriptor() ([]byte, []int) {
	return file_google_cloud_backupdr_v1_backupvault_disk_proto_rawDescGZIP(), []int{2}
}

func (x *DiskRestoreProperties) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *DiskRestoreProperties) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *DiskRestoreProperties) GetSizeGb() int64 {
	if x != nil && x.SizeGb != nil {
		return *x.SizeGb
	}
	return 0
}

func (x *DiskRestoreProperties) GetLicenses() []string {
	if x != nil {
		return x.Licenses
	}
	return nil
}

func (x *DiskRestoreProperties) GetGuestOsFeature() []*GuestOsFeature {
	if x != nil {
		return x.GuestOsFeature
	}
	return nil
}

func (x *DiskRestoreProperties) GetDiskEncryptionKey() *CustomerEncryptionKey {
	if x != nil {
		return x.DiskEncryptionKey
	}
	return nil
}

func (x *DiskRestoreProperties) GetPhysicalBlockSizeBytes() int64 {
	if x != nil && x.PhysicalBlockSizeBytes != nil {
		return *x.PhysicalBlockSizeBytes
	}
	return 0
}

func (x *DiskRestoreProperties) GetProvisionedIops() int64 {
	if x != nil && x.ProvisionedIops != nil {
		return *x.ProvisionedIops
	}
	return 0
}

func (x *DiskRestoreProperties) GetProvisionedThroughput() int64 {
	if x != nil && x.ProvisionedThroughput != nil {
		return *x.ProvisionedThroughput
	}
	return 0
}

func (x *DiskRestoreProperties) GetEnableConfidentialCompute() bool {
	if x != nil && x.EnableConfidentialCompute != nil {
		return *x.EnableConfidentialCompute
	}
	return false
}

func (x *DiskRestoreProperties) GetStoragePool() string {
	if x != nil && x.StoragePool != nil {
		return *x.StoragePool
	}
	return ""
}

func (x *DiskRestoreProperties) GetAccessMode() DiskRestoreProperties_AccessMode {
	if x != nil && x.AccessMode != nil {
		return *x.AccessMode
	}
	return DiskRestoreProperties_READ_WRITE_SINGLE
}

func (x *DiskRestoreProperties) GetArchitecture() DiskRestoreProperties_Architecture {
	if x != nil && x.Architecture != nil {
		return *x.Architecture
	}
	return DiskRestoreProperties_ARCHITECTURE_UNSPECIFIED
}

func (x *DiskRestoreProperties) GetResourcePolicy() []string {
	if x != nil {
		return x.ResourcePolicy
	}
	return nil
}

func (x *DiskRestoreProperties) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *DiskRestoreProperties) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *DiskRestoreProperties) GetResourceManagerTags() map[string]string {
	if x != nil {
		return x.ResourceManagerTags
	}
	return nil
}

// DiskBackupProperties represents the properties of a Disk backup.
type DiskBackupProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A description of the source disk.
	Description *string `protobuf:"bytes,1,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// A list of publicly available licenses that are applicable to this backup.
	// This is applicable if the original image had licenses attached, e.g.
	// Windows image.
	Licenses []string `protobuf:"bytes,2,rep,name=licenses,proto3" json:"licenses,omitempty"`
	// A list of guest OS features that are applicable to this backup.
	GuestOsFeature []*GuestOsFeature `protobuf:"bytes,3,rep,name=guest_os_feature,json=guestOsFeature,proto3" json:"guest_os_feature,omitempty"`
	// The architecture of the source disk. Valid values are
	// ARM64 or X86_64.
	Architecture *DiskBackupProperties_Architecture `protobuf:"varint,4,opt,name=architecture,proto3,enum=google.cloud.backupdr.v1.DiskBackupProperties_Architecture,oneof" json:"architecture,omitempty"`
	// The URL of the type of the disk.
	Type *string `protobuf:"bytes,5,opt,name=type,proto3,oneof" json:"type,omitempty"`
	// Size(in GB) of the source disk.
	SizeGb *int64 `protobuf:"varint,6,opt,name=size_gb,json=sizeGb,proto3,oneof" json:"size_gb,omitempty"`
	// Region and zone are mutually exclusive fields.
	// The URL of the region of the source disk.
	Region *string `protobuf:"bytes,7,opt,name=region,proto3,oneof" json:"region,omitempty"`
	// The URL of the Zone where the source disk.
	Zone *string `protobuf:"bytes,8,opt,name=zone,proto3,oneof" json:"zone,omitempty"`
	// The URL of the Zones where the source disk should be replicated.
	ReplicaZones []string `protobuf:"bytes,9,rep,name=replica_zones,json=replicaZones,proto3" json:"replica_zones,omitempty"`
	// The source disk used to create this backup.
	SourceDisk *string `protobuf:"bytes,10,opt,name=source_disk,json=sourceDisk,proto3,oneof" json:"source_disk,omitempty"`
}

func (x *DiskBackupProperties) Reset() {
	*x = DiskBackupProperties{}
	mi := &file_google_cloud_backupdr_v1_backupvault_disk_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiskBackupProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskBackupProperties) ProtoMessage() {}

func (x *DiskBackupProperties) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_backupdr_v1_backupvault_disk_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskBackupProperties.ProtoReflect.Descriptor instead.
func (*DiskBackupProperties) Descriptor() ([]byte, []int) {
	return file_google_cloud_backupdr_v1_backupvault_disk_proto_rawDescGZIP(), []int{3}
}

func (x *DiskBackupProperties) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *DiskBackupProperties) GetLicenses() []string {
	if x != nil {
		return x.Licenses
	}
	return nil
}

func (x *DiskBackupProperties) GetGuestOsFeature() []*GuestOsFeature {
	if x != nil {
		return x.GuestOsFeature
	}
	return nil
}

func (x *DiskBackupProperties) GetArchitecture() DiskBackupProperties_Architecture {
	if x != nil && x.Architecture != nil {
		return *x.Architecture
	}
	return DiskBackupProperties_ARCHITECTURE_UNSPECIFIED
}

func (x *DiskBackupProperties) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *DiskBackupProperties) GetSizeGb() int64 {
	if x != nil && x.SizeGb != nil {
		return *x.SizeGb
	}
	return 0
}

func (x *DiskBackupProperties) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

func (x *DiskBackupProperties) GetZone() string {
	if x != nil && x.Zone != nil {
		return *x.Zone
	}
	return ""
}

func (x *DiskBackupProperties) GetReplicaZones() []string {
	if x != nil {
		return x.ReplicaZones
	}
	return nil
}

func (x *DiskBackupProperties) GetSourceDisk() string {
	if x != nil && x.SourceDisk != nil {
		return *x.SourceDisk
	}
	return ""
}

// DiskDataSourceProperties represents the properties of a
// Disk resource that are stored in the DataSource.
// .
type DiskDataSourceProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the disk backed up by the datasource.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The description of the disk.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// The type of the disk.
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// The size of the disk in GB.
	SizeGb int64 `protobuf:"varint,4,opt,name=size_gb,json=sizeGb,proto3" json:"size_gb,omitempty"`
}

func (x *DiskDataSourceProperties) Reset() {
	*x = DiskDataSourceProperties{}
	mi := &file_google_cloud_backupdr_v1_backupvault_disk_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiskDataSourceProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskDataSourceProperties) ProtoMessage() {}

func (x *DiskDataSourceProperties) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_backupdr_v1_backupvault_disk_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskDataSourceProperties.ProtoReflect.Descriptor instead.
func (*DiskDataSourceProperties) Descriptor() ([]byte, []int) {
	return file_google_cloud_backupdr_v1_backupvault_disk_proto_rawDescGZIP(), []int{4}
}

func (x *DiskDataSourceProperties) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DiskDataSourceProperties) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DiskDataSourceProperties) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DiskDataSourceProperties) GetSizeGb() int64 {
	if x != nil {
		return x.SizeGb
	}
	return 0
}

var File_google_cloud_backupdr_v1_backupvault_disk_proto protoreflect.FileDescriptor

var file_google_cloud_backupdr_v1_backupvault_disk_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x64, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x18, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x64, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x64, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x67, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4f, 0x0a, 0x15, 0x44, 0x69, 0x73, 0x6b, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x1d, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x17, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x6b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f,
	0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x22, 0xbb,
	0x0d, 0x0a, 0x15, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x48, 0x00, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x21, 0x0a, 0x07, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x67, 0x62, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x48, 0x02, 0x52, 0x06, 0x73, 0x69, 0x7a, 0x65,
	0x47, 0x62, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x10, 0x67, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x6f, 0x73, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x64, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x75, 0x65, 0x73,
	0x74, 0x4f, 0x73, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x0e, 0x67, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x73, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x69, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x64, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x48, 0x03, 0x52, 0x11, 0x64, 0x69, 0x73, 0x6b, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x19, 0x70, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x48, 0x04, 0x52, 0x16, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x33, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x5f, 0x69,
	0x6f, 0x70, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x05,
	0x52, 0x0f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x49, 0x6f, 0x70,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x65, 0x64, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x06, 0x52, 0x15, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70,
	0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x1b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48,
	0x07, 0x52, 0x19, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x52, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0xe0, 0x41, 0x01, 0xfa, 0x41, 0x24, 0x0a, 0x22, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6f,
	0x6c, 0x48, 0x08, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x65, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x64, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4d, 0x6f, 0x64, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x6a, 0x0a, 0x0c, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x64, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x48, 0x0a, 0x52, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x1c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x48, 0x0b, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x58, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x11, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x64, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x81, 0x01, 0x0a,
	0x15, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x64, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x54, 0x61, 0x67,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x13, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x54, 0x61, 0x67, 0x73,
	0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x46, 0x0a, 0x18, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x54, 0x61,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x4c, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f,
	0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x41, 0x44,
	0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x10, 0x01, 0x12, 0x12, 0x0a,
	0x0e, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x10,
	0x02, 0x22, 0x43, 0x0a, 0x0c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x52, 0x43, 0x48, 0x49, 0x54, 0x45, 0x43, 0x54, 0x55, 0x52,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x58, 0x38, 0x36, 0x5f, 0x36, 0x34, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x41,
	0x52, 0x4d, 0x36, 0x34, 0x10, 0x02, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x67, 0x62, 0x42, 0x16, 0x0a, 0x14, 0x5f,
	0x64, 0x69, 0x73, 0x6b, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6b, 0x65, 0x79, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65,
	0x64, 0x5f, 0x69, 0x6f, 0x70, 0x73, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75,
	0x74, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x6f,
	0x6f, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xea, 0x04, 0x0a,
	0x14, 0x44, 0x69, 0x73, 0x6b, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x10, 0x67, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x6f, 0x73, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x64, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x75,
	0x65, 0x73, 0x74, 0x4f, 0x73, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0e, 0x67, 0x75,
	0x65, 0x73, 0x74, 0x4f, 0x73, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x64, 0x0a, 0x0c,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x64, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69,
	0x73, 0x6b, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x48,
	0x01, 0x52, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x73,
	0x69, 0x7a, 0x65, 0x5f, 0x67, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x06,
	0x73, 0x69, 0x7a, 0x65, 0x47, 0x62, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5a,
	0x6f, 0x6e, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64,
	0x69, 0x73, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0a, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x88, 0x01, 0x01, 0x22, 0x43, 0x0a, 0x0c, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x52,
	0x43, 0x48, 0x49, 0x54, 0x45, 0x43, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x58, 0x38, 0x36, 0x5f,
	0x36, 0x34, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x52, 0x4d, 0x36, 0x34, 0x10, 0x02, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x5f, 0x67, 0x62, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x22, 0x7d, 0x0a, 0x18, 0x44, 0x69, 0x73,
	0x6b, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x67, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x73, 0x69, 0x7a, 0x65, 0x47, 0x62, 0x42, 0xa8, 0x02, 0xea, 0x41, 0x61, 0x0a, 0x22,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f,
	0x6f, 0x6c, 0x12, 0x3b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x7a, 0x6f,
	0x6e, 0x65, 0x7d, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x73,
	0x2f, 0x7b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x7d, 0x0a,
	0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x64, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x14, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x38, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x64, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x64, 0x72, 0x70, 0x62, 0x3b, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x64, 0x72, 0x70, 0x62, 0xaa,
	0x02, 0x18, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x52, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x18, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x5c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x44, 0x52, 0x5c, 0x56, 0x31, 0xea, 0x02, 0x1b, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x52, 0x3a,
	0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_backupdr_v1_backupvault_disk_proto_rawDescOnce sync.Once
	file_google_cloud_backupdr_v1_backupvault_disk_proto_rawDescData = file_google_cloud_backupdr_v1_backupvault_disk_proto_rawDesc
)

func file_google_cloud_backupdr_v1_backupvault_disk_proto_rawDescGZIP() []byte {
	file_google_cloud_backupdr_v1_backupvault_disk_proto_rawDescOnce.Do(func() {
		file_google_cloud_backupdr_v1_backupvault_disk_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_backupdr_v1_backupvault_disk_proto_rawDescData)
	})
	return file_google_cloud_backupdr_v1_backupvault_disk_proto_rawDescData
}

var file_google_cloud_backupdr_v1_backupvault_disk_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_google_cloud_backupdr_v1_backupvault_disk_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_google_cloud_backupdr_v1_backupvault_disk_proto_goTypes = []any{
	(DiskRestoreProperties_AccessMode)(0),   // 0: google.cloud.backupdr.v1.DiskRestoreProperties.AccessMode
	(DiskRestoreProperties_Architecture)(0), // 1: google.cloud.backupdr.v1.DiskRestoreProperties.Architecture
	(DiskBackupProperties_Architecture)(0),  // 2: google.cloud.backupdr.v1.DiskBackupProperties.Architecture
	(*DiskTargetEnvironment)(nil),           // 3: google.cloud.backupdr.v1.DiskTargetEnvironment
	(*RegionDiskTargetEnvironment)(nil),     // 4: google.cloud.backupdr.v1.RegionDiskTargetEnvironment
	(*DiskRestoreProperties)(nil),           // 5: google.cloud.backupdr.v1.DiskRestoreProperties
	(*DiskBackupProperties)(nil),            // 6: google.cloud.backupdr.v1.DiskBackupProperties
	(*DiskDataSourceProperties)(nil),        // 7: google.cloud.backupdr.v1.DiskDataSourceProperties
	nil,                                     // 8: google.cloud.backupdr.v1.DiskRestoreProperties.LabelsEntry
	nil,                                     // 9: google.cloud.backupdr.v1.DiskRestoreProperties.ResourceManagerTagsEntry
	(*GuestOsFeature)(nil),                  // 10: google.cloud.backupdr.v1.GuestOsFeature
	(*CustomerEncryptionKey)(nil),           // 11: google.cloud.backupdr.v1.CustomerEncryptionKey
}
var file_google_cloud_backupdr_v1_backupvault_disk_proto_depIdxs = []int32{
	10, // 0: google.cloud.backupdr.v1.DiskRestoreProperties.guest_os_feature:type_name -> google.cloud.backupdr.v1.GuestOsFeature
	11, // 1: google.cloud.backupdr.v1.DiskRestoreProperties.disk_encryption_key:type_name -> google.cloud.backupdr.v1.CustomerEncryptionKey
	0,  // 2: google.cloud.backupdr.v1.DiskRestoreProperties.access_mode:type_name -> google.cloud.backupdr.v1.DiskRestoreProperties.AccessMode
	1,  // 3: google.cloud.backupdr.v1.DiskRestoreProperties.architecture:type_name -> google.cloud.backupdr.v1.DiskRestoreProperties.Architecture
	8,  // 4: google.cloud.backupdr.v1.DiskRestoreProperties.labels:type_name -> google.cloud.backupdr.v1.DiskRestoreProperties.LabelsEntry
	9,  // 5: google.cloud.backupdr.v1.DiskRestoreProperties.resource_manager_tags:type_name -> google.cloud.backupdr.v1.DiskRestoreProperties.ResourceManagerTagsEntry
	10, // 6: google.cloud.backupdr.v1.DiskBackupProperties.guest_os_feature:type_name -> google.cloud.backupdr.v1.GuestOsFeature
	2,  // 7: google.cloud.backupdr.v1.DiskBackupProperties.architecture:type_name -> google.cloud.backupdr.v1.DiskBackupProperties.Architecture
	8,  // [8:8] is the sub-list for method output_type
	8,  // [8:8] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_google_cloud_backupdr_v1_backupvault_disk_proto_init() }
func file_google_cloud_backupdr_v1_backupvault_disk_proto_init() {
	if File_google_cloud_backupdr_v1_backupvault_disk_proto != nil {
		return
	}
	file_google_cloud_backupdr_v1_backupvault_gce_proto_init()
	file_google_cloud_backupdr_v1_backupvault_disk_proto_msgTypes[2].OneofWrappers = []any{}
	file_google_cloud_backupdr_v1_backupvault_disk_proto_msgTypes[3].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_backupdr_v1_backupvault_disk_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_cloud_backupdr_v1_backupvault_disk_proto_goTypes,
		DependencyIndexes: file_google_cloud_backupdr_v1_backupvault_disk_proto_depIdxs,
		EnumInfos:         file_google_cloud_backupdr_v1_backupvault_disk_proto_enumTypes,
		MessageInfos:      file_google_cloud_backupdr_v1_backupvault_disk_proto_msgTypes,
	}.Build()
	File_google_cloud_backupdr_v1_backupvault_disk_proto = out.File
	file_google_cloud_backupdr_v1_backupvault_disk_proto_rawDesc = nil
	file_google_cloud_backupdr_v1_backupvault_disk_proto_goTypes = nil
	file_google_cloud_backupdr_v1_backupvault_disk_proto_depIdxs = nil
}
