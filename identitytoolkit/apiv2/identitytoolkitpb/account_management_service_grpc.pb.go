// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/identitytoolkit/v2/account_management_service.proto

package identitytoolkitpb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AccountManagementService_FinalizeMfaEnrollment_FullMethodName = "/google.cloud.identitytoolkit.v2.AccountManagementService/FinalizeMfaEnrollment"
	AccountManagementService_StartMfaEnrollment_FullMethodName    = "/google.cloud.identitytoolkit.v2.AccountManagementService/StartMfaEnrollment"
	AccountManagementService_WithdrawMfa_FullMethodName           = "/google.cloud.identitytoolkit.v2.AccountManagementService/WithdrawMfa"
)

// AccountManagementServiceClient is the client API for AccountManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountManagementServiceClient interface {
	// Finishes enrolling a second factor for the user.
	FinalizeMfaEnrollment(ctx context.Context, in *FinalizeMfaEnrollmentRequest, opts ...grpc.CallOption) (*FinalizeMfaEnrollmentResponse, error)
	// Step one of the MFA enrollment process. In SMS case, this sends an
	// SMS verification code to the user.
	StartMfaEnrollment(ctx context.Context, in *StartMfaEnrollmentRequest, opts ...grpc.CallOption) (*StartMfaEnrollmentResponse, error)
	// Revokes one second factor from the enrolled second factors for an account.
	WithdrawMfa(ctx context.Context, in *WithdrawMfaRequest, opts ...grpc.CallOption) (*WithdrawMfaResponse, error)
}

type accountManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountManagementServiceClient(cc grpc.ClientConnInterface) AccountManagementServiceClient {
	return &accountManagementServiceClient{cc}
}

func (c *accountManagementServiceClient) FinalizeMfaEnrollment(ctx context.Context, in *FinalizeMfaEnrollmentRequest, opts ...grpc.CallOption) (*FinalizeMfaEnrollmentResponse, error) {
	out := new(FinalizeMfaEnrollmentResponse)
	err := c.cc.Invoke(ctx, AccountManagementService_FinalizeMfaEnrollment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagementServiceClient) StartMfaEnrollment(ctx context.Context, in *StartMfaEnrollmentRequest, opts ...grpc.CallOption) (*StartMfaEnrollmentResponse, error) {
	out := new(StartMfaEnrollmentResponse)
	err := c.cc.Invoke(ctx, AccountManagementService_StartMfaEnrollment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagementServiceClient) WithdrawMfa(ctx context.Context, in *WithdrawMfaRequest, opts ...grpc.CallOption) (*WithdrawMfaResponse, error) {
	out := new(WithdrawMfaResponse)
	err := c.cc.Invoke(ctx, AccountManagementService_WithdrawMfa_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountManagementServiceServer is the server API for AccountManagementService service.
// All implementations should embed UnimplementedAccountManagementServiceServer
// for forward compatibility
type AccountManagementServiceServer interface {
	// Finishes enrolling a second factor for the user.
	FinalizeMfaEnrollment(context.Context, *FinalizeMfaEnrollmentRequest) (*FinalizeMfaEnrollmentResponse, error)
	// Step one of the MFA enrollment process. In SMS case, this sends an
	// SMS verification code to the user.
	StartMfaEnrollment(context.Context, *StartMfaEnrollmentRequest) (*StartMfaEnrollmentResponse, error)
	// Revokes one second factor from the enrolled second factors for an account.
	WithdrawMfa(context.Context, *WithdrawMfaRequest) (*WithdrawMfaResponse, error)
}

// UnimplementedAccountManagementServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAccountManagementServiceServer struct {
}

func (UnimplementedAccountManagementServiceServer) FinalizeMfaEnrollment(context.Context, *FinalizeMfaEnrollmentRequest) (*FinalizeMfaEnrollmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizeMfaEnrollment not implemented")
}
func (UnimplementedAccountManagementServiceServer) StartMfaEnrollment(context.Context, *StartMfaEnrollmentRequest) (*StartMfaEnrollmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartMfaEnrollment not implemented")
}
func (UnimplementedAccountManagementServiceServer) WithdrawMfa(context.Context, *WithdrawMfaRequest) (*WithdrawMfaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawMfa not implemented")
}

// UnsafeAccountManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountManagementServiceServer will
// result in compilation errors.
type UnsafeAccountManagementServiceServer interface {
	mustEmbedUnimplementedAccountManagementServiceServer()
}

func RegisterAccountManagementServiceServer(s grpc.ServiceRegistrar, srv AccountManagementServiceServer) {
	s.RegisterService(&AccountManagementService_ServiceDesc, srv)
}

func _AccountManagementService_FinalizeMfaEnrollment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalizeMfaEnrollmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagementServiceServer).FinalizeMfaEnrollment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountManagementService_FinalizeMfaEnrollment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagementServiceServer).FinalizeMfaEnrollment(ctx, req.(*FinalizeMfaEnrollmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManagementService_StartMfaEnrollment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartMfaEnrollmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagementServiceServer).StartMfaEnrollment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountManagementService_StartMfaEnrollment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagementServiceServer).StartMfaEnrollment(ctx, req.(*StartMfaEnrollmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManagementService_WithdrawMfa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawMfaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagementServiceServer).WithdrawMfa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountManagementService_WithdrawMfa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagementServiceServer).WithdrawMfa(ctx, req.(*WithdrawMfaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountManagementService_ServiceDesc is the grpc.ServiceDesc for AccountManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.identitytoolkit.v2.AccountManagementService",
	HandlerType: (*AccountManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FinalizeMfaEnrollment",
			Handler:    _AccountManagementService_FinalizeMfaEnrollment_Handler,
		},
		{
			MethodName: "StartMfaEnrollment",
			Handler:    _AccountManagementService_StartMfaEnrollment_Handler,
		},
		{
			MethodName: "WithdrawMfa",
			Handler:    _AccountManagementService_WithdrawMfa_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/identitytoolkit/v2/account_management_service.proto",
}
