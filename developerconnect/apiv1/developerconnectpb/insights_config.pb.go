// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.7
// source: google/cloud/developerconnect/v1/insights_config.proto

package developerconnectpb

import (
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	status "google.golang.org/genproto/googleapis/rpc/status"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status1 "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The state of the InsightsConfig.
type InsightsConfig_State int32

const (
	// No state specified.
	InsightsConfig_STATE_UNSPECIFIED InsightsConfig_State = 0
	// The InsightsConfig is pending application discovery/runtime discovery.
	InsightsConfig_PENDING InsightsConfig_State = 5
	// The initial discovery process is complete.
	InsightsConfig_COMPLETE InsightsConfig_State = 3
	// The InsightsConfig is in an error state.
	InsightsConfig_ERROR InsightsConfig_State = 4
)

// Enum value maps for InsightsConfig_State.
var (
	InsightsConfig_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		5: "PENDING",
		3: "COMPLETE",
		4: "ERROR",
	}
	InsightsConfig_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"PENDING":           5,
		"COMPLETE":          3,
		"ERROR":             4,
	}
)

func (x InsightsConfig_State) Enum() *InsightsConfig_State {
	p := new(InsightsConfig_State)
	*p = x
	return p
}

func (x InsightsConfig_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InsightsConfig_State) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_developerconnect_v1_insights_config_proto_enumTypes[0].Descriptor()
}

func (InsightsConfig_State) Type() protoreflect.EnumType {
	return &file_google_cloud_developerconnect_v1_insights_config_proto_enumTypes[0]
}

func (x InsightsConfig_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InsightsConfig_State.Descriptor instead.
func (InsightsConfig_State) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_developerconnect_v1_insights_config_proto_rawDescGZIP(), []int{0, 0}
}

// The state of the runtime in the InsightsConfig.
// Whether the runtime is linked to the InsightsConfig.
type RuntimeConfig_State int32

const (
	// No state specified.
	RuntimeConfig_STATE_UNSPECIFIED RuntimeConfig_State = 0
	// The runtime configuration has been linked to the InsightsConfig.
	RuntimeConfig_LINKED RuntimeConfig_State = 1
	// The runtime configuration has been unlinked to the InsightsConfig.
	RuntimeConfig_UNLINKED RuntimeConfig_State = 2
)

// Enum value maps for RuntimeConfig_State.
var (
	RuntimeConfig_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "LINKED",
		2: "UNLINKED",
	}
	RuntimeConfig_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"LINKED":            1,
		"UNLINKED":          2,
	}
)

func (x RuntimeConfig_State) Enum() *RuntimeConfig_State {
	p := new(RuntimeConfig_State)
	*p = x
	return p
}

func (x RuntimeConfig_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RuntimeConfig_State) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_developerconnect_v1_insights_config_proto_enumTypes[1].Descriptor()
}

func (RuntimeConfig_State) Type() protoreflect.EnumType {
	return &file_google_cloud_developerconnect_v1_insights_config_proto_enumTypes[1]
}

func (x RuntimeConfig_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RuntimeConfig_State.Descriptor instead.
func (RuntimeConfig_State) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_developerconnect_v1_insights_config_proto_rawDescGZIP(), []int{1, 0}
}

// The InsightsConfig resource is the core configuration object to capture
// events from your Software Development Lifecycle. It acts as the central hub
// for managing how Developer connect understands your application, its runtime
// environments, and the artifacts deployed within them.
type InsightsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The context of the InsightsConfig.
	//
	// Types that are assignable to InsightsConfigContext:
	//
	//	*InsightsConfig_AppHubApplication
	InsightsConfigContext isInsightsConfig_InsightsConfigContext `protobuf_oneof:"insights_config_context"`
	// Identifier. The name of the InsightsConfig.
	// Format:
	// projects/{project}/locations/{location}/insightsConfigs/{insightsConfig}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. [Output only] Create timestamp
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. [Output only] Update timestamp
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. The runtime configurations where the application is deployed.
	RuntimeConfigs []*RuntimeConfig `protobuf:"bytes,5,rep,name=runtime_configs,json=runtimeConfigs,proto3" json:"runtime_configs,omitempty"`
	// Optional. The artifact configurations of the artifacts that are deployed.
	ArtifactConfigs []*ArtifactConfig `protobuf:"bytes,6,rep,name=artifact_configs,json=artifactConfigs,proto3" json:"artifact_configs,omitempty"`
	// Optional. Output only. The state of the InsightsConfig.
	State InsightsConfig_State `protobuf:"varint,7,opt,name=state,proto3,enum=google.cloud.developerconnect.v1.InsightsConfig_State" json:"state,omitempty"`
	// Optional. User specified annotations. See
	// https://google.aip.dev/148#annotations for more details such as format and
	// size limitations.
	Annotations map[string]string `protobuf:"bytes,8,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Optional. Set of labels associated with an InsightsConfig.
	Labels map[string]string `protobuf:"bytes,9,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Output only. Reconciling (https://google.aip.dev/128#reconciliation).
	// Set to true if the current state of InsightsConfig does not match the
	// user's intended state, and the service is actively updating the resource to
	// reconcile them. This can happen due to user-triggered updates or
	// system actions like failover or maintenance.
	Reconciling bool `protobuf:"varint,10,opt,name=reconciling,proto3" json:"reconciling,omitempty"`
	// Output only. Any errors that occurred while setting up the InsightsConfig.
	// Each error will be in the format: `field_name: error_message`, e.g.
	// GetAppHubApplication: Permission denied while getting App Hub
	// application. Please grant permissions to the P4SA.
	Errors []*status.Status `protobuf:"bytes,11,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *InsightsConfig) Reset() {
	*x = InsightsConfig{}
	mi := &file_google_cloud_developerconnect_v1_insights_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InsightsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsightsConfig) ProtoMessage() {}

func (x *InsightsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_developerconnect_v1_insights_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsightsConfig.ProtoReflect.Descriptor instead.
func (*InsightsConfig) Descriptor() ([]byte, []int) {
	return file_google_cloud_developerconnect_v1_insights_config_proto_rawDescGZIP(), []int{0}
}

func (m *InsightsConfig) GetInsightsConfigContext() isInsightsConfig_InsightsConfigContext {
	if m != nil {
		return m.InsightsConfigContext
	}
	return nil
}

func (x *InsightsConfig) GetAppHubApplication() string {
	if x, ok := x.GetInsightsConfigContext().(*InsightsConfig_AppHubApplication); ok {
		return x.AppHubApplication
	}
	return ""
}

func (x *InsightsConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InsightsConfig) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *InsightsConfig) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *InsightsConfig) GetRuntimeConfigs() []*RuntimeConfig {
	if x != nil {
		return x.RuntimeConfigs
	}
	return nil
}

func (x *InsightsConfig) GetArtifactConfigs() []*ArtifactConfig {
	if x != nil {
		return x.ArtifactConfigs
	}
	return nil
}

func (x *InsightsConfig) GetState() InsightsConfig_State {
	if x != nil {
		return x.State
	}
	return InsightsConfig_STATE_UNSPECIFIED
}

func (x *InsightsConfig) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *InsightsConfig) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *InsightsConfig) GetReconciling() bool {
	if x != nil {
		return x.Reconciling
	}
	return false
}

func (x *InsightsConfig) GetErrors() []*status.Status {
	if x != nil {
		return x.Errors
	}
	return nil
}

type isInsightsConfig_InsightsConfigContext interface {
	isInsightsConfig_InsightsConfigContext()
}

type InsightsConfig_AppHubApplication struct {
	// Optional. The name of the App Hub Application.
	// Format:
	// projects/{project}/locations/{location}/applications/{application}
	AppHubApplication string `protobuf:"bytes,4,opt,name=app_hub_application,json=appHubApplication,proto3,oneof"`
}

func (*InsightsConfig_AppHubApplication) isInsightsConfig_InsightsConfigContext() {}

// RuntimeConfig represents the runtimes where the application is
// deployed.
type RuntimeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of the runtime.
	//
	// Types that are assignable to Runtime:
	//
	//	*RuntimeConfig_GkeWorkload
	Runtime isRuntimeConfig_Runtime `protobuf_oneof:"runtime"`
	// Where the runtime is derived from.
	//
	// Types that are assignable to DerivedFrom:
	//
	//	*RuntimeConfig_AppHubWorkload
	DerivedFrom isRuntimeConfig_DerivedFrom `protobuf_oneof:"derived_from"`
	// Required. Immutable. The URI of the runtime configuration.
	// For GKE, this is the cluster name.
	// For Cloud Run, this is the service name.
	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	// Output only. The state of the Runtime.
	State RuntimeConfig_State `protobuf:"varint,2,opt,name=state,proto3,enum=google.cloud.developerconnect.v1.RuntimeConfig_State" json:"state,omitempty"`
}

func (x *RuntimeConfig) Reset() {
	*x = RuntimeConfig{}
	mi := &file_google_cloud_developerconnect_v1_insights_config_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RuntimeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeConfig) ProtoMessage() {}

func (x *RuntimeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_developerconnect_v1_insights_config_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeConfig.ProtoReflect.Descriptor instead.
func (*RuntimeConfig) Descriptor() ([]byte, []int) {
	return file_google_cloud_developerconnect_v1_insights_config_proto_rawDescGZIP(), []int{1}
}

func (m *RuntimeConfig) GetRuntime() isRuntimeConfig_Runtime {
	if m != nil {
		return m.Runtime
	}
	return nil
}

func (x *RuntimeConfig) GetGkeWorkload() *GKEWorkload {
	if x, ok := x.GetRuntime().(*RuntimeConfig_GkeWorkload); ok {
		return x.GkeWorkload
	}
	return nil
}

func (m *RuntimeConfig) GetDerivedFrom() isRuntimeConfig_DerivedFrom {
	if m != nil {
		return m.DerivedFrom
	}
	return nil
}

func (x *RuntimeConfig) GetAppHubWorkload() *AppHubWorkload {
	if x, ok := x.GetDerivedFrom().(*RuntimeConfig_AppHubWorkload); ok {
		return x.AppHubWorkload
	}
	return nil
}

func (x *RuntimeConfig) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *RuntimeConfig) GetState() RuntimeConfig_State {
	if x != nil {
		return x.State
	}
	return RuntimeConfig_STATE_UNSPECIFIED
}

type isRuntimeConfig_Runtime interface {
	isRuntimeConfig_Runtime()
}

type RuntimeConfig_GkeWorkload struct {
	// Output only. Google Kubernetes Engine runtime.
	GkeWorkload *GKEWorkload `protobuf:"bytes,3,opt,name=gke_workload,json=gkeWorkload,proto3,oneof"`
}

func (*RuntimeConfig_GkeWorkload) isRuntimeConfig_Runtime() {}

type isRuntimeConfig_DerivedFrom interface {
	isRuntimeConfig_DerivedFrom()
}

type RuntimeConfig_AppHubWorkload struct {
	// Output only. App Hub Workload.
	AppHubWorkload *AppHubWorkload `protobuf:"bytes,4,opt,name=app_hub_workload,json=appHubWorkload,proto3,oneof"`
}

func (*RuntimeConfig_AppHubWorkload) isRuntimeConfig_DerivedFrom() {}

// GKEWorkload represents the Google Kubernetes Engine runtime.
type GKEWorkload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Immutable. The name of the GKE cluster.
	// Format:
	// `projects/{project}/locations/{location}/clusters/{cluster}`.
	Cluster string `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Output only. The name of the GKE deployment.
	// Format:
	// `projects/{project}/locations/{location}/clusters/{cluster}/namespaces/{namespace}/deployments/{deployment}`.
	Deployment string `protobuf:"bytes,2,opt,name=deployment,proto3" json:"deployment,omitempty"`
}

func (x *GKEWorkload) Reset() {
	*x = GKEWorkload{}
	mi := &file_google_cloud_developerconnect_v1_insights_config_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GKEWorkload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GKEWorkload) ProtoMessage() {}

func (x *GKEWorkload) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_developerconnect_v1_insights_config_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GKEWorkload.ProtoReflect.Descriptor instead.
func (*GKEWorkload) Descriptor() ([]byte, []int) {
	return file_google_cloud_developerconnect_v1_insights_config_proto_rawDescGZIP(), []int{2}
}

func (x *GKEWorkload) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *GKEWorkload) GetDeployment() string {
	if x != nil {
		return x.Deployment
	}
	return ""
}

// AppHubWorkload represents the App Hub Workload.
type AppHubWorkload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Output only. Immutable. The name of the App Hub Workload.
	// Format:
	// `projects/{project}/locations/{location}/applications/{application}/workloads/{workload}`.
	Workload string `protobuf:"bytes,1,opt,name=workload,proto3" json:"workload,omitempty"`
	// Output only. The criticality of the App Hub Workload.
	Criticality string `protobuf:"bytes,2,opt,name=criticality,proto3" json:"criticality,omitempty"`
	// Output only. The environment of the App Hub Workload.
	Environment string `protobuf:"bytes,3,opt,name=environment,proto3" json:"environment,omitempty"`
}

func (x *AppHubWorkload) Reset() {
	*x = AppHubWorkload{}
	mi := &file_google_cloud_developerconnect_v1_insights_config_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppHubWorkload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppHubWorkload) ProtoMessage() {}

func (x *AppHubWorkload) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_developerconnect_v1_insights_config_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppHubWorkload.ProtoReflect.Descriptor instead.
func (*AppHubWorkload) Descriptor() ([]byte, []int) {
	return file_google_cloud_developerconnect_v1_insights_config_proto_rawDescGZIP(), []int{3}
}

func (x *AppHubWorkload) GetWorkload() string {
	if x != nil {
		return x.Workload
	}
	return ""
}

func (x *AppHubWorkload) GetCriticality() string {
	if x != nil {
		return x.Criticality
	}
	return ""
}

func (x *AppHubWorkload) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

// The artifact config of the artifact that is deployed.
type ArtifactConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The storage location of the artifact.
	//
	// Types that are assignable to ArtifactStorage:
	//
	//	*ArtifactConfig_GoogleArtifactRegistry
	ArtifactStorage isArtifactConfig_ArtifactStorage `protobuf_oneof:"artifact_storage"`
	// The storage location of the artifact metadata.
	//
	// Types that are assignable to ArtifactMetadataStorage:
	//
	//	*ArtifactConfig_GoogleArtifactAnalysis
	ArtifactMetadataStorage isArtifactConfig_ArtifactMetadataStorage `protobuf_oneof:"artifact_metadata_storage"`
	// Required. Immutable. The URI of the artifact that is deployed.
	// e.g. `us-docker.pkg.dev/my-project/my-repo/image`.
	// The URI does not include the tag / digest because it captures a lineage of
	// artifacts.
	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (x *ArtifactConfig) Reset() {
	*x = ArtifactConfig{}
	mi := &file_google_cloud_developerconnect_v1_insights_config_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArtifactConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactConfig) ProtoMessage() {}

func (x *ArtifactConfig) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_developerconnect_v1_insights_config_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactConfig.ProtoReflect.Descriptor instead.
func (*ArtifactConfig) Descriptor() ([]byte, []int) {
	return file_google_cloud_developerconnect_v1_insights_config_proto_rawDescGZIP(), []int{4}
}

func (m *ArtifactConfig) GetArtifactStorage() isArtifactConfig_ArtifactStorage {
	if m != nil {
		return m.ArtifactStorage
	}
	return nil
}

func (x *ArtifactConfig) GetGoogleArtifactRegistry() *GoogleArtifactRegistry {
	if x, ok := x.GetArtifactStorage().(*ArtifactConfig_GoogleArtifactRegistry); ok {
		return x.GoogleArtifactRegistry
	}
	return nil
}

func (m *ArtifactConfig) GetArtifactMetadataStorage() isArtifactConfig_ArtifactMetadataStorage {
	if m != nil {
		return m.ArtifactMetadataStorage
	}
	return nil
}

func (x *ArtifactConfig) GetGoogleArtifactAnalysis() *GoogleArtifactAnalysis {
	if x, ok := x.GetArtifactMetadataStorage().(*ArtifactConfig_GoogleArtifactAnalysis); ok {
		return x.GoogleArtifactAnalysis
	}
	return nil
}

func (x *ArtifactConfig) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

type isArtifactConfig_ArtifactStorage interface {
	isArtifactConfig_ArtifactStorage()
}

type ArtifactConfig_GoogleArtifactRegistry struct {
	// Optional. Set if the artifact is stored in Artifact regsitry.
	GoogleArtifactRegistry *GoogleArtifactRegistry `protobuf:"bytes,2,opt,name=google_artifact_registry,json=googleArtifactRegistry,proto3,oneof"`
}

func (*ArtifactConfig_GoogleArtifactRegistry) isArtifactConfig_ArtifactStorage() {}

type isArtifactConfig_ArtifactMetadataStorage interface {
	isArtifactConfig_ArtifactMetadataStorage()
}

type ArtifactConfig_GoogleArtifactAnalysis struct {
	// Optional. Set if the artifact metadata is stored in Artifact analysis.
	GoogleArtifactAnalysis *GoogleArtifactAnalysis `protobuf:"bytes,3,opt,name=google_artifact_analysis,json=googleArtifactAnalysis,proto3,oneof"`
}

func (*ArtifactConfig_GoogleArtifactAnalysis) isArtifactConfig_ArtifactMetadataStorage() {}

// Google Artifact Analysis configurations.
type GoogleArtifactAnalysis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The project id of the project where the provenance is stored.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *GoogleArtifactAnalysis) Reset() {
	*x = GoogleArtifactAnalysis{}
	mi := &file_google_cloud_developerconnect_v1_insights_config_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GoogleArtifactAnalysis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleArtifactAnalysis) ProtoMessage() {}

func (x *GoogleArtifactAnalysis) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_developerconnect_v1_insights_config_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleArtifactAnalysis.ProtoReflect.Descriptor instead.
func (*GoogleArtifactAnalysis) Descriptor() ([]byte, []int) {
	return file_google_cloud_developerconnect_v1_insights_config_proto_rawDescGZIP(), []int{5}
}

func (x *GoogleArtifactAnalysis) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

// Google Artifact Registry configurations.
type GoogleArtifactRegistry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The host project of Artifact Registry.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Required. Immutable. The name of the artifact registry package.
	ArtifactRegistryPackage string `protobuf:"bytes,2,opt,name=artifact_registry_package,json=artifactRegistryPackage,proto3" json:"artifact_registry_package,omitempty"`
}

func (x *GoogleArtifactRegistry) Reset() {
	*x = GoogleArtifactRegistry{}
	mi := &file_google_cloud_developerconnect_v1_insights_config_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GoogleArtifactRegistry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleArtifactRegistry) ProtoMessage() {}

func (x *GoogleArtifactRegistry) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_developerconnect_v1_insights_config_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleArtifactRegistry.ProtoReflect.Descriptor instead.
func (*GoogleArtifactRegistry) Descriptor() ([]byte, []int) {
	return file_google_cloud_developerconnect_v1_insights_config_proto_rawDescGZIP(), []int{6}
}

func (x *GoogleArtifactRegistry) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GoogleArtifactRegistry) GetArtifactRegistryPackage() string {
	if x != nil {
		return x.ArtifactRegistryPackage
	}
	return ""
}

// Request for creating an InsightsConfig.
type CreateInsightsConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Value for parent.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Required. ID of the requesting InsightsConfig.
	InsightsConfigId string `protobuf:"bytes,2,opt,name=insights_config_id,json=insightsConfigId,proto3" json:"insights_config_id,omitempty"`
	// Required. The resource being created.
	InsightsConfig *InsightsConfig `protobuf:"bytes,3,opt,name=insights_config,json=insightsConfig,proto3" json:"insights_config,omitempty"`
	// Optional. If set, validate the request, but do not actually post it.
	ValidateOnly bool `protobuf:"varint,4,opt,name=validate_only,json=validateOnly,proto3" json:"validate_only,omitempty"`
}

func (x *CreateInsightsConfigRequest) Reset() {
	*x = CreateInsightsConfigRequest{}
	mi := &file_google_cloud_developerconnect_v1_insights_config_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateInsightsConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInsightsConfigRequest) ProtoMessage() {}

func (x *CreateInsightsConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_developerconnect_v1_insights_config_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInsightsConfigRequest.ProtoReflect.Descriptor instead.
func (*CreateInsightsConfigRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_developerconnect_v1_insights_config_proto_rawDescGZIP(), []int{7}
}

func (x *CreateInsightsConfigRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateInsightsConfigRequest) GetInsightsConfigId() string {
	if x != nil {
		return x.InsightsConfigId
	}
	return ""
}

func (x *CreateInsightsConfigRequest) GetInsightsConfig() *InsightsConfig {
	if x != nil {
		return x.InsightsConfig
	}
	return nil
}

func (x *CreateInsightsConfigRequest) GetValidateOnly() bool {
	if x != nil {
		return x.ValidateOnly
	}
	return false
}

// Request for getting an InsightsConfig.
type GetInsightsConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Name of the resource.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetInsightsConfigRequest) Reset() {
	*x = GetInsightsConfigRequest{}
	mi := &file_google_cloud_developerconnect_v1_insights_config_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInsightsConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInsightsConfigRequest) ProtoMessage() {}

func (x *GetInsightsConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_developerconnect_v1_insights_config_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInsightsConfigRequest.ProtoReflect.Descriptor instead.
func (*GetInsightsConfigRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_developerconnect_v1_insights_config_proto_rawDescGZIP(), []int{8}
}

func (x *GetInsightsConfigRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Request for requesting list of InsightsConfigs.
type ListInsightsConfigsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Parent value for ListInsightsConfigsRequest.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Optional. Requested page size. Server may return fewer items than
	// requested. If unspecified, server will pick an appropriate default.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Optional. A token identifying a page of results the server should return.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Optional. Filtering results. See https://google.aip.dev/160 for more
	// details. Filter string, adhering to the rules in
	// https://google.aip.dev/160. List only InsightsConfigs matching the filter.
	// If filter is empty, all InsightsConfigs are listed.
	Filter string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	// Optional. Hint for how to order the results.
	OrderBy string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListInsightsConfigsRequest) Reset() {
	*x = ListInsightsConfigsRequest{}
	mi := &file_google_cloud_developerconnect_v1_insights_config_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListInsightsConfigsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInsightsConfigsRequest) ProtoMessage() {}

func (x *ListInsightsConfigsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_developerconnect_v1_insights_config_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInsightsConfigsRequest.ProtoReflect.Descriptor instead.
func (*ListInsightsConfigsRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_developerconnect_v1_insights_config_proto_rawDescGZIP(), []int{9}
}

func (x *ListInsightsConfigsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListInsightsConfigsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListInsightsConfigsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListInsightsConfigsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListInsightsConfigsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

// Request for response to listing InsightsConfigs.
type ListInsightsConfigsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of InsightsConfigs.
	InsightsConfigs []*InsightsConfig `protobuf:"bytes,1,rep,name=insights_configs,json=insightsConfigs,proto3" json:"insights_configs,omitempty"`
	// A token identifying a page of results the server should return.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Locations that could not be reached.
	Unreachable []string `protobuf:"bytes,3,rep,name=unreachable,proto3" json:"unreachable,omitempty"`
}

func (x *ListInsightsConfigsResponse) Reset() {
	*x = ListInsightsConfigsResponse{}
	mi := &file_google_cloud_developerconnect_v1_insights_config_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListInsightsConfigsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInsightsConfigsResponse) ProtoMessage() {}

func (x *ListInsightsConfigsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_developerconnect_v1_insights_config_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInsightsConfigsResponse.ProtoReflect.Descriptor instead.
func (*ListInsightsConfigsResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_developerconnect_v1_insights_config_proto_rawDescGZIP(), []int{10}
}

func (x *ListInsightsConfigsResponse) GetInsightsConfigs() []*InsightsConfig {
	if x != nil {
		return x.InsightsConfigs
	}
	return nil
}

func (x *ListInsightsConfigsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListInsightsConfigsResponse) GetUnreachable() []string {
	if x != nil {
		return x.Unreachable
	}
	return nil
}

// Request for deleting an InsightsConfig.
type DeleteInsightsConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Value for parent.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. An optional request ID to identify requests. Specify a unique
	// request ID so that if you must retry your request, the server will know to
	// ignore the request if it has already been completed. The server will
	// guarantee that for at least 60 minutes after the first request.
	//
	// For example, consider a situation where you make an initial request and the
	// request times out. If you make the request again with the same request
	// ID, the server can check if original operation with the same request ID
	// was received, and if so, will ignore the second request. This prevents
	// clients from accidentally creating duplicate commitments.
	//
	// The request ID must be a valid UUID with the exception that zero UUID is
	// not supported (00000000-0000-0000-0000-000000000000).
	RequestId string `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Optional. If set, validate the request, but do not actually post it.
	ValidateOnly bool `protobuf:"varint,3,opt,name=validate_only,json=validateOnly,proto3" json:"validate_only,omitempty"`
	// Optional. This checksum is computed by the server based on the value of
	// other fields, and may be sent on update and delete requests to ensure the
	// client has an up-to-date value before proceeding.
	Etag string `protobuf:"bytes,4,opt,name=etag,proto3" json:"etag,omitempty"`
}

func (x *DeleteInsightsConfigRequest) Reset() {
	*x = DeleteInsightsConfigRequest{}
	mi := &file_google_cloud_developerconnect_v1_insights_config_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteInsightsConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInsightsConfigRequest) ProtoMessage() {}

func (x *DeleteInsightsConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_developerconnect_v1_insights_config_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInsightsConfigRequest.ProtoReflect.Descriptor instead.
func (*DeleteInsightsConfigRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_developerconnect_v1_insights_config_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteInsightsConfigRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteInsightsConfigRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *DeleteInsightsConfigRequest) GetValidateOnly() bool {
	if x != nil {
		return x.ValidateOnly
	}
	return false
}

func (x *DeleteInsightsConfigRequest) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

// Request for updating an InsightsConfig.
type UpdateInsightsConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The resource being updated.
	InsightsConfig *InsightsConfig `protobuf:"bytes,2,opt,name=insights_config,json=insightsConfig,proto3" json:"insights_config,omitempty"`
	// Optional. An optional request ID to identify requests. Specify a unique
	// request ID so that if you must retry your request, the server will know to
	// ignore the request if it has already been completed. The server will
	// guarantee that for at least 60 minutes after the first request.
	//
	// For example, consider a situation where you make an initial request and the
	// request times out. If you make the request again with the same request
	// ID, the server can check if original operation with the same request ID
	// was received, and if so, will ignore the second request. This prevents
	// clients from accidentally creating duplicate commitments.
	//
	// The request ID must be a valid UUID with the exception that zero UUID is
	// not supported (00000000-0000-0000-0000-000000000000).
	RequestId string `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Optional. If set to true, and the insightsConfig is not found a new
	// insightsConfig will be created. In this situation `update_mask` is ignored.
	// The creation will succeed only if the input insightsConfig has all the
	// necessary information (e.g a github_config with both  user_oauth_token and
	// installation_id properties).
	AllowMissing bool `protobuf:"varint,4,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
	// Optional. If set, validate the request, but do not actually post it.
	ValidateOnly bool `protobuf:"varint,5,opt,name=validate_only,json=validateOnly,proto3" json:"validate_only,omitempty"`
}

func (x *UpdateInsightsConfigRequest) Reset() {
	*x = UpdateInsightsConfigRequest{}
	mi := &file_google_cloud_developerconnect_v1_insights_config_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateInsightsConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInsightsConfigRequest) ProtoMessage() {}

func (x *UpdateInsightsConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_developerconnect_v1_insights_config_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInsightsConfigRequest.ProtoReflect.Descriptor instead.
func (*UpdateInsightsConfigRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_developerconnect_v1_insights_config_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateInsightsConfigRequest) GetInsightsConfig() *InsightsConfig {
	if x != nil {
		return x.InsightsConfig
	}
	return nil
}

func (x *UpdateInsightsConfigRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *UpdateInsightsConfigRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

func (x *UpdateInsightsConfigRequest) GetValidateOnly() bool {
	if x != nil {
		return x.ValidateOnly
	}
	return false
}

var File_google_cloud_developerconnect_v1_insights_config_proto protoreflect.FileDescriptor

var file_google_cloud_developerconnect_v1_insights_config_proto_rawDesc = []byte{
	0x0a, 0x36, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x64,
	0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2f,
	0x76, 0x31, 0x2f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x38, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x72, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x6c, 0x6f, 0x6e,
	0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x72, 0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x97, 0x09, 0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x35, 0x0a, 0x13, 0x61, 0x70, 0x70, 0x5f, 0x68, 0x75, 0x62, 0x5f, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x11, 0x61, 0x70, 0x70, 0x48, 0x75, 0x62, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x08, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5d, 0x0a, 0x0f, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x60, 0x0a, 0x10, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x51, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x68, 0x0a, 0x0b, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x59, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x25, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f,
	0x6e, 0x63, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x44, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x05,
	0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x12, 0x09,
	0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x3a, 0xa3, 0x01, 0xea, 0x41, 0x9f, 0x01,
	0x0a, 0x2e, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x49, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x7d, 0x2a, 0x0f, 0x69, 0x6e, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x32, 0x0e, 0x69, 0x6e,
	0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x01, 0x01, 0x42,
	0x19, 0x0a, 0x17, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x8c, 0x03, 0x0a, 0x0d, 0x52,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x57, 0x0a, 0x0c,
	0x67, 0x6b, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x4b, 0x45, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x6b, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x61, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x5f, 0x68, 0x75, 0x62,
	0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64,
	0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x48, 0x75, 0x62, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x01, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x48, 0x75, 0x62,
	0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x18, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe0, 0x41, 0x02, 0xe0, 0x41, 0x05, 0x52, 0x03, 0x75,
	0x72, 0x69, 0x12, 0x50, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x22, 0x38, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a,
	0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x49, 0x4e, 0x4b, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x55, 0x4e, 0x4c, 0x49, 0x4e, 0x4b, 0x45, 0x44, 0x10, 0x02, 0x42, 0x09,
	0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x64, 0x65, 0x72,
	0x69, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x22, 0x54, 0x0a, 0x0b, 0x47, 0x4b, 0x45,
	0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x20, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe0, 0x41, 0x02, 0xe0, 0x41,
	0x05, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0a, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0x85, 0x01, 0x0a, 0x0e, 0x41, 0x70, 0x70, 0x48, 0x75, 0x62, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x25, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe0, 0x41, 0x02, 0xe0, 0x41, 0x05, 0xe0, 0x41, 0x03, 0x52,
	0x08, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x25, 0x0a, 0x0b, 0x63, 0x72, 0x69,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x25, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xd1, 0x02, 0x0a, 0x0e, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x79, 0x0a, 0x18, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x16, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x79, 0x0a, 0x18, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x01, 0x52, 0x16, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x12, 0x18, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe0,
	0x41, 0x02, 0xe0, 0x41, 0x05, 0x52, 0x03, 0x75, 0x72, 0x69, 0x42, 0x12, 0x0a, 0x10, 0x61, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x1b,
	0x0a, 0x19, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x22, 0x3c, 0x0a, 0x16, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x80, 0x01, 0x0a, 0x16, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x19, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe0, 0x41, 0x02,
	0xe0, 0x41, 0x05, 0x52, 0x17, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x22, 0xaa, 0x02, 0x0a,
	0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0xe0, 0x41,
	0x02, 0xfa, 0x41, 0x30, 0x12, 0x2e, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x12,
	0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x10, 0x69,
	0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12,
	0x5e, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x72, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x0e, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x28, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x6e, 0x6c, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x66, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x36, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x30, 0x0a, 0x2e, 0x64, 0x65, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x49, 0x6e, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0xef, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x4e, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x36, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x30, 0x12, 0x2e, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x79, 0x22, 0xc4, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x6e, 0x72, 0x65,
	0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x75,
	0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xd8, 0x01, 0x0a, 0x1b, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x30,
	0x0a, 0x2e, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xe0, 0x41, 0x01, 0xe2,
	0x8c, 0xcf, 0xd7, 0x08, 0x02, 0x08, 0x01, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f,
	0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x17, 0x0a, 0x04,
	0x65, 0x74, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x04, 0x65, 0x74, 0x61, 0x67, 0x22, 0xfd, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5e, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2a, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xe0, 0x41, 0x01, 0xe2, 0x8c,
	0xcf, 0xd7, 0x08, 0x02, 0x08, 0x01, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x0d, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x32, 0xef, 0x0a, 0x0a, 0x15, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0xd8, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x35, 0x12, 0x33, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0xb6, 0x02, 0x0a, 0x14, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67,
	0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xbf, 0x01, 0xca, 0x41, 0x44, 0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x32, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xda, 0x41, 0x29, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x2c, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2c, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x46, 0x3a, 0x0f, 0x69,
	0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x33,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x2a, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x12, 0xc5, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x72, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x42, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x12, 0x33, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x9a, 0x02, 0x0a, 0x14,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e,
	0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xa3, 0x01, 0xca, 0x41, 0x44, 0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x32, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x56, 0x3a, 0x0f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x32, 0x43, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x87, 0x02, 0x0a, 0x14, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x90, 0x01, 0xca, 0x41, 0x4b, 0x0a, 0x15, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x32, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x2a, 0x33, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f,
	0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2f,
	0x2a, 0x7d, 0x1a, 0x53, 0xca, 0x41, 0x1f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f,
	0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0xd5, 0x01, 0x0a, 0x24, 0x63, 0x6f, 0x6d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x42, 0x13, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x50, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x64, 0x65, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2f, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x70, 0x62, 0x3b, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x70, 0x62, 0xaa, 0x02, 0x20, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x20, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x44, 0x65, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5c, 0x56, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_developerconnect_v1_insights_config_proto_rawDescOnce sync.Once
	file_google_cloud_developerconnect_v1_insights_config_proto_rawDescData = file_google_cloud_developerconnect_v1_insights_config_proto_rawDesc
)

func file_google_cloud_developerconnect_v1_insights_config_proto_rawDescGZIP() []byte {
	file_google_cloud_developerconnect_v1_insights_config_proto_rawDescOnce.Do(func() {
		file_google_cloud_developerconnect_v1_insights_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_developerconnect_v1_insights_config_proto_rawDescData)
	})
	return file_google_cloud_developerconnect_v1_insights_config_proto_rawDescData
}

var file_google_cloud_developerconnect_v1_insights_config_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_google_cloud_developerconnect_v1_insights_config_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_google_cloud_developerconnect_v1_insights_config_proto_goTypes = []any{
	(InsightsConfig_State)(0),           // 0: google.cloud.developerconnect.v1.InsightsConfig.State
	(RuntimeConfig_State)(0),            // 1: google.cloud.developerconnect.v1.RuntimeConfig.State
	(*InsightsConfig)(nil),              // 2: google.cloud.developerconnect.v1.InsightsConfig
	(*RuntimeConfig)(nil),               // 3: google.cloud.developerconnect.v1.RuntimeConfig
	(*GKEWorkload)(nil),                 // 4: google.cloud.developerconnect.v1.GKEWorkload
	(*AppHubWorkload)(nil),              // 5: google.cloud.developerconnect.v1.AppHubWorkload
	(*ArtifactConfig)(nil),              // 6: google.cloud.developerconnect.v1.ArtifactConfig
	(*GoogleArtifactAnalysis)(nil),      // 7: google.cloud.developerconnect.v1.GoogleArtifactAnalysis
	(*GoogleArtifactRegistry)(nil),      // 8: google.cloud.developerconnect.v1.GoogleArtifactRegistry
	(*CreateInsightsConfigRequest)(nil), // 9: google.cloud.developerconnect.v1.CreateInsightsConfigRequest
	(*GetInsightsConfigRequest)(nil),    // 10: google.cloud.developerconnect.v1.GetInsightsConfigRequest
	(*ListInsightsConfigsRequest)(nil),  // 11: google.cloud.developerconnect.v1.ListInsightsConfigsRequest
	(*ListInsightsConfigsResponse)(nil), // 12: google.cloud.developerconnect.v1.ListInsightsConfigsResponse
	(*DeleteInsightsConfigRequest)(nil), // 13: google.cloud.developerconnect.v1.DeleteInsightsConfigRequest
	(*UpdateInsightsConfigRequest)(nil), // 14: google.cloud.developerconnect.v1.UpdateInsightsConfigRequest
	nil,                                 // 15: google.cloud.developerconnect.v1.InsightsConfig.AnnotationsEntry
	nil,                                 // 16: google.cloud.developerconnect.v1.InsightsConfig.LabelsEntry
	(*timestamppb.Timestamp)(nil),       // 17: google.protobuf.Timestamp
	(*status.Status)(nil),               // 18: google.rpc.Status
	(*longrunningpb.Operation)(nil),     // 19: google.longrunning.Operation
}
var file_google_cloud_developerconnect_v1_insights_config_proto_depIdxs = []int32{
	17, // 0: google.cloud.developerconnect.v1.InsightsConfig.create_time:type_name -> google.protobuf.Timestamp
	17, // 1: google.cloud.developerconnect.v1.InsightsConfig.update_time:type_name -> google.protobuf.Timestamp
	3,  // 2: google.cloud.developerconnect.v1.InsightsConfig.runtime_configs:type_name -> google.cloud.developerconnect.v1.RuntimeConfig
	6,  // 3: google.cloud.developerconnect.v1.InsightsConfig.artifact_configs:type_name -> google.cloud.developerconnect.v1.ArtifactConfig
	0,  // 4: google.cloud.developerconnect.v1.InsightsConfig.state:type_name -> google.cloud.developerconnect.v1.InsightsConfig.State
	15, // 5: google.cloud.developerconnect.v1.InsightsConfig.annotations:type_name -> google.cloud.developerconnect.v1.InsightsConfig.AnnotationsEntry
	16, // 6: google.cloud.developerconnect.v1.InsightsConfig.labels:type_name -> google.cloud.developerconnect.v1.InsightsConfig.LabelsEntry
	18, // 7: google.cloud.developerconnect.v1.InsightsConfig.errors:type_name -> google.rpc.Status
	4,  // 8: google.cloud.developerconnect.v1.RuntimeConfig.gke_workload:type_name -> google.cloud.developerconnect.v1.GKEWorkload
	5,  // 9: google.cloud.developerconnect.v1.RuntimeConfig.app_hub_workload:type_name -> google.cloud.developerconnect.v1.AppHubWorkload
	1,  // 10: google.cloud.developerconnect.v1.RuntimeConfig.state:type_name -> google.cloud.developerconnect.v1.RuntimeConfig.State
	8,  // 11: google.cloud.developerconnect.v1.ArtifactConfig.google_artifact_registry:type_name -> google.cloud.developerconnect.v1.GoogleArtifactRegistry
	7,  // 12: google.cloud.developerconnect.v1.ArtifactConfig.google_artifact_analysis:type_name -> google.cloud.developerconnect.v1.GoogleArtifactAnalysis
	2,  // 13: google.cloud.developerconnect.v1.CreateInsightsConfigRequest.insights_config:type_name -> google.cloud.developerconnect.v1.InsightsConfig
	2,  // 14: google.cloud.developerconnect.v1.ListInsightsConfigsResponse.insights_configs:type_name -> google.cloud.developerconnect.v1.InsightsConfig
	2,  // 15: google.cloud.developerconnect.v1.UpdateInsightsConfigRequest.insights_config:type_name -> google.cloud.developerconnect.v1.InsightsConfig
	11, // 16: google.cloud.developerconnect.v1.InsightsConfigService.ListInsightsConfigs:input_type -> google.cloud.developerconnect.v1.ListInsightsConfigsRequest
	9,  // 17: google.cloud.developerconnect.v1.InsightsConfigService.CreateInsightsConfig:input_type -> google.cloud.developerconnect.v1.CreateInsightsConfigRequest
	10, // 18: google.cloud.developerconnect.v1.InsightsConfigService.GetInsightsConfig:input_type -> google.cloud.developerconnect.v1.GetInsightsConfigRequest
	14, // 19: google.cloud.developerconnect.v1.InsightsConfigService.UpdateInsightsConfig:input_type -> google.cloud.developerconnect.v1.UpdateInsightsConfigRequest
	13, // 20: google.cloud.developerconnect.v1.InsightsConfigService.DeleteInsightsConfig:input_type -> google.cloud.developerconnect.v1.DeleteInsightsConfigRequest
	12, // 21: google.cloud.developerconnect.v1.InsightsConfigService.ListInsightsConfigs:output_type -> google.cloud.developerconnect.v1.ListInsightsConfigsResponse
	19, // 22: google.cloud.developerconnect.v1.InsightsConfigService.CreateInsightsConfig:output_type -> google.longrunning.Operation
	2,  // 23: google.cloud.developerconnect.v1.InsightsConfigService.GetInsightsConfig:output_type -> google.cloud.developerconnect.v1.InsightsConfig
	19, // 24: google.cloud.developerconnect.v1.InsightsConfigService.UpdateInsightsConfig:output_type -> google.longrunning.Operation
	19, // 25: google.cloud.developerconnect.v1.InsightsConfigService.DeleteInsightsConfig:output_type -> google.longrunning.Operation
	21, // [21:26] is the sub-list for method output_type
	16, // [16:21] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_google_cloud_developerconnect_v1_insights_config_proto_init() }
func file_google_cloud_developerconnect_v1_insights_config_proto_init() {
	if File_google_cloud_developerconnect_v1_insights_config_proto != nil {
		return
	}
	file_google_cloud_developerconnect_v1_developer_connect_proto_init()
	file_google_cloud_developerconnect_v1_insights_config_proto_msgTypes[0].OneofWrappers = []any{
		(*InsightsConfig_AppHubApplication)(nil),
	}
	file_google_cloud_developerconnect_v1_insights_config_proto_msgTypes[1].OneofWrappers = []any{
		(*RuntimeConfig_GkeWorkload)(nil),
		(*RuntimeConfig_AppHubWorkload)(nil),
	}
	file_google_cloud_developerconnect_v1_insights_config_proto_msgTypes[4].OneofWrappers = []any{
		(*ArtifactConfig_GoogleArtifactRegistry)(nil),
		(*ArtifactConfig_GoogleArtifactAnalysis)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_developerconnect_v1_insights_config_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_google_cloud_developerconnect_v1_insights_config_proto_goTypes,
		DependencyIndexes: file_google_cloud_developerconnect_v1_insights_config_proto_depIdxs,
		EnumInfos:         file_google_cloud_developerconnect_v1_insights_config_proto_enumTypes,
		MessageInfos:      file_google_cloud_developerconnect_v1_insights_config_proto_msgTypes,
	}.Build()
	File_google_cloud_developerconnect_v1_insights_config_proto = out.File
	file_google_cloud_developerconnect_v1_insights_config_proto_rawDesc = nil
	file_google_cloud_developerconnect_v1_insights_config_proto_goTypes = nil
	file_google_cloud_developerconnect_v1_insights_config_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// InsightsConfigServiceClient is the client API for InsightsConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InsightsConfigServiceClient interface {
	// Lists InsightsConfigs in a given project and location.
	ListInsightsConfigs(ctx context.Context, in *ListInsightsConfigsRequest, opts ...grpc.CallOption) (*ListInsightsConfigsResponse, error)
	// Creates a new InsightsConfig in a given project and location.
	CreateInsightsConfig(ctx context.Context, in *CreateInsightsConfigRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets details of a single Insight.
	GetInsightsConfig(ctx context.Context, in *GetInsightsConfigRequest, opts ...grpc.CallOption) (*InsightsConfig, error)
	// Updates the parameters of a single InsightsConfig.
	UpdateInsightsConfig(ctx context.Context, in *UpdateInsightsConfigRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Delete a single Insight.
	DeleteInsightsConfig(ctx context.Context, in *DeleteInsightsConfigRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type insightsConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInsightsConfigServiceClient(cc grpc.ClientConnInterface) InsightsConfigServiceClient {
	return &insightsConfigServiceClient{cc}
}

func (c *insightsConfigServiceClient) ListInsightsConfigs(ctx context.Context, in *ListInsightsConfigsRequest, opts ...grpc.CallOption) (*ListInsightsConfigsResponse, error) {
	out := new(ListInsightsConfigsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.developerconnect.v1.InsightsConfigService/ListInsightsConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *insightsConfigServiceClient) CreateInsightsConfig(ctx context.Context, in *CreateInsightsConfigRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.developerconnect.v1.InsightsConfigService/CreateInsightsConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *insightsConfigServiceClient) GetInsightsConfig(ctx context.Context, in *GetInsightsConfigRequest, opts ...grpc.CallOption) (*InsightsConfig, error) {
	out := new(InsightsConfig)
	err := c.cc.Invoke(ctx, "/google.cloud.developerconnect.v1.InsightsConfigService/GetInsightsConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *insightsConfigServiceClient) UpdateInsightsConfig(ctx context.Context, in *UpdateInsightsConfigRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.developerconnect.v1.InsightsConfigService/UpdateInsightsConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *insightsConfigServiceClient) DeleteInsightsConfig(ctx context.Context, in *DeleteInsightsConfigRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.developerconnect.v1.InsightsConfigService/DeleteInsightsConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InsightsConfigServiceServer is the server API for InsightsConfigService service.
type InsightsConfigServiceServer interface {
	// Lists InsightsConfigs in a given project and location.
	ListInsightsConfigs(context.Context, *ListInsightsConfigsRequest) (*ListInsightsConfigsResponse, error)
	// Creates a new InsightsConfig in a given project and location.
	CreateInsightsConfig(context.Context, *CreateInsightsConfigRequest) (*longrunningpb.Operation, error)
	// Gets details of a single Insight.
	GetInsightsConfig(context.Context, *GetInsightsConfigRequest) (*InsightsConfig, error)
	// Updates the parameters of a single InsightsConfig.
	UpdateInsightsConfig(context.Context, *UpdateInsightsConfigRequest) (*longrunningpb.Operation, error)
	// Delete a single Insight.
	DeleteInsightsConfig(context.Context, *DeleteInsightsConfigRequest) (*longrunningpb.Operation, error)
}

// UnimplementedInsightsConfigServiceServer can be embedded to have forward compatible implementations.
type UnimplementedInsightsConfigServiceServer struct {
}

func (*UnimplementedInsightsConfigServiceServer) ListInsightsConfigs(context.Context, *ListInsightsConfigsRequest) (*ListInsightsConfigsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListInsightsConfigs not implemented")
}
func (*UnimplementedInsightsConfigServiceServer) CreateInsightsConfig(context.Context, *CreateInsightsConfigRequest) (*longrunningpb.Operation, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateInsightsConfig not implemented")
}
func (*UnimplementedInsightsConfigServiceServer) GetInsightsConfig(context.Context, *GetInsightsConfigRequest) (*InsightsConfig, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetInsightsConfig not implemented")
}
func (*UnimplementedInsightsConfigServiceServer) UpdateInsightsConfig(context.Context, *UpdateInsightsConfigRequest) (*longrunningpb.Operation, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateInsightsConfig not implemented")
}
func (*UnimplementedInsightsConfigServiceServer) DeleteInsightsConfig(context.Context, *DeleteInsightsConfigRequest) (*longrunningpb.Operation, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteInsightsConfig not implemented")
}

func RegisterInsightsConfigServiceServer(s *grpc.Server, srv InsightsConfigServiceServer) {
	s.RegisterService(&_InsightsConfigService_serviceDesc, srv)
}

func _InsightsConfigService_ListInsightsConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInsightsConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InsightsConfigServiceServer).ListInsightsConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.developerconnect.v1.InsightsConfigService/ListInsightsConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InsightsConfigServiceServer).ListInsightsConfigs(ctx, req.(*ListInsightsConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InsightsConfigService_CreateInsightsConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInsightsConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InsightsConfigServiceServer).CreateInsightsConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.developerconnect.v1.InsightsConfigService/CreateInsightsConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InsightsConfigServiceServer).CreateInsightsConfig(ctx, req.(*CreateInsightsConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InsightsConfigService_GetInsightsConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInsightsConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InsightsConfigServiceServer).GetInsightsConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.developerconnect.v1.InsightsConfigService/GetInsightsConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InsightsConfigServiceServer).GetInsightsConfig(ctx, req.(*GetInsightsConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InsightsConfigService_UpdateInsightsConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInsightsConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InsightsConfigServiceServer).UpdateInsightsConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.developerconnect.v1.InsightsConfigService/UpdateInsightsConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InsightsConfigServiceServer).UpdateInsightsConfig(ctx, req.(*UpdateInsightsConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InsightsConfigService_DeleteInsightsConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInsightsConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InsightsConfigServiceServer).DeleteInsightsConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.developerconnect.v1.InsightsConfigService/DeleteInsightsConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InsightsConfigServiceServer).DeleteInsightsConfig(ctx, req.(*DeleteInsightsConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _InsightsConfigService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.developerconnect.v1.InsightsConfigService",
	HandlerType: (*InsightsConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListInsightsConfigs",
			Handler:    _InsightsConfigService_ListInsightsConfigs_Handler,
		},
		{
			MethodName: "CreateInsightsConfig",
			Handler:    _InsightsConfigService_CreateInsightsConfig_Handler,
		},
		{
			MethodName: "GetInsightsConfig",
			Handler:    _InsightsConfigService_GetInsightsConfig_Handler,
		},
		{
			MethodName: "UpdateInsightsConfig",
			Handler:    _InsightsConfigService_UpdateInsightsConfig_Handler,
		},
		{
			MethodName: "DeleteInsightsConfig",
			Handler:    _InsightsConfigService_DeleteInsightsConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/developerconnect/v1/insights_config.proto",
}
