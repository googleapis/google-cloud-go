// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/developerconnect/v1/insights_config.proto

package developerconnectpb

import (
	context "context"

	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	InsightsConfigService_ListInsightsConfigs_FullMethodName  = "/google.cloud.developerconnect.v1.InsightsConfigService/ListInsightsConfigs"
	InsightsConfigService_CreateInsightsConfig_FullMethodName = "/google.cloud.developerconnect.v1.InsightsConfigService/CreateInsightsConfig"
	InsightsConfigService_GetInsightsConfig_FullMethodName    = "/google.cloud.developerconnect.v1.InsightsConfigService/GetInsightsConfig"
	InsightsConfigService_UpdateInsightsConfig_FullMethodName = "/google.cloud.developerconnect.v1.InsightsConfigService/UpdateInsightsConfig"
	InsightsConfigService_DeleteInsightsConfig_FullMethodName = "/google.cloud.developerconnect.v1.InsightsConfigService/DeleteInsightsConfig"
)

// InsightsConfigServiceClient is the client API for InsightsConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InsightsConfigServiceClient interface {
	// Lists InsightsConfigs in a given project and location.
	ListInsightsConfigs(ctx context.Context, in *ListInsightsConfigsRequest, opts ...grpc.CallOption) (*ListInsightsConfigsResponse, error)
	// Creates a new InsightsConfig in a given project and location.
	CreateInsightsConfig(ctx context.Context, in *CreateInsightsConfigRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets details of a single Insight.
	GetInsightsConfig(ctx context.Context, in *GetInsightsConfigRequest, opts ...grpc.CallOption) (*InsightsConfig, error)
	// Updates the parameters of a single InsightsConfig.
	UpdateInsightsConfig(ctx context.Context, in *UpdateInsightsConfigRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Delete a single Insight.
	DeleteInsightsConfig(ctx context.Context, in *DeleteInsightsConfigRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type insightsConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInsightsConfigServiceClient(cc grpc.ClientConnInterface) InsightsConfigServiceClient {
	return &insightsConfigServiceClient{cc}
}

func (c *insightsConfigServiceClient) ListInsightsConfigs(ctx context.Context, in *ListInsightsConfigsRequest, opts ...grpc.CallOption) (*ListInsightsConfigsResponse, error) {
	out := new(ListInsightsConfigsResponse)
	err := c.cc.Invoke(ctx, InsightsConfigService_ListInsightsConfigs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *insightsConfigServiceClient) CreateInsightsConfig(ctx context.Context, in *CreateInsightsConfigRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, InsightsConfigService_CreateInsightsConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *insightsConfigServiceClient) GetInsightsConfig(ctx context.Context, in *GetInsightsConfigRequest, opts ...grpc.CallOption) (*InsightsConfig, error) {
	out := new(InsightsConfig)
	err := c.cc.Invoke(ctx, InsightsConfigService_GetInsightsConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *insightsConfigServiceClient) UpdateInsightsConfig(ctx context.Context, in *UpdateInsightsConfigRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, InsightsConfigService_UpdateInsightsConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *insightsConfigServiceClient) DeleteInsightsConfig(ctx context.Context, in *DeleteInsightsConfigRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, InsightsConfigService_DeleteInsightsConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InsightsConfigServiceServer is the server API for InsightsConfigService service.
// All implementations should embed UnimplementedInsightsConfigServiceServer
// for forward compatibility
type InsightsConfigServiceServer interface {
	// Lists InsightsConfigs in a given project and location.
	ListInsightsConfigs(context.Context, *ListInsightsConfigsRequest) (*ListInsightsConfigsResponse, error)
	// Creates a new InsightsConfig in a given project and location.
	CreateInsightsConfig(context.Context, *CreateInsightsConfigRequest) (*longrunningpb.Operation, error)
	// Gets details of a single Insight.
	GetInsightsConfig(context.Context, *GetInsightsConfigRequest) (*InsightsConfig, error)
	// Updates the parameters of a single InsightsConfig.
	UpdateInsightsConfig(context.Context, *UpdateInsightsConfigRequest) (*longrunningpb.Operation, error)
	// Delete a single Insight.
	DeleteInsightsConfig(context.Context, *DeleteInsightsConfigRequest) (*longrunningpb.Operation, error)
}

// UnimplementedInsightsConfigServiceServer should be embedded to have forward compatible implementations.
type UnimplementedInsightsConfigServiceServer struct {
}

func (UnimplementedInsightsConfigServiceServer) ListInsightsConfigs(context.Context, *ListInsightsConfigsRequest) (*ListInsightsConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInsightsConfigs not implemented")
}
func (UnimplementedInsightsConfigServiceServer) CreateInsightsConfig(context.Context, *CreateInsightsConfigRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInsightsConfig not implemented")
}
func (UnimplementedInsightsConfigServiceServer) GetInsightsConfig(context.Context, *GetInsightsConfigRequest) (*InsightsConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInsightsConfig not implemented")
}
func (UnimplementedInsightsConfigServiceServer) UpdateInsightsConfig(context.Context, *UpdateInsightsConfigRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInsightsConfig not implemented")
}
func (UnimplementedInsightsConfigServiceServer) DeleteInsightsConfig(context.Context, *DeleteInsightsConfigRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInsightsConfig not implemented")
}

// UnsafeInsightsConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InsightsConfigServiceServer will
// result in compilation errors.
type UnsafeInsightsConfigServiceServer interface {
	mustEmbedUnimplementedInsightsConfigServiceServer()
}

func RegisterInsightsConfigServiceServer(s grpc.ServiceRegistrar, srv InsightsConfigServiceServer) {
	s.RegisterService(&InsightsConfigService_ServiceDesc, srv)
}

func _InsightsConfigService_ListInsightsConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInsightsConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InsightsConfigServiceServer).ListInsightsConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InsightsConfigService_ListInsightsConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InsightsConfigServiceServer).ListInsightsConfigs(ctx, req.(*ListInsightsConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InsightsConfigService_CreateInsightsConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInsightsConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InsightsConfigServiceServer).CreateInsightsConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InsightsConfigService_CreateInsightsConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InsightsConfigServiceServer).CreateInsightsConfig(ctx, req.(*CreateInsightsConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InsightsConfigService_GetInsightsConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInsightsConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InsightsConfigServiceServer).GetInsightsConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InsightsConfigService_GetInsightsConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InsightsConfigServiceServer).GetInsightsConfig(ctx, req.(*GetInsightsConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InsightsConfigService_UpdateInsightsConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInsightsConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InsightsConfigServiceServer).UpdateInsightsConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InsightsConfigService_UpdateInsightsConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InsightsConfigServiceServer).UpdateInsightsConfig(ctx, req.(*UpdateInsightsConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InsightsConfigService_DeleteInsightsConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInsightsConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InsightsConfigServiceServer).DeleteInsightsConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InsightsConfigService_DeleteInsightsConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InsightsConfigServiceServer).DeleteInsightsConfig(ctx, req.(*DeleteInsightsConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InsightsConfigService_ServiceDesc is the grpc.ServiceDesc for InsightsConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InsightsConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.developerconnect.v1.InsightsConfigService",
	HandlerType: (*InsightsConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListInsightsConfigs",
			Handler:    _InsightsConfigService_ListInsightsConfigs_Handler,
		},
		{
			MethodName: "CreateInsightsConfig",
			Handler:    _InsightsConfigService_CreateInsightsConfig_Handler,
		},
		{
			MethodName: "GetInsightsConfig",
			Handler:    _InsightsConfigService_GetInsightsConfig_Handler,
		},
		{
			MethodName: "UpdateInsightsConfig",
			Handler:    _InsightsConfigService_UpdateInsightsConfig_Handler,
		},
		{
			MethodName: "DeleteInsightsConfig",
			Handler:    _InsightsConfigService_DeleteInsightsConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/developerconnect/v1/insights_config.proto",
}
