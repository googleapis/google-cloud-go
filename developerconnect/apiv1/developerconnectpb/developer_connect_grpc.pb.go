// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/developerconnect/v1/developer_connect.proto

package developerconnectpb

import (
	context "context"

	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DeveloperConnect_ListConnections_FullMethodName              = "/google.cloud.developerconnect.v1.DeveloperConnect/ListConnections"
	DeveloperConnect_GetConnection_FullMethodName                = "/google.cloud.developerconnect.v1.DeveloperConnect/GetConnection"
	DeveloperConnect_CreateConnection_FullMethodName             = "/google.cloud.developerconnect.v1.DeveloperConnect/CreateConnection"
	DeveloperConnect_UpdateConnection_FullMethodName             = "/google.cloud.developerconnect.v1.DeveloperConnect/UpdateConnection"
	DeveloperConnect_DeleteConnection_FullMethodName             = "/google.cloud.developerconnect.v1.DeveloperConnect/DeleteConnection"
	DeveloperConnect_CreateGitRepositoryLink_FullMethodName      = "/google.cloud.developerconnect.v1.DeveloperConnect/CreateGitRepositoryLink"
	DeveloperConnect_DeleteGitRepositoryLink_FullMethodName      = "/google.cloud.developerconnect.v1.DeveloperConnect/DeleteGitRepositoryLink"
	DeveloperConnect_ListGitRepositoryLinks_FullMethodName       = "/google.cloud.developerconnect.v1.DeveloperConnect/ListGitRepositoryLinks"
	DeveloperConnect_GetGitRepositoryLink_FullMethodName         = "/google.cloud.developerconnect.v1.DeveloperConnect/GetGitRepositoryLink"
	DeveloperConnect_FetchReadWriteToken_FullMethodName          = "/google.cloud.developerconnect.v1.DeveloperConnect/FetchReadWriteToken"
	DeveloperConnect_FetchReadToken_FullMethodName               = "/google.cloud.developerconnect.v1.DeveloperConnect/FetchReadToken"
	DeveloperConnect_FetchLinkableGitRepositories_FullMethodName = "/google.cloud.developerconnect.v1.DeveloperConnect/FetchLinkableGitRepositories"
	DeveloperConnect_FetchGitHubInstallations_FullMethodName     = "/google.cloud.developerconnect.v1.DeveloperConnect/FetchGitHubInstallations"
	DeveloperConnect_FetchGitRefs_FullMethodName                 = "/google.cloud.developerconnect.v1.DeveloperConnect/FetchGitRefs"
	DeveloperConnect_ListAccountConnectors_FullMethodName        = "/google.cloud.developerconnect.v1.DeveloperConnect/ListAccountConnectors"
	DeveloperConnect_GetAccountConnector_FullMethodName          = "/google.cloud.developerconnect.v1.DeveloperConnect/GetAccountConnector"
	DeveloperConnect_CreateAccountConnector_FullMethodName       = "/google.cloud.developerconnect.v1.DeveloperConnect/CreateAccountConnector"
	DeveloperConnect_UpdateAccountConnector_FullMethodName       = "/google.cloud.developerconnect.v1.DeveloperConnect/UpdateAccountConnector"
	DeveloperConnect_DeleteAccountConnector_FullMethodName       = "/google.cloud.developerconnect.v1.DeveloperConnect/DeleteAccountConnector"
	DeveloperConnect_FetchAccessToken_FullMethodName             = "/google.cloud.developerconnect.v1.DeveloperConnect/FetchAccessToken"
	DeveloperConnect_ListUsers_FullMethodName                    = "/google.cloud.developerconnect.v1.DeveloperConnect/ListUsers"
	DeveloperConnect_DeleteUser_FullMethodName                   = "/google.cloud.developerconnect.v1.DeveloperConnect/DeleteUser"
	DeveloperConnect_FetchSelf_FullMethodName                    = "/google.cloud.developerconnect.v1.DeveloperConnect/FetchSelf"
	DeveloperConnect_DeleteSelf_FullMethodName                   = "/google.cloud.developerconnect.v1.DeveloperConnect/DeleteSelf"
)

// DeveloperConnectClient is the client API for DeveloperConnect service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeveloperConnectClient interface {
	// Lists Connections in a given project and location.
	ListConnections(ctx context.Context, in *ListConnectionsRequest, opts ...grpc.CallOption) (*ListConnectionsResponse, error)
	// Gets details of a single Connection.
	GetConnection(ctx context.Context, in *GetConnectionRequest, opts ...grpc.CallOption) (*Connection, error)
	// Creates a new Connection in a given project and location.
	CreateConnection(ctx context.Context, in *CreateConnectionRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates the parameters of a single Connection.
	UpdateConnection(ctx context.Context, in *UpdateConnectionRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single Connection.
	DeleteConnection(ctx context.Context, in *DeleteConnectionRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Creates a GitRepositoryLink. Upon linking a Git Repository, Developer
	// Connect will configure the Git Repository to send webhook events to
	// Developer Connect. Connections that use Firebase GitHub Application will
	// have events forwarded to the Firebase service. All other Connections will
	// have events forwarded to Cloud Build.
	CreateGitRepositoryLink(ctx context.Context, in *CreateGitRepositoryLinkRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single GitRepositoryLink.
	DeleteGitRepositoryLink(ctx context.Context, in *DeleteGitRepositoryLinkRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists GitRepositoryLinks in a given project, location, and connection.
	ListGitRepositoryLinks(ctx context.Context, in *ListGitRepositoryLinksRequest, opts ...grpc.CallOption) (*ListGitRepositoryLinksResponse, error)
	// Gets details of a single GitRepositoryLink.
	GetGitRepositoryLink(ctx context.Context, in *GetGitRepositoryLinkRequest, opts ...grpc.CallOption) (*GitRepositoryLink, error)
	// Fetches read/write token of a given gitRepositoryLink.
	FetchReadWriteToken(ctx context.Context, in *FetchReadWriteTokenRequest, opts ...grpc.CallOption) (*FetchReadWriteTokenResponse, error)
	// Fetches read token of a given gitRepositoryLink.
	FetchReadToken(ctx context.Context, in *FetchReadTokenRequest, opts ...grpc.CallOption) (*FetchReadTokenResponse, error)
	// FetchLinkableGitRepositories returns a list of git repositories from an SCM
	// that are available to be added to a Connection.
	FetchLinkableGitRepositories(ctx context.Context, in *FetchLinkableGitRepositoriesRequest, opts ...grpc.CallOption) (*FetchLinkableGitRepositoriesResponse, error)
	// FetchGitHubInstallations returns the list of GitHub Installations that
	// are available to be added to a Connection.
	// For github.com, only installations accessible to the authorizer token
	// are returned. For GitHub Enterprise, all installations are returned.
	FetchGitHubInstallations(ctx context.Context, in *FetchGitHubInstallationsRequest, opts ...grpc.CallOption) (*FetchGitHubInstallationsResponse, error)
	// Fetch the list of branches or tags for a given repository.
	FetchGitRefs(ctx context.Context, in *FetchGitRefsRequest, opts ...grpc.CallOption) (*FetchGitRefsResponse, error)
	// Lists AccountConnectors in a given project and location.
	ListAccountConnectors(ctx context.Context, in *ListAccountConnectorsRequest, opts ...grpc.CallOption) (*ListAccountConnectorsResponse, error)
	// Gets details of a single AccountConnector.
	GetAccountConnector(ctx context.Context, in *GetAccountConnectorRequest, opts ...grpc.CallOption) (*AccountConnector, error)
	// Creates a new AccountConnector in a given project and location.
	CreateAccountConnector(ctx context.Context, in *CreateAccountConnectorRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates the parameters of a single AccountConnector.
	UpdateAccountConnector(ctx context.Context, in *UpdateAccountConnectorRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single AccountConnector.
	DeleteAccountConnector(ctx context.Context, in *DeleteAccountConnectorRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Fetches OAuth access token based on end user credentials.
	FetchAccessToken(ctx context.Context, in *FetchAccessTokenRequest, opts ...grpc.CallOption) (*FetchAccessTokenResponse, error)
	// Lists Users in a given project, location, and account_connector.
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
	// Deletes a single User.
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Fetch the User based on the user credentials.
	FetchSelf(ctx context.Context, in *FetchSelfRequest, opts ...grpc.CallOption) (*User, error)
	// Delete the User based on the user credentials.
	DeleteSelf(ctx context.Context, in *DeleteSelfRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type developerConnectClient struct {
	cc grpc.ClientConnInterface
}

func NewDeveloperConnectClient(cc grpc.ClientConnInterface) DeveloperConnectClient {
	return &developerConnectClient{cc}
}

func (c *developerConnectClient) ListConnections(ctx context.Context, in *ListConnectionsRequest, opts ...grpc.CallOption) (*ListConnectionsResponse, error) {
	out := new(ListConnectionsResponse)
	err := c.cc.Invoke(ctx, DeveloperConnect_ListConnections_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerConnectClient) GetConnection(ctx context.Context, in *GetConnectionRequest, opts ...grpc.CallOption) (*Connection, error) {
	out := new(Connection)
	err := c.cc.Invoke(ctx, DeveloperConnect_GetConnection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerConnectClient) CreateConnection(ctx context.Context, in *CreateConnectionRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, DeveloperConnect_CreateConnection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerConnectClient) UpdateConnection(ctx context.Context, in *UpdateConnectionRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, DeveloperConnect_UpdateConnection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerConnectClient) DeleteConnection(ctx context.Context, in *DeleteConnectionRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, DeveloperConnect_DeleteConnection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerConnectClient) CreateGitRepositoryLink(ctx context.Context, in *CreateGitRepositoryLinkRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, DeveloperConnect_CreateGitRepositoryLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerConnectClient) DeleteGitRepositoryLink(ctx context.Context, in *DeleteGitRepositoryLinkRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, DeveloperConnect_DeleteGitRepositoryLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerConnectClient) ListGitRepositoryLinks(ctx context.Context, in *ListGitRepositoryLinksRequest, opts ...grpc.CallOption) (*ListGitRepositoryLinksResponse, error) {
	out := new(ListGitRepositoryLinksResponse)
	err := c.cc.Invoke(ctx, DeveloperConnect_ListGitRepositoryLinks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerConnectClient) GetGitRepositoryLink(ctx context.Context, in *GetGitRepositoryLinkRequest, opts ...grpc.CallOption) (*GitRepositoryLink, error) {
	out := new(GitRepositoryLink)
	err := c.cc.Invoke(ctx, DeveloperConnect_GetGitRepositoryLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerConnectClient) FetchReadWriteToken(ctx context.Context, in *FetchReadWriteTokenRequest, opts ...grpc.CallOption) (*FetchReadWriteTokenResponse, error) {
	out := new(FetchReadWriteTokenResponse)
	err := c.cc.Invoke(ctx, DeveloperConnect_FetchReadWriteToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerConnectClient) FetchReadToken(ctx context.Context, in *FetchReadTokenRequest, opts ...grpc.CallOption) (*FetchReadTokenResponse, error) {
	out := new(FetchReadTokenResponse)
	err := c.cc.Invoke(ctx, DeveloperConnect_FetchReadToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerConnectClient) FetchLinkableGitRepositories(ctx context.Context, in *FetchLinkableGitRepositoriesRequest, opts ...grpc.CallOption) (*FetchLinkableGitRepositoriesResponse, error) {
	out := new(FetchLinkableGitRepositoriesResponse)
	err := c.cc.Invoke(ctx, DeveloperConnect_FetchLinkableGitRepositories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerConnectClient) FetchGitHubInstallations(ctx context.Context, in *FetchGitHubInstallationsRequest, opts ...grpc.CallOption) (*FetchGitHubInstallationsResponse, error) {
	out := new(FetchGitHubInstallationsResponse)
	err := c.cc.Invoke(ctx, DeveloperConnect_FetchGitHubInstallations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerConnectClient) FetchGitRefs(ctx context.Context, in *FetchGitRefsRequest, opts ...grpc.CallOption) (*FetchGitRefsResponse, error) {
	out := new(FetchGitRefsResponse)
	err := c.cc.Invoke(ctx, DeveloperConnect_FetchGitRefs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerConnectClient) ListAccountConnectors(ctx context.Context, in *ListAccountConnectorsRequest, opts ...grpc.CallOption) (*ListAccountConnectorsResponse, error) {
	out := new(ListAccountConnectorsResponse)
	err := c.cc.Invoke(ctx, DeveloperConnect_ListAccountConnectors_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerConnectClient) GetAccountConnector(ctx context.Context, in *GetAccountConnectorRequest, opts ...grpc.CallOption) (*AccountConnector, error) {
	out := new(AccountConnector)
	err := c.cc.Invoke(ctx, DeveloperConnect_GetAccountConnector_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerConnectClient) CreateAccountConnector(ctx context.Context, in *CreateAccountConnectorRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, DeveloperConnect_CreateAccountConnector_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerConnectClient) UpdateAccountConnector(ctx context.Context, in *UpdateAccountConnectorRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, DeveloperConnect_UpdateAccountConnector_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerConnectClient) DeleteAccountConnector(ctx context.Context, in *DeleteAccountConnectorRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, DeveloperConnect_DeleteAccountConnector_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerConnectClient) FetchAccessToken(ctx context.Context, in *FetchAccessTokenRequest, opts ...grpc.CallOption) (*FetchAccessTokenResponse, error) {
	out := new(FetchAccessTokenResponse)
	err := c.cc.Invoke(ctx, DeveloperConnect_FetchAccessToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerConnectClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, DeveloperConnect_ListUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerConnectClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, DeveloperConnect_DeleteUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerConnectClient) FetchSelf(ctx context.Context, in *FetchSelfRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, DeveloperConnect_FetchSelf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerConnectClient) DeleteSelf(ctx context.Context, in *DeleteSelfRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, DeveloperConnect_DeleteSelf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeveloperConnectServer is the server API for DeveloperConnect service.
// All implementations should embed UnimplementedDeveloperConnectServer
// for forward compatibility
type DeveloperConnectServer interface {
	// Lists Connections in a given project and location.
	ListConnections(context.Context, *ListConnectionsRequest) (*ListConnectionsResponse, error)
	// Gets details of a single Connection.
	GetConnection(context.Context, *GetConnectionRequest) (*Connection, error)
	// Creates a new Connection in a given project and location.
	CreateConnection(context.Context, *CreateConnectionRequest) (*longrunningpb.Operation, error)
	// Updates the parameters of a single Connection.
	UpdateConnection(context.Context, *UpdateConnectionRequest) (*longrunningpb.Operation, error)
	// Deletes a single Connection.
	DeleteConnection(context.Context, *DeleteConnectionRequest) (*longrunningpb.Operation, error)
	// Creates a GitRepositoryLink. Upon linking a Git Repository, Developer
	// Connect will configure the Git Repository to send webhook events to
	// Developer Connect. Connections that use Firebase GitHub Application will
	// have events forwarded to the Firebase service. All other Connections will
	// have events forwarded to Cloud Build.
	CreateGitRepositoryLink(context.Context, *CreateGitRepositoryLinkRequest) (*longrunningpb.Operation, error)
	// Deletes a single GitRepositoryLink.
	DeleteGitRepositoryLink(context.Context, *DeleteGitRepositoryLinkRequest) (*longrunningpb.Operation, error)
	// Lists GitRepositoryLinks in a given project, location, and connection.
	ListGitRepositoryLinks(context.Context, *ListGitRepositoryLinksRequest) (*ListGitRepositoryLinksResponse, error)
	// Gets details of a single GitRepositoryLink.
	GetGitRepositoryLink(context.Context, *GetGitRepositoryLinkRequest) (*GitRepositoryLink, error)
	// Fetches read/write token of a given gitRepositoryLink.
	FetchReadWriteToken(context.Context, *FetchReadWriteTokenRequest) (*FetchReadWriteTokenResponse, error)
	// Fetches read token of a given gitRepositoryLink.
	FetchReadToken(context.Context, *FetchReadTokenRequest) (*FetchReadTokenResponse, error)
	// FetchLinkableGitRepositories returns a list of git repositories from an SCM
	// that are available to be added to a Connection.
	FetchLinkableGitRepositories(context.Context, *FetchLinkableGitRepositoriesRequest) (*FetchLinkableGitRepositoriesResponse, error)
	// FetchGitHubInstallations returns the list of GitHub Installations that
	// are available to be added to a Connection.
	// For github.com, only installations accessible to the authorizer token
	// are returned. For GitHub Enterprise, all installations are returned.
	FetchGitHubInstallations(context.Context, *FetchGitHubInstallationsRequest) (*FetchGitHubInstallationsResponse, error)
	// Fetch the list of branches or tags for a given repository.
	FetchGitRefs(context.Context, *FetchGitRefsRequest) (*FetchGitRefsResponse, error)
	// Lists AccountConnectors in a given project and location.
	ListAccountConnectors(context.Context, *ListAccountConnectorsRequest) (*ListAccountConnectorsResponse, error)
	// Gets details of a single AccountConnector.
	GetAccountConnector(context.Context, *GetAccountConnectorRequest) (*AccountConnector, error)
	// Creates a new AccountConnector in a given project and location.
	CreateAccountConnector(context.Context, *CreateAccountConnectorRequest) (*longrunningpb.Operation, error)
	// Updates the parameters of a single AccountConnector.
	UpdateAccountConnector(context.Context, *UpdateAccountConnectorRequest) (*longrunningpb.Operation, error)
	// Deletes a single AccountConnector.
	DeleteAccountConnector(context.Context, *DeleteAccountConnectorRequest) (*longrunningpb.Operation, error)
	// Fetches OAuth access token based on end user credentials.
	FetchAccessToken(context.Context, *FetchAccessTokenRequest) (*FetchAccessTokenResponse, error)
	// Lists Users in a given project, location, and account_connector.
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	// Deletes a single User.
	DeleteUser(context.Context, *DeleteUserRequest) (*longrunningpb.Operation, error)
	// Fetch the User based on the user credentials.
	FetchSelf(context.Context, *FetchSelfRequest) (*User, error)
	// Delete the User based on the user credentials.
	DeleteSelf(context.Context, *DeleteSelfRequest) (*longrunningpb.Operation, error)
}

// UnimplementedDeveloperConnectServer should be embedded to have forward compatible implementations.
type UnimplementedDeveloperConnectServer struct {
}

func (UnimplementedDeveloperConnectServer) ListConnections(context.Context, *ListConnectionsRequest) (*ListConnectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConnections not implemented")
}
func (UnimplementedDeveloperConnectServer) GetConnection(context.Context, *GetConnectionRequest) (*Connection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnection not implemented")
}
func (UnimplementedDeveloperConnectServer) CreateConnection(context.Context, *CreateConnectionRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConnection not implemented")
}
func (UnimplementedDeveloperConnectServer) UpdateConnection(context.Context, *UpdateConnectionRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConnection not implemented")
}
func (UnimplementedDeveloperConnectServer) DeleteConnection(context.Context, *DeleteConnectionRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConnection not implemented")
}
func (UnimplementedDeveloperConnectServer) CreateGitRepositoryLink(context.Context, *CreateGitRepositoryLinkRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGitRepositoryLink not implemented")
}
func (UnimplementedDeveloperConnectServer) DeleteGitRepositoryLink(context.Context, *DeleteGitRepositoryLinkRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGitRepositoryLink not implemented")
}
func (UnimplementedDeveloperConnectServer) ListGitRepositoryLinks(context.Context, *ListGitRepositoryLinksRequest) (*ListGitRepositoryLinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGitRepositoryLinks not implemented")
}
func (UnimplementedDeveloperConnectServer) GetGitRepositoryLink(context.Context, *GetGitRepositoryLinkRequest) (*GitRepositoryLink, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGitRepositoryLink not implemented")
}
func (UnimplementedDeveloperConnectServer) FetchReadWriteToken(context.Context, *FetchReadWriteTokenRequest) (*FetchReadWriteTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchReadWriteToken not implemented")
}
func (UnimplementedDeveloperConnectServer) FetchReadToken(context.Context, *FetchReadTokenRequest) (*FetchReadTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchReadToken not implemented")
}
func (UnimplementedDeveloperConnectServer) FetchLinkableGitRepositories(context.Context, *FetchLinkableGitRepositoriesRequest) (*FetchLinkableGitRepositoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchLinkableGitRepositories not implemented")
}
func (UnimplementedDeveloperConnectServer) FetchGitHubInstallations(context.Context, *FetchGitHubInstallationsRequest) (*FetchGitHubInstallationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchGitHubInstallations not implemented")
}
func (UnimplementedDeveloperConnectServer) FetchGitRefs(context.Context, *FetchGitRefsRequest) (*FetchGitRefsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchGitRefs not implemented")
}
func (UnimplementedDeveloperConnectServer) ListAccountConnectors(context.Context, *ListAccountConnectorsRequest) (*ListAccountConnectorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccountConnectors not implemented")
}
func (UnimplementedDeveloperConnectServer) GetAccountConnector(context.Context, *GetAccountConnectorRequest) (*AccountConnector, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountConnector not implemented")
}
func (UnimplementedDeveloperConnectServer) CreateAccountConnector(context.Context, *CreateAccountConnectorRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccountConnector not implemented")
}
func (UnimplementedDeveloperConnectServer) UpdateAccountConnector(context.Context, *UpdateAccountConnectorRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccountConnector not implemented")
}
func (UnimplementedDeveloperConnectServer) DeleteAccountConnector(context.Context, *DeleteAccountConnectorRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccountConnector not implemented")
}
func (UnimplementedDeveloperConnectServer) FetchAccessToken(context.Context, *FetchAccessTokenRequest) (*FetchAccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAccessToken not implemented")
}
func (UnimplementedDeveloperConnectServer) ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedDeveloperConnectServer) DeleteUser(context.Context, *DeleteUserRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedDeveloperConnectServer) FetchSelf(context.Context, *FetchSelfRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchSelf not implemented")
}
func (UnimplementedDeveloperConnectServer) DeleteSelf(context.Context, *DeleteSelfRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSelf not implemented")
}

// UnsafeDeveloperConnectServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeveloperConnectServer will
// result in compilation errors.
type UnsafeDeveloperConnectServer interface {
	mustEmbedUnimplementedDeveloperConnectServer()
}

func RegisterDeveloperConnectServer(s grpc.ServiceRegistrar, srv DeveloperConnectServer) {
	s.RegisterService(&DeveloperConnect_ServiceDesc, srv)
}

func _DeveloperConnect_ListConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConnectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperConnectServer).ListConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeveloperConnect_ListConnections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperConnectServer).ListConnections(ctx, req.(*ListConnectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeveloperConnect_GetConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperConnectServer).GetConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeveloperConnect_GetConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperConnectServer).GetConnection(ctx, req.(*GetConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeveloperConnect_CreateConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperConnectServer).CreateConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeveloperConnect_CreateConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperConnectServer).CreateConnection(ctx, req.(*CreateConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeveloperConnect_UpdateConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperConnectServer).UpdateConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeveloperConnect_UpdateConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperConnectServer).UpdateConnection(ctx, req.(*UpdateConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeveloperConnect_DeleteConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperConnectServer).DeleteConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeveloperConnect_DeleteConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperConnectServer).DeleteConnection(ctx, req.(*DeleteConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeveloperConnect_CreateGitRepositoryLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGitRepositoryLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperConnectServer).CreateGitRepositoryLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeveloperConnect_CreateGitRepositoryLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperConnectServer).CreateGitRepositoryLink(ctx, req.(*CreateGitRepositoryLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeveloperConnect_DeleteGitRepositoryLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGitRepositoryLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperConnectServer).DeleteGitRepositoryLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeveloperConnect_DeleteGitRepositoryLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperConnectServer).DeleteGitRepositoryLink(ctx, req.(*DeleteGitRepositoryLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeveloperConnect_ListGitRepositoryLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGitRepositoryLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperConnectServer).ListGitRepositoryLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeveloperConnect_ListGitRepositoryLinks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperConnectServer).ListGitRepositoryLinks(ctx, req.(*ListGitRepositoryLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeveloperConnect_GetGitRepositoryLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGitRepositoryLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperConnectServer).GetGitRepositoryLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeveloperConnect_GetGitRepositoryLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperConnectServer).GetGitRepositoryLink(ctx, req.(*GetGitRepositoryLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeveloperConnect_FetchReadWriteToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchReadWriteTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperConnectServer).FetchReadWriteToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeveloperConnect_FetchReadWriteToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperConnectServer).FetchReadWriteToken(ctx, req.(*FetchReadWriteTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeveloperConnect_FetchReadToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchReadTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperConnectServer).FetchReadToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeveloperConnect_FetchReadToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperConnectServer).FetchReadToken(ctx, req.(*FetchReadTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeveloperConnect_FetchLinkableGitRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchLinkableGitRepositoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperConnectServer).FetchLinkableGitRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeveloperConnect_FetchLinkableGitRepositories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperConnectServer).FetchLinkableGitRepositories(ctx, req.(*FetchLinkableGitRepositoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeveloperConnect_FetchGitHubInstallations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchGitHubInstallationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperConnectServer).FetchGitHubInstallations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeveloperConnect_FetchGitHubInstallations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperConnectServer).FetchGitHubInstallations(ctx, req.(*FetchGitHubInstallationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeveloperConnect_FetchGitRefs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchGitRefsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperConnectServer).FetchGitRefs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeveloperConnect_FetchGitRefs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperConnectServer).FetchGitRefs(ctx, req.(*FetchGitRefsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeveloperConnect_ListAccountConnectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccountConnectorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperConnectServer).ListAccountConnectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeveloperConnect_ListAccountConnectors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperConnectServer).ListAccountConnectors(ctx, req.(*ListAccountConnectorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeveloperConnect_GetAccountConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperConnectServer).GetAccountConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeveloperConnect_GetAccountConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperConnectServer).GetAccountConnector(ctx, req.(*GetAccountConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeveloperConnect_CreateAccountConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperConnectServer).CreateAccountConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeveloperConnect_CreateAccountConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperConnectServer).CreateAccountConnector(ctx, req.(*CreateAccountConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeveloperConnect_UpdateAccountConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperConnectServer).UpdateAccountConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeveloperConnect_UpdateAccountConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperConnectServer).UpdateAccountConnector(ctx, req.(*UpdateAccountConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeveloperConnect_DeleteAccountConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperConnectServer).DeleteAccountConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeveloperConnect_DeleteAccountConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperConnectServer).DeleteAccountConnector(ctx, req.(*DeleteAccountConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeveloperConnect_FetchAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperConnectServer).FetchAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeveloperConnect_FetchAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperConnectServer).FetchAccessToken(ctx, req.(*FetchAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeveloperConnect_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperConnectServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeveloperConnect_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperConnectServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeveloperConnect_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperConnectServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeveloperConnect_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperConnectServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeveloperConnect_FetchSelf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchSelfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperConnectServer).FetchSelf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeveloperConnect_FetchSelf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperConnectServer).FetchSelf(ctx, req.(*FetchSelfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeveloperConnect_DeleteSelf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSelfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperConnectServer).DeleteSelf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeveloperConnect_DeleteSelf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperConnectServer).DeleteSelf(ctx, req.(*DeleteSelfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeveloperConnect_ServiceDesc is the grpc.ServiceDesc for DeveloperConnect service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeveloperConnect_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.developerconnect.v1.DeveloperConnect",
	HandlerType: (*DeveloperConnectServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListConnections",
			Handler:    _DeveloperConnect_ListConnections_Handler,
		},
		{
			MethodName: "GetConnection",
			Handler:    _DeveloperConnect_GetConnection_Handler,
		},
		{
			MethodName: "CreateConnection",
			Handler:    _DeveloperConnect_CreateConnection_Handler,
		},
		{
			MethodName: "UpdateConnection",
			Handler:    _DeveloperConnect_UpdateConnection_Handler,
		},
		{
			MethodName: "DeleteConnection",
			Handler:    _DeveloperConnect_DeleteConnection_Handler,
		},
		{
			MethodName: "CreateGitRepositoryLink",
			Handler:    _DeveloperConnect_CreateGitRepositoryLink_Handler,
		},
		{
			MethodName: "DeleteGitRepositoryLink",
			Handler:    _DeveloperConnect_DeleteGitRepositoryLink_Handler,
		},
		{
			MethodName: "ListGitRepositoryLinks",
			Handler:    _DeveloperConnect_ListGitRepositoryLinks_Handler,
		},
		{
			MethodName: "GetGitRepositoryLink",
			Handler:    _DeveloperConnect_GetGitRepositoryLink_Handler,
		},
		{
			MethodName: "FetchReadWriteToken",
			Handler:    _DeveloperConnect_FetchReadWriteToken_Handler,
		},
		{
			MethodName: "FetchReadToken",
			Handler:    _DeveloperConnect_FetchReadToken_Handler,
		},
		{
			MethodName: "FetchLinkableGitRepositories",
			Handler:    _DeveloperConnect_FetchLinkableGitRepositories_Handler,
		},
		{
			MethodName: "FetchGitHubInstallations",
			Handler:    _DeveloperConnect_FetchGitHubInstallations_Handler,
		},
		{
			MethodName: "FetchGitRefs",
			Handler:    _DeveloperConnect_FetchGitRefs_Handler,
		},
		{
			MethodName: "ListAccountConnectors",
			Handler:    _DeveloperConnect_ListAccountConnectors_Handler,
		},
		{
			MethodName: "GetAccountConnector",
			Handler:    _DeveloperConnect_GetAccountConnector_Handler,
		},
		{
			MethodName: "CreateAccountConnector",
			Handler:    _DeveloperConnect_CreateAccountConnector_Handler,
		},
		{
			MethodName: "UpdateAccountConnector",
			Handler:    _DeveloperConnect_UpdateAccountConnector_Handler,
		},
		{
			MethodName: "DeleteAccountConnector",
			Handler:    _DeveloperConnect_DeleteAccountConnector_Handler,
		},
		{
			MethodName: "FetchAccessToken",
			Handler:    _DeveloperConnect_FetchAccessToken_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _DeveloperConnect_ListUsers_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _DeveloperConnect_DeleteUser_Handler,
		},
		{
			MethodName: "FetchSelf",
			Handler:    _DeveloperConnect_FetchSelf_Handler,
		},
		{
			MethodName: "DeleteSelf",
			Handler:    _DeveloperConnect_DeleteSelf_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/developerconnect/v1/developer_connect.proto",
}
