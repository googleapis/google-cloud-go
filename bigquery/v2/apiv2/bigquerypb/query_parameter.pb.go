// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.7
// source: google/cloud/bigquery/v2/query_parameter.proto

package bigquerypb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The type of a struct parameter.
type QueryParameterStructType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The name of this field.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Required. The type of this field.
	Type *QueryParameterType `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Optional. Human-oriented description of the field.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *QueryParameterStructType) Reset() {
	*x = QueryParameterStructType{}
	mi := &file_google_cloud_bigquery_v2_query_parameter_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryParameterStructType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryParameterStructType) ProtoMessage() {}

func (x *QueryParameterStructType) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_query_parameter_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryParameterStructType.ProtoReflect.Descriptor instead.
func (*QueryParameterStructType) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_query_parameter_proto_rawDescGZIP(), []int{0}
}

func (x *QueryParameterStructType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryParameterStructType) GetType() *QueryParameterType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *QueryParameterStructType) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// The type of a query parameter.
type QueryParameterType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The top level type of this field.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Optional. The type of the array's elements, if this is an array.
	ArrayType *QueryParameterType `protobuf:"bytes,2,opt,name=array_type,json=arrayType,proto3" json:"array_type,omitempty"`
	// Optional. The types of the fields of this struct, in order, if this is a
	// struct.
	StructTypes []*QueryParameterStructType `protobuf:"bytes,3,rep,name=struct_types,json=structTypes,proto3" json:"struct_types,omitempty"`
	// Optional. The element type of the range, if this is a range.
	RangeElementType *QueryParameterType `protobuf:"bytes,4,opt,name=range_element_type,json=rangeElementType,proto3" json:"range_element_type,omitempty"`
}

func (x *QueryParameterType) Reset() {
	*x = QueryParameterType{}
	mi := &file_google_cloud_bigquery_v2_query_parameter_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryParameterType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryParameterType) ProtoMessage() {}

func (x *QueryParameterType) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_query_parameter_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryParameterType.ProtoReflect.Descriptor instead.
func (*QueryParameterType) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_query_parameter_proto_rawDescGZIP(), []int{1}
}

func (x *QueryParameterType) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *QueryParameterType) GetArrayType() *QueryParameterType {
	if x != nil {
		return x.ArrayType
	}
	return nil
}

func (x *QueryParameterType) GetStructTypes() []*QueryParameterStructType {
	if x != nil {
		return x.StructTypes
	}
	return nil
}

func (x *QueryParameterType) GetRangeElementType() *QueryParameterType {
	if x != nil {
		return x.RangeElementType
	}
	return nil
}

// Represents the value of a range.
type RangeValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The start value of the range. A missing value represents an
	// unbounded start.
	Start *QueryParameterValue `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	// Optional. The end value of the range. A missing value represents an
	// unbounded end.
	End *QueryParameterValue `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *RangeValue) Reset() {
	*x = RangeValue{}
	mi := &file_google_cloud_bigquery_v2_query_parameter_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RangeValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeValue) ProtoMessage() {}

func (x *RangeValue) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_query_parameter_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeValue.ProtoReflect.Descriptor instead.
func (*RangeValue) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_query_parameter_proto_rawDescGZIP(), []int{2}
}

func (x *RangeValue) GetStart() *QueryParameterValue {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *RangeValue) GetEnd() *QueryParameterValue {
	if x != nil {
		return x.End
	}
	return nil
}

// The value of a query parameter.
type QueryParameterValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The value of this value, if a simple scalar type.
	Value *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Optional. The array values, if this is an array type.
	ArrayValues []*QueryParameterValue `protobuf:"bytes,2,rep,name=array_values,json=arrayValues,proto3" json:"array_values,omitempty"`
	// The struct field values.
	StructValues map[string]*QueryParameterValue `protobuf:"bytes,3,rep,name=struct_values,json=structValues,proto3" json:"struct_values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Optional. The range value, if this is a range type.
	RangeValue *RangeValue `protobuf:"bytes,6,opt,name=range_value,json=rangeValue,proto3" json:"range_value,omitempty"`
	// This field should not be used.
	AltStructValues []*structpb.Value `protobuf:"bytes,5,rep,name=alt_struct_values,json=altStructValues,proto3" json:"alt_struct_values,omitempty"`
}

func (x *QueryParameterValue) Reset() {
	*x = QueryParameterValue{}
	mi := &file_google_cloud_bigquery_v2_query_parameter_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryParameterValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryParameterValue) ProtoMessage() {}

func (x *QueryParameterValue) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_query_parameter_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryParameterValue.ProtoReflect.Descriptor instead.
func (*QueryParameterValue) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_query_parameter_proto_rawDescGZIP(), []int{3}
}

func (x *QueryParameterValue) GetValue() *wrapperspb.StringValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *QueryParameterValue) GetArrayValues() []*QueryParameterValue {
	if x != nil {
		return x.ArrayValues
	}
	return nil
}

func (x *QueryParameterValue) GetStructValues() map[string]*QueryParameterValue {
	if x != nil {
		return x.StructValues
	}
	return nil
}

func (x *QueryParameterValue) GetRangeValue() *RangeValue {
	if x != nil {
		return x.RangeValue
	}
	return nil
}

func (x *QueryParameterValue) GetAltStructValues() []*structpb.Value {
	if x != nil {
		return x.AltStructValues
	}
	return nil
}

// A parameter given to a query.
type QueryParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. If unset, this is a positional parameter. Otherwise, should be
	// unique within a query.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Required. The type of this parameter.
	ParameterType *QueryParameterType `protobuf:"bytes,2,opt,name=parameter_type,json=parameterType,proto3" json:"parameter_type,omitempty"`
	// Required. The value of this parameter.
	ParameterValue *QueryParameterValue `protobuf:"bytes,3,opt,name=parameter_value,json=parameterValue,proto3" json:"parameter_value,omitempty"`
}

func (x *QueryParameter) Reset() {
	*x = QueryParameter{}
	mi := &file_google_cloud_bigquery_v2_query_parameter_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryParameter) ProtoMessage() {}

func (x *QueryParameter) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_query_parameter_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryParameter.ProtoReflect.Descriptor instead.
func (*QueryParameter) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_query_parameter_proto_rawDescGZIP(), []int{4}
}

func (x *QueryParameter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryParameter) GetParameterType() *QueryParameterType {
	if x != nil {
		return x.ParameterType
	}
	return nil
}

func (x *QueryParameter) GetParameterValue() *QueryParameterValue {
	if x != nil {
		return x.ParameterValue
	}
	return nil
}

var File_google_cloud_bigquery_v2_query_parameter_proto protoreflect.FileDescriptor

var file_google_cloud_bigquery_v2_query_parameter_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x18, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa1, 0x01, 0x0a, 0x18, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x45, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbc, 0x02,
	0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x50, 0x0a,
	0x0a, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x61, 0x72, 0x72, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x5a, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x12, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x10, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x9c, 0x01, 0x0a,
	0x0a, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x44, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x8b, 0x04, 0x0a, 0x13,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x55, 0x0a, 0x0c,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x64, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0b, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69,
	0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x42, 0x0a, 0x11, 0x61, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x61, 0x6c, 0x74, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x6e, 0x0a, 0x11, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe0, 0x01, 0x0a, 0x0e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x58, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x0d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x5b, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0e, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x70, 0x0a, 0x1c,
	0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x42, 0x13, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x5a, 0x3b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f,
	0x76, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x70, 0x62, 0x3b, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_bigquery_v2_query_parameter_proto_rawDescOnce sync.Once
	file_google_cloud_bigquery_v2_query_parameter_proto_rawDescData = file_google_cloud_bigquery_v2_query_parameter_proto_rawDesc
)

func file_google_cloud_bigquery_v2_query_parameter_proto_rawDescGZIP() []byte {
	file_google_cloud_bigquery_v2_query_parameter_proto_rawDescOnce.Do(func() {
		file_google_cloud_bigquery_v2_query_parameter_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_bigquery_v2_query_parameter_proto_rawDescData)
	})
	return file_google_cloud_bigquery_v2_query_parameter_proto_rawDescData
}

var file_google_cloud_bigquery_v2_query_parameter_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_google_cloud_bigquery_v2_query_parameter_proto_goTypes = []any{
	(*QueryParameterStructType)(nil), // 0: google.cloud.bigquery.v2.QueryParameterStructType
	(*QueryParameterType)(nil),       // 1: google.cloud.bigquery.v2.QueryParameterType
	(*RangeValue)(nil),               // 2: google.cloud.bigquery.v2.RangeValue
	(*QueryParameterValue)(nil),      // 3: google.cloud.bigquery.v2.QueryParameterValue
	(*QueryParameter)(nil),           // 4: google.cloud.bigquery.v2.QueryParameter
	nil,                              // 5: google.cloud.bigquery.v2.QueryParameterValue.StructValuesEntry
	(*wrapperspb.StringValue)(nil),   // 6: google.protobuf.StringValue
	(*structpb.Value)(nil),           // 7: google.protobuf.Value
}
var file_google_cloud_bigquery_v2_query_parameter_proto_depIdxs = []int32{
	1,  // 0: google.cloud.bigquery.v2.QueryParameterStructType.type:type_name -> google.cloud.bigquery.v2.QueryParameterType
	1,  // 1: google.cloud.bigquery.v2.QueryParameterType.array_type:type_name -> google.cloud.bigquery.v2.QueryParameterType
	0,  // 2: google.cloud.bigquery.v2.QueryParameterType.struct_types:type_name -> google.cloud.bigquery.v2.QueryParameterStructType
	1,  // 3: google.cloud.bigquery.v2.QueryParameterType.range_element_type:type_name -> google.cloud.bigquery.v2.QueryParameterType
	3,  // 4: google.cloud.bigquery.v2.RangeValue.start:type_name -> google.cloud.bigquery.v2.QueryParameterValue
	3,  // 5: google.cloud.bigquery.v2.RangeValue.end:type_name -> google.cloud.bigquery.v2.QueryParameterValue
	6,  // 6: google.cloud.bigquery.v2.QueryParameterValue.value:type_name -> google.protobuf.StringValue
	3,  // 7: google.cloud.bigquery.v2.QueryParameterValue.array_values:type_name -> google.cloud.bigquery.v2.QueryParameterValue
	5,  // 8: google.cloud.bigquery.v2.QueryParameterValue.struct_values:type_name -> google.cloud.bigquery.v2.QueryParameterValue.StructValuesEntry
	2,  // 9: google.cloud.bigquery.v2.QueryParameterValue.range_value:type_name -> google.cloud.bigquery.v2.RangeValue
	7,  // 10: google.cloud.bigquery.v2.QueryParameterValue.alt_struct_values:type_name -> google.protobuf.Value
	1,  // 11: google.cloud.bigquery.v2.QueryParameter.parameter_type:type_name -> google.cloud.bigquery.v2.QueryParameterType
	3,  // 12: google.cloud.bigquery.v2.QueryParameter.parameter_value:type_name -> google.cloud.bigquery.v2.QueryParameterValue
	3,  // 13: google.cloud.bigquery.v2.QueryParameterValue.StructValuesEntry.value:type_name -> google.cloud.bigquery.v2.QueryParameterValue
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_google_cloud_bigquery_v2_query_parameter_proto_init() }
func file_google_cloud_bigquery_v2_query_parameter_proto_init() {
	if File_google_cloud_bigquery_v2_query_parameter_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_bigquery_v2_query_parameter_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_cloud_bigquery_v2_query_parameter_proto_goTypes,
		DependencyIndexes: file_google_cloud_bigquery_v2_query_parameter_proto_depIdxs,
		MessageInfos:      file_google_cloud_bigquery_v2_query_parameter_proto_msgTypes,
	}.Build()
	File_google_cloud_bigquery_v2_query_parameter_proto = out.File
	file_google_cloud_bigquery_v2_query_parameter_proto_rawDesc = nil
	file_google_cloud_bigquery_v2_query_parameter_proto_goTypes = nil
	file_google_cloud_bigquery_v2_query_parameter_proto_depIdxs = nil
}
