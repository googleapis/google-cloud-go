// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/bigquery/v2/job.proto

package bigquerypb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	JobService_CancelJob_FullMethodName       = "/google.cloud.bigquery.v2.JobService/CancelJob"
	JobService_GetJob_FullMethodName          = "/google.cloud.bigquery.v2.JobService/GetJob"
	JobService_InsertJob_FullMethodName       = "/google.cloud.bigquery.v2.JobService/InsertJob"
	JobService_DeleteJob_FullMethodName       = "/google.cloud.bigquery.v2.JobService/DeleteJob"
	JobService_ListJobs_FullMethodName        = "/google.cloud.bigquery.v2.JobService/ListJobs"
	JobService_GetQueryResults_FullMethodName = "/google.cloud.bigquery.v2.JobService/GetQueryResults"
	JobService_Query_FullMethodName           = "/google.cloud.bigquery.v2.JobService/Query"
)

// JobServiceClient is the client API for JobService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobServiceClient interface {
	// Requests that a job be cancelled. This call will return immediately, and
	// the client will need to poll for the job status to see if the cancel
	// completed successfully. Cancelled jobs may still incur costs.
	CancelJob(ctx context.Context, in *CancelJobRequest, opts ...grpc.CallOption) (*JobCancelResponse, error)
	// Returns information about a specific job. Job information is available for
	// a six month period after creation. Requires that you're the person who ran
	// the job, or have the Is Owner project role.
	GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*Job, error)
	// Starts a new asynchronous job.
	//
	// This API has two different kinds of endpoint URIs, as this method supports
	// a variety of use cases.
	//
	//   - The *Metadata* URI is used for most interactions, as it accepts the job
	//     configuration directly.
	//   - The *Upload* URI is ONLY for the case when you're sending both a load job
	//     configuration and a data stream together.  In this case, the Upload URI
	//     accepts the job configuration and the data as two distinct multipart MIME
	//     parts.
	InsertJob(ctx context.Context, in *InsertJobRequest, opts ...grpc.CallOption) (*Job, error)
	// Requests the deletion of the metadata of a job. This call returns when the
	// job's metadata is deleted.
	DeleteJob(ctx context.Context, in *DeleteJobRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Lists all jobs that you started in the specified project. Job information
	// is available for a six month period after creation. The job list is sorted
	// in reverse chronological order, by job creation time. Requires the Can View
	// project role, or the Is Owner project role if you set the allUsers
	// property.
	ListJobs(ctx context.Context, in *ListJobsRequest, opts ...grpc.CallOption) (*JobList, error)
	// RPC to get the results of a query job.
	GetQueryResults(ctx context.Context, in *GetQueryResultsRequest, opts ...grpc.CallOption) (*GetQueryResultsResponse, error)
	// Runs a BigQuery SQL query synchronously and returns query results if the
	// query completes within a specified timeout.
	Query(ctx context.Context, in *PostQueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
}

type jobServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJobServiceClient(cc grpc.ClientConnInterface) JobServiceClient {
	return &jobServiceClient{cc}
}

func (c *jobServiceClient) CancelJob(ctx context.Context, in *CancelJobRequest, opts ...grpc.CallOption) (*JobCancelResponse, error) {
	out := new(JobCancelResponse)
	err := c.cc.Invoke(ctx, JobService_CancelJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, JobService_GetJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) InsertJob(ctx context.Context, in *InsertJobRequest, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, JobService_InsertJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) DeleteJob(ctx context.Context, in *DeleteJobRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, JobService_DeleteJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) ListJobs(ctx context.Context, in *ListJobsRequest, opts ...grpc.CallOption) (*JobList, error) {
	out := new(JobList)
	err := c.cc.Invoke(ctx, JobService_ListJobs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) GetQueryResults(ctx context.Context, in *GetQueryResultsRequest, opts ...grpc.CallOption) (*GetQueryResultsResponse, error) {
	out := new(GetQueryResultsResponse)
	err := c.cc.Invoke(ctx, JobService_GetQueryResults_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) Query(ctx context.Context, in *PostQueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, JobService_Query_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobServiceServer is the server API for JobService service.
// All implementations should embed UnimplementedJobServiceServer
// for forward compatibility
type JobServiceServer interface {
	// Requests that a job be cancelled. This call will return immediately, and
	// the client will need to poll for the job status to see if the cancel
	// completed successfully. Cancelled jobs may still incur costs.
	CancelJob(context.Context, *CancelJobRequest) (*JobCancelResponse, error)
	// Returns information about a specific job. Job information is available for
	// a six month period after creation. Requires that you're the person who ran
	// the job, or have the Is Owner project role.
	GetJob(context.Context, *GetJobRequest) (*Job, error)
	// Starts a new asynchronous job.
	//
	// This API has two different kinds of endpoint URIs, as this method supports
	// a variety of use cases.
	//
	//   - The *Metadata* URI is used for most interactions, as it accepts the job
	//     configuration directly.
	//   - The *Upload* URI is ONLY for the case when you're sending both a load job
	//     configuration and a data stream together.  In this case, the Upload URI
	//     accepts the job configuration and the data as two distinct multipart MIME
	//     parts.
	InsertJob(context.Context, *InsertJobRequest) (*Job, error)
	// Requests the deletion of the metadata of a job. This call returns when the
	// job's metadata is deleted.
	DeleteJob(context.Context, *DeleteJobRequest) (*emptypb.Empty, error)
	// Lists all jobs that you started in the specified project. Job information
	// is available for a six month period after creation. The job list is sorted
	// in reverse chronological order, by job creation time. Requires the Can View
	// project role, or the Is Owner project role if you set the allUsers
	// property.
	ListJobs(context.Context, *ListJobsRequest) (*JobList, error)
	// RPC to get the results of a query job.
	GetQueryResults(context.Context, *GetQueryResultsRequest) (*GetQueryResultsResponse, error)
	// Runs a BigQuery SQL query synchronously and returns query results if the
	// query completes within a specified timeout.
	Query(context.Context, *PostQueryRequest) (*QueryResponse, error)
}

// UnimplementedJobServiceServer should be embedded to have forward compatible implementations.
type UnimplementedJobServiceServer struct {
}

func (UnimplementedJobServiceServer) CancelJob(context.Context, *CancelJobRequest) (*JobCancelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelJob not implemented")
}
func (UnimplementedJobServiceServer) GetJob(context.Context, *GetJobRequest) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJob not implemented")
}
func (UnimplementedJobServiceServer) InsertJob(context.Context, *InsertJobRequest) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertJob not implemented")
}
func (UnimplementedJobServiceServer) DeleteJob(context.Context, *DeleteJobRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJob not implemented")
}
func (UnimplementedJobServiceServer) ListJobs(context.Context, *ListJobsRequest) (*JobList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJobs not implemented")
}
func (UnimplementedJobServiceServer) GetQueryResults(context.Context, *GetQueryResultsRequest) (*GetQueryResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueryResults not implemented")
}
func (UnimplementedJobServiceServer) Query(context.Context, *PostQueryRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}

// UnsafeJobServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobServiceServer will
// result in compilation errors.
type UnsafeJobServiceServer interface {
	mustEmbedUnimplementedJobServiceServer()
}

func RegisterJobServiceServer(s grpc.ServiceRegistrar, srv JobServiceServer) {
	s.RegisterService(&JobService_ServiceDesc, srv)
}

func _JobService_CancelJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).CancelJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobService_CancelJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).CancelJob(ctx, req.(*CancelJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobService_GetJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).GetJob(ctx, req.(*GetJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_InsertJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).InsertJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobService_InsertJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).InsertJob(ctx, req.(*InsertJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_DeleteJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).DeleteJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobService_DeleteJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).DeleteJob(ctx, req.(*DeleteJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_ListJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).ListJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobService_ListJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).ListJobs(ctx, req.(*ListJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_GetQueryResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQueryResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).GetQueryResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobService_GetQueryResults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).GetQueryResults(ctx, req.(*GetQueryResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobService_Query_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).Query(ctx, req.(*PostQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JobService_ServiceDesc is the grpc.ServiceDesc for JobService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.bigquery.v2.JobService",
	HandlerType: (*JobServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CancelJob",
			Handler:    _JobService_CancelJob_Handler,
		},
		{
			MethodName: "GetJob",
			Handler:    _JobService_GetJob_Handler,
		},
		{
			MethodName: "InsertJob",
			Handler:    _JobService_InsertJob_Handler,
		},
		{
			MethodName: "DeleteJob",
			Handler:    _JobService_DeleteJob_Handler,
		},
		{
			MethodName: "ListJobs",
			Handler:    _JobService_ListJobs_Handler,
		},
		{
			MethodName: "GetQueryResults",
			Handler:    _JobService_GetQueryResults_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _JobService_Query_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/bigquery/v2/job.proto",
}
