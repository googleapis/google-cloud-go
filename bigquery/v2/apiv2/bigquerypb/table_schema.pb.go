// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.7
// source: google/cloud/bigquery/v2/table_schema.proto

package bigquerypb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// External systems, such as query engines or table formats, that have their
// own data types.
type ForeignTypeInfo_TypeSystem int32

const (
	// TypeSystem not specified.
	ForeignTypeInfo_TYPE_SYSTEM_UNSPECIFIED ForeignTypeInfo_TypeSystem = 0
	// Represents Hive data types.
	ForeignTypeInfo_HIVE ForeignTypeInfo_TypeSystem = 1
)

// Enum value maps for ForeignTypeInfo_TypeSystem.
var (
	ForeignTypeInfo_TypeSystem_name = map[int32]string{
		0: "TYPE_SYSTEM_UNSPECIFIED",
		1: "HIVE",
	}
	ForeignTypeInfo_TypeSystem_value = map[string]int32{
		"TYPE_SYSTEM_UNSPECIFIED": 0,
		"HIVE":                    1,
	}
)

func (x ForeignTypeInfo_TypeSystem) Enum() *ForeignTypeInfo_TypeSystem {
	p := new(ForeignTypeInfo_TypeSystem)
	*p = x
	return p
}

func (x ForeignTypeInfo_TypeSystem) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ForeignTypeInfo_TypeSystem) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_bigquery_v2_table_schema_proto_enumTypes[0].Descriptor()
}

func (ForeignTypeInfo_TypeSystem) Type() protoreflect.EnumType {
	return &file_google_cloud_bigquery_v2_table_schema_proto_enumTypes[0]
}

func (x ForeignTypeInfo_TypeSystem) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ForeignTypeInfo_TypeSystem.Descriptor instead.
func (ForeignTypeInfo_TypeSystem) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_table_schema_proto_rawDescGZIP(), []int{1, 0}
}

// Rounding mode options that can be used when storing NUMERIC
// or BIGNUMERIC values.
type TableFieldSchema_RoundingMode int32

const (
	// Unspecified will default to using ROUND_HALF_AWAY_FROM_ZERO.
	TableFieldSchema_ROUNDING_MODE_UNSPECIFIED TableFieldSchema_RoundingMode = 0
	// ROUND_HALF_AWAY_FROM_ZERO rounds half values away from zero
	// when applying precision and scale upon writing of NUMERIC and BIGNUMERIC
	// values.
	// For Scale: 0
	// 1.1, 1.2, 1.3, 1.4 => 1
	// 1.5, 1.6, 1.7, 1.8, 1.9 => 2
	TableFieldSchema_ROUND_HALF_AWAY_FROM_ZERO TableFieldSchema_RoundingMode = 1
	// ROUND_HALF_EVEN rounds half values to the nearest even value
	// when applying precision and scale upon writing of NUMERIC and BIGNUMERIC
	// values.
	// For Scale: 0
	// 1.1, 1.2, 1.3, 1.4 => 1
	// 1.5 => 2
	// 1.6, 1.7, 1.8, 1.9 => 2
	// 2.5 => 2
	TableFieldSchema_ROUND_HALF_EVEN TableFieldSchema_RoundingMode = 2
)

// Enum value maps for TableFieldSchema_RoundingMode.
var (
	TableFieldSchema_RoundingMode_name = map[int32]string{
		0: "ROUNDING_MODE_UNSPECIFIED",
		1: "ROUND_HALF_AWAY_FROM_ZERO",
		2: "ROUND_HALF_EVEN",
	}
	TableFieldSchema_RoundingMode_value = map[string]int32{
		"ROUNDING_MODE_UNSPECIFIED": 0,
		"ROUND_HALF_AWAY_FROM_ZERO": 1,
		"ROUND_HALF_EVEN":           2,
	}
)

func (x TableFieldSchema_RoundingMode) Enum() *TableFieldSchema_RoundingMode {
	p := new(TableFieldSchema_RoundingMode)
	*p = x
	return p
}

func (x TableFieldSchema_RoundingMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TableFieldSchema_RoundingMode) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_bigquery_v2_table_schema_proto_enumTypes[1].Descriptor()
}

func (TableFieldSchema_RoundingMode) Type() protoreflect.EnumType {
	return &file_google_cloud_bigquery_v2_table_schema_proto_enumTypes[1]
}

func (x TableFieldSchema_RoundingMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TableFieldSchema_RoundingMode.Descriptor instead.
func (TableFieldSchema_RoundingMode) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_table_schema_proto_rawDescGZIP(), []int{3, 0}
}

// Schema of a table
type TableSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Describes the fields in a table.
	Fields []*TableFieldSchema `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	// Optional. Specifies metadata of the foreign data type definition in field
	// schema
	// ([TableFieldSchema.foreign_type_definition][google.cloud.bigquery.v2.TableFieldSchema.foreign_type_definition]).
	ForeignTypeInfo *ForeignTypeInfo `protobuf:"bytes,3,opt,name=foreign_type_info,json=foreignTypeInfo,proto3" json:"foreign_type_info,omitempty"`
}

func (x *TableSchema) Reset() {
	*x = TableSchema{}
	mi := &file_google_cloud_bigquery_v2_table_schema_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TableSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableSchema) ProtoMessage() {}

func (x *TableSchema) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_table_schema_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableSchema.ProtoReflect.Descriptor instead.
func (*TableSchema) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_table_schema_proto_rawDescGZIP(), []int{0}
}

func (x *TableSchema) GetFields() []*TableFieldSchema {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *TableSchema) GetForeignTypeInfo() *ForeignTypeInfo {
	if x != nil {
		return x.ForeignTypeInfo
	}
	return nil
}

// Metadata about the foreign data type definition such as the system
// in which the type is defined.
type ForeignTypeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Specifies the system which defines the foreign data type.
	TypeSystem ForeignTypeInfo_TypeSystem `protobuf:"varint,1,opt,name=type_system,json=typeSystem,proto3,enum=google.cloud.bigquery.v2.ForeignTypeInfo_TypeSystem" json:"type_system,omitempty"`
}

func (x *ForeignTypeInfo) Reset() {
	*x = ForeignTypeInfo{}
	mi := &file_google_cloud_bigquery_v2_table_schema_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ForeignTypeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForeignTypeInfo) ProtoMessage() {}

func (x *ForeignTypeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_table_schema_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForeignTypeInfo.ProtoReflect.Descriptor instead.
func (*ForeignTypeInfo) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_table_schema_proto_rawDescGZIP(), []int{1}
}

func (x *ForeignTypeInfo) GetTypeSystem() ForeignTypeInfo_TypeSystem {
	if x != nil {
		return x.TypeSystem
	}
	return ForeignTypeInfo_TYPE_SYSTEM_UNSPECIFIED
}

// Data policy option proto, it currently supports name only, will support
// precedence later.
type DataPolicyOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Data policy resource name in the form of
	// projects/project_id/locations/location_id/dataPolicies/data_policy_id.
	Name *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
}

func (x *DataPolicyOption) Reset() {
	*x = DataPolicyOption{}
	mi := &file_google_cloud_bigquery_v2_table_schema_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataPolicyOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataPolicyOption) ProtoMessage() {}

func (x *DataPolicyOption) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_table_schema_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataPolicyOption.ProtoReflect.Descriptor instead.
func (*DataPolicyOption) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_table_schema_proto_rawDescGZIP(), []int{2}
}

func (x *DataPolicyOption) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

// A field in TableSchema
type TableFieldSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The field name. The name must contain only letters (a-z, A-Z),
	// numbers (0-9), or underscores (_), and must start with a letter or
	// underscore. The maximum length is 300 characters.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Required. The field data type. Possible values include:
	//
	// * STRING
	// * BYTES
	// * INTEGER (or INT64)
	// * FLOAT (or FLOAT64)
	// * BOOLEAN (or BOOL)
	// * TIMESTAMP
	// * DATE
	// * TIME
	// * DATETIME
	// * GEOGRAPHY
	// * NUMERIC
	// * BIGNUMERIC
	// * JSON
	// * RECORD (or STRUCT)
	// * RANGE
	//
	// Use of RECORD/STRUCT indicates that the field contains a nested schema.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Optional. The field mode. Possible values include NULLABLE, REQUIRED and
	// REPEATED. The default value is NULLABLE.
	Mode string `protobuf:"bytes,3,opt,name=mode,proto3" json:"mode,omitempty"`
	// Optional. Describes the nested schema fields if the type property is set
	// to RECORD.
	Fields []*TableFieldSchema `protobuf:"bytes,4,rep,name=fields,proto3" json:"fields,omitempty"`
	// Optional. The field description. The maximum length is 1,024 characters.
	Description *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// Optional. The policy tags attached to this field, used for field-level
	// access control. If not set, defaults to empty policy_tags.
	PolicyTags *TableFieldSchema_PolicyTagList `protobuf:"bytes,9,opt,name=policy_tags,json=policyTags,proto3" json:"policy_tags,omitempty"`
	// Optional. Data policy options, will replace the data_policies.
	DataPolicies []*DataPolicyOption `protobuf:"bytes,21,rep,name=data_policies,json=dataPolicies,proto3" json:"data_policies,omitempty"`
	// Optional. Maximum length of values of this field for STRINGS or BYTES.
	//
	// If max_length is not specified, no maximum length constraint is imposed
	// on this field.
	//
	// If type = "STRING", then max_length represents the maximum UTF-8
	// length of strings in this field.
	//
	// If type = "BYTES", then max_length represents the maximum number of
	// bytes in this field.
	//
	// It is invalid to set this field if type &ne; "STRING" and &ne; "BYTES".
	MaxLength int64 `protobuf:"varint,10,opt,name=max_length,json=maxLength,proto3" json:"max_length,omitempty"`
	// Optional. Precision (maximum number of total digits in base 10) and scale
	// (maximum number of digits in the fractional part in base 10) constraints
	// for values of this field for NUMERIC or BIGNUMERIC.
	//
	// It is invalid to set precision or scale if type &ne; "NUMERIC" and &ne;
	// "BIGNUMERIC".
	//
	// If precision and scale are not specified, no value range constraint is
	// imposed on this field insofar as values are permitted by the type.
	//
	// Values of this NUMERIC or BIGNUMERIC field must be in this range when:
	//
	//   - Precision (<var>P</var>) and scale (<var>S</var>) are specified:
	//     [-10<sup><var>P</var>-<var>S</var></sup> + 10<sup>-<var>S</var></sup>,
	//     10<sup><var>P</var>-<var>S</var></sup> - 10<sup>-<var>S</var></sup>]
	//   - Precision (<var>P</var>) is specified but not scale (and thus scale is
	//     interpreted to be equal to zero):
	//     [-10<sup><var>P</var></sup> + 1, 10<sup><var>P</var></sup> - 1].
	//
	// Acceptable values for precision and scale if both are specified:
	//
	//   - If type = "NUMERIC":
	//     1 &le; precision - scale &le; 29 and 0 &le; scale &le; 9.
	//   - If type = "BIGNUMERIC":
	//     1 &le; precision - scale &le; 38 and 0 &le; scale &le; 38.
	//
	// Acceptable values for precision if only precision is specified but not
	// scale (and thus scale is interpreted to be equal to zero):
	//
	// * If type = "NUMERIC": 1 &le; precision &le; 29.
	// * If type = "BIGNUMERIC": 1 &le; precision &le; 38.
	//
	// If scale is specified but not precision, then it is invalid.
	Precision int64 `protobuf:"varint,11,opt,name=precision,proto3" json:"precision,omitempty"`
	// Optional. See documentation for precision.
	Scale int64 `protobuf:"varint,12,opt,name=scale,proto3" json:"scale,omitempty"`
	// Optional. Specifies the rounding mode to be used when storing values of
	// NUMERIC and BIGNUMERIC type.
	RoundingMode TableFieldSchema_RoundingMode `protobuf:"varint,15,opt,name=rounding_mode,json=roundingMode,proto3,enum=google.cloud.bigquery.v2.TableFieldSchema_RoundingMode" json:"rounding_mode,omitempty"`
	// Optional. Field collation can be set only when the type of field is STRING.
	// The following values are supported:
	//
	// * 'und:ci': undetermined locale, case insensitive.
	// * ”: empty string. Default to case-sensitive behavior.
	Collation *wrapperspb.StringValue `protobuf:"bytes,13,opt,name=collation,proto3" json:"collation,omitempty"`
	// Optional. A SQL expression to specify the [default value]
	// (https://cloud.google.com/bigquery/docs/default-values) for this field.
	DefaultValueExpression *wrapperspb.StringValue `protobuf:"bytes,14,opt,name=default_value_expression,json=defaultValueExpression,proto3" json:"default_value_expression,omitempty"`
	// Optional. The subtype of the RANGE, if the type of this field is RANGE. If
	// the type is RANGE, this field is required. Values for the field element
	// type can be the following:
	//
	// * DATE
	// * DATETIME
	// * TIMESTAMP
	RangeElementType *TableFieldSchema_FieldElementType `protobuf:"bytes,18,opt,name=range_element_type,json=rangeElementType,proto3" json:"range_element_type,omitempty"`
	// Optional. Definition of the foreign data type.
	// Only valid for top-level schema fields (not nested fields).
	// If the type is FOREIGN, this field is required.
	ForeignTypeDefinition string `protobuf:"bytes,23,opt,name=foreign_type_definition,json=foreignTypeDefinition,proto3" json:"foreign_type_definition,omitempty"`
}

func (x *TableFieldSchema) Reset() {
	*x = TableFieldSchema{}
	mi := &file_google_cloud_bigquery_v2_table_schema_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TableFieldSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableFieldSchema) ProtoMessage() {}

func (x *TableFieldSchema) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_table_schema_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableFieldSchema.ProtoReflect.Descriptor instead.
func (*TableFieldSchema) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_table_schema_proto_rawDescGZIP(), []int{3}
}

func (x *TableFieldSchema) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TableFieldSchema) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TableFieldSchema) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *TableFieldSchema) GetFields() []*TableFieldSchema {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *TableFieldSchema) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *TableFieldSchema) GetPolicyTags() *TableFieldSchema_PolicyTagList {
	if x != nil {
		return x.PolicyTags
	}
	return nil
}

func (x *TableFieldSchema) GetDataPolicies() []*DataPolicyOption {
	if x != nil {
		return x.DataPolicies
	}
	return nil
}

func (x *TableFieldSchema) GetMaxLength() int64 {
	if x != nil {
		return x.MaxLength
	}
	return 0
}

func (x *TableFieldSchema) GetPrecision() int64 {
	if x != nil {
		return x.Precision
	}
	return 0
}

func (x *TableFieldSchema) GetScale() int64 {
	if x != nil {
		return x.Scale
	}
	return 0
}

func (x *TableFieldSchema) GetRoundingMode() TableFieldSchema_RoundingMode {
	if x != nil {
		return x.RoundingMode
	}
	return TableFieldSchema_ROUNDING_MODE_UNSPECIFIED
}

func (x *TableFieldSchema) GetCollation() *wrapperspb.StringValue {
	if x != nil {
		return x.Collation
	}
	return nil
}

func (x *TableFieldSchema) GetDefaultValueExpression() *wrapperspb.StringValue {
	if x != nil {
		return x.DefaultValueExpression
	}
	return nil
}

func (x *TableFieldSchema) GetRangeElementType() *TableFieldSchema_FieldElementType {
	if x != nil {
		return x.RangeElementType
	}
	return nil
}

func (x *TableFieldSchema) GetForeignTypeDefinition() string {
	if x != nil {
		return x.ForeignTypeDefinition
	}
	return ""
}

type TableFieldSchema_PolicyTagList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of policy tag resource names. For example,
	// "projects/1/locations/eu/taxonomies/2/policyTags/3". At most 1 policy tag
	// is currently allowed.
	Names []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *TableFieldSchema_PolicyTagList) Reset() {
	*x = TableFieldSchema_PolicyTagList{}
	mi := &file_google_cloud_bigquery_v2_table_schema_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TableFieldSchema_PolicyTagList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableFieldSchema_PolicyTagList) ProtoMessage() {}

func (x *TableFieldSchema_PolicyTagList) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_table_schema_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableFieldSchema_PolicyTagList.ProtoReflect.Descriptor instead.
func (*TableFieldSchema_PolicyTagList) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_table_schema_proto_rawDescGZIP(), []int{3, 0}
}

func (x *TableFieldSchema_PolicyTagList) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

// Represents the type of a field element.
type TableFieldSchema_FieldElementType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The type of a field element. For more information, see
	// [TableFieldSchema.type][google.cloud.bigquery.v2.TableFieldSchema.type].
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *TableFieldSchema_FieldElementType) Reset() {
	*x = TableFieldSchema_FieldElementType{}
	mi := &file_google_cloud_bigquery_v2_table_schema_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TableFieldSchema_FieldElementType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableFieldSchema_FieldElementType) ProtoMessage() {}

func (x *TableFieldSchema_FieldElementType) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_table_schema_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableFieldSchema_FieldElementType.ProtoReflect.Descriptor instead.
func (*TableFieldSchema_FieldElementType) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_table_schema_proto_rawDescGZIP(), []int{3, 1}
}

func (x *TableFieldSchema_FieldElementType) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

var File_google_cloud_bigquery_v2_table_schema_proto protoreflect.FileDescriptor

var file_google_cloud_bigquery_v2_table_schema_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xad, 0x01, 0x0a, 0x0b, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x42, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x5a, 0x0a, 0x11,
	0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xa2, 0x01, 0x0a, 0x0f, 0x46, 0x6f, 0x72,
	0x65, 0x69, 0x67, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5a, 0x0a, 0x0b,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x6f, 0x72,
	0x65, 0x69, 0x67, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x74, 0x79,
	0x70, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22, 0x33, 0x0a, 0x0a, 0x54, 0x79, 0x70, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x49, 0x56, 0x45, 0x10, 0x01, 0x22, 0x34, 0x0a,
	0x10, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0xe8, 0x08, 0x0a, 0x10, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x43, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x5e, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76,
	0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x61, 0x67,
	0x73, 0x12, 0x54, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x09, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x09, 0x70,
	0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19,
	0x0a, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x61, 0x0a, 0x0d, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x09,
	0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a,
	0x18, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x16, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x6e, 0x0a, 0x12, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76,
	0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x10, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x17, 0x66, 0x6f,
	0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x15, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x25, 0x0a, 0x0d, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x1a, 0x2b,
	0x0a, 0x10, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x61, 0x0a, 0x0c, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x52,
	0x4f, 0x55, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x4f,
	0x55, 0x4e, 0x44, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x5f, 0x41, 0x57, 0x41, 0x59, 0x5f, 0x46, 0x52,
	0x4f, 0x4d, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x4f, 0x55,
	0x4e, 0x44, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x10, 0x02, 0x42, 0x6d,
	0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x42, 0x10,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x5a, 0x3b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76,
	0x32, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x70, 0x62, 0x3b, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_bigquery_v2_table_schema_proto_rawDescOnce sync.Once
	file_google_cloud_bigquery_v2_table_schema_proto_rawDescData = file_google_cloud_bigquery_v2_table_schema_proto_rawDesc
)

func file_google_cloud_bigquery_v2_table_schema_proto_rawDescGZIP() []byte {
	file_google_cloud_bigquery_v2_table_schema_proto_rawDescOnce.Do(func() {
		file_google_cloud_bigquery_v2_table_schema_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_bigquery_v2_table_schema_proto_rawDescData)
	})
	return file_google_cloud_bigquery_v2_table_schema_proto_rawDescData
}

var file_google_cloud_bigquery_v2_table_schema_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_google_cloud_bigquery_v2_table_schema_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_google_cloud_bigquery_v2_table_schema_proto_goTypes = []any{
	(ForeignTypeInfo_TypeSystem)(0),           // 0: google.cloud.bigquery.v2.ForeignTypeInfo.TypeSystem
	(TableFieldSchema_RoundingMode)(0),        // 1: google.cloud.bigquery.v2.TableFieldSchema.RoundingMode
	(*TableSchema)(nil),                       // 2: google.cloud.bigquery.v2.TableSchema
	(*ForeignTypeInfo)(nil),                   // 3: google.cloud.bigquery.v2.ForeignTypeInfo
	(*DataPolicyOption)(nil),                  // 4: google.cloud.bigquery.v2.DataPolicyOption
	(*TableFieldSchema)(nil),                  // 5: google.cloud.bigquery.v2.TableFieldSchema
	(*TableFieldSchema_PolicyTagList)(nil),    // 6: google.cloud.bigquery.v2.TableFieldSchema.PolicyTagList
	(*TableFieldSchema_FieldElementType)(nil), // 7: google.cloud.bigquery.v2.TableFieldSchema.FieldElementType
	(*wrapperspb.StringValue)(nil),            // 8: google.protobuf.StringValue
}
var file_google_cloud_bigquery_v2_table_schema_proto_depIdxs = []int32{
	5,  // 0: google.cloud.bigquery.v2.TableSchema.fields:type_name -> google.cloud.bigquery.v2.TableFieldSchema
	3,  // 1: google.cloud.bigquery.v2.TableSchema.foreign_type_info:type_name -> google.cloud.bigquery.v2.ForeignTypeInfo
	0,  // 2: google.cloud.bigquery.v2.ForeignTypeInfo.type_system:type_name -> google.cloud.bigquery.v2.ForeignTypeInfo.TypeSystem
	5,  // 3: google.cloud.bigquery.v2.TableFieldSchema.fields:type_name -> google.cloud.bigquery.v2.TableFieldSchema
	8,  // 4: google.cloud.bigquery.v2.TableFieldSchema.description:type_name -> google.protobuf.StringValue
	6,  // 5: google.cloud.bigquery.v2.TableFieldSchema.policy_tags:type_name -> google.cloud.bigquery.v2.TableFieldSchema.PolicyTagList
	4,  // 6: google.cloud.bigquery.v2.TableFieldSchema.data_policies:type_name -> google.cloud.bigquery.v2.DataPolicyOption
	1,  // 7: google.cloud.bigquery.v2.TableFieldSchema.rounding_mode:type_name -> google.cloud.bigquery.v2.TableFieldSchema.RoundingMode
	8,  // 8: google.cloud.bigquery.v2.TableFieldSchema.collation:type_name -> google.protobuf.StringValue
	8,  // 9: google.cloud.bigquery.v2.TableFieldSchema.default_value_expression:type_name -> google.protobuf.StringValue
	7,  // 10: google.cloud.bigquery.v2.TableFieldSchema.range_element_type:type_name -> google.cloud.bigquery.v2.TableFieldSchema.FieldElementType
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_google_cloud_bigquery_v2_table_schema_proto_init() }
func file_google_cloud_bigquery_v2_table_schema_proto_init() {
	if File_google_cloud_bigquery_v2_table_schema_proto != nil {
		return
	}
	file_google_cloud_bigquery_v2_table_schema_proto_msgTypes[2].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_bigquery_v2_table_schema_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_cloud_bigquery_v2_table_schema_proto_goTypes,
		DependencyIndexes: file_google_cloud_bigquery_v2_table_schema_proto_depIdxs,
		EnumInfos:         file_google_cloud_bigquery_v2_table_schema_proto_enumTypes,
		MessageInfos:      file_google_cloud_bigquery_v2_table_schema_proto_msgTypes,
	}.Build()
	File_google_cloud_bigquery_v2_table_schema_proto = out.File
	file_google_cloud_bigquery_v2_table_schema_proto_rawDesc = nil
	file_google_cloud_bigquery_v2_table_schema_proto_goTypes = nil
	file_google_cloud_bigquery_v2_table_schema_proto_depIdxs = nil
}
