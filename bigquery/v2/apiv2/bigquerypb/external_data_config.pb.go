// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.7
// source: google/cloud/bigquery/v2/external_data_config.proto

package bigquerypb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Supported Object Metadata Types.
type ExternalDataConfiguration_ObjectMetadata int32

const (
	// Unspecified by default.
	ExternalDataConfiguration_OBJECT_METADATA_UNSPECIFIED ExternalDataConfiguration_ObjectMetadata = 0
	// A synonym for `SIMPLE`.
	ExternalDataConfiguration_DIRECTORY ExternalDataConfiguration_ObjectMetadata = 1
	// Directory listing of objects.
	ExternalDataConfiguration_SIMPLE ExternalDataConfiguration_ObjectMetadata = 2
)

// Enum value maps for ExternalDataConfiguration_ObjectMetadata.
var (
	ExternalDataConfiguration_ObjectMetadata_name = map[int32]string{
		0: "OBJECT_METADATA_UNSPECIFIED",
		1: "DIRECTORY",
		2: "SIMPLE",
	}
	ExternalDataConfiguration_ObjectMetadata_value = map[string]int32{
		"OBJECT_METADATA_UNSPECIFIED": 0,
		"DIRECTORY":                   1,
		"SIMPLE":                      2,
	}
)

func (x ExternalDataConfiguration_ObjectMetadata) Enum() *ExternalDataConfiguration_ObjectMetadata {
	p := new(ExternalDataConfiguration_ObjectMetadata)
	*p = x
	return p
}

func (x ExternalDataConfiguration_ObjectMetadata) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExternalDataConfiguration_ObjectMetadata) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_bigquery_v2_external_data_config_proto_enumTypes[0].Descriptor()
}

func (ExternalDataConfiguration_ObjectMetadata) Type() protoreflect.EnumType {
	return &file_google_cloud_bigquery_v2_external_data_config_proto_enumTypes[0]
}

func (x ExternalDataConfiguration_ObjectMetadata) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExternalDataConfiguration_ObjectMetadata.Descriptor instead.
func (ExternalDataConfiguration_ObjectMetadata) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_external_data_config_proto_rawDescGZIP(), []int{8, 0}
}

// MetadataCacheMode identifies if the table should use metadata caching for
// files from external source (eg Google Cloud Storage).
type ExternalDataConfiguration_MetadataCacheMode int32

const (
	// Unspecified metadata cache mode.
	ExternalDataConfiguration_METADATA_CACHE_MODE_UNSPECIFIED ExternalDataConfiguration_MetadataCacheMode = 0
	// Set this mode to trigger automatic background refresh of metadata cache
	// from the external source. Queries will use the latest available cache
	// version within the table's maxStaleness interval.
	ExternalDataConfiguration_AUTOMATIC ExternalDataConfiguration_MetadataCacheMode = 1
	// Set this mode to enable triggering manual refresh of the metadata cache
	// from external source. Queries will use the latest manually triggered
	// cache version within the table's maxStaleness interval.
	ExternalDataConfiguration_MANUAL ExternalDataConfiguration_MetadataCacheMode = 2
)

// Enum value maps for ExternalDataConfiguration_MetadataCacheMode.
var (
	ExternalDataConfiguration_MetadataCacheMode_name = map[int32]string{
		0: "METADATA_CACHE_MODE_UNSPECIFIED",
		1: "AUTOMATIC",
		2: "MANUAL",
	}
	ExternalDataConfiguration_MetadataCacheMode_value = map[string]int32{
		"METADATA_CACHE_MODE_UNSPECIFIED": 0,
		"AUTOMATIC":                       1,
		"MANUAL":                          2,
	}
)

func (x ExternalDataConfiguration_MetadataCacheMode) Enum() *ExternalDataConfiguration_MetadataCacheMode {
	p := new(ExternalDataConfiguration_MetadataCacheMode)
	*p = x
	return p
}

func (x ExternalDataConfiguration_MetadataCacheMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExternalDataConfiguration_MetadataCacheMode) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_bigquery_v2_external_data_config_proto_enumTypes[1].Descriptor()
}

func (ExternalDataConfiguration_MetadataCacheMode) Type() protoreflect.EnumType {
	return &file_google_cloud_bigquery_v2_external_data_config_proto_enumTypes[1]
}

func (x ExternalDataConfiguration_MetadataCacheMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExternalDataConfiguration_MetadataCacheMode.Descriptor instead.
func (ExternalDataConfiguration_MetadataCacheMode) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_external_data_config_proto_rawDescGZIP(), []int{8, 1}
}

// Options for external data sources.
type AvroOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. If sourceFormat is set to "AVRO", indicates whether to interpret
	// logical types as the corresponding BigQuery data type (for example,
	// TIMESTAMP), instead of using the raw type (for example, INTEGER).
	UseAvroLogicalTypes *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=use_avro_logical_types,json=useAvroLogicalTypes,proto3" json:"use_avro_logical_types,omitempty"`
}

func (x *AvroOptions) Reset() {
	*x = AvroOptions{}
	mi := &file_google_cloud_bigquery_v2_external_data_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AvroOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvroOptions) ProtoMessage() {}

func (x *AvroOptions) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_external_data_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvroOptions.ProtoReflect.Descriptor instead.
func (*AvroOptions) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_external_data_config_proto_rawDescGZIP(), []int{0}
}

func (x *AvroOptions) GetUseAvroLogicalTypes() *wrapperspb.BoolValue {
	if x != nil {
		return x.UseAvroLogicalTypes
	}
	return nil
}

// Parquet Options for load and make external tables.
type ParquetOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Indicates whether to infer Parquet ENUM logical type as STRING
	// instead of BYTES by default.
	EnumAsString *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=enum_as_string,json=enumAsString,proto3" json:"enum_as_string,omitempty"`
	// Optional. Indicates whether to use schema inference specifically for
	// Parquet LIST logical type.
	EnableListInference *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=enable_list_inference,json=enableListInference,proto3" json:"enable_list_inference,omitempty"`
	// Optional. Indicates how to represent a Parquet map if present.
	MapTargetType MapTargetType `protobuf:"varint,3,opt,name=map_target_type,json=mapTargetType,proto3,enum=google.cloud.bigquery.v2.MapTargetType" json:"map_target_type,omitempty"`
}

func (x *ParquetOptions) Reset() {
	*x = ParquetOptions{}
	mi := &file_google_cloud_bigquery_v2_external_data_config_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParquetOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParquetOptions) ProtoMessage() {}

func (x *ParquetOptions) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_external_data_config_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParquetOptions.ProtoReflect.Descriptor instead.
func (*ParquetOptions) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_external_data_config_proto_rawDescGZIP(), []int{1}
}

func (x *ParquetOptions) GetEnumAsString() *wrapperspb.BoolValue {
	if x != nil {
		return x.EnumAsString
	}
	return nil
}

func (x *ParquetOptions) GetEnableListInference() *wrapperspb.BoolValue {
	if x != nil {
		return x.EnableListInference
	}
	return nil
}

func (x *ParquetOptions) GetMapTargetType() MapTargetType {
	if x != nil {
		return x.MapTargetType
	}
	return MapTargetType_MAP_TARGET_TYPE_UNSPECIFIED
}

// Information related to a CSV data source.
type CsvOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The separator character for fields in a CSV file. The separator
	// is interpreted as a single byte. For files encoded in ISO-8859-1, any
	// single character can be used as a separator. For files encoded in UTF-8,
	// characters represented in decimal range 1-127 (U+0001-U+007F) can be used
	// without any modification. UTF-8 characters encoded with multiple bytes
	// (i.e. U+0080 and above) will have only the first byte used for separating
	// fields. The remaining bytes will be treated as a part of the field.
	// BigQuery also supports the escape sequence "\t" (U+0009) to specify a tab
	// separator. The default value is comma (",", U+002C).
	FieldDelimiter string `protobuf:"bytes,1,opt,name=field_delimiter,json=fieldDelimiter,proto3" json:"field_delimiter,omitempty"`
	// Optional. The number of rows at the top of a CSV file that BigQuery will
	// skip when reading the data. The default value is 0. This property is
	// useful if you have header rows in the file that should be skipped.
	// When autodetect is on, the behavior is the following:
	//
	//   - skipLeadingRows unspecified - Autodetect tries to detect headers in the
	//     first row. If they are not detected, the row is read as data. Otherwise
	//     data is read starting from the second row.
	//   - skipLeadingRows is 0 - Instructs autodetect that there are no headers and
	//     data should be read starting from the first row.
	//   - skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect
	//     headers in row N. If headers are not detected, row N is just skipped.
	//     Otherwise row N is used to extract column names for the detected schema.
	SkipLeadingRows *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=skip_leading_rows,json=skipLeadingRows,proto3" json:"skip_leading_rows,omitempty"`
	// Optional. The value that is used to quote data sections in a CSV file.
	// BigQuery converts the string to ISO-8859-1 encoding, and then uses the
	// first byte of the encoded string to split the data in its raw, binary
	// state.
	// The default value is a double-quote (").
	// If your data does not contain quoted sections,
	// set the property value to an empty string.
	// If your data contains quoted newline characters, you must also set the
	// allowQuotedNewlines property to true.
	// To include the specific quote character within a quoted value, precede it
	// with an additional matching quote character. For example, if you want to
	// escape the default character  ' " ', use ' "" '.
	Quote *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=quote,proto3" json:"quote,omitempty"`
	// Optional. Indicates if BigQuery should allow quoted data sections that
	// contain newline characters in a CSV file. The default value is false.
	AllowQuotedNewlines *wrapperspb.BoolValue `protobuf:"bytes,4,opt,name=allow_quoted_newlines,json=allowQuotedNewlines,proto3" json:"allow_quoted_newlines,omitempty"`
	// Optional. Indicates if BigQuery should accept rows that are missing
	// trailing optional columns. If true, BigQuery treats missing trailing
	// columns as null values.
	// If false, records with missing trailing columns are treated as bad records,
	// and if there are too many bad records, an invalid error is returned in the
	// job result. The default value is false.
	AllowJaggedRows *wrapperspb.BoolValue `protobuf:"bytes,5,opt,name=allow_jagged_rows,json=allowJaggedRows,proto3" json:"allow_jagged_rows,omitempty"`
	// Optional. The character encoding of the data.
	// The supported values are UTF-8, ISO-8859-1, UTF-16BE, UTF-16LE, UTF-32BE,
	// and UTF-32LE.  The default value is UTF-8.
	// BigQuery decodes the data after the raw, binary data has been split using
	// the values of the quote and fieldDelimiter properties.
	Encoding string `protobuf:"bytes,6,opt,name=encoding,proto3" json:"encoding,omitempty"`
	// Optional. Indicates if the embedded ASCII control characters (the first 32
	// characters in the ASCII-table, from '\x00' to '\x1F') are preserved.
	PreserveAsciiControlCharacters *wrapperspb.BoolValue `protobuf:"bytes,7,opt,name=preserve_ascii_control_characters,json=preserveAsciiControlCharacters,proto3" json:"preserve_ascii_control_characters,omitempty"`
	// Optional. Specifies a string that represents a null value in a CSV file.
	// For example, if you specify "\N", BigQuery interprets "\N" as a null value
	// when querying a CSV file.
	// The default value is the empty string. If you set this property to a custom
	// value, BigQuery throws an error if an empty string is present for all data
	// types except for STRING and BYTE. For STRING and BYTE columns, BigQuery
	// interprets the empty string as an empty value.
	NullMarker *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=null_marker,json=nullMarker,proto3" json:"null_marker,omitempty"`
	// Optional. A list of strings represented as SQL NULL value in a CSV file.
	//
	// null_marker and null_markers can't be set at the same time.
	// If null_marker is set, null_markers has to be not set.
	// If null_markers is set, null_marker has to be not set.
	// If both null_marker and null_markers are set at the same time, a user
	// error would be thrown.
	// Any strings listed in null_markers, including
	// empty string would be interpreted as SQL NULL. This applies to all column
	// types.
	NullMarkers []string `protobuf:"bytes,9,rep,name=null_markers,json=nullMarkers,proto3" json:"null_markers,omitempty"`
	// Optional. Controls the strategy used to match loaded columns to the schema.
	// If not set, a sensible default is chosen based on how the schema is
	// provided. If autodetect is used, then columns are matched by name.
	// Otherwise, columns are matched by position. This is done to keep the
	// behavior backward-compatible. Acceptable values are:
	//
	//	POSITION - matches by position. This assumes that the columns are ordered
	//	           the same way as the schema.
	//	NAME - matches by name. This reads the header row as column names and
	//	       reorders columns to match the field names in the schema.
	SourceColumnMatch string `protobuf:"bytes,10,opt,name=source_column_match,json=sourceColumnMatch,proto3" json:"source_column_match,omitempty"`
}

func (x *CsvOptions) Reset() {
	*x = CsvOptions{}
	mi := &file_google_cloud_bigquery_v2_external_data_config_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CsvOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsvOptions) ProtoMessage() {}

func (x *CsvOptions) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_external_data_config_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsvOptions.ProtoReflect.Descriptor instead.
func (*CsvOptions) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_external_data_config_proto_rawDescGZIP(), []int{2}
}

func (x *CsvOptions) GetFieldDelimiter() string {
	if x != nil {
		return x.FieldDelimiter
	}
	return ""
}

func (x *CsvOptions) GetSkipLeadingRows() *wrapperspb.Int64Value {
	if x != nil {
		return x.SkipLeadingRows
	}
	return nil
}

func (x *CsvOptions) GetQuote() *wrapperspb.StringValue {
	if x != nil {
		return x.Quote
	}
	return nil
}

func (x *CsvOptions) GetAllowQuotedNewlines() *wrapperspb.BoolValue {
	if x != nil {
		return x.AllowQuotedNewlines
	}
	return nil
}

func (x *CsvOptions) GetAllowJaggedRows() *wrapperspb.BoolValue {
	if x != nil {
		return x.AllowJaggedRows
	}
	return nil
}

func (x *CsvOptions) GetEncoding() string {
	if x != nil {
		return x.Encoding
	}
	return ""
}

func (x *CsvOptions) GetPreserveAsciiControlCharacters() *wrapperspb.BoolValue {
	if x != nil {
		return x.PreserveAsciiControlCharacters
	}
	return nil
}

func (x *CsvOptions) GetNullMarker() *wrapperspb.StringValue {
	if x != nil {
		return x.NullMarker
	}
	return nil
}

func (x *CsvOptions) GetNullMarkers() []string {
	if x != nil {
		return x.NullMarkers
	}
	return nil
}

func (x *CsvOptions) GetSourceColumnMatch() string {
	if x != nil {
		return x.SourceColumnMatch
	}
	return ""
}

// Json Options for load and make external tables.
type JsonOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The character encoding of the data.
	// The supported values are UTF-8, UTF-16BE, UTF-16LE, UTF-32BE,
	// and UTF-32LE.  The default value is UTF-8.
	Encoding string `protobuf:"bytes,1,opt,name=encoding,proto3" json:"encoding,omitempty"`
}

func (x *JsonOptions) Reset() {
	*x = JsonOptions{}
	mi := &file_google_cloud_bigquery_v2_external_data_config_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JsonOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JsonOptions) ProtoMessage() {}

func (x *JsonOptions) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_external_data_config_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JsonOptions.ProtoReflect.Descriptor instead.
func (*JsonOptions) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_external_data_config_proto_rawDescGZIP(), []int{3}
}

func (x *JsonOptions) GetEncoding() string {
	if x != nil {
		return x.Encoding
	}
	return ""
}

// Information related to a Bigtable column.
type BigtableColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [Required] Qualifier of the column.
	// Columns in the parent column family that has this exact qualifier are
	// exposed as `<family field name>.<column field name>` field.
	// If the qualifier is valid UTF-8 string, it can be specified in the
	// qualifier_string field.  Otherwise, a base-64 encoded value must be set to
	// qualifier_encoded.
	// The column field name is the same as the column qualifier. However, if the
	// qualifier is not a valid BigQuery field identifier i.e. does not match
	// [a-zA-Z][a-zA-Z0-9_]*, a valid identifier must be provided as field_name.
	QualifierEncoded *wrapperspb.BytesValue `protobuf:"bytes,1,opt,name=qualifier_encoded,json=qualifierEncoded,proto3" json:"qualifier_encoded,omitempty"`
	// Qualifier string.
	QualifierString *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=qualifier_string,json=qualifierString,proto3" json:"qualifier_string,omitempty"`
	// Optional. If the qualifier is not a valid BigQuery field identifier i.e.
	// does not match [a-zA-Z][a-zA-Z0-9_]*,  a valid identifier must be provided
	// as the column field name and is used as field name in queries.
	FieldName string `protobuf:"bytes,3,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	// Optional. The type to convert the value in cells of this column.
	// The values are expected to be encoded using HBase Bytes.toBytes function
	// when using the BINARY encoding value.
	// Following BigQuery types are allowed (case-sensitive):
	//
	// * BYTES
	// * STRING
	// * INTEGER
	// * FLOAT
	// * BOOLEAN
	// * JSON
	//
	// Default type is BYTES.
	// 'type' can also be set at the column family level. However, the setting at
	// this level takes precedence if 'type' is set at both levels.
	Type string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Optional. The encoding of the values when the type is not STRING.
	// Acceptable encoding values are:
	//
	//	TEXT - indicates values are alphanumeric text strings.
	//	BINARY - indicates values are encoded using HBase Bytes.toBytes family of
	//	         functions.
	//
	// 'encoding' can also be set at the column family level. However, the setting
	// at this level takes precedence if 'encoding' is set at both levels.
	Encoding string `protobuf:"bytes,5,opt,name=encoding,proto3" json:"encoding,omitempty"`
	// Optional. If this is set, only the latest version of value in this column
	//
	//	are exposed.
	//
	// 'onlyReadLatest' can also be set at the column family level. However, the
	// setting at this level takes precedence if 'onlyReadLatest' is set at both
	// levels.
	OnlyReadLatest *wrapperspb.BoolValue `protobuf:"bytes,6,opt,name=only_read_latest,json=onlyReadLatest,proto3" json:"only_read_latest,omitempty"`
}

func (x *BigtableColumn) Reset() {
	*x = BigtableColumn{}
	mi := &file_google_cloud_bigquery_v2_external_data_config_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BigtableColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BigtableColumn) ProtoMessage() {}

func (x *BigtableColumn) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_external_data_config_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BigtableColumn.ProtoReflect.Descriptor instead.
func (*BigtableColumn) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_external_data_config_proto_rawDescGZIP(), []int{4}
}

func (x *BigtableColumn) GetQualifierEncoded() *wrapperspb.BytesValue {
	if x != nil {
		return x.QualifierEncoded
	}
	return nil
}

func (x *BigtableColumn) GetQualifierString() *wrapperspb.StringValue {
	if x != nil {
		return x.QualifierString
	}
	return nil
}

func (x *BigtableColumn) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *BigtableColumn) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *BigtableColumn) GetEncoding() string {
	if x != nil {
		return x.Encoding
	}
	return ""
}

func (x *BigtableColumn) GetOnlyReadLatest() *wrapperspb.BoolValue {
	if x != nil {
		return x.OnlyReadLatest
	}
	return nil
}

// Information related to a Bigtable column family.
type BigtableColumnFamily struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the column family.
	FamilyId string `protobuf:"bytes,1,opt,name=family_id,json=familyId,proto3" json:"family_id,omitempty"`
	// Optional. The type to convert the value in cells of this column family.
	// The values are expected to be encoded using HBase Bytes.toBytes function
	// when using the BINARY encoding value.
	// Following BigQuery types are allowed (case-sensitive):
	//
	// * BYTES
	// * STRING
	// * INTEGER
	// * FLOAT
	// * BOOLEAN
	// * JSON
	//
	// Default type is BYTES.
	// This can be overridden for a specific column by listing that column in
	// 'columns' and specifying a type for it.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Optional. The encoding of the values when the type is not STRING.
	// Acceptable encoding values are:
	//
	//	TEXT - indicates values are alphanumeric text strings.
	//	BINARY - indicates values are encoded using HBase Bytes.toBytes family of
	//	         functions.
	//
	// This can be overridden for a specific column by listing that column in
	// 'columns' and specifying an encoding for it.
	Encoding string `protobuf:"bytes,3,opt,name=encoding,proto3" json:"encoding,omitempty"`
	// Optional. Lists of columns that should be exposed as individual fields as
	// opposed to a list of (column name, value) pairs.
	// All columns whose qualifier matches a qualifier in this list can be
	// accessed as `<family field name>.<column field name>`.
	// Other columns can be accessed as a list through
	// the `<family field name>.Column` field.
	Columns []*BigtableColumn `protobuf:"bytes,4,rep,name=columns,proto3" json:"columns,omitempty"`
	// Optional. If this is set only the latest version of value are exposed for
	// all columns in this column family.
	// This can be overridden for a specific column by listing that column in
	// 'columns' and specifying a different setting
	// for that column.
	OnlyReadLatest *wrapperspb.BoolValue `protobuf:"bytes,5,opt,name=only_read_latest,json=onlyReadLatest,proto3" json:"only_read_latest,omitempty"`
}

func (x *BigtableColumnFamily) Reset() {
	*x = BigtableColumnFamily{}
	mi := &file_google_cloud_bigquery_v2_external_data_config_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BigtableColumnFamily) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BigtableColumnFamily) ProtoMessage() {}

func (x *BigtableColumnFamily) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_external_data_config_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BigtableColumnFamily.ProtoReflect.Descriptor instead.
func (*BigtableColumnFamily) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_external_data_config_proto_rawDescGZIP(), []int{5}
}

func (x *BigtableColumnFamily) GetFamilyId() string {
	if x != nil {
		return x.FamilyId
	}
	return ""
}

func (x *BigtableColumnFamily) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *BigtableColumnFamily) GetEncoding() string {
	if x != nil {
		return x.Encoding
	}
	return ""
}

func (x *BigtableColumnFamily) GetColumns() []*BigtableColumn {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *BigtableColumnFamily) GetOnlyReadLatest() *wrapperspb.BoolValue {
	if x != nil {
		return x.OnlyReadLatest
	}
	return nil
}

// Options specific to Google Cloud Bigtable data sources.
type BigtableOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. List of column families to expose in the table schema along with
	// their types.
	// This list restricts the column families that can be referenced in queries
	// and specifies their value types.
	// You can use this list to do type conversions - see the 'type' field for
	// more details.
	// If you leave this list empty, all column families are present in the table
	// schema and their values are read as BYTES.
	// During a query only the column families referenced in that query are read
	// from Bigtable.
	ColumnFamilies []*BigtableColumnFamily `protobuf:"bytes,1,rep,name=column_families,json=columnFamilies,proto3" json:"column_families,omitempty"`
	// Optional. If field is true, then the column families that are not
	// specified in columnFamilies list are not exposed in the table schema.
	// Otherwise, they are read with BYTES type values.
	// The default value is false.
	IgnoreUnspecifiedColumnFamilies *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=ignore_unspecified_column_families,json=ignoreUnspecifiedColumnFamilies,proto3" json:"ignore_unspecified_column_families,omitempty"`
	// Optional. If field is true, then the rowkey column families will be read
	// and converted to string. Otherwise they are read with BYTES type values and
	// users need to manually cast them with CAST if necessary.
	// The default value is false.
	ReadRowkeyAsString *wrapperspb.BoolValue `protobuf:"bytes,3,opt,name=read_rowkey_as_string,json=readRowkeyAsString,proto3" json:"read_rowkey_as_string,omitempty"`
	// Optional. If field is true, then each column family will be read as a
	// single JSON column. Otherwise they are read as a repeated cell structure
	// containing timestamp/value tuples. The default value is false.
	OutputColumnFamiliesAsJson *wrapperspb.BoolValue `protobuf:"bytes,4,opt,name=output_column_families_as_json,json=outputColumnFamiliesAsJson,proto3" json:"output_column_families_as_json,omitempty"`
}

func (x *BigtableOptions) Reset() {
	*x = BigtableOptions{}
	mi := &file_google_cloud_bigquery_v2_external_data_config_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BigtableOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BigtableOptions) ProtoMessage() {}

func (x *BigtableOptions) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_external_data_config_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BigtableOptions.ProtoReflect.Descriptor instead.
func (*BigtableOptions) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_external_data_config_proto_rawDescGZIP(), []int{6}
}

func (x *BigtableOptions) GetColumnFamilies() []*BigtableColumnFamily {
	if x != nil {
		return x.ColumnFamilies
	}
	return nil
}

func (x *BigtableOptions) GetIgnoreUnspecifiedColumnFamilies() *wrapperspb.BoolValue {
	if x != nil {
		return x.IgnoreUnspecifiedColumnFamilies
	}
	return nil
}

func (x *BigtableOptions) GetReadRowkeyAsString() *wrapperspb.BoolValue {
	if x != nil {
		return x.ReadRowkeyAsString
	}
	return nil
}

func (x *BigtableOptions) GetOutputColumnFamiliesAsJson() *wrapperspb.BoolValue {
	if x != nil {
		return x.OutputColumnFamiliesAsJson
	}
	return nil
}

// Options specific to Google Sheets data sources.
type GoogleSheetsOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The number of rows at the top of a sheet that BigQuery will skip
	// when reading the data. The default value is 0. This property is useful if
	// you have header rows that should be skipped. When autodetect is on,
	// the behavior is the following:
	//   - skipLeadingRows unspecified - Autodetect tries to detect headers in the
	//     first row. If they are not detected, the row is read as data. Otherwise
	//     data is read starting from the second row.
	//   - skipLeadingRows is 0 - Instructs autodetect that there are no headers and
	//     data should be read starting from the first row.
	//   - skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect
	//     headers in row N. If headers are not detected, row N is just skipped.
	//     Otherwise row N is used to extract column names for the detected schema.
	SkipLeadingRows *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=skip_leading_rows,json=skipLeadingRows,proto3" json:"skip_leading_rows,omitempty"`
	// Optional. Range of a sheet to query from. Only used when non-empty.
	// Typical format: sheet_name!top_left_cell_id:bottom_right_cell_id
	// For example: sheet1!A1:B20
	Range string `protobuf:"bytes,2,opt,name=range,proto3" json:"range,omitempty"`
}

func (x *GoogleSheetsOptions) Reset() {
	*x = GoogleSheetsOptions{}
	mi := &file_google_cloud_bigquery_v2_external_data_config_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GoogleSheetsOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleSheetsOptions) ProtoMessage() {}

func (x *GoogleSheetsOptions) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_external_data_config_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleSheetsOptions.ProtoReflect.Descriptor instead.
func (*GoogleSheetsOptions) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_external_data_config_proto_rawDescGZIP(), []int{7}
}

func (x *GoogleSheetsOptions) GetSkipLeadingRows() *wrapperspb.Int64Value {
	if x != nil {
		return x.SkipLeadingRows
	}
	return nil
}

func (x *GoogleSheetsOptions) GetRange() string {
	if x != nil {
		return x.Range
	}
	return ""
}

type ExternalDataConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [Required] The fully-qualified URIs that point to your data in Google
	// Cloud. For Google Cloud Storage URIs:
	//
	//	Each URI can contain one '*' wildcard character and it must come after
	//	the 'bucket' name.
	//	Size limits related to load jobs apply to external data sources.
	//
	// For Google Cloud Bigtable URIs:
	//
	//	Exactly one URI can be specified and it has be a fully specified and
	//	valid HTTPS URL for a Google Cloud Bigtable table.
	//
	// For Google Cloud Datastore backups, exactly one URI can be specified. Also,
	// the '*' wildcard character is not allowed.
	SourceUris []string `protobuf:"bytes,1,rep,name=source_uris,json=sourceUris,proto3" json:"source_uris,omitempty"`
	// Optional. Specifies how source URIs are interpreted for constructing the
	// file set to load.  By default source URIs are expanded against the
	// underlying storage.  Other options include specifying manifest files. Only
	// applicable to object storage systems.
	FileSetSpecType FileSetSpecType `protobuf:"varint,25,opt,name=file_set_spec_type,json=fileSetSpecType,proto3,enum=google.cloud.bigquery.v2.FileSetSpecType" json:"file_set_spec_type,omitempty"`
	// Optional. The schema for the data.
	// Schema is required for CSV and JSON formats if autodetect is not on.
	// Schema is disallowed for Google Cloud Bigtable, Cloud Datastore backups,
	// Avro, ORC and Parquet formats.
	Schema *TableSchema `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	// [Required] The data format.
	// For CSV files, specify "CSV".
	// For Google sheets, specify "GOOGLE_SHEETS".
	// For newline-delimited JSON, specify "NEWLINE_DELIMITED_JSON".
	// For Avro files, specify "AVRO".
	// For Google Cloud Datastore backups, specify "DATASTORE_BACKUP".
	// For Apache Iceberg tables, specify "ICEBERG".
	// For ORC files, specify "ORC".
	// For Parquet files, specify "PARQUET".
	// [Beta] For Google Cloud Bigtable, specify "BIGTABLE".
	SourceFormat string `protobuf:"bytes,3,opt,name=source_format,json=sourceFormat,proto3" json:"source_format,omitempty"`
	// Optional. The maximum number of bad records that BigQuery can ignore when
	// reading data. If the number of bad records exceeds this value, an invalid
	// error is returned in the job result. The default value is 0, which requires
	// that all records are valid. This setting is ignored for Google Cloud
	// Bigtable, Google Cloud Datastore backups, Avro, ORC and Parquet formats.
	MaxBadRecords *wrapperspb.Int32Value `protobuf:"bytes,4,opt,name=max_bad_records,json=maxBadRecords,proto3" json:"max_bad_records,omitempty"`
	// Try to detect schema and format options automatically.
	// Any option specified explicitly will be honored.
	Autodetect *wrapperspb.BoolValue `protobuf:"bytes,5,opt,name=autodetect,proto3" json:"autodetect,omitempty"`
	// Optional. Indicates if BigQuery should allow extra values that are not
	// represented in the table schema.
	// If true, the extra values are ignored.
	// If false, records with extra columns are treated as bad records, and if
	// there are too many bad records, an invalid error is returned in the job
	// result.
	// The default value is false.
	// The sourceFormat property determines what BigQuery treats as an extra
	// value:
	//
	//	CSV: Trailing columns
	//	JSON: Named values that don't match any column names
	//	Google Cloud Bigtable: This setting is ignored.
	//	Google Cloud Datastore backups: This setting is ignored.
	//	Avro: This setting is ignored.
	//	ORC: This setting is ignored.
	//	Parquet: This setting is ignored.
	IgnoreUnknownValues *wrapperspb.BoolValue `protobuf:"bytes,6,opt,name=ignore_unknown_values,json=ignoreUnknownValues,proto3" json:"ignore_unknown_values,omitempty"`
	// Optional. The compression type of the data source.
	// Possible values include GZIP and NONE. The default value is NONE.
	// This setting is ignored for Google Cloud Bigtable, Google Cloud Datastore
	// backups, Avro, ORC and Parquet
	// formats. An empty string is an invalid value.
	Compression string `protobuf:"bytes,7,opt,name=compression,proto3" json:"compression,omitempty"`
	// Optional. Additional properties to set if sourceFormat is set to CSV.
	CsvOptions *CsvOptions `protobuf:"bytes,8,opt,name=csv_options,json=csvOptions,proto3" json:"csv_options,omitempty"`
	// Optional. Additional properties to set if sourceFormat is set to JSON.
	JsonOptions *JsonOptions `protobuf:"bytes,26,opt,name=json_options,json=jsonOptions,proto3" json:"json_options,omitempty"`
	// Optional. Additional options if sourceFormat is set to BIGTABLE.
	BigtableOptions *BigtableOptions `protobuf:"bytes,9,opt,name=bigtable_options,json=bigtableOptions,proto3" json:"bigtable_options,omitempty"`
	// Optional. Additional options if sourceFormat is set to GOOGLE_SHEETS.
	GoogleSheetsOptions *GoogleSheetsOptions `protobuf:"bytes,10,opt,name=google_sheets_options,json=googleSheetsOptions,proto3" json:"google_sheets_options,omitempty"`
	// Optional. When set, configures hive partitioning support. Not all storage
	// formats support hive partitioning -- requesting hive partitioning on an
	// unsupported format will lead to an error, as will providing an invalid
	// specification.
	HivePartitioningOptions *HivePartitioningOptions `protobuf:"bytes,13,opt,name=hive_partitioning_options,json=hivePartitioningOptions,proto3" json:"hive_partitioning_options,omitempty"`
	// Optional. The connection specifying the credentials to be used to read
	// external storage, such as Azure Blob, Cloud Storage, or S3. The
	// connection_id can have the form
	// `{project_id}.{location_id};{connection_id}` or
	// `projects/{project_id}/locations/{location_id}/connections/{connection_id}`.
	ConnectionId string `protobuf:"bytes,14,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	// Defines the list of possible SQL data types to which the source decimal
	// values are converted. This list and the precision and the scale parameters
	// of the decimal field determine the target type. In the order of NUMERIC,
	// BIGNUMERIC, and STRING, a
	// type is picked if it is in the specified list and if it supports the
	// precision and the scale. STRING supports all precision and scale values.
	// If none of the listed types supports the precision and the scale, the type
	// supporting the widest range in the specified list is picked, and if a value
	// exceeds the supported range when reading the data, an error will be thrown.
	//
	// Example: Suppose the value of this field is ["NUMERIC", "BIGNUMERIC"].
	// If (precision,scale) is:
	//
	// * (38,9) -> NUMERIC;
	// * (39,9) -> BIGNUMERIC (NUMERIC cannot hold 30 integer digits);
	// * (38,10) -> BIGNUMERIC (NUMERIC cannot hold 10 fractional digits);
	// * (76,38) -> BIGNUMERIC;
	// * (77,38) -> BIGNUMERIC (error if value exceeds supported range).
	//
	// This field cannot contain duplicate types. The order of the types in this
	// field is ignored. For example, ["BIGNUMERIC", "NUMERIC"] is the same as
	// ["NUMERIC", "BIGNUMERIC"] and NUMERIC always takes precedence over
	// BIGNUMERIC.
	//
	// Defaults to ["NUMERIC", "STRING"] for ORC and ["NUMERIC"] for the other
	// file formats.
	DecimalTargetTypes []DecimalTargetType `protobuf:"varint,16,rep,packed,name=decimal_target_types,json=decimalTargetTypes,proto3,enum=google.cloud.bigquery.v2.DecimalTargetType" json:"decimal_target_types,omitempty"`
	// Optional. Additional properties to set if sourceFormat is set to AVRO.
	AvroOptions *AvroOptions `protobuf:"bytes,17,opt,name=avro_options,json=avroOptions,proto3" json:"avro_options,omitempty"`
	// Optional. Load option to be used together with source_format
	// newline-delimited JSON to indicate that a variant of JSON is being loaded.
	// To load newline-delimited GeoJSON, specify GEOJSON (and source_format must
	// be set to NEWLINE_DELIMITED_JSON).
	JsonExtension JsonExtension `protobuf:"varint,18,opt,name=json_extension,json=jsonExtension,proto3,enum=google.cloud.bigquery.v2.JsonExtension" json:"json_extension,omitempty"`
	// Optional. Additional properties to set if sourceFormat is set to PARQUET.
	ParquetOptions *ParquetOptions `protobuf:"bytes,19,opt,name=parquet_options,json=parquetOptions,proto3" json:"parquet_options,omitempty"`
	// Optional. ObjectMetadata is used to create Object Tables. Object Tables
	// contain a listing of objects (with their metadata) found at the
	// source_uris. If ObjectMetadata is set, source_format should be omitted.
	//
	// Currently SIMPLE is the only supported Object Metadata type.
	ObjectMetadata *ExternalDataConfiguration_ObjectMetadata `protobuf:"varint,22,opt,name=object_metadata,json=objectMetadata,proto3,enum=google.cloud.bigquery.v2.ExternalDataConfiguration_ObjectMetadata,oneof" json:"object_metadata,omitempty"`
	// Optional. When creating an external table, the user can provide a reference
	// file with the table schema. This is enabled for the following formats:
	// AVRO, PARQUET, ORC.
	ReferenceFileSchemaUri *wrapperspb.StringValue `protobuf:"bytes,23,opt,name=reference_file_schema_uri,json=referenceFileSchemaUri,proto3" json:"reference_file_schema_uri,omitempty"`
	// Optional. Metadata Cache Mode for the table. Set this to enable caching of
	// metadata from external data source.
	MetadataCacheMode ExternalDataConfiguration_MetadataCacheMode `protobuf:"varint,24,opt,name=metadata_cache_mode,json=metadataCacheMode,proto3,enum=google.cloud.bigquery.v2.ExternalDataConfiguration_MetadataCacheMode" json:"metadata_cache_mode,omitempty"`
	// Optional. Time zone used when parsing timestamp values that do not have
	// specific time zone information (e.g. 2024-04-20 12:34:56). The expected
	// format is a IANA timezone string (e.g. America/Los_Angeles).
	TimeZone *string `protobuf:"bytes,27,opt,name=time_zone,json=timeZone,proto3,oneof" json:"time_zone,omitempty"`
	// Optional. Format used to parse DATE values. Supports C-style and SQL-style
	// values.
	DateFormat *string `protobuf:"bytes,28,opt,name=date_format,json=dateFormat,proto3,oneof" json:"date_format,omitempty"`
	// Optional. Format used to parse DATETIME values. Supports C-style and
	// SQL-style values.
	DatetimeFormat *string `protobuf:"bytes,29,opt,name=datetime_format,json=datetimeFormat,proto3,oneof" json:"datetime_format,omitempty"`
	// Optional. Format used to parse TIME values. Supports C-style and SQL-style
	// values.
	TimeFormat *string `protobuf:"bytes,30,opt,name=time_format,json=timeFormat,proto3,oneof" json:"time_format,omitempty"`
	// Optional. Format used to parse TIMESTAMP values. Supports C-style and
	// SQL-style values.
	TimestampFormat *string `protobuf:"bytes,31,opt,name=timestamp_format,json=timestampFormat,proto3,oneof" json:"timestamp_format,omitempty"`
}

func (x *ExternalDataConfiguration) Reset() {
	*x = ExternalDataConfiguration{}
	mi := &file_google_cloud_bigquery_v2_external_data_config_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExternalDataConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalDataConfiguration) ProtoMessage() {}

func (x *ExternalDataConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_external_data_config_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalDataConfiguration.ProtoReflect.Descriptor instead.
func (*ExternalDataConfiguration) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_external_data_config_proto_rawDescGZIP(), []int{8}
}

func (x *ExternalDataConfiguration) GetSourceUris() []string {
	if x != nil {
		return x.SourceUris
	}
	return nil
}

func (x *ExternalDataConfiguration) GetFileSetSpecType() FileSetSpecType {
	if x != nil {
		return x.FileSetSpecType
	}
	return FileSetSpecType_FILE_SET_SPEC_TYPE_FILE_SYSTEM_MATCH
}

func (x *ExternalDataConfiguration) GetSchema() *TableSchema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *ExternalDataConfiguration) GetSourceFormat() string {
	if x != nil {
		return x.SourceFormat
	}
	return ""
}

func (x *ExternalDataConfiguration) GetMaxBadRecords() *wrapperspb.Int32Value {
	if x != nil {
		return x.MaxBadRecords
	}
	return nil
}

func (x *ExternalDataConfiguration) GetAutodetect() *wrapperspb.BoolValue {
	if x != nil {
		return x.Autodetect
	}
	return nil
}

func (x *ExternalDataConfiguration) GetIgnoreUnknownValues() *wrapperspb.BoolValue {
	if x != nil {
		return x.IgnoreUnknownValues
	}
	return nil
}

func (x *ExternalDataConfiguration) GetCompression() string {
	if x != nil {
		return x.Compression
	}
	return ""
}

func (x *ExternalDataConfiguration) GetCsvOptions() *CsvOptions {
	if x != nil {
		return x.CsvOptions
	}
	return nil
}

func (x *ExternalDataConfiguration) GetJsonOptions() *JsonOptions {
	if x != nil {
		return x.JsonOptions
	}
	return nil
}

func (x *ExternalDataConfiguration) GetBigtableOptions() *BigtableOptions {
	if x != nil {
		return x.BigtableOptions
	}
	return nil
}

func (x *ExternalDataConfiguration) GetGoogleSheetsOptions() *GoogleSheetsOptions {
	if x != nil {
		return x.GoogleSheetsOptions
	}
	return nil
}

func (x *ExternalDataConfiguration) GetHivePartitioningOptions() *HivePartitioningOptions {
	if x != nil {
		return x.HivePartitioningOptions
	}
	return nil
}

func (x *ExternalDataConfiguration) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *ExternalDataConfiguration) GetDecimalTargetTypes() []DecimalTargetType {
	if x != nil {
		return x.DecimalTargetTypes
	}
	return nil
}

func (x *ExternalDataConfiguration) GetAvroOptions() *AvroOptions {
	if x != nil {
		return x.AvroOptions
	}
	return nil
}

func (x *ExternalDataConfiguration) GetJsonExtension() JsonExtension {
	if x != nil {
		return x.JsonExtension
	}
	return JsonExtension_JSON_EXTENSION_UNSPECIFIED
}

func (x *ExternalDataConfiguration) GetParquetOptions() *ParquetOptions {
	if x != nil {
		return x.ParquetOptions
	}
	return nil
}

func (x *ExternalDataConfiguration) GetObjectMetadata() ExternalDataConfiguration_ObjectMetadata {
	if x != nil && x.ObjectMetadata != nil {
		return *x.ObjectMetadata
	}
	return ExternalDataConfiguration_OBJECT_METADATA_UNSPECIFIED
}

func (x *ExternalDataConfiguration) GetReferenceFileSchemaUri() *wrapperspb.StringValue {
	if x != nil {
		return x.ReferenceFileSchemaUri
	}
	return nil
}

func (x *ExternalDataConfiguration) GetMetadataCacheMode() ExternalDataConfiguration_MetadataCacheMode {
	if x != nil {
		return x.MetadataCacheMode
	}
	return ExternalDataConfiguration_METADATA_CACHE_MODE_UNSPECIFIED
}

func (x *ExternalDataConfiguration) GetTimeZone() string {
	if x != nil && x.TimeZone != nil {
		return *x.TimeZone
	}
	return ""
}

func (x *ExternalDataConfiguration) GetDateFormat() string {
	if x != nil && x.DateFormat != nil {
		return *x.DateFormat
	}
	return ""
}

func (x *ExternalDataConfiguration) GetDatetimeFormat() string {
	if x != nil && x.DatetimeFormat != nil {
		return *x.DatetimeFormat
	}
	return ""
}

func (x *ExternalDataConfiguration) GetTimeFormat() string {
	if x != nil && x.TimeFormat != nil {
		return *x.TimeFormat
	}
	return ""
}

func (x *ExternalDataConfiguration) GetTimestampFormat() string {
	if x != nil && x.TimestampFormat != nil {
		return *x.TimestampFormat
	}
	return ""
}

var File_google_cloud_bigquery_v2_external_data_config_proto protoreflect.FileDescriptor

var file_google_cloud_bigquery_v2_external_data_config_proto_rawDesc = []byte{
	0x0a, 0x33, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x33, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3a, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x30, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x68, 0x69, 0x76, 0x65,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x6a, 0x73,
	0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x61, 0x70,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x63, 0x0a, 0x0b, 0x41, 0x76, 0x72, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x54,
	0x0a, 0x16, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x76, 0x72, 0x6f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x13, 0x75, 0x73, 0x65, 0x41, 0x76, 0x72, 0x6f, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x22, 0x82, 0x02, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x45, 0x0a, 0x0e, 0x65, 0x6e, 0x75, 0x6d, 0x5f,
	0x61, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x0c, 0x65, 0x6e, 0x75, 0x6d, 0x41, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x53,
	0x0a, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x13,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x54, 0x0a, 0x0f, 0x6d, 0x61, 0x70, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0d, 0x6d, 0x61, 0x70, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x91, 0x05, 0x0a, 0x0a, 0x43, 0x73,
	0x76, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x0f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x11, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x6c,
	0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x0f, 0x73, 0x6b, 0x69, 0x70, 0x4c, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x6f, 0x77, 0x73, 0x12, 0x37, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x53, 0x0a,
	0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x65,
	0x77, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x13, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x64, 0x4e, 0x65, 0x77, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x12, 0x4b, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6a, 0x61, 0x67, 0x67,
	0x65, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0f,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4a, 0x61, 0x67, 0x67, 0x65, 0x64, 0x52, 0x6f, 0x77, 0x73, 0x12,
	0x1f, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x6a, 0x0a, 0x21, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x61, 0x73, 0x63,
	0x69, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x1e, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x41, 0x73, 0x63, 0x69, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x12, 0x42, 0x0a, 0x0b,
	0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x6e, 0x75, 0x6c, 0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72,
	0x12, 0x26, 0x0a, 0x0c, 0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x6e, 0x75, 0x6c,
	0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x13, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x11, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x22, 0x2e, 0x0a,
	0x0b, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x08,
	0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x22, 0xcc, 0x02,
	0x0a, 0x0e, 0x42, 0x69, 0x67, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x12, 0x48, 0x0a, 0x11, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x10, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1f, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x49, 0x0a, 0x10, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x6f, 0x6e,
	0x6c, 0x79, 0x52, 0x65, 0x61, 0x64, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x22, 0x81, 0x02, 0x0a,
	0x14, 0x42, 0x69, 0x67, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x46,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x65,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x47, 0x0a, 0x07,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x69, 0x67, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x49, 0x0a, 0x10, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x0e, 0x6f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x61, 0x64, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x22, 0x96, 0x03, 0x0a, 0x0f, 0x42, 0x69, 0x67, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5c, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x66,
	0x61, 0x6d, 0x69, 0x6c, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x69, 0x67, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x69,
	0x65, 0x73, 0x12, 0x6c, 0x0a, 0x22, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x75, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f,
	0x66, 0x61, 0x6d, 0x69, 0x6c, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x1f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x69, 0x65, 0x73,
	0x12, 0x52, 0x0a, 0x15, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x6b, 0x65, 0x79, 0x5f,
	0x61, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x12, 0x72, 0x65, 0x61, 0x64, 0x52, 0x6f, 0x77, 0x6b, 0x65, 0x79, 0x41, 0x73, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x63, 0x0a, 0x1e, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x69, 0x65, 0x73, 0x5f, 0x61,
	0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x1a, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x46, 0x61, 0x6d, 0x69, 0x6c,
	0x69, 0x65, 0x73, 0x41, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x22, 0x7e, 0x0a, 0x13, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x53, 0x68, 0x65, 0x65, 0x74, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x4c, 0x0a, 0x11, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0f, 0x73,
	0x6b, 0x69, 0x70, 0x4c, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x19,
	0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x9f, 0x11, 0x0a, 0x19, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x75, 0x72, 0x69, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x55, 0x72, 0x69, 0x73, 0x12, 0x5b, 0x0a, 0x12, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x53, 0x70, 0x65,
	0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x48,
	0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x42, 0x61,
	0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x6f,
	0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x64, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x12, 0x53, 0x0a, 0x15, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x13, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0b, 0x63, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x4a, 0x0a, 0x0b, 0x63, 0x73, 0x76, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x43, 0x73, 0x76, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x0a, 0x63, 0x73, 0x76, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4d, 0x0a, 0x0c,
	0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4a, 0x73,
	0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b,
	0x6a, 0x73, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x59, 0x0a, 0x10, 0x62,
	0x69, 0x67, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x42, 0x69, 0x67, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0f, 0x62, 0x69, 0x67, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x66, 0x0a, 0x15, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x5f, 0x73, 0x68, 0x65, 0x65, 0x74, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x53, 0x68, 0x65, 0x65, 0x74, 0x73, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x13, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x53, 0x68, 0x65, 0x65, 0x74, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x72,
	0x0a, 0x19, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x48, 0x69, 0x76,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x17, 0x68, 0x69, 0x76, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x5d, 0x0a, 0x14,
	0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0c, 0x61,
	0x76, 0x72, 0x6f, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x76, 0x72,
	0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x61,
	0x76, 0x72, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x53, 0x0a, 0x0e, 0x6a, 0x73,
	0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4a, 0x73,
	0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x0d, 0x6a, 0x73, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x56, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x32, 0x2e, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x75, 0x0a, 0x0f, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x42, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x0e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x5c,
	0x0a, 0x19, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x16, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x55, 0x72, 0x69, 0x12, 0x7a, 0x0a, 0x13,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x11, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x48, 0x01, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x29, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x02, 0x52, 0x0a, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x0f, 0x64, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x03, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a,
	0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x04, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x05, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x88, 0x01, 0x01, 0x22, 0x4c, 0x0a,
	0x0e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x1f, 0x0a, 0x1b, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x10, 0x02, 0x22, 0x53, 0x0a, 0x11, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x43, 0x41, 0x43,
	0x48, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x55, 0x54, 0x4f, 0x4d, 0x41, 0x54,
	0x49, 0x43, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x02,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f,
	0x6e, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x42, 0x74, 0x0a, 0x1c, 0x63,
	0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x42, 0x17, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x3b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x62, 0x69, 0x67, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x70, 0x62, 0x3b, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_bigquery_v2_external_data_config_proto_rawDescOnce sync.Once
	file_google_cloud_bigquery_v2_external_data_config_proto_rawDescData = file_google_cloud_bigquery_v2_external_data_config_proto_rawDesc
)

func file_google_cloud_bigquery_v2_external_data_config_proto_rawDescGZIP() []byte {
	file_google_cloud_bigquery_v2_external_data_config_proto_rawDescOnce.Do(func() {
		file_google_cloud_bigquery_v2_external_data_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_bigquery_v2_external_data_config_proto_rawDescData)
	})
	return file_google_cloud_bigquery_v2_external_data_config_proto_rawDescData
}

var file_google_cloud_bigquery_v2_external_data_config_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_google_cloud_bigquery_v2_external_data_config_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_google_cloud_bigquery_v2_external_data_config_proto_goTypes = []any{
	(ExternalDataConfiguration_ObjectMetadata)(0),    // 0: google.cloud.bigquery.v2.ExternalDataConfiguration.ObjectMetadata
	(ExternalDataConfiguration_MetadataCacheMode)(0), // 1: google.cloud.bigquery.v2.ExternalDataConfiguration.MetadataCacheMode
	(*AvroOptions)(nil),                              // 2: google.cloud.bigquery.v2.AvroOptions
	(*ParquetOptions)(nil),                           // 3: google.cloud.bigquery.v2.ParquetOptions
	(*CsvOptions)(nil),                               // 4: google.cloud.bigquery.v2.CsvOptions
	(*JsonOptions)(nil),                              // 5: google.cloud.bigquery.v2.JsonOptions
	(*BigtableColumn)(nil),                           // 6: google.cloud.bigquery.v2.BigtableColumn
	(*BigtableColumnFamily)(nil),                     // 7: google.cloud.bigquery.v2.BigtableColumnFamily
	(*BigtableOptions)(nil),                          // 8: google.cloud.bigquery.v2.BigtableOptions
	(*GoogleSheetsOptions)(nil),                      // 9: google.cloud.bigquery.v2.GoogleSheetsOptions
	(*ExternalDataConfiguration)(nil),                // 10: google.cloud.bigquery.v2.ExternalDataConfiguration
	(*wrapperspb.BoolValue)(nil),                     // 11: google.protobuf.BoolValue
	(MapTargetType)(0),                               // 12: google.cloud.bigquery.v2.MapTargetType
	(*wrapperspb.Int64Value)(nil),                    // 13: google.protobuf.Int64Value
	(*wrapperspb.StringValue)(nil),                   // 14: google.protobuf.StringValue
	(*wrapperspb.BytesValue)(nil),                    // 15: google.protobuf.BytesValue
	(FileSetSpecType)(0),                             // 16: google.cloud.bigquery.v2.FileSetSpecType
	(*TableSchema)(nil),                              // 17: google.cloud.bigquery.v2.TableSchema
	(*wrapperspb.Int32Value)(nil),                    // 18: google.protobuf.Int32Value
	(*HivePartitioningOptions)(nil),                  // 19: google.cloud.bigquery.v2.HivePartitioningOptions
	(DecimalTargetType)(0),                           // 20: google.cloud.bigquery.v2.DecimalTargetType
	(JsonExtension)(0),                               // 21: google.cloud.bigquery.v2.JsonExtension
}
var file_google_cloud_bigquery_v2_external_data_config_proto_depIdxs = []int32{
	11, // 0: google.cloud.bigquery.v2.AvroOptions.use_avro_logical_types:type_name -> google.protobuf.BoolValue
	11, // 1: google.cloud.bigquery.v2.ParquetOptions.enum_as_string:type_name -> google.protobuf.BoolValue
	11, // 2: google.cloud.bigquery.v2.ParquetOptions.enable_list_inference:type_name -> google.protobuf.BoolValue
	12, // 3: google.cloud.bigquery.v2.ParquetOptions.map_target_type:type_name -> google.cloud.bigquery.v2.MapTargetType
	13, // 4: google.cloud.bigquery.v2.CsvOptions.skip_leading_rows:type_name -> google.protobuf.Int64Value
	14, // 5: google.cloud.bigquery.v2.CsvOptions.quote:type_name -> google.protobuf.StringValue
	11, // 6: google.cloud.bigquery.v2.CsvOptions.allow_quoted_newlines:type_name -> google.protobuf.BoolValue
	11, // 7: google.cloud.bigquery.v2.CsvOptions.allow_jagged_rows:type_name -> google.protobuf.BoolValue
	11, // 8: google.cloud.bigquery.v2.CsvOptions.preserve_ascii_control_characters:type_name -> google.protobuf.BoolValue
	14, // 9: google.cloud.bigquery.v2.CsvOptions.null_marker:type_name -> google.protobuf.StringValue
	15, // 10: google.cloud.bigquery.v2.BigtableColumn.qualifier_encoded:type_name -> google.protobuf.BytesValue
	14, // 11: google.cloud.bigquery.v2.BigtableColumn.qualifier_string:type_name -> google.protobuf.StringValue
	11, // 12: google.cloud.bigquery.v2.BigtableColumn.only_read_latest:type_name -> google.protobuf.BoolValue
	6,  // 13: google.cloud.bigquery.v2.BigtableColumnFamily.columns:type_name -> google.cloud.bigquery.v2.BigtableColumn
	11, // 14: google.cloud.bigquery.v2.BigtableColumnFamily.only_read_latest:type_name -> google.protobuf.BoolValue
	7,  // 15: google.cloud.bigquery.v2.BigtableOptions.column_families:type_name -> google.cloud.bigquery.v2.BigtableColumnFamily
	11, // 16: google.cloud.bigquery.v2.BigtableOptions.ignore_unspecified_column_families:type_name -> google.protobuf.BoolValue
	11, // 17: google.cloud.bigquery.v2.BigtableOptions.read_rowkey_as_string:type_name -> google.protobuf.BoolValue
	11, // 18: google.cloud.bigquery.v2.BigtableOptions.output_column_families_as_json:type_name -> google.protobuf.BoolValue
	13, // 19: google.cloud.bigquery.v2.GoogleSheetsOptions.skip_leading_rows:type_name -> google.protobuf.Int64Value
	16, // 20: google.cloud.bigquery.v2.ExternalDataConfiguration.file_set_spec_type:type_name -> google.cloud.bigquery.v2.FileSetSpecType
	17, // 21: google.cloud.bigquery.v2.ExternalDataConfiguration.schema:type_name -> google.cloud.bigquery.v2.TableSchema
	18, // 22: google.cloud.bigquery.v2.ExternalDataConfiguration.max_bad_records:type_name -> google.protobuf.Int32Value
	11, // 23: google.cloud.bigquery.v2.ExternalDataConfiguration.autodetect:type_name -> google.protobuf.BoolValue
	11, // 24: google.cloud.bigquery.v2.ExternalDataConfiguration.ignore_unknown_values:type_name -> google.protobuf.BoolValue
	4,  // 25: google.cloud.bigquery.v2.ExternalDataConfiguration.csv_options:type_name -> google.cloud.bigquery.v2.CsvOptions
	5,  // 26: google.cloud.bigquery.v2.ExternalDataConfiguration.json_options:type_name -> google.cloud.bigquery.v2.JsonOptions
	8,  // 27: google.cloud.bigquery.v2.ExternalDataConfiguration.bigtable_options:type_name -> google.cloud.bigquery.v2.BigtableOptions
	9,  // 28: google.cloud.bigquery.v2.ExternalDataConfiguration.google_sheets_options:type_name -> google.cloud.bigquery.v2.GoogleSheetsOptions
	19, // 29: google.cloud.bigquery.v2.ExternalDataConfiguration.hive_partitioning_options:type_name -> google.cloud.bigquery.v2.HivePartitioningOptions
	20, // 30: google.cloud.bigquery.v2.ExternalDataConfiguration.decimal_target_types:type_name -> google.cloud.bigquery.v2.DecimalTargetType
	2,  // 31: google.cloud.bigquery.v2.ExternalDataConfiguration.avro_options:type_name -> google.cloud.bigquery.v2.AvroOptions
	21, // 32: google.cloud.bigquery.v2.ExternalDataConfiguration.json_extension:type_name -> google.cloud.bigquery.v2.JsonExtension
	3,  // 33: google.cloud.bigquery.v2.ExternalDataConfiguration.parquet_options:type_name -> google.cloud.bigquery.v2.ParquetOptions
	0,  // 34: google.cloud.bigquery.v2.ExternalDataConfiguration.object_metadata:type_name -> google.cloud.bigquery.v2.ExternalDataConfiguration.ObjectMetadata
	14, // 35: google.cloud.bigquery.v2.ExternalDataConfiguration.reference_file_schema_uri:type_name -> google.protobuf.StringValue
	1,  // 36: google.cloud.bigquery.v2.ExternalDataConfiguration.metadata_cache_mode:type_name -> google.cloud.bigquery.v2.ExternalDataConfiguration.MetadataCacheMode
	37, // [37:37] is the sub-list for method output_type
	37, // [37:37] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_google_cloud_bigquery_v2_external_data_config_proto_init() }
func file_google_cloud_bigquery_v2_external_data_config_proto_init() {
	if File_google_cloud_bigquery_v2_external_data_config_proto != nil {
		return
	}
	file_google_cloud_bigquery_v2_decimal_target_types_proto_init()
	file_google_cloud_bigquery_v2_file_set_specification_type_proto_init()
	file_google_cloud_bigquery_v2_hive_partitioning_proto_init()
	file_google_cloud_bigquery_v2_json_extension_proto_init()
	file_google_cloud_bigquery_v2_map_target_type_proto_init()
	file_google_cloud_bigquery_v2_table_schema_proto_init()
	file_google_cloud_bigquery_v2_external_data_config_proto_msgTypes[8].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_bigquery_v2_external_data_config_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_cloud_bigquery_v2_external_data_config_proto_goTypes,
		DependencyIndexes: file_google_cloud_bigquery_v2_external_data_config_proto_depIdxs,
		EnumInfos:         file_google_cloud_bigquery_v2_external_data_config_proto_enumTypes,
		MessageInfos:      file_google_cloud_bigquery_v2_external_data_config_proto_msgTypes,
	}.Build()
	File_google_cloud_bigquery_v2_external_data_config_proto = out.File
	file_google_cloud_bigquery_v2_external_data_config_proto_rawDesc = nil
	file_google_cloud_bigquery_v2_external_data_config_proto_goTypes = nil
	file_google_cloud_bigquery_v2_external_data_config_proto_depIdxs = nil
}
