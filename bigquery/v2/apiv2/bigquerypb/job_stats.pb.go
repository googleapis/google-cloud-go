// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.7
// source: google/cloud/bigquery/v2/job_stats.proto

package bigquerypb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The type of editions.
// Different features and behaviors are provided to different editions
// Capacity commitments and reservations are linked to editions.
type ReservationEdition int32

const (
	// Default value, which will be treated as ENTERPRISE.
	ReservationEdition_RESERVATION_EDITION_UNSPECIFIED ReservationEdition = 0
	// Standard edition.
	ReservationEdition_STANDARD ReservationEdition = 1
	// Enterprise edition.
	ReservationEdition_ENTERPRISE ReservationEdition = 2
	// Enterprise Plus edition.
	ReservationEdition_ENTERPRISE_PLUS ReservationEdition = 3
)

// Enum value maps for ReservationEdition.
var (
	ReservationEdition_name = map[int32]string{
		0: "RESERVATION_EDITION_UNSPECIFIED",
		1: "STANDARD",
		2: "ENTERPRISE",
		3: "ENTERPRISE_PLUS",
	}
	ReservationEdition_value = map[string]int32{
		"RESERVATION_EDITION_UNSPECIFIED": 0,
		"STANDARD":                        1,
		"ENTERPRISE":                      2,
		"ENTERPRISE_PLUS":                 3,
	}
)

func (x ReservationEdition) Enum() *ReservationEdition {
	p := new(ReservationEdition)
	*p = x
	return p
}

func (x ReservationEdition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReservationEdition) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_bigquery_v2_job_stats_proto_enumTypes[0].Descriptor()
}

func (ReservationEdition) Type() protoreflect.EnumType {
	return &file_google_cloud_bigquery_v2_job_stats_proto_enumTypes[0]
}

func (x ReservationEdition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReservationEdition.Descriptor instead.
func (ReservationEdition) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_stats_proto_rawDescGZIP(), []int{0}
}

// Indicates the type of compute mode.
type ExplainQueryStage_ComputeMode int32

const (
	// ComputeMode type not specified.
	ExplainQueryStage_COMPUTE_MODE_UNSPECIFIED ExplainQueryStage_ComputeMode = 0
	// This stage was processed using BigQuery slots.
	ExplainQueryStage_BIGQUERY ExplainQueryStage_ComputeMode = 1
	// This stage was processed using BI Engine compute.
	ExplainQueryStage_BI_ENGINE ExplainQueryStage_ComputeMode = 2
)

// Enum value maps for ExplainQueryStage_ComputeMode.
var (
	ExplainQueryStage_ComputeMode_name = map[int32]string{
		0: "COMPUTE_MODE_UNSPECIFIED",
		1: "BIGQUERY",
		2: "BI_ENGINE",
	}
	ExplainQueryStage_ComputeMode_value = map[string]int32{
		"COMPUTE_MODE_UNSPECIFIED": 0,
		"BIGQUERY":                 1,
		"BI_ENGINE":                2,
	}
)

func (x ExplainQueryStage_ComputeMode) Enum() *ExplainQueryStage_ComputeMode {
	p := new(ExplainQueryStage_ComputeMode)
	*p = x
	return p
}

func (x ExplainQueryStage_ComputeMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExplainQueryStage_ComputeMode) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_bigquery_v2_job_stats_proto_enumTypes[1].Descriptor()
}

func (ExplainQueryStage_ComputeMode) Type() protoreflect.EnumType {
	return &file_google_cloud_bigquery_v2_job_stats_proto_enumTypes[1]
}

func (x ExplainQueryStage_ComputeMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExplainQueryStage_ComputeMode.Descriptor instead.
func (ExplainQueryStage_ComputeMode) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_stats_proto_rawDescGZIP(), []int{1, 0}
}

// Indicates the high-level reason for no/partial acceleration
type BiEngineReason_Code int32

const (
	// BiEngineReason not specified.
	BiEngineReason_CODE_UNSPECIFIED BiEngineReason_Code = 0
	// No reservation available for BI Engine acceleration.
	BiEngineReason_NO_RESERVATION BiEngineReason_Code = 1
	// Not enough memory available for BI Engine acceleration.
	BiEngineReason_INSUFFICIENT_RESERVATION BiEngineReason_Code = 2
	// This particular SQL text is not supported for acceleration by BI Engine.
	BiEngineReason_UNSUPPORTED_SQL_TEXT BiEngineReason_Code = 4
	// Input too large for acceleration by BI Engine.
	BiEngineReason_INPUT_TOO_LARGE BiEngineReason_Code = 5
	// Catch-all code for all other cases for partial or disabled acceleration.
	BiEngineReason_OTHER_REASON BiEngineReason_Code = 6
	// One or more tables were not eligible for BI Engine acceleration.
	BiEngineReason_TABLE_EXCLUDED BiEngineReason_Code = 7
)

// Enum value maps for BiEngineReason_Code.
var (
	BiEngineReason_Code_name = map[int32]string{
		0: "CODE_UNSPECIFIED",
		1: "NO_RESERVATION",
		2: "INSUFFICIENT_RESERVATION",
		4: "UNSUPPORTED_SQL_TEXT",
		5: "INPUT_TOO_LARGE",
		6: "OTHER_REASON",
		7: "TABLE_EXCLUDED",
	}
	BiEngineReason_Code_value = map[string]int32{
		"CODE_UNSPECIFIED":         0,
		"NO_RESERVATION":           1,
		"INSUFFICIENT_RESERVATION": 2,
		"UNSUPPORTED_SQL_TEXT":     4,
		"INPUT_TOO_LARGE":          5,
		"OTHER_REASON":             6,
		"TABLE_EXCLUDED":           7,
	}
)

func (x BiEngineReason_Code) Enum() *BiEngineReason_Code {
	p := new(BiEngineReason_Code)
	*p = x
	return p
}

func (x BiEngineReason_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BiEngineReason_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_bigquery_v2_job_stats_proto_enumTypes[2].Descriptor()
}

func (BiEngineReason_Code) Type() protoreflect.EnumType {
	return &file_google_cloud_bigquery_v2_job_stats_proto_enumTypes[2]
}

func (x BiEngineReason_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BiEngineReason_Code.Descriptor instead.
func (BiEngineReason_Code) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_stats_proto_rawDescGZIP(), []int{5, 0}
}

// Indicates the type of BI Engine acceleration.
type BiEngineStatistics_BiEngineMode int32

const (
	// BiEngineMode type not specified.
	BiEngineStatistics_ACCELERATION_MODE_UNSPECIFIED BiEngineStatistics_BiEngineMode = 0
	// BI Engine disabled the acceleration. bi_engine_reasons
	// specifies a more detailed reason.
	BiEngineStatistics_DISABLED BiEngineStatistics_BiEngineMode = 1
	// Part of the query was accelerated using BI Engine.
	// See bi_engine_reasons for why parts of the query were not
	// accelerated.
	BiEngineStatistics_PARTIAL BiEngineStatistics_BiEngineMode = 2
	// All of the query was accelerated using BI Engine.
	BiEngineStatistics_FULL BiEngineStatistics_BiEngineMode = 3
)

// Enum value maps for BiEngineStatistics_BiEngineMode.
var (
	BiEngineStatistics_BiEngineMode_name = map[int32]string{
		0: "ACCELERATION_MODE_UNSPECIFIED",
		1: "DISABLED",
		2: "PARTIAL",
		3: "FULL",
	}
	BiEngineStatistics_BiEngineMode_value = map[string]int32{
		"ACCELERATION_MODE_UNSPECIFIED": 0,
		"DISABLED":                      1,
		"PARTIAL":                       2,
		"FULL":                          3,
	}
)

func (x BiEngineStatistics_BiEngineMode) Enum() *BiEngineStatistics_BiEngineMode {
	p := new(BiEngineStatistics_BiEngineMode)
	*p = x
	return p
}

func (x BiEngineStatistics_BiEngineMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BiEngineStatistics_BiEngineMode) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_bigquery_v2_job_stats_proto_enumTypes[3].Descriptor()
}

func (BiEngineStatistics_BiEngineMode) Type() protoreflect.EnumType {
	return &file_google_cloud_bigquery_v2_job_stats_proto_enumTypes[3]
}

func (x BiEngineStatistics_BiEngineMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BiEngineStatistics_BiEngineMode.Descriptor instead.
func (BiEngineStatistics_BiEngineMode) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_stats_proto_rawDescGZIP(), []int{6, 0}
}

// Indicates the type of BI Engine acceleration.
type BiEngineStatistics_BiEngineAccelerationMode int32

const (
	// BiEngineMode type not specified.
	BiEngineStatistics_BI_ENGINE_ACCELERATION_MODE_UNSPECIFIED BiEngineStatistics_BiEngineAccelerationMode = 0
	// BI Engine acceleration was attempted but disabled. bi_engine_reasons
	// specifies a more detailed reason.
	BiEngineStatistics_BI_ENGINE_DISABLED BiEngineStatistics_BiEngineAccelerationMode = 1
	// Some inputs were accelerated using BI Engine.
	// See bi_engine_reasons for why parts of the query were not
	// accelerated.
	BiEngineStatistics_PARTIAL_INPUT BiEngineStatistics_BiEngineAccelerationMode = 2
	// All of the query inputs were accelerated using BI Engine.
	BiEngineStatistics_FULL_INPUT BiEngineStatistics_BiEngineAccelerationMode = 3
	// All of the query was accelerated using BI Engine.
	BiEngineStatistics_FULL_QUERY BiEngineStatistics_BiEngineAccelerationMode = 4
)

// Enum value maps for BiEngineStatistics_BiEngineAccelerationMode.
var (
	BiEngineStatistics_BiEngineAccelerationMode_name = map[int32]string{
		0: "BI_ENGINE_ACCELERATION_MODE_UNSPECIFIED",
		1: "BI_ENGINE_DISABLED",
		2: "PARTIAL_INPUT",
		3: "FULL_INPUT",
		4: "FULL_QUERY",
	}
	BiEngineStatistics_BiEngineAccelerationMode_value = map[string]int32{
		"BI_ENGINE_ACCELERATION_MODE_UNSPECIFIED": 0,
		"BI_ENGINE_DISABLED":                      1,
		"PARTIAL_INPUT":                           2,
		"FULL_INPUT":                              3,
		"FULL_QUERY":                              4,
	}
)

func (x BiEngineStatistics_BiEngineAccelerationMode) Enum() *BiEngineStatistics_BiEngineAccelerationMode {
	p := new(BiEngineStatistics_BiEngineAccelerationMode)
	*p = x
	return p
}

func (x BiEngineStatistics_BiEngineAccelerationMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BiEngineStatistics_BiEngineAccelerationMode) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_bigquery_v2_job_stats_proto_enumTypes[4].Descriptor()
}

func (BiEngineStatistics_BiEngineAccelerationMode) Type() protoreflect.EnumType {
	return &file_google_cloud_bigquery_v2_job_stats_proto_enumTypes[4]
}

func (x BiEngineStatistics_BiEngineAccelerationMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BiEngineStatistics_BiEngineAccelerationMode.Descriptor instead.
func (BiEngineStatistics_BiEngineAccelerationMode) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_stats_proto_rawDescGZIP(), []int{6, 1}
}

// Indicates the high-level reason for the scenario when no search index was
// used.
type IndexUnusedReason_Code int32

const (
	// Code not specified.
	IndexUnusedReason_CODE_UNSPECIFIED IndexUnusedReason_Code = 0
	// Indicates the search index configuration has not been created.
	IndexUnusedReason_INDEX_CONFIG_NOT_AVAILABLE IndexUnusedReason_Code = 1
	// Indicates the search index creation has not been completed.
	IndexUnusedReason_PENDING_INDEX_CREATION IndexUnusedReason_Code = 2
	// Indicates the base table has been truncated (rows have been removed
	// from table with TRUNCATE TABLE statement) since the last time the search
	// index was refreshed.
	IndexUnusedReason_BASE_TABLE_TRUNCATED IndexUnusedReason_Code = 3
	// Indicates the search index configuration has been changed since the last
	// time the search index was refreshed.
	IndexUnusedReason_INDEX_CONFIG_MODIFIED IndexUnusedReason_Code = 4
	// Indicates the search query accesses data at a timestamp before the last
	// time the search index was refreshed.
	IndexUnusedReason_TIME_TRAVEL_QUERY IndexUnusedReason_Code = 5
	// Indicates the usage of search index will not contribute to any pruning
	// improvement for the search function, e.g. when the search predicate is in
	// a disjunction with other non-search predicates.
	IndexUnusedReason_NO_PRUNING_POWER IndexUnusedReason_Code = 6
	// Indicates the search index does not cover all fields in the search
	// function.
	IndexUnusedReason_UNINDEXED_SEARCH_FIELDS IndexUnusedReason_Code = 7
	// Indicates the search index does not support the given search query
	// pattern.
	IndexUnusedReason_UNSUPPORTED_SEARCH_PATTERN IndexUnusedReason_Code = 8
	// Indicates the query has been optimized by using a materialized view.
	IndexUnusedReason_OPTIMIZED_WITH_MATERIALIZED_VIEW IndexUnusedReason_Code = 9
	// Indicates the query has been secured by data masking, and thus search
	// indexes are not applicable.
	IndexUnusedReason_SECURED_BY_DATA_MASKING IndexUnusedReason_Code = 11
	// Indicates that the search index and the search function call do not
	// have the same text analyzer.
	IndexUnusedReason_MISMATCHED_TEXT_ANALYZER IndexUnusedReason_Code = 12
	// Indicates the base table is too small (below a certain threshold).
	// The index does not provide noticeable search performance gains
	// when the base table is too small.
	IndexUnusedReason_BASE_TABLE_TOO_SMALL IndexUnusedReason_Code = 13
	// Indicates that the total size of indexed base tables in your organization
	// exceeds your region's limit and the index is not used in the query. To
	// index larger base tables, you can
	// <a
	// href="https://cloud.google.com/bigquery/docs/search-index#use_your_own_reservation">use
	// your own reservation</a> for index-management jobs.
	IndexUnusedReason_BASE_TABLE_TOO_LARGE IndexUnusedReason_Code = 14
	// Indicates that the estimated performance gain from using the search index
	// is too low for the given search query.
	IndexUnusedReason_ESTIMATED_PERFORMANCE_GAIN_TOO_LOW IndexUnusedReason_Code = 15
	// Indicates that the column metadata index (which the search index depends
	// on) is not used. User can refer to the [column metadata index
	// usage](https://cloud.google.com/bigquery/docs/metadata-indexing-managed-tables#view_column_metadata_index_usage)
	// for more details on why it was not used.
	IndexUnusedReason_COLUMN_METADATA_INDEX_NOT_USED IndexUnusedReason_Code = 21
	// Indicates that search indexes can not be used for search query with
	// STANDARD edition.
	IndexUnusedReason_NOT_SUPPORTED_IN_STANDARD_EDITION IndexUnusedReason_Code = 17
	// Indicates that an option in the search function that cannot make use of
	// the index has been selected.
	IndexUnusedReason_INDEX_SUPPRESSED_BY_FUNCTION_OPTION IndexUnusedReason_Code = 18
	// Indicates that the query was cached, and thus the search index was not
	// used.
	IndexUnusedReason_QUERY_CACHE_HIT IndexUnusedReason_Code = 19
	// The index cannot be used in the search query because it is stale.
	IndexUnusedReason_STALE_INDEX IndexUnusedReason_Code = 20
	// Indicates an internal error that causes the search index to be unused.
	IndexUnusedReason_INTERNAL_ERROR IndexUnusedReason_Code = 10
	// Indicates that the reason search indexes cannot be used in the query is
	// not covered by any of the other IndexUnusedReason options.
	IndexUnusedReason_OTHER_REASON IndexUnusedReason_Code = 16
)

// Enum value maps for IndexUnusedReason_Code.
var (
	IndexUnusedReason_Code_name = map[int32]string{
		0:  "CODE_UNSPECIFIED",
		1:  "INDEX_CONFIG_NOT_AVAILABLE",
		2:  "PENDING_INDEX_CREATION",
		3:  "BASE_TABLE_TRUNCATED",
		4:  "INDEX_CONFIG_MODIFIED",
		5:  "TIME_TRAVEL_QUERY",
		6:  "NO_PRUNING_POWER",
		7:  "UNINDEXED_SEARCH_FIELDS",
		8:  "UNSUPPORTED_SEARCH_PATTERN",
		9:  "OPTIMIZED_WITH_MATERIALIZED_VIEW",
		11: "SECURED_BY_DATA_MASKING",
		12: "MISMATCHED_TEXT_ANALYZER",
		13: "BASE_TABLE_TOO_SMALL",
		14: "BASE_TABLE_TOO_LARGE",
		15: "ESTIMATED_PERFORMANCE_GAIN_TOO_LOW",
		21: "COLUMN_METADATA_INDEX_NOT_USED",
		17: "NOT_SUPPORTED_IN_STANDARD_EDITION",
		18: "INDEX_SUPPRESSED_BY_FUNCTION_OPTION",
		19: "QUERY_CACHE_HIT",
		20: "STALE_INDEX",
		10: "INTERNAL_ERROR",
		16: "OTHER_REASON",
	}
	IndexUnusedReason_Code_value = map[string]int32{
		"CODE_UNSPECIFIED":                    0,
		"INDEX_CONFIG_NOT_AVAILABLE":          1,
		"PENDING_INDEX_CREATION":              2,
		"BASE_TABLE_TRUNCATED":                3,
		"INDEX_CONFIG_MODIFIED":               4,
		"TIME_TRAVEL_QUERY":                   5,
		"NO_PRUNING_POWER":                    6,
		"UNINDEXED_SEARCH_FIELDS":             7,
		"UNSUPPORTED_SEARCH_PATTERN":          8,
		"OPTIMIZED_WITH_MATERIALIZED_VIEW":    9,
		"SECURED_BY_DATA_MASKING":             11,
		"MISMATCHED_TEXT_ANALYZER":            12,
		"BASE_TABLE_TOO_SMALL":                13,
		"BASE_TABLE_TOO_LARGE":                14,
		"ESTIMATED_PERFORMANCE_GAIN_TOO_LOW":  15,
		"COLUMN_METADATA_INDEX_NOT_USED":      21,
		"NOT_SUPPORTED_IN_STANDARD_EDITION":   17,
		"INDEX_SUPPRESSED_BY_FUNCTION_OPTION": 18,
		"QUERY_CACHE_HIT":                     19,
		"STALE_INDEX":                         20,
		"INTERNAL_ERROR":                      10,
		"OTHER_REASON":                        16,
	}
)

func (x IndexUnusedReason_Code) Enum() *IndexUnusedReason_Code {
	p := new(IndexUnusedReason_Code)
	*p = x
	return p
}

func (x IndexUnusedReason_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IndexUnusedReason_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_bigquery_v2_job_stats_proto_enumTypes[5].Descriptor()
}

func (IndexUnusedReason_Code) Type() protoreflect.EnumType {
	return &file_google_cloud_bigquery_v2_job_stats_proto_enumTypes[5]
}

func (x IndexUnusedReason_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IndexUnusedReason_Code.Descriptor instead.
func (IndexUnusedReason_Code) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_stats_proto_rawDescGZIP(), []int{7, 0}
}

// Indicates the high-level reason for the scenario when stored columns
// cannot be used in the query.
type StoredColumnsUsage_StoredColumnsUnusedReason_Code int32

const (
	// Default value.
	StoredColumnsUsage_StoredColumnsUnusedReason_CODE_UNSPECIFIED StoredColumnsUsage_StoredColumnsUnusedReason_Code = 0
	// If stored columns do not fully cover the columns.
	StoredColumnsUsage_StoredColumnsUnusedReason_STORED_COLUMNS_COVER_INSUFFICIENT StoredColumnsUsage_StoredColumnsUnusedReason_Code = 1
	// If the base table has RLS (Row Level Security).
	StoredColumnsUsage_StoredColumnsUnusedReason_BASE_TABLE_HAS_RLS StoredColumnsUsage_StoredColumnsUnusedReason_Code = 2
	// If the base table has CLS (Column Level Security).
	StoredColumnsUsage_StoredColumnsUnusedReason_BASE_TABLE_HAS_CLS StoredColumnsUsage_StoredColumnsUnusedReason_Code = 3
	// If the provided prefilter is not supported.
	StoredColumnsUsage_StoredColumnsUnusedReason_UNSUPPORTED_PREFILTER StoredColumnsUsage_StoredColumnsUnusedReason_Code = 4
	// If an internal error is preventing stored columns from being used.
	StoredColumnsUsage_StoredColumnsUnusedReason_INTERNAL_ERROR StoredColumnsUsage_StoredColumnsUnusedReason_Code = 5
	// Indicates that the reason stored columns cannot be used in the query is
	// not covered by any of the other StoredColumnsUnusedReason options.
	StoredColumnsUsage_StoredColumnsUnusedReason_OTHER_REASON StoredColumnsUsage_StoredColumnsUnusedReason_Code = 6
)

// Enum value maps for StoredColumnsUsage_StoredColumnsUnusedReason_Code.
var (
	StoredColumnsUsage_StoredColumnsUnusedReason_Code_name = map[int32]string{
		0: "CODE_UNSPECIFIED",
		1: "STORED_COLUMNS_COVER_INSUFFICIENT",
		2: "BASE_TABLE_HAS_RLS",
		3: "BASE_TABLE_HAS_CLS",
		4: "UNSUPPORTED_PREFILTER",
		5: "INTERNAL_ERROR",
		6: "OTHER_REASON",
	}
	StoredColumnsUsage_StoredColumnsUnusedReason_Code_value = map[string]int32{
		"CODE_UNSPECIFIED":                  0,
		"STORED_COLUMNS_COVER_INSUFFICIENT": 1,
		"BASE_TABLE_HAS_RLS":                2,
		"BASE_TABLE_HAS_CLS":                3,
		"UNSUPPORTED_PREFILTER":             4,
		"INTERNAL_ERROR":                    5,
		"OTHER_REASON":                      6,
	}
)

func (x StoredColumnsUsage_StoredColumnsUnusedReason_Code) Enum() *StoredColumnsUsage_StoredColumnsUnusedReason_Code {
	p := new(StoredColumnsUsage_StoredColumnsUnusedReason_Code)
	*p = x
	return p
}

func (x StoredColumnsUsage_StoredColumnsUnusedReason_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StoredColumnsUsage_StoredColumnsUnusedReason_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_bigquery_v2_job_stats_proto_enumTypes[6].Descriptor()
}

func (StoredColumnsUsage_StoredColumnsUnusedReason_Code) Type() protoreflect.EnumType {
	return &file_google_cloud_bigquery_v2_job_stats_proto_enumTypes[6]
}

func (x StoredColumnsUsage_StoredColumnsUnusedReason_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StoredColumnsUsage_StoredColumnsUnusedReason_Code.Descriptor instead.
func (StoredColumnsUsage_StoredColumnsUnusedReason_Code) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_stats_proto_rawDescGZIP(), []int{8, 0, 0}
}

// Indicates the type of search index usage in the entire search query.
type SearchStatistics_IndexUsageMode int32

const (
	// Index usage mode not specified.
	SearchStatistics_INDEX_USAGE_MODE_UNSPECIFIED SearchStatistics_IndexUsageMode = 0
	// No search indexes were used in the search query. See
	// [`indexUnusedReasons`]
	// (/bigquery/docs/reference/rest/v2/Job#IndexUnusedReason)
	// for detailed reasons.
	SearchStatistics_UNUSED SearchStatistics_IndexUsageMode = 1
	// Part of the search query used search indexes. See [`indexUnusedReasons`]
	// (/bigquery/docs/reference/rest/v2/Job#IndexUnusedReason)
	// for why other parts of the query did not use search indexes.
	SearchStatistics_PARTIALLY_USED SearchStatistics_IndexUsageMode = 2
	// The entire search query used search indexes.
	SearchStatistics_FULLY_USED SearchStatistics_IndexUsageMode = 4
)

// Enum value maps for SearchStatistics_IndexUsageMode.
var (
	SearchStatistics_IndexUsageMode_name = map[int32]string{
		0: "INDEX_USAGE_MODE_UNSPECIFIED",
		1: "UNUSED",
		2: "PARTIALLY_USED",
		4: "FULLY_USED",
	}
	SearchStatistics_IndexUsageMode_value = map[string]int32{
		"INDEX_USAGE_MODE_UNSPECIFIED": 0,
		"UNUSED":                       1,
		"PARTIALLY_USED":               2,
		"FULLY_USED":                   4,
	}
)

func (x SearchStatistics_IndexUsageMode) Enum() *SearchStatistics_IndexUsageMode {
	p := new(SearchStatistics_IndexUsageMode)
	*p = x
	return p
}

func (x SearchStatistics_IndexUsageMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchStatistics_IndexUsageMode) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_bigquery_v2_job_stats_proto_enumTypes[7].Descriptor()
}

func (SearchStatistics_IndexUsageMode) Type() protoreflect.EnumType {
	return &file_google_cloud_bigquery_v2_job_stats_proto_enumTypes[7]
}

func (x SearchStatistics_IndexUsageMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchStatistics_IndexUsageMode.Descriptor instead.
func (SearchStatistics_IndexUsageMode) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_stats_proto_rawDescGZIP(), []int{9, 0}
}

// Indicates the type of vector index usage in the entire vector search query.
type VectorSearchStatistics_IndexUsageMode int32

const (
	// Index usage mode not specified.
	VectorSearchStatistics_INDEX_USAGE_MODE_UNSPECIFIED VectorSearchStatistics_IndexUsageMode = 0
	// No vector indexes were used in the vector search query. See
	// [`indexUnusedReasons`]
	// (/bigquery/docs/reference/rest/v2/Job#IndexUnusedReason)
	// for detailed reasons.
	VectorSearchStatistics_UNUSED VectorSearchStatistics_IndexUsageMode = 1
	// Part of the vector search query used vector indexes. See
	// [`indexUnusedReasons`]
	// (/bigquery/docs/reference/rest/v2/Job#IndexUnusedReason)
	// for why other parts of the query did not use vector indexes.
	VectorSearchStatistics_PARTIALLY_USED VectorSearchStatistics_IndexUsageMode = 2
	// The entire vector search query used vector indexes.
	VectorSearchStatistics_FULLY_USED VectorSearchStatistics_IndexUsageMode = 4
)

// Enum value maps for VectorSearchStatistics_IndexUsageMode.
var (
	VectorSearchStatistics_IndexUsageMode_name = map[int32]string{
		0: "INDEX_USAGE_MODE_UNSPECIFIED",
		1: "UNUSED",
		2: "PARTIALLY_USED",
		4: "FULLY_USED",
	}
	VectorSearchStatistics_IndexUsageMode_value = map[string]int32{
		"INDEX_USAGE_MODE_UNSPECIFIED": 0,
		"UNUSED":                       1,
		"PARTIALLY_USED":               2,
		"FULLY_USED":                   4,
	}
)

func (x VectorSearchStatistics_IndexUsageMode) Enum() *VectorSearchStatistics_IndexUsageMode {
	p := new(VectorSearchStatistics_IndexUsageMode)
	*p = x
	return p
}

func (x VectorSearchStatistics_IndexUsageMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VectorSearchStatistics_IndexUsageMode) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_bigquery_v2_job_stats_proto_enumTypes[8].Descriptor()
}

func (VectorSearchStatistics_IndexUsageMode) Type() protoreflect.EnumType {
	return &file_google_cloud_bigquery_v2_job_stats_proto_enumTypes[8]
}

func (x VectorSearchStatistics_IndexUsageMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VectorSearchStatistics_IndexUsageMode.Descriptor instead.
func (VectorSearchStatistics_IndexUsageMode) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_stats_proto_rawDescGZIP(), []int{10, 0}
}

// Training type.
type MlStatistics_TrainingType int32

const (
	// Unspecified training type.
	MlStatistics_TRAINING_TYPE_UNSPECIFIED MlStatistics_TrainingType = 0
	// Single training with fixed parameter space.
	MlStatistics_SINGLE_TRAINING MlStatistics_TrainingType = 1
	// [Hyperparameter tuning
	// training](https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview).
	MlStatistics_HPARAM_TUNING MlStatistics_TrainingType = 2
)

// Enum value maps for MlStatistics_TrainingType.
var (
	MlStatistics_TrainingType_name = map[int32]string{
		0: "TRAINING_TYPE_UNSPECIFIED",
		1: "SINGLE_TRAINING",
		2: "HPARAM_TUNING",
	}
	MlStatistics_TrainingType_value = map[string]int32{
		"TRAINING_TYPE_UNSPECIFIED": 0,
		"SINGLE_TRAINING":           1,
		"HPARAM_TUNING":             2,
	}
)

func (x MlStatistics_TrainingType) Enum() *MlStatistics_TrainingType {
	p := new(MlStatistics_TrainingType)
	*p = x
	return p
}

func (x MlStatistics_TrainingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MlStatistics_TrainingType) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_bigquery_v2_job_stats_proto_enumTypes[9].Descriptor()
}

func (MlStatistics_TrainingType) Type() protoreflect.EnumType {
	return &file_google_cloud_bigquery_v2_job_stats_proto_enumTypes[9]
}

func (x MlStatistics_TrainingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MlStatistics_TrainingType.Descriptor instead.
func (MlStatistics_TrainingType) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_stats_proto_rawDescGZIP(), []int{17, 0}
}

// Describes how the job is evaluated.
type ScriptStatistics_EvaluationKind int32

const (
	// Default value.
	ScriptStatistics_EVALUATION_KIND_UNSPECIFIED ScriptStatistics_EvaluationKind = 0
	// The statement appears directly in the script.
	ScriptStatistics_STATEMENT ScriptStatistics_EvaluationKind = 1
	// The statement evaluates an expression that appears in the script.
	ScriptStatistics_EXPRESSION ScriptStatistics_EvaluationKind = 2
)

// Enum value maps for ScriptStatistics_EvaluationKind.
var (
	ScriptStatistics_EvaluationKind_name = map[int32]string{
		0: "EVALUATION_KIND_UNSPECIFIED",
		1: "STATEMENT",
		2: "EXPRESSION",
	}
	ScriptStatistics_EvaluationKind_value = map[string]int32{
		"EVALUATION_KIND_UNSPECIFIED": 0,
		"STATEMENT":                   1,
		"EXPRESSION":                  2,
	}
)

func (x ScriptStatistics_EvaluationKind) Enum() *ScriptStatistics_EvaluationKind {
	p := new(ScriptStatistics_EvaluationKind)
	*p = x
	return p
}

func (x ScriptStatistics_EvaluationKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScriptStatistics_EvaluationKind) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_bigquery_v2_job_stats_proto_enumTypes[10].Descriptor()
}

func (ScriptStatistics_EvaluationKind) Type() protoreflect.EnumType {
	return &file_google_cloud_bigquery_v2_job_stats_proto_enumTypes[10]
}

func (x ScriptStatistics_EvaluationKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScriptStatistics_EvaluationKind.Descriptor instead.
func (ScriptStatistics_EvaluationKind) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_stats_proto_rawDescGZIP(), []int{18, 0}
}

// Reason why a materialized view was not chosen for a query. For more
// information, see [Understand why materialized views were
// rejected](https://cloud.google.com/bigquery/docs/materialized-views-use#understand-rejected).
type MaterializedView_RejectedReason int32

const (
	// Default unspecified value.
	MaterializedView_REJECTED_REASON_UNSPECIFIED MaterializedView_RejectedReason = 0
	// View has no cached data because it has not refreshed yet.
	MaterializedView_NO_DATA MaterializedView_RejectedReason = 1
	// The estimated cost of the view is more expensive than another view or the
	// base table.
	//
	// Note: The estimate cost might not match the billed cost.
	MaterializedView_COST MaterializedView_RejectedReason = 2
	// View has no cached data because a base table is truncated.
	MaterializedView_BASE_TABLE_TRUNCATED MaterializedView_RejectedReason = 3
	// View is invalidated because of a data change in one or more base tables.
	// It could be any recent change if the
	// [`maxStaleness`](https://cloud.google.com/bigquery/docs/reference/rest/v2/tables#Table.FIELDS.max_staleness)
	// option is not set for the view, or otherwise any change outside of the
	// staleness window.
	MaterializedView_BASE_TABLE_DATA_CHANGE MaterializedView_RejectedReason = 4
	// View is invalidated because a base table's partition expiration has
	// changed.
	MaterializedView_BASE_TABLE_PARTITION_EXPIRATION_CHANGE MaterializedView_RejectedReason = 5
	// View is invalidated because a base table's partition has expired.
	MaterializedView_BASE_TABLE_EXPIRED_PARTITION MaterializedView_RejectedReason = 6
	// View is invalidated because a base table has an incompatible metadata
	// change.
	MaterializedView_BASE_TABLE_INCOMPATIBLE_METADATA_CHANGE MaterializedView_RejectedReason = 7
	// View is invalidated because it was refreshed with a time zone other than
	// that of the current job.
	MaterializedView_TIME_ZONE MaterializedView_RejectedReason = 8
	// View is outside the time travel window.
	MaterializedView_OUT_OF_TIME_TRAVEL_WINDOW MaterializedView_RejectedReason = 9
	// View is inaccessible to the user because of a fine-grained security
	// policy on one of its base tables.
	MaterializedView_BASE_TABLE_FINE_GRAINED_SECURITY_POLICY MaterializedView_RejectedReason = 10
	// One of the view's base tables is too stale. For example, the cached
	// metadata of a BigLake external table needs to be updated.
	MaterializedView_BASE_TABLE_TOO_STALE MaterializedView_RejectedReason = 11
)

// Enum value maps for MaterializedView_RejectedReason.
var (
	MaterializedView_RejectedReason_name = map[int32]string{
		0:  "REJECTED_REASON_UNSPECIFIED",
		1:  "NO_DATA",
		2:  "COST",
		3:  "BASE_TABLE_TRUNCATED",
		4:  "BASE_TABLE_DATA_CHANGE",
		5:  "BASE_TABLE_PARTITION_EXPIRATION_CHANGE",
		6:  "BASE_TABLE_EXPIRED_PARTITION",
		7:  "BASE_TABLE_INCOMPATIBLE_METADATA_CHANGE",
		8:  "TIME_ZONE",
		9:  "OUT_OF_TIME_TRAVEL_WINDOW",
		10: "BASE_TABLE_FINE_GRAINED_SECURITY_POLICY",
		11: "BASE_TABLE_TOO_STALE",
	}
	MaterializedView_RejectedReason_value = map[string]int32{
		"REJECTED_REASON_UNSPECIFIED":             0,
		"NO_DATA":                                 1,
		"COST":                                    2,
		"BASE_TABLE_TRUNCATED":                    3,
		"BASE_TABLE_DATA_CHANGE":                  4,
		"BASE_TABLE_PARTITION_EXPIRATION_CHANGE":  5,
		"BASE_TABLE_EXPIRED_PARTITION":            6,
		"BASE_TABLE_INCOMPATIBLE_METADATA_CHANGE": 7,
		"TIME_ZONE":                               8,
		"OUT_OF_TIME_TRAVEL_WINDOW":               9,
		"BASE_TABLE_FINE_GRAINED_SECURITY_POLICY": 10,
		"BASE_TABLE_TOO_STALE":                    11,
	}
)

func (x MaterializedView_RejectedReason) Enum() *MaterializedView_RejectedReason {
	p := new(MaterializedView_RejectedReason)
	*p = x
	return p
}

func (x MaterializedView_RejectedReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MaterializedView_RejectedReason) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_bigquery_v2_job_stats_proto_enumTypes[11].Descriptor()
}

func (MaterializedView_RejectedReason) Type() protoreflect.EnumType {
	return &file_google_cloud_bigquery_v2_job_stats_proto_enumTypes[11]
}

func (x MaterializedView_RejectedReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MaterializedView_RejectedReason.Descriptor instead.
func (MaterializedView_RejectedReason) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_stats_proto_rawDescGZIP(), []int{31, 0}
}

// Reasons for not using metadata caching.
type TableMetadataCacheUsage_UnusedReason int32

const (
	// Unused reasons not specified.
	TableMetadataCacheUsage_UNUSED_REASON_UNSPECIFIED TableMetadataCacheUsage_UnusedReason = 0
	// Metadata cache was outside the table's maxStaleness.
	TableMetadataCacheUsage_EXCEEDED_MAX_STALENESS TableMetadataCacheUsage_UnusedReason = 1
	// Metadata caching feature is not enabled. [Update BigLake tables]
	// (/bigquery/docs/create-cloud-storage-table-biglake#update-biglake-tables)
	// to enable the metadata caching.
	TableMetadataCacheUsage_METADATA_CACHING_NOT_ENABLED TableMetadataCacheUsage_UnusedReason = 3
	// Other unknown reason.
	TableMetadataCacheUsage_OTHER_REASON TableMetadataCacheUsage_UnusedReason = 2
)

// Enum value maps for TableMetadataCacheUsage_UnusedReason.
var (
	TableMetadataCacheUsage_UnusedReason_name = map[int32]string{
		0: "UNUSED_REASON_UNSPECIFIED",
		1: "EXCEEDED_MAX_STALENESS",
		3: "METADATA_CACHING_NOT_ENABLED",
		2: "OTHER_REASON",
	}
	TableMetadataCacheUsage_UnusedReason_value = map[string]int32{
		"UNUSED_REASON_UNSPECIFIED":    0,
		"EXCEEDED_MAX_STALENESS":       1,
		"METADATA_CACHING_NOT_ENABLED": 3,
		"OTHER_REASON":                 2,
	}
)

func (x TableMetadataCacheUsage_UnusedReason) Enum() *TableMetadataCacheUsage_UnusedReason {
	p := new(TableMetadataCacheUsage_UnusedReason)
	*p = x
	return p
}

func (x TableMetadataCacheUsage_UnusedReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TableMetadataCacheUsage_UnusedReason) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_bigquery_v2_job_stats_proto_enumTypes[12].Descriptor()
}

func (TableMetadataCacheUsage_UnusedReason) Type() protoreflect.EnumType {
	return &file_google_cloud_bigquery_v2_job_stats_proto_enumTypes[12]
}

func (x TableMetadataCacheUsage_UnusedReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TableMetadataCacheUsage_UnusedReason.Descriptor instead.
func (TableMetadataCacheUsage_UnusedReason) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_stats_proto_rawDescGZIP(), []int{32, 0}
}

// An operation within a stage.
type ExplainQueryStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Machine-readable operation type.
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	// Human-readable description of the step(s).
	Substeps []string `protobuf:"bytes,2,rep,name=substeps,proto3" json:"substeps,omitempty"`
}

func (x *ExplainQueryStep) Reset() {
	*x = ExplainQueryStep{}
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExplainQueryStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExplainQueryStep) ProtoMessage() {}

func (x *ExplainQueryStep) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExplainQueryStep.ProtoReflect.Descriptor instead.
func (*ExplainQueryStep) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_stats_proto_rawDescGZIP(), []int{0}
}

func (x *ExplainQueryStep) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ExplainQueryStep) GetSubsteps() []string {
	if x != nil {
		return x.Substeps
	}
	return nil
}

// A single stage of query execution.
type ExplainQueryStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Human-readable name for the stage.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Unique ID for the stage within the plan.
	Id *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Stage start time represented as milliseconds since the epoch.
	StartMs int64 `protobuf:"varint,3,opt,name=start_ms,json=startMs,proto3" json:"start_ms,omitempty"`
	// Stage end time represented as milliseconds since the epoch.
	EndMs int64 `protobuf:"varint,4,opt,name=end_ms,json=endMs,proto3" json:"end_ms,omitempty"`
	// IDs for stages that are inputs to this stage.
	InputStages []int64 `protobuf:"varint,5,rep,packed,name=input_stages,json=inputStages,proto3" json:"input_stages,omitempty"`
	// Relative amount of time the average shard spent waiting to be
	// scheduled.
	WaitRatioAvg *wrapperspb.DoubleValue `protobuf:"bytes,6,opt,name=wait_ratio_avg,json=waitRatioAvg,proto3" json:"wait_ratio_avg,omitempty"`
	// Milliseconds the average shard spent waiting to be scheduled.
	WaitMsAvg *wrapperspb.Int64Value `protobuf:"bytes,7,opt,name=wait_ms_avg,json=waitMsAvg,proto3" json:"wait_ms_avg,omitempty"`
	// Relative amount of time the slowest shard spent waiting to be
	// scheduled.
	WaitRatioMax *wrapperspb.DoubleValue `protobuf:"bytes,8,opt,name=wait_ratio_max,json=waitRatioMax,proto3" json:"wait_ratio_max,omitempty"`
	// Milliseconds the slowest shard spent waiting to be scheduled.
	WaitMsMax *wrapperspb.Int64Value `protobuf:"bytes,9,opt,name=wait_ms_max,json=waitMsMax,proto3" json:"wait_ms_max,omitempty"`
	// Relative amount of time the average shard spent reading input.
	ReadRatioAvg *wrapperspb.DoubleValue `protobuf:"bytes,10,opt,name=read_ratio_avg,json=readRatioAvg,proto3" json:"read_ratio_avg,omitempty"`
	// Milliseconds the average shard spent reading input.
	ReadMsAvg *wrapperspb.Int64Value `protobuf:"bytes,11,opt,name=read_ms_avg,json=readMsAvg,proto3" json:"read_ms_avg,omitempty"`
	// Relative amount of time the slowest shard spent reading input.
	ReadRatioMax *wrapperspb.DoubleValue `protobuf:"bytes,12,opt,name=read_ratio_max,json=readRatioMax,proto3" json:"read_ratio_max,omitempty"`
	// Milliseconds the slowest shard spent reading input.
	ReadMsMax *wrapperspb.Int64Value `protobuf:"bytes,13,opt,name=read_ms_max,json=readMsMax,proto3" json:"read_ms_max,omitempty"`
	// Relative amount of time the average shard spent on CPU-bound tasks.
	ComputeRatioAvg *wrapperspb.DoubleValue `protobuf:"bytes,14,opt,name=compute_ratio_avg,json=computeRatioAvg,proto3" json:"compute_ratio_avg,omitempty"`
	// Milliseconds the average shard spent on CPU-bound tasks.
	ComputeMsAvg *wrapperspb.Int64Value `protobuf:"bytes,15,opt,name=compute_ms_avg,json=computeMsAvg,proto3" json:"compute_ms_avg,omitempty"`
	// Relative amount of time the slowest shard spent on CPU-bound tasks.
	ComputeRatioMax *wrapperspb.DoubleValue `protobuf:"bytes,16,opt,name=compute_ratio_max,json=computeRatioMax,proto3" json:"compute_ratio_max,omitempty"`
	// Milliseconds the slowest shard spent on CPU-bound tasks.
	ComputeMsMax *wrapperspb.Int64Value `protobuf:"bytes,17,opt,name=compute_ms_max,json=computeMsMax,proto3" json:"compute_ms_max,omitempty"`
	// Relative amount of time the average shard spent on writing output.
	WriteRatioAvg *wrapperspb.DoubleValue `protobuf:"bytes,18,opt,name=write_ratio_avg,json=writeRatioAvg,proto3" json:"write_ratio_avg,omitempty"`
	// Milliseconds the average shard spent on writing output.
	WriteMsAvg *wrapperspb.Int64Value `protobuf:"bytes,19,opt,name=write_ms_avg,json=writeMsAvg,proto3" json:"write_ms_avg,omitempty"`
	// Relative amount of time the slowest shard spent on writing output.
	WriteRatioMax *wrapperspb.DoubleValue `protobuf:"bytes,20,opt,name=write_ratio_max,json=writeRatioMax,proto3" json:"write_ratio_max,omitempty"`
	// Milliseconds the slowest shard spent on writing output.
	WriteMsMax *wrapperspb.Int64Value `protobuf:"bytes,21,opt,name=write_ms_max,json=writeMsMax,proto3" json:"write_ms_max,omitempty"`
	// Total number of bytes written to shuffle.
	ShuffleOutputBytes *wrapperspb.Int64Value `protobuf:"bytes,22,opt,name=shuffle_output_bytes,json=shuffleOutputBytes,proto3" json:"shuffle_output_bytes,omitempty"`
	// Total number of bytes written to shuffle and spilled to disk.
	ShuffleOutputBytesSpilled *wrapperspb.Int64Value `protobuf:"bytes,23,opt,name=shuffle_output_bytes_spilled,json=shuffleOutputBytesSpilled,proto3" json:"shuffle_output_bytes_spilled,omitempty"`
	// Number of records read into the stage.
	RecordsRead *wrapperspb.Int64Value `protobuf:"bytes,24,opt,name=records_read,json=recordsRead,proto3" json:"records_read,omitempty"`
	// Number of records written by the stage.
	RecordsWritten *wrapperspb.Int64Value `protobuf:"bytes,25,opt,name=records_written,json=recordsWritten,proto3" json:"records_written,omitempty"`
	// Number of parallel input segments to be processed
	ParallelInputs *wrapperspb.Int64Value `protobuf:"bytes,26,opt,name=parallel_inputs,json=parallelInputs,proto3" json:"parallel_inputs,omitempty"`
	// Number of parallel input segments completed.
	CompletedParallelInputs *wrapperspb.Int64Value `protobuf:"bytes,27,opt,name=completed_parallel_inputs,json=completedParallelInputs,proto3" json:"completed_parallel_inputs,omitempty"`
	// Current status for this stage.
	Status string `protobuf:"bytes,28,opt,name=status,proto3" json:"status,omitempty"`
	// List of operations within the stage in dependency order (approximately
	// chronological).
	Steps []*ExplainQueryStep `protobuf:"bytes,29,rep,name=steps,proto3" json:"steps,omitempty"`
	// Slot-milliseconds used by the stage.
	SlotMs *wrapperspb.Int64Value `protobuf:"bytes,30,opt,name=slot_ms,json=slotMs,proto3" json:"slot_ms,omitempty"`
	// Output only. Compute mode for this stage.
	ComputeMode ExplainQueryStage_ComputeMode `protobuf:"varint,31,opt,name=compute_mode,json=computeMode,proto3,enum=google.cloud.bigquery.v2.ExplainQueryStage_ComputeMode" json:"compute_mode,omitempty"`
}

func (x *ExplainQueryStage) Reset() {
	*x = ExplainQueryStage{}
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExplainQueryStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExplainQueryStage) ProtoMessage() {}

func (x *ExplainQueryStage) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExplainQueryStage.ProtoReflect.Descriptor instead.
func (*ExplainQueryStage) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_stats_proto_rawDescGZIP(), []int{1}
}

func (x *ExplainQueryStage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExplainQueryStage) GetId() *wrapperspb.Int64Value {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ExplainQueryStage) GetStartMs() int64 {
	if x != nil {
		return x.StartMs
	}
	return 0
}

func (x *ExplainQueryStage) GetEndMs() int64 {
	if x != nil {
		return x.EndMs
	}
	return 0
}

func (x *ExplainQueryStage) GetInputStages() []int64 {
	if x != nil {
		return x.InputStages
	}
	return nil
}

func (x *ExplainQueryStage) GetWaitRatioAvg() *wrapperspb.DoubleValue {
	if x != nil {
		return x.WaitRatioAvg
	}
	return nil
}

func (x *ExplainQueryStage) GetWaitMsAvg() *wrapperspb.Int64Value {
	if x != nil {
		return x.WaitMsAvg
	}
	return nil
}

func (x *ExplainQueryStage) GetWaitRatioMax() *wrapperspb.DoubleValue {
	if x != nil {
		return x.WaitRatioMax
	}
	return nil
}

func (x *ExplainQueryStage) GetWaitMsMax() *wrapperspb.Int64Value {
	if x != nil {
		return x.WaitMsMax
	}
	return nil
}

func (x *ExplainQueryStage) GetReadRatioAvg() *wrapperspb.DoubleValue {
	if x != nil {
		return x.ReadRatioAvg
	}
	return nil
}

func (x *ExplainQueryStage) GetReadMsAvg() *wrapperspb.Int64Value {
	if x != nil {
		return x.ReadMsAvg
	}
	return nil
}

func (x *ExplainQueryStage) GetReadRatioMax() *wrapperspb.DoubleValue {
	if x != nil {
		return x.ReadRatioMax
	}
	return nil
}

func (x *ExplainQueryStage) GetReadMsMax() *wrapperspb.Int64Value {
	if x != nil {
		return x.ReadMsMax
	}
	return nil
}

func (x *ExplainQueryStage) GetComputeRatioAvg() *wrapperspb.DoubleValue {
	if x != nil {
		return x.ComputeRatioAvg
	}
	return nil
}

func (x *ExplainQueryStage) GetComputeMsAvg() *wrapperspb.Int64Value {
	if x != nil {
		return x.ComputeMsAvg
	}
	return nil
}

func (x *ExplainQueryStage) GetComputeRatioMax() *wrapperspb.DoubleValue {
	if x != nil {
		return x.ComputeRatioMax
	}
	return nil
}

func (x *ExplainQueryStage) GetComputeMsMax() *wrapperspb.Int64Value {
	if x != nil {
		return x.ComputeMsMax
	}
	return nil
}

func (x *ExplainQueryStage) GetWriteRatioAvg() *wrapperspb.DoubleValue {
	if x != nil {
		return x.WriteRatioAvg
	}
	return nil
}

func (x *ExplainQueryStage) GetWriteMsAvg() *wrapperspb.Int64Value {
	if x != nil {
		return x.WriteMsAvg
	}
	return nil
}

func (x *ExplainQueryStage) GetWriteRatioMax() *wrapperspb.DoubleValue {
	if x != nil {
		return x.WriteRatioMax
	}
	return nil
}

func (x *ExplainQueryStage) GetWriteMsMax() *wrapperspb.Int64Value {
	if x != nil {
		return x.WriteMsMax
	}
	return nil
}

func (x *ExplainQueryStage) GetShuffleOutputBytes() *wrapperspb.Int64Value {
	if x != nil {
		return x.ShuffleOutputBytes
	}
	return nil
}

func (x *ExplainQueryStage) GetShuffleOutputBytesSpilled() *wrapperspb.Int64Value {
	if x != nil {
		return x.ShuffleOutputBytesSpilled
	}
	return nil
}

func (x *ExplainQueryStage) GetRecordsRead() *wrapperspb.Int64Value {
	if x != nil {
		return x.RecordsRead
	}
	return nil
}

func (x *ExplainQueryStage) GetRecordsWritten() *wrapperspb.Int64Value {
	if x != nil {
		return x.RecordsWritten
	}
	return nil
}

func (x *ExplainQueryStage) GetParallelInputs() *wrapperspb.Int64Value {
	if x != nil {
		return x.ParallelInputs
	}
	return nil
}

func (x *ExplainQueryStage) GetCompletedParallelInputs() *wrapperspb.Int64Value {
	if x != nil {
		return x.CompletedParallelInputs
	}
	return nil
}

func (x *ExplainQueryStage) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ExplainQueryStage) GetSteps() []*ExplainQueryStep {
	if x != nil {
		return x.Steps
	}
	return nil
}

func (x *ExplainQueryStage) GetSlotMs() *wrapperspb.Int64Value {
	if x != nil {
		return x.SlotMs
	}
	return nil
}

func (x *ExplainQueryStage) GetComputeMode() ExplainQueryStage_ComputeMode {
	if x != nil {
		return x.ComputeMode
	}
	return ExplainQueryStage_COMPUTE_MODE_UNSPECIFIED
}

// Summary of the state of query execution at a given time.
type QueryTimelineSample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Milliseconds elapsed since the start of query execution.
	ElapsedMs *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=elapsed_ms,json=elapsedMs,proto3" json:"elapsed_ms,omitempty"`
	// Cumulative slot-ms consumed by the query.
	TotalSlotMs *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=total_slot_ms,json=totalSlotMs,proto3" json:"total_slot_ms,omitempty"`
	// Total units of work remaining for the query. This number can be revised
	// (increased or decreased) while the query is running.
	PendingUnits *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=pending_units,json=pendingUnits,proto3" json:"pending_units,omitempty"`
	// Total parallel units of work completed by this query.
	CompletedUnits *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=completed_units,json=completedUnits,proto3" json:"completed_units,omitempty"`
	// Total number of active workers. This does not correspond directly to
	// slot usage. This is the largest value observed since the last sample.
	ActiveUnits *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=active_units,json=activeUnits,proto3" json:"active_units,omitempty"`
	// Total shuffle usage ratio in shuffle RAM per reservation of this query.
	// This will be provided for reservation customers only.
	ShuffleRamUsageRatio *wrapperspb.DoubleValue `protobuf:"bytes,6,opt,name=shuffle_ram_usage_ratio,json=shuffleRamUsageRatio,proto3" json:"shuffle_ram_usage_ratio,omitempty"`
	// Units of work that can be scheduled immediately. Providing additional slots
	// for these units of work will accelerate the query, if no other query in
	// the reservation needs additional slots.
	EstimatedRunnableUnits *wrapperspb.Int64Value `protobuf:"bytes,7,opt,name=estimated_runnable_units,json=estimatedRunnableUnits,proto3" json:"estimated_runnable_units,omitempty"`
}

func (x *QueryTimelineSample) Reset() {
	*x = QueryTimelineSample{}
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryTimelineSample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTimelineSample) ProtoMessage() {}

func (x *QueryTimelineSample) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTimelineSample.ProtoReflect.Descriptor instead.
func (*QueryTimelineSample) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_stats_proto_rawDescGZIP(), []int{2}
}

func (x *QueryTimelineSample) GetElapsedMs() *wrapperspb.Int64Value {
	if x != nil {
		return x.ElapsedMs
	}
	return nil
}

func (x *QueryTimelineSample) GetTotalSlotMs() *wrapperspb.Int64Value {
	if x != nil {
		return x.TotalSlotMs
	}
	return nil
}

func (x *QueryTimelineSample) GetPendingUnits() *wrapperspb.Int64Value {
	if x != nil {
		return x.PendingUnits
	}
	return nil
}

func (x *QueryTimelineSample) GetCompletedUnits() *wrapperspb.Int64Value {
	if x != nil {
		return x.CompletedUnits
	}
	return nil
}

func (x *QueryTimelineSample) GetActiveUnits() *wrapperspb.Int64Value {
	if x != nil {
		return x.ActiveUnits
	}
	return nil
}

func (x *QueryTimelineSample) GetShuffleRamUsageRatio() *wrapperspb.DoubleValue {
	if x != nil {
		return x.ShuffleRamUsageRatio
	}
	return nil
}

func (x *QueryTimelineSample) GetEstimatedRunnableUnits() *wrapperspb.Int64Value {
	if x != nil {
		return x.EstimatedRunnableUnits
	}
	return nil
}

// The external service cost is a portion of the total cost, these costs are not
// additive with total_bytes_billed. Moreover, this field only track external
// service costs that will show up as BigQuery costs (e.g. training BigQuery
// ML job with google cloud CAIP or Automl Tables services), not other costs
// which may be accrued by running the query (e.g. reading from Bigtable or
// Cloud Storage). The external service costs with different billing sku (e.g.
// CAIP job is charged based on VM usage) are converted to BigQuery
// billed_bytes and slot_ms with equivalent amount of US dollars. Services may
// not directly correlate to these metrics, but these are the equivalents for
// billing purposes.
// Output only.
type ExternalServiceCost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// External service name.
	ExternalService string `protobuf:"bytes,1,opt,name=external_service,json=externalService,proto3" json:"external_service,omitempty"`
	// External service cost in terms of bigquery bytes processed.
	BytesProcessed *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=bytes_processed,json=bytesProcessed,proto3" json:"bytes_processed,omitempty"`
	// External service cost in terms of bigquery bytes billed.
	BytesBilled *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=bytes_billed,json=bytesBilled,proto3" json:"bytes_billed,omitempty"`
	// External service cost in terms of bigquery slot milliseconds.
	SlotMs *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=slot_ms,json=slotMs,proto3" json:"slot_ms,omitempty"`
	// Non-preemptable reserved slots used for external job.
	// For example, reserved slots for Cloua AI Platform job are the VM usages
	// converted to BigQuery slot with equivalent mount of price.
	ReservedSlotCount int64 `protobuf:"varint,5,opt,name=reserved_slot_count,json=reservedSlotCount,proto3" json:"reserved_slot_count,omitempty"`
}

func (x *ExternalServiceCost) Reset() {
	*x = ExternalServiceCost{}
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExternalServiceCost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalServiceCost) ProtoMessage() {}

func (x *ExternalServiceCost) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalServiceCost.ProtoReflect.Descriptor instead.
func (*ExternalServiceCost) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_stats_proto_rawDescGZIP(), []int{3}
}

func (x *ExternalServiceCost) GetExternalService() string {
	if x != nil {
		return x.ExternalService
	}
	return ""
}

func (x *ExternalServiceCost) GetBytesProcessed() *wrapperspb.Int64Value {
	if x != nil {
		return x.BytesProcessed
	}
	return nil
}

func (x *ExternalServiceCost) GetBytesBilled() *wrapperspb.Int64Value {
	if x != nil {
		return x.BytesBilled
	}
	return nil
}

func (x *ExternalServiceCost) GetSlotMs() *wrapperspb.Int64Value {
	if x != nil {
		return x.SlotMs
	}
	return nil
}

func (x *ExternalServiceCost) GetReservedSlotCount() int64 {
	if x != nil {
		return x.ReservedSlotCount
	}
	return 0
}

// Statistics for the EXPORT DATA statement as part of Query Job. EXTRACT
// JOB statistics are populated in JobStatistics4.
type ExportDataStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of destination files generated in case of EXPORT DATA
	// statement only.
	FileCount *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=file_count,json=fileCount,proto3" json:"file_count,omitempty"`
	// [Alpha] Number of destination rows generated in case of EXPORT DATA
	// statement only.
	RowCount *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=row_count,json=rowCount,proto3" json:"row_count,omitempty"`
}

func (x *ExportDataStatistics) Reset() {
	*x = ExportDataStatistics{}
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportDataStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportDataStatistics) ProtoMessage() {}

func (x *ExportDataStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportDataStatistics.ProtoReflect.Descriptor instead.
func (*ExportDataStatistics) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_stats_proto_rawDescGZIP(), []int{4}
}

func (x *ExportDataStatistics) GetFileCount() *wrapperspb.Int64Value {
	if x != nil {
		return x.FileCount
	}
	return nil
}

func (x *ExportDataStatistics) GetRowCount() *wrapperspb.Int64Value {
	if x != nil {
		return x.RowCount
	}
	return nil
}

// Reason why BI Engine didn't accelerate the query (or sub-query).
type BiEngineReason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. High-level BI Engine reason for partial or disabled
	// acceleration
	Code BiEngineReason_Code `protobuf:"varint,1,opt,name=code,proto3,enum=google.cloud.bigquery.v2.BiEngineReason_Code" json:"code,omitempty"`
	// Output only. Free form human-readable reason for partial or disabled
	// acceleration.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *BiEngineReason) Reset() {
	*x = BiEngineReason{}
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BiEngineReason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BiEngineReason) ProtoMessage() {}

func (x *BiEngineReason) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BiEngineReason.ProtoReflect.Descriptor instead.
func (*BiEngineReason) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_stats_proto_rawDescGZIP(), []int{5}
}

func (x *BiEngineReason) GetCode() BiEngineReason_Code {
	if x != nil {
		return x.Code
	}
	return BiEngineReason_CODE_UNSPECIFIED
}

func (x *BiEngineReason) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Statistics for a BI Engine specific query.
// Populated as part of JobStatistics2
type BiEngineStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Specifies which mode of BI Engine acceleration was performed
	// (if any).
	BiEngineMode BiEngineStatistics_BiEngineMode `protobuf:"varint,1,opt,name=bi_engine_mode,json=biEngineMode,proto3,enum=google.cloud.bigquery.v2.BiEngineStatistics_BiEngineMode" json:"bi_engine_mode,omitempty"`
	// Output only. Specifies which mode of BI Engine acceleration was performed
	// (if any).
	AccelerationMode BiEngineStatistics_BiEngineAccelerationMode `protobuf:"varint,3,opt,name=acceleration_mode,json=accelerationMode,proto3,enum=google.cloud.bigquery.v2.BiEngineStatistics_BiEngineAccelerationMode" json:"acceleration_mode,omitempty"`
	// In case of DISABLED or PARTIAL bi_engine_mode, these contain the
	// explanatory reasons as to why BI Engine could not accelerate.
	// In case the full query was accelerated, this field is not populated.
	BiEngineReasons []*BiEngineReason `protobuf:"bytes,2,rep,name=bi_engine_reasons,json=biEngineReasons,proto3" json:"bi_engine_reasons,omitempty"`
}

func (x *BiEngineStatistics) Reset() {
	*x = BiEngineStatistics{}
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BiEngineStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BiEngineStatistics) ProtoMessage() {}

func (x *BiEngineStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BiEngineStatistics.ProtoReflect.Descriptor instead.
func (*BiEngineStatistics) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_stats_proto_rawDescGZIP(), []int{6}
}

func (x *BiEngineStatistics) GetBiEngineMode() BiEngineStatistics_BiEngineMode {
	if x != nil {
		return x.BiEngineMode
	}
	return BiEngineStatistics_ACCELERATION_MODE_UNSPECIFIED
}

func (x *BiEngineStatistics) GetAccelerationMode() BiEngineStatistics_BiEngineAccelerationMode {
	if x != nil {
		return x.AccelerationMode
	}
	return BiEngineStatistics_BI_ENGINE_ACCELERATION_MODE_UNSPECIFIED
}

func (x *BiEngineStatistics) GetBiEngineReasons() []*BiEngineReason {
	if x != nil {
		return x.BiEngineReasons
	}
	return nil
}

// Reason about why no search index was used in the search query (or
// sub-query).
type IndexUnusedReason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies the high-level reason for the scenario when no search index was
	// used.
	Code *IndexUnusedReason_Code `protobuf:"varint,1,opt,name=code,proto3,enum=google.cloud.bigquery.v2.IndexUnusedReason_Code,oneof" json:"code,omitempty"`
	// Free form human-readable reason for the scenario when no search index was
	// used.
	Message *string `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	// Specifies the base table involved in the reason that no search index was
	// used.
	BaseTable *TableReference `protobuf:"bytes,3,opt,name=base_table,json=baseTable,proto3,oneof" json:"base_table,omitempty"`
	// Specifies the name of the unused search index, if available.
	IndexName *string `protobuf:"bytes,4,opt,name=index_name,json=indexName,proto3,oneof" json:"index_name,omitempty"`
}

func (x *IndexUnusedReason) Reset() {
	*x = IndexUnusedReason{}
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IndexUnusedReason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexUnusedReason) ProtoMessage() {}

func (x *IndexUnusedReason) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexUnusedReason.ProtoReflect.Descriptor instead.
func (*IndexUnusedReason) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_stats_proto_rawDescGZIP(), []int{7}
}

func (x *IndexUnusedReason) GetCode() IndexUnusedReason_Code {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return IndexUnusedReason_CODE_UNSPECIFIED
}

func (x *IndexUnusedReason) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *IndexUnusedReason) GetBaseTable() *TableReference {
	if x != nil {
		return x.BaseTable
	}
	return nil
}

func (x *IndexUnusedReason) GetIndexName() string {
	if x != nil && x.IndexName != nil {
		return *x.IndexName
	}
	return ""
}

// Indicates the stored columns usage in the query.
type StoredColumnsUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies whether the query was accelerated with stored columns.
	IsQueryAccelerated *bool `protobuf:"varint,1,opt,name=is_query_accelerated,json=isQueryAccelerated,proto3,oneof" json:"is_query_accelerated,omitempty"`
	// Specifies the base table.
	BaseTable *TableReference `protobuf:"bytes,2,opt,name=base_table,json=baseTable,proto3,oneof" json:"base_table,omitempty"`
	// If stored columns were not used, explain why.
	StoredColumnsUnusedReasons []*StoredColumnsUsage_StoredColumnsUnusedReason `protobuf:"bytes,3,rep,name=stored_columns_unused_reasons,json=storedColumnsUnusedReasons,proto3" json:"stored_columns_unused_reasons,omitempty"`
}

func (x *StoredColumnsUsage) Reset() {
	*x = StoredColumnsUsage{}
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoredColumnsUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoredColumnsUsage) ProtoMessage() {}

func (x *StoredColumnsUsage) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoredColumnsUsage.ProtoReflect.Descriptor instead.
func (*StoredColumnsUsage) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_stats_proto_rawDescGZIP(), []int{8}
}

func (x *StoredColumnsUsage) GetIsQueryAccelerated() bool {
	if x != nil && x.IsQueryAccelerated != nil {
		return *x.IsQueryAccelerated
	}
	return false
}

func (x *StoredColumnsUsage) GetBaseTable() *TableReference {
	if x != nil {
		return x.BaseTable
	}
	return nil
}

func (x *StoredColumnsUsage) GetStoredColumnsUnusedReasons() []*StoredColumnsUsage_StoredColumnsUnusedReason {
	if x != nil {
		return x.StoredColumnsUnusedReasons
	}
	return nil
}

// Statistics for a search query.
// Populated as part of JobStatistics2.
type SearchStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies the index usage mode for the query.
	IndexUsageMode SearchStatistics_IndexUsageMode `protobuf:"varint,1,opt,name=index_usage_mode,json=indexUsageMode,proto3,enum=google.cloud.bigquery.v2.SearchStatistics_IndexUsageMode" json:"index_usage_mode,omitempty"`
	// When `indexUsageMode` is `UNUSED` or `PARTIALLY_USED`, this field explains
	// why indexes were not used in all or part of the search query. If
	// `indexUsageMode` is `FULLY_USED`, this field is not populated.
	IndexUnusedReasons []*IndexUnusedReason `protobuf:"bytes,2,rep,name=index_unused_reasons,json=indexUnusedReasons,proto3" json:"index_unused_reasons,omitempty"`
}

func (x *SearchStatistics) Reset() {
	*x = SearchStatistics{}
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchStatistics) ProtoMessage() {}

func (x *SearchStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchStatistics.ProtoReflect.Descriptor instead.
func (*SearchStatistics) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_stats_proto_rawDescGZIP(), []int{9}
}

func (x *SearchStatistics) GetIndexUsageMode() SearchStatistics_IndexUsageMode {
	if x != nil {
		return x.IndexUsageMode
	}
	return SearchStatistics_INDEX_USAGE_MODE_UNSPECIFIED
}

func (x *SearchStatistics) GetIndexUnusedReasons() []*IndexUnusedReason {
	if x != nil {
		return x.IndexUnusedReasons
	}
	return nil
}

// Statistics for a vector search query.
// Populated as part of JobStatistics2.
type VectorSearchStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies the index usage mode for the query.
	IndexUsageMode VectorSearchStatistics_IndexUsageMode `protobuf:"varint,1,opt,name=index_usage_mode,json=indexUsageMode,proto3,enum=google.cloud.bigquery.v2.VectorSearchStatistics_IndexUsageMode" json:"index_usage_mode,omitempty"`
	// When `indexUsageMode` is `UNUSED` or `PARTIALLY_USED`, this field explains
	// why indexes were not used in all or part of the vector search query. If
	// `indexUsageMode` is `FULLY_USED`, this field is not populated.
	IndexUnusedReasons []*IndexUnusedReason `protobuf:"bytes,2,rep,name=index_unused_reasons,json=indexUnusedReasons,proto3" json:"index_unused_reasons,omitempty"`
	// Specifies the usage of stored columns in the query when stored columns are
	// used in the query.
	StoredColumnsUsages []*StoredColumnsUsage `protobuf:"bytes,3,rep,name=stored_columns_usages,json=storedColumnsUsages,proto3" json:"stored_columns_usages,omitempty"`
}

func (x *VectorSearchStatistics) Reset() {
	*x = VectorSearchStatistics{}
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VectorSearchStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorSearchStatistics) ProtoMessage() {}

func (x *VectorSearchStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorSearchStatistics.ProtoReflect.Descriptor instead.
func (*VectorSearchStatistics) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_stats_proto_rawDescGZIP(), []int{10}
}

func (x *VectorSearchStatistics) GetIndexUsageMode() VectorSearchStatistics_IndexUsageMode {
	if x != nil {
		return x.IndexUsageMode
	}
	return VectorSearchStatistics_INDEX_USAGE_MODE_UNSPECIFIED
}

func (x *VectorSearchStatistics) GetIndexUnusedReasons() []*IndexUnusedReason {
	if x != nil {
		return x.IndexUnusedReasons
	}
	return nil
}

func (x *VectorSearchStatistics) GetStoredColumnsUsages() []*StoredColumnsUsage {
	if x != nil {
		return x.StoredColumnsUsages
	}
	return nil
}

// Query optimization information for a QUERY job.
type QueryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Information about query optimizations.
	OptimizationDetails *structpb.Struct `protobuf:"bytes,2,opt,name=optimization_details,json=optimizationDetails,proto3" json:"optimization_details,omitempty"`
}

func (x *QueryInfo) Reset() {
	*x = QueryInfo{}
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryInfo) ProtoMessage() {}

func (x *QueryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryInfo.ProtoReflect.Descriptor instead.
func (*QueryInfo) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_stats_proto_rawDescGZIP(), []int{11}
}

func (x *QueryInfo) GetOptimizationDetails() *structpb.Struct {
	if x != nil {
		return x.OptimizationDetails
	}
	return nil
}

// Statistics for a LOAD query.
type LoadQueryStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Number of source files in a LOAD query.
	InputFiles *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=input_files,json=inputFiles,proto3" json:"input_files,omitempty"`
	// Output only. Number of bytes of source data in a LOAD query.
	InputFileBytes *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=input_file_bytes,json=inputFileBytes,proto3" json:"input_file_bytes,omitempty"`
	// Output only. Number of rows imported in a LOAD query.
	// Note that while a LOAD query is in the running state, this value may
	// change.
	OutputRows *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=output_rows,json=outputRows,proto3" json:"output_rows,omitempty"`
	// Output only. Size of the loaded data in bytes. Note that while a LOAD query
	// is in the running state, this value may change.
	OutputBytes *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=output_bytes,json=outputBytes,proto3" json:"output_bytes,omitempty"`
	// Output only. The number of bad records encountered while processing a LOAD
	// query. Note that if the job has failed because of more bad records
	// encountered than the maximum allowed in the load job configuration, then
	// this number can be less than the total number of bad records present in the
	// input data.
	BadRecords *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=bad_records,json=badRecords,proto3" json:"bad_records,omitempty"`
}

func (x *LoadQueryStatistics) Reset() {
	*x = LoadQueryStatistics{}
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoadQueryStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadQueryStatistics) ProtoMessage() {}

func (x *LoadQueryStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadQueryStatistics.ProtoReflect.Descriptor instead.
func (*LoadQueryStatistics) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_stats_proto_rawDescGZIP(), []int{12}
}

func (x *LoadQueryStatistics) GetInputFiles() *wrapperspb.Int64Value {
	if x != nil {
		return x.InputFiles
	}
	return nil
}

func (x *LoadQueryStatistics) GetInputFileBytes() *wrapperspb.Int64Value {
	if x != nil {
		return x.InputFileBytes
	}
	return nil
}

func (x *LoadQueryStatistics) GetOutputRows() *wrapperspb.Int64Value {
	if x != nil {
		return x.OutputRows
	}
	return nil
}

func (x *LoadQueryStatistics) GetOutputBytes() *wrapperspb.Int64Value {
	if x != nil {
		return x.OutputBytes
	}
	return nil
}

func (x *LoadQueryStatistics) GetBadRecords() *wrapperspb.Int64Value {
	if x != nil {
		return x.BadRecords
	}
	return nil
}

// Statistics for a query job.
type JobStatistics2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Describes execution plan for the query.
	QueryPlan []*ExplainQueryStage `protobuf:"bytes,1,rep,name=query_plan,json=queryPlan,proto3" json:"query_plan,omitempty"`
	// Output only. The original estimate of bytes processed for the job.
	EstimatedBytesProcessed *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=estimated_bytes_processed,json=estimatedBytesProcessed,proto3" json:"estimated_bytes_processed,omitempty"`
	// Output only. Describes a timeline of job execution.
	Timeline []*QueryTimelineSample `protobuf:"bytes,3,rep,name=timeline,proto3" json:"timeline,omitempty"`
	// Output only. Total number of partitions processed from all partitioned
	// tables referenced in the job.
	TotalPartitionsProcessed *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=total_partitions_processed,json=totalPartitionsProcessed,proto3" json:"total_partitions_processed,omitempty"`
	// Output only. Total bytes processed for the job.
	TotalBytesProcessed *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=total_bytes_processed,json=totalBytesProcessed,proto3" json:"total_bytes_processed,omitempty"`
	// Output only. For dry-run jobs, totalBytesProcessed is an estimate and this
	// field specifies the accuracy of the estimate. Possible values can be:
	// UNKNOWN: accuracy of the estimate is unknown.
	// PRECISE: estimate is precise.
	// LOWER_BOUND: estimate is lower bound of what the query would cost.
	// UPPER_BOUND: estimate is upper bound of what the query would cost.
	TotalBytesProcessedAccuracy string `protobuf:"bytes,21,opt,name=total_bytes_processed_accuracy,json=totalBytesProcessedAccuracy,proto3" json:"total_bytes_processed_accuracy,omitempty"`
	// Output only. If the project is configured to use on-demand pricing,
	// then this field contains the total bytes billed for the job.
	// If the project is configured to use flat-rate pricing, then you are
	// not billed for bytes and this field is informational only.
	TotalBytesBilled *wrapperspb.Int64Value `protobuf:"bytes,6,opt,name=total_bytes_billed,json=totalBytesBilled,proto3" json:"total_bytes_billed,omitempty"`
	// Output only. Billing tier for the job. This is a BigQuery-specific concept
	// which is not related to the Google Cloud notion of "free tier". The value
	// here is a measure of the query's resource consumption relative to the
	// amount of data scanned. For on-demand queries, the limit is 100, and all
	// queries within this limit are billed at the standard on-demand rates.
	// On-demand queries that exceed this limit will fail with a
	// billingTierLimitExceeded error.
	BillingTier *wrapperspb.Int32Value `protobuf:"bytes,7,opt,name=billing_tier,json=billingTier,proto3" json:"billing_tier,omitempty"`
	// Output only. Slot-milliseconds for the job.
	TotalSlotMs *wrapperspb.Int64Value `protobuf:"bytes,8,opt,name=total_slot_ms,json=totalSlotMs,proto3" json:"total_slot_ms,omitempty"`
	// Output only. Whether the query result was fetched from the query cache.
	CacheHit *wrapperspb.BoolValue `protobuf:"bytes,9,opt,name=cache_hit,json=cacheHit,proto3" json:"cache_hit,omitempty"`
	// Output only. Referenced tables for the job.
	ReferencedTables []*TableReference `protobuf:"bytes,10,rep,name=referenced_tables,json=referencedTables,proto3" json:"referenced_tables,omitempty"`
	// Output only. Referenced routines for the job.
	ReferencedRoutines []*RoutineReference `protobuf:"bytes,24,rep,name=referenced_routines,json=referencedRoutines,proto3" json:"referenced_routines,omitempty"`
	// Output only. The schema of the results. Present only for successful dry
	// run of non-legacy SQL queries.
	Schema *TableSchema `protobuf:"bytes,11,opt,name=schema,proto3" json:"schema,omitempty"`
	// Output only. The number of rows affected by a DML statement. Present
	// only for DML statements INSERT, UPDATE or DELETE.
	NumDmlAffectedRows *wrapperspb.Int64Value `protobuf:"bytes,12,opt,name=num_dml_affected_rows,json=numDmlAffectedRows,proto3" json:"num_dml_affected_rows,omitempty"`
	// Output only. Detailed statistics for DML statements INSERT, UPDATE, DELETE,
	// MERGE or TRUNCATE.
	DmlStats *DmlStats `protobuf:"bytes,32,opt,name=dml_stats,json=dmlStats,proto3" json:"dml_stats,omitempty"`
	// Output only. GoogleSQL only: list of undeclared query
	// parameters detected during a dry run validation.
	UndeclaredQueryParameters []*QueryParameter `protobuf:"bytes,13,rep,name=undeclared_query_parameters,json=undeclaredQueryParameters,proto3" json:"undeclared_query_parameters,omitempty"`
	// Output only. The type of query statement, if valid.
	// Possible values:
	//
	// * `SELECT`:
	// [`SELECT`](https://cloud.google.com/bigquery/docs/reference/standard-sql/query-syntax#select_list)
	// statement.
	// * `ASSERT`:
	// [`ASSERT`](https://cloud.google.com/bigquery/docs/reference/standard-sql/debugging-statements#assert)
	// statement.
	// * `INSERT`:
	// [`INSERT`](https://cloud.google.com/bigquery/docs/reference/standard-sql/dml-syntax#insert_statement)
	// statement.
	// * `UPDATE`:
	// [`UPDATE`](https://cloud.google.com/bigquery/docs/reference/standard-sql/dml-syntax#update_statement)
	// statement.
	// * `DELETE`:
	// [`DELETE`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language)
	// statement.
	// * `MERGE`:
	// [`MERGE`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language)
	// statement.
	// * `CREATE_TABLE`: [`CREATE
	// TABLE`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#create_table_statement)
	// statement, without `AS SELECT`.
	// * `CREATE_TABLE_AS_SELECT`: [`CREATE TABLE AS
	// SELECT`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#create_table_statement)
	// statement.
	// * `CREATE_VIEW`: [`CREATE
	// VIEW`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#create_view_statement)
	// statement.
	// * `CREATE_MODEL`: [`CREATE
	// MODEL`](https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-create#create_model_statement)
	// statement.
	// * `CREATE_MATERIALIZED_VIEW`: [`CREATE MATERIALIZED
	// VIEW`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#create_materialized_view_statement)
	// statement.
	// * `CREATE_FUNCTION`: [`CREATE
	// FUNCTION`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#create_function_statement)
	// statement.
	// * `CREATE_TABLE_FUNCTION`: [`CREATE TABLE
	// FUNCTION`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#create_table_function_statement)
	// statement.
	// * `CREATE_PROCEDURE`: [`CREATE
	// PROCEDURE`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#create_procedure)
	// statement.
	// * `CREATE_ROW_ACCESS_POLICY`: [`CREATE ROW ACCESS
	// POLICY`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#create_row_access_policy_statement)
	// statement.
	// * `CREATE_SCHEMA`: [`CREATE
	// SCHEMA`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#create_schema_statement)
	// statement.
	// * `CREATE_SNAPSHOT_TABLE`: [`CREATE SNAPSHOT
	// TABLE`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#create_snapshot_table_statement)
	// statement.
	// * `CREATE_SEARCH_INDEX`: [`CREATE SEARCH
	// INDEX`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#create_search_index_statement)
	// statement.
	// * `DROP_TABLE`: [`DROP
	// TABLE`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#drop_table_statement)
	// statement.
	// * `DROP_EXTERNAL_TABLE`: [`DROP EXTERNAL
	// TABLE`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#drop_external_table_statement)
	// statement.
	// * `DROP_VIEW`: [`DROP
	// VIEW`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#drop_view_statement)
	// statement.
	// * `DROP_MODEL`: [`DROP
	// MODEL`](https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-drop-model)
	// statement.
	//   - `DROP_MATERIALIZED_VIEW`: [`DROP MATERIALIZED
	//     VIEW`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#drop_materialized_view_statement)
	//
	// statement.
	// * `DROP_FUNCTION` : [`DROP
	// FUNCTION`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#drop_function_statement)
	// statement.
	// * `DROP_TABLE_FUNCTION` : [`DROP TABLE
	// FUNCTION`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#drop_table_function)
	// statement.
	// * `DROP_PROCEDURE`: [`DROP
	// PROCEDURE`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#drop_procedure_statement)
	// statement.
	// * `DROP_SEARCH_INDEX`: [`DROP SEARCH
	// INDEX`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#drop_search_index)
	// statement.
	// * `DROP_SCHEMA`: [`DROP
	// SCHEMA`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#drop_schema_statement)
	// statement.
	// * `DROP_SNAPSHOT_TABLE`: [`DROP SNAPSHOT
	// TABLE`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#drop_snapshot_table_statement)
	// statement.
	// * `DROP_ROW_ACCESS_POLICY`: [`DROP [ALL] ROW ACCESS
	// POLICY|POLICIES`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#drop_row_access_policy_statement)
	// statement.
	// * `ALTER_TABLE`: [`ALTER
	// TABLE`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#alter_table_set_options_statement)
	// statement.
	// * `ALTER_VIEW`: [`ALTER
	// VIEW`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#alter_view_set_options_statement)
	// statement.
	// * `ALTER_MATERIALIZED_VIEW`: [`ALTER MATERIALIZED
	// VIEW`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#alter_materialized_view_set_options_statement)
	// statement.
	// * `ALTER_SCHEMA`: [`ALTER
	// SCHEMA`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#alter_schema_set_options_statement)
	// statement.
	// * `SCRIPT`:
	// [`SCRIPT`](https://cloud.google.com/bigquery/docs/reference/standard-sql/procedural-language).
	// * `TRUNCATE_TABLE`: [`TRUNCATE
	// TABLE`](https://cloud.google.com/bigquery/docs/reference/standard-sql/dml-syntax#truncate_table_statement)
	// statement.
	// * `CREATE_EXTERNAL_TABLE`: [`CREATE EXTERNAL
	// TABLE`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#create_external_table_statement)
	// statement.
	// * `EXPORT_DATA`: [`EXPORT
	// DATA`](https://cloud.google.com/bigquery/docs/reference/standard-sql/other-statements#export_data_statement)
	// statement.
	// * `EXPORT_MODEL`: [`EXPORT
	// MODEL`](https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-export-model)
	// statement.
	// * `LOAD_DATA`: [`LOAD
	// DATA`](https://cloud.google.com/bigquery/docs/reference/standard-sql/other-statements#load_data_statement)
	// statement.
	// * `CALL`:
	// [`CALL`](https://cloud.google.com/bigquery/docs/reference/standard-sql/procedural-language#call)
	// statement.
	StatementType string `protobuf:"bytes,14,opt,name=statement_type,json=statementType,proto3" json:"statement_type,omitempty"`
	// Output only. The DDL operation performed, possibly
	// dependent on the pre-existence of the DDL target.
	DdlOperationPerformed string `protobuf:"bytes,15,opt,name=ddl_operation_performed,json=ddlOperationPerformed,proto3" json:"ddl_operation_performed,omitempty"`
	// Output only. The DDL target table. Present only for
	// CREATE/DROP TABLE/VIEW and DROP ALL ROW ACCESS POLICIES queries.
	DdlTargetTable *TableReference `protobuf:"bytes,16,opt,name=ddl_target_table,json=ddlTargetTable,proto3" json:"ddl_target_table,omitempty"`
	// Output only. The table after rename. Present only for ALTER TABLE RENAME TO
	// query.
	DdlDestinationTable *TableReference `protobuf:"bytes,31,opt,name=ddl_destination_table,json=ddlDestinationTable,proto3" json:"ddl_destination_table,omitempty"`
	// Output only. The DDL target row access policy. Present only for
	// CREATE/DROP ROW ACCESS POLICY queries.
	DdlTargetRowAccessPolicy *RowAccessPolicyReference `protobuf:"bytes,26,opt,name=ddl_target_row_access_policy,json=ddlTargetRowAccessPolicy,proto3" json:"ddl_target_row_access_policy,omitempty"`
	// Output only. The number of row access policies affected by a DDL statement.
	// Present only for DROP ALL ROW ACCESS POLICIES queries.
	DdlAffectedRowAccessPolicyCount *wrapperspb.Int64Value `protobuf:"bytes,27,opt,name=ddl_affected_row_access_policy_count,json=ddlAffectedRowAccessPolicyCount,proto3" json:"ddl_affected_row_access_policy_count,omitempty"`
	// Output only. [Beta] The DDL target routine. Present only for
	// CREATE/DROP FUNCTION/PROCEDURE queries.
	DdlTargetRoutine *RoutineReference `protobuf:"bytes,22,opt,name=ddl_target_routine,json=ddlTargetRoutine,proto3" json:"ddl_target_routine,omitempty"`
	// Output only. The DDL target dataset. Present only for CREATE/ALTER/DROP
	// SCHEMA(dataset) queries.
	DdlTargetDataset *DatasetReference `protobuf:"bytes,30,opt,name=ddl_target_dataset,json=ddlTargetDataset,proto3" json:"ddl_target_dataset,omitempty"`
	// Output only. Statistics of a BigQuery ML training job.
	MlStatistics *MlStatistics `protobuf:"bytes,23,opt,name=ml_statistics,json=mlStatistics,proto3" json:"ml_statistics,omitempty"`
	// Output only. Stats for EXPORT DATA statement.
	ExportDataStatistics *ExportDataStatistics `protobuf:"bytes,25,opt,name=export_data_statistics,json=exportDataStatistics,proto3" json:"export_data_statistics,omitempty"`
	// Output only. Job cost breakdown as bigquery internal cost and external
	// service costs.
	ExternalServiceCosts []*ExternalServiceCost `protobuf:"bytes,28,rep,name=external_service_costs,json=externalServiceCosts,proto3" json:"external_service_costs,omitempty"`
	// Output only. BI Engine specific Statistics.
	BiEngineStatistics *BiEngineStatistics `protobuf:"bytes,29,opt,name=bi_engine_statistics,json=biEngineStatistics,proto3" json:"bi_engine_statistics,omitempty"`
	// Output only. Statistics for a LOAD query.
	LoadQueryStatistics *LoadQueryStatistics `protobuf:"bytes,33,opt,name=load_query_statistics,json=loadQueryStatistics,proto3" json:"load_query_statistics,omitempty"`
	// Output only. Referenced table for DCL statement.
	DclTargetTable *TableReference `protobuf:"bytes,34,opt,name=dcl_target_table,json=dclTargetTable,proto3" json:"dcl_target_table,omitempty"`
	// Output only. Referenced view for DCL statement.
	DclTargetView *TableReference `protobuf:"bytes,35,opt,name=dcl_target_view,json=dclTargetView,proto3" json:"dcl_target_view,omitempty"`
	// Output only. Referenced dataset for DCL statement.
	DclTargetDataset *DatasetReference `protobuf:"bytes,36,opt,name=dcl_target_dataset,json=dclTargetDataset,proto3" json:"dcl_target_dataset,omitempty"`
	// Output only. Search query specific statistics.
	SearchStatistics *SearchStatistics `protobuf:"bytes,37,opt,name=search_statistics,json=searchStatistics,proto3" json:"search_statistics,omitempty"`
	// Output only. Vector Search query specific statistics.
	VectorSearchStatistics *VectorSearchStatistics `protobuf:"bytes,44,opt,name=vector_search_statistics,json=vectorSearchStatistics,proto3" json:"vector_search_statistics,omitempty"`
	// Output only. Performance insights.
	PerformanceInsights *PerformanceInsights `protobuf:"bytes,38,opt,name=performance_insights,json=performanceInsights,proto3" json:"performance_insights,omitempty"`
	// Output only. Query optimization information for a QUERY job.
	QueryInfo *QueryInfo `protobuf:"bytes,39,opt,name=query_info,json=queryInfo,proto3" json:"query_info,omitempty"`
	// Output only. Statistics of a Spark procedure job.
	SparkStatistics *SparkStatistics `protobuf:"bytes,40,opt,name=spark_statistics,json=sparkStatistics,proto3" json:"spark_statistics,omitempty"`
	// Output only. Total bytes transferred for cross-cloud queries such as Cross
	// Cloud Transfer and CREATE TABLE AS SELECT (CTAS).
	TransferredBytes *wrapperspb.Int64Value `protobuf:"bytes,41,opt,name=transferred_bytes,json=transferredBytes,proto3" json:"transferred_bytes,omitempty"`
	// Output only. Statistics of materialized views of a query job.
	MaterializedViewStatistics *MaterializedViewStatistics `protobuf:"bytes,42,opt,name=materialized_view_statistics,json=materializedViewStatistics,proto3" json:"materialized_view_statistics,omitempty"`
	// Output only. Statistics of metadata cache usage in a query for BigLake
	// tables.
	MetadataCacheStatistics *MetadataCacheStatistics `protobuf:"bytes,43,opt,name=metadata_cache_statistics,json=metadataCacheStatistics,proto3" json:"metadata_cache_statistics,omitempty"`
}

func (x *JobStatistics2) Reset() {
	*x = JobStatistics2{}
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobStatistics2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobStatistics2) ProtoMessage() {}

func (x *JobStatistics2) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobStatistics2.ProtoReflect.Descriptor instead.
func (*JobStatistics2) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_stats_proto_rawDescGZIP(), []int{13}
}

func (x *JobStatistics2) GetQueryPlan() []*ExplainQueryStage {
	if x != nil {
		return x.QueryPlan
	}
	return nil
}

func (x *JobStatistics2) GetEstimatedBytesProcessed() *wrapperspb.Int64Value {
	if x != nil {
		return x.EstimatedBytesProcessed
	}
	return nil
}

func (x *JobStatistics2) GetTimeline() []*QueryTimelineSample {
	if x != nil {
		return x.Timeline
	}
	return nil
}

func (x *JobStatistics2) GetTotalPartitionsProcessed() *wrapperspb.Int64Value {
	if x != nil {
		return x.TotalPartitionsProcessed
	}
	return nil
}

func (x *JobStatistics2) GetTotalBytesProcessed() *wrapperspb.Int64Value {
	if x != nil {
		return x.TotalBytesProcessed
	}
	return nil
}

func (x *JobStatistics2) GetTotalBytesProcessedAccuracy() string {
	if x != nil {
		return x.TotalBytesProcessedAccuracy
	}
	return ""
}

func (x *JobStatistics2) GetTotalBytesBilled() *wrapperspb.Int64Value {
	if x != nil {
		return x.TotalBytesBilled
	}
	return nil
}

func (x *JobStatistics2) GetBillingTier() *wrapperspb.Int32Value {
	if x != nil {
		return x.BillingTier
	}
	return nil
}

func (x *JobStatistics2) GetTotalSlotMs() *wrapperspb.Int64Value {
	if x != nil {
		return x.TotalSlotMs
	}
	return nil
}

func (x *JobStatistics2) GetCacheHit() *wrapperspb.BoolValue {
	if x != nil {
		return x.CacheHit
	}
	return nil
}

func (x *JobStatistics2) GetReferencedTables() []*TableReference {
	if x != nil {
		return x.ReferencedTables
	}
	return nil
}

func (x *JobStatistics2) GetReferencedRoutines() []*RoutineReference {
	if x != nil {
		return x.ReferencedRoutines
	}
	return nil
}

func (x *JobStatistics2) GetSchema() *TableSchema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *JobStatistics2) GetNumDmlAffectedRows() *wrapperspb.Int64Value {
	if x != nil {
		return x.NumDmlAffectedRows
	}
	return nil
}

func (x *JobStatistics2) GetDmlStats() *DmlStats {
	if x != nil {
		return x.DmlStats
	}
	return nil
}

func (x *JobStatistics2) GetUndeclaredQueryParameters() []*QueryParameter {
	if x != nil {
		return x.UndeclaredQueryParameters
	}
	return nil
}

func (x *JobStatistics2) GetStatementType() string {
	if x != nil {
		return x.StatementType
	}
	return ""
}

func (x *JobStatistics2) GetDdlOperationPerformed() string {
	if x != nil {
		return x.DdlOperationPerformed
	}
	return ""
}

func (x *JobStatistics2) GetDdlTargetTable() *TableReference {
	if x != nil {
		return x.DdlTargetTable
	}
	return nil
}

func (x *JobStatistics2) GetDdlDestinationTable() *TableReference {
	if x != nil {
		return x.DdlDestinationTable
	}
	return nil
}

func (x *JobStatistics2) GetDdlTargetRowAccessPolicy() *RowAccessPolicyReference {
	if x != nil {
		return x.DdlTargetRowAccessPolicy
	}
	return nil
}

func (x *JobStatistics2) GetDdlAffectedRowAccessPolicyCount() *wrapperspb.Int64Value {
	if x != nil {
		return x.DdlAffectedRowAccessPolicyCount
	}
	return nil
}

func (x *JobStatistics2) GetDdlTargetRoutine() *RoutineReference {
	if x != nil {
		return x.DdlTargetRoutine
	}
	return nil
}

func (x *JobStatistics2) GetDdlTargetDataset() *DatasetReference {
	if x != nil {
		return x.DdlTargetDataset
	}
	return nil
}

func (x *JobStatistics2) GetMlStatistics() *MlStatistics {
	if x != nil {
		return x.MlStatistics
	}
	return nil
}

func (x *JobStatistics2) GetExportDataStatistics() *ExportDataStatistics {
	if x != nil {
		return x.ExportDataStatistics
	}
	return nil
}

func (x *JobStatistics2) GetExternalServiceCosts() []*ExternalServiceCost {
	if x != nil {
		return x.ExternalServiceCosts
	}
	return nil
}

func (x *JobStatistics2) GetBiEngineStatistics() *BiEngineStatistics {
	if x != nil {
		return x.BiEngineStatistics
	}
	return nil
}

func (x *JobStatistics2) GetLoadQueryStatistics() *LoadQueryStatistics {
	if x != nil {
		return x.LoadQueryStatistics
	}
	return nil
}

func (x *JobStatistics2) GetDclTargetTable() *TableReference {
	if x != nil {
		return x.DclTargetTable
	}
	return nil
}

func (x *JobStatistics2) GetDclTargetView() *TableReference {
	if x != nil {
		return x.DclTargetView
	}
	return nil
}

func (x *JobStatistics2) GetDclTargetDataset() *DatasetReference {
	if x != nil {
		return x.DclTargetDataset
	}
	return nil
}

func (x *JobStatistics2) GetSearchStatistics() *SearchStatistics {
	if x != nil {
		return x.SearchStatistics
	}
	return nil
}

func (x *JobStatistics2) GetVectorSearchStatistics() *VectorSearchStatistics {
	if x != nil {
		return x.VectorSearchStatistics
	}
	return nil
}

func (x *JobStatistics2) GetPerformanceInsights() *PerformanceInsights {
	if x != nil {
		return x.PerformanceInsights
	}
	return nil
}

func (x *JobStatistics2) GetQueryInfo() *QueryInfo {
	if x != nil {
		return x.QueryInfo
	}
	return nil
}

func (x *JobStatistics2) GetSparkStatistics() *SparkStatistics {
	if x != nil {
		return x.SparkStatistics
	}
	return nil
}

func (x *JobStatistics2) GetTransferredBytes() *wrapperspb.Int64Value {
	if x != nil {
		return x.TransferredBytes
	}
	return nil
}

func (x *JobStatistics2) GetMaterializedViewStatistics() *MaterializedViewStatistics {
	if x != nil {
		return x.MaterializedViewStatistics
	}
	return nil
}

func (x *JobStatistics2) GetMetadataCacheStatistics() *MetadataCacheStatistics {
	if x != nil {
		return x.MetadataCacheStatistics
	}
	return nil
}

// Statistics for a load job.
type JobStatistics3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Number of source files in a load job.
	InputFiles *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=input_files,json=inputFiles,proto3" json:"input_files,omitempty"`
	// Output only. Number of bytes of source data in a load job.
	InputFileBytes *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=input_file_bytes,json=inputFileBytes,proto3" json:"input_file_bytes,omitempty"`
	// Output only. Number of rows imported in a load job.
	// Note that while an import job is in the running state, this
	// value may change.
	OutputRows *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=output_rows,json=outputRows,proto3" json:"output_rows,omitempty"`
	// Output only. Size of the loaded data in bytes. Note
	// that while a load job is in the running state, this value may change.
	OutputBytes *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=output_bytes,json=outputBytes,proto3" json:"output_bytes,omitempty"`
	// Output only. The number of bad records encountered. Note that if the job
	// has failed because of more bad records encountered than the maximum
	// allowed in the load job configuration, then this number can be less than
	// the total number of bad records present in the input data.
	BadRecords *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=bad_records,json=badRecords,proto3" json:"bad_records,omitempty"`
	// Output only. Describes a timeline of job execution.
	Timeline []*QueryTimelineSample `protobuf:"bytes,7,rep,name=timeline,proto3" json:"timeline,omitempty"`
}

func (x *JobStatistics3) Reset() {
	*x = JobStatistics3{}
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobStatistics3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobStatistics3) ProtoMessage() {}

func (x *JobStatistics3) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobStatistics3.ProtoReflect.Descriptor instead.
func (*JobStatistics3) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_stats_proto_rawDescGZIP(), []int{14}
}

func (x *JobStatistics3) GetInputFiles() *wrapperspb.Int64Value {
	if x != nil {
		return x.InputFiles
	}
	return nil
}

func (x *JobStatistics3) GetInputFileBytes() *wrapperspb.Int64Value {
	if x != nil {
		return x.InputFileBytes
	}
	return nil
}

func (x *JobStatistics3) GetOutputRows() *wrapperspb.Int64Value {
	if x != nil {
		return x.OutputRows
	}
	return nil
}

func (x *JobStatistics3) GetOutputBytes() *wrapperspb.Int64Value {
	if x != nil {
		return x.OutputBytes
	}
	return nil
}

func (x *JobStatistics3) GetBadRecords() *wrapperspb.Int64Value {
	if x != nil {
		return x.BadRecords
	}
	return nil
}

func (x *JobStatistics3) GetTimeline() []*QueryTimelineSample {
	if x != nil {
		return x.Timeline
	}
	return nil
}

// Statistics for an extract job.
type JobStatistics4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Number of files per destination URI or URI pattern
	// specified in the extract configuration. These values will be in the same
	// order as the URIs specified in the 'destinationUris' field.
	DestinationUriFileCounts []int64 `protobuf:"varint,1,rep,packed,name=destination_uri_file_counts,json=destinationUriFileCounts,proto3" json:"destination_uri_file_counts,omitempty"`
	// Output only. Number of user bytes extracted into the result. This is the
	// byte count as computed by BigQuery for billing purposes
	// and doesn't have any relationship with the number of actual
	// result bytes extracted in the desired format.
	InputBytes *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=input_bytes,json=inputBytes,proto3" json:"input_bytes,omitempty"`
	// Output only. Describes a timeline of job execution.
	Timeline []*QueryTimelineSample `protobuf:"bytes,3,rep,name=timeline,proto3" json:"timeline,omitempty"`
}

func (x *JobStatistics4) Reset() {
	*x = JobStatistics4{}
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobStatistics4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobStatistics4) ProtoMessage() {}

func (x *JobStatistics4) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobStatistics4.ProtoReflect.Descriptor instead.
func (*JobStatistics4) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_stats_proto_rawDescGZIP(), []int{15}
}

func (x *JobStatistics4) GetDestinationUriFileCounts() []int64 {
	if x != nil {
		return x.DestinationUriFileCounts
	}
	return nil
}

func (x *JobStatistics4) GetInputBytes() *wrapperspb.Int64Value {
	if x != nil {
		return x.InputBytes
	}
	return nil
}

func (x *JobStatistics4) GetTimeline() []*QueryTimelineSample {
	if x != nil {
		return x.Timeline
	}
	return nil
}

// Statistics for a copy job.
type CopyJobStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Number of rows copied to the destination table.
	CopiedRows *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=copied_rows,json=copiedRows,proto3" json:"copied_rows,omitempty"`
	// Output only. Number of logical bytes copied to the destination table.
	CopiedLogicalBytes *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=copied_logical_bytes,json=copiedLogicalBytes,proto3" json:"copied_logical_bytes,omitempty"`
}

func (x *CopyJobStatistics) Reset() {
	*x = CopyJobStatistics{}
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CopyJobStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyJobStatistics) ProtoMessage() {}

func (x *CopyJobStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyJobStatistics.ProtoReflect.Descriptor instead.
func (*CopyJobStatistics) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_stats_proto_rawDescGZIP(), []int{16}
}

func (x *CopyJobStatistics) GetCopiedRows() *wrapperspb.Int64Value {
	if x != nil {
		return x.CopiedRows
	}
	return nil
}

func (x *CopyJobStatistics) GetCopiedLogicalBytes() *wrapperspb.Int64Value {
	if x != nil {
		return x.CopiedLogicalBytes
	}
	return nil
}

// Job statistics specific to a BigQuery ML training job.
type MlStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Maximum number of iterations specified as max_iterations in
	// the 'CREATE MODEL' query. The actual number of iterations may be less than
	// this number due to early stop.
	MaxIterations int64 `protobuf:"varint,1,opt,name=max_iterations,json=maxIterations,proto3" json:"max_iterations,omitempty"`
	// Results for all completed iterations.
	// Empty for [hyperparameter tuning
	// jobs](https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview).
	IterationResults []*Model_TrainingRun_IterationResult `protobuf:"bytes,2,rep,name=iteration_results,json=iterationResults,proto3" json:"iteration_results,omitempty"`
	// Output only. The type of the model that is being trained.
	ModelType Model_ModelType `protobuf:"varint,3,opt,name=model_type,json=modelType,proto3,enum=google.cloud.bigquery.v2.Model_ModelType" json:"model_type,omitempty"`
	// Output only. Training type of the job.
	TrainingType MlStatistics_TrainingType `protobuf:"varint,4,opt,name=training_type,json=trainingType,proto3,enum=google.cloud.bigquery.v2.MlStatistics_TrainingType" json:"training_type,omitempty"`
	// Output only. Trials of a [hyperparameter tuning
	// job](https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview)
	// sorted by trial_id.
	HparamTrials []*Model_HparamTuningTrial `protobuf:"bytes,5,rep,name=hparam_trials,json=hparamTrials,proto3" json:"hparam_trials,omitempty"`
}

func (x *MlStatistics) Reset() {
	*x = MlStatistics{}
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MlStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MlStatistics) ProtoMessage() {}

func (x *MlStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MlStatistics.ProtoReflect.Descriptor instead.
func (*MlStatistics) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_stats_proto_rawDescGZIP(), []int{17}
}

func (x *MlStatistics) GetMaxIterations() int64 {
	if x != nil {
		return x.MaxIterations
	}
	return 0
}

func (x *MlStatistics) GetIterationResults() []*Model_TrainingRun_IterationResult {
	if x != nil {
		return x.IterationResults
	}
	return nil
}

func (x *MlStatistics) GetModelType() Model_ModelType {
	if x != nil {
		return x.ModelType
	}
	return Model_MODEL_TYPE_UNSPECIFIED
}

func (x *MlStatistics) GetTrainingType() MlStatistics_TrainingType {
	if x != nil {
		return x.TrainingType
	}
	return MlStatistics_TRAINING_TYPE_UNSPECIFIED
}

func (x *MlStatistics) GetHparamTrials() []*Model_HparamTuningTrial {
	if x != nil {
		return x.HparamTrials
	}
	return nil
}

// Job statistics specific to the child job of a script.
type ScriptStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether this child job was a statement or expression.
	EvaluationKind ScriptStatistics_EvaluationKind `protobuf:"varint,1,opt,name=evaluation_kind,json=evaluationKind,proto3,enum=google.cloud.bigquery.v2.ScriptStatistics_EvaluationKind" json:"evaluation_kind,omitempty"`
	// Stack trace showing the line/column/procedure name of each frame on the
	// stack at the point where the current evaluation happened. The leaf frame
	// is first, the primary script is last. Never empty.
	StackFrames []*ScriptStatistics_ScriptStackFrame `protobuf:"bytes,2,rep,name=stack_frames,json=stackFrames,proto3" json:"stack_frames,omitempty"`
}

func (x *ScriptStatistics) Reset() {
	*x = ScriptStatistics{}
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScriptStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScriptStatistics) ProtoMessage() {}

func (x *ScriptStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScriptStatistics.ProtoReflect.Descriptor instead.
func (*ScriptStatistics) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_stats_proto_rawDescGZIP(), []int{18}
}

func (x *ScriptStatistics) GetEvaluationKind() ScriptStatistics_EvaluationKind {
	if x != nil {
		return x.EvaluationKind
	}
	return ScriptStatistics_EVALUATION_KIND_UNSPECIFIED
}

func (x *ScriptStatistics) GetStackFrames() []*ScriptStatistics_ScriptStackFrame {
	if x != nil {
		return x.StackFrames
	}
	return nil
}

// Statistics for row-level security.
type RowLevelSecurityStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether any accessed data was protected by row access policies.
	RowLevelSecurityApplied bool `protobuf:"varint,1,opt,name=row_level_security_applied,json=rowLevelSecurityApplied,proto3" json:"row_level_security_applied,omitempty"`
}

func (x *RowLevelSecurityStatistics) Reset() {
	*x = RowLevelSecurityStatistics{}
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RowLevelSecurityStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowLevelSecurityStatistics) ProtoMessage() {}

func (x *RowLevelSecurityStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowLevelSecurityStatistics.ProtoReflect.Descriptor instead.
func (*RowLevelSecurityStatistics) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_stats_proto_rawDescGZIP(), []int{19}
}

func (x *RowLevelSecurityStatistics) GetRowLevelSecurityApplied() bool {
	if x != nil {
		return x.RowLevelSecurityApplied
	}
	return false
}

// Statistics for data-masking.
type DataMaskingStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether any accessed data was protected by the data masking.
	DataMaskingApplied bool `protobuf:"varint,1,opt,name=data_masking_applied,json=dataMaskingApplied,proto3" json:"data_masking_applied,omitempty"`
}

func (x *DataMaskingStatistics) Reset() {
	*x = DataMaskingStatistics{}
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataMaskingStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataMaskingStatistics) ProtoMessage() {}

func (x *DataMaskingStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataMaskingStatistics.ProtoReflect.Descriptor instead.
func (*DataMaskingStatistics) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_stats_proto_rawDescGZIP(), []int{20}
}

func (x *DataMaskingStatistics) GetDataMaskingApplied() bool {
	if x != nil {
		return x.DataMaskingApplied
	}
	return false
}

// Statistics for a single job execution.
type JobStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Creation time of this job, in milliseconds since the epoch.
	// This field will be present on all jobs.
	CreationTime int64 `protobuf:"varint,1,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	// Output only. Start time of this job, in milliseconds since the epoch.
	// This field will be present when the job transitions from the PENDING state
	// to either RUNNING or DONE.
	StartTime int64 `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Output only. End time of this job, in milliseconds since the epoch. This
	// field will be present whenever a job is in the DONE state.
	EndTime int64 `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Output only. Total bytes processed for the job.
	TotalBytesProcessed *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=total_bytes_processed,json=totalBytesProcessed,proto3" json:"total_bytes_processed,omitempty"`
	// Output only. [TrustedTester] Job progress (0.0 -> 1.0) for LOAD and
	// EXTRACT jobs.
	CompletionRatio *wrapperspb.DoubleValue `protobuf:"bytes,5,opt,name=completion_ratio,json=completionRatio,proto3" json:"completion_ratio,omitempty"`
	// Output only. Quotas which delayed this job's start time.
	QuotaDeferments []string `protobuf:"bytes,9,rep,name=quota_deferments,json=quotaDeferments,proto3" json:"quota_deferments,omitempty"`
	// Output only. Statistics for a query job.
	Query *JobStatistics2 `protobuf:"bytes,6,opt,name=query,proto3" json:"query,omitempty"`
	// Output only. Statistics for a load job.
	Load *JobStatistics3 `protobuf:"bytes,7,opt,name=load,proto3" json:"load,omitempty"`
	// Output only. Statistics for an extract job.
	Extract *JobStatistics4 `protobuf:"bytes,8,opt,name=extract,proto3" json:"extract,omitempty"`
	// Output only. Statistics for a copy job.
	Copy *CopyJobStatistics `protobuf:"bytes,21,opt,name=copy,proto3" json:"copy,omitempty"`
	// Output only. Slot-milliseconds for the job.
	TotalSlotMs *wrapperspb.Int64Value `protobuf:"bytes,10,opt,name=total_slot_ms,json=totalSlotMs,proto3" json:"total_slot_ms,omitempty"`
	// Output only. Name of the primary reservation assigned to this job. Note
	// that this could be different than reservations reported in the reservation
	// usage field if parent reservations were used to execute this job.
	ReservationId string `protobuf:"bytes,15,opt,name=reservation_id,proto3" json:"reservation_id,omitempty"`
	// Output only. Number of child jobs executed.
	NumChildJobs int64 `protobuf:"varint,12,opt,name=num_child_jobs,json=numChildJobs,proto3" json:"num_child_jobs,omitempty"`
	// Output only. If this is a child job, specifies the job ID of the parent.
	ParentJobId string `protobuf:"bytes,13,opt,name=parent_job_id,json=parentJobId,proto3" json:"parent_job_id,omitempty"`
	// Output only. If this a child job of a script, specifies information about
	// the context of this job within the script.
	ScriptStatistics *ScriptStatistics `protobuf:"bytes,14,opt,name=script_statistics,json=scriptStatistics,proto3" json:"script_statistics,omitempty"`
	// Output only. Statistics for row-level security. Present only for query and
	// extract jobs.
	RowLevelSecurityStatistics *RowLevelSecurityStatistics `protobuf:"bytes,16,opt,name=row_level_security_statistics,json=rowLevelSecurityStatistics,proto3" json:"row_level_security_statistics,omitempty"`
	// Output only. Statistics for data-masking. Present only for query and
	// extract jobs.
	DataMaskingStatistics *DataMaskingStatistics `protobuf:"bytes,20,opt,name=data_masking_statistics,json=dataMaskingStatistics,proto3" json:"data_masking_statistics,omitempty"`
	// Output only. [Alpha] Information of the multi-statement transaction if this
	// job is part of one.
	//
	// This property is only expected on a child job or a job that is in a
	// session. A script parent job is not part of the transaction started in the
	// script.
	TransactionInfo *JobStatistics_TransactionInfo `protobuf:"bytes,17,opt,name=transaction_info,json=transactionInfo,proto3" json:"transaction_info,omitempty"`
	// Output only. Information of the session if this job is part of one.
	SessionInfo *SessionInfo `protobuf:"bytes,18,opt,name=session_info,json=sessionInfo,proto3" json:"session_info,omitempty"`
	// Output only. The duration in milliseconds of the execution of the final
	// attempt of this job, as BigQuery may internally re-attempt to execute the
	// job.
	FinalExecutionDurationMs int64 `protobuf:"varint,22,opt,name=final_execution_duration_ms,json=finalExecutionDurationMs,proto3" json:"final_execution_duration_ms,omitempty"`
	// Output only. Name of edition corresponding to the reservation for this job
	// at the time of this update.
	Edition ReservationEdition `protobuf:"varint,24,opt,name=edition,proto3,enum=google.cloud.bigquery.v2.ReservationEdition" json:"edition,omitempty"`
}

func (x *JobStatistics) Reset() {
	*x = JobStatistics{}
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobStatistics) ProtoMessage() {}

func (x *JobStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobStatistics.ProtoReflect.Descriptor instead.
func (*JobStatistics) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_stats_proto_rawDescGZIP(), []int{21}
}

func (x *JobStatistics) GetCreationTime() int64 {
	if x != nil {
		return x.CreationTime
	}
	return 0
}

func (x *JobStatistics) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *JobStatistics) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *JobStatistics) GetTotalBytesProcessed() *wrapperspb.Int64Value {
	if x != nil {
		return x.TotalBytesProcessed
	}
	return nil
}

func (x *JobStatistics) GetCompletionRatio() *wrapperspb.DoubleValue {
	if x != nil {
		return x.CompletionRatio
	}
	return nil
}

func (x *JobStatistics) GetQuotaDeferments() []string {
	if x != nil {
		return x.QuotaDeferments
	}
	return nil
}

func (x *JobStatistics) GetQuery() *JobStatistics2 {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *JobStatistics) GetLoad() *JobStatistics3 {
	if x != nil {
		return x.Load
	}
	return nil
}

func (x *JobStatistics) GetExtract() *JobStatistics4 {
	if x != nil {
		return x.Extract
	}
	return nil
}

func (x *JobStatistics) GetCopy() *CopyJobStatistics {
	if x != nil {
		return x.Copy
	}
	return nil
}

func (x *JobStatistics) GetTotalSlotMs() *wrapperspb.Int64Value {
	if x != nil {
		return x.TotalSlotMs
	}
	return nil
}

func (x *JobStatistics) GetReservationId() string {
	if x != nil {
		return x.ReservationId
	}
	return ""
}

func (x *JobStatistics) GetNumChildJobs() int64 {
	if x != nil {
		return x.NumChildJobs
	}
	return 0
}

func (x *JobStatistics) GetParentJobId() string {
	if x != nil {
		return x.ParentJobId
	}
	return ""
}

func (x *JobStatistics) GetScriptStatistics() *ScriptStatistics {
	if x != nil {
		return x.ScriptStatistics
	}
	return nil
}

func (x *JobStatistics) GetRowLevelSecurityStatistics() *RowLevelSecurityStatistics {
	if x != nil {
		return x.RowLevelSecurityStatistics
	}
	return nil
}

func (x *JobStatistics) GetDataMaskingStatistics() *DataMaskingStatistics {
	if x != nil {
		return x.DataMaskingStatistics
	}
	return nil
}

func (x *JobStatistics) GetTransactionInfo() *JobStatistics_TransactionInfo {
	if x != nil {
		return x.TransactionInfo
	}
	return nil
}

func (x *JobStatistics) GetSessionInfo() *SessionInfo {
	if x != nil {
		return x.SessionInfo
	}
	return nil
}

func (x *JobStatistics) GetFinalExecutionDurationMs() int64 {
	if x != nil {
		return x.FinalExecutionDurationMs
	}
	return 0
}

func (x *JobStatistics) GetEdition() ReservationEdition {
	if x != nil {
		return x.Edition
	}
	return ReservationEdition_RESERVATION_EDITION_UNSPECIFIED
}

// Detailed statistics for DML statements
type DmlStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Number of inserted Rows. Populated by DML INSERT and MERGE
	// statements
	InsertedRowCount *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=inserted_row_count,json=insertedRowCount,proto3" json:"inserted_row_count,omitempty"`
	// Output only. Number of deleted Rows. populated by DML DELETE, MERGE and
	// TRUNCATE statements.
	DeletedRowCount *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=deleted_row_count,json=deletedRowCount,proto3" json:"deleted_row_count,omitempty"`
	// Output only. Number of updated Rows. Populated by DML UPDATE and MERGE
	// statements.
	UpdatedRowCount *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=updated_row_count,json=updatedRowCount,proto3" json:"updated_row_count,omitempty"`
}

func (x *DmlStats) Reset() {
	*x = DmlStats{}
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DmlStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DmlStats) ProtoMessage() {}

func (x *DmlStats) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DmlStats.ProtoReflect.Descriptor instead.
func (*DmlStats) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_stats_proto_rawDescGZIP(), []int{22}
}

func (x *DmlStats) GetInsertedRowCount() *wrapperspb.Int64Value {
	if x != nil {
		return x.InsertedRowCount
	}
	return nil
}

func (x *DmlStats) GetDeletedRowCount() *wrapperspb.Int64Value {
	if x != nil {
		return x.DeletedRowCount
	}
	return nil
}

func (x *DmlStats) GetUpdatedRowCount() *wrapperspb.Int64Value {
	if x != nil {
		return x.UpdatedRowCount
	}
	return nil
}

// Performance insights for the job.
type PerformanceInsights struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Average execution ms of previous runs. Indicates the job ran
	// slow compared to previous executions. To find previous executions, use
	// INFORMATION_SCHEMA tables and filter jobs with same query hash.
	AvgPreviousExecutionMs int64 `protobuf:"varint,1,opt,name=avg_previous_execution_ms,json=avgPreviousExecutionMs,proto3" json:"avg_previous_execution_ms,omitempty"`
	// Output only. Standalone query stage performance insights, for exploring
	// potential improvements.
	StagePerformanceStandaloneInsights []*StagePerformanceStandaloneInsight `protobuf:"bytes,2,rep,name=stage_performance_standalone_insights,json=stagePerformanceStandaloneInsights,proto3" json:"stage_performance_standalone_insights,omitempty"`
	// Output only. Query stage performance insights compared to previous runs,
	// for diagnosing performance regression.
	StagePerformanceChangeInsights []*StagePerformanceChangeInsight `protobuf:"bytes,3,rep,name=stage_performance_change_insights,json=stagePerformanceChangeInsights,proto3" json:"stage_performance_change_insights,omitempty"`
}

func (x *PerformanceInsights) Reset() {
	*x = PerformanceInsights{}
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PerformanceInsights) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformanceInsights) ProtoMessage() {}

func (x *PerformanceInsights) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformanceInsights.ProtoReflect.Descriptor instead.
func (*PerformanceInsights) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_stats_proto_rawDescGZIP(), []int{23}
}

func (x *PerformanceInsights) GetAvgPreviousExecutionMs() int64 {
	if x != nil {
		return x.AvgPreviousExecutionMs
	}
	return 0
}

func (x *PerformanceInsights) GetStagePerformanceStandaloneInsights() []*StagePerformanceStandaloneInsight {
	if x != nil {
		return x.StagePerformanceStandaloneInsights
	}
	return nil
}

func (x *PerformanceInsights) GetStagePerformanceChangeInsights() []*StagePerformanceChangeInsight {
	if x != nil {
		return x.StagePerformanceChangeInsights
	}
	return nil
}

// Performance insights compared to the previous executions for a specific
// stage.
type StagePerformanceChangeInsight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The stage id that the insight mapped to.
	StageId int64 `protobuf:"varint,1,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	// Output only. Input data change insight of the query stage.
	InputDataChange *InputDataChange `protobuf:"bytes,2,opt,name=input_data_change,json=inputDataChange,proto3,oneof" json:"input_data_change,omitempty"`
}

func (x *StagePerformanceChangeInsight) Reset() {
	*x = StagePerformanceChangeInsight{}
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StagePerformanceChangeInsight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StagePerformanceChangeInsight) ProtoMessage() {}

func (x *StagePerformanceChangeInsight) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StagePerformanceChangeInsight.ProtoReflect.Descriptor instead.
func (*StagePerformanceChangeInsight) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_stats_proto_rawDescGZIP(), []int{24}
}

func (x *StagePerformanceChangeInsight) GetStageId() int64 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *StagePerformanceChangeInsight) GetInputDataChange() *InputDataChange {
	if x != nil {
		return x.InputDataChange
	}
	return nil
}

// Details about the input data change insight.
type InputDataChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Records read difference percentage compared to a previous run.
	RecordsReadDiffPercentage float32 `protobuf:"fixed32,1,opt,name=records_read_diff_percentage,json=recordsReadDiffPercentage,proto3" json:"records_read_diff_percentage,omitempty"`
}

func (x *InputDataChange) Reset() {
	*x = InputDataChange{}
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InputDataChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputDataChange) ProtoMessage() {}

func (x *InputDataChange) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputDataChange.ProtoReflect.Descriptor instead.
func (*InputDataChange) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_stats_proto_rawDescGZIP(), []int{25}
}

func (x *InputDataChange) GetRecordsReadDiffPercentage() float32 {
	if x != nil {
		return x.RecordsReadDiffPercentage
	}
	return 0
}

// Standalone performance insights for a specific stage.
type StagePerformanceStandaloneInsight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The stage id that the insight mapped to.
	StageId int64 `protobuf:"varint,1,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	// Output only. True if the stage has a slot contention issue.
	SlotContention *bool `protobuf:"varint,2,opt,name=slot_contention,json=slotContention,proto3,oneof" json:"slot_contention,omitempty"`
	// Output only. True if the stage has insufficient shuffle quota.
	InsufficientShuffleQuota *bool `protobuf:"varint,3,opt,name=insufficient_shuffle_quota,json=insufficientShuffleQuota,proto3,oneof" json:"insufficient_shuffle_quota,omitempty"`
	// Output only. If present, the stage had the following reasons for being
	// disqualified from BI Engine execution.
	BiEngineReasons []*BiEngineReason `protobuf:"bytes,5,rep,name=bi_engine_reasons,json=biEngineReasons,proto3" json:"bi_engine_reasons,omitempty"`
	// Output only. High cardinality joins in the stage.
	HighCardinalityJoins []*HighCardinalityJoin `protobuf:"bytes,6,rep,name=high_cardinality_joins,json=highCardinalityJoins,proto3" json:"high_cardinality_joins,omitempty"`
	// Output only. Partition skew in the stage.
	PartitionSkew *PartitionSkew `protobuf:"bytes,7,opt,name=partition_skew,json=partitionSkew,proto3,oneof" json:"partition_skew,omitempty"`
}

func (x *StagePerformanceStandaloneInsight) Reset() {
	*x = StagePerformanceStandaloneInsight{}
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StagePerformanceStandaloneInsight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StagePerformanceStandaloneInsight) ProtoMessage() {}

func (x *StagePerformanceStandaloneInsight) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StagePerformanceStandaloneInsight.ProtoReflect.Descriptor instead.
func (*StagePerformanceStandaloneInsight) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_stats_proto_rawDescGZIP(), []int{26}
}

func (x *StagePerformanceStandaloneInsight) GetStageId() int64 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *StagePerformanceStandaloneInsight) GetSlotContention() bool {
	if x != nil && x.SlotContention != nil {
		return *x.SlotContention
	}
	return false
}

func (x *StagePerformanceStandaloneInsight) GetInsufficientShuffleQuota() bool {
	if x != nil && x.InsufficientShuffleQuota != nil {
		return *x.InsufficientShuffleQuota
	}
	return false
}

func (x *StagePerformanceStandaloneInsight) GetBiEngineReasons() []*BiEngineReason {
	if x != nil {
		return x.BiEngineReasons
	}
	return nil
}

func (x *StagePerformanceStandaloneInsight) GetHighCardinalityJoins() []*HighCardinalityJoin {
	if x != nil {
		return x.HighCardinalityJoins
	}
	return nil
}

func (x *StagePerformanceStandaloneInsight) GetPartitionSkew() *PartitionSkew {
	if x != nil {
		return x.PartitionSkew
	}
	return nil
}

// High cardinality join detailed information.
type HighCardinalityJoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Count of left input rows.
	LeftRows int64 `protobuf:"varint,1,opt,name=left_rows,json=leftRows,proto3" json:"left_rows,omitempty"`
	// Output only. Count of right input rows.
	RightRows int64 `protobuf:"varint,2,opt,name=right_rows,json=rightRows,proto3" json:"right_rows,omitempty"`
	// Output only. Count of the output rows.
	OutputRows int64 `protobuf:"varint,3,opt,name=output_rows,json=outputRows,proto3" json:"output_rows,omitempty"`
	// Output only. The index of the join operator in the ExplainQueryStep lists.
	StepIndex int32 `protobuf:"varint,4,opt,name=step_index,json=stepIndex,proto3" json:"step_index,omitempty"`
}

func (x *HighCardinalityJoin) Reset() {
	*x = HighCardinalityJoin{}
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HighCardinalityJoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HighCardinalityJoin) ProtoMessage() {}

func (x *HighCardinalityJoin) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HighCardinalityJoin.ProtoReflect.Descriptor instead.
func (*HighCardinalityJoin) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_stats_proto_rawDescGZIP(), []int{27}
}

func (x *HighCardinalityJoin) GetLeftRows() int64 {
	if x != nil {
		return x.LeftRows
	}
	return 0
}

func (x *HighCardinalityJoin) GetRightRows() int64 {
	if x != nil {
		return x.RightRows
	}
	return 0
}

func (x *HighCardinalityJoin) GetOutputRows() int64 {
	if x != nil {
		return x.OutputRows
	}
	return 0
}

func (x *HighCardinalityJoin) GetStepIndex() int32 {
	if x != nil {
		return x.StepIndex
	}
	return 0
}

// Partition skew detailed information.
type PartitionSkew struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Source stages which produce skewed data.
	SkewSources []*PartitionSkew_SkewSource `protobuf:"bytes,1,rep,name=skew_sources,json=skewSources,proto3" json:"skew_sources,omitempty"`
}

func (x *PartitionSkew) Reset() {
	*x = PartitionSkew{}
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartitionSkew) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionSkew) ProtoMessage() {}

func (x *PartitionSkew) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionSkew.ProtoReflect.Descriptor instead.
func (*PartitionSkew) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_stats_proto_rawDescGZIP(), []int{28}
}

func (x *PartitionSkew) GetSkewSources() []*PartitionSkew_SkewSource {
	if x != nil {
		return x.SkewSources
	}
	return nil
}

// Statistics for a BigSpark query.
// Populated as part of JobStatistics2
type SparkStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Spark job ID if a Spark job is created successfully.
	SparkJobId *string `protobuf:"bytes,1,opt,name=spark_job_id,json=sparkJobId,proto3,oneof" json:"spark_job_id,omitempty"`
	// Output only. Location where the Spark job is executed.
	// A location is selected by BigQueury for jobs configured to run in a
	// multi-region.
	SparkJobLocation *string `protobuf:"bytes,2,opt,name=spark_job_location,json=sparkJobLocation,proto3,oneof" json:"spark_job_location,omitempty"`
	// Output only. Endpoints returned from Dataproc.
	// Key list:
	//   - history_server_endpoint: A link to Spark job UI.
	Endpoints map[string]string `protobuf:"bytes,3,rep,name=endpoints,proto3" json:"endpoints,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Output only. Logging info is used to generate a link to Cloud Logging.
	LoggingInfo *SparkStatistics_LoggingInfo `protobuf:"bytes,4,opt,name=logging_info,json=loggingInfo,proto3,oneof" json:"logging_info,omitempty"`
	// Output only. The Cloud KMS encryption key that is used to protect the
	// resources created by the Spark job. If the Spark procedure uses the invoker
	// security mode, the Cloud KMS encryption key is either inferred from the
	// provided system variable,
	// `@@spark_proc_properties.kms_key_name`, or the default key of the BigQuery
	// job's project (if the CMEK organization policy is enforced). Otherwise, the
	// Cloud KMS key is either inferred from the Spark connection associated with
	// the procedure (if it is provided), or from the default key of the Spark
	// connection's project if the CMEK organization policy is enforced.
	//
	// Example:
	//
	// * `projects/[kms_project_id]/locations/[region]/keyRings/[key_region]/cryptoKeys/[key]`
	KmsKeyName *string `protobuf:"bytes,5,opt,name=kms_key_name,json=kmsKeyName,proto3,oneof" json:"kms_key_name,omitempty"`
	// Output only. The Google Cloud Storage bucket that is used as the default
	// file system by the Spark application. This field is only filled when the
	// Spark procedure uses the invoker security mode. The `gcsStagingBucket`
	// bucket is inferred from the `@@spark_proc_properties.staging_bucket` system
	// variable (if it is provided). Otherwise, BigQuery creates a default staging
	// bucket for the job and returns the bucket name in this field.
	//
	// Example:
	//
	// * `gs://[bucket_name]`
	GcsStagingBucket *string `protobuf:"bytes,6,opt,name=gcs_staging_bucket,json=gcsStagingBucket,proto3,oneof" json:"gcs_staging_bucket,omitempty"`
}

func (x *SparkStatistics) Reset() {
	*x = SparkStatistics{}
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SparkStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SparkStatistics) ProtoMessage() {}

func (x *SparkStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SparkStatistics.ProtoReflect.Descriptor instead.
func (*SparkStatistics) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_stats_proto_rawDescGZIP(), []int{29}
}

func (x *SparkStatistics) GetSparkJobId() string {
	if x != nil && x.SparkJobId != nil {
		return *x.SparkJobId
	}
	return ""
}

func (x *SparkStatistics) GetSparkJobLocation() string {
	if x != nil && x.SparkJobLocation != nil {
		return *x.SparkJobLocation
	}
	return ""
}

func (x *SparkStatistics) GetEndpoints() map[string]string {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *SparkStatistics) GetLoggingInfo() *SparkStatistics_LoggingInfo {
	if x != nil {
		return x.LoggingInfo
	}
	return nil
}

func (x *SparkStatistics) GetKmsKeyName() string {
	if x != nil && x.KmsKeyName != nil {
		return *x.KmsKeyName
	}
	return ""
}

func (x *SparkStatistics) GetGcsStagingBucket() string {
	if x != nil && x.GcsStagingBucket != nil {
		return *x.GcsStagingBucket
	}
	return ""
}

// Statistics of materialized views considered in a query job.
type MaterializedViewStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Materialized views considered for the query job. Only certain materialized
	// views are used. For a detailed list, see the child message.
	//
	// If many materialized views are considered, then the list might be
	// incomplete.
	MaterializedView []*MaterializedView `protobuf:"bytes,1,rep,name=materialized_view,json=materializedView,proto3" json:"materialized_view,omitempty"`
}

func (x *MaterializedViewStatistics) Reset() {
	*x = MaterializedViewStatistics{}
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MaterializedViewStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaterializedViewStatistics) ProtoMessage() {}

func (x *MaterializedViewStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaterializedViewStatistics.ProtoReflect.Descriptor instead.
func (*MaterializedViewStatistics) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_stats_proto_rawDescGZIP(), []int{30}
}

func (x *MaterializedViewStatistics) GetMaterializedView() []*MaterializedView {
	if x != nil {
		return x.MaterializedView
	}
	return nil
}

// A materialized view considered for a query job.
type MaterializedView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The candidate materialized view.
	TableReference *TableReference `protobuf:"bytes,1,opt,name=table_reference,json=tableReference,proto3,oneof" json:"table_reference,omitempty"`
	// Whether the materialized view is chosen for the query.
	//
	// A materialized view can be chosen to rewrite multiple parts of the same
	// query. If a materialized view is chosen to rewrite any part of the query,
	// then this field is true, even if the materialized view was not chosen to
	// rewrite others parts.
	Chosen *bool `protobuf:"varint,2,opt,name=chosen,proto3,oneof" json:"chosen,omitempty"`
	// If present, specifies a best-effort estimation of the bytes saved by using
	// the materialized view rather than its base tables.
	EstimatedBytesSaved *int64 `protobuf:"varint,3,opt,name=estimated_bytes_saved,json=estimatedBytesSaved,proto3,oneof" json:"estimated_bytes_saved,omitempty"`
	// If present, specifies the reason why the materialized view was not chosen
	// for the query.
	RejectedReason *MaterializedView_RejectedReason `protobuf:"varint,4,opt,name=rejected_reason,json=rejectedReason,proto3,enum=google.cloud.bigquery.v2.MaterializedView_RejectedReason,oneof" json:"rejected_reason,omitempty"`
}

func (x *MaterializedView) Reset() {
	*x = MaterializedView{}
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MaterializedView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaterializedView) ProtoMessage() {}

func (x *MaterializedView) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaterializedView.ProtoReflect.Descriptor instead.
func (*MaterializedView) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_stats_proto_rawDescGZIP(), []int{31}
}

func (x *MaterializedView) GetTableReference() *TableReference {
	if x != nil {
		return x.TableReference
	}
	return nil
}

func (x *MaterializedView) GetChosen() bool {
	if x != nil && x.Chosen != nil {
		return *x.Chosen
	}
	return false
}

func (x *MaterializedView) GetEstimatedBytesSaved() int64 {
	if x != nil && x.EstimatedBytesSaved != nil {
		return *x.EstimatedBytesSaved
	}
	return 0
}

func (x *MaterializedView) GetRejectedReason() MaterializedView_RejectedReason {
	if x != nil && x.RejectedReason != nil {
		return *x.RejectedReason
	}
	return MaterializedView_REJECTED_REASON_UNSPECIFIED
}

// Table level detail on the usage of metadata caching. Only set for Metadata
// caching eligible tables referenced in the query.
type TableMetadataCacheUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metadata caching eligible table referenced in the query.
	TableReference *TableReference `protobuf:"bytes,1,opt,name=table_reference,json=tableReference,proto3,oneof" json:"table_reference,omitempty"`
	// Reason for not using metadata caching for the table.
	UnusedReason *TableMetadataCacheUsage_UnusedReason `protobuf:"varint,2,opt,name=unused_reason,json=unusedReason,proto3,enum=google.cloud.bigquery.v2.TableMetadataCacheUsage_UnusedReason,oneof" json:"unused_reason,omitempty"`
	// Free form human-readable reason metadata caching was unused for
	// the job.
	Explanation *string `protobuf:"bytes,3,opt,name=explanation,proto3,oneof" json:"explanation,omitempty"`
	// Duration since last refresh as of this job for managed tables (indicates
	// metadata cache staleness as seen by this job).
	Staleness *durationpb.Duration `protobuf:"bytes,5,opt,name=staleness,proto3" json:"staleness,omitempty"`
	// [Table
	// type](https://cloud.google.com/bigquery/docs/reference/rest/v2/tables#Table.FIELDS.type).
	TableType string `protobuf:"bytes,6,opt,name=table_type,json=tableType,proto3" json:"table_type,omitempty"`
}

func (x *TableMetadataCacheUsage) Reset() {
	*x = TableMetadataCacheUsage{}
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TableMetadataCacheUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableMetadataCacheUsage) ProtoMessage() {}

func (x *TableMetadataCacheUsage) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableMetadataCacheUsage.ProtoReflect.Descriptor instead.
func (*TableMetadataCacheUsage) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_stats_proto_rawDescGZIP(), []int{32}
}

func (x *TableMetadataCacheUsage) GetTableReference() *TableReference {
	if x != nil {
		return x.TableReference
	}
	return nil
}

func (x *TableMetadataCacheUsage) GetUnusedReason() TableMetadataCacheUsage_UnusedReason {
	if x != nil && x.UnusedReason != nil {
		return *x.UnusedReason
	}
	return TableMetadataCacheUsage_UNUSED_REASON_UNSPECIFIED
}

func (x *TableMetadataCacheUsage) GetExplanation() string {
	if x != nil && x.Explanation != nil {
		return *x.Explanation
	}
	return ""
}

func (x *TableMetadataCacheUsage) GetStaleness() *durationpb.Duration {
	if x != nil {
		return x.Staleness
	}
	return nil
}

func (x *TableMetadataCacheUsage) GetTableType() string {
	if x != nil {
		return x.TableType
	}
	return ""
}

// Statistics for metadata caching in queried tables.
type MetadataCacheStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set for the Metadata caching eligible tables referenced in the query.
	TableMetadataCacheUsage []*TableMetadataCacheUsage `protobuf:"bytes,1,rep,name=table_metadata_cache_usage,json=tableMetadataCacheUsage,proto3" json:"table_metadata_cache_usage,omitempty"`
}

func (x *MetadataCacheStatistics) Reset() {
	*x = MetadataCacheStatistics{}
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetadataCacheStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataCacheStatistics) ProtoMessage() {}

func (x *MetadataCacheStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataCacheStatistics.ProtoReflect.Descriptor instead.
func (*MetadataCacheStatistics) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_stats_proto_rawDescGZIP(), []int{33}
}

func (x *MetadataCacheStatistics) GetTableMetadataCacheUsage() []*TableMetadataCacheUsage {
	if x != nil {
		return x.TableMetadataCacheUsage
	}
	return nil
}

// If the stored column was not used, explain why.
type StoredColumnsUsage_StoredColumnsUnusedReason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies the high-level reason for the unused scenario, each reason must
	// have a code associated.
	Code *StoredColumnsUsage_StoredColumnsUnusedReason_Code `protobuf:"varint,1,opt,name=code,proto3,enum=google.cloud.bigquery.v2.StoredColumnsUsage_StoredColumnsUnusedReason_Code,oneof" json:"code,omitempty"`
	// Specifies the detailed description for the scenario.
	Message *string `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	// Specifies which columns were not covered by the stored columns for the
	// specified code up to 20 columns. This is populated when the code is
	// STORED_COLUMNS_COVER_INSUFFICIENT and BASE_TABLE_HAS_CLS.
	UncoveredColumns []string `protobuf:"bytes,3,rep,name=uncovered_columns,json=uncoveredColumns,proto3" json:"uncovered_columns,omitempty"`
}

func (x *StoredColumnsUsage_StoredColumnsUnusedReason) Reset() {
	*x = StoredColumnsUsage_StoredColumnsUnusedReason{}
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoredColumnsUsage_StoredColumnsUnusedReason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoredColumnsUsage_StoredColumnsUnusedReason) ProtoMessage() {}

func (x *StoredColumnsUsage_StoredColumnsUnusedReason) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoredColumnsUsage_StoredColumnsUnusedReason.ProtoReflect.Descriptor instead.
func (*StoredColumnsUsage_StoredColumnsUnusedReason) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_stats_proto_rawDescGZIP(), []int{8, 0}
}

func (x *StoredColumnsUsage_StoredColumnsUnusedReason) GetCode() StoredColumnsUsage_StoredColumnsUnusedReason_Code {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return StoredColumnsUsage_StoredColumnsUnusedReason_CODE_UNSPECIFIED
}

func (x *StoredColumnsUsage_StoredColumnsUnusedReason) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *StoredColumnsUsage_StoredColumnsUnusedReason) GetUncoveredColumns() []string {
	if x != nil {
		return x.UncoveredColumns
	}
	return nil
}

// Represents the location of the statement/expression being evaluated.
// Line and column numbers are defined as follows:
//
//   - Line and column numbers start with one.  That is, line 1 column 1 denotes
//     the start of the script.
//   - When inside a stored procedure, all line/column numbers are relative
//     to the procedure body, not the script in which the procedure was defined.
//   - Start/end positions exclude leading/trailing comments and whitespace.
//     The end position always ends with a ";", when present.
//   - Multi-byte Unicode characters are treated as just one column.
//   - If the original script (or procedure definition) contains TAB characters,
//     a tab "snaps" the indentation forward to the nearest multiple of 8
//     characters, plus 1. For example, a TAB on column 1, 2, 3, 4, 5, 6 , or 8
//     will advance the next character to column 9.  A TAB on column 9, 10, 11,
//     12, 13, 14, 15, or 16 will advance the next character to column 17.
type ScriptStatistics_ScriptStackFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. One-based start line.
	StartLine int32 `protobuf:"varint,1,opt,name=start_line,json=startLine,proto3" json:"start_line,omitempty"`
	// Output only. One-based start column.
	StartColumn int32 `protobuf:"varint,2,opt,name=start_column,json=startColumn,proto3" json:"start_column,omitempty"`
	// Output only. One-based end line.
	EndLine int32 `protobuf:"varint,3,opt,name=end_line,json=endLine,proto3" json:"end_line,omitempty"`
	// Output only. One-based end column.
	EndColumn int32 `protobuf:"varint,4,opt,name=end_column,json=endColumn,proto3" json:"end_column,omitempty"`
	// Output only. Name of the active procedure, empty if in a top-level
	// script.
	ProcedureId string `protobuf:"bytes,5,opt,name=procedure_id,json=procedureId,proto3" json:"procedure_id,omitempty"`
	// Output only. Text of the current statement/expression.
	Text string `protobuf:"bytes,6,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *ScriptStatistics_ScriptStackFrame) Reset() {
	*x = ScriptStatistics_ScriptStackFrame{}
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScriptStatistics_ScriptStackFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScriptStatistics_ScriptStackFrame) ProtoMessage() {}

func (x *ScriptStatistics_ScriptStackFrame) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScriptStatistics_ScriptStackFrame.ProtoReflect.Descriptor instead.
func (*ScriptStatistics_ScriptStackFrame) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_stats_proto_rawDescGZIP(), []int{18, 0}
}

func (x *ScriptStatistics_ScriptStackFrame) GetStartLine() int32 {
	if x != nil {
		return x.StartLine
	}
	return 0
}

func (x *ScriptStatistics_ScriptStackFrame) GetStartColumn() int32 {
	if x != nil {
		return x.StartColumn
	}
	return 0
}

func (x *ScriptStatistics_ScriptStackFrame) GetEndLine() int32 {
	if x != nil {
		return x.EndLine
	}
	return 0
}

func (x *ScriptStatistics_ScriptStackFrame) GetEndColumn() int32 {
	if x != nil {
		return x.EndColumn
	}
	return 0
}

func (x *ScriptStatistics_ScriptStackFrame) GetProcedureId() string {
	if x != nil {
		return x.ProcedureId
	}
	return ""
}

func (x *ScriptStatistics_ScriptStackFrame) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// [Alpha] Information of a multi-statement transaction.
type JobStatistics_TransactionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. [Alpha] Id of the transaction.
	TransactionId string `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
}

func (x *JobStatistics_TransactionInfo) Reset() {
	*x = JobStatistics_TransactionInfo{}
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobStatistics_TransactionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobStatistics_TransactionInfo) ProtoMessage() {}

func (x *JobStatistics_TransactionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobStatistics_TransactionInfo.ProtoReflect.Descriptor instead.
func (*JobStatistics_TransactionInfo) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_stats_proto_rawDescGZIP(), []int{21, 0}
}

func (x *JobStatistics_TransactionInfo) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

// Details about source stages which produce skewed data.
type PartitionSkew_SkewSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Stage id of the skew source stage.
	StageId int64 `protobuf:"varint,1,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
}

func (x *PartitionSkew_SkewSource) Reset() {
	*x = PartitionSkew_SkewSource{}
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartitionSkew_SkewSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionSkew_SkewSource) ProtoMessage() {}

func (x *PartitionSkew_SkewSource) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionSkew_SkewSource.ProtoReflect.Descriptor instead.
func (*PartitionSkew_SkewSource) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_stats_proto_rawDescGZIP(), []int{28, 0}
}

func (x *PartitionSkew_SkewSource) GetStageId() int64 {
	if x != nil {
		return x.StageId
	}
	return 0
}

// Spark job logs can be filtered by these fields in Cloud Logging.
type SparkStatistics_LoggingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Resource type used for logging.
	ResourceType string `protobuf:"bytes,1,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	// Output only. Project ID where the Spark logs were written.
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *SparkStatistics_LoggingInfo) Reset() {
	*x = SparkStatistics_LoggingInfo{}
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SparkStatistics_LoggingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SparkStatistics_LoggingInfo) ProtoMessage() {}

func (x *SparkStatistics_LoggingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SparkStatistics_LoggingInfo.ProtoReflect.Descriptor instead.
func (*SparkStatistics_LoggingInfo) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_stats_proto_rawDescGZIP(), []int{29, 0}
}

func (x *SparkStatistics_LoggingInfo) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *SparkStatistics_LoggingInfo) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

var File_google_cloud_bigquery_v2_job_stats_proto protoreflect.FileDescriptor

var file_google_cloud_bigquery_v2_job_stats_proto_rawDesc = []byte{
	0x0a, 0x28, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x6a, 0x6f, 0x62, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x76, 0x32, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x30, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x24, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f,
	0x76, 0x32, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f,
	0x76, 0x32, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3a, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2f, 0x76, 0x32, 0x2f, 0x72, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32,
	0x2f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x42,
	0x0a, 0x10, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74,
	0x65, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x73, 0x74, 0x65,
	0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x73, 0x74, 0x65,
	0x70, 0x73, 0x22, 0xde, 0x0f, 0x0a, 0x11, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x4d, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x73, 0x12, 0x42,
	0x0a, 0x0e, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x61, 0x76, 0x67,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x77, 0x61, 0x69, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x41,
	0x76, 0x67, 0x12, 0x3b, 0x0a, 0x0b, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x6d, 0x73, 0x5f, 0x61, 0x76,
	0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x77, 0x61, 0x69, 0x74, 0x4d, 0x73, 0x41, 0x76, 0x67, 0x12,
	0x42, 0x0a, 0x0e, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x6d, 0x61,
	0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x77, 0x61, 0x69, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x4d, 0x61, 0x78, 0x12, 0x3b, 0x0a, 0x0b, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x6d, 0x73, 0x5f, 0x6d,
	0x61, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x77, 0x61, 0x69, 0x74, 0x4d, 0x73, 0x4d, 0x61, 0x78,
	0x12, 0x42, 0x0a, 0x0e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x61,
	0x76, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x41, 0x76, 0x67, 0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x73, 0x5f,
	0x61, 0x76, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x73, 0x41, 0x76,
	0x67, 0x12, 0x42, 0x0a, 0x0e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f,
	0x6d, 0x61, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x4d, 0x61, 0x78, 0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x73,
	0x5f, 0x6d, 0x61, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x73, 0x4d,
	0x61, 0x78, 0x12, 0x48, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x5f, 0x61, 0x76, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x41, 0x76, 0x67, 0x12, 0x41, 0x0a, 0x0e,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x6d, 0x73, 0x5f, 0x61, 0x76, 0x67, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4d, 0x73, 0x41, 0x76, 0x67, 0x12,
	0x48, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x5f, 0x6d, 0x61, 0x78, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x4d, 0x61, 0x78, 0x12, 0x41, 0x0a, 0x0e, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x5f, 0x6d, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4d, 0x73, 0x4d, 0x61, 0x78, 0x12, 0x44, 0x0a, 0x0f,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x61, 0x76, 0x67, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x41,
	0x76, 0x67, 0x12, 0x3d, 0x0a, 0x0c, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x73, 0x5f, 0x61,
	0x76, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x73, 0x41, 0x76,
	0x67, 0x12, 0x44, 0x0a, 0x0f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x5f, 0x6d, 0x61, 0x78, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x4d, 0x61, 0x78, 0x12, 0x3d, 0x0a, 0x0c, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x5f, 0x6d, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x4d, 0x73, 0x4d, 0x61, 0x78, 0x12, 0x4d, 0x0a, 0x14, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c,
	0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x12, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x1c, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65,
	0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x70,
	0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x19, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c,
	0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x53, 0x70, 0x69, 0x6c,
	0x6c, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52,
	0x65, 0x61, 0x64, 0x12, 0x44, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x77,
	0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x12, 0x44, 0x0a, 0x0f, 0x70, 0x61, 0x72,
	0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12,
	0x57, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x17, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c,
	0x65, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x40, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x65, 0x70, 0x52, 0x05, 0x73, 0x74, 0x65,
	0x70, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x4d, 0x73, 0x12, 0x5f, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69,
	0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x48, 0x0a, 0x0b, 0x43, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4d, 0x50,
	0x55, 0x54, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x49, 0x47, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x49, 0x5f, 0x45, 0x4e, 0x47, 0x49, 0x4e,
	0x45, 0x10, 0x02, 0x22, 0x86, 0x04, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x65,
	0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x5f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x65, 0x6c,
	0x61, 0x70, 0x73, 0x65, 0x64, 0x4d, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x53, 0x6c, 0x6f, 0x74, 0x4d, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x0f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x73,
	0x12, 0x3e, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73,
	0x12, 0x53, 0x0a, 0x17, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x6d, 0x5f,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x14, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x52, 0x61, 0x6d, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x55, 0x0a, 0x18, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x52,
	0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x22, 0xac, 0x02, 0x0a,
	0x13, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x44, 0x0a, 0x0f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x62,
	0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x42,
	0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x6d, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x4d, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8c, 0x01, 0x0a, 0x14,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x38, 0x0a, 0x09, 0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x72, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9d, 0x02, 0x0a, 0x0e, 0x42,
	0x69, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x46, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x69, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a,
	0x10, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x4e, 0x53, 0x55, 0x46,
	0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f,
	0x52, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x51, 0x4c, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x04, 0x12,
	0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x41, 0x52,
	0x47, 0x45, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x45, 0x58, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x44, 0x10, 0x07, 0x22, 0xb6, 0x04, 0x0a, 0x12, 0x42,
	0x69, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x12, 0x64, 0x0a, 0x0e, 0x62, 0x69, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x69, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x42, 0x69, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0c, 0x62, 0x69, 0x45, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x77, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x65, 0x6c,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x45, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x69,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x42, 0x69, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x10,
	0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x54, 0x0a, 0x11, 0x62, 0x69, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x69, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0f, 0x62, 0x69, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x22, 0x56, 0x0a, 0x0c, 0x42, 0x69, 0x45, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x43, 0x43, 0x45, 0x4c, 0x45,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53,
	0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41, 0x52, 0x54, 0x49,
	0x41, 0x4c, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x03, 0x22, 0x92,
	0x01, 0x0a, 0x18, 0x42, 0x69, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x63, 0x63, 0x65, 0x6c,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x27, 0x42,
	0x49, 0x5f, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x4c, 0x45, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x49, 0x5f, 0x45,
	0x4e, 0x47, 0x49, 0x4e, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x11, 0x0a, 0x0d, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x50, 0x55,
	0x54, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x50, 0x55,
	0x54, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x10, 0x04, 0x22, 0x99, 0x07, 0x0a, 0x11, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x55, 0x6e, 0x75,
	0x73, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x55, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x48, 0x02, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x22, 0xf4, 0x04, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14,
	0x0a, 0x10, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02,
	0x12, 0x18, 0x0a, 0x14, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54,
	0x52, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e,
	0x44, 0x45, 0x58, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x54, 0x52,
	0x41, 0x56, 0x45, 0x4c, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10,
	0x4e, 0x4f, 0x5f, 0x50, 0x52, 0x55, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52,
	0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x4e, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x45, 0x44, 0x5f,
	0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x53, 0x10, 0x07, 0x12,
	0x1e, 0x0a, 0x1a, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x53,
	0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x10, 0x08, 0x12,
	0x24, 0x0a, 0x20, 0x4f, 0x50, 0x54, 0x49, 0x4d, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x57, 0x49, 0x54,
	0x48, 0x5f, 0x4d, 0x41, 0x54, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x56,
	0x49, 0x45, 0x57, 0x10, 0x09, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x45, 0x43, 0x55, 0x52, 0x45, 0x44,
	0x5f, 0x42, 0x59, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x49, 0x4e, 0x47,
	0x10, 0x0b, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x45, 0x44,
	0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x5a, 0x45, 0x52, 0x10, 0x0c,
	0x12, 0x18, 0x0a, 0x14, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54,
	0x4f, 0x4f, 0x5f, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x10, 0x0d, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x41,
	0x53, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x41, 0x52,
	0x47, 0x45, 0x10, 0x0e, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x53, 0x54, 0x49, 0x4d, 0x41, 0x54, 0x45,
	0x44, 0x5f, 0x50, 0x45, 0x52, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x47, 0x41,
	0x49, 0x4e, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x0f, 0x12, 0x22, 0x0a, 0x1e,
	0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x44, 0x10, 0x15,
	0x12, 0x25, 0x0a, 0x21, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45,
	0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x45, 0x44,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x11, 0x12, 0x27, 0x0a, 0x23, 0x49, 0x4e, 0x44, 0x45, 0x58,
	0x5f, 0x53, 0x55, 0x50, 0x50, 0x52, 0x45, 0x53, 0x53, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x46,
	0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x12,
	0x12, 0x13, 0x0a, 0x0f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x5f,
	0x48, 0x49, 0x54, 0x10, 0x13, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x4c, 0x45, 0x5f, 0x49,
	0x4e, 0x44, 0x45, 0x58, 0x10, 0x14, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e,
	0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x10, 0x10, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0xe9, 0x05, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x12, 0x69, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41,
	0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a,
	0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x01, 0x52, 0x09, 0x62,
	0x61, 0x73, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x89, 0x01, 0x0a, 0x1d,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x5f, 0x75,
	0x6e, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x55,
	0x6e, 0x75, 0x73, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x1a, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x55, 0x6e, 0x75, 0x73, 0x65, 0x64,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x1a, 0x99, 0x03, 0x0a, 0x19, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x55, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x4b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x55,
	0x6e, 0x75, 0x73, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x11, 0x75, 0x6e,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x75, 0x6e, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x22, 0xb4, 0x01, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x44,
	0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x53, 0x5f, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x49,
	0x4e, 0x53, 0x55, 0x46, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x16, 0x0a,
	0x12, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x48, 0x41, 0x53, 0x5f,
	0x52, 0x4c, 0x53, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x54, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x43, 0x4c, 0x53, 0x10, 0x03, 0x12, 0x19, 0x0a,
	0x15, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x45,
	0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x10, 0x06, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x69, 0x73, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xba, 0x02, 0x0a, 0x10,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x12, 0x63, 0x0a, 0x10, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x75,
	0x6e, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x55, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x52, 0x12, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x55, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x73, 0x22, 0x62, 0x0a, 0x0e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f,
	0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x4e, 0x55, 0x53,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c,
	0x59, 0x5f, 0x55, 0x53, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x55, 0x4c, 0x4c,
	0x59, 0x5f, 0x55, 0x53, 0x45, 0x44, 0x10, 0x04, 0x22, 0xa8, 0x03, 0x0a, 0x16, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x12, 0x69, 0x0a, 0x10, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0e,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x5d,
	0x0a, 0x14, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x55, 0x6e, 0x75,
	0x73, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x12, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x55, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x60, 0x0a,
	0x15, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x5f,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x13, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x55, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22,
	0x62, 0x0a, 0x0e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x4e, 0x55, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x12, 0x0a, 0x0e, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x55, 0x53, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x55, 0x4c, 0x4c, 0x59, 0x5f, 0x55, 0x53, 0x45,
	0x44, 0x10, 0x04, 0x22, 0x5c, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x4f, 0x0a, 0x14, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x13, 0x6f, 0x70,
	0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x22, 0xef, 0x02, 0x0a, 0x13, 0x4c, 0x6f, 0x61, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x10,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x41, 0x0a, 0x0b, 0x62, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x62, 0x61, 0x64, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x22, 0x9e, 0x1c, 0x0a, 0x0e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x32, 0x12, 0x4f, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x5c, 0x0a, 0x19, 0x65, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x17, 0x65, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x4e, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x74, 0x69, 0x6d,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x5e, 0x0a, 0x1a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x18, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x54, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x1e, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x1b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x41, 0x63, 0x63,
	0x75, 0x72, 0x61, 0x63, 0x79, 0x12, 0x4e, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x42,
	0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x0c, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x69, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0d, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x6c, 0x6f, 0x74, 0x4d, 0x73,
	0x12, 0x3c, 0x0a, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x68, 0x69, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x63, 0x61, 0x63, 0x68, 0x65, 0x48, 0x69, 0x74, 0x12, 0x5a,
	0x0a, 0x11, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x60, 0x0a, 0x13, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65,
	0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x12, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x06,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x12, 0x53, 0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x5f, 0x64, 0x6d, 0x6c, 0x5f, 0x61, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x44, 0x6d, 0x6c, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x44, 0x0a, 0x09, 0x64, 0x6d, 0x6c, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x32, 0x2e, 0x44, 0x6d, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x08, 0x64, 0x6d, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x6d, 0x0a, 0x1b, 0x75,
	0x6e, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x19, 0x75, 0x6e, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x17, 0x64, 0x64, 0x6c, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x15, 0x64, 0x64,
	0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x64, 0x12, 0x57, 0x0a, 0x10, 0x64, 0x64, 0x6c, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0e, 0x64, 0x64,
	0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x61, 0x0a, 0x15,
	0x64, 0x64, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x13, 0x64, 0x64, 0x6c, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x77, 0x0a, 0x1c, 0x64, 0x64, 0x6c, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x6f,
	0x77, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x52, 0x6f, 0x77, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x18,
	0x64, 0x64, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x6f, 0x77, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x6f, 0x0a, 0x24, 0x64, 0x64, 0x6c, 0x5f,
	0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x1f, 0x64, 0x64, 0x6c, 0x41, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x77, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5d, 0x0a, 0x12, 0x64, 0x64, 0x6c,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x10, 0x64, 0x64, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x12, 0x5d, 0x0a, 0x12, 0x64, 0x64, 0x6c, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x10, 0x64, 0x64, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x50, 0x0a, 0x0d, 0x6d, 0x6c, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69,
	0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0c, 0x6d, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x69, 0x0a, 0x16, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x14,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x12, 0x68, 0x0a, 0x16, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x1c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x73, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x14, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x63,
	0x0a, 0x14, 0x62, 0x69, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x69, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x12, 0x62, 0x69, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x12, 0x66, 0x0a, 0x15, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x6f,
	0x61, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x13, 0x6c, 0x6f, 0x61, 0x64, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x57, 0x0a, 0x10, 0x64,
	0x63, 0x6c, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x0e, 0x64, 0x63, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x55, 0x0a, 0x0f, 0x64, 0x63, 0x6c, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0d, 0x64, 0x63,
	0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x69, 0x65, 0x77, 0x12, 0x5d, 0x0a, 0x12, 0x64,
	0x63, 0x6c, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x10, 0x64, 0x63, 0x6c, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x5c, 0x0a, 0x11, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x10, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x6f, 0x0a, 0x18, 0x76, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x16, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x65, 0x0a, 0x14, 0x70, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e,
	0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x13, 0x70, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x12, 0x47, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x27,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x59, 0x0a, 0x10, 0x73, 0x70, 0x61,
	0x72, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x53,
	0x70, 0x61, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x0f, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x12, 0x4d, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x7b, 0x0a, 0x1c, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x56, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x1a, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x12, 0x72, 0x0a, 0x19, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x2b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x17, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x22, 0xba, 0x03, 0x0a, 0x0e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x33, 0x12, 0x41, 0x0a, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x10, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x41,
	0x0a, 0x0b, 0x62, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x62, 0x61, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x12, 0x4e, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x22, 0xe7, 0x01, 0x0a, 0x0e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x34, 0x12, 0x42, 0x0a, 0x1b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x69, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x18,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x69, 0x46, 0x69,
	0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x08, 0x74,
	0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x11,
	0x43, 0x6f, 0x70, 0x79, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x64,
	0x52, 0x6f, 0x77, 0x73, 0x12, 0x52, 0x0a, 0x14, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x64, 0x5f, 0x6c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x12, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x86, 0x04, 0x0a, 0x0c, 0x4d, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x2a, 0x0a, 0x0e, 0x6d, 0x61, 0x78,
	0x5f, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x49, 0x74, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x68, 0x0a, 0x11, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6e, 0x2e, 0x49, 0x74,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x10, 0x69,
	0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x4d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5d,
	0x0a, 0x0d, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x4d, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x54, 0x72,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x0c, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5b, 0x0a,
	0x0d, 0x68, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x48, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x54, 0x75, 0x6e, 0x69,
	0x6e, 0x67, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0c, 0x68, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x22, 0x55, 0x0a, 0x0c, 0x54, 0x72,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x52,
	0x41, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x49, 0x4e,
	0x47, 0x4c, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x11,
	0x0a, 0x0d, 0x48, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x55, 0x4e, 0x49, 0x4e, 0x47, 0x10,
	0x02, 0x22, 0x8e, 0x04, 0x0a, 0x10, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x62, 0x0a, 0x0f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x45, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x0e, 0x65, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x5e, 0x0a, 0x0c, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x0b, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x1a, 0xe3, 0x01, 0x0a, 0x10, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c,
	0x69, 0x6e, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1e, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x65,
	0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12,
	0x26, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x64, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x22, 0x50, 0x0a, 0x0e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69,
	0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x56, 0x41, 0x4c, 0x55, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x58, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x10, 0x02, 0x22, 0x59, 0x0a, 0x1a, 0x52, 0x6f, 0x77, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x12, 0x3b, 0x0a, 0x1a, 0x72, 0x6f, 0x77, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x72, 0x6f, 0x77, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x22, 0x49, 0x0a,
	0x15, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x73, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x73, 0x6b, 0x69, 0x6e,
	0x67, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x22, 0x81, 0x0c, 0x0a, 0x0d, 0x4a, 0x6f, 0x62,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x4c,
	0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0f, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x2e, 0x0a, 0x10,
	0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0f, 0x71, 0x75, 0x6f,
	0x74, 0x61, 0x44, 0x65, 0x66, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x32, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x41, 0x0a, 0x04, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x33, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x47, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x34, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x07, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x44, 0x0a,
	0x04, 0x63, 0x6f, 0x70, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x4a, 0x6f, 0x62, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x63,
	0x6f, 0x70, 0x79, 0x12, 0x44, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x6c, 0x6f,
	0x74, 0x5f, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x53, 0x6c, 0x6f, 0x74, 0x4d, 0x73, 0x12, 0x2b, 0x0a, 0x0e, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x4a, 0x6f, 0x62,
	0x73, 0x12, 0x27, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6a, 0x6f, 0x62, 0x5f,
	0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x4a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x5c, 0x0a, 0x11, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x10, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x7c, 0x0a, 0x1d, 0x72, 0x6f, 0x77, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x6f, 0x77, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x1a, 0x72, 0x6f, 0x77, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x6c, 0x0a, 0x17, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x73, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x15, 0x64,
	0x61, 0x74, 0x61, 0x4d, 0x61, 0x73, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x12, 0x67, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69,
	0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4d, 0x0a,
	0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x42, 0x0a, 0x1b,
	0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x18, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73,
	0x12, 0x4b, 0x0a, 0x07, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x07, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3d, 0x0a,
	0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x2a, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0d, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xf6, 0x01, 0x0a,
	0x08, 0x44, 0x6d, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x12, 0x69, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65,
	0x64, 0x52, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x11, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52,
	0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x77,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf5, 0x02, 0x0a, 0x13, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x3e, 0x0a,
	0x19, 0x61, 0x76, 0x67, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x16, 0x61, 0x76, 0x67, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x93, 0x01,
	0x0a, 0x25, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x69,
	0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x6c,
	0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x22, 0x73, 0x74, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x12, 0x87, 0x01, 0x0a, 0x21, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x1e, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x22, 0xb6, 0x01,
	0x0a, 0x1d, 0x53, 0x74, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x1e, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x5f, 0x0a, 0x11, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x57, 0x0a, 0x0f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x1c, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x19, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x61,
	0x64, 0x44, 0x69, 0x66, 0x66, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22,
	0xa3, 0x04, 0x0a, 0x21, 0x53, 0x74, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x49, 0x6e,
	0x73, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1e, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x07, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x0f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x6c, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x1a, 0x69, 0x6e, 0x73, 0x75,
	0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65,
	0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x48, 0x01, 0x52, 0x18, 0x69, 0x6e, 0x73, 0x75, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x88, 0x01, 0x01,
	0x12, 0x59, 0x0a, 0x11, 0x62, 0x69, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x69, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0f, 0x62, 0x69, 0x45, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x68, 0x0a, 0x16, 0x68,
	0x69, 0x67, 0x68, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x6a, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x43, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x14, 0x68, 0x69, 0x67, 0x68, 0x43, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x4a, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x58, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x6b, 0x65, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x6b, 0x65, 0x77, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x02, 0x52, 0x0d, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6b, 0x65, 0x77, 0x88, 0x01, 0x01, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x69, 0x6e, 0x73, 0x75, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x5f, 0x71, 0x75, 0x6f,
	0x74, 0x61, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x6b, 0x65, 0x77, 0x22, 0xa5, 0x01, 0x0a, 0x13, 0x48, 0x69, 0x67, 0x68, 0x43, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x20, 0x0a,
	0x09, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x52, 0x6f, 0x77, 0x73, 0x12,
	0x22, 0x0a, 0x0a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x52,
	0x6f, 0x77, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x72, 0x6f,
	0x77, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x65,
	0x70, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x09, 0x73, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x99, 0x01,
	0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6b, 0x65, 0x77, 0x12,
	0x5a, 0x0a, 0x0c, 0x73, 0x6b, 0x65, 0x77, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6b, 0x65, 0x77, 0x2e, 0x53,
	0x6b, 0x65, 0x77, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b,
	0x73, 0x6b, 0x65, 0x77, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x1a, 0x2c, 0x0a, 0x0a, 0x53,
	0x6b, 0x65, 0x77, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0xde, 0x05, 0x0a, 0x0f, 0x53, 0x70,
	0x61, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x2a, 0x0a,
	0x0c, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x70, 0x61, 0x72,
	0x6b, 0x4a, 0x6f, 0x62, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x12, 0x73, 0x70, 0x61,
	0x72, 0x6b, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x01, 0x52, 0x10, 0x73, 0x70,
	0x61, 0x72, 0x6b, 0x4a, 0x6f, 0x62, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x5b, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e,
	0x53, 0x70, 0x61, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x62,
	0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e,
	0x53, 0x70, 0x61, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x48, 0x02, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x50, 0x0a, 0x0c, 0x6b, 0x6d, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xe0, 0x41, 0x03, 0xfa, 0x41, 0x23,
	0x0a, 0x21, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x6b, 0x6d, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x4b, 0x65, 0x79, 0x48, 0x03, 0x52, 0x0a, 0x6b, 0x6d, 0x73, 0x4b, 0x65, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x58, 0x0a, 0x12, 0x67, 0x63, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x25, 0xe0, 0x41, 0x03, 0xfa, 0x41, 0x1f, 0x0a, 0x1d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x04, 0x52, 0x10, 0x67, 0x63, 0x73, 0x53, 0x74,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x5b,
	0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a,
	0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x1a, 0x3c, 0x0a, 0x0e, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x70,
	0x61, 0x72, 0x6b, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x73,
	0x70, 0x61, 0x72, 0x6b, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6b, 0x6d, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x67, 0x63, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x75, 0x0a, 0x1a, 0x4d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x57, 0x0a, 0x11, 0x6d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x52,
	0x10, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56, 0x69, 0x65,
	0x77, 0x22, 0xe7, 0x05, 0x0a, 0x10, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x12, 0x56, 0x0a, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01,
	0x52, 0x06, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x65,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x73,
	0x61, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x13, 0x65, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x53, 0x61, 0x76, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x67, 0x0a, 0x0f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x48, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x22, 0xee, 0x02,
	0x0a, 0x0e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x01, 0x12, 0x08,
	0x0a, 0x04, 0x43, 0x4f, 0x53, 0x54, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x41, 0x53, 0x45,
	0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x52, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45,
	0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x04, 0x12, 0x2a,
	0x0a, 0x26, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x52,
	0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x41,
	0x53, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44,
	0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x2b, 0x0a, 0x27,
	0x42, 0x41, 0x53, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d,
	0x50, 0x41, 0x54, 0x49, 0x42, 0x4c, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x49, 0x4d,
	0x45, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x10, 0x08, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x55, 0x54, 0x5f,
	0x4f, 0x46, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x56, 0x45, 0x4c, 0x5f, 0x57,
	0x49, 0x4e, 0x44, 0x4f, 0x57, 0x10, 0x09, 0x12, 0x2b, 0x0a, 0x27, 0x42, 0x41, 0x53, 0x45, 0x5f,
	0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x45, 0x5f, 0x47, 0x52, 0x41, 0x49, 0x4e,
	0x45, 0x44, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x4f, 0x4c, 0x49,
	0x43, 0x59, 0x10, 0x0a, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x54, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x4c, 0x45, 0x10, 0x0b, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x42, 0x18, 0x0a,
	0x16, 0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x8f, 0x04, 0x0a, 0x17,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x56, 0x0a, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x68, 0x0a, 0x0d, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76,
	0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x55, 0x6e, 0x75, 0x73, 0x65, 0x64,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x0c, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x65, 0x78, 0x70,
	0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x37, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x7d, 0x0a, 0x0c, 0x55, 0x6e, 0x75, 0x73,
	0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x4e, 0x55, 0x53,
	0x45, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x58, 0x43, 0x45, 0x45,
	0x44, 0x45, 0x44, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x53, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x45, 0x53,
	0x53, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x43, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x41, 0x42,
	0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x10, 0x02, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x89, 0x01,
	0x0a, 0x17, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x6e, 0x0a, 0x1a, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x17, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x2a, 0x6c, 0x0a, 0x12, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x23, 0x0a, 0x1f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45,
	0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x52, 0x49, 0x53, 0x45,
	0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x52, 0x49, 0x53, 0x45,
	0x5f, 0x50, 0x4c, 0x55, 0x53, 0x10, 0x03, 0x42, 0x8a, 0x02, 0xea, 0x41, 0x78, 0x0a, 0x21, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x6b, 0x6d, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x4b, 0x65, 0x79,
	0x12, 0x53, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x6b, 0x65, 0x79, 0x52, 0x69, 0x6e,
	0x67, 0x73, 0x2f, 0x7b, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x69, 0x6e, 0x67, 0x7d, 0x2f, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x4b, 0x65, 0x79, 0x73, 0x2f, 0x7b, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x5f, 0x6b, 0x65, 0x79, 0x7d, 0xea, 0x41, 0x22, 0x0a, 0x1d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x01, 0x2a, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x42, 0x0d, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x3b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x69, 0x67,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x70, 0x62, 0x3b, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_bigquery_v2_job_stats_proto_rawDescOnce sync.Once
	file_google_cloud_bigquery_v2_job_stats_proto_rawDescData = file_google_cloud_bigquery_v2_job_stats_proto_rawDesc
)

func file_google_cloud_bigquery_v2_job_stats_proto_rawDescGZIP() []byte {
	file_google_cloud_bigquery_v2_job_stats_proto_rawDescOnce.Do(func() {
		file_google_cloud_bigquery_v2_job_stats_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_bigquery_v2_job_stats_proto_rawDescData)
	})
	return file_google_cloud_bigquery_v2_job_stats_proto_rawDescData
}

var file_google_cloud_bigquery_v2_job_stats_proto_enumTypes = make([]protoimpl.EnumInfo, 13)
var file_google_cloud_bigquery_v2_job_stats_proto_msgTypes = make([]protoimpl.MessageInfo, 40)
var file_google_cloud_bigquery_v2_job_stats_proto_goTypes = []any{
	(ReservationEdition)(0),                                // 0: google.cloud.bigquery.v2.ReservationEdition
	(ExplainQueryStage_ComputeMode)(0),                     // 1: google.cloud.bigquery.v2.ExplainQueryStage.ComputeMode
	(BiEngineReason_Code)(0),                               // 2: google.cloud.bigquery.v2.BiEngineReason.Code
	(BiEngineStatistics_BiEngineMode)(0),                   // 3: google.cloud.bigquery.v2.BiEngineStatistics.BiEngineMode
	(BiEngineStatistics_BiEngineAccelerationMode)(0),       // 4: google.cloud.bigquery.v2.BiEngineStatistics.BiEngineAccelerationMode
	(IndexUnusedReason_Code)(0),                            // 5: google.cloud.bigquery.v2.IndexUnusedReason.Code
	(StoredColumnsUsage_StoredColumnsUnusedReason_Code)(0), // 6: google.cloud.bigquery.v2.StoredColumnsUsage.StoredColumnsUnusedReason.Code
	(SearchStatistics_IndexUsageMode)(0),                   // 7: google.cloud.bigquery.v2.SearchStatistics.IndexUsageMode
	(VectorSearchStatistics_IndexUsageMode)(0),             // 8: google.cloud.bigquery.v2.VectorSearchStatistics.IndexUsageMode
	(MlStatistics_TrainingType)(0),                         // 9: google.cloud.bigquery.v2.MlStatistics.TrainingType
	(ScriptStatistics_EvaluationKind)(0),                   // 10: google.cloud.bigquery.v2.ScriptStatistics.EvaluationKind
	(MaterializedView_RejectedReason)(0),                   // 11: google.cloud.bigquery.v2.MaterializedView.RejectedReason
	(TableMetadataCacheUsage_UnusedReason)(0),              // 12: google.cloud.bigquery.v2.TableMetadataCacheUsage.UnusedReason
	(*ExplainQueryStep)(nil),                               // 13: google.cloud.bigquery.v2.ExplainQueryStep
	(*ExplainQueryStage)(nil),                              // 14: google.cloud.bigquery.v2.ExplainQueryStage
	(*QueryTimelineSample)(nil),                            // 15: google.cloud.bigquery.v2.QueryTimelineSample
	(*ExternalServiceCost)(nil),                            // 16: google.cloud.bigquery.v2.ExternalServiceCost
	(*ExportDataStatistics)(nil),                           // 17: google.cloud.bigquery.v2.ExportDataStatistics
	(*BiEngineReason)(nil),                                 // 18: google.cloud.bigquery.v2.BiEngineReason
	(*BiEngineStatistics)(nil),                             // 19: google.cloud.bigquery.v2.BiEngineStatistics
	(*IndexUnusedReason)(nil),                              // 20: google.cloud.bigquery.v2.IndexUnusedReason
	(*StoredColumnsUsage)(nil),                             // 21: google.cloud.bigquery.v2.StoredColumnsUsage
	(*SearchStatistics)(nil),                               // 22: google.cloud.bigquery.v2.SearchStatistics
	(*VectorSearchStatistics)(nil),                         // 23: google.cloud.bigquery.v2.VectorSearchStatistics
	(*QueryInfo)(nil),                                      // 24: google.cloud.bigquery.v2.QueryInfo
	(*LoadQueryStatistics)(nil),                            // 25: google.cloud.bigquery.v2.LoadQueryStatistics
	(*JobStatistics2)(nil),                                 // 26: google.cloud.bigquery.v2.JobStatistics2
	(*JobStatistics3)(nil),                                 // 27: google.cloud.bigquery.v2.JobStatistics3
	(*JobStatistics4)(nil),                                 // 28: google.cloud.bigquery.v2.JobStatistics4
	(*CopyJobStatistics)(nil),                              // 29: google.cloud.bigquery.v2.CopyJobStatistics
	(*MlStatistics)(nil),                                   // 30: google.cloud.bigquery.v2.MlStatistics
	(*ScriptStatistics)(nil),                               // 31: google.cloud.bigquery.v2.ScriptStatistics
	(*RowLevelSecurityStatistics)(nil),                     // 32: google.cloud.bigquery.v2.RowLevelSecurityStatistics
	(*DataMaskingStatistics)(nil),                          // 33: google.cloud.bigquery.v2.DataMaskingStatistics
	(*JobStatistics)(nil),                                  // 34: google.cloud.bigquery.v2.JobStatistics
	(*DmlStats)(nil),                                       // 35: google.cloud.bigquery.v2.DmlStats
	(*PerformanceInsights)(nil),                            // 36: google.cloud.bigquery.v2.PerformanceInsights
	(*StagePerformanceChangeInsight)(nil),                  // 37: google.cloud.bigquery.v2.StagePerformanceChangeInsight
	(*InputDataChange)(nil),                                // 38: google.cloud.bigquery.v2.InputDataChange
	(*StagePerformanceStandaloneInsight)(nil),              // 39: google.cloud.bigquery.v2.StagePerformanceStandaloneInsight
	(*HighCardinalityJoin)(nil),                            // 40: google.cloud.bigquery.v2.HighCardinalityJoin
	(*PartitionSkew)(nil),                                  // 41: google.cloud.bigquery.v2.PartitionSkew
	(*SparkStatistics)(nil),                                // 42: google.cloud.bigquery.v2.SparkStatistics
	(*MaterializedViewStatistics)(nil),                     // 43: google.cloud.bigquery.v2.MaterializedViewStatistics
	(*MaterializedView)(nil),                               // 44: google.cloud.bigquery.v2.MaterializedView
	(*TableMetadataCacheUsage)(nil),                        // 45: google.cloud.bigquery.v2.TableMetadataCacheUsage
	(*MetadataCacheStatistics)(nil),                        // 46: google.cloud.bigquery.v2.MetadataCacheStatistics
	(*StoredColumnsUsage_StoredColumnsUnusedReason)(nil),   // 47: google.cloud.bigquery.v2.StoredColumnsUsage.StoredColumnsUnusedReason
	(*ScriptStatistics_ScriptStackFrame)(nil),              // 48: google.cloud.bigquery.v2.ScriptStatistics.ScriptStackFrame
	(*JobStatistics_TransactionInfo)(nil),                  // 49: google.cloud.bigquery.v2.JobStatistics.TransactionInfo
	(*PartitionSkew_SkewSource)(nil),                       // 50: google.cloud.bigquery.v2.PartitionSkew.SkewSource
	(*SparkStatistics_LoggingInfo)(nil),                    // 51: google.cloud.bigquery.v2.SparkStatistics.LoggingInfo
	nil,                                                    // 52: google.cloud.bigquery.v2.SparkStatistics.EndpointsEntry
	(*wrapperspb.Int64Value)(nil),                          // 53: google.protobuf.Int64Value
	(*wrapperspb.DoubleValue)(nil),                         // 54: google.protobuf.DoubleValue
	(*TableReference)(nil),                                 // 55: google.cloud.bigquery.v2.TableReference
	(*structpb.Struct)(nil),                                // 56: google.protobuf.Struct
	(*wrapperspb.Int32Value)(nil),                          // 57: google.protobuf.Int32Value
	(*wrapperspb.BoolValue)(nil),                           // 58: google.protobuf.BoolValue
	(*RoutineReference)(nil),                               // 59: google.cloud.bigquery.v2.RoutineReference
	(*TableSchema)(nil),                                    // 60: google.cloud.bigquery.v2.TableSchema
	(*QueryParameter)(nil),                                 // 61: google.cloud.bigquery.v2.QueryParameter
	(*RowAccessPolicyReference)(nil),                       // 62: google.cloud.bigquery.v2.RowAccessPolicyReference
	(*DatasetReference)(nil),                               // 63: google.cloud.bigquery.v2.DatasetReference
	(*Model_TrainingRun_IterationResult)(nil),              // 64: google.cloud.bigquery.v2.Model.TrainingRun.IterationResult
	(Model_ModelType)(0),                                   // 65: google.cloud.bigquery.v2.Model.ModelType
	(*Model_HparamTuningTrial)(nil),                        // 66: google.cloud.bigquery.v2.Model.HparamTuningTrial
	(*SessionInfo)(nil),                                    // 67: google.cloud.bigquery.v2.SessionInfo
	(*durationpb.Duration)(nil),                            // 68: google.protobuf.Duration
}
var file_google_cloud_bigquery_v2_job_stats_proto_depIdxs = []int32{
	53,  // 0: google.cloud.bigquery.v2.ExplainQueryStage.id:type_name -> google.protobuf.Int64Value
	54,  // 1: google.cloud.bigquery.v2.ExplainQueryStage.wait_ratio_avg:type_name -> google.protobuf.DoubleValue
	53,  // 2: google.cloud.bigquery.v2.ExplainQueryStage.wait_ms_avg:type_name -> google.protobuf.Int64Value
	54,  // 3: google.cloud.bigquery.v2.ExplainQueryStage.wait_ratio_max:type_name -> google.protobuf.DoubleValue
	53,  // 4: google.cloud.bigquery.v2.ExplainQueryStage.wait_ms_max:type_name -> google.protobuf.Int64Value
	54,  // 5: google.cloud.bigquery.v2.ExplainQueryStage.read_ratio_avg:type_name -> google.protobuf.DoubleValue
	53,  // 6: google.cloud.bigquery.v2.ExplainQueryStage.read_ms_avg:type_name -> google.protobuf.Int64Value
	54,  // 7: google.cloud.bigquery.v2.ExplainQueryStage.read_ratio_max:type_name -> google.protobuf.DoubleValue
	53,  // 8: google.cloud.bigquery.v2.ExplainQueryStage.read_ms_max:type_name -> google.protobuf.Int64Value
	54,  // 9: google.cloud.bigquery.v2.ExplainQueryStage.compute_ratio_avg:type_name -> google.protobuf.DoubleValue
	53,  // 10: google.cloud.bigquery.v2.ExplainQueryStage.compute_ms_avg:type_name -> google.protobuf.Int64Value
	54,  // 11: google.cloud.bigquery.v2.ExplainQueryStage.compute_ratio_max:type_name -> google.protobuf.DoubleValue
	53,  // 12: google.cloud.bigquery.v2.ExplainQueryStage.compute_ms_max:type_name -> google.protobuf.Int64Value
	54,  // 13: google.cloud.bigquery.v2.ExplainQueryStage.write_ratio_avg:type_name -> google.protobuf.DoubleValue
	53,  // 14: google.cloud.bigquery.v2.ExplainQueryStage.write_ms_avg:type_name -> google.protobuf.Int64Value
	54,  // 15: google.cloud.bigquery.v2.ExplainQueryStage.write_ratio_max:type_name -> google.protobuf.DoubleValue
	53,  // 16: google.cloud.bigquery.v2.ExplainQueryStage.write_ms_max:type_name -> google.protobuf.Int64Value
	53,  // 17: google.cloud.bigquery.v2.ExplainQueryStage.shuffle_output_bytes:type_name -> google.protobuf.Int64Value
	53,  // 18: google.cloud.bigquery.v2.ExplainQueryStage.shuffle_output_bytes_spilled:type_name -> google.protobuf.Int64Value
	53,  // 19: google.cloud.bigquery.v2.ExplainQueryStage.records_read:type_name -> google.protobuf.Int64Value
	53,  // 20: google.cloud.bigquery.v2.ExplainQueryStage.records_written:type_name -> google.protobuf.Int64Value
	53,  // 21: google.cloud.bigquery.v2.ExplainQueryStage.parallel_inputs:type_name -> google.protobuf.Int64Value
	53,  // 22: google.cloud.bigquery.v2.ExplainQueryStage.completed_parallel_inputs:type_name -> google.protobuf.Int64Value
	13,  // 23: google.cloud.bigquery.v2.ExplainQueryStage.steps:type_name -> google.cloud.bigquery.v2.ExplainQueryStep
	53,  // 24: google.cloud.bigquery.v2.ExplainQueryStage.slot_ms:type_name -> google.protobuf.Int64Value
	1,   // 25: google.cloud.bigquery.v2.ExplainQueryStage.compute_mode:type_name -> google.cloud.bigquery.v2.ExplainQueryStage.ComputeMode
	53,  // 26: google.cloud.bigquery.v2.QueryTimelineSample.elapsed_ms:type_name -> google.protobuf.Int64Value
	53,  // 27: google.cloud.bigquery.v2.QueryTimelineSample.total_slot_ms:type_name -> google.protobuf.Int64Value
	53,  // 28: google.cloud.bigquery.v2.QueryTimelineSample.pending_units:type_name -> google.protobuf.Int64Value
	53,  // 29: google.cloud.bigquery.v2.QueryTimelineSample.completed_units:type_name -> google.protobuf.Int64Value
	53,  // 30: google.cloud.bigquery.v2.QueryTimelineSample.active_units:type_name -> google.protobuf.Int64Value
	54,  // 31: google.cloud.bigquery.v2.QueryTimelineSample.shuffle_ram_usage_ratio:type_name -> google.protobuf.DoubleValue
	53,  // 32: google.cloud.bigquery.v2.QueryTimelineSample.estimated_runnable_units:type_name -> google.protobuf.Int64Value
	53,  // 33: google.cloud.bigquery.v2.ExternalServiceCost.bytes_processed:type_name -> google.protobuf.Int64Value
	53,  // 34: google.cloud.bigquery.v2.ExternalServiceCost.bytes_billed:type_name -> google.protobuf.Int64Value
	53,  // 35: google.cloud.bigquery.v2.ExternalServiceCost.slot_ms:type_name -> google.protobuf.Int64Value
	53,  // 36: google.cloud.bigquery.v2.ExportDataStatistics.file_count:type_name -> google.protobuf.Int64Value
	53,  // 37: google.cloud.bigquery.v2.ExportDataStatistics.row_count:type_name -> google.protobuf.Int64Value
	2,   // 38: google.cloud.bigquery.v2.BiEngineReason.code:type_name -> google.cloud.bigquery.v2.BiEngineReason.Code
	3,   // 39: google.cloud.bigquery.v2.BiEngineStatistics.bi_engine_mode:type_name -> google.cloud.bigquery.v2.BiEngineStatistics.BiEngineMode
	4,   // 40: google.cloud.bigquery.v2.BiEngineStatistics.acceleration_mode:type_name -> google.cloud.bigquery.v2.BiEngineStatistics.BiEngineAccelerationMode
	18,  // 41: google.cloud.bigquery.v2.BiEngineStatistics.bi_engine_reasons:type_name -> google.cloud.bigquery.v2.BiEngineReason
	5,   // 42: google.cloud.bigquery.v2.IndexUnusedReason.code:type_name -> google.cloud.bigquery.v2.IndexUnusedReason.Code
	55,  // 43: google.cloud.bigquery.v2.IndexUnusedReason.base_table:type_name -> google.cloud.bigquery.v2.TableReference
	55,  // 44: google.cloud.bigquery.v2.StoredColumnsUsage.base_table:type_name -> google.cloud.bigquery.v2.TableReference
	47,  // 45: google.cloud.bigquery.v2.StoredColumnsUsage.stored_columns_unused_reasons:type_name -> google.cloud.bigquery.v2.StoredColumnsUsage.StoredColumnsUnusedReason
	7,   // 46: google.cloud.bigquery.v2.SearchStatistics.index_usage_mode:type_name -> google.cloud.bigquery.v2.SearchStatistics.IndexUsageMode
	20,  // 47: google.cloud.bigquery.v2.SearchStatistics.index_unused_reasons:type_name -> google.cloud.bigquery.v2.IndexUnusedReason
	8,   // 48: google.cloud.bigquery.v2.VectorSearchStatistics.index_usage_mode:type_name -> google.cloud.bigquery.v2.VectorSearchStatistics.IndexUsageMode
	20,  // 49: google.cloud.bigquery.v2.VectorSearchStatistics.index_unused_reasons:type_name -> google.cloud.bigquery.v2.IndexUnusedReason
	21,  // 50: google.cloud.bigquery.v2.VectorSearchStatistics.stored_columns_usages:type_name -> google.cloud.bigquery.v2.StoredColumnsUsage
	56,  // 51: google.cloud.bigquery.v2.QueryInfo.optimization_details:type_name -> google.protobuf.Struct
	53,  // 52: google.cloud.bigquery.v2.LoadQueryStatistics.input_files:type_name -> google.protobuf.Int64Value
	53,  // 53: google.cloud.bigquery.v2.LoadQueryStatistics.input_file_bytes:type_name -> google.protobuf.Int64Value
	53,  // 54: google.cloud.bigquery.v2.LoadQueryStatistics.output_rows:type_name -> google.protobuf.Int64Value
	53,  // 55: google.cloud.bigquery.v2.LoadQueryStatistics.output_bytes:type_name -> google.protobuf.Int64Value
	53,  // 56: google.cloud.bigquery.v2.LoadQueryStatistics.bad_records:type_name -> google.protobuf.Int64Value
	14,  // 57: google.cloud.bigquery.v2.JobStatistics2.query_plan:type_name -> google.cloud.bigquery.v2.ExplainQueryStage
	53,  // 58: google.cloud.bigquery.v2.JobStatistics2.estimated_bytes_processed:type_name -> google.protobuf.Int64Value
	15,  // 59: google.cloud.bigquery.v2.JobStatistics2.timeline:type_name -> google.cloud.bigquery.v2.QueryTimelineSample
	53,  // 60: google.cloud.bigquery.v2.JobStatistics2.total_partitions_processed:type_name -> google.protobuf.Int64Value
	53,  // 61: google.cloud.bigquery.v2.JobStatistics2.total_bytes_processed:type_name -> google.protobuf.Int64Value
	53,  // 62: google.cloud.bigquery.v2.JobStatistics2.total_bytes_billed:type_name -> google.protobuf.Int64Value
	57,  // 63: google.cloud.bigquery.v2.JobStatistics2.billing_tier:type_name -> google.protobuf.Int32Value
	53,  // 64: google.cloud.bigquery.v2.JobStatistics2.total_slot_ms:type_name -> google.protobuf.Int64Value
	58,  // 65: google.cloud.bigquery.v2.JobStatistics2.cache_hit:type_name -> google.protobuf.BoolValue
	55,  // 66: google.cloud.bigquery.v2.JobStatistics2.referenced_tables:type_name -> google.cloud.bigquery.v2.TableReference
	59,  // 67: google.cloud.bigquery.v2.JobStatistics2.referenced_routines:type_name -> google.cloud.bigquery.v2.RoutineReference
	60,  // 68: google.cloud.bigquery.v2.JobStatistics2.schema:type_name -> google.cloud.bigquery.v2.TableSchema
	53,  // 69: google.cloud.bigquery.v2.JobStatistics2.num_dml_affected_rows:type_name -> google.protobuf.Int64Value
	35,  // 70: google.cloud.bigquery.v2.JobStatistics2.dml_stats:type_name -> google.cloud.bigquery.v2.DmlStats
	61,  // 71: google.cloud.bigquery.v2.JobStatistics2.undeclared_query_parameters:type_name -> google.cloud.bigquery.v2.QueryParameter
	55,  // 72: google.cloud.bigquery.v2.JobStatistics2.ddl_target_table:type_name -> google.cloud.bigquery.v2.TableReference
	55,  // 73: google.cloud.bigquery.v2.JobStatistics2.ddl_destination_table:type_name -> google.cloud.bigquery.v2.TableReference
	62,  // 74: google.cloud.bigquery.v2.JobStatistics2.ddl_target_row_access_policy:type_name -> google.cloud.bigquery.v2.RowAccessPolicyReference
	53,  // 75: google.cloud.bigquery.v2.JobStatistics2.ddl_affected_row_access_policy_count:type_name -> google.protobuf.Int64Value
	59,  // 76: google.cloud.bigquery.v2.JobStatistics2.ddl_target_routine:type_name -> google.cloud.bigquery.v2.RoutineReference
	63,  // 77: google.cloud.bigquery.v2.JobStatistics2.ddl_target_dataset:type_name -> google.cloud.bigquery.v2.DatasetReference
	30,  // 78: google.cloud.bigquery.v2.JobStatistics2.ml_statistics:type_name -> google.cloud.bigquery.v2.MlStatistics
	17,  // 79: google.cloud.bigquery.v2.JobStatistics2.export_data_statistics:type_name -> google.cloud.bigquery.v2.ExportDataStatistics
	16,  // 80: google.cloud.bigquery.v2.JobStatistics2.external_service_costs:type_name -> google.cloud.bigquery.v2.ExternalServiceCost
	19,  // 81: google.cloud.bigquery.v2.JobStatistics2.bi_engine_statistics:type_name -> google.cloud.bigquery.v2.BiEngineStatistics
	25,  // 82: google.cloud.bigquery.v2.JobStatistics2.load_query_statistics:type_name -> google.cloud.bigquery.v2.LoadQueryStatistics
	55,  // 83: google.cloud.bigquery.v2.JobStatistics2.dcl_target_table:type_name -> google.cloud.bigquery.v2.TableReference
	55,  // 84: google.cloud.bigquery.v2.JobStatistics2.dcl_target_view:type_name -> google.cloud.bigquery.v2.TableReference
	63,  // 85: google.cloud.bigquery.v2.JobStatistics2.dcl_target_dataset:type_name -> google.cloud.bigquery.v2.DatasetReference
	22,  // 86: google.cloud.bigquery.v2.JobStatistics2.search_statistics:type_name -> google.cloud.bigquery.v2.SearchStatistics
	23,  // 87: google.cloud.bigquery.v2.JobStatistics2.vector_search_statistics:type_name -> google.cloud.bigquery.v2.VectorSearchStatistics
	36,  // 88: google.cloud.bigquery.v2.JobStatistics2.performance_insights:type_name -> google.cloud.bigquery.v2.PerformanceInsights
	24,  // 89: google.cloud.bigquery.v2.JobStatistics2.query_info:type_name -> google.cloud.bigquery.v2.QueryInfo
	42,  // 90: google.cloud.bigquery.v2.JobStatistics2.spark_statistics:type_name -> google.cloud.bigquery.v2.SparkStatistics
	53,  // 91: google.cloud.bigquery.v2.JobStatistics2.transferred_bytes:type_name -> google.protobuf.Int64Value
	43,  // 92: google.cloud.bigquery.v2.JobStatistics2.materialized_view_statistics:type_name -> google.cloud.bigquery.v2.MaterializedViewStatistics
	46,  // 93: google.cloud.bigquery.v2.JobStatistics2.metadata_cache_statistics:type_name -> google.cloud.bigquery.v2.MetadataCacheStatistics
	53,  // 94: google.cloud.bigquery.v2.JobStatistics3.input_files:type_name -> google.protobuf.Int64Value
	53,  // 95: google.cloud.bigquery.v2.JobStatistics3.input_file_bytes:type_name -> google.protobuf.Int64Value
	53,  // 96: google.cloud.bigquery.v2.JobStatistics3.output_rows:type_name -> google.protobuf.Int64Value
	53,  // 97: google.cloud.bigquery.v2.JobStatistics3.output_bytes:type_name -> google.protobuf.Int64Value
	53,  // 98: google.cloud.bigquery.v2.JobStatistics3.bad_records:type_name -> google.protobuf.Int64Value
	15,  // 99: google.cloud.bigquery.v2.JobStatistics3.timeline:type_name -> google.cloud.bigquery.v2.QueryTimelineSample
	53,  // 100: google.cloud.bigquery.v2.JobStatistics4.input_bytes:type_name -> google.protobuf.Int64Value
	15,  // 101: google.cloud.bigquery.v2.JobStatistics4.timeline:type_name -> google.cloud.bigquery.v2.QueryTimelineSample
	53,  // 102: google.cloud.bigquery.v2.CopyJobStatistics.copied_rows:type_name -> google.protobuf.Int64Value
	53,  // 103: google.cloud.bigquery.v2.CopyJobStatistics.copied_logical_bytes:type_name -> google.protobuf.Int64Value
	64,  // 104: google.cloud.bigquery.v2.MlStatistics.iteration_results:type_name -> google.cloud.bigquery.v2.Model.TrainingRun.IterationResult
	65,  // 105: google.cloud.bigquery.v2.MlStatistics.model_type:type_name -> google.cloud.bigquery.v2.Model.ModelType
	9,   // 106: google.cloud.bigquery.v2.MlStatistics.training_type:type_name -> google.cloud.bigquery.v2.MlStatistics.TrainingType
	66,  // 107: google.cloud.bigquery.v2.MlStatistics.hparam_trials:type_name -> google.cloud.bigquery.v2.Model.HparamTuningTrial
	10,  // 108: google.cloud.bigquery.v2.ScriptStatistics.evaluation_kind:type_name -> google.cloud.bigquery.v2.ScriptStatistics.EvaluationKind
	48,  // 109: google.cloud.bigquery.v2.ScriptStatistics.stack_frames:type_name -> google.cloud.bigquery.v2.ScriptStatistics.ScriptStackFrame
	53,  // 110: google.cloud.bigquery.v2.JobStatistics.total_bytes_processed:type_name -> google.protobuf.Int64Value
	54,  // 111: google.cloud.bigquery.v2.JobStatistics.completion_ratio:type_name -> google.protobuf.DoubleValue
	26,  // 112: google.cloud.bigquery.v2.JobStatistics.query:type_name -> google.cloud.bigquery.v2.JobStatistics2
	27,  // 113: google.cloud.bigquery.v2.JobStatistics.load:type_name -> google.cloud.bigquery.v2.JobStatistics3
	28,  // 114: google.cloud.bigquery.v2.JobStatistics.extract:type_name -> google.cloud.bigquery.v2.JobStatistics4
	29,  // 115: google.cloud.bigquery.v2.JobStatistics.copy:type_name -> google.cloud.bigquery.v2.CopyJobStatistics
	53,  // 116: google.cloud.bigquery.v2.JobStatistics.total_slot_ms:type_name -> google.protobuf.Int64Value
	31,  // 117: google.cloud.bigquery.v2.JobStatistics.script_statistics:type_name -> google.cloud.bigquery.v2.ScriptStatistics
	32,  // 118: google.cloud.bigquery.v2.JobStatistics.row_level_security_statistics:type_name -> google.cloud.bigquery.v2.RowLevelSecurityStatistics
	33,  // 119: google.cloud.bigquery.v2.JobStatistics.data_masking_statistics:type_name -> google.cloud.bigquery.v2.DataMaskingStatistics
	49,  // 120: google.cloud.bigquery.v2.JobStatistics.transaction_info:type_name -> google.cloud.bigquery.v2.JobStatistics.TransactionInfo
	67,  // 121: google.cloud.bigquery.v2.JobStatistics.session_info:type_name -> google.cloud.bigquery.v2.SessionInfo
	0,   // 122: google.cloud.bigquery.v2.JobStatistics.edition:type_name -> google.cloud.bigquery.v2.ReservationEdition
	53,  // 123: google.cloud.bigquery.v2.DmlStats.inserted_row_count:type_name -> google.protobuf.Int64Value
	53,  // 124: google.cloud.bigquery.v2.DmlStats.deleted_row_count:type_name -> google.protobuf.Int64Value
	53,  // 125: google.cloud.bigquery.v2.DmlStats.updated_row_count:type_name -> google.protobuf.Int64Value
	39,  // 126: google.cloud.bigquery.v2.PerformanceInsights.stage_performance_standalone_insights:type_name -> google.cloud.bigquery.v2.StagePerformanceStandaloneInsight
	37,  // 127: google.cloud.bigquery.v2.PerformanceInsights.stage_performance_change_insights:type_name -> google.cloud.bigquery.v2.StagePerformanceChangeInsight
	38,  // 128: google.cloud.bigquery.v2.StagePerformanceChangeInsight.input_data_change:type_name -> google.cloud.bigquery.v2.InputDataChange
	18,  // 129: google.cloud.bigquery.v2.StagePerformanceStandaloneInsight.bi_engine_reasons:type_name -> google.cloud.bigquery.v2.BiEngineReason
	40,  // 130: google.cloud.bigquery.v2.StagePerformanceStandaloneInsight.high_cardinality_joins:type_name -> google.cloud.bigquery.v2.HighCardinalityJoin
	41,  // 131: google.cloud.bigquery.v2.StagePerformanceStandaloneInsight.partition_skew:type_name -> google.cloud.bigquery.v2.PartitionSkew
	50,  // 132: google.cloud.bigquery.v2.PartitionSkew.skew_sources:type_name -> google.cloud.bigquery.v2.PartitionSkew.SkewSource
	52,  // 133: google.cloud.bigquery.v2.SparkStatistics.endpoints:type_name -> google.cloud.bigquery.v2.SparkStatistics.EndpointsEntry
	51,  // 134: google.cloud.bigquery.v2.SparkStatistics.logging_info:type_name -> google.cloud.bigquery.v2.SparkStatistics.LoggingInfo
	44,  // 135: google.cloud.bigquery.v2.MaterializedViewStatistics.materialized_view:type_name -> google.cloud.bigquery.v2.MaterializedView
	55,  // 136: google.cloud.bigquery.v2.MaterializedView.table_reference:type_name -> google.cloud.bigquery.v2.TableReference
	11,  // 137: google.cloud.bigquery.v2.MaterializedView.rejected_reason:type_name -> google.cloud.bigquery.v2.MaterializedView.RejectedReason
	55,  // 138: google.cloud.bigquery.v2.TableMetadataCacheUsage.table_reference:type_name -> google.cloud.bigquery.v2.TableReference
	12,  // 139: google.cloud.bigquery.v2.TableMetadataCacheUsage.unused_reason:type_name -> google.cloud.bigquery.v2.TableMetadataCacheUsage.UnusedReason
	68,  // 140: google.cloud.bigquery.v2.TableMetadataCacheUsage.staleness:type_name -> google.protobuf.Duration
	45,  // 141: google.cloud.bigquery.v2.MetadataCacheStatistics.table_metadata_cache_usage:type_name -> google.cloud.bigquery.v2.TableMetadataCacheUsage
	6,   // 142: google.cloud.bigquery.v2.StoredColumnsUsage.StoredColumnsUnusedReason.code:type_name -> google.cloud.bigquery.v2.StoredColumnsUsage.StoredColumnsUnusedReason.Code
	143, // [143:143] is the sub-list for method output_type
	143, // [143:143] is the sub-list for method input_type
	143, // [143:143] is the sub-list for extension type_name
	143, // [143:143] is the sub-list for extension extendee
	0,   // [0:143] is the sub-list for field type_name
}

func init() { file_google_cloud_bigquery_v2_job_stats_proto_init() }
func file_google_cloud_bigquery_v2_job_stats_proto_init() {
	if File_google_cloud_bigquery_v2_job_stats_proto != nil {
		return
	}
	file_google_cloud_bigquery_v2_dataset_reference_proto_init()
	file_google_cloud_bigquery_v2_model_proto_init()
	file_google_cloud_bigquery_v2_query_parameter_proto_init()
	file_google_cloud_bigquery_v2_routine_reference_proto_init()
	file_google_cloud_bigquery_v2_row_access_policy_reference_proto_init()
	file_google_cloud_bigquery_v2_session_info_proto_init()
	file_google_cloud_bigquery_v2_table_reference_proto_init()
	file_google_cloud_bigquery_v2_table_schema_proto_init()
	file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[7].OneofWrappers = []any{}
	file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[8].OneofWrappers = []any{}
	file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[24].OneofWrappers = []any{}
	file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[26].OneofWrappers = []any{}
	file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[29].OneofWrappers = []any{}
	file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[31].OneofWrappers = []any{}
	file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[32].OneofWrappers = []any{}
	file_google_cloud_bigquery_v2_job_stats_proto_msgTypes[34].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_bigquery_v2_job_stats_proto_rawDesc,
			NumEnums:      13,
			NumMessages:   40,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_cloud_bigquery_v2_job_stats_proto_goTypes,
		DependencyIndexes: file_google_cloud_bigquery_v2_job_stats_proto_depIdxs,
		EnumInfos:         file_google_cloud_bigquery_v2_job_stats_proto_enumTypes,
		MessageInfos:      file_google_cloud_bigquery_v2_job_stats_proto_msgTypes,
	}.Build()
	File_google_cloud_bigquery_v2_job_stats_proto = out.File
	file_google_cloud_bigquery_v2_job_stats_proto_rawDesc = nil
	file_google_cloud_bigquery_v2_job_stats_proto_goTypes = nil
	file_google_cloud_bigquery_v2_job_stats_proto_depIdxs = nil
}
