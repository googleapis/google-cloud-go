// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/bigquery/v2/routine.proto

package bigquerypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RoutineService_GetRoutine_FullMethodName    = "/google.cloud.bigquery.v2.RoutineService/GetRoutine"
	RoutineService_InsertRoutine_FullMethodName = "/google.cloud.bigquery.v2.RoutineService/InsertRoutine"
	RoutineService_UpdateRoutine_FullMethodName = "/google.cloud.bigquery.v2.RoutineService/UpdateRoutine"
	RoutineService_PatchRoutine_FullMethodName  = "/google.cloud.bigquery.v2.RoutineService/PatchRoutine"
	RoutineService_DeleteRoutine_FullMethodName = "/google.cloud.bigquery.v2.RoutineService/DeleteRoutine"
	RoutineService_ListRoutines_FullMethodName  = "/google.cloud.bigquery.v2.RoutineService/ListRoutines"
)

// RoutineServiceClient is the client API for RoutineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoutineServiceClient interface {
	// Gets the specified routine resource by routine ID.
	GetRoutine(ctx context.Context, in *GetRoutineRequest, opts ...grpc.CallOption) (*Routine, error)
	// Creates a new routine in the dataset.
	InsertRoutine(ctx context.Context, in *InsertRoutineRequest, opts ...grpc.CallOption) (*Routine, error)
	// Updates information in an existing routine. The update method replaces the
	// entire Routine resource.
	UpdateRoutine(ctx context.Context, in *UpdateRoutineRequest, opts ...grpc.CallOption) (*Routine, error)
	// Patches information in an existing routine. The patch method does a partial
	// update to an existing Routine resource.
	PatchRoutine(ctx context.Context, in *PatchRoutineRequest, opts ...grpc.CallOption) (*Routine, error)
	// Deletes the routine specified by routineId from the dataset.
	DeleteRoutine(ctx context.Context, in *DeleteRoutineRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Lists all routines in the specified dataset. Requires the READER dataset
	// role.
	ListRoutines(ctx context.Context, in *ListRoutinesRequest, opts ...grpc.CallOption) (*ListRoutinesResponse, error)
}

type routineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoutineServiceClient(cc grpc.ClientConnInterface) RoutineServiceClient {
	return &routineServiceClient{cc}
}

func (c *routineServiceClient) GetRoutine(ctx context.Context, in *GetRoutineRequest, opts ...grpc.CallOption) (*Routine, error) {
	out := new(Routine)
	err := c.cc.Invoke(ctx, RoutineService_GetRoutine_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routineServiceClient) InsertRoutine(ctx context.Context, in *InsertRoutineRequest, opts ...grpc.CallOption) (*Routine, error) {
	out := new(Routine)
	err := c.cc.Invoke(ctx, RoutineService_InsertRoutine_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routineServiceClient) UpdateRoutine(ctx context.Context, in *UpdateRoutineRequest, opts ...grpc.CallOption) (*Routine, error) {
	out := new(Routine)
	err := c.cc.Invoke(ctx, RoutineService_UpdateRoutine_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routineServiceClient) PatchRoutine(ctx context.Context, in *PatchRoutineRequest, opts ...grpc.CallOption) (*Routine, error) {
	out := new(Routine)
	err := c.cc.Invoke(ctx, RoutineService_PatchRoutine_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routineServiceClient) DeleteRoutine(ctx context.Context, in *DeleteRoutineRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RoutineService_DeleteRoutine_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routineServiceClient) ListRoutines(ctx context.Context, in *ListRoutinesRequest, opts ...grpc.CallOption) (*ListRoutinesResponse, error) {
	out := new(ListRoutinesResponse)
	err := c.cc.Invoke(ctx, RoutineService_ListRoutines_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoutineServiceServer is the server API for RoutineService service.
// All implementations should embed UnimplementedRoutineServiceServer
// for forward compatibility
type RoutineServiceServer interface {
	// Gets the specified routine resource by routine ID.
	GetRoutine(context.Context, *GetRoutineRequest) (*Routine, error)
	// Creates a new routine in the dataset.
	InsertRoutine(context.Context, *InsertRoutineRequest) (*Routine, error)
	// Updates information in an existing routine. The update method replaces the
	// entire Routine resource.
	UpdateRoutine(context.Context, *UpdateRoutineRequest) (*Routine, error)
	// Patches information in an existing routine. The patch method does a partial
	// update to an existing Routine resource.
	PatchRoutine(context.Context, *PatchRoutineRequest) (*Routine, error)
	// Deletes the routine specified by routineId from the dataset.
	DeleteRoutine(context.Context, *DeleteRoutineRequest) (*emptypb.Empty, error)
	// Lists all routines in the specified dataset. Requires the READER dataset
	// role.
	ListRoutines(context.Context, *ListRoutinesRequest) (*ListRoutinesResponse, error)
}

// UnimplementedRoutineServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRoutineServiceServer struct {
}

func (UnimplementedRoutineServiceServer) GetRoutine(context.Context, *GetRoutineRequest) (*Routine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoutine not implemented")
}
func (UnimplementedRoutineServiceServer) InsertRoutine(context.Context, *InsertRoutineRequest) (*Routine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertRoutine not implemented")
}
func (UnimplementedRoutineServiceServer) UpdateRoutine(context.Context, *UpdateRoutineRequest) (*Routine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoutine not implemented")
}
func (UnimplementedRoutineServiceServer) PatchRoutine(context.Context, *PatchRoutineRequest) (*Routine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchRoutine not implemented")
}
func (UnimplementedRoutineServiceServer) DeleteRoutine(context.Context, *DeleteRoutineRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoutine not implemented")
}
func (UnimplementedRoutineServiceServer) ListRoutines(context.Context, *ListRoutinesRequest) (*ListRoutinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoutines not implemented")
}

// UnsafeRoutineServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoutineServiceServer will
// result in compilation errors.
type UnsafeRoutineServiceServer interface {
	mustEmbedUnimplementedRoutineServiceServer()
}

func RegisterRoutineServiceServer(s grpc.ServiceRegistrar, srv RoutineServiceServer) {
	s.RegisterService(&RoutineService_ServiceDesc, srv)
}

func _RoutineService_GetRoutine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoutineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutineServiceServer).GetRoutine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutineService_GetRoutine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutineServiceServer).GetRoutine(ctx, req.(*GetRoutineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutineService_InsertRoutine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertRoutineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutineServiceServer).InsertRoutine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutineService_InsertRoutine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutineServiceServer).InsertRoutine(ctx, req.(*InsertRoutineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutineService_UpdateRoutine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoutineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutineServiceServer).UpdateRoutine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutineService_UpdateRoutine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutineServiceServer).UpdateRoutine(ctx, req.(*UpdateRoutineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutineService_PatchRoutine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchRoutineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutineServiceServer).PatchRoutine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutineService_PatchRoutine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutineServiceServer).PatchRoutine(ctx, req.(*PatchRoutineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutineService_DeleteRoutine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoutineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutineServiceServer).DeleteRoutine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutineService_DeleteRoutine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutineServiceServer).DeleteRoutine(ctx, req.(*DeleteRoutineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutineService_ListRoutines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoutinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutineServiceServer).ListRoutines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutineService_ListRoutines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutineServiceServer).ListRoutines(ctx, req.(*ListRoutinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RoutineService_ServiceDesc is the grpc.ServiceDesc for RoutineService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoutineService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.bigquery.v2.RoutineService",
	HandlerType: (*RoutineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRoutine",
			Handler:    _RoutineService_GetRoutine_Handler,
		},
		{
			MethodName: "InsertRoutine",
			Handler:    _RoutineService_InsertRoutine_Handler,
		},
		{
			MethodName: "UpdateRoutine",
			Handler:    _RoutineService_UpdateRoutine_Handler,
		},
		{
			MethodName: "PatchRoutine",
			Handler:    _RoutineService_PatchRoutine_Handler,
		},
		{
			MethodName: "DeleteRoutine",
			Handler:    _RoutineService_DeleteRoutine_Handler,
		},
		{
			MethodName: "ListRoutines",
			Handler:    _RoutineService_ListRoutines_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/bigquery/v2/routine.proto",
}
