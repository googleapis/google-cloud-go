// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.7
// source: google/cloud/bigquery/v2/row_access_policy.proto

package bigquerypb

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for the ListRowAccessPolicies method.
type ListRowAccessPoliciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Project ID of the row access policies to list.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Required. Dataset ID of row access policies to list.
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// Required. Table ID of the table to list row access policies.
	TableId string `protobuf:"bytes,3,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	// Page token, returned by a previous call, to request the next page of
	// results.
	PageToken string `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// The maximum number of results to return in a single response page. Leverage
	// the page tokens to iterate through the entire collection.
	PageSize int32 `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *ListRowAccessPoliciesRequest) Reset() {
	*x = ListRowAccessPoliciesRequest{}
	mi := &file_google_cloud_bigquery_v2_row_access_policy_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRowAccessPoliciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRowAccessPoliciesRequest) ProtoMessage() {}

func (x *ListRowAccessPoliciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_row_access_policy_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRowAccessPoliciesRequest.ProtoReflect.Descriptor instead.
func (*ListRowAccessPoliciesRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_row_access_policy_proto_rawDescGZIP(), []int{0}
}

func (x *ListRowAccessPoliciesRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ListRowAccessPoliciesRequest) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *ListRowAccessPoliciesRequest) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

func (x *ListRowAccessPoliciesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListRowAccessPoliciesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// Response message for the ListRowAccessPolicies method.
type ListRowAccessPoliciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Row access policies on the requested table.
	RowAccessPolicies []*RowAccessPolicy `protobuf:"bytes,1,rep,name=row_access_policies,json=rowAccessPolicies,proto3" json:"row_access_policies,omitempty"`
	// A token to request the next page of results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListRowAccessPoliciesResponse) Reset() {
	*x = ListRowAccessPoliciesResponse{}
	mi := &file_google_cloud_bigquery_v2_row_access_policy_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRowAccessPoliciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRowAccessPoliciesResponse) ProtoMessage() {}

func (x *ListRowAccessPoliciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_row_access_policy_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRowAccessPoliciesResponse.ProtoReflect.Descriptor instead.
func (*ListRowAccessPoliciesResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_row_access_policy_proto_rawDescGZIP(), []int{1}
}

func (x *ListRowAccessPoliciesResponse) GetRowAccessPolicies() []*RowAccessPolicy {
	if x != nil {
		return x.RowAccessPolicies
	}
	return nil
}

func (x *ListRowAccessPoliciesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Request message for the GetRowAccessPolicy method.
type GetRowAccessPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Project ID of the table to get the row access policy.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Required. Dataset ID of the table to get the row access policy.
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// Required. Table ID of the table to get the row access policy.
	TableId string `protobuf:"bytes,3,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	// Required. Policy ID of the row access policy.
	PolicyId string `protobuf:"bytes,4,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
}

func (x *GetRowAccessPolicyRequest) Reset() {
	*x = GetRowAccessPolicyRequest{}
	mi := &file_google_cloud_bigquery_v2_row_access_policy_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRowAccessPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRowAccessPolicyRequest) ProtoMessage() {}

func (x *GetRowAccessPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_row_access_policy_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRowAccessPolicyRequest.ProtoReflect.Descriptor instead.
func (*GetRowAccessPolicyRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_row_access_policy_proto_rawDescGZIP(), []int{2}
}

func (x *GetRowAccessPolicyRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GetRowAccessPolicyRequest) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *GetRowAccessPolicyRequest) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

func (x *GetRowAccessPolicyRequest) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

// Request message for the CreateRowAccessPolicy method.
type CreateRowAccessPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Project ID of the table to get the row access policy.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Required. Dataset ID of the table to get the row access policy.
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// Required. Table ID of the table to get the row access policy.
	TableId string `protobuf:"bytes,3,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	// Required. The row access policy to create.
	RowAccessPolicy *RowAccessPolicy `protobuf:"bytes,4,opt,name=row_access_policy,json=rowAccessPolicy,proto3" json:"row_access_policy,omitempty"`
}

func (x *CreateRowAccessPolicyRequest) Reset() {
	*x = CreateRowAccessPolicyRequest{}
	mi := &file_google_cloud_bigquery_v2_row_access_policy_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRowAccessPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRowAccessPolicyRequest) ProtoMessage() {}

func (x *CreateRowAccessPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_row_access_policy_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRowAccessPolicyRequest.ProtoReflect.Descriptor instead.
func (*CreateRowAccessPolicyRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_row_access_policy_proto_rawDescGZIP(), []int{3}
}

func (x *CreateRowAccessPolicyRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *CreateRowAccessPolicyRequest) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *CreateRowAccessPolicyRequest) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

func (x *CreateRowAccessPolicyRequest) GetRowAccessPolicy() *RowAccessPolicy {
	if x != nil {
		return x.RowAccessPolicy
	}
	return nil
}

// Request message for the UpdateRowAccessPolicy method.
type UpdateRowAccessPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Project ID of the table to get the row access policy.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Required. Dataset ID of the table to get the row access policy.
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// Required. Table ID of the table to get the row access policy.
	TableId string `protobuf:"bytes,3,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	// Required. Policy ID of the row access policy.
	PolicyId string `protobuf:"bytes,4,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	// Required. The row access policy to update.
	RowAccessPolicy *RowAccessPolicy `protobuf:"bytes,5,opt,name=row_access_policy,json=rowAccessPolicy,proto3" json:"row_access_policy,omitempty"`
}

func (x *UpdateRowAccessPolicyRequest) Reset() {
	*x = UpdateRowAccessPolicyRequest{}
	mi := &file_google_cloud_bigquery_v2_row_access_policy_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRowAccessPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRowAccessPolicyRequest) ProtoMessage() {}

func (x *UpdateRowAccessPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_row_access_policy_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRowAccessPolicyRequest.ProtoReflect.Descriptor instead.
func (*UpdateRowAccessPolicyRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_row_access_policy_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateRowAccessPolicyRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *UpdateRowAccessPolicyRequest) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *UpdateRowAccessPolicyRequest) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

func (x *UpdateRowAccessPolicyRequest) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *UpdateRowAccessPolicyRequest) GetRowAccessPolicy() *RowAccessPolicy {
	if x != nil {
		return x.RowAccessPolicy
	}
	return nil
}

// Request message for the DeleteRowAccessPolicy method.
type DeleteRowAccessPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Project ID of the table to delete the row access policy.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Required. Dataset ID of the table to delete the row access policy.
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// Required. Table ID of the table to delete the row access policy.
	TableId string `protobuf:"bytes,3,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	// Required. Policy ID of the row access policy.
	PolicyId string `protobuf:"bytes,4,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	// If set to true, it deletes the row access policy even if it's the last row
	// access policy on the table and the deletion will widen the access rather
	// narrowing it.
	Force *bool `protobuf:"varint,5,opt,name=force,proto3,oneof" json:"force,omitempty"`
}

func (x *DeleteRowAccessPolicyRequest) Reset() {
	*x = DeleteRowAccessPolicyRequest{}
	mi := &file_google_cloud_bigquery_v2_row_access_policy_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRowAccessPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRowAccessPolicyRequest) ProtoMessage() {}

func (x *DeleteRowAccessPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_row_access_policy_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRowAccessPolicyRequest.ProtoReflect.Descriptor instead.
func (*DeleteRowAccessPolicyRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_row_access_policy_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteRowAccessPolicyRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DeleteRowAccessPolicyRequest) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *DeleteRowAccessPolicyRequest) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

func (x *DeleteRowAccessPolicyRequest) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *DeleteRowAccessPolicyRequest) GetForce() bool {
	if x != nil && x.Force != nil {
		return *x.Force
	}
	return false
}

// Request message for the BatchDeleteRowAccessPoliciesRequest method.
type BatchDeleteRowAccessPoliciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Project ID of the table to delete the row access policies.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Required. Dataset ID of the table to delete the row access policies.
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// Required. Table ID of the table to delete the row access policies.
	TableId string `protobuf:"bytes,3,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	// Required. Policy IDs of the row access policies.
	PolicyIds []string `protobuf:"bytes,4,rep,name=policy_ids,json=policyIds,proto3" json:"policy_ids,omitempty"`
	// If set to true, it deletes the row access policy even if it's the last row
	// access policy on the table and the deletion will widen the access rather
	// narrowing it.
	Force *bool `protobuf:"varint,5,opt,name=force,proto3,oneof" json:"force,omitempty"`
}

func (x *BatchDeleteRowAccessPoliciesRequest) Reset() {
	*x = BatchDeleteRowAccessPoliciesRequest{}
	mi := &file_google_cloud_bigquery_v2_row_access_policy_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchDeleteRowAccessPoliciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDeleteRowAccessPoliciesRequest) ProtoMessage() {}

func (x *BatchDeleteRowAccessPoliciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_row_access_policy_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDeleteRowAccessPoliciesRequest.ProtoReflect.Descriptor instead.
func (*BatchDeleteRowAccessPoliciesRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_row_access_policy_proto_rawDescGZIP(), []int{6}
}

func (x *BatchDeleteRowAccessPoliciesRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *BatchDeleteRowAccessPoliciesRequest) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *BatchDeleteRowAccessPoliciesRequest) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

func (x *BatchDeleteRowAccessPoliciesRequest) GetPolicyIds() []string {
	if x != nil {
		return x.PolicyIds
	}
	return nil
}

func (x *BatchDeleteRowAccessPoliciesRequest) GetForce() bool {
	if x != nil && x.Force != nil {
		return *x.Force
	}
	return false
}

// Represents access on a subset of rows on the specified table, defined by its
// filter predicate. Access to the subset of rows is controlled by its IAM
// policy.
type RowAccessPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. A hash of this resource.
	Etag string `protobuf:"bytes,1,opt,name=etag,proto3" json:"etag,omitempty"`
	// Required. Reference describing the ID of this row access policy.
	RowAccessPolicyReference *RowAccessPolicyReference `protobuf:"bytes,2,opt,name=row_access_policy_reference,json=rowAccessPolicyReference,proto3" json:"row_access_policy_reference,omitempty"`
	// Required. A SQL boolean expression that represents the rows defined by this
	// row access policy, similar to the boolean expression in a WHERE clause of a
	// SELECT query on a table.
	// References to other tables, routines, and temporary functions are not
	// supported.
	//
	// Examples: region="EU"
	//
	//	date_field = CAST('2019-9-27' as DATE)
	//	nullable_field is not NULL
	//	numeric_field BETWEEN 1.0 AND 5.0
	FilterPredicate string `protobuf:"bytes,3,opt,name=filter_predicate,json=filterPredicate,proto3" json:"filter_predicate,omitempty"`
	// Output only. The time when this row access policy was created, in
	// milliseconds since the epoch.
	CreationTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	// Output only. The time when this row access policy was last modified, in
	// milliseconds since the epoch.
	LastModifiedTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=last_modified_time,json=lastModifiedTime,proto3" json:"last_modified_time,omitempty"`
	// Optional. Input only. The optional list of iam_member users or groups that
	// specifies the initial members that the row-level access policy should be
	// created with.
	//
	// grantees types:
	// - "user:alice@example.com": An email address that represents a specific
	// Google account.
	// - "serviceAccount:my-other-app@appspot.gserviceaccount.com": An email
	// address that represents a service account.
	// - "group:admins@example.com": An email address that represents a Google
	// group.
	// - "domain:example.com":The Google Workspace domain (primary) that
	// represents all the users of that domain.
	// - "allAuthenticatedUsers": A special identifier that represents all service
	// accounts and all users on the internet who have authenticated with a Google
	// Account. This identifier includes accounts that aren't connected to a
	// Google Workspace or Cloud Identity domain, such as personal Gmail accounts.
	// Users who aren't authenticated, such as anonymous visitors, aren't
	// included.
	// - "allUsers":A special identifier that represents anyone who is on
	// the internet, including authenticated and unauthenticated users. Because
	// BigQuery requires authentication before a user can access the service,
	// allUsers includes only authenticated users.
	Grantees []string `protobuf:"bytes,6,rep,name=grantees,proto3" json:"grantees,omitempty"`
}

func (x *RowAccessPolicy) Reset() {
	*x = RowAccessPolicy{}
	mi := &file_google_cloud_bigquery_v2_row_access_policy_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RowAccessPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowAccessPolicy) ProtoMessage() {}

func (x *RowAccessPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_row_access_policy_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowAccessPolicy.ProtoReflect.Descriptor instead.
func (*RowAccessPolicy) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_row_access_policy_proto_rawDescGZIP(), []int{7}
}

func (x *RowAccessPolicy) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *RowAccessPolicy) GetRowAccessPolicyReference() *RowAccessPolicyReference {
	if x != nil {
		return x.RowAccessPolicyReference
	}
	return nil
}

func (x *RowAccessPolicy) GetFilterPredicate() string {
	if x != nil {
		return x.FilterPredicate
	}
	return ""
}

func (x *RowAccessPolicy) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *RowAccessPolicy) GetLastModifiedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastModifiedTime
	}
	return nil
}

func (x *RowAccessPolicy) GetGrantees() []string {
	if x != nil {
		return x.Grantees
	}
	return nil
}

var File_google_cloud_bigquery_v2_row_access_policy_proto protoreflect.FileDescriptor

var file_google_cloud_bigquery_v2_row_access_policy_proto_rawDesc = []byte{
	0x0a, 0x30, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x72, 0x6f, 0x77, 0x5f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x18, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3a, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x72,
	0x6f, 0x77, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc2,
	0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x77, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x77, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x13, 0x72, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x6f,
	0x77, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x11, 0x72,
	0x6f, 0x77, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xa5, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x52, 0x6f, 0x77, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64,
	0x22, 0xe2, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x77, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x11, 0x72, 0x6f, 0x77,
	0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e,
	0x52, 0x6f, 0x77, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x0f, 0x72, 0x6f, 0x77, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x84, 0x02, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x6f, 0x77, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64,
	0x12, 0x5a, 0x0a, 0x11, 0x72, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x6f, 0x77, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0f, 0x72, 0x6f, 0x77,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0xcd, 0x01, 0x0a,
	0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x77, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0xd6, 0x01, 0x0a,
	0x23, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x77, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x08,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0a,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x73,
	0x12, 0x19, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x8b, 0x03, 0x0a, 0x0f, 0x52, 0x6f, 0x77, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x17, 0x0a, 0x04, 0x65, 0x74, 0x61,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x65, 0x74,
	0x61, 0x67, 0x12, 0x76, 0x0a, 0x1b, 0x72, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x52, 0x6f, 0x77, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x18, 0x72, 0x6f, 0x77, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x10, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x4d, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x10, 0x6c,
	0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x08, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x06, 0xe0, 0x41, 0x04, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x65, 0x65, 0x73, 0x32, 0x90, 0x0d, 0x0a, 0x16, 0x52, 0x6f, 0x77, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xf4,
	0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x77, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x77, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x6f, 0x77, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6a, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x64, 0x12, 0x62, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73,
	0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x3d, 0x2a, 0x7d, 0x2f, 0x72, 0x6f, 0x77, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0xee, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x77,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x33, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x77, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x6f, 0x77,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x78, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x72, 0x12, 0x70, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f,
	0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x3d,
	0x2a, 0x7d, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x72, 0x6f, 0x77, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x12, 0xf9, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x6f, 0x77, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x6f, 0x77, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x32, 0x2e, 0x52, 0x6f, 0x77, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x22, 0x7d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x77, 0x3a, 0x11, 0x72, 0x6f, 0x77,
	0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x62,
	0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d,
	0x2f, 0x72, 0x6f, 0x77, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x12, 0x89, 0x02, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x77,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x36, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f,
	0x77, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e,
	0x52, 0x6f, 0x77, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22,
	0x8c, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x85, 0x01, 0x3a, 0x11, 0x72, 0x6f, 0x77, 0x5f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a, 0x70, 0x2f, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x3d,
	0x2a, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x2f, 0x7b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x72,
	0x6f, 0x77, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x2f, 0x7b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x12, 0xe1,
	0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x77, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x77, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x78, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x72,
	0x2a, 0x70, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x3d,
	0x2a, 0x7d, 0x2f, 0x72, 0x6f, 0x77, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x3d,
	0x2a, 0x7d, 0x12, 0xf0, 0x01, 0x0a, 0x1c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x6f, 0x77, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x12, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x77, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x79, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x73, 0x3a, 0x01, 0x2a, 0x22, 0x6e, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x3d, 0x2a, 0x7d, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x72, 0x6f, 0x77, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x3a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x1a, 0xae, 0x01, 0xca, 0x41, 0x17, 0x62, 0x69, 0x67, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0xd2, 0x41, 0x90, 0x01, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77,
	0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2c, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2c, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65, 0x61,
	0x64, 0x2d, 0x6f, 0x6e, 0x6c, 0x79, 0x42, 0x73, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x42, 0x14, 0x52, 0x6f, 0x77, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3b,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f,
	0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x70, 0x62,
	0x3b, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_bigquery_v2_row_access_policy_proto_rawDescOnce sync.Once
	file_google_cloud_bigquery_v2_row_access_policy_proto_rawDescData = file_google_cloud_bigquery_v2_row_access_policy_proto_rawDesc
)

func file_google_cloud_bigquery_v2_row_access_policy_proto_rawDescGZIP() []byte {
	file_google_cloud_bigquery_v2_row_access_policy_proto_rawDescOnce.Do(func() {
		file_google_cloud_bigquery_v2_row_access_policy_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_bigquery_v2_row_access_policy_proto_rawDescData)
	})
	return file_google_cloud_bigquery_v2_row_access_policy_proto_rawDescData
}

var file_google_cloud_bigquery_v2_row_access_policy_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_google_cloud_bigquery_v2_row_access_policy_proto_goTypes = []any{
	(*ListRowAccessPoliciesRequest)(nil),        // 0: google.cloud.bigquery.v2.ListRowAccessPoliciesRequest
	(*ListRowAccessPoliciesResponse)(nil),       // 1: google.cloud.bigquery.v2.ListRowAccessPoliciesResponse
	(*GetRowAccessPolicyRequest)(nil),           // 2: google.cloud.bigquery.v2.GetRowAccessPolicyRequest
	(*CreateRowAccessPolicyRequest)(nil),        // 3: google.cloud.bigquery.v2.CreateRowAccessPolicyRequest
	(*UpdateRowAccessPolicyRequest)(nil),        // 4: google.cloud.bigquery.v2.UpdateRowAccessPolicyRequest
	(*DeleteRowAccessPolicyRequest)(nil),        // 5: google.cloud.bigquery.v2.DeleteRowAccessPolicyRequest
	(*BatchDeleteRowAccessPoliciesRequest)(nil), // 6: google.cloud.bigquery.v2.BatchDeleteRowAccessPoliciesRequest
	(*RowAccessPolicy)(nil),                     // 7: google.cloud.bigquery.v2.RowAccessPolicy
	(*RowAccessPolicyReference)(nil),            // 8: google.cloud.bigquery.v2.RowAccessPolicyReference
	(*timestamppb.Timestamp)(nil),               // 9: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                       // 10: google.protobuf.Empty
}
var file_google_cloud_bigquery_v2_row_access_policy_proto_depIdxs = []int32{
	7,  // 0: google.cloud.bigquery.v2.ListRowAccessPoliciesResponse.row_access_policies:type_name -> google.cloud.bigquery.v2.RowAccessPolicy
	7,  // 1: google.cloud.bigquery.v2.CreateRowAccessPolicyRequest.row_access_policy:type_name -> google.cloud.bigquery.v2.RowAccessPolicy
	7,  // 2: google.cloud.bigquery.v2.UpdateRowAccessPolicyRequest.row_access_policy:type_name -> google.cloud.bigquery.v2.RowAccessPolicy
	8,  // 3: google.cloud.bigquery.v2.RowAccessPolicy.row_access_policy_reference:type_name -> google.cloud.bigquery.v2.RowAccessPolicyReference
	9,  // 4: google.cloud.bigquery.v2.RowAccessPolicy.creation_time:type_name -> google.protobuf.Timestamp
	9,  // 5: google.cloud.bigquery.v2.RowAccessPolicy.last_modified_time:type_name -> google.protobuf.Timestamp
	0,  // 6: google.cloud.bigquery.v2.RowAccessPolicyService.ListRowAccessPolicies:input_type -> google.cloud.bigquery.v2.ListRowAccessPoliciesRequest
	2,  // 7: google.cloud.bigquery.v2.RowAccessPolicyService.GetRowAccessPolicy:input_type -> google.cloud.bigquery.v2.GetRowAccessPolicyRequest
	3,  // 8: google.cloud.bigquery.v2.RowAccessPolicyService.CreateRowAccessPolicy:input_type -> google.cloud.bigquery.v2.CreateRowAccessPolicyRequest
	4,  // 9: google.cloud.bigquery.v2.RowAccessPolicyService.UpdateRowAccessPolicy:input_type -> google.cloud.bigquery.v2.UpdateRowAccessPolicyRequest
	5,  // 10: google.cloud.bigquery.v2.RowAccessPolicyService.DeleteRowAccessPolicy:input_type -> google.cloud.bigquery.v2.DeleteRowAccessPolicyRequest
	6,  // 11: google.cloud.bigquery.v2.RowAccessPolicyService.BatchDeleteRowAccessPolicies:input_type -> google.cloud.bigquery.v2.BatchDeleteRowAccessPoliciesRequest
	1,  // 12: google.cloud.bigquery.v2.RowAccessPolicyService.ListRowAccessPolicies:output_type -> google.cloud.bigquery.v2.ListRowAccessPoliciesResponse
	7,  // 13: google.cloud.bigquery.v2.RowAccessPolicyService.GetRowAccessPolicy:output_type -> google.cloud.bigquery.v2.RowAccessPolicy
	7,  // 14: google.cloud.bigquery.v2.RowAccessPolicyService.CreateRowAccessPolicy:output_type -> google.cloud.bigquery.v2.RowAccessPolicy
	7,  // 15: google.cloud.bigquery.v2.RowAccessPolicyService.UpdateRowAccessPolicy:output_type -> google.cloud.bigquery.v2.RowAccessPolicy
	10, // 16: google.cloud.bigquery.v2.RowAccessPolicyService.DeleteRowAccessPolicy:output_type -> google.protobuf.Empty
	10, // 17: google.cloud.bigquery.v2.RowAccessPolicyService.BatchDeleteRowAccessPolicies:output_type -> google.protobuf.Empty
	12, // [12:18] is the sub-list for method output_type
	6,  // [6:12] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_google_cloud_bigquery_v2_row_access_policy_proto_init() }
func file_google_cloud_bigquery_v2_row_access_policy_proto_init() {
	if File_google_cloud_bigquery_v2_row_access_policy_proto != nil {
		return
	}
	file_google_cloud_bigquery_v2_row_access_policy_reference_proto_init()
	file_google_cloud_bigquery_v2_row_access_policy_proto_msgTypes[5].OneofWrappers = []any{}
	file_google_cloud_bigquery_v2_row_access_policy_proto_msgTypes[6].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_bigquery_v2_row_access_policy_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_google_cloud_bigquery_v2_row_access_policy_proto_goTypes,
		DependencyIndexes: file_google_cloud_bigquery_v2_row_access_policy_proto_depIdxs,
		MessageInfos:      file_google_cloud_bigquery_v2_row_access_policy_proto_msgTypes,
	}.Build()
	File_google_cloud_bigquery_v2_row_access_policy_proto = out.File
	file_google_cloud_bigquery_v2_row_access_policy_proto_rawDesc = nil
	file_google_cloud_bigquery_v2_row_access_policy_proto_goTypes = nil
	file_google_cloud_bigquery_v2_row_access_policy_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RowAccessPolicyServiceClient is the client API for RowAccessPolicyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RowAccessPolicyServiceClient interface {
	// Lists all row access policies on the specified table.
	ListRowAccessPolicies(ctx context.Context, in *ListRowAccessPoliciesRequest, opts ...grpc.CallOption) (*ListRowAccessPoliciesResponse, error)
	// Gets the specified row access policy by policy ID.
	GetRowAccessPolicy(ctx context.Context, in *GetRowAccessPolicyRequest, opts ...grpc.CallOption) (*RowAccessPolicy, error)
	// Creates a row access policy.
	CreateRowAccessPolicy(ctx context.Context, in *CreateRowAccessPolicyRequest, opts ...grpc.CallOption) (*RowAccessPolicy, error)
	// Updates a row access policy.
	UpdateRowAccessPolicy(ctx context.Context, in *UpdateRowAccessPolicyRequest, opts ...grpc.CallOption) (*RowAccessPolicy, error)
	// Deletes a row access policy.
	DeleteRowAccessPolicy(ctx context.Context, in *DeleteRowAccessPolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Deletes provided row access policies.
	BatchDeleteRowAccessPolicies(ctx context.Context, in *BatchDeleteRowAccessPoliciesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type rowAccessPolicyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRowAccessPolicyServiceClient(cc grpc.ClientConnInterface) RowAccessPolicyServiceClient {
	return &rowAccessPolicyServiceClient{cc}
}

func (c *rowAccessPolicyServiceClient) ListRowAccessPolicies(ctx context.Context, in *ListRowAccessPoliciesRequest, opts ...grpc.CallOption) (*ListRowAccessPoliciesResponse, error) {
	out := new(ListRowAccessPoliciesResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.bigquery.v2.RowAccessPolicyService/ListRowAccessPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rowAccessPolicyServiceClient) GetRowAccessPolicy(ctx context.Context, in *GetRowAccessPolicyRequest, opts ...grpc.CallOption) (*RowAccessPolicy, error) {
	out := new(RowAccessPolicy)
	err := c.cc.Invoke(ctx, "/google.cloud.bigquery.v2.RowAccessPolicyService/GetRowAccessPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rowAccessPolicyServiceClient) CreateRowAccessPolicy(ctx context.Context, in *CreateRowAccessPolicyRequest, opts ...grpc.CallOption) (*RowAccessPolicy, error) {
	out := new(RowAccessPolicy)
	err := c.cc.Invoke(ctx, "/google.cloud.bigquery.v2.RowAccessPolicyService/CreateRowAccessPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rowAccessPolicyServiceClient) UpdateRowAccessPolicy(ctx context.Context, in *UpdateRowAccessPolicyRequest, opts ...grpc.CallOption) (*RowAccessPolicy, error) {
	out := new(RowAccessPolicy)
	err := c.cc.Invoke(ctx, "/google.cloud.bigquery.v2.RowAccessPolicyService/UpdateRowAccessPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rowAccessPolicyServiceClient) DeleteRowAccessPolicy(ctx context.Context, in *DeleteRowAccessPolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/google.cloud.bigquery.v2.RowAccessPolicyService/DeleteRowAccessPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rowAccessPolicyServiceClient) BatchDeleteRowAccessPolicies(ctx context.Context, in *BatchDeleteRowAccessPoliciesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/google.cloud.bigquery.v2.RowAccessPolicyService/BatchDeleteRowAccessPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RowAccessPolicyServiceServer is the server API for RowAccessPolicyService service.
type RowAccessPolicyServiceServer interface {
	// Lists all row access policies on the specified table.
	ListRowAccessPolicies(context.Context, *ListRowAccessPoliciesRequest) (*ListRowAccessPoliciesResponse, error)
	// Gets the specified row access policy by policy ID.
	GetRowAccessPolicy(context.Context, *GetRowAccessPolicyRequest) (*RowAccessPolicy, error)
	// Creates a row access policy.
	CreateRowAccessPolicy(context.Context, *CreateRowAccessPolicyRequest) (*RowAccessPolicy, error)
	// Updates a row access policy.
	UpdateRowAccessPolicy(context.Context, *UpdateRowAccessPolicyRequest) (*RowAccessPolicy, error)
	// Deletes a row access policy.
	DeleteRowAccessPolicy(context.Context, *DeleteRowAccessPolicyRequest) (*emptypb.Empty, error)
	// Deletes provided row access policies.
	BatchDeleteRowAccessPolicies(context.Context, *BatchDeleteRowAccessPoliciesRequest) (*emptypb.Empty, error)
}

// UnimplementedRowAccessPolicyServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRowAccessPolicyServiceServer struct {
}

func (*UnimplementedRowAccessPolicyServiceServer) ListRowAccessPolicies(context.Context, *ListRowAccessPoliciesRequest) (*ListRowAccessPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRowAccessPolicies not implemented")
}
func (*UnimplementedRowAccessPolicyServiceServer) GetRowAccessPolicy(context.Context, *GetRowAccessPolicyRequest) (*RowAccessPolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRowAccessPolicy not implemented")
}
func (*UnimplementedRowAccessPolicyServiceServer) CreateRowAccessPolicy(context.Context, *CreateRowAccessPolicyRequest) (*RowAccessPolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRowAccessPolicy not implemented")
}
func (*UnimplementedRowAccessPolicyServiceServer) UpdateRowAccessPolicy(context.Context, *UpdateRowAccessPolicyRequest) (*RowAccessPolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRowAccessPolicy not implemented")
}
func (*UnimplementedRowAccessPolicyServiceServer) DeleteRowAccessPolicy(context.Context, *DeleteRowAccessPolicyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRowAccessPolicy not implemented")
}
func (*UnimplementedRowAccessPolicyServiceServer) BatchDeleteRowAccessPolicies(context.Context, *BatchDeleteRowAccessPoliciesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteRowAccessPolicies not implemented")
}

func RegisterRowAccessPolicyServiceServer(s *grpc.Server, srv RowAccessPolicyServiceServer) {
	s.RegisterService(&_RowAccessPolicyService_serviceDesc, srv)
}

func _RowAccessPolicyService_ListRowAccessPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRowAccessPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RowAccessPolicyServiceServer).ListRowAccessPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.bigquery.v2.RowAccessPolicyService/ListRowAccessPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RowAccessPolicyServiceServer).ListRowAccessPolicies(ctx, req.(*ListRowAccessPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RowAccessPolicyService_GetRowAccessPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRowAccessPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RowAccessPolicyServiceServer).GetRowAccessPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.bigquery.v2.RowAccessPolicyService/GetRowAccessPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RowAccessPolicyServiceServer).GetRowAccessPolicy(ctx, req.(*GetRowAccessPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RowAccessPolicyService_CreateRowAccessPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRowAccessPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RowAccessPolicyServiceServer).CreateRowAccessPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.bigquery.v2.RowAccessPolicyService/CreateRowAccessPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RowAccessPolicyServiceServer).CreateRowAccessPolicy(ctx, req.(*CreateRowAccessPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RowAccessPolicyService_UpdateRowAccessPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRowAccessPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RowAccessPolicyServiceServer).UpdateRowAccessPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.bigquery.v2.RowAccessPolicyService/UpdateRowAccessPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RowAccessPolicyServiceServer).UpdateRowAccessPolicy(ctx, req.(*UpdateRowAccessPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RowAccessPolicyService_DeleteRowAccessPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRowAccessPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RowAccessPolicyServiceServer).DeleteRowAccessPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.bigquery.v2.RowAccessPolicyService/DeleteRowAccessPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RowAccessPolicyServiceServer).DeleteRowAccessPolicy(ctx, req.(*DeleteRowAccessPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RowAccessPolicyService_BatchDeleteRowAccessPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDeleteRowAccessPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RowAccessPolicyServiceServer).BatchDeleteRowAccessPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.bigquery.v2.RowAccessPolicyService/BatchDeleteRowAccessPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RowAccessPolicyServiceServer).BatchDeleteRowAccessPolicies(ctx, req.(*BatchDeleteRowAccessPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RowAccessPolicyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.bigquery.v2.RowAccessPolicyService",
	HandlerType: (*RowAccessPolicyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRowAccessPolicies",
			Handler:    _RowAccessPolicyService_ListRowAccessPolicies_Handler,
		},
		{
			MethodName: "GetRowAccessPolicy",
			Handler:    _RowAccessPolicyService_GetRowAccessPolicy_Handler,
		},
		{
			MethodName: "CreateRowAccessPolicy",
			Handler:    _RowAccessPolicyService_CreateRowAccessPolicy_Handler,
		},
		{
			MethodName: "UpdateRowAccessPolicy",
			Handler:    _RowAccessPolicyService_UpdateRowAccessPolicy_Handler,
		},
		{
			MethodName: "DeleteRowAccessPolicy",
			Handler:    _RowAccessPolicyService_DeleteRowAccessPolicy_Handler,
		},
		{
			MethodName: "BatchDeleteRowAccessPolicies",
			Handler:    _RowAccessPolicyService_BatchDeleteRowAccessPolicies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/bigquery/v2/row_access_policy.proto",
}
