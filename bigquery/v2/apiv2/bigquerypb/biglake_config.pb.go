// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.7
// source: google/cloud/bigquery/v2/biglake_config.proto

package bigquerypb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Supported file formats for BigQuery tables for Apache Iceberg.
type BigLakeConfiguration_FileFormat int32

const (
	// Default Value.
	BigLakeConfiguration_FILE_FORMAT_UNSPECIFIED BigLakeConfiguration_FileFormat = 0
	// Apache Parquet format.
	BigLakeConfiguration_PARQUET BigLakeConfiguration_FileFormat = 1
)

// Enum value maps for BigLakeConfiguration_FileFormat.
var (
	BigLakeConfiguration_FileFormat_name = map[int32]string{
		0: "FILE_FORMAT_UNSPECIFIED",
		1: "PARQUET",
	}
	BigLakeConfiguration_FileFormat_value = map[string]int32{
		"FILE_FORMAT_UNSPECIFIED": 0,
		"PARQUET":                 1,
	}
)

func (x BigLakeConfiguration_FileFormat) Enum() *BigLakeConfiguration_FileFormat {
	p := new(BigLakeConfiguration_FileFormat)
	*p = x
	return p
}

func (x BigLakeConfiguration_FileFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BigLakeConfiguration_FileFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_bigquery_v2_biglake_config_proto_enumTypes[0].Descriptor()
}

func (BigLakeConfiguration_FileFormat) Type() protoreflect.EnumType {
	return &file_google_cloud_bigquery_v2_biglake_config_proto_enumTypes[0]
}

func (x BigLakeConfiguration_FileFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BigLakeConfiguration_FileFormat.Descriptor instead.
func (BigLakeConfiguration_FileFormat) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_biglake_config_proto_rawDescGZIP(), []int{0, 0}
}

// Supported table formats for BigQuery tables for Apache Iceberg.
type BigLakeConfiguration_TableFormat int32

const (
	// Default Value.
	BigLakeConfiguration_TABLE_FORMAT_UNSPECIFIED BigLakeConfiguration_TableFormat = 0
	// Apache Iceberg format.
	BigLakeConfiguration_ICEBERG BigLakeConfiguration_TableFormat = 1
)

// Enum value maps for BigLakeConfiguration_TableFormat.
var (
	BigLakeConfiguration_TableFormat_name = map[int32]string{
		0: "TABLE_FORMAT_UNSPECIFIED",
		1: "ICEBERG",
	}
	BigLakeConfiguration_TableFormat_value = map[string]int32{
		"TABLE_FORMAT_UNSPECIFIED": 0,
		"ICEBERG":                  1,
	}
)

func (x BigLakeConfiguration_TableFormat) Enum() *BigLakeConfiguration_TableFormat {
	p := new(BigLakeConfiguration_TableFormat)
	*p = x
	return p
}

func (x BigLakeConfiguration_TableFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BigLakeConfiguration_TableFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_bigquery_v2_biglake_config_proto_enumTypes[1].Descriptor()
}

func (BigLakeConfiguration_TableFormat) Type() protoreflect.EnumType {
	return &file_google_cloud_bigquery_v2_biglake_config_proto_enumTypes[1]
}

func (x BigLakeConfiguration_TableFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BigLakeConfiguration_TableFormat.Descriptor instead.
func (BigLakeConfiguration_TableFormat) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_biglake_config_proto_rawDescGZIP(), []int{0, 1}
}

// Configuration for BigQuery tables for Apache Iceberg (formerly BigLake
// managed tables.)
type BigLakeConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The connection specifying the credentials to be used to read and
	// write to external storage, such as Cloud Storage. The connection_id can
	// have the form `{project}.{location}.{connection_id}` or
	// `projects/{project}/locations/{location}/connections/{connection_id}".
	ConnectionId string `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	// Optional. The fully qualified location prefix of the external folder where
	// table data is stored. The '*' wildcard character is not allowed. The URI
	// should be in the format `gs://bucket/path_to_table/`
	StorageUri string `protobuf:"bytes,2,opt,name=storage_uri,json=storageUri,proto3" json:"storage_uri,omitempty"`
	// Optional. The file format the table data is stored in.
	FileFormat BigLakeConfiguration_FileFormat `protobuf:"varint,3,opt,name=file_format,json=fileFormat,proto3,enum=google.cloud.bigquery.v2.BigLakeConfiguration_FileFormat" json:"file_format,omitempty"`
	// Optional. The table format the metadata only snapshots are stored in.
	TableFormat BigLakeConfiguration_TableFormat `protobuf:"varint,4,opt,name=table_format,json=tableFormat,proto3,enum=google.cloud.bigquery.v2.BigLakeConfiguration_TableFormat" json:"table_format,omitempty"`
}

func (x *BigLakeConfiguration) Reset() {
	*x = BigLakeConfiguration{}
	mi := &file_google_cloud_bigquery_v2_biglake_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BigLakeConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BigLakeConfiguration) ProtoMessage() {}

func (x *BigLakeConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_biglake_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BigLakeConfiguration.ProtoReflect.Descriptor instead.
func (*BigLakeConfiguration) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_biglake_config_proto_rawDescGZIP(), []int{0}
}

func (x *BigLakeConfiguration) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *BigLakeConfiguration) GetStorageUri() string {
	if x != nil {
		return x.StorageUri
	}
	return ""
}

func (x *BigLakeConfiguration) GetFileFormat() BigLakeConfiguration_FileFormat {
	if x != nil {
		return x.FileFormat
	}
	return BigLakeConfiguration_FILE_FORMAT_UNSPECIFIED
}

func (x *BigLakeConfiguration) GetTableFormat() BigLakeConfiguration_TableFormat {
	if x != nil {
		return x.TableFormat
	}
	return BigLakeConfiguration_TABLE_FORMAT_UNSPECIFIED
}

var File_google_cloud_bigquery_v2_biglake_config_proto protoreflect.FileDescriptor

var file_google_cloud_bigquery_v2_biglake_config_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x62, 0x69, 0x67, 0x6c, 0x61,
	0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x18, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69,
	0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9d, 0x03, 0x0a, 0x14, 0x42,
	0x69, 0x67, 0x4c, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x55, 0x72, 0x69, 0x12, 0x5f, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x32, 0x2e, 0x42, 0x69, 0x67, 0x4c, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x62, 0x0a, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x69, 0x67, 0x4c, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x36, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41, 0x52, 0x51, 0x55, 0x45, 0x54, 0x10, 0x01,
	0x22, 0x38, 0x0a, 0x0b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x1c, 0x0a, 0x18, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x49, 0x43, 0x45, 0x42, 0x45, 0x52, 0x47, 0x10, 0x01, 0x42, 0x71, 0x0a, 0x1c, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x42, 0x12, 0x42, 0x69, 0x67, 0x4c,
	0x61, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x3b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76,
	0x32, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x70, 0x62, 0x3b, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_bigquery_v2_biglake_config_proto_rawDescOnce sync.Once
	file_google_cloud_bigquery_v2_biglake_config_proto_rawDescData = file_google_cloud_bigquery_v2_biglake_config_proto_rawDesc
)

func file_google_cloud_bigquery_v2_biglake_config_proto_rawDescGZIP() []byte {
	file_google_cloud_bigquery_v2_biglake_config_proto_rawDescOnce.Do(func() {
		file_google_cloud_bigquery_v2_biglake_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_bigquery_v2_biglake_config_proto_rawDescData)
	})
	return file_google_cloud_bigquery_v2_biglake_config_proto_rawDescData
}

var file_google_cloud_bigquery_v2_biglake_config_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_google_cloud_bigquery_v2_biglake_config_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_google_cloud_bigquery_v2_biglake_config_proto_goTypes = []any{
	(BigLakeConfiguration_FileFormat)(0),  // 0: google.cloud.bigquery.v2.BigLakeConfiguration.FileFormat
	(BigLakeConfiguration_TableFormat)(0), // 1: google.cloud.bigquery.v2.BigLakeConfiguration.TableFormat
	(*BigLakeConfiguration)(nil),          // 2: google.cloud.bigquery.v2.BigLakeConfiguration
}
var file_google_cloud_bigquery_v2_biglake_config_proto_depIdxs = []int32{
	0, // 0: google.cloud.bigquery.v2.BigLakeConfiguration.file_format:type_name -> google.cloud.bigquery.v2.BigLakeConfiguration.FileFormat
	1, // 1: google.cloud.bigquery.v2.BigLakeConfiguration.table_format:type_name -> google.cloud.bigquery.v2.BigLakeConfiguration.TableFormat
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_google_cloud_bigquery_v2_biglake_config_proto_init() }
func file_google_cloud_bigquery_v2_biglake_config_proto_init() {
	if File_google_cloud_bigquery_v2_biglake_config_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_bigquery_v2_biglake_config_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_cloud_bigquery_v2_biglake_config_proto_goTypes,
		DependencyIndexes: file_google_cloud_bigquery_v2_biglake_config_proto_depIdxs,
		EnumInfos:         file_google_cloud_bigquery_v2_biglake_config_proto_enumTypes,
		MessageInfos:      file_google_cloud_bigquery_v2_biglake_config_proto_msgTypes,
	}.Build()
	File_google_cloud_bigquery_v2_biglake_config_proto = out.File
	file_google_cloud_bigquery_v2_biglake_config_proto_rawDesc = nil
	file_google_cloud_bigquery_v2_biglake_config_proto_goTypes = nil
	file_google_cloud_bigquery_v2_biglake_config_proto_depIdxs = nil
}
