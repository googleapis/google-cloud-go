// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.7
// source: google/cloud/bigquery/v2/dataset.proto

package bigquerypb

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	expr "google.golang.org/genproto/googleapis/type/expr"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Indicates the type of resources in a dataset that the entry applies to.
type DatasetAccessEntry_TargetType int32

const (
	// Do not use. You must set a target type explicitly.
	DatasetAccessEntry_TARGET_TYPE_UNSPECIFIED DatasetAccessEntry_TargetType = 0
	// This entry applies to views in the dataset.
	DatasetAccessEntry_VIEWS DatasetAccessEntry_TargetType = 1
	// This entry applies to routines in the dataset.
	DatasetAccessEntry_ROUTINES DatasetAccessEntry_TargetType = 2
)

// Enum value maps for DatasetAccessEntry_TargetType.
var (
	DatasetAccessEntry_TargetType_name = map[int32]string{
		0: "TARGET_TYPE_UNSPECIFIED",
		1: "VIEWS",
		2: "ROUTINES",
	}
	DatasetAccessEntry_TargetType_value = map[string]int32{
		"TARGET_TYPE_UNSPECIFIED": 0,
		"VIEWS":                   1,
		"ROUTINES":                2,
	}
)

func (x DatasetAccessEntry_TargetType) Enum() *DatasetAccessEntry_TargetType {
	p := new(DatasetAccessEntry_TargetType)
	*p = x
	return p
}

func (x DatasetAccessEntry_TargetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DatasetAccessEntry_TargetType) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_bigquery_v2_dataset_proto_enumTypes[0].Descriptor()
}

func (DatasetAccessEntry_TargetType) Type() protoreflect.EnumType {
	return &file_google_cloud_bigquery_v2_dataset_proto_enumTypes[0]
}

func (x DatasetAccessEntry_TargetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DatasetAccessEntry_TargetType.Descriptor instead.
func (DatasetAccessEntry_TargetType) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_dataset_proto_rawDescGZIP(), []int{0, 0}
}

// Indicates the billing model that will be applied to the dataset.
type Dataset_StorageBillingModel int32

const (
	// Value not set.
	Dataset_STORAGE_BILLING_MODEL_UNSPECIFIED Dataset_StorageBillingModel = 0
	// Billing for logical bytes.
	Dataset_LOGICAL Dataset_StorageBillingModel = 1
	// Billing for physical bytes.
	Dataset_PHYSICAL Dataset_StorageBillingModel = 2
)

// Enum value maps for Dataset_StorageBillingModel.
var (
	Dataset_StorageBillingModel_name = map[int32]string{
		0: "STORAGE_BILLING_MODEL_UNSPECIFIED",
		1: "LOGICAL",
		2: "PHYSICAL",
	}
	Dataset_StorageBillingModel_value = map[string]int32{
		"STORAGE_BILLING_MODEL_UNSPECIFIED": 0,
		"LOGICAL":                           1,
		"PHYSICAL":                          2,
	}
)

func (x Dataset_StorageBillingModel) Enum() *Dataset_StorageBillingModel {
	p := new(Dataset_StorageBillingModel)
	*p = x
	return p
}

func (x Dataset_StorageBillingModel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Dataset_StorageBillingModel) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_bigquery_v2_dataset_proto_enumTypes[1].Descriptor()
}

func (Dataset_StorageBillingModel) Type() protoreflect.EnumType {
	return &file_google_cloud_bigquery_v2_dataset_proto_enumTypes[1]
}

func (x Dataset_StorageBillingModel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Dataset_StorageBillingModel.Descriptor instead.
func (Dataset_StorageBillingModel) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_dataset_proto_rawDescGZIP(), []int{2, 0}
}

// Specifies whether Linked Dataset is currently in a linked state or not.
type LinkedDatasetMetadata_LinkState int32

const (
	// The default value.
	// Default to the LINKED state.
	LinkedDatasetMetadata_LINK_STATE_UNSPECIFIED LinkedDatasetMetadata_LinkState = 0
	// Normal Linked Dataset state. Data is queryable via the Linked Dataset.
	LinkedDatasetMetadata_LINKED LinkedDatasetMetadata_LinkState = 1
	// Data publisher or owner has unlinked this Linked Dataset. It means you
	// can no longer query or see the data in the Linked Dataset.
	LinkedDatasetMetadata_UNLINKED LinkedDatasetMetadata_LinkState = 2
)

// Enum value maps for LinkedDatasetMetadata_LinkState.
var (
	LinkedDatasetMetadata_LinkState_name = map[int32]string{
		0: "LINK_STATE_UNSPECIFIED",
		1: "LINKED",
		2: "UNLINKED",
	}
	LinkedDatasetMetadata_LinkState_value = map[string]int32{
		"LINK_STATE_UNSPECIFIED": 0,
		"LINKED":                 1,
		"UNLINKED":               2,
	}
)

func (x LinkedDatasetMetadata_LinkState) Enum() *LinkedDatasetMetadata_LinkState {
	p := new(LinkedDatasetMetadata_LinkState)
	*p = x
	return p
}

func (x LinkedDatasetMetadata_LinkState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LinkedDatasetMetadata_LinkState) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_bigquery_v2_dataset_proto_enumTypes[2].Descriptor()
}

func (LinkedDatasetMetadata_LinkState) Type() protoreflect.EnumType {
	return &file_google_cloud_bigquery_v2_dataset_proto_enumTypes[2]
}

func (x LinkedDatasetMetadata_LinkState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LinkedDatasetMetadata_LinkState.Descriptor instead.
func (LinkedDatasetMetadata_LinkState) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_dataset_proto_rawDescGZIP(), []int{5, 0}
}

// DatasetView specifies which dataset information is returned.
type GetDatasetRequest_DatasetView int32

const (
	// The default value.
	// Default to the FULL view.
	GetDatasetRequest_DATASET_VIEW_UNSPECIFIED GetDatasetRequest_DatasetView = 0
	// View metadata information for the dataset, such as friendlyName,
	// description, labels, etc.
	GetDatasetRequest_METADATA GetDatasetRequest_DatasetView = 1
	// View ACL information for the dataset, which defines dataset access
	// for one or more entities.
	GetDatasetRequest_ACL GetDatasetRequest_DatasetView = 2
	// View both dataset metadata and ACL information.
	GetDatasetRequest_FULL GetDatasetRequest_DatasetView = 3
)

// Enum value maps for GetDatasetRequest_DatasetView.
var (
	GetDatasetRequest_DatasetView_name = map[int32]string{
		0: "DATASET_VIEW_UNSPECIFIED",
		1: "METADATA",
		2: "ACL",
		3: "FULL",
	}
	GetDatasetRequest_DatasetView_value = map[string]int32{
		"DATASET_VIEW_UNSPECIFIED": 0,
		"METADATA":                 1,
		"ACL":                      2,
		"FULL":                     3,
	}
)

func (x GetDatasetRequest_DatasetView) Enum() *GetDatasetRequest_DatasetView {
	p := new(GetDatasetRequest_DatasetView)
	*p = x
	return p
}

func (x GetDatasetRequest_DatasetView) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetDatasetRequest_DatasetView) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_bigquery_v2_dataset_proto_enumTypes[3].Descriptor()
}

func (GetDatasetRequest_DatasetView) Type() protoreflect.EnumType {
	return &file_google_cloud_bigquery_v2_dataset_proto_enumTypes[3]
}

func (x GetDatasetRequest_DatasetView) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetDatasetRequest_DatasetView.Descriptor instead.
func (GetDatasetRequest_DatasetView) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_dataset_proto_rawDescGZIP(), []int{6, 0}
}

// UpdateMode specifies which dataset fields is updated.
type UpdateOrPatchDatasetRequest_UpdateMode int32

const (
	// The default value.
	// Default to the UPDATE_FULL.
	UpdateOrPatchDatasetRequest_UPDATE_MODE_UNSPECIFIED UpdateOrPatchDatasetRequest_UpdateMode = 0
	// Includes metadata information for the dataset, such as friendlyName,
	// description, labels, etc.
	UpdateOrPatchDatasetRequest_UPDATE_METADATA UpdateOrPatchDatasetRequest_UpdateMode = 1
	// Includes ACL information for the dataset, which defines dataset access
	// for one or more entities.
	UpdateOrPatchDatasetRequest_UPDATE_ACL UpdateOrPatchDatasetRequest_UpdateMode = 2
	// Includes both dataset metadata and ACL information.
	UpdateOrPatchDatasetRequest_UPDATE_FULL UpdateOrPatchDatasetRequest_UpdateMode = 3
)

// Enum value maps for UpdateOrPatchDatasetRequest_UpdateMode.
var (
	UpdateOrPatchDatasetRequest_UpdateMode_name = map[int32]string{
		0: "UPDATE_MODE_UNSPECIFIED",
		1: "UPDATE_METADATA",
		2: "UPDATE_ACL",
		3: "UPDATE_FULL",
	}
	UpdateOrPatchDatasetRequest_UpdateMode_value = map[string]int32{
		"UPDATE_MODE_UNSPECIFIED": 0,
		"UPDATE_METADATA":         1,
		"UPDATE_ACL":              2,
		"UPDATE_FULL":             3,
	}
)

func (x UpdateOrPatchDatasetRequest_UpdateMode) Enum() *UpdateOrPatchDatasetRequest_UpdateMode {
	p := new(UpdateOrPatchDatasetRequest_UpdateMode)
	*p = x
	return p
}

func (x UpdateOrPatchDatasetRequest_UpdateMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateOrPatchDatasetRequest_UpdateMode) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_bigquery_v2_dataset_proto_enumTypes[4].Descriptor()
}

func (UpdateOrPatchDatasetRequest_UpdateMode) Type() protoreflect.EnumType {
	return &file_google_cloud_bigquery_v2_dataset_proto_enumTypes[4]
}

func (x UpdateOrPatchDatasetRequest_UpdateMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateOrPatchDatasetRequest_UpdateMode.Descriptor instead.
func (UpdateOrPatchDatasetRequest_UpdateMode) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_dataset_proto_rawDescGZIP(), []int{8, 0}
}

// Grants all resources of particular types in a particular dataset read access
// to the current dataset.
//
// Similar to how individually authorized views work, updates to any resource
// granted through its dataset (including creation of new resources) requires
// read permission to referenced resources, plus write permission to the
// authorizing dataset.
type DatasetAccessEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The dataset this entry applies to
	Dataset *DatasetReference `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	// Which resources in the dataset this entry applies to. Currently, only
	// views are supported, but additional target types may be added in the
	// future.
	TargetTypes []DatasetAccessEntry_TargetType `protobuf:"varint,2,rep,packed,name=target_types,json=targetTypes,proto3,enum=google.cloud.bigquery.v2.DatasetAccessEntry_TargetType" json:"target_types,omitempty"`
}

func (x *DatasetAccessEntry) Reset() {
	*x = DatasetAccessEntry{}
	mi := &file_google_cloud_bigquery_v2_dataset_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatasetAccessEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetAccessEntry) ProtoMessage() {}

func (x *DatasetAccessEntry) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_dataset_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetAccessEntry.ProtoReflect.Descriptor instead.
func (*DatasetAccessEntry) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_dataset_proto_rawDescGZIP(), []int{0}
}

func (x *DatasetAccessEntry) GetDataset() *DatasetReference {
	if x != nil {
		return x.Dataset
	}
	return nil
}

func (x *DatasetAccessEntry) GetTargetTypes() []DatasetAccessEntry_TargetType {
	if x != nil {
		return x.TargetTypes
	}
	return nil
}

// An object that defines dataset access for an entity.
type Access struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An IAM role ID that should be granted to the user, group,
	// or domain specified in this access entry.
	// The following legacy mappings will be applied:
	//
	// * `OWNER`: `roles/bigquery.dataOwner`
	// * `WRITER`: `roles/bigquery.dataEditor`
	// * `READER`: `roles/bigquery.dataViewer`
	//
	// This field will accept any of the above formats, but will return only
	// the legacy format. For example, if you set this field to
	// "roles/bigquery.dataOwner", it will be returned back as "OWNER".
	Role string `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	// [Pick one] An email address of a user to grant access to. For example:
	// fred@example.com. Maps to IAM policy member "user:EMAIL" or
	// "serviceAccount:EMAIL".
	UserByEmail string `protobuf:"bytes,2,opt,name=user_by_email,json=userByEmail,proto3" json:"user_by_email,omitempty"`
	// [Pick one] An email address of a Google Group to grant access to.
	// Maps to IAM policy member "group:GROUP".
	GroupByEmail string `protobuf:"bytes,3,opt,name=group_by_email,json=groupByEmail,proto3" json:"group_by_email,omitempty"`
	// [Pick one] A domain to grant access to. Any users signed in with the domain
	// specified will be granted the specified access. Example: "example.com".
	// Maps to IAM policy member "domain:DOMAIN".
	Domain string `protobuf:"bytes,4,opt,name=domain,proto3" json:"domain,omitempty"`
	// [Pick one] A special group to grant access to. Possible values include:
	//
	//   - projectOwners: Owners of the enclosing project.
	//   - projectReaders: Readers of the enclosing project.
	//   - projectWriters: Writers of the enclosing project.
	//   - allAuthenticatedUsers: All authenticated BigQuery users.
	//
	// Maps to similarly-named IAM members.
	SpecialGroup string `protobuf:"bytes,5,opt,name=special_group,json=specialGroup,proto3" json:"special_group,omitempty"`
	// [Pick one] Some other type of member that appears in the IAM Policy but
	// isn't a user, group, domain, or special group.
	IamMember string `protobuf:"bytes,7,opt,name=iam_member,json=iamMember,proto3" json:"iam_member,omitempty"`
	// [Pick one] A view from a different dataset to grant access to. Queries
	// executed against that view will have read access to views/tables/routines
	// in this dataset.
	// The role field is not required when this field is set. If that view is
	// updated by any user, access to the view needs to be granted again via an
	// update operation.
	View *TableReference `protobuf:"bytes,6,opt,name=view,proto3" json:"view,omitempty"`
	// [Pick one] A routine from a different dataset to grant access to. Queries
	// executed against that routine will have read access to
	// views/tables/routines in this dataset. Only UDF is supported for now.
	// The role field is not required when this field is set. If that routine is
	// updated by any user, access to the routine needs to be granted again via
	// an update operation.
	Routine *RoutineReference `protobuf:"bytes,8,opt,name=routine,proto3" json:"routine,omitempty"`
	// [Pick one] A grant authorizing all resources of a particular type in a
	// particular dataset access to this dataset. Only views are supported for
	// now. The role field is not required when this field is set. If that dataset
	// is deleted and re-created, its access needs to be granted again via an
	// update operation.
	Dataset *DatasetAccessEntry `protobuf:"bytes,9,opt,name=dataset,proto3" json:"dataset,omitempty"`
	// Optional. condition for the binding. If CEL expression in this field is
	// true, this access binding will be considered
	Condition *expr.Expr `protobuf:"bytes,10,opt,name=condition,proto3" json:"condition,omitempty"`
}

func (x *Access) Reset() {
	*x = Access{}
	mi := &file_google_cloud_bigquery_v2_dataset_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Access) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Access) ProtoMessage() {}

func (x *Access) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_dataset_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Access.ProtoReflect.Descriptor instead.
func (*Access) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_dataset_proto_rawDescGZIP(), []int{1}
}

func (x *Access) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *Access) GetUserByEmail() string {
	if x != nil {
		return x.UserByEmail
	}
	return ""
}

func (x *Access) GetGroupByEmail() string {
	if x != nil {
		return x.GroupByEmail
	}
	return ""
}

func (x *Access) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *Access) GetSpecialGroup() string {
	if x != nil {
		return x.SpecialGroup
	}
	return ""
}

func (x *Access) GetIamMember() string {
	if x != nil {
		return x.IamMember
	}
	return ""
}

func (x *Access) GetView() *TableReference {
	if x != nil {
		return x.View
	}
	return nil
}

func (x *Access) GetRoutine() *RoutineReference {
	if x != nil {
		return x.Routine
	}
	return nil
}

func (x *Access) GetDataset() *DatasetAccessEntry {
	if x != nil {
		return x.Dataset
	}
	return nil
}

func (x *Access) GetCondition() *expr.Expr {
	if x != nil {
		return x.Condition
	}
	return nil
}

// Represents a BigQuery dataset.
type Dataset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The resource type.
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	// Output only. A hash of the resource.
	Etag string `protobuf:"bytes,2,opt,name=etag,proto3" json:"etag,omitempty"`
	// Output only. The fully-qualified unique name of the dataset in the format
	// projectId:datasetId. The dataset name without the project name is given in
	// the datasetId field. When creating a new dataset, leave this field blank,
	// and instead specify the datasetId field.
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// Output only. A URL that can be used to access the resource again. You can
	// use this URL in Get or Update requests to the resource.
	SelfLink string `protobuf:"bytes,4,opt,name=self_link,json=selfLink,proto3" json:"self_link,omitempty"`
	// Required. A reference that identifies the dataset.
	DatasetReference *DatasetReference `protobuf:"bytes,5,opt,name=dataset_reference,json=datasetReference,proto3" json:"dataset_reference,omitempty"`
	// Optional. A descriptive name for the dataset.
	FriendlyName *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=friendly_name,json=friendlyName,proto3" json:"friendly_name,omitempty"`
	// Optional. A user-friendly description of the dataset.
	Description *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	// Optional. The default lifetime of all tables in the dataset, in
	// milliseconds. The minimum lifetime value is 3600000 milliseconds (one
	// hour). To clear an existing default expiration with a PATCH request, set to
	// 0. Once this property is set, all newly-created tables in the dataset will
	// have an expirationTime property set to the creation time plus the value in
	// this property, and changing the value will only affect new tables, not
	// existing ones. When the expirationTime for a given table is reached, that
	// table will be deleted automatically.
	// If a table's expirationTime is modified or removed before the table
	// expires, or if you provide an explicit expirationTime when creating a
	// table, that value takes precedence over the default expiration time
	// indicated by this property.
	DefaultTableExpirationMs *wrapperspb.Int64Value `protobuf:"bytes,8,opt,name=default_table_expiration_ms,json=defaultTableExpirationMs,proto3" json:"default_table_expiration_ms,omitempty"`
	// This default partition expiration, expressed in milliseconds.
	//
	// When new time-partitioned tables are created in a dataset where this
	// property is set, the table will inherit this value, propagated as the
	// `TimePartitioning.expirationMs` property on the new table.  If you set
	// `TimePartitioning.expirationMs` explicitly when creating a table,
	// the `defaultPartitionExpirationMs` of the containing dataset is ignored.
	//
	// When creating a partitioned table, if `defaultPartitionExpirationMs`
	// is set, the `defaultTableExpirationMs` value is ignored and the table
	// will not be inherit a table expiration deadline.
	DefaultPartitionExpirationMs *wrapperspb.Int64Value `protobuf:"bytes,14,opt,name=default_partition_expiration_ms,json=defaultPartitionExpirationMs,proto3" json:"default_partition_expiration_ms,omitempty"`
	// The labels associated with this dataset. You can use these
	// to organize and group your datasets.
	// You can set this property when inserting or updating a dataset.
	// See [Creating and Updating Dataset
	// Labels](https://cloud.google.com/bigquery/docs/creating-managing-labels#creating_and_updating_dataset_labels)
	// for more information.
	Labels map[string]string `protobuf:"bytes,9,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Optional. An array of objects that define dataset access for one or more
	// entities. You can set this property when inserting or updating a dataset in
	// order to control who is allowed to access the data. If unspecified at
	// dataset creation time, BigQuery adds default dataset access for the
	// following entities: access.specialGroup: projectReaders; access.role:
	// READER; access.specialGroup: projectWriters; access.role: WRITER;
	// access.specialGroup: projectOwners; access.role: OWNER;
	// access.userByEmail: [dataset creator email]; access.role: OWNER;
	// If you patch a dataset, then this field is overwritten by the patched
	// dataset's access field. To add entities, you must supply the entire
	// existing access array in addition to any new entities that you want to add.
	Access []*Access `protobuf:"bytes,10,rep,name=access,proto3" json:"access,omitempty"`
	// Output only. The time when this dataset was created, in milliseconds since
	// the epoch.
	CreationTime int64 `protobuf:"varint,11,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	// Output only. The date when this dataset was last modified, in milliseconds
	// since the epoch.
	LastModifiedTime int64 `protobuf:"varint,12,opt,name=last_modified_time,json=lastModifiedTime,proto3" json:"last_modified_time,omitempty"`
	// The geographic location where the dataset should reside. See
	// https://cloud.google.com/bigquery/docs/locations for supported
	// locations.
	Location string `protobuf:"bytes,13,opt,name=location,proto3" json:"location,omitempty"`
	// The default encryption key for all tables in the dataset.
	// After this property is set, the encryption key of all newly-created tables
	// in the dataset is set to this value unless the table creation request or
	// query explicitly overrides the key.
	DefaultEncryptionConfiguration *EncryptionConfiguration `protobuf:"bytes,16,opt,name=default_encryption_configuration,json=defaultEncryptionConfiguration,proto3" json:"default_encryption_configuration,omitempty"`
	// Output only. Reserved for future use.
	SatisfiesPzs *wrapperspb.BoolValue `protobuf:"bytes,17,opt,name=satisfies_pzs,json=satisfiesPzs,proto3" json:"satisfies_pzs,omitempty"`
	// Output only. Reserved for future use.
	SatisfiesPzi *wrapperspb.BoolValue `protobuf:"bytes,31,opt,name=satisfies_pzi,json=satisfiesPzi,proto3" json:"satisfies_pzi,omitempty"`
	// Output only. Same as `type` in `ListFormatDataset`.
	// The type of the dataset, one of:
	//
	// * DEFAULT - only accessible by owner and authorized accounts,
	// * PUBLIC - accessible by everyone,
	// * LINKED - linked dataset,
	// * EXTERNAL - dataset with definition in external metadata catalog.
	Type string `protobuf:"bytes,18,opt,name=type,proto3" json:"type,omitempty"`
	// Optional. The source dataset reference when the dataset is of type LINKED.
	// For all other dataset types it is not set. This field cannot be updated
	// once it is set. Any attempt to update this field using Update and Patch API
	// Operations will be ignored.
	LinkedDatasetSource *LinkedDatasetSource `protobuf:"bytes,19,opt,name=linked_dataset_source,json=linkedDatasetSource,proto3" json:"linked_dataset_source,omitempty"`
	// Output only. Metadata about the LinkedDataset. Filled out when the dataset
	// type is LINKED.
	LinkedDatasetMetadata *LinkedDatasetMetadata `protobuf:"bytes,29,opt,name=linked_dataset_metadata,json=linkedDatasetMetadata,proto3" json:"linked_dataset_metadata,omitempty"`
	// Optional. Reference to a read-only external dataset defined in data
	// catalogs outside of BigQuery. Filled out when the dataset type is EXTERNAL.
	ExternalDatasetReference *ExternalDatasetReference `protobuf:"bytes,20,opt,name=external_dataset_reference,json=externalDatasetReference,proto3" json:"external_dataset_reference,omitempty"`
	// Optional. Options defining open source compatible datasets living in the
	// BigQuery catalog. Contains metadata of open source database, schema or
	// namespace represented by the current dataset.
	ExternalCatalogDatasetOptions *ExternalCatalogDatasetOptions `protobuf:"bytes,32,opt,name=external_catalog_dataset_options,json=externalCatalogDatasetOptions,proto3" json:"external_catalog_dataset_options,omitempty"`
	// Optional. TRUE if the dataset and its table names are case-insensitive,
	// otherwise FALSE. By default, this is FALSE, which means the dataset and its
	// table names are case-sensitive. This field does not affect routine
	// references.
	IsCaseInsensitive *wrapperspb.BoolValue `protobuf:"bytes,21,opt,name=is_case_insensitive,json=isCaseInsensitive,proto3" json:"is_case_insensitive,omitempty"`
	// Optional. Defines the default collation specification of future tables
	// created in the dataset. If a table is created in this dataset without
	// table-level default collation, then the table inherits the dataset default
	// collation, which is applied to the string fields that do not have explicit
	// collation specified. A change to this field affects only tables created
	// afterwards, and does not alter the existing tables.
	// The following values are supported:
	//
	// * 'und:ci': undetermined locale, case insensitive.
	// * ”: empty string. Default to case-sensitive behavior.
	DefaultCollation *wrapperspb.StringValue `protobuf:"bytes,22,opt,name=default_collation,json=defaultCollation,proto3" json:"default_collation,omitempty"`
	// Optional. Defines the default rounding mode specification of new tables
	// created within this dataset. During table creation, if this field is
	// specified, the table within this dataset will inherit the default rounding
	// mode of the dataset. Setting the default rounding mode on a table overrides
	// this option. Existing tables in the dataset are unaffected.
	// If columns are defined during that table creation,
	// they will immediately inherit the table's default rounding mode,
	// unless otherwise specified.
	DefaultRoundingMode TableFieldSchema_RoundingMode `protobuf:"varint,26,opt,name=default_rounding_mode,json=defaultRoundingMode,proto3,enum=google.cloud.bigquery.v2.TableFieldSchema_RoundingMode" json:"default_rounding_mode,omitempty"`
	// Optional. Defines the time travel window in hours. The value can be from 48
	// to 168 hours (2 to 7 days). The default value is 168 hours if this is not
	// set.
	MaxTimeTravelHours *wrapperspb.Int64Value `protobuf:"bytes,23,opt,name=max_time_travel_hours,json=maxTimeTravelHours,proto3" json:"max_time_travel_hours,omitempty"`
	// Output only. Tags for the dataset. To provide tags as inputs, use the
	// `resourceTags` field.
	//
	// Deprecated: Marked as deprecated in google/cloud/bigquery/v2/dataset.proto.
	Tags []*GcpTag `protobuf:"bytes,24,rep,name=tags,proto3" json:"tags,omitempty"`
	// Optional. Updates storage_billing_model for the dataset.
	StorageBillingModel Dataset_StorageBillingModel `protobuf:"varint,25,opt,name=storage_billing_model,json=storageBillingModel,proto3,enum=google.cloud.bigquery.v2.Dataset_StorageBillingModel" json:"storage_billing_model,omitempty"`
	// Optional. Output only. Restriction config for all tables and dataset. If
	// set, restrict certain accesses on the dataset and all its tables based on
	// the config. See [Data
	// egress](https://cloud.google.com/bigquery/docs/analytics-hub-introduction#data_egress)
	// for more details.
	Restrictions *RestrictionConfig `protobuf:"bytes,27,opt,name=restrictions,proto3" json:"restrictions,omitempty"`
	// Optional. The [tags](https://cloud.google.com/bigquery/docs/tags) attached
	// to this dataset. Tag keys are globally unique. Tag key is expected to be in
	// the namespaced format, for example "123456789012/environment" where
	// 123456789012 is the ID of the parent organization or project resource for
	// this tag key. Tag value is expected to be the short name, for example
	// "Production". See [Tag
	// definitions](https://cloud.google.com/iam/docs/tags-access-control#definitions)
	// for more details.
	ResourceTags map[string]string `protobuf:"bytes,30,rep,name=resource_tags,json=resourceTags,proto3" json:"resource_tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Dataset) Reset() {
	*x = Dataset{}
	mi := &file_google_cloud_bigquery_v2_dataset_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Dataset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dataset) ProtoMessage() {}

func (x *Dataset) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_dataset_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dataset.ProtoReflect.Descriptor instead.
func (*Dataset) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_dataset_proto_rawDescGZIP(), []int{2}
}

func (x *Dataset) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Dataset) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *Dataset) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Dataset) GetSelfLink() string {
	if x != nil {
		return x.SelfLink
	}
	return ""
}

func (x *Dataset) GetDatasetReference() *DatasetReference {
	if x != nil {
		return x.DatasetReference
	}
	return nil
}

func (x *Dataset) GetFriendlyName() *wrapperspb.StringValue {
	if x != nil {
		return x.FriendlyName
	}
	return nil
}

func (x *Dataset) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Dataset) GetDefaultTableExpirationMs() *wrapperspb.Int64Value {
	if x != nil {
		return x.DefaultTableExpirationMs
	}
	return nil
}

func (x *Dataset) GetDefaultPartitionExpirationMs() *wrapperspb.Int64Value {
	if x != nil {
		return x.DefaultPartitionExpirationMs
	}
	return nil
}

func (x *Dataset) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Dataset) GetAccess() []*Access {
	if x != nil {
		return x.Access
	}
	return nil
}

func (x *Dataset) GetCreationTime() int64 {
	if x != nil {
		return x.CreationTime
	}
	return 0
}

func (x *Dataset) GetLastModifiedTime() int64 {
	if x != nil {
		return x.LastModifiedTime
	}
	return 0
}

func (x *Dataset) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *Dataset) GetDefaultEncryptionConfiguration() *EncryptionConfiguration {
	if x != nil {
		return x.DefaultEncryptionConfiguration
	}
	return nil
}

func (x *Dataset) GetSatisfiesPzs() *wrapperspb.BoolValue {
	if x != nil {
		return x.SatisfiesPzs
	}
	return nil
}

func (x *Dataset) GetSatisfiesPzi() *wrapperspb.BoolValue {
	if x != nil {
		return x.SatisfiesPzi
	}
	return nil
}

func (x *Dataset) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Dataset) GetLinkedDatasetSource() *LinkedDatasetSource {
	if x != nil {
		return x.LinkedDatasetSource
	}
	return nil
}

func (x *Dataset) GetLinkedDatasetMetadata() *LinkedDatasetMetadata {
	if x != nil {
		return x.LinkedDatasetMetadata
	}
	return nil
}

func (x *Dataset) GetExternalDatasetReference() *ExternalDatasetReference {
	if x != nil {
		return x.ExternalDatasetReference
	}
	return nil
}

func (x *Dataset) GetExternalCatalogDatasetOptions() *ExternalCatalogDatasetOptions {
	if x != nil {
		return x.ExternalCatalogDatasetOptions
	}
	return nil
}

func (x *Dataset) GetIsCaseInsensitive() *wrapperspb.BoolValue {
	if x != nil {
		return x.IsCaseInsensitive
	}
	return nil
}

func (x *Dataset) GetDefaultCollation() *wrapperspb.StringValue {
	if x != nil {
		return x.DefaultCollation
	}
	return nil
}

func (x *Dataset) GetDefaultRoundingMode() TableFieldSchema_RoundingMode {
	if x != nil {
		return x.DefaultRoundingMode
	}
	return TableFieldSchema_ROUNDING_MODE_UNSPECIFIED
}

func (x *Dataset) GetMaxTimeTravelHours() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxTimeTravelHours
	}
	return nil
}

// Deprecated: Marked as deprecated in google/cloud/bigquery/v2/dataset.proto.
func (x *Dataset) GetTags() []*GcpTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Dataset) GetStorageBillingModel() Dataset_StorageBillingModel {
	if x != nil {
		return x.StorageBillingModel
	}
	return Dataset_STORAGE_BILLING_MODEL_UNSPECIFIED
}

func (x *Dataset) GetRestrictions() *RestrictionConfig {
	if x != nil {
		return x.Restrictions
	}
	return nil
}

func (x *Dataset) GetResourceTags() map[string]string {
	if x != nil {
		return x.ResourceTags
	}
	return nil
}

// A global tag managed by Resource Manager.
// https://cloud.google.com/iam/docs/tags-access-control#definitions
type GcpTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The namespaced friendly name of the tag key, e.g.
	// "12345/environment" where 12345 is org id.
	TagKey string `protobuf:"bytes,1,opt,name=tag_key,json=tagKey,proto3" json:"tag_key,omitempty"`
	// Required. The friendly short name of the tag value, e.g. "production".
	TagValue string `protobuf:"bytes,2,opt,name=tag_value,json=tagValue,proto3" json:"tag_value,omitempty"`
}

func (x *GcpTag) Reset() {
	*x = GcpTag{}
	mi := &file_google_cloud_bigquery_v2_dataset_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GcpTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcpTag) ProtoMessage() {}

func (x *GcpTag) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_dataset_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcpTag.ProtoReflect.Descriptor instead.
func (*GcpTag) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_dataset_proto_rawDescGZIP(), []int{3}
}

func (x *GcpTag) GetTagKey() string {
	if x != nil {
		return x.TagKey
	}
	return ""
}

func (x *GcpTag) GetTagValue() string {
	if x != nil {
		return x.TagValue
	}
	return ""
}

// A dataset source type which refers to another BigQuery dataset.
type LinkedDatasetSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The source dataset reference contains project numbers and not project ids.
	SourceDataset *DatasetReference `protobuf:"bytes,1,opt,name=source_dataset,json=sourceDataset,proto3" json:"source_dataset,omitempty"`
}

func (x *LinkedDatasetSource) Reset() {
	*x = LinkedDatasetSource{}
	mi := &file_google_cloud_bigquery_v2_dataset_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinkedDatasetSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkedDatasetSource) ProtoMessage() {}

func (x *LinkedDatasetSource) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_dataset_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkedDatasetSource.ProtoReflect.Descriptor instead.
func (*LinkedDatasetSource) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_dataset_proto_rawDescGZIP(), []int{4}
}

func (x *LinkedDatasetSource) GetSourceDataset() *DatasetReference {
	if x != nil {
		return x.SourceDataset
	}
	return nil
}

// Metadata about the Linked Dataset.
type LinkedDatasetMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Specifies whether Linked Dataset is currently in a linked
	// state or not.
	LinkState LinkedDatasetMetadata_LinkState `protobuf:"varint,1,opt,name=link_state,json=linkState,proto3,enum=google.cloud.bigquery.v2.LinkedDatasetMetadata_LinkState" json:"link_state,omitempty"`
}

func (x *LinkedDatasetMetadata) Reset() {
	*x = LinkedDatasetMetadata{}
	mi := &file_google_cloud_bigquery_v2_dataset_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinkedDatasetMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkedDatasetMetadata) ProtoMessage() {}

func (x *LinkedDatasetMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_dataset_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkedDatasetMetadata.ProtoReflect.Descriptor instead.
func (*LinkedDatasetMetadata) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_dataset_proto_rawDescGZIP(), []int{5}
}

func (x *LinkedDatasetMetadata) GetLinkState() LinkedDatasetMetadata_LinkState {
	if x != nil {
		return x.LinkState
	}
	return LinkedDatasetMetadata_LINK_STATE_UNSPECIFIED
}

// Request format for getting information about a dataset.
type GetDatasetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Project ID of the requested dataset
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Required. Dataset ID of the requested dataset
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// Optional. Specifies the view that determines which dataset information is
	// returned. By default, metadata and ACL information are returned.
	DatasetView GetDatasetRequest_DatasetView `protobuf:"varint,3,opt,name=dataset_view,json=datasetView,proto3,enum=google.cloud.bigquery.v2.GetDatasetRequest_DatasetView" json:"dataset_view,omitempty"`
	// Optional. The version of the access policy schema to fetch.
	// Valid values are 0, 1, and 3. Requests specifying an invalid value will be
	// rejected.
	//
	// Requests for conditional access policy binding in datasets must specify
	// version 3. Dataset with no conditional role bindings in access policy may
	// specify any valid value or leave the field unset.
	//
	// This field will be mapped to [IAM Policy version]
	// (https://cloud.google.com/iam/docs/policies#versions) and will be used to
	// fetch policy from IAM.
	//
	// If unset or if 0 or 1 value is used for dataset with conditional bindings,
	// access entry with condition will have role string appended by
	// 'withcond' string followed by a hash value. For example :
	//
	//	{
	//	  "access": [
	//	     {
	//	        "role":
	//	        "roles/bigquery.dataViewer_with_conditionalbinding_7a34awqsda",
	//	        "userByEmail": "user@example.com",
	//	     }
	//	  ]
	//	}
	//
	// Please refer https://cloud.google.com/iam/docs/troubleshooting-withcond for
	// more details.
	AccessPolicyVersion int32 `protobuf:"varint,4,opt,name=access_policy_version,json=accessPolicyVersion,proto3" json:"access_policy_version,omitempty"`
}

func (x *GetDatasetRequest) Reset() {
	*x = GetDatasetRequest{}
	mi := &file_google_cloud_bigquery_v2_dataset_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDatasetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatasetRequest) ProtoMessage() {}

func (x *GetDatasetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_dataset_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatasetRequest.ProtoReflect.Descriptor instead.
func (*GetDatasetRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_dataset_proto_rawDescGZIP(), []int{6}
}

func (x *GetDatasetRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GetDatasetRequest) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *GetDatasetRequest) GetDatasetView() GetDatasetRequest_DatasetView {
	if x != nil {
		return x.DatasetView
	}
	return GetDatasetRequest_DATASET_VIEW_UNSPECIFIED
}

func (x *GetDatasetRequest) GetAccessPolicyVersion() int32 {
	if x != nil {
		return x.AccessPolicyVersion
	}
	return 0
}

// Request format for inserting a dataset.
type InsertDatasetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Project ID of the new dataset
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Required. Datasets resource to use for the new dataset
	Dataset *Dataset `protobuf:"bytes,2,opt,name=dataset,proto3" json:"dataset,omitempty"`
	// Optional. The version of the provided access policy schema.
	// Valid values are 0, 1, and 3. Requests specifying an invalid value will be
	// rejected.
	//
	// This version refers to the schema version of the access policy and not the
	// version of access policy. This field's value can be equal or more
	// than the access policy schema provided in the request.
	// For example,
	//   - Requests with conditional access policy binding in datasets must
	//     specify
	//     version 3.
	//   - But dataset with no conditional role bindings in access policy
	//     may specify any valid value or leave the field unset.
	//
	// If unset or if 0 or 1 value is used for dataset with conditional
	// bindings, request will be rejected.
	//
	// This field will be mapped to IAM Policy version
	// (https://cloud.google.com/iam/docs/policies#versions) and will be used to
	// set policy in IAM.
	AccessPolicyVersion int32 `protobuf:"varint,4,opt,name=access_policy_version,json=accessPolicyVersion,proto3" json:"access_policy_version,omitempty"`
}

func (x *InsertDatasetRequest) Reset() {
	*x = InsertDatasetRequest{}
	mi := &file_google_cloud_bigquery_v2_dataset_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InsertDatasetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertDatasetRequest) ProtoMessage() {}

func (x *InsertDatasetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_dataset_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertDatasetRequest.ProtoReflect.Descriptor instead.
func (*InsertDatasetRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_dataset_proto_rawDescGZIP(), []int{7}
}

func (x *InsertDatasetRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *InsertDatasetRequest) GetDataset() *Dataset {
	if x != nil {
		return x.Dataset
	}
	return nil
}

func (x *InsertDatasetRequest) GetAccessPolicyVersion() int32 {
	if x != nil {
		return x.AccessPolicyVersion
	}
	return 0
}

// Message for updating or patching a dataset.
type UpdateOrPatchDatasetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Project ID of the dataset being updated
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Required. Dataset ID of the dataset being updated
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// Required. Datasets resource which will replace or patch the specified
	// dataset.
	Dataset *Dataset `protobuf:"bytes,3,opt,name=dataset,proto3" json:"dataset,omitempty"`
	// Optional. Specifies the fields of dataset that update/patch operation is
	// targeting By default, both metadata and ACL fields are updated.
	UpdateMode UpdateOrPatchDatasetRequest_UpdateMode `protobuf:"varint,4,opt,name=update_mode,json=updateMode,proto3,enum=google.cloud.bigquery.v2.UpdateOrPatchDatasetRequest_UpdateMode" json:"update_mode,omitempty"`
	// Optional. The version of the provided access policy schema.
	// Valid values are 0, 1, and 3. Requests specifying an invalid value will be
	// rejected.
	//
	// This version refers to the schema version of the access policy and not the
	// version of access policy. This field's value can be equal or more
	// than the access policy schema provided in the request.
	// For example,
	//   - Operations updating conditional access policy binding in datasets must
	//     specify
	//     version 3. Some of the operations are :
	//   - Adding a new access policy entry with condition.
	//   - Removing an access policy entry with condition.
	//   - Updating an access policy entry with condition.
	//   - But dataset with no conditional role bindings in access policy
	//     may specify any valid value or leave the field unset.
	//
	// If unset or if 0 or 1 value is used for dataset with conditional
	// bindings, request will be rejected.
	//
	// This field will be mapped to IAM Policy version
	// (https://cloud.google.com/iam/docs/policies#versions) and will be used to
	// set policy in IAM.
	AccessPolicyVersion int32 `protobuf:"varint,5,opt,name=access_policy_version,json=accessPolicyVersion,proto3" json:"access_policy_version,omitempty"`
}

func (x *UpdateOrPatchDatasetRequest) Reset() {
	*x = UpdateOrPatchDatasetRequest{}
	mi := &file_google_cloud_bigquery_v2_dataset_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateOrPatchDatasetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrPatchDatasetRequest) ProtoMessage() {}

func (x *UpdateOrPatchDatasetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_dataset_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrPatchDatasetRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrPatchDatasetRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_dataset_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateOrPatchDatasetRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *UpdateOrPatchDatasetRequest) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *UpdateOrPatchDatasetRequest) GetDataset() *Dataset {
	if x != nil {
		return x.Dataset
	}
	return nil
}

func (x *UpdateOrPatchDatasetRequest) GetUpdateMode() UpdateOrPatchDatasetRequest_UpdateMode {
	if x != nil {
		return x.UpdateMode
	}
	return UpdateOrPatchDatasetRequest_UPDATE_MODE_UNSPECIFIED
}

func (x *UpdateOrPatchDatasetRequest) GetAccessPolicyVersion() int32 {
	if x != nil {
		return x.AccessPolicyVersion
	}
	return 0
}

// Request format for deleting a dataset.
type DeleteDatasetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Project ID of the dataset being deleted
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Required. Dataset ID of dataset being deleted
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// If True, delete all the tables in the dataset.
	// If False and the dataset contains tables, the request will fail.
	// Default is False
	DeleteContents bool `protobuf:"varint,3,opt,name=delete_contents,json=deleteContents,proto3" json:"delete_contents,omitempty"`
}

func (x *DeleteDatasetRequest) Reset() {
	*x = DeleteDatasetRequest{}
	mi := &file_google_cloud_bigquery_v2_dataset_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDatasetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDatasetRequest) ProtoMessage() {}

func (x *DeleteDatasetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_dataset_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDatasetRequest.ProtoReflect.Descriptor instead.
func (*DeleteDatasetRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_dataset_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteDatasetRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DeleteDatasetRequest) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *DeleteDatasetRequest) GetDeleteContents() bool {
	if x != nil {
		return x.DeleteContents
	}
	return false
}

type ListDatasetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Project ID of the datasets to be listed
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// The maximum number of results to return in a single response page.
	// Leverage the page tokens to iterate through the entire collection.
	MaxResults *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=max_results,json=maxResults,proto3" json:"max_results,omitempty"`
	// Page token, returned by a previous call, to request the next page of
	// results
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Whether to list all datasets, including hidden ones
	All bool `protobuf:"varint,4,opt,name=all,proto3" json:"all,omitempty"`
	// An expression for filtering the results of the request by label.
	// The syntax is `labels.<name>[:<value>]`.
	// Multiple filters can be AND-ed together by connecting with a space.
	// Example: `labels.department:receiving labels.active`.
	// See [Filtering datasets using
	// labels](https://cloud.google.com/bigquery/docs/filtering-labels#filtering_datasets_using_labels)
	// for details.
	Filter string `protobuf:"bytes,5,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListDatasetsRequest) Reset() {
	*x = ListDatasetsRequest{}
	mi := &file_google_cloud_bigquery_v2_dataset_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDatasetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDatasetsRequest) ProtoMessage() {}

func (x *ListDatasetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_dataset_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDatasetsRequest.ProtoReflect.Descriptor instead.
func (*ListDatasetsRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_dataset_proto_rawDescGZIP(), []int{10}
}

func (x *ListDatasetsRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ListDatasetsRequest) GetMaxResults() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxResults
	}
	return nil
}

func (x *ListDatasetsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListDatasetsRequest) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

func (x *ListDatasetsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// A dataset resource with only a subset of fields, to be returned in a list of
// datasets.
type ListFormatDataset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource type.
	// This property always returns the value "bigquery#dataset"
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	// The fully-qualified, unique, opaque ID of the dataset.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// The dataset reference.
	// Use this property to access specific parts of the dataset's ID, such as
	// project ID or dataset ID.
	DatasetReference *DatasetReference `protobuf:"bytes,3,opt,name=dataset_reference,json=datasetReference,proto3" json:"dataset_reference,omitempty"`
	// The labels associated with this dataset.
	// You can use these to organize and group your datasets.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// An alternate name for the dataset.  The friendly name is purely
	// decorative in nature.
	FriendlyName *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=friendly_name,json=friendlyName,proto3" json:"friendly_name,omitempty"`
	// The geographic location where the dataset resides.
	Location string `protobuf:"bytes,6,opt,name=location,proto3" json:"location,omitempty"`
	// Output only. Reference to a read-only external dataset defined in data
	// catalogs outside of BigQuery. Filled out when the dataset type is EXTERNAL.
	ExternalDatasetReference *ExternalDatasetReference `protobuf:"bytes,11,opt,name=external_dataset_reference,json=externalDatasetReference,proto3" json:"external_dataset_reference,omitempty"`
}

func (x *ListFormatDataset) Reset() {
	*x = ListFormatDataset{}
	mi := &file_google_cloud_bigquery_v2_dataset_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListFormatDataset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFormatDataset) ProtoMessage() {}

func (x *ListFormatDataset) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_dataset_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFormatDataset.ProtoReflect.Descriptor instead.
func (*ListFormatDataset) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_dataset_proto_rawDescGZIP(), []int{11}
}

func (x *ListFormatDataset) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ListFormatDataset) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListFormatDataset) GetDatasetReference() *DatasetReference {
	if x != nil {
		return x.DatasetReference
	}
	return nil
}

func (x *ListFormatDataset) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ListFormatDataset) GetFriendlyName() *wrapperspb.StringValue {
	if x != nil {
		return x.FriendlyName
	}
	return nil
}

func (x *ListFormatDataset) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *ListFormatDataset) GetExternalDatasetReference() *ExternalDatasetReference {
	if x != nil {
		return x.ExternalDatasetReference
	}
	return nil
}

// Response format for a page of results when listing datasets.
type DatasetList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The resource type.
	// This property always returns the value "bigquery#datasetList"
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	// Output only. A hash value of the results page. You can use this property to
	// determine if the page has changed since the last request.
	Etag string `protobuf:"bytes,2,opt,name=etag,proto3" json:"etag,omitempty"`
	// A token that can be used to request the next results page. This property is
	// omitted on the final results page.
	NextPageToken string `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// An array of the dataset resources in the project.
	// Each resource contains basic information.
	// For full information about a particular dataset resource, use the Datasets:
	// get method. This property is omitted when there are no datasets in the
	// project.
	Datasets []*ListFormatDataset `protobuf:"bytes,4,rep,name=datasets,proto3" json:"datasets,omitempty"`
	// A list of skipped locations that were unreachable. For more information
	// about BigQuery locations, see:
	// https://cloud.google.com/bigquery/docs/locations. Example: "europe-west5"
	Unreachable []string `protobuf:"bytes,5,rep,name=unreachable,proto3" json:"unreachable,omitempty"`
}

func (x *DatasetList) Reset() {
	*x = DatasetList{}
	mi := &file_google_cloud_bigquery_v2_dataset_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatasetList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetList) ProtoMessage() {}

func (x *DatasetList) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_dataset_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetList.ProtoReflect.Descriptor instead.
func (*DatasetList) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_dataset_proto_rawDescGZIP(), []int{12}
}

func (x *DatasetList) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *DatasetList) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *DatasetList) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *DatasetList) GetDatasets() []*ListFormatDataset {
	if x != nil {
		return x.Datasets
	}
	return nil
}

func (x *DatasetList) GetUnreachable() []string {
	if x != nil {
		return x.Unreachable
	}
	return nil
}

// Request format for undeleting a dataset.
type UndeleteDatasetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Project ID of the dataset to be undeleted
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Required. Dataset ID of dataset being deleted
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// Optional. The exact time when the dataset was deleted. If not specified,
	// the most recently deleted version is undeleted. Undeleting a dataset
	// using deletion time is not supported.
	DeletionTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=deletion_time,json=deletionTime,proto3" json:"deletion_time,omitempty"`
}

func (x *UndeleteDatasetRequest) Reset() {
	*x = UndeleteDatasetRequest{}
	mi := &file_google_cloud_bigquery_v2_dataset_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UndeleteDatasetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndeleteDatasetRequest) ProtoMessage() {}

func (x *UndeleteDatasetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_dataset_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UndeleteDatasetRequest.ProtoReflect.Descriptor instead.
func (*UndeleteDatasetRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_dataset_proto_rawDescGZIP(), []int{13}
}

func (x *UndeleteDatasetRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *UndeleteDatasetRequest) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *UndeleteDatasetRequest) GetDeletionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletionTime
	}
	return nil
}

var File_google_cloud_bigquery_v2_dataset_proto protoreflect.FileDescriptor

var file_google_cloud_bigquery_v2_dataset_proto_rawDesc = []byte{
	0x0a, 0x26, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x69, 0x67,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x39, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x69,
	0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2f, 0x76, 0x32, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x69, 0x67, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x5f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x69,
	0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x69,
	0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x65, 0x78, 0x70, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xfa, 0x01, 0x0a, 0x12, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x44, 0x0a, 0x07, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12,
	0x5a, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x42, 0x0a, 0x0a, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x41, 0x52,
	0x47, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x49, 0x45, 0x57, 0x53, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x45, 0x53, 0x10, 0x02, 0x22,
	0xc4, 0x03, 0x0a, 0x06, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x22,
	0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x42, 0x79, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x61, 0x6d, 0x5f, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x61, 0x6d, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x76, 0x69,
	0x65, 0x77, 0x12, 0x44, 0x0a, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x07, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x12, 0x46, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x12, 0x34, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xba, 0x13, 0x0a, 0x07, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x65,
	0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04,
	0x65, 0x74, 0x61, 0x67, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x65, 0x6c,
	0x66, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x5c, 0x0a, 0x11, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76,
	0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x6c, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x0c, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x43, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x1b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x18, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x62, 0x0a, 0x1f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1c, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x45, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x3d, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0c, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x12, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x10, 0x6c, 0x61,
	0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7b, 0x0a, 0x20, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0d, 0x73, 0x61, 0x74, 0x69, 0x73,
	0x66, 0x69, 0x65, 0x73, 0x5f, 0x70, 0x7a, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x0c, 0x73, 0x61, 0x74, 0x69, 0x73, 0x66, 0x69, 0x65, 0x73, 0x50, 0x7a, 0x73, 0x12, 0x44, 0x0a,
	0x0d, 0x73, 0x61, 0x74, 0x69, 0x73, 0x66, 0x69, 0x65, 0x73, 0x5f, 0x70, 0x7a, 0x69, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0c, 0x73, 0x61, 0x74, 0x69, 0x73, 0x66, 0x69, 0x65, 0x73,
	0x50, 0x7a, 0x69, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x66, 0x0a, 0x15,
	0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x13, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x6c, 0x0a, 0x17, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x15, 0x6c, 0x69, 0x6e,
	0x6b, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x75, 0x0a, 0x1a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76,
	0x32, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x18, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x20, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x1d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x4f, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x11, 0x69, 0x73, 0x43, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x4e, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f,
	0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x70, 0x0a, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x53, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x72,
	0x61, 0x76, 0x65, 0x6c, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x47, 0x63, 0x70, 0x54, 0x61, 0x67, 0x42, 0x05, 0xe0, 0x41, 0x03, 0x18, 0x01,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x6e, 0x0a, 0x15, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x13, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x57, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x06, 0xe0, 0x41, 0x01, 0xe0, 0x41,
	0x03, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x5d, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76,
	0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61, 0x67, 0x73, 0x1a, 0x39,
	0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x57, 0x0a, 0x13, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x42, 0x49, 0x4c,
	0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x4f, 0x47, 0x49,
	0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x48, 0x59, 0x53, 0x49, 0x43, 0x41,
	0x4c, 0x10, 0x02, 0x22, 0x48, 0x0a, 0x06, 0x47, 0x63, 0x70, 0x54, 0x61, 0x67, 0x12, 0x1c, 0x0a,
	0x07, 0x74, 0x61, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x06, 0x74, 0x61, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x09, 0x74,
	0x61, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x08, 0x74, 0x61, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x68, 0x0a,
	0x13, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x22, 0xb9, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x6e, 0x6b,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x5d, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x22, 0x41, 0x0a, 0x09, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a,
	0x16, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x49, 0x4e,
	0x4b, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x4e, 0x4c, 0x49, 0x4e, 0x4b, 0x45,
	0x44, 0x10, 0x02, 0x22, 0xc3, 0x02, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x5f, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x69, 0x65,
	0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x69, 0x65, 0x77,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x69,
	0x65, 0x77, 0x12, 0x37, 0x0a, 0x15, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x13, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4c, 0x0a, 0x0b, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x69, 0x65, 0x77, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x41,
	0x54, 0x41, 0x53, 0x45, 0x54, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x45, 0x54, 0x41,
	0x44, 0x41, 0x54, 0x41, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x43, 0x4c, 0x10, 0x02, 0x12,
	0x08, 0x0a, 0x04, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x03, 0x22, 0xb5, 0x01, 0x0a, 0x14, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x37, 0x0a, 0x15, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x13, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0xa9, 0x03, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x66, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x50, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x15, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x13, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x5f, 0x0a, 0x0a,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x4c, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x03, 0x22, 0x87, 0x01,
	0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xc1, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03,
	0x61, 0x6c, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xf2, 0x03, 0x0a, 0x11,
	0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x57, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x4f,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69,
	0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x41, 0x0a, 0x0d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x75,
	0x0a, 0x1a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x18, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xd2, 0x01, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x65, 0x74, 0x61,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x65, 0x74,
	0x61, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x47, 0x0a, 0x08, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63,
	0x68, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x16, 0x55, 0x6e, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x32, 0xf9,
	0x0a, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0xa2, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x12, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x22, 0x44, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3e, 0x12, 0x3c, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x12, 0xa2, 0x01, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x22, 0x3e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x38, 0x3a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x22, 0x2d, 0x2f, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x3d,
	0x2a, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x12, 0xb7, 0x01, 0x0a, 0x0c,
	0x50, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x35, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x50, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x22, 0x4d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x47, 0x3a, 0x07,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x32, 0x3c, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x12, 0xb8, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69,
	0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x22, 0x4d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x47, 0x3a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x1a, 0x3c, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32,
	0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d,
	0x12, 0x9d, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x12, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x44, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x3e, 0x2a, 0x3c, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32,
	0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d,
	0x12, 0x9b, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x73, 0x12, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12,
	0x2d, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x12, 0xb8,
	0x01, 0x0a, 0x0f, 0x55, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x12, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x6e,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x22, 0x50, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4a, 0x3a,
	0x01, 0x2a, 0x22, 0x45, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32,
	0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d,
	0x3a, 0x75, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x1a, 0xae, 0x01, 0xca, 0x41, 0x17, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x90, 0x01, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a,
	0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74,
	0x68, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x72, 0x65, 0x61, 0x64, 0x2d, 0x6f, 0x6e, 0x6c, 0x79, 0x42, 0x69, 0x0a, 0x1c, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x42, 0x0c, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x3b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x69,
	0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x70, 0x62, 0x3b, 0x62, 0x69, 0x67, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_bigquery_v2_dataset_proto_rawDescOnce sync.Once
	file_google_cloud_bigquery_v2_dataset_proto_rawDescData = file_google_cloud_bigquery_v2_dataset_proto_rawDesc
)

func file_google_cloud_bigquery_v2_dataset_proto_rawDescGZIP() []byte {
	file_google_cloud_bigquery_v2_dataset_proto_rawDescOnce.Do(func() {
		file_google_cloud_bigquery_v2_dataset_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_bigquery_v2_dataset_proto_rawDescData)
	})
	return file_google_cloud_bigquery_v2_dataset_proto_rawDescData
}

var file_google_cloud_bigquery_v2_dataset_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_google_cloud_bigquery_v2_dataset_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_google_cloud_bigquery_v2_dataset_proto_goTypes = []any{
	(DatasetAccessEntry_TargetType)(0),          // 0: google.cloud.bigquery.v2.DatasetAccessEntry.TargetType
	(Dataset_StorageBillingModel)(0),            // 1: google.cloud.bigquery.v2.Dataset.StorageBillingModel
	(LinkedDatasetMetadata_LinkState)(0),        // 2: google.cloud.bigquery.v2.LinkedDatasetMetadata.LinkState
	(GetDatasetRequest_DatasetView)(0),          // 3: google.cloud.bigquery.v2.GetDatasetRequest.DatasetView
	(UpdateOrPatchDatasetRequest_UpdateMode)(0), // 4: google.cloud.bigquery.v2.UpdateOrPatchDatasetRequest.UpdateMode
	(*DatasetAccessEntry)(nil),                  // 5: google.cloud.bigquery.v2.DatasetAccessEntry
	(*Access)(nil),                              // 6: google.cloud.bigquery.v2.Access
	(*Dataset)(nil),                             // 7: google.cloud.bigquery.v2.Dataset
	(*GcpTag)(nil),                              // 8: google.cloud.bigquery.v2.GcpTag
	(*LinkedDatasetSource)(nil),                 // 9: google.cloud.bigquery.v2.LinkedDatasetSource
	(*LinkedDatasetMetadata)(nil),               // 10: google.cloud.bigquery.v2.LinkedDatasetMetadata
	(*GetDatasetRequest)(nil),                   // 11: google.cloud.bigquery.v2.GetDatasetRequest
	(*InsertDatasetRequest)(nil),                // 12: google.cloud.bigquery.v2.InsertDatasetRequest
	(*UpdateOrPatchDatasetRequest)(nil),         // 13: google.cloud.bigquery.v2.UpdateOrPatchDatasetRequest
	(*DeleteDatasetRequest)(nil),                // 14: google.cloud.bigquery.v2.DeleteDatasetRequest
	(*ListDatasetsRequest)(nil),                 // 15: google.cloud.bigquery.v2.ListDatasetsRequest
	(*ListFormatDataset)(nil),                   // 16: google.cloud.bigquery.v2.ListFormatDataset
	(*DatasetList)(nil),                         // 17: google.cloud.bigquery.v2.DatasetList
	(*UndeleteDatasetRequest)(nil),              // 18: google.cloud.bigquery.v2.UndeleteDatasetRequest
	nil,                                         // 19: google.cloud.bigquery.v2.Dataset.LabelsEntry
	nil,                                         // 20: google.cloud.bigquery.v2.Dataset.ResourceTagsEntry
	nil,                                         // 21: google.cloud.bigquery.v2.ListFormatDataset.LabelsEntry
	(*DatasetReference)(nil),                    // 22: google.cloud.bigquery.v2.DatasetReference
	(*TableReference)(nil),                      // 23: google.cloud.bigquery.v2.TableReference
	(*RoutineReference)(nil),                    // 24: google.cloud.bigquery.v2.RoutineReference
	(*expr.Expr)(nil),                           // 25: google.type.Expr
	(*wrapperspb.StringValue)(nil),              // 26: google.protobuf.StringValue
	(*wrapperspb.Int64Value)(nil),               // 27: google.protobuf.Int64Value
	(*EncryptionConfiguration)(nil),             // 28: google.cloud.bigquery.v2.EncryptionConfiguration
	(*wrapperspb.BoolValue)(nil),                // 29: google.protobuf.BoolValue
	(*ExternalDatasetReference)(nil),            // 30: google.cloud.bigquery.v2.ExternalDatasetReference
	(*ExternalCatalogDatasetOptions)(nil),       // 31: google.cloud.bigquery.v2.ExternalCatalogDatasetOptions
	(TableFieldSchema_RoundingMode)(0),          // 32: google.cloud.bigquery.v2.TableFieldSchema.RoundingMode
	(*RestrictionConfig)(nil),                   // 33: google.cloud.bigquery.v2.RestrictionConfig
	(*wrapperspb.UInt32Value)(nil),              // 34: google.protobuf.UInt32Value
	(*timestamppb.Timestamp)(nil),               // 35: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                       // 36: google.protobuf.Empty
}
var file_google_cloud_bigquery_v2_dataset_proto_depIdxs = []int32{
	22, // 0: google.cloud.bigquery.v2.DatasetAccessEntry.dataset:type_name -> google.cloud.bigquery.v2.DatasetReference
	0,  // 1: google.cloud.bigquery.v2.DatasetAccessEntry.target_types:type_name -> google.cloud.bigquery.v2.DatasetAccessEntry.TargetType
	23, // 2: google.cloud.bigquery.v2.Access.view:type_name -> google.cloud.bigquery.v2.TableReference
	24, // 3: google.cloud.bigquery.v2.Access.routine:type_name -> google.cloud.bigquery.v2.RoutineReference
	5,  // 4: google.cloud.bigquery.v2.Access.dataset:type_name -> google.cloud.bigquery.v2.DatasetAccessEntry
	25, // 5: google.cloud.bigquery.v2.Access.condition:type_name -> google.type.Expr
	22, // 6: google.cloud.bigquery.v2.Dataset.dataset_reference:type_name -> google.cloud.bigquery.v2.DatasetReference
	26, // 7: google.cloud.bigquery.v2.Dataset.friendly_name:type_name -> google.protobuf.StringValue
	26, // 8: google.cloud.bigquery.v2.Dataset.description:type_name -> google.protobuf.StringValue
	27, // 9: google.cloud.bigquery.v2.Dataset.default_table_expiration_ms:type_name -> google.protobuf.Int64Value
	27, // 10: google.cloud.bigquery.v2.Dataset.default_partition_expiration_ms:type_name -> google.protobuf.Int64Value
	19, // 11: google.cloud.bigquery.v2.Dataset.labels:type_name -> google.cloud.bigquery.v2.Dataset.LabelsEntry
	6,  // 12: google.cloud.bigquery.v2.Dataset.access:type_name -> google.cloud.bigquery.v2.Access
	28, // 13: google.cloud.bigquery.v2.Dataset.default_encryption_configuration:type_name -> google.cloud.bigquery.v2.EncryptionConfiguration
	29, // 14: google.cloud.bigquery.v2.Dataset.satisfies_pzs:type_name -> google.protobuf.BoolValue
	29, // 15: google.cloud.bigquery.v2.Dataset.satisfies_pzi:type_name -> google.protobuf.BoolValue
	9,  // 16: google.cloud.bigquery.v2.Dataset.linked_dataset_source:type_name -> google.cloud.bigquery.v2.LinkedDatasetSource
	10, // 17: google.cloud.bigquery.v2.Dataset.linked_dataset_metadata:type_name -> google.cloud.bigquery.v2.LinkedDatasetMetadata
	30, // 18: google.cloud.bigquery.v2.Dataset.external_dataset_reference:type_name -> google.cloud.bigquery.v2.ExternalDatasetReference
	31, // 19: google.cloud.bigquery.v2.Dataset.external_catalog_dataset_options:type_name -> google.cloud.bigquery.v2.ExternalCatalogDatasetOptions
	29, // 20: google.cloud.bigquery.v2.Dataset.is_case_insensitive:type_name -> google.protobuf.BoolValue
	26, // 21: google.cloud.bigquery.v2.Dataset.default_collation:type_name -> google.protobuf.StringValue
	32, // 22: google.cloud.bigquery.v2.Dataset.default_rounding_mode:type_name -> google.cloud.bigquery.v2.TableFieldSchema.RoundingMode
	27, // 23: google.cloud.bigquery.v2.Dataset.max_time_travel_hours:type_name -> google.protobuf.Int64Value
	8,  // 24: google.cloud.bigquery.v2.Dataset.tags:type_name -> google.cloud.bigquery.v2.GcpTag
	1,  // 25: google.cloud.bigquery.v2.Dataset.storage_billing_model:type_name -> google.cloud.bigquery.v2.Dataset.StorageBillingModel
	33, // 26: google.cloud.bigquery.v2.Dataset.restrictions:type_name -> google.cloud.bigquery.v2.RestrictionConfig
	20, // 27: google.cloud.bigquery.v2.Dataset.resource_tags:type_name -> google.cloud.bigquery.v2.Dataset.ResourceTagsEntry
	22, // 28: google.cloud.bigquery.v2.LinkedDatasetSource.source_dataset:type_name -> google.cloud.bigquery.v2.DatasetReference
	2,  // 29: google.cloud.bigquery.v2.LinkedDatasetMetadata.link_state:type_name -> google.cloud.bigquery.v2.LinkedDatasetMetadata.LinkState
	3,  // 30: google.cloud.bigquery.v2.GetDatasetRequest.dataset_view:type_name -> google.cloud.bigquery.v2.GetDatasetRequest.DatasetView
	7,  // 31: google.cloud.bigquery.v2.InsertDatasetRequest.dataset:type_name -> google.cloud.bigquery.v2.Dataset
	7,  // 32: google.cloud.bigquery.v2.UpdateOrPatchDatasetRequest.dataset:type_name -> google.cloud.bigquery.v2.Dataset
	4,  // 33: google.cloud.bigquery.v2.UpdateOrPatchDatasetRequest.update_mode:type_name -> google.cloud.bigquery.v2.UpdateOrPatchDatasetRequest.UpdateMode
	34, // 34: google.cloud.bigquery.v2.ListDatasetsRequest.max_results:type_name -> google.protobuf.UInt32Value
	22, // 35: google.cloud.bigquery.v2.ListFormatDataset.dataset_reference:type_name -> google.cloud.bigquery.v2.DatasetReference
	21, // 36: google.cloud.bigquery.v2.ListFormatDataset.labels:type_name -> google.cloud.bigquery.v2.ListFormatDataset.LabelsEntry
	26, // 37: google.cloud.bigquery.v2.ListFormatDataset.friendly_name:type_name -> google.protobuf.StringValue
	30, // 38: google.cloud.bigquery.v2.ListFormatDataset.external_dataset_reference:type_name -> google.cloud.bigquery.v2.ExternalDatasetReference
	16, // 39: google.cloud.bigquery.v2.DatasetList.datasets:type_name -> google.cloud.bigquery.v2.ListFormatDataset
	35, // 40: google.cloud.bigquery.v2.UndeleteDatasetRequest.deletion_time:type_name -> google.protobuf.Timestamp
	11, // 41: google.cloud.bigquery.v2.DatasetService.GetDataset:input_type -> google.cloud.bigquery.v2.GetDatasetRequest
	12, // 42: google.cloud.bigquery.v2.DatasetService.InsertDataset:input_type -> google.cloud.bigquery.v2.InsertDatasetRequest
	13, // 43: google.cloud.bigquery.v2.DatasetService.PatchDataset:input_type -> google.cloud.bigquery.v2.UpdateOrPatchDatasetRequest
	13, // 44: google.cloud.bigquery.v2.DatasetService.UpdateDataset:input_type -> google.cloud.bigquery.v2.UpdateOrPatchDatasetRequest
	14, // 45: google.cloud.bigquery.v2.DatasetService.DeleteDataset:input_type -> google.cloud.bigquery.v2.DeleteDatasetRequest
	15, // 46: google.cloud.bigquery.v2.DatasetService.ListDatasets:input_type -> google.cloud.bigquery.v2.ListDatasetsRequest
	18, // 47: google.cloud.bigquery.v2.DatasetService.UndeleteDataset:input_type -> google.cloud.bigquery.v2.UndeleteDatasetRequest
	7,  // 48: google.cloud.bigquery.v2.DatasetService.GetDataset:output_type -> google.cloud.bigquery.v2.Dataset
	7,  // 49: google.cloud.bigquery.v2.DatasetService.InsertDataset:output_type -> google.cloud.bigquery.v2.Dataset
	7,  // 50: google.cloud.bigquery.v2.DatasetService.PatchDataset:output_type -> google.cloud.bigquery.v2.Dataset
	7,  // 51: google.cloud.bigquery.v2.DatasetService.UpdateDataset:output_type -> google.cloud.bigquery.v2.Dataset
	36, // 52: google.cloud.bigquery.v2.DatasetService.DeleteDataset:output_type -> google.protobuf.Empty
	17, // 53: google.cloud.bigquery.v2.DatasetService.ListDatasets:output_type -> google.cloud.bigquery.v2.DatasetList
	7,  // 54: google.cloud.bigquery.v2.DatasetService.UndeleteDataset:output_type -> google.cloud.bigquery.v2.Dataset
	48, // [48:55] is the sub-list for method output_type
	41, // [41:48] is the sub-list for method input_type
	41, // [41:41] is the sub-list for extension type_name
	41, // [41:41] is the sub-list for extension extendee
	0,  // [0:41] is the sub-list for field type_name
}

func init() { file_google_cloud_bigquery_v2_dataset_proto_init() }
func file_google_cloud_bigquery_v2_dataset_proto_init() {
	if File_google_cloud_bigquery_v2_dataset_proto != nil {
		return
	}
	file_google_cloud_bigquery_v2_dataset_reference_proto_init()
	file_google_cloud_bigquery_v2_encryption_config_proto_init()
	file_google_cloud_bigquery_v2_external_catalog_dataset_options_proto_init()
	file_google_cloud_bigquery_v2_external_dataset_reference_proto_init()
	file_google_cloud_bigquery_v2_restriction_config_proto_init()
	file_google_cloud_bigquery_v2_routine_reference_proto_init()
	file_google_cloud_bigquery_v2_table_reference_proto_init()
	file_google_cloud_bigquery_v2_table_schema_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_bigquery_v2_dataset_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_google_cloud_bigquery_v2_dataset_proto_goTypes,
		DependencyIndexes: file_google_cloud_bigquery_v2_dataset_proto_depIdxs,
		EnumInfos:         file_google_cloud_bigquery_v2_dataset_proto_enumTypes,
		MessageInfos:      file_google_cloud_bigquery_v2_dataset_proto_msgTypes,
	}.Build()
	File_google_cloud_bigquery_v2_dataset_proto = out.File
	file_google_cloud_bigquery_v2_dataset_proto_rawDesc = nil
	file_google_cloud_bigquery_v2_dataset_proto_goTypes = nil
	file_google_cloud_bigquery_v2_dataset_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DatasetServiceClient is the client API for DatasetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DatasetServiceClient interface {
	// Returns the dataset specified by datasetID.
	GetDataset(ctx context.Context, in *GetDatasetRequest, opts ...grpc.CallOption) (*Dataset, error)
	// Creates a new empty dataset.
	InsertDataset(ctx context.Context, in *InsertDatasetRequest, opts ...grpc.CallOption) (*Dataset, error)
	// Updates information in an existing dataset. The update method replaces the
	// entire dataset resource, whereas the patch method only replaces fields that
	// are provided in the submitted dataset resource.
	// This method supports RFC5789 patch semantics.
	PatchDataset(ctx context.Context, in *UpdateOrPatchDatasetRequest, opts ...grpc.CallOption) (*Dataset, error)
	// Updates information in an existing dataset. The update method replaces the
	// entire dataset resource, whereas the patch method only replaces fields that
	// are provided in the submitted dataset resource.
	UpdateDataset(ctx context.Context, in *UpdateOrPatchDatasetRequest, opts ...grpc.CallOption) (*Dataset, error)
	// Deletes the dataset specified by the datasetId value. Before you can delete
	// a dataset, you must delete all its tables, either manually or by specifying
	// deleteContents. Immediately after deletion, you can create another dataset
	// with the same name.
	DeleteDataset(ctx context.Context, in *DeleteDatasetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Lists all datasets in the specified project to which the user has been
	// granted the READER dataset role.
	ListDatasets(ctx context.Context, in *ListDatasetsRequest, opts ...grpc.CallOption) (*DatasetList, error)
	// Undeletes a dataset which is within time travel window based on datasetId.
	// If a time is specified, the dataset version deleted at that time is
	// undeleted, else the last live version is undeleted.
	UndeleteDataset(ctx context.Context, in *UndeleteDatasetRequest, opts ...grpc.CallOption) (*Dataset, error)
}

type datasetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDatasetServiceClient(cc grpc.ClientConnInterface) DatasetServiceClient {
	return &datasetServiceClient{cc}
}

func (c *datasetServiceClient) GetDataset(ctx context.Context, in *GetDatasetRequest, opts ...grpc.CallOption) (*Dataset, error) {
	out := new(Dataset)
	err := c.cc.Invoke(ctx, "/google.cloud.bigquery.v2.DatasetService/GetDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) InsertDataset(ctx context.Context, in *InsertDatasetRequest, opts ...grpc.CallOption) (*Dataset, error) {
	out := new(Dataset)
	err := c.cc.Invoke(ctx, "/google.cloud.bigquery.v2.DatasetService/InsertDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) PatchDataset(ctx context.Context, in *UpdateOrPatchDatasetRequest, opts ...grpc.CallOption) (*Dataset, error) {
	out := new(Dataset)
	err := c.cc.Invoke(ctx, "/google.cloud.bigquery.v2.DatasetService/PatchDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) UpdateDataset(ctx context.Context, in *UpdateOrPatchDatasetRequest, opts ...grpc.CallOption) (*Dataset, error) {
	out := new(Dataset)
	err := c.cc.Invoke(ctx, "/google.cloud.bigquery.v2.DatasetService/UpdateDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) DeleteDataset(ctx context.Context, in *DeleteDatasetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/google.cloud.bigquery.v2.DatasetService/DeleteDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) ListDatasets(ctx context.Context, in *ListDatasetsRequest, opts ...grpc.CallOption) (*DatasetList, error) {
	out := new(DatasetList)
	err := c.cc.Invoke(ctx, "/google.cloud.bigquery.v2.DatasetService/ListDatasets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) UndeleteDataset(ctx context.Context, in *UndeleteDatasetRequest, opts ...grpc.CallOption) (*Dataset, error) {
	out := new(Dataset)
	err := c.cc.Invoke(ctx, "/google.cloud.bigquery.v2.DatasetService/UndeleteDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatasetServiceServer is the server API for DatasetService service.
type DatasetServiceServer interface {
	// Returns the dataset specified by datasetID.
	GetDataset(context.Context, *GetDatasetRequest) (*Dataset, error)
	// Creates a new empty dataset.
	InsertDataset(context.Context, *InsertDatasetRequest) (*Dataset, error)
	// Updates information in an existing dataset. The update method replaces the
	// entire dataset resource, whereas the patch method only replaces fields that
	// are provided in the submitted dataset resource.
	// This method supports RFC5789 patch semantics.
	PatchDataset(context.Context, *UpdateOrPatchDatasetRequest) (*Dataset, error)
	// Updates information in an existing dataset. The update method replaces the
	// entire dataset resource, whereas the patch method only replaces fields that
	// are provided in the submitted dataset resource.
	UpdateDataset(context.Context, *UpdateOrPatchDatasetRequest) (*Dataset, error)
	// Deletes the dataset specified by the datasetId value. Before you can delete
	// a dataset, you must delete all its tables, either manually or by specifying
	// deleteContents. Immediately after deletion, you can create another dataset
	// with the same name.
	DeleteDataset(context.Context, *DeleteDatasetRequest) (*emptypb.Empty, error)
	// Lists all datasets in the specified project to which the user has been
	// granted the READER dataset role.
	ListDatasets(context.Context, *ListDatasetsRequest) (*DatasetList, error)
	// Undeletes a dataset which is within time travel window based on datasetId.
	// If a time is specified, the dataset version deleted at that time is
	// undeleted, else the last live version is undeleted.
	UndeleteDataset(context.Context, *UndeleteDatasetRequest) (*Dataset, error)
}

// UnimplementedDatasetServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDatasetServiceServer struct {
}

func (*UnimplementedDatasetServiceServer) GetDataset(context.Context, *GetDatasetRequest) (*Dataset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataset not implemented")
}
func (*UnimplementedDatasetServiceServer) InsertDataset(context.Context, *InsertDatasetRequest) (*Dataset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertDataset not implemented")
}
func (*UnimplementedDatasetServiceServer) PatchDataset(context.Context, *UpdateOrPatchDatasetRequest) (*Dataset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchDataset not implemented")
}
func (*UnimplementedDatasetServiceServer) UpdateDataset(context.Context, *UpdateOrPatchDatasetRequest) (*Dataset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDataset not implemented")
}
func (*UnimplementedDatasetServiceServer) DeleteDataset(context.Context, *DeleteDatasetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataset not implemented")
}
func (*UnimplementedDatasetServiceServer) ListDatasets(context.Context, *ListDatasetsRequest) (*DatasetList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDatasets not implemented")
}
func (*UnimplementedDatasetServiceServer) UndeleteDataset(context.Context, *UndeleteDatasetRequest) (*Dataset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndeleteDataset not implemented")
}

func RegisterDatasetServiceServer(s *grpc.Server, srv DatasetServiceServer) {
	s.RegisterService(&_DatasetService_serviceDesc, srv)
}

func _DatasetService_GetDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).GetDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.bigquery.v2.DatasetService/GetDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).GetDataset(ctx, req.(*GetDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_InsertDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).InsertDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.bigquery.v2.DatasetService/InsertDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).InsertDataset(ctx, req.(*InsertDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_PatchDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrPatchDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).PatchDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.bigquery.v2.DatasetService/PatchDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).PatchDataset(ctx, req.(*UpdateOrPatchDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_UpdateDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrPatchDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).UpdateDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.bigquery.v2.DatasetService/UpdateDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).UpdateDataset(ctx, req.(*UpdateOrPatchDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_DeleteDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).DeleteDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.bigquery.v2.DatasetService/DeleteDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).DeleteDataset(ctx, req.(*DeleteDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_ListDatasets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDatasetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).ListDatasets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.bigquery.v2.DatasetService/ListDatasets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).ListDatasets(ctx, req.(*ListDatasetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_UndeleteDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndeleteDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).UndeleteDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.bigquery.v2.DatasetService/UndeleteDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).UndeleteDataset(ctx, req.(*UndeleteDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DatasetService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.bigquery.v2.DatasetService",
	HandlerType: (*DatasetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDataset",
			Handler:    _DatasetService_GetDataset_Handler,
		},
		{
			MethodName: "InsertDataset",
			Handler:    _DatasetService_InsertDataset_Handler,
		},
		{
			MethodName: "PatchDataset",
			Handler:    _DatasetService_PatchDataset_Handler,
		},
		{
			MethodName: "UpdateDataset",
			Handler:    _DatasetService_UpdateDataset_Handler,
		},
		{
			MethodName: "DeleteDataset",
			Handler:    _DatasetService_DeleteDataset_Handler,
		},
		{
			MethodName: "ListDatasets",
			Handler:    _DatasetService_ListDatasets_Handler,
		},
		{
			MethodName: "UndeleteDataset",
			Handler:    _DatasetService_UndeleteDataset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/bigquery/v2/dataset.proto",
}
