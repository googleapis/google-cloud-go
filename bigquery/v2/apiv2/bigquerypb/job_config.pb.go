// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.7
// source: google/cloud/bigquery/v2/job_config.proto

package bigquerypb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// KeyResultStatementKind controls how the key result is determined.
type ScriptOptions_KeyResultStatementKind int32

const (
	// Default value.
	ScriptOptions_KEY_RESULT_STATEMENT_KIND_UNSPECIFIED ScriptOptions_KeyResultStatementKind = 0
	// The last result determines the key result.
	ScriptOptions_LAST ScriptOptions_KeyResultStatementKind = 1
	// The first SELECT statement determines the key result.
	ScriptOptions_FIRST_SELECT ScriptOptions_KeyResultStatementKind = 2
)

// Enum value maps for ScriptOptions_KeyResultStatementKind.
var (
	ScriptOptions_KeyResultStatementKind_name = map[int32]string{
		0: "KEY_RESULT_STATEMENT_KIND_UNSPECIFIED",
		1: "LAST",
		2: "FIRST_SELECT",
	}
	ScriptOptions_KeyResultStatementKind_value = map[string]int32{
		"KEY_RESULT_STATEMENT_KIND_UNSPECIFIED": 0,
		"LAST":                                  1,
		"FIRST_SELECT":                          2,
	}
)

func (x ScriptOptions_KeyResultStatementKind) Enum() *ScriptOptions_KeyResultStatementKind {
	p := new(ScriptOptions_KeyResultStatementKind)
	*p = x
	return p
}

func (x ScriptOptions_KeyResultStatementKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScriptOptions_KeyResultStatementKind) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_bigquery_v2_job_config_proto_enumTypes[0].Descriptor()
}

func (ScriptOptions_KeyResultStatementKind) Type() protoreflect.EnumType {
	return &file_google_cloud_bigquery_v2_job_config_proto_enumTypes[0]
}

func (x ScriptOptions_KeyResultStatementKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScriptOptions_KeyResultStatementKind.Descriptor instead.
func (ScriptOptions_KeyResultStatementKind) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_config_proto_rawDescGZIP(), []int{3, 0}
}

// Indicates the character map used for column names.
type JobConfigurationLoad_ColumnNameCharacterMap int32

const (
	// Unspecified column name character map.
	JobConfigurationLoad_COLUMN_NAME_CHARACTER_MAP_UNSPECIFIED JobConfigurationLoad_ColumnNameCharacterMap = 0
	// Support flexible column name and reject invalid column names.
	JobConfigurationLoad_STRICT JobConfigurationLoad_ColumnNameCharacterMap = 1
	// Support alphanumeric + underscore characters and names must start with a
	// letter or underscore. Invalid column names will be normalized.
	JobConfigurationLoad_V1 JobConfigurationLoad_ColumnNameCharacterMap = 2
	// Support flexible column name. Invalid column names will be normalized.
	JobConfigurationLoad_V2 JobConfigurationLoad_ColumnNameCharacterMap = 3
)

// Enum value maps for JobConfigurationLoad_ColumnNameCharacterMap.
var (
	JobConfigurationLoad_ColumnNameCharacterMap_name = map[int32]string{
		0: "COLUMN_NAME_CHARACTER_MAP_UNSPECIFIED",
		1: "STRICT",
		2: "V1",
		3: "V2",
	}
	JobConfigurationLoad_ColumnNameCharacterMap_value = map[string]int32{
		"COLUMN_NAME_CHARACTER_MAP_UNSPECIFIED": 0,
		"STRICT":                                1,
		"V1":                                    2,
		"V2":                                    3,
	}
)

func (x JobConfigurationLoad_ColumnNameCharacterMap) Enum() *JobConfigurationLoad_ColumnNameCharacterMap {
	p := new(JobConfigurationLoad_ColumnNameCharacterMap)
	*p = x
	return p
}

func (x JobConfigurationLoad_ColumnNameCharacterMap) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobConfigurationLoad_ColumnNameCharacterMap) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_bigquery_v2_job_config_proto_enumTypes[1].Descriptor()
}

func (JobConfigurationLoad_ColumnNameCharacterMap) Type() protoreflect.EnumType {
	return &file_google_cloud_bigquery_v2_job_config_proto_enumTypes[1]
}

func (x JobConfigurationLoad_ColumnNameCharacterMap) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobConfigurationLoad_ColumnNameCharacterMap.Descriptor instead.
func (JobConfigurationLoad_ColumnNameCharacterMap) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_config_proto_rawDescGZIP(), []int{4, 0}
}

// Indicates the strategy used to match loaded columns to the schema.
type JobConfigurationLoad_SourceColumnMatch int32

const (
	// Uses sensible defaults based on how the schema is provided. If autodetect
	// is used, then columns are matched by name. Otherwise, columns are matched
	// by position. This is done to keep the behavior backward-compatible.
	JobConfigurationLoad_SOURCE_COLUMN_MATCH_UNSPECIFIED JobConfigurationLoad_SourceColumnMatch = 0
	// Matches by position. This assumes that the columns are ordered the same
	// way as the schema.
	JobConfigurationLoad_POSITION JobConfigurationLoad_SourceColumnMatch = 1
	// Matches by name. This reads the header row as column names and reorders
	// columns to match the field names in the schema.
	JobConfigurationLoad_NAME JobConfigurationLoad_SourceColumnMatch = 2
)

// Enum value maps for JobConfigurationLoad_SourceColumnMatch.
var (
	JobConfigurationLoad_SourceColumnMatch_name = map[int32]string{
		0: "SOURCE_COLUMN_MATCH_UNSPECIFIED",
		1: "POSITION",
		2: "NAME",
	}
	JobConfigurationLoad_SourceColumnMatch_value = map[string]int32{
		"SOURCE_COLUMN_MATCH_UNSPECIFIED": 0,
		"POSITION":                        1,
		"NAME":                            2,
	}
)

func (x JobConfigurationLoad_SourceColumnMatch) Enum() *JobConfigurationLoad_SourceColumnMatch {
	p := new(JobConfigurationLoad_SourceColumnMatch)
	*p = x
	return p
}

func (x JobConfigurationLoad_SourceColumnMatch) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobConfigurationLoad_SourceColumnMatch) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_bigquery_v2_job_config_proto_enumTypes[2].Descriptor()
}

func (JobConfigurationLoad_SourceColumnMatch) Type() protoreflect.EnumType {
	return &file_google_cloud_bigquery_v2_job_config_proto_enumTypes[2]
}

func (x JobConfigurationLoad_SourceColumnMatch) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobConfigurationLoad_SourceColumnMatch.Descriptor instead.
func (JobConfigurationLoad_SourceColumnMatch) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_config_proto_rawDescGZIP(), []int{4, 1}
}

// Indicates different operation types supported in table copy job.
type JobConfigurationTableCopy_OperationType int32

const (
	// Unspecified operation type.
	JobConfigurationTableCopy_OPERATION_TYPE_UNSPECIFIED JobConfigurationTableCopy_OperationType = 0
	// The source and destination table have the same table type.
	JobConfigurationTableCopy_COPY JobConfigurationTableCopy_OperationType = 1
	// The source table type is TABLE and
	// the destination table type is SNAPSHOT.
	JobConfigurationTableCopy_SNAPSHOT JobConfigurationTableCopy_OperationType = 2
	// The source table type is SNAPSHOT and
	// the destination table type is TABLE.
	JobConfigurationTableCopy_RESTORE JobConfigurationTableCopy_OperationType = 3
	// The source and destination table have the same table type,
	// but only bill for unique data.
	JobConfigurationTableCopy_CLONE JobConfigurationTableCopy_OperationType = 4
)

// Enum value maps for JobConfigurationTableCopy_OperationType.
var (
	JobConfigurationTableCopy_OperationType_name = map[int32]string{
		0: "OPERATION_TYPE_UNSPECIFIED",
		1: "COPY",
		2: "SNAPSHOT",
		3: "RESTORE",
		4: "CLONE",
	}
	JobConfigurationTableCopy_OperationType_value = map[string]int32{
		"OPERATION_TYPE_UNSPECIFIED": 0,
		"COPY":                       1,
		"SNAPSHOT":                   2,
		"RESTORE":                    3,
		"CLONE":                      4,
	}
)

func (x JobConfigurationTableCopy_OperationType) Enum() *JobConfigurationTableCopy_OperationType {
	p := new(JobConfigurationTableCopy_OperationType)
	*p = x
	return p
}

func (x JobConfigurationTableCopy_OperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobConfigurationTableCopy_OperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_bigquery_v2_job_config_proto_enumTypes[3].Descriptor()
}

func (JobConfigurationTableCopy_OperationType) Type() protoreflect.EnumType {
	return &file_google_cloud_bigquery_v2_job_config_proto_enumTypes[3]
}

func (x JobConfigurationTableCopy_OperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobConfigurationTableCopy_OperationType.Descriptor instead.
func (JobConfigurationTableCopy_OperationType) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_config_proto_rawDescGZIP(), []int{5, 0}
}

// Properties for the destination table.
type DestinationTableProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Friendly name for the destination table. If the table already
	// exists, it should be same as the existing friendly name.
	FriendlyName *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=friendly_name,json=friendlyName,proto3" json:"friendly_name,omitempty"`
	// Optional. The description for the destination table.
	// This will only be used if the destination table is newly created.
	// If the table already exists and a value different than the current
	// description is provided, the job will fail.
	Description *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Optional. The labels associated with this table. You can use these to
	// organize and group your tables. This will only be used if the destination
	// table is newly created. If the table already exists and labels are
	// different than the current labels are provided, the job will fail.
	Labels map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DestinationTableProperties) Reset() {
	*x = DestinationTableProperties{}
	mi := &file_google_cloud_bigquery_v2_job_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DestinationTableProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestinationTableProperties) ProtoMessage() {}

func (x *DestinationTableProperties) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_job_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestinationTableProperties.ProtoReflect.Descriptor instead.
func (*DestinationTableProperties) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_config_proto_rawDescGZIP(), []int{0}
}

func (x *DestinationTableProperties) GetFriendlyName() *wrapperspb.StringValue {
	if x != nil {
		return x.FriendlyName
	}
	return nil
}

func (x *DestinationTableProperties) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *DestinationTableProperties) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// A connection-level property to customize query behavior. Under JDBC, these
// correspond directly to connection properties passed to the DriverManager.
// Under ODBC, these correspond to properties in the connection string.
//
// Currently supported connection properties:
//
// * **dataset_project_id**: represents the default project for datasets that
// are used in the query. Setting the
// system variable `@@dataset_project_id` achieves the same behavior.  For
// more information about system variables, see:
// https://cloud.google.com/bigquery/docs/reference/system-variables
//
// * **time_zone**: represents the default timezone used to run the query.
//
// * **session_id**: associates the query with a given session.
//
// * **query_label**: associates the query with a given job label. If set,
// all subsequent queries in a script or session will have this label. For the
// format in which a you can specify a query label, see labels
// in the JobConfiguration resource type:
// https://cloud.google.com/bigquery/docs/reference/rest/v2/Job#jobconfiguration
//
// * **service_account**: indicates the service account to use to run a
// continuous query. If set, the query job uses the service account to access
// Google Cloud resources. Service account access is bounded by the IAM
// permissions that you have granted to the service account.
//
// Additional properties are allowed, but ignored. Specifying multiple
// connection properties with the same key returns an error.
type ConnectionProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key of the property to set.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The value of the property to set.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ConnectionProperty) Reset() {
	*x = ConnectionProperty{}
	mi := &file_google_cloud_bigquery_v2_job_config_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectionProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionProperty) ProtoMessage() {}

func (x *ConnectionProperty) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_job_config_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionProperty.ProtoReflect.Descriptor instead.
func (*ConnectionProperty) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_config_proto_rawDescGZIP(), []int{1}
}

func (x *ConnectionProperty) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ConnectionProperty) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// JobConfigurationQuery configures a BigQuery query job.
type JobConfigurationQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [Required] SQL query text to execute. The useLegacySql field can be used
	// to indicate whether the query uses legacy SQL or GoogleSQL.
	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// Optional. Describes the table where the query results should be stored.
	// This property must be set for large results that exceed the maximum
	// response size.  For queries that produce anonymous (cached) results, this
	// field will be populated by BigQuery.
	DestinationTable *TableReference `protobuf:"bytes,2,opt,name=destination_table,json=destinationTable,proto3" json:"destination_table,omitempty"`
	// Optional. You can specify external table definitions, which operate as
	// ephemeral tables that can be queried.  These definitions are configured
	// using a JSON map, where the string key represents the table identifier, and
	// the value is the corresponding external data configuration object.
	ExternalTableDefinitions map[string]*ExternalDataConfiguration `protobuf:"bytes,23,rep,name=external_table_definitions,json=tableDefinitions,proto3" json:"external_table_definitions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Describes user-defined function resources used in the query.
	UserDefinedFunctionResources []*UserDefinedFunctionResource `protobuf:"bytes,4,rep,name=user_defined_function_resources,json=userDefinedFunctionResources,proto3" json:"user_defined_function_resources,omitempty"`
	// Optional. Specifies whether the job is allowed to create new tables.
	// The following values are supported:
	//
	// * CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the
	// table.
	// * CREATE_NEVER: The table must already exist. If it does not,
	// a 'notFound' error is returned in the job result.
	//
	// The default value is CREATE_IF_NEEDED.
	// Creation, truncation and append actions occur as one atomic update
	// upon job completion.
	CreateDisposition string `protobuf:"bytes,5,opt,name=create_disposition,json=createDisposition,proto3" json:"create_disposition,omitempty"`
	// Optional. Specifies the action that occurs if the destination table
	// already exists. The following values are supported:
	//
	// * WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the
	// data, removes the constraints, and uses the schema from the query result.
	// * WRITE_TRUNCATE_DATA: If the table already exists, BigQuery overwrites the
	// data, but keeps the constraints and schema of the existing table.
	// * WRITE_APPEND: If the table already exists, BigQuery appends the data to
	// the table.
	// * WRITE_EMPTY: If the table already exists and contains data, a 'duplicate'
	// error is returned in the job result.
	//
	// The default value is WRITE_EMPTY. Each action is atomic and only occurs if
	// BigQuery is able to complete the job successfully. Creation, truncation and
	// append actions occur as one atomic update upon job completion.
	WriteDisposition string `protobuf:"bytes,6,opt,name=write_disposition,json=writeDisposition,proto3" json:"write_disposition,omitempty"`
	// Optional. Specifies the default dataset to use for unqualified
	// table names in the query. This setting does not alter behavior of
	// unqualified dataset names. Setting the system variable
	// `@@dataset_id` achieves the same behavior.  See
	// https://cloud.google.com/bigquery/docs/reference/system-variables for more
	// information on system variables.
	DefaultDataset *DatasetReference `protobuf:"bytes,7,opt,name=default_dataset,json=defaultDataset,proto3" json:"default_dataset,omitempty"`
	// Optional. Specifies a priority for the query. Possible values include
	// INTERACTIVE and BATCH. The default value is INTERACTIVE.
	Priority string `protobuf:"bytes,8,opt,name=priority,proto3" json:"priority,omitempty"`
	// Optional. If true and query uses legacy SQL dialect, allows the query
	// to produce arbitrarily large result tables at a slight cost in performance.
	// Requires destinationTable to be set.
	// For GoogleSQL queries, this flag is ignored and large results are
	// always allowed.  However, you must still set destinationTable when result
	// size exceeds the allowed maximum response size.
	AllowLargeResults *wrapperspb.BoolValue `protobuf:"bytes,10,opt,name=allow_large_results,json=allowLargeResults,proto3" json:"allow_large_results,omitempty"`
	// Optional. Whether to look for the result in the query cache. The query
	// cache is a best-effort cache that will be flushed whenever tables in the
	// query are modified. Moreover, the query cache is only available when a
	// query does not have a destination table specified. The default value is
	// true.
	UseQueryCache *wrapperspb.BoolValue `protobuf:"bytes,11,opt,name=use_query_cache,json=useQueryCache,proto3" json:"use_query_cache,omitempty"`
	// Optional. If true and query uses legacy SQL dialect, flattens all nested
	// and repeated fields in the query results.
	// allowLargeResults must be true if this is set to false.
	// For GoogleSQL queries, this flag is ignored and results are never
	// flattened.
	FlattenResults *wrapperspb.BoolValue `protobuf:"bytes,12,opt,name=flatten_results,json=flattenResults,proto3" json:"flatten_results,omitempty"`
	// Limits the bytes billed for this job. Queries that will have
	// bytes billed beyond this limit will fail (without incurring a charge).
	// If unspecified, this will be set to your project default.
	MaximumBytesBilled *wrapperspb.Int64Value `protobuf:"bytes,14,opt,name=maximum_bytes_billed,json=maximumBytesBilled,proto3" json:"maximum_bytes_billed,omitempty"`
	// Optional. Specifies whether to use BigQuery's legacy SQL dialect for this
	// query. The default value is true. If set to false, the query will use
	// BigQuery's GoogleSQL:
	// https://cloud.google.com/bigquery/sql-reference/
	//
	// When useLegacySql is set to false, the value of flattenResults is ignored;
	// query will be run as if flattenResults is false.
	UseLegacySql *wrapperspb.BoolValue `protobuf:"bytes,15,opt,name=use_legacy_sql,json=useLegacySql,proto3" json:"use_legacy_sql,omitempty"`
	// GoogleSQL only. Set to POSITIONAL to use positional (?) query parameters
	// or to NAMED to use named (@myparam) query parameters in this query.
	ParameterMode string `protobuf:"bytes,16,opt,name=parameter_mode,json=parameterMode,proto3" json:"parameter_mode,omitempty"`
	// Query parameters for GoogleSQL queries.
	QueryParameters []*QueryParameter `protobuf:"bytes,17,rep,name=query_parameters,json=queryParameters,proto3" json:"query_parameters,omitempty"`
	// Output only. System variables for GoogleSQL queries. A system variable is
	// output if the variable is settable and its value differs from the system
	// default.
	// "@@" prefix is not included in the name of the System variables.
	SystemVariables *SystemVariables `protobuf:"bytes,35,opt,name=system_variables,json=systemVariables,proto3,oneof" json:"system_variables,omitempty"`
	// Allows the schema of the destination table to be updated as a side effect
	// of the query job. Schema update options are supported in two cases:
	// when writeDisposition is WRITE_APPEND;
	// when writeDisposition is WRITE_TRUNCATE and the destination table is a
	// partition of a table, specified by partition decorators. For normal tables,
	// WRITE_TRUNCATE will always overwrite the schema.
	// One or more of the following values are specified:
	//
	// * ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema.
	// * ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original
	// schema to nullable.
	SchemaUpdateOptions []string `protobuf:"bytes,18,rep,name=schema_update_options,json=schemaUpdateOptions,proto3" json:"schema_update_options,omitempty"`
	// Time-based partitioning specification for the destination table. Only one
	// of timePartitioning and rangePartitioning should be specified.
	TimePartitioning *TimePartitioning `protobuf:"bytes,19,opt,name=time_partitioning,json=timePartitioning,proto3" json:"time_partitioning,omitempty"`
	// Range partitioning specification for the destination table.
	// Only one of timePartitioning and rangePartitioning should be specified.
	RangePartitioning *RangePartitioning `protobuf:"bytes,22,opt,name=range_partitioning,json=rangePartitioning,proto3" json:"range_partitioning,omitempty"`
	// Clustering specification for the destination table.
	Clustering *Clustering `protobuf:"bytes,20,opt,name=clustering,proto3" json:"clustering,omitempty"`
	// Custom encryption configuration (e.g., Cloud KMS keys)
	DestinationEncryptionConfiguration *EncryptionConfiguration `protobuf:"bytes,21,opt,name=destination_encryption_configuration,json=destinationEncryptionConfiguration,proto3" json:"destination_encryption_configuration,omitempty"`
	// Options controlling the execution of scripts.
	ScriptOptions *ScriptOptions `protobuf:"bytes,24,opt,name=script_options,json=scriptOptions,proto3" json:"script_options,omitempty"`
	// Connection properties which can modify the query behavior.
	ConnectionProperties []*ConnectionProperty `protobuf:"bytes,33,rep,name=connection_properties,json=connectionProperties,proto3" json:"connection_properties,omitempty"`
	// If this property is true, the job creates a new session using a randomly
	// generated session_id.  To continue using a created session with
	// subsequent queries, pass the existing session identifier as a
	// `ConnectionProperty` value.  The session identifier is returned as part of
	// the `SessionInfo` message within the query statistics.
	//
	// The new session's location will be set to `Job.JobReference.location` if it
	// is present, otherwise it's set to the default location based on existing
	// routing logic.
	CreateSession *wrapperspb.BoolValue `protobuf:"bytes,34,opt,name=create_session,json=createSession,proto3" json:"create_session,omitempty"`
	// Optional. Whether to run the query as continuous or a regular query.
	// Continuous query is currently in experimental stage and not ready for
	// general usage.
	Continuous *wrapperspb.BoolValue `protobuf:"bytes,36,opt,name=continuous,proto3" json:"continuous,omitempty"`
	// Optional. This is only supported for a SELECT query using a temporary
	// table. If set, the query is allowed to write results incrementally to the
	// temporary result table. This may incur a performance penalty. This option
	// cannot be used with Legacy SQL. This feature is not yet available.
	WriteIncrementalResults bool `protobuf:"varint,37,opt,name=write_incremental_results,json=writeIncrementalResults,proto3" json:"write_incremental_results,omitempty"`
}

func (x *JobConfigurationQuery) Reset() {
	*x = JobConfigurationQuery{}
	mi := &file_google_cloud_bigquery_v2_job_config_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobConfigurationQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobConfigurationQuery) ProtoMessage() {}

func (x *JobConfigurationQuery) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_job_config_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobConfigurationQuery.ProtoReflect.Descriptor instead.
func (*JobConfigurationQuery) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_config_proto_rawDescGZIP(), []int{2}
}

func (x *JobConfigurationQuery) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *JobConfigurationQuery) GetDestinationTable() *TableReference {
	if x != nil {
		return x.DestinationTable
	}
	return nil
}

func (x *JobConfigurationQuery) GetExternalTableDefinitions() map[string]*ExternalDataConfiguration {
	if x != nil {
		return x.ExternalTableDefinitions
	}
	return nil
}

func (x *JobConfigurationQuery) GetUserDefinedFunctionResources() []*UserDefinedFunctionResource {
	if x != nil {
		return x.UserDefinedFunctionResources
	}
	return nil
}

func (x *JobConfigurationQuery) GetCreateDisposition() string {
	if x != nil {
		return x.CreateDisposition
	}
	return ""
}

func (x *JobConfigurationQuery) GetWriteDisposition() string {
	if x != nil {
		return x.WriteDisposition
	}
	return ""
}

func (x *JobConfigurationQuery) GetDefaultDataset() *DatasetReference {
	if x != nil {
		return x.DefaultDataset
	}
	return nil
}

func (x *JobConfigurationQuery) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

func (x *JobConfigurationQuery) GetAllowLargeResults() *wrapperspb.BoolValue {
	if x != nil {
		return x.AllowLargeResults
	}
	return nil
}

func (x *JobConfigurationQuery) GetUseQueryCache() *wrapperspb.BoolValue {
	if x != nil {
		return x.UseQueryCache
	}
	return nil
}

func (x *JobConfigurationQuery) GetFlattenResults() *wrapperspb.BoolValue {
	if x != nil {
		return x.FlattenResults
	}
	return nil
}

func (x *JobConfigurationQuery) GetMaximumBytesBilled() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaximumBytesBilled
	}
	return nil
}

func (x *JobConfigurationQuery) GetUseLegacySql() *wrapperspb.BoolValue {
	if x != nil {
		return x.UseLegacySql
	}
	return nil
}

func (x *JobConfigurationQuery) GetParameterMode() string {
	if x != nil {
		return x.ParameterMode
	}
	return ""
}

func (x *JobConfigurationQuery) GetQueryParameters() []*QueryParameter {
	if x != nil {
		return x.QueryParameters
	}
	return nil
}

func (x *JobConfigurationQuery) GetSystemVariables() *SystemVariables {
	if x != nil {
		return x.SystemVariables
	}
	return nil
}

func (x *JobConfigurationQuery) GetSchemaUpdateOptions() []string {
	if x != nil {
		return x.SchemaUpdateOptions
	}
	return nil
}

func (x *JobConfigurationQuery) GetTimePartitioning() *TimePartitioning {
	if x != nil {
		return x.TimePartitioning
	}
	return nil
}

func (x *JobConfigurationQuery) GetRangePartitioning() *RangePartitioning {
	if x != nil {
		return x.RangePartitioning
	}
	return nil
}

func (x *JobConfigurationQuery) GetClustering() *Clustering {
	if x != nil {
		return x.Clustering
	}
	return nil
}

func (x *JobConfigurationQuery) GetDestinationEncryptionConfiguration() *EncryptionConfiguration {
	if x != nil {
		return x.DestinationEncryptionConfiguration
	}
	return nil
}

func (x *JobConfigurationQuery) GetScriptOptions() *ScriptOptions {
	if x != nil {
		return x.ScriptOptions
	}
	return nil
}

func (x *JobConfigurationQuery) GetConnectionProperties() []*ConnectionProperty {
	if x != nil {
		return x.ConnectionProperties
	}
	return nil
}

func (x *JobConfigurationQuery) GetCreateSession() *wrapperspb.BoolValue {
	if x != nil {
		return x.CreateSession
	}
	return nil
}

func (x *JobConfigurationQuery) GetContinuous() *wrapperspb.BoolValue {
	if x != nil {
		return x.Continuous
	}
	return nil
}

func (x *JobConfigurationQuery) GetWriteIncrementalResults() bool {
	if x != nil {
		return x.WriteIncrementalResults
	}
	return false
}

// Options related to script execution.
type ScriptOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timeout period for each statement in a script.
	StatementTimeoutMs *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=statement_timeout_ms,json=statementTimeoutMs,proto3" json:"statement_timeout_ms,omitempty"`
	// Limit on the number of bytes billed per statement. Exceeding this budget
	// results in an error.
	StatementByteBudget *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=statement_byte_budget,json=statementByteBudget,proto3" json:"statement_byte_budget,omitempty"`
	// Determines which statement in the script represents the "key result",
	// used to populate the schema and query results of the script job.
	// Default is LAST.
	KeyResultStatement ScriptOptions_KeyResultStatementKind `protobuf:"varint,4,opt,name=key_result_statement,json=keyResultStatement,proto3,enum=google.cloud.bigquery.v2.ScriptOptions_KeyResultStatementKind" json:"key_result_statement,omitempty"`
}

func (x *ScriptOptions) Reset() {
	*x = ScriptOptions{}
	mi := &file_google_cloud_bigquery_v2_job_config_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScriptOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScriptOptions) ProtoMessage() {}

func (x *ScriptOptions) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_job_config_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScriptOptions.ProtoReflect.Descriptor instead.
func (*ScriptOptions) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_config_proto_rawDescGZIP(), []int{3}
}

func (x *ScriptOptions) GetStatementTimeoutMs() *wrapperspb.Int64Value {
	if x != nil {
		return x.StatementTimeoutMs
	}
	return nil
}

func (x *ScriptOptions) GetStatementByteBudget() *wrapperspb.Int64Value {
	if x != nil {
		return x.StatementByteBudget
	}
	return nil
}

func (x *ScriptOptions) GetKeyResultStatement() ScriptOptions_KeyResultStatementKind {
	if x != nil {
		return x.KeyResultStatement
	}
	return ScriptOptions_KEY_RESULT_STATEMENT_KIND_UNSPECIFIED
}

// JobConfigurationLoad contains the configuration properties for loading data
// into a destination table.
type JobConfigurationLoad struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [Required] The fully-qualified URIs that point to your data in Google
	// Cloud.
	// For Google Cloud Storage URIs:
	//
	//	Each URI can contain one '*' wildcard character and it must come after
	//	the 'bucket' name. Size limits related to load jobs apply to external
	//	data sources.
	//
	// For Google Cloud Bigtable URIs:
	//
	//	Exactly one URI can be specified and it has be a fully specified and
	//	valid HTTPS URL for a Google Cloud Bigtable table.
	//
	// For Google Cloud Datastore backups:
	//
	//	Exactly one URI can be specified. Also, the '*' wildcard character is not
	//	allowed.
	SourceUris []string `protobuf:"bytes,1,rep,name=source_uris,json=sourceUris,proto3" json:"source_uris,omitempty"`
	// Optional. Specifies how source URIs are interpreted for constructing the
	// file set to load. By default, source URIs are expanded against the
	// underlying storage. You can also specify manifest files to control how the
	// file set is constructed. This option is only applicable to object storage
	// systems.
	FileSetSpecType FileSetSpecType `protobuf:"varint,49,opt,name=file_set_spec_type,json=fileSetSpecType,proto3,enum=google.cloud.bigquery.v2.FileSetSpecType" json:"file_set_spec_type,omitempty"`
	// Optional. The schema for the destination table. The schema can be
	// omitted if the destination table already exists, or if you're loading data
	// from Google Cloud Datastore.
	Schema *TableSchema `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	// [Required] The destination table to load the data into.
	DestinationTable *TableReference `protobuf:"bytes,3,opt,name=destination_table,json=destinationTable,proto3" json:"destination_table,omitempty"`
	// Optional. [Experimental] Properties with which to create the destination
	// table if it is new.
	DestinationTableProperties *DestinationTableProperties `protobuf:"bytes,4,opt,name=destination_table_properties,json=destinationTableProperties,proto3" json:"destination_table_properties,omitempty"`
	// Optional. Specifies whether the job is allowed to create new tables.
	// The following values are supported:
	//
	// * CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the
	// table.
	// * CREATE_NEVER: The table must already exist. If it does not,
	// a 'notFound' error is returned in the job result.
	// The default value is CREATE_IF_NEEDED.
	// Creation, truncation and append actions occur as one atomic update
	// upon job completion.
	CreateDisposition string `protobuf:"bytes,5,opt,name=create_disposition,json=createDisposition,proto3" json:"create_disposition,omitempty"`
	// Optional. Specifies the action that occurs if the destination table
	// already exists. The following values are supported:
	//
	// * WRITE_TRUNCATE:  If the table already exists, BigQuery overwrites the
	// data, removes the constraints and uses the schema from the load job.
	// * WRITE_TRUNCATE_DATA: If the table already exists, BigQuery overwrites the
	// data, but keeps the constraints and schema of the existing table.
	// * WRITE_APPEND: If the table already exists, BigQuery appends the data to
	// the table.
	// * WRITE_EMPTY: If the table already exists and contains data, a 'duplicate'
	// error is returned in the job result.
	//
	// The default value is WRITE_APPEND.
	// Each action is atomic and only occurs if BigQuery is able to complete the
	// job successfully.
	// Creation, truncation and append actions occur as one atomic update
	// upon job completion.
	WriteDisposition string `protobuf:"bytes,6,opt,name=write_disposition,json=writeDisposition,proto3" json:"write_disposition,omitempty"`
	// Optional. Specifies a string that represents a null value in a CSV file.
	// For example, if you specify "\N", BigQuery interprets "\N" as a null value
	// when loading a CSV file.
	// The default value is the empty string. If you set this property to a custom
	// value, BigQuery throws an error if an empty string is present for all data
	// types except for STRING and BYTE. For STRING and BYTE columns, BigQuery
	// interprets the empty string as an empty value.
	NullMarker *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=null_marker,json=nullMarker,proto3" json:"null_marker,omitempty"`
	// Optional. The separator character for fields in a CSV file. The separator
	// is interpreted as a single byte. For files encoded in ISO-8859-1, any
	// single character can be used as a separator. For files encoded in UTF-8,
	// characters represented in decimal range 1-127 (U+0001-U+007F) can be used
	// without any modification. UTF-8 characters encoded with multiple bytes
	// (i.e. U+0080 and above) will have only the first byte used for separating
	// fields. The remaining bytes will be treated as a part of the field.
	// BigQuery also supports the escape sequence "\t" (U+0009) to specify a tab
	// separator. The default value is comma (",", U+002C).
	FieldDelimiter string `protobuf:"bytes,8,opt,name=field_delimiter,json=fieldDelimiter,proto3" json:"field_delimiter,omitempty"`
	// Optional. The number of rows at the top of a CSV file that BigQuery will
	// skip when loading the data. The default value is 0. This property is useful
	// if you have header rows in the file that should be skipped. When autodetect
	// is on, the behavior is the following:
	//
	//   - skipLeadingRows unspecified - Autodetect tries to detect headers in the
	//     first row. If they are not detected, the row is read as data. Otherwise
	//     data is read starting from the second row.
	//   - skipLeadingRows is 0 - Instructs autodetect that there are no headers and
	//     data should be read starting from the first row.
	//   - skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect
	//     headers in row N. If headers are not detected, row N is just skipped.
	//     Otherwise row N is used to extract column names for the detected schema.
	SkipLeadingRows *wrapperspb.Int32Value `protobuf:"bytes,9,opt,name=skip_leading_rows,json=skipLeadingRows,proto3" json:"skip_leading_rows,omitempty"`
	// Optional. The character encoding of the data.
	// The supported values are UTF-8, ISO-8859-1, UTF-16BE, UTF-16LE, UTF-32BE,
	// and UTF-32LE. The default value is UTF-8. BigQuery decodes the data after
	// the raw, binary data has been split using the values of the `quote` and
	// `fieldDelimiter` properties.
	//
	// If you don't specify an encoding, or if you specify a UTF-8 encoding when
	// the CSV file is not UTF-8 encoded, BigQuery attempts to convert the data to
	// UTF-8. Generally, your data loads successfully, but it may not match
	// byte-for-byte what you expect. To avoid this, specify the correct encoding
	// by using the `--encoding` flag.
	//
	// If BigQuery can't convert a character other than the ASCII `0` character,
	// BigQuery converts the character to the standard Unicode replacement
	// character: &#65533;.
	Encoding string `protobuf:"bytes,10,opt,name=encoding,proto3" json:"encoding,omitempty"`
	// Optional. The value that is used to quote data sections in a CSV file.
	// BigQuery converts the string to ISO-8859-1 encoding, and then uses the
	// first byte of the encoded string to split the data in its raw, binary
	// state.
	// The default value is a double-quote ('"').
	// If your data does not contain quoted sections, set the property value to an
	// empty string.
	// If your data contains quoted newline characters, you must also set the
	// allowQuotedNewlines property to true.
	// To include the specific quote character within a quoted value, precede it
	// with an additional matching quote character. For example, if you want to
	// escape the default character  ' " ', use ' "" '.
	// @default "
	Quote *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=quote,proto3" json:"quote,omitempty"`
	// Optional. The maximum number of bad records that BigQuery can ignore when
	// running the job. If the number of bad records exceeds this value, an
	// invalid error is returned in the job result.
	// The default value is 0, which requires that all records are valid.
	// This is only supported for CSV and NEWLINE_DELIMITED_JSON file formats.
	MaxBadRecords *wrapperspb.Int32Value `protobuf:"bytes,12,opt,name=max_bad_records,json=maxBadRecords,proto3" json:"max_bad_records,omitempty"`
	// Indicates if BigQuery should allow quoted data sections that contain
	// newline characters in a CSV file. The default value is false.
	AllowQuotedNewlines *wrapperspb.BoolValue `protobuf:"bytes,15,opt,name=allow_quoted_newlines,json=allowQuotedNewlines,proto3" json:"allow_quoted_newlines,omitempty"`
	// Optional. The format of the data files.
	// For CSV files, specify "CSV". For datastore backups,
	// specify "DATASTORE_BACKUP". For newline-delimited JSON,
	// specify "NEWLINE_DELIMITED_JSON". For Avro, specify "AVRO".
	// For parquet, specify "PARQUET". For orc, specify "ORC".
	// The default value is CSV.
	SourceFormat string `protobuf:"bytes,16,opt,name=source_format,json=sourceFormat,proto3" json:"source_format,omitempty"`
	// Optional. Accept rows that are missing trailing optional columns.
	// The missing values are treated as nulls.
	// If false, records with missing trailing columns are treated as bad records,
	// and if there are too many bad records, an invalid error is returned in the
	// job result.
	// The default value is false.
	// Only applicable to CSV, ignored for other formats.
	AllowJaggedRows *wrapperspb.BoolValue `protobuf:"bytes,17,opt,name=allow_jagged_rows,json=allowJaggedRows,proto3" json:"allow_jagged_rows,omitempty"`
	// Optional. Indicates if BigQuery should allow extra values that are not
	// represented in the table schema.
	// If true, the extra values are ignored.
	// If false, records with extra columns are treated as bad records, and if
	// there are too many bad records, an invalid error is returned in the job
	// result. The default value is false.
	// The sourceFormat property determines what BigQuery treats as an extra
	// value:
	//
	//	CSV: Trailing columns
	//	JSON: Named values that don't match any column names in the table schema
	//	Avro, Parquet, ORC: Fields in the file schema that don't exist in the
	//	table schema.
	IgnoreUnknownValues *wrapperspb.BoolValue `protobuf:"bytes,18,opt,name=ignore_unknown_values,json=ignoreUnknownValues,proto3" json:"ignore_unknown_values,omitempty"`
	// If sourceFormat is set to "DATASTORE_BACKUP", indicates which entity
	// properties to load into BigQuery from a Cloud Datastore backup. Property
	// names are case sensitive and must be top-level properties. If no properties
	// are specified, BigQuery loads all properties. If any named property isn't
	// found in the Cloud Datastore backup, an invalid error is returned in the
	// job result.
	ProjectionFields []string `protobuf:"bytes,19,rep,name=projection_fields,json=projectionFields,proto3" json:"projection_fields,omitempty"`
	// Optional. Indicates if we should automatically infer the options and
	// schema for CSV and JSON sources.
	Autodetect *wrapperspb.BoolValue `protobuf:"bytes,20,opt,name=autodetect,proto3" json:"autodetect,omitempty"`
	// Allows the schema of the destination table to be updated as a side effect
	// of the load job if a schema is autodetected or supplied in the job
	// configuration.
	// Schema update options are supported in two cases:
	// when writeDisposition is WRITE_APPEND;
	// when writeDisposition is WRITE_TRUNCATE and the destination table is a
	// partition of a table, specified by partition decorators. For normal tables,
	// WRITE_TRUNCATE will always overwrite the schema.
	// One or more of the following values are specified:
	//
	// * ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema.
	// * ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original
	// schema to nullable.
	SchemaUpdateOptions []string `protobuf:"bytes,21,rep,name=schema_update_options,json=schemaUpdateOptions,proto3" json:"schema_update_options,omitempty"`
	// Time-based partitioning specification for the destination table. Only one
	// of timePartitioning and rangePartitioning should be specified.
	TimePartitioning *TimePartitioning `protobuf:"bytes,22,opt,name=time_partitioning,json=timePartitioning,proto3" json:"time_partitioning,omitempty"`
	// Range partitioning specification for the destination table.
	// Only one of timePartitioning and rangePartitioning should be specified.
	RangePartitioning *RangePartitioning `protobuf:"bytes,26,opt,name=range_partitioning,json=rangePartitioning,proto3" json:"range_partitioning,omitempty"`
	// Clustering specification for the destination table.
	Clustering *Clustering `protobuf:"bytes,23,opt,name=clustering,proto3" json:"clustering,omitempty"`
	// Custom encryption configuration (e.g., Cloud KMS keys)
	DestinationEncryptionConfiguration *EncryptionConfiguration `protobuf:"bytes,24,opt,name=destination_encryption_configuration,json=destinationEncryptionConfiguration,proto3" json:"destination_encryption_configuration,omitempty"`
	// Optional. If sourceFormat is set to "AVRO", indicates whether to interpret
	// logical types as the corresponding BigQuery data type (for example,
	// TIMESTAMP), instead of using the raw type (for example, INTEGER).
	UseAvroLogicalTypes *wrapperspb.BoolValue `protobuf:"bytes,25,opt,name=use_avro_logical_types,json=useAvroLogicalTypes,proto3" json:"use_avro_logical_types,omitempty"`
	// Optional. The user can provide a reference file with the reader schema.
	// This file is only loaded if it is part of source URIs, but is not loaded
	// otherwise. It is enabled for the following formats: AVRO, PARQUET, ORC.
	ReferenceFileSchemaUri *wrapperspb.StringValue `protobuf:"bytes,45,opt,name=reference_file_schema_uri,json=referenceFileSchemaUri,proto3" json:"reference_file_schema_uri,omitempty"`
	// Optional. When set, configures hive partitioning support.
	// Not all storage formats support hive partitioning -- requesting hive
	// partitioning on an unsupported format will lead to an error, as will
	// providing an invalid specification.
	HivePartitioningOptions *HivePartitioningOptions `protobuf:"bytes,37,opt,name=hive_partitioning_options,json=hivePartitioningOptions,proto3" json:"hive_partitioning_options,omitempty"`
	// Defines the list of possible SQL data types to which the source decimal
	// values are converted. This list and the precision and the scale parameters
	// of the decimal field determine the target type. In the order of NUMERIC,
	// BIGNUMERIC, and STRING, a
	// type is picked if it is in the specified list and if it supports the
	// precision and the scale. STRING supports all precision and scale values.
	// If none of the listed types supports the precision and the scale, the type
	// supporting the widest range in the specified list is picked, and if a value
	// exceeds the supported range when reading the data, an error will be thrown.
	//
	// Example: Suppose the value of this field is ["NUMERIC", "BIGNUMERIC"].
	// If (precision,scale) is:
	//
	// * (38,9) -> NUMERIC;
	// * (39,9) -> BIGNUMERIC (NUMERIC cannot hold 30 integer digits);
	// * (38,10) -> BIGNUMERIC (NUMERIC cannot hold 10 fractional digits);
	// * (76,38) -> BIGNUMERIC;
	// * (77,38) -> BIGNUMERIC (error if value exceeds supported range).
	//
	// This field cannot contain duplicate types. The order of the types in this
	// field is ignored. For example, ["BIGNUMERIC", "NUMERIC"] is the same as
	// ["NUMERIC", "BIGNUMERIC"] and NUMERIC always takes precedence over
	// BIGNUMERIC.
	//
	// Defaults to ["NUMERIC", "STRING"] for ORC and ["NUMERIC"] for the other
	// file formats.
	DecimalTargetTypes []DecimalTargetType `protobuf:"varint,39,rep,packed,name=decimal_target_types,json=decimalTargetTypes,proto3,enum=google.cloud.bigquery.v2.DecimalTargetType" json:"decimal_target_types,omitempty"`
	// Optional. Load option to be used together with source_format
	// newline-delimited JSON to indicate that a variant of JSON is being loaded.
	// To load newline-delimited GeoJSON, specify GEOJSON (and source_format must
	// be set to NEWLINE_DELIMITED_JSON).
	JsonExtension JsonExtension `protobuf:"varint,41,opt,name=json_extension,json=jsonExtension,proto3,enum=google.cloud.bigquery.v2.JsonExtension" json:"json_extension,omitempty"`
	// Optional. Additional properties to set if sourceFormat is set to PARQUET.
	ParquetOptions *ParquetOptions `protobuf:"bytes,42,opt,name=parquet_options,json=parquetOptions,proto3" json:"parquet_options,omitempty"`
	// Optional. When sourceFormat is set to "CSV", this indicates whether the
	// embedded ASCII control characters (the first 32 characters in the
	// ASCII-table, from
	// '\x00' to '\x1F') are preserved.
	PreserveAsciiControlCharacters *wrapperspb.BoolValue `protobuf:"bytes,44,opt,name=preserve_ascii_control_characters,json=preserveAsciiControlCharacters,proto3" json:"preserve_ascii_control_characters,omitempty"`
	// Optional. Connection properties which can modify the load job behavior.
	// Currently, only the 'session_id' connection property is supported, and is
	// used to resolve _SESSION appearing as the dataset id.
	ConnectionProperties []*ConnectionProperty `protobuf:"bytes,46,rep,name=connection_properties,json=connectionProperties,proto3" json:"connection_properties,omitempty"`
	// Optional. If this property is true, the job creates a new session using a
	// randomly generated session_id.  To continue using a created session with
	// subsequent queries, pass the existing session identifier as a
	// `ConnectionProperty` value.  The session identifier is returned as part of
	// the `SessionInfo` message within the query statistics.
	//
	// The new session's location will be set to `Job.JobReference.location` if it
	// is present, otherwise it's set to the default location based on existing
	// routing logic.
	CreateSession *wrapperspb.BoolValue `protobuf:"bytes,47,opt,name=create_session,json=createSession,proto3" json:"create_session,omitempty"`
	// Optional. Character map supported for column names in CSV/Parquet loads.
	// Defaults to STRICT and can be overridden by Project Config Service. Using
	// this option with unsupporting load formats will result in an error.
	ColumnNameCharacterMap JobConfigurationLoad_ColumnNameCharacterMap `protobuf:"varint,50,opt,name=column_name_character_map,json=columnNameCharacterMap,proto3,enum=google.cloud.bigquery.v2.JobConfigurationLoad_ColumnNameCharacterMap" json:"column_name_character_map,omitempty"`
	// Optional. [Experimental] Configures the load job to copy files directly to
	// the destination BigLake managed table, bypassing file content reading and
	// rewriting.
	//
	// Copying files only is supported when all the following are true:
	//
	//   - `source_uris` are located in the same Cloud Storage location as the
	//     destination table's `storage_uri` location.
	//   - `source_format` is `PARQUET`.
	//   - `destination_table` is an existing BigLake managed table. The table's
	//     schema does not have flexible column names. The table's columns do not
	//     have type parameters other than precision and scale.
	//   - No options other than the above are specified.
	CopyFilesOnly *wrapperspb.BoolValue `protobuf:"bytes,51,opt,name=copy_files_only,json=copyFilesOnly,proto3" json:"copy_files_only,omitempty"`
	// Optional. Default time zone that will apply when parsing timestamp values
	// that have no specific time zone.
	TimeZone *wrapperspb.StringValue `protobuf:"bytes,52,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
	// Optional. A list of strings represented as SQL NULL value in a CSV file.
	//
	// null_marker and null_markers can't be set at the same time.
	// If null_marker is set, null_markers has to be not set.
	// If null_markers is set, null_marker has to be not set.
	// If both null_marker and null_markers are set at the same time, a user
	// error would be thrown.
	// Any strings listed in null_markers, including
	// empty string would be interpreted as SQL NULL. This applies to all column
	// types.
	NullMarkers []string `protobuf:"bytes,53,rep,name=null_markers,json=nullMarkers,proto3" json:"null_markers,omitempty"`
	// Optional. Date format used for parsing DATE values.
	DateFormat *string `protobuf:"bytes,54,opt,name=date_format,json=dateFormat,proto3,oneof" json:"date_format,omitempty"`
	// Optional. Date format used for parsing DATETIME values.
	DatetimeFormat *string `protobuf:"bytes,55,opt,name=datetime_format,json=datetimeFormat,proto3,oneof" json:"datetime_format,omitempty"`
	// Optional. Date format used for parsing TIME values.
	TimeFormat *string `protobuf:"bytes,56,opt,name=time_format,json=timeFormat,proto3,oneof" json:"time_format,omitempty"`
	// Optional. Date format used for parsing TIMESTAMP values.
	TimestampFormat *string `protobuf:"bytes,57,opt,name=timestamp_format,json=timestampFormat,proto3,oneof" json:"timestamp_format,omitempty"`
	// Optional. Controls the strategy used to match loaded columns to the schema.
	// If not set, a sensible default is chosen based on how the schema is
	// provided. If autodetect is used, then columns are matched by name.
	// Otherwise, columns are matched by position. This is done to keep the
	// behavior backward-compatible.
	SourceColumnMatch JobConfigurationLoad_SourceColumnMatch `protobuf:"varint,58,opt,name=source_column_match,json=sourceColumnMatch,proto3,enum=google.cloud.bigquery.v2.JobConfigurationLoad_SourceColumnMatch" json:"source_column_match,omitempty"`
}

func (x *JobConfigurationLoad) Reset() {
	*x = JobConfigurationLoad{}
	mi := &file_google_cloud_bigquery_v2_job_config_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobConfigurationLoad) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobConfigurationLoad) ProtoMessage() {}

func (x *JobConfigurationLoad) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_job_config_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobConfigurationLoad.ProtoReflect.Descriptor instead.
func (*JobConfigurationLoad) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_config_proto_rawDescGZIP(), []int{4}
}

func (x *JobConfigurationLoad) GetSourceUris() []string {
	if x != nil {
		return x.SourceUris
	}
	return nil
}

func (x *JobConfigurationLoad) GetFileSetSpecType() FileSetSpecType {
	if x != nil {
		return x.FileSetSpecType
	}
	return FileSetSpecType_FILE_SET_SPEC_TYPE_FILE_SYSTEM_MATCH
}

func (x *JobConfigurationLoad) GetSchema() *TableSchema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *JobConfigurationLoad) GetDestinationTable() *TableReference {
	if x != nil {
		return x.DestinationTable
	}
	return nil
}

func (x *JobConfigurationLoad) GetDestinationTableProperties() *DestinationTableProperties {
	if x != nil {
		return x.DestinationTableProperties
	}
	return nil
}

func (x *JobConfigurationLoad) GetCreateDisposition() string {
	if x != nil {
		return x.CreateDisposition
	}
	return ""
}

func (x *JobConfigurationLoad) GetWriteDisposition() string {
	if x != nil {
		return x.WriteDisposition
	}
	return ""
}

func (x *JobConfigurationLoad) GetNullMarker() *wrapperspb.StringValue {
	if x != nil {
		return x.NullMarker
	}
	return nil
}

func (x *JobConfigurationLoad) GetFieldDelimiter() string {
	if x != nil {
		return x.FieldDelimiter
	}
	return ""
}

func (x *JobConfigurationLoad) GetSkipLeadingRows() *wrapperspb.Int32Value {
	if x != nil {
		return x.SkipLeadingRows
	}
	return nil
}

func (x *JobConfigurationLoad) GetEncoding() string {
	if x != nil {
		return x.Encoding
	}
	return ""
}

func (x *JobConfigurationLoad) GetQuote() *wrapperspb.StringValue {
	if x != nil {
		return x.Quote
	}
	return nil
}

func (x *JobConfigurationLoad) GetMaxBadRecords() *wrapperspb.Int32Value {
	if x != nil {
		return x.MaxBadRecords
	}
	return nil
}

func (x *JobConfigurationLoad) GetAllowQuotedNewlines() *wrapperspb.BoolValue {
	if x != nil {
		return x.AllowQuotedNewlines
	}
	return nil
}

func (x *JobConfigurationLoad) GetSourceFormat() string {
	if x != nil {
		return x.SourceFormat
	}
	return ""
}

func (x *JobConfigurationLoad) GetAllowJaggedRows() *wrapperspb.BoolValue {
	if x != nil {
		return x.AllowJaggedRows
	}
	return nil
}

func (x *JobConfigurationLoad) GetIgnoreUnknownValues() *wrapperspb.BoolValue {
	if x != nil {
		return x.IgnoreUnknownValues
	}
	return nil
}

func (x *JobConfigurationLoad) GetProjectionFields() []string {
	if x != nil {
		return x.ProjectionFields
	}
	return nil
}

func (x *JobConfigurationLoad) GetAutodetect() *wrapperspb.BoolValue {
	if x != nil {
		return x.Autodetect
	}
	return nil
}

func (x *JobConfigurationLoad) GetSchemaUpdateOptions() []string {
	if x != nil {
		return x.SchemaUpdateOptions
	}
	return nil
}

func (x *JobConfigurationLoad) GetTimePartitioning() *TimePartitioning {
	if x != nil {
		return x.TimePartitioning
	}
	return nil
}

func (x *JobConfigurationLoad) GetRangePartitioning() *RangePartitioning {
	if x != nil {
		return x.RangePartitioning
	}
	return nil
}

func (x *JobConfigurationLoad) GetClustering() *Clustering {
	if x != nil {
		return x.Clustering
	}
	return nil
}

func (x *JobConfigurationLoad) GetDestinationEncryptionConfiguration() *EncryptionConfiguration {
	if x != nil {
		return x.DestinationEncryptionConfiguration
	}
	return nil
}

func (x *JobConfigurationLoad) GetUseAvroLogicalTypes() *wrapperspb.BoolValue {
	if x != nil {
		return x.UseAvroLogicalTypes
	}
	return nil
}

func (x *JobConfigurationLoad) GetReferenceFileSchemaUri() *wrapperspb.StringValue {
	if x != nil {
		return x.ReferenceFileSchemaUri
	}
	return nil
}

func (x *JobConfigurationLoad) GetHivePartitioningOptions() *HivePartitioningOptions {
	if x != nil {
		return x.HivePartitioningOptions
	}
	return nil
}

func (x *JobConfigurationLoad) GetDecimalTargetTypes() []DecimalTargetType {
	if x != nil {
		return x.DecimalTargetTypes
	}
	return nil
}

func (x *JobConfigurationLoad) GetJsonExtension() JsonExtension {
	if x != nil {
		return x.JsonExtension
	}
	return JsonExtension_JSON_EXTENSION_UNSPECIFIED
}

func (x *JobConfigurationLoad) GetParquetOptions() *ParquetOptions {
	if x != nil {
		return x.ParquetOptions
	}
	return nil
}

func (x *JobConfigurationLoad) GetPreserveAsciiControlCharacters() *wrapperspb.BoolValue {
	if x != nil {
		return x.PreserveAsciiControlCharacters
	}
	return nil
}

func (x *JobConfigurationLoad) GetConnectionProperties() []*ConnectionProperty {
	if x != nil {
		return x.ConnectionProperties
	}
	return nil
}

func (x *JobConfigurationLoad) GetCreateSession() *wrapperspb.BoolValue {
	if x != nil {
		return x.CreateSession
	}
	return nil
}

func (x *JobConfigurationLoad) GetColumnNameCharacterMap() JobConfigurationLoad_ColumnNameCharacterMap {
	if x != nil {
		return x.ColumnNameCharacterMap
	}
	return JobConfigurationLoad_COLUMN_NAME_CHARACTER_MAP_UNSPECIFIED
}

func (x *JobConfigurationLoad) GetCopyFilesOnly() *wrapperspb.BoolValue {
	if x != nil {
		return x.CopyFilesOnly
	}
	return nil
}

func (x *JobConfigurationLoad) GetTimeZone() *wrapperspb.StringValue {
	if x != nil {
		return x.TimeZone
	}
	return nil
}

func (x *JobConfigurationLoad) GetNullMarkers() []string {
	if x != nil {
		return x.NullMarkers
	}
	return nil
}

func (x *JobConfigurationLoad) GetDateFormat() string {
	if x != nil && x.DateFormat != nil {
		return *x.DateFormat
	}
	return ""
}

func (x *JobConfigurationLoad) GetDatetimeFormat() string {
	if x != nil && x.DatetimeFormat != nil {
		return *x.DatetimeFormat
	}
	return ""
}

func (x *JobConfigurationLoad) GetTimeFormat() string {
	if x != nil && x.TimeFormat != nil {
		return *x.TimeFormat
	}
	return ""
}

func (x *JobConfigurationLoad) GetTimestampFormat() string {
	if x != nil && x.TimestampFormat != nil {
		return *x.TimestampFormat
	}
	return ""
}

func (x *JobConfigurationLoad) GetSourceColumnMatch() JobConfigurationLoad_SourceColumnMatch {
	if x != nil {
		return x.SourceColumnMatch
	}
	return JobConfigurationLoad_SOURCE_COLUMN_MATCH_UNSPECIFIED
}

// JobConfigurationTableCopy configures a job that copies data from one table
// to another.
// For more information on copying tables, see [Copy a
//
//	table](https://cloud.google.com/bigquery/docs/managing-tables#copy-table).
type JobConfigurationTableCopy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [Pick one] Source table to copy.
	SourceTable *TableReference `protobuf:"bytes,1,opt,name=source_table,json=sourceTable,proto3" json:"source_table,omitempty"`
	// [Pick one] Source tables to copy.
	SourceTables []*TableReference `protobuf:"bytes,2,rep,name=source_tables,json=sourceTables,proto3" json:"source_tables,omitempty"`
	// [Required] The destination table.
	DestinationTable *TableReference `protobuf:"bytes,3,opt,name=destination_table,json=destinationTable,proto3" json:"destination_table,omitempty"`
	// Optional. Specifies whether the job is allowed to create new tables.
	// The following values are supported:
	//
	// * CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the
	// table.
	// * CREATE_NEVER: The table must already exist. If it does not,
	// a 'notFound' error is returned in the job result.
	//
	// The default value is CREATE_IF_NEEDED.
	// Creation, truncation and append actions occur as one atomic update
	// upon job completion.
	CreateDisposition string `protobuf:"bytes,4,opt,name=create_disposition,json=createDisposition,proto3" json:"create_disposition,omitempty"`
	// Optional. Specifies the action that occurs if the destination table
	// already exists. The following values are supported:
	//
	// * WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the
	// table data and uses the schema and table constraints from the source table.
	// * WRITE_APPEND: If the table already exists, BigQuery appends the data to
	// the table.
	// * WRITE_EMPTY: If the table already exists and contains data, a 'duplicate'
	// error is returned in the job result.
	//
	// The default value is WRITE_EMPTY. Each action is atomic and only occurs if
	// BigQuery is able to complete the job successfully. Creation, truncation and
	// append actions occur as one atomic update upon job completion.
	WriteDisposition string `protobuf:"bytes,5,opt,name=write_disposition,json=writeDisposition,proto3" json:"write_disposition,omitempty"`
	// Custom encryption configuration (e.g., Cloud KMS keys).
	DestinationEncryptionConfiguration *EncryptionConfiguration `protobuf:"bytes,6,opt,name=destination_encryption_configuration,json=destinationEncryptionConfiguration,proto3" json:"destination_encryption_configuration,omitempty"`
	// Optional. Supported operation types in table copy job.
	OperationType JobConfigurationTableCopy_OperationType `protobuf:"varint,8,opt,name=operation_type,json=operationType,proto3,enum=google.cloud.bigquery.v2.JobConfigurationTableCopy_OperationType" json:"operation_type,omitempty"`
	// Optional. The time when the destination table expires. Expired tables will
	// be deleted and their storage reclaimed.
	DestinationExpirationTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=destination_expiration_time,json=destinationExpirationTime,proto3" json:"destination_expiration_time,omitempty"`
}

func (x *JobConfigurationTableCopy) Reset() {
	*x = JobConfigurationTableCopy{}
	mi := &file_google_cloud_bigquery_v2_job_config_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobConfigurationTableCopy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobConfigurationTableCopy) ProtoMessage() {}

func (x *JobConfigurationTableCopy) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_job_config_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobConfigurationTableCopy.ProtoReflect.Descriptor instead.
func (*JobConfigurationTableCopy) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_config_proto_rawDescGZIP(), []int{5}
}

func (x *JobConfigurationTableCopy) GetSourceTable() *TableReference {
	if x != nil {
		return x.SourceTable
	}
	return nil
}

func (x *JobConfigurationTableCopy) GetSourceTables() []*TableReference {
	if x != nil {
		return x.SourceTables
	}
	return nil
}

func (x *JobConfigurationTableCopy) GetDestinationTable() *TableReference {
	if x != nil {
		return x.DestinationTable
	}
	return nil
}

func (x *JobConfigurationTableCopy) GetCreateDisposition() string {
	if x != nil {
		return x.CreateDisposition
	}
	return ""
}

func (x *JobConfigurationTableCopy) GetWriteDisposition() string {
	if x != nil {
		return x.WriteDisposition
	}
	return ""
}

func (x *JobConfigurationTableCopy) GetDestinationEncryptionConfiguration() *EncryptionConfiguration {
	if x != nil {
		return x.DestinationEncryptionConfiguration
	}
	return nil
}

func (x *JobConfigurationTableCopy) GetOperationType() JobConfigurationTableCopy_OperationType {
	if x != nil {
		return x.OperationType
	}
	return JobConfigurationTableCopy_OPERATION_TYPE_UNSPECIFIED
}

func (x *JobConfigurationTableCopy) GetDestinationExpirationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DestinationExpirationTime
	}
	return nil
}

// JobConfigurationExtract configures a job that exports data from a BigQuery
// table into Google Cloud Storage.
type JobConfigurationExtract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Source reference for the export.
	//
	// Types that are assignable to Source:
	//
	//	*JobConfigurationExtract_SourceTable
	//	*JobConfigurationExtract_SourceModel
	Source isJobConfigurationExtract_Source `protobuf_oneof:"source"`
	// [Pick one] A list of fully-qualified Google Cloud Storage URIs where the
	// extracted table should be written.
	DestinationUris []string `protobuf:"bytes,3,rep,name=destination_uris,json=destinationUris,proto3" json:"destination_uris,omitempty"`
	// Optional. Whether to print out a header row in the results.
	// Default is true. Not applicable when extracting models.
	PrintHeader *wrapperspb.BoolValue `protobuf:"bytes,4,opt,name=print_header,json=printHeader,proto3" json:"print_header,omitempty"`
	// Optional. When extracting data in CSV format, this defines the
	// delimiter to use between fields in the exported data.
	// Default is ','. Not applicable when extracting models.
	FieldDelimiter string `protobuf:"bytes,5,opt,name=field_delimiter,json=fieldDelimiter,proto3" json:"field_delimiter,omitempty"`
	// Optional. The exported file format. Possible values include CSV,
	// NEWLINE_DELIMITED_JSON, PARQUET, or AVRO for tables and ML_TF_SAVED_MODEL
	// or ML_XGBOOST_BOOSTER for models. The default value for tables is CSV.
	// Tables with nested or repeated fields cannot be exported as CSV. The
	// default value for models is ML_TF_SAVED_MODEL.
	DestinationFormat string `protobuf:"bytes,6,opt,name=destination_format,json=destinationFormat,proto3" json:"destination_format,omitempty"`
	// Optional. The compression type to use for exported files. Possible values
	// include DEFLATE, GZIP, NONE, SNAPPY, and ZSTD. The default value is NONE.
	// Not all compression formats are support for all file formats. DEFLATE is
	// only supported for Avro. ZSTD is only supported for Parquet. Not applicable
	// when extracting models.
	Compression string `protobuf:"bytes,7,opt,name=compression,proto3" json:"compression,omitempty"`
	// Whether to use logical types when extracting to AVRO format. Not applicable
	// when extracting models.
	UseAvroLogicalTypes *wrapperspb.BoolValue `protobuf:"bytes,13,opt,name=use_avro_logical_types,json=useAvroLogicalTypes,proto3" json:"use_avro_logical_types,omitempty"`
	// Optional. Model extract options only applicable when extracting models.
	ModelExtractOptions *JobConfigurationExtract_ModelExtractOptions `protobuf:"bytes,14,opt,name=model_extract_options,json=modelExtractOptions,proto3" json:"model_extract_options,omitempty"`
}

func (x *JobConfigurationExtract) Reset() {
	*x = JobConfigurationExtract{}
	mi := &file_google_cloud_bigquery_v2_job_config_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobConfigurationExtract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobConfigurationExtract) ProtoMessage() {}

func (x *JobConfigurationExtract) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_job_config_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobConfigurationExtract.ProtoReflect.Descriptor instead.
func (*JobConfigurationExtract) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_config_proto_rawDescGZIP(), []int{6}
}

func (m *JobConfigurationExtract) GetSource() isJobConfigurationExtract_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *JobConfigurationExtract) GetSourceTable() *TableReference {
	if x, ok := x.GetSource().(*JobConfigurationExtract_SourceTable); ok {
		return x.SourceTable
	}
	return nil
}

func (x *JobConfigurationExtract) GetSourceModel() *ModelReference {
	if x, ok := x.GetSource().(*JobConfigurationExtract_SourceModel); ok {
		return x.SourceModel
	}
	return nil
}

func (x *JobConfigurationExtract) GetDestinationUris() []string {
	if x != nil {
		return x.DestinationUris
	}
	return nil
}

func (x *JobConfigurationExtract) GetPrintHeader() *wrapperspb.BoolValue {
	if x != nil {
		return x.PrintHeader
	}
	return nil
}

func (x *JobConfigurationExtract) GetFieldDelimiter() string {
	if x != nil {
		return x.FieldDelimiter
	}
	return ""
}

func (x *JobConfigurationExtract) GetDestinationFormat() string {
	if x != nil {
		return x.DestinationFormat
	}
	return ""
}

func (x *JobConfigurationExtract) GetCompression() string {
	if x != nil {
		return x.Compression
	}
	return ""
}

func (x *JobConfigurationExtract) GetUseAvroLogicalTypes() *wrapperspb.BoolValue {
	if x != nil {
		return x.UseAvroLogicalTypes
	}
	return nil
}

func (x *JobConfigurationExtract) GetModelExtractOptions() *JobConfigurationExtract_ModelExtractOptions {
	if x != nil {
		return x.ModelExtractOptions
	}
	return nil
}

type isJobConfigurationExtract_Source interface {
	isJobConfigurationExtract_Source()
}

type JobConfigurationExtract_SourceTable struct {
	// A reference to the table being exported.
	SourceTable *TableReference `protobuf:"bytes,1,opt,name=source_table,json=sourceTable,proto3,oneof"`
}

type JobConfigurationExtract_SourceModel struct {
	// A reference to the model being exported.
	SourceModel *ModelReference `protobuf:"bytes,9,opt,name=source_model,json=sourceModel,proto3,oneof"`
}

func (*JobConfigurationExtract_SourceTable) isJobConfigurationExtract_Source() {}

func (*JobConfigurationExtract_SourceModel) isJobConfigurationExtract_Source() {}

type JobConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The type of the job. Can be QUERY, LOAD, EXTRACT, COPY or
	// UNKNOWN.
	JobType string `protobuf:"bytes,8,opt,name=job_type,json=jobType,proto3" json:"job_type,omitempty"`
	// [Pick one] Configures a query job.
	Query *JobConfigurationQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// [Pick one] Configures a load job.
	Load *JobConfigurationLoad `protobuf:"bytes,2,opt,name=load,proto3" json:"load,omitempty"`
	// [Pick one] Copies a table.
	Copy *JobConfigurationTableCopy `protobuf:"bytes,3,opt,name=copy,proto3" json:"copy,omitempty"`
	// [Pick one] Configures an extract job.
	Extract *JobConfigurationExtract `protobuf:"bytes,4,opt,name=extract,proto3" json:"extract,omitempty"`
	// Optional. If set, don't actually run this job. A valid query will return
	// a mostly empty response with some processing statistics, while an invalid
	// query will return the same error it would if it wasn't a dry run. Behavior
	// of non-query jobs is undefined.
	DryRun *wrapperspb.BoolValue `protobuf:"bytes,5,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
	// Optional. Job timeout in milliseconds. If this time limit is exceeded,
	// BigQuery will attempt to stop a longer job, but may not always succeed in
	// canceling it before the job completes. For example, a job that takes more
	// than 60 seconds to complete has a better chance of being stopped than a job
	// that takes 10 seconds to complete.
	JobTimeoutMs *wrapperspb.Int64Value `protobuf:"bytes,6,opt,name=job_timeout_ms,json=jobTimeoutMs,proto3" json:"job_timeout_ms,omitempty"`
	// The labels associated with this job. You can use these to organize and
	// group your jobs.
	// Label keys and values can be no longer than 63 characters, can only contain
	// lowercase letters, numeric characters, underscores and dashes.
	// International characters are allowed. Label values are optional.  Label
	// keys must start with a letter and each label in the list must have a
	// different key.
	Labels map[string]string `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Optional. The reservation that job would use. User can specify a
	// reservation to execute the job. If reservation is not set, reservation is
	// determined based on the rules defined by the reservation assignments. The
	// expected format is
	// `projects/{project}/locations/{location}/reservations/{reservation}`.
	Reservation *string `protobuf:"bytes,11,opt,name=reservation,proto3,oneof" json:"reservation,omitempty"`
}

func (x *JobConfiguration) Reset() {
	*x = JobConfiguration{}
	mi := &file_google_cloud_bigquery_v2_job_config_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobConfiguration) ProtoMessage() {}

func (x *JobConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_job_config_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobConfiguration.ProtoReflect.Descriptor instead.
func (*JobConfiguration) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_config_proto_rawDescGZIP(), []int{7}
}

func (x *JobConfiguration) GetJobType() string {
	if x != nil {
		return x.JobType
	}
	return ""
}

func (x *JobConfiguration) GetQuery() *JobConfigurationQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *JobConfiguration) GetLoad() *JobConfigurationLoad {
	if x != nil {
		return x.Load
	}
	return nil
}

func (x *JobConfiguration) GetCopy() *JobConfigurationTableCopy {
	if x != nil {
		return x.Copy
	}
	return nil
}

func (x *JobConfiguration) GetExtract() *JobConfigurationExtract {
	if x != nil {
		return x.Extract
	}
	return nil
}

func (x *JobConfiguration) GetDryRun() *wrapperspb.BoolValue {
	if x != nil {
		return x.DryRun
	}
	return nil
}

func (x *JobConfiguration) GetJobTimeoutMs() *wrapperspb.Int64Value {
	if x != nil {
		return x.JobTimeoutMs
	}
	return nil
}

func (x *JobConfiguration) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *JobConfiguration) GetReservation() string {
	if x != nil && x.Reservation != nil {
		return *x.Reservation
	}
	return ""
}

// Options related to model extraction.
type JobConfigurationExtract_ModelExtractOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The 1-based ID of the trial to be exported from a hyperparameter tuning
	// model. If not specified, the trial with id =
	// [Model](https://cloud.google.com/bigquery/docs/reference/rest/v2/models#resource:-model).defaultTrialId
	// is exported. This field is ignored for models not trained with
	// hyperparameter tuning.
	TrialId *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=trial_id,json=trialId,proto3" json:"trial_id,omitempty"`
}

func (x *JobConfigurationExtract_ModelExtractOptions) Reset() {
	*x = JobConfigurationExtract_ModelExtractOptions{}
	mi := &file_google_cloud_bigquery_v2_job_config_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobConfigurationExtract_ModelExtractOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobConfigurationExtract_ModelExtractOptions) ProtoMessage() {}

func (x *JobConfigurationExtract_ModelExtractOptions) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_job_config_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobConfigurationExtract_ModelExtractOptions.ProtoReflect.Descriptor instead.
func (*JobConfigurationExtract_ModelExtractOptions) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_job_config_proto_rawDescGZIP(), []int{6, 0}
}

func (x *JobConfigurationExtract_ModelExtractOptions) GetTrialId() *wrapperspb.Int64Value {
	if x != nil {
		return x.TrialId
	}
	return nil
}

var File_google_cloud_bigquery_v2_job_config_proto protoreflect.FileDescriptor

var file_google_cloud_bigquery_v2_job_config_proto_rawDesc = []byte{
	0x0a, 0x29, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x6a, 0x6f, 0x62, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x32, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x29, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x69, 0x67,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3a, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2f, 0x76, 0x32, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32,
	0x2f, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f,
	0x76, 0x32, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76,
	0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76,
	0x32, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76,
	0x32, 0x2f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2f, 0x76, 0x32, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2f, 0x76, 0x32, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76,
	0x32, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2f, 0x76, 0x32, 0x2f, 0x75, 0x64, 0x66, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc3, 0x02, 0x0a, 0x1a, 0x44, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x6c, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x0c, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3c, 0x0a,
	0x12, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8e, 0x11, 0x0a, 0x15,
	0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x5a, 0x0a, 0x11, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76,
	0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x1a, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x7c, 0x0a, 0x1f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x1c, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x12, 0x32, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x11, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x64, 0x69,
	0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x10, 0x77, 0x72, 0x69, 0x74, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x12, 0x1f, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x4f, 0x0a, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x61, 0x72, 0x67, 0x65,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0d, 0x75, 0x73,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x48, 0x0a, 0x0f, 0x66,
	0x6c, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x66, 0x6c, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x12, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x42, 0x69,
	0x6c, 0x6c, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x5f, 0x6c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x5f, 0x73, 0x71, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x75,
	0x73, 0x65, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x53, 0x71, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x53, 0x0a, 0x10, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x5e, 0x0a, 0x10, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x57, 0x0a, 0x11, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76,
	0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x12, 0x5a, 0x0a, 0x12, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x12, 0x44, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x83, 0x01, 0x0a, 0x24, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x22, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x61, 0x0a, 0x15,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x41, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75,
	0x6f, 0x75, 0x73, 0x12, 0x3f, 0x0a, 0x19, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x17, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x1a, 0x80, 0x01, 0x0a, 0x1d, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x49, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0x82, 0x03, 0x0a,
	0x0d, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4d,
	0x0a, 0x14, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x12, 0x4f, 0x0a,
	0x15, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f,
	0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x74, 0x65, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x12, 0x70,
	0x0a, 0x14, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x12, 0x6b, 0x65,
	0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x5f, 0x0a, 0x16, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x29, 0x0a, 0x25, 0x4b, 0x45,
	0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x01, 0x12,
	0x10, 0x0a, 0x0c, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x10,
	0x02, 0x22, 0xef, 0x1a, 0x0a, 0x14, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x72, 0x69, 0x73, 0x12, 0x5b, 0x0a, 0x12, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x74,
	0x53, 0x70, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x55, 0x0a, 0x11,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x7b, 0x0a, 0x1c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x1a, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x32, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x11, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x64, 0x69,
	0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x10, 0x77, 0x72, 0x69, 0x74, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0b, 0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a,
	0x6e, 0x75, 0x6c, 0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x0f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x44,
	0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x11, 0x73, 0x6b, 0x69, 0x70,
	0x5f, 0x6c, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0f, 0x73, 0x6b, 0x69, 0x70, 0x4c, 0x65, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x65,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x37, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x12, 0x48, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0d, 0x6d, 0x61, 0x78,
	0x42, 0x61, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x4e, 0x0a, 0x15, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x65, 0x77, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x64, 0x4e, 0x65, 0x77, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x4b, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6a, 0x61,
	0x67, 0x67, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4a, 0x61, 0x67, 0x67, 0x65, 0x64, 0x52, 0x6f, 0x77,
	0x73, 0x12, 0x53, 0x0a, 0x15, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x13, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x12, 0x3f, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x64, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x64, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x15, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x57, 0x0a, 0x11, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x52,
	0x10, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e,
	0x67, 0x12, 0x5a, 0x0a, 0x12, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x44, 0x0a,
	0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x83, 0x01, 0x0a, 0x24, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x22, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x16, 0x75, 0x73, 0x65,
	0x5f, 0x61, 0x76, 0x72, 0x6f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x13, 0x75, 0x73, 0x65, 0x41,
	0x76, 0x72, 0x6f, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x5c, 0x0a, 0x19, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x2d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x16, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x55, 0x72, 0x69, 0x12, 0x72, 0x0a,
	0x19, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x48, 0x69, 0x76, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x17, 0x68, 0x69, 0x76, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x5d, 0x0a, 0x14, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x27, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x64, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x53, 0x0a, 0x0e, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x32, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0d, 0x6a, 0x73, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69,
	0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x70,
	0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6a, 0x0a,
	0x21, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x61, 0x73, 0x63, 0x69, 0x69, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x1e, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x41, 0x73, 0x63, 0x69, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x12, 0x66, 0x0a, 0x15, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x2e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x14, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x46, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x85, 0x01, 0x0a, 0x19, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x2e, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x4d, 0x61, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x16, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4d, 0x61,
	0x70, 0x12, 0x47, 0x0a, 0x0f, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f,
	0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0d, 0x63, 0x6f, 0x70,
	0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x3e, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x6e, 0x75,
	0x6c, 0x6c, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x35, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x6e, 0x75, 0x6c, 0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x72, 0x73, 0x12, 0x29, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x0a,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a,
	0x0f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x01, 0x52, 0x0e, 0x64,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x29, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x38, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x02, 0x52, 0x0a, 0x74, 0x69,
	0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x10, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x39, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x03, 0x52, 0x0f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x75, 0x0a, 0x13, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x2e, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x22, 0x5f, 0x0a, 0x16, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4d, 0x61,
	0x70, 0x12, 0x29, 0x0a, 0x25, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x5f, 0x43, 0x48, 0x41, 0x52, 0x41, 0x43, 0x54, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x56, 0x31, 0x10, 0x02,
	0x12, 0x06, 0x0a, 0x02, 0x56, 0x32, 0x10, 0x03, 0x22, 0x50, 0x0a, 0x11, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x23, 0x0a,
	0x1f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x22, 0xab, 0x06, 0x0a, 0x19, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x70,
	0x79, 0x12, 0x4b, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x4d,
	0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x55, 0x0a,
	0x11, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x64,
	0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x11, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x10, 0x77, 0x72, 0x69, 0x74, 0x65, 0x44,
	0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x83, 0x01, 0x0a, 0x24, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x22, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x6d, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x32, 0x2e, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x70, 0x79, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x5f, 0x0a, 0x1b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x19, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x5f, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x4f, 0x50, 0x59, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x53,
	0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x53,
	0x54, 0x4f, 0x52, 0x45, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4c, 0x4f, 0x4e, 0x45, 0x10,
	0x04, 0x22, 0xd9, 0x05, 0x0a, 0x17, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x4d, 0x0a,
	0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52,
	0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x4d, 0x0a, 0x0c,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0b,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x69, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x72, 0x69, 0x73, 0x12, 0x42, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x0f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x44,
	0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x11, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x25, 0x0a, 0x0b,
	0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x76, 0x72, 0x6f, 0x5f,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x13, 0x75, 0x73, 0x65, 0x41, 0x76, 0x72, 0x6f, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x7e, 0x0a, 0x15, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4a,
	0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x13, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x4d, 0x0a, 0x13, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x74,
	0x72, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x74, 0x72, 0x69, 0x61,
	0x6c, 0x49, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xca, 0x05,
	0x0a, 0x10, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x42, 0x0a, 0x04, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4a, 0x6f,
	0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f,
	0x61, 0x64, 0x52, 0x04, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x47, 0x0a, 0x04, 0x63, 0x6f, 0x70, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76,
	0x32, 0x2e, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x70, 0x79, 0x52, 0x04, 0x63, 0x6f, 0x70,
	0x79, 0x12, 0x4b, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4a, 0x6f,
	0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x07, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x38,
	0x0a, 0x07, 0x64, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x06, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x12, 0x46, 0x0a, 0x0e, 0x6a, 0x6f, 0x62, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x0c, 0x6a, 0x6f, 0x62, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73,
	0x12, 0x4e, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4a, 0x6f, 0x62, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x5d, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0xe0, 0x41, 0x01, 0xfa, 0x41, 0x30, 0x0a, 0x2e, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x0b, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x1a,
	0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6b, 0x0a, 0x1c, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x42, 0x0e, 0x4a, 0x6f, 0x62, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x3b, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x76,
	0x32, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x70, 0x62, 0x3b, 0x62, 0x69, 0x67,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_bigquery_v2_job_config_proto_rawDescOnce sync.Once
	file_google_cloud_bigquery_v2_job_config_proto_rawDescData = file_google_cloud_bigquery_v2_job_config_proto_rawDesc
)

func file_google_cloud_bigquery_v2_job_config_proto_rawDescGZIP() []byte {
	file_google_cloud_bigquery_v2_job_config_proto_rawDescOnce.Do(func() {
		file_google_cloud_bigquery_v2_job_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_bigquery_v2_job_config_proto_rawDescData)
	})
	return file_google_cloud_bigquery_v2_job_config_proto_rawDescData
}

var file_google_cloud_bigquery_v2_job_config_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_google_cloud_bigquery_v2_job_config_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_google_cloud_bigquery_v2_job_config_proto_goTypes = []any{
	(ScriptOptions_KeyResultStatementKind)(0),           // 0: google.cloud.bigquery.v2.ScriptOptions.KeyResultStatementKind
	(JobConfigurationLoad_ColumnNameCharacterMap)(0),    // 1: google.cloud.bigquery.v2.JobConfigurationLoad.ColumnNameCharacterMap
	(JobConfigurationLoad_SourceColumnMatch)(0),         // 2: google.cloud.bigquery.v2.JobConfigurationLoad.SourceColumnMatch
	(JobConfigurationTableCopy_OperationType)(0),        // 3: google.cloud.bigquery.v2.JobConfigurationTableCopy.OperationType
	(*DestinationTableProperties)(nil),                  // 4: google.cloud.bigquery.v2.DestinationTableProperties
	(*ConnectionProperty)(nil),                          // 5: google.cloud.bigquery.v2.ConnectionProperty
	(*JobConfigurationQuery)(nil),                       // 6: google.cloud.bigquery.v2.JobConfigurationQuery
	(*ScriptOptions)(nil),                               // 7: google.cloud.bigquery.v2.ScriptOptions
	(*JobConfigurationLoad)(nil),                        // 8: google.cloud.bigquery.v2.JobConfigurationLoad
	(*JobConfigurationTableCopy)(nil),                   // 9: google.cloud.bigquery.v2.JobConfigurationTableCopy
	(*JobConfigurationExtract)(nil),                     // 10: google.cloud.bigquery.v2.JobConfigurationExtract
	(*JobConfiguration)(nil),                            // 11: google.cloud.bigquery.v2.JobConfiguration
	nil,                                                 // 12: google.cloud.bigquery.v2.DestinationTableProperties.LabelsEntry
	nil,                                                 // 13: google.cloud.bigquery.v2.JobConfigurationQuery.ExternalTableDefinitionsEntry
	(*JobConfigurationExtract_ModelExtractOptions)(nil), // 14: google.cloud.bigquery.v2.JobConfigurationExtract.ModelExtractOptions
	nil,                                 // 15: google.cloud.bigquery.v2.JobConfiguration.LabelsEntry
	(*wrapperspb.StringValue)(nil),      // 16: google.protobuf.StringValue
	(*TableReference)(nil),              // 17: google.cloud.bigquery.v2.TableReference
	(*UserDefinedFunctionResource)(nil), // 18: google.cloud.bigquery.v2.UserDefinedFunctionResource
	(*DatasetReference)(nil),            // 19: google.cloud.bigquery.v2.DatasetReference
	(*wrapperspb.BoolValue)(nil),        // 20: google.protobuf.BoolValue
	(*wrapperspb.Int64Value)(nil),       // 21: google.protobuf.Int64Value
	(*QueryParameter)(nil),              // 22: google.cloud.bigquery.v2.QueryParameter
	(*SystemVariables)(nil),             // 23: google.cloud.bigquery.v2.SystemVariables
	(*TimePartitioning)(nil),            // 24: google.cloud.bigquery.v2.TimePartitioning
	(*RangePartitioning)(nil),           // 25: google.cloud.bigquery.v2.RangePartitioning
	(*Clustering)(nil),                  // 26: google.cloud.bigquery.v2.Clustering
	(*EncryptionConfiguration)(nil),     // 27: google.cloud.bigquery.v2.EncryptionConfiguration
	(FileSetSpecType)(0),                // 28: google.cloud.bigquery.v2.FileSetSpecType
	(*TableSchema)(nil),                 // 29: google.cloud.bigquery.v2.TableSchema
	(*wrapperspb.Int32Value)(nil),       // 30: google.protobuf.Int32Value
	(*HivePartitioningOptions)(nil),     // 31: google.cloud.bigquery.v2.HivePartitioningOptions
	(DecimalTargetType)(0),              // 32: google.cloud.bigquery.v2.DecimalTargetType
	(JsonExtension)(0),                  // 33: google.cloud.bigquery.v2.JsonExtension
	(*ParquetOptions)(nil),              // 34: google.cloud.bigquery.v2.ParquetOptions
	(*timestamppb.Timestamp)(nil),       // 35: google.protobuf.Timestamp
	(*ModelReference)(nil),              // 36: google.cloud.bigquery.v2.ModelReference
	(*ExternalDataConfiguration)(nil),   // 37: google.cloud.bigquery.v2.ExternalDataConfiguration
}
var file_google_cloud_bigquery_v2_job_config_proto_depIdxs = []int32{
	16, // 0: google.cloud.bigquery.v2.DestinationTableProperties.friendly_name:type_name -> google.protobuf.StringValue
	16, // 1: google.cloud.bigquery.v2.DestinationTableProperties.description:type_name -> google.protobuf.StringValue
	12, // 2: google.cloud.bigquery.v2.DestinationTableProperties.labels:type_name -> google.cloud.bigquery.v2.DestinationTableProperties.LabelsEntry
	17, // 3: google.cloud.bigquery.v2.JobConfigurationQuery.destination_table:type_name -> google.cloud.bigquery.v2.TableReference
	13, // 4: google.cloud.bigquery.v2.JobConfigurationQuery.external_table_definitions:type_name -> google.cloud.bigquery.v2.JobConfigurationQuery.ExternalTableDefinitionsEntry
	18, // 5: google.cloud.bigquery.v2.JobConfigurationQuery.user_defined_function_resources:type_name -> google.cloud.bigquery.v2.UserDefinedFunctionResource
	19, // 6: google.cloud.bigquery.v2.JobConfigurationQuery.default_dataset:type_name -> google.cloud.bigquery.v2.DatasetReference
	20, // 7: google.cloud.bigquery.v2.JobConfigurationQuery.allow_large_results:type_name -> google.protobuf.BoolValue
	20, // 8: google.cloud.bigquery.v2.JobConfigurationQuery.use_query_cache:type_name -> google.protobuf.BoolValue
	20, // 9: google.cloud.bigquery.v2.JobConfigurationQuery.flatten_results:type_name -> google.protobuf.BoolValue
	21, // 10: google.cloud.bigquery.v2.JobConfigurationQuery.maximum_bytes_billed:type_name -> google.protobuf.Int64Value
	20, // 11: google.cloud.bigquery.v2.JobConfigurationQuery.use_legacy_sql:type_name -> google.protobuf.BoolValue
	22, // 12: google.cloud.bigquery.v2.JobConfigurationQuery.query_parameters:type_name -> google.cloud.bigquery.v2.QueryParameter
	23, // 13: google.cloud.bigquery.v2.JobConfigurationQuery.system_variables:type_name -> google.cloud.bigquery.v2.SystemVariables
	24, // 14: google.cloud.bigquery.v2.JobConfigurationQuery.time_partitioning:type_name -> google.cloud.bigquery.v2.TimePartitioning
	25, // 15: google.cloud.bigquery.v2.JobConfigurationQuery.range_partitioning:type_name -> google.cloud.bigquery.v2.RangePartitioning
	26, // 16: google.cloud.bigquery.v2.JobConfigurationQuery.clustering:type_name -> google.cloud.bigquery.v2.Clustering
	27, // 17: google.cloud.bigquery.v2.JobConfigurationQuery.destination_encryption_configuration:type_name -> google.cloud.bigquery.v2.EncryptionConfiguration
	7,  // 18: google.cloud.bigquery.v2.JobConfigurationQuery.script_options:type_name -> google.cloud.bigquery.v2.ScriptOptions
	5,  // 19: google.cloud.bigquery.v2.JobConfigurationQuery.connection_properties:type_name -> google.cloud.bigquery.v2.ConnectionProperty
	20, // 20: google.cloud.bigquery.v2.JobConfigurationQuery.create_session:type_name -> google.protobuf.BoolValue
	20, // 21: google.cloud.bigquery.v2.JobConfigurationQuery.continuous:type_name -> google.protobuf.BoolValue
	21, // 22: google.cloud.bigquery.v2.ScriptOptions.statement_timeout_ms:type_name -> google.protobuf.Int64Value
	21, // 23: google.cloud.bigquery.v2.ScriptOptions.statement_byte_budget:type_name -> google.protobuf.Int64Value
	0,  // 24: google.cloud.bigquery.v2.ScriptOptions.key_result_statement:type_name -> google.cloud.bigquery.v2.ScriptOptions.KeyResultStatementKind
	28, // 25: google.cloud.bigquery.v2.JobConfigurationLoad.file_set_spec_type:type_name -> google.cloud.bigquery.v2.FileSetSpecType
	29, // 26: google.cloud.bigquery.v2.JobConfigurationLoad.schema:type_name -> google.cloud.bigquery.v2.TableSchema
	17, // 27: google.cloud.bigquery.v2.JobConfigurationLoad.destination_table:type_name -> google.cloud.bigquery.v2.TableReference
	4,  // 28: google.cloud.bigquery.v2.JobConfigurationLoad.destination_table_properties:type_name -> google.cloud.bigquery.v2.DestinationTableProperties
	16, // 29: google.cloud.bigquery.v2.JobConfigurationLoad.null_marker:type_name -> google.protobuf.StringValue
	30, // 30: google.cloud.bigquery.v2.JobConfigurationLoad.skip_leading_rows:type_name -> google.protobuf.Int32Value
	16, // 31: google.cloud.bigquery.v2.JobConfigurationLoad.quote:type_name -> google.protobuf.StringValue
	30, // 32: google.cloud.bigquery.v2.JobConfigurationLoad.max_bad_records:type_name -> google.protobuf.Int32Value
	20, // 33: google.cloud.bigquery.v2.JobConfigurationLoad.allow_quoted_newlines:type_name -> google.protobuf.BoolValue
	20, // 34: google.cloud.bigquery.v2.JobConfigurationLoad.allow_jagged_rows:type_name -> google.protobuf.BoolValue
	20, // 35: google.cloud.bigquery.v2.JobConfigurationLoad.ignore_unknown_values:type_name -> google.protobuf.BoolValue
	20, // 36: google.cloud.bigquery.v2.JobConfigurationLoad.autodetect:type_name -> google.protobuf.BoolValue
	24, // 37: google.cloud.bigquery.v2.JobConfigurationLoad.time_partitioning:type_name -> google.cloud.bigquery.v2.TimePartitioning
	25, // 38: google.cloud.bigquery.v2.JobConfigurationLoad.range_partitioning:type_name -> google.cloud.bigquery.v2.RangePartitioning
	26, // 39: google.cloud.bigquery.v2.JobConfigurationLoad.clustering:type_name -> google.cloud.bigquery.v2.Clustering
	27, // 40: google.cloud.bigquery.v2.JobConfigurationLoad.destination_encryption_configuration:type_name -> google.cloud.bigquery.v2.EncryptionConfiguration
	20, // 41: google.cloud.bigquery.v2.JobConfigurationLoad.use_avro_logical_types:type_name -> google.protobuf.BoolValue
	16, // 42: google.cloud.bigquery.v2.JobConfigurationLoad.reference_file_schema_uri:type_name -> google.protobuf.StringValue
	31, // 43: google.cloud.bigquery.v2.JobConfigurationLoad.hive_partitioning_options:type_name -> google.cloud.bigquery.v2.HivePartitioningOptions
	32, // 44: google.cloud.bigquery.v2.JobConfigurationLoad.decimal_target_types:type_name -> google.cloud.bigquery.v2.DecimalTargetType
	33, // 45: google.cloud.bigquery.v2.JobConfigurationLoad.json_extension:type_name -> google.cloud.bigquery.v2.JsonExtension
	34, // 46: google.cloud.bigquery.v2.JobConfigurationLoad.parquet_options:type_name -> google.cloud.bigquery.v2.ParquetOptions
	20, // 47: google.cloud.bigquery.v2.JobConfigurationLoad.preserve_ascii_control_characters:type_name -> google.protobuf.BoolValue
	5,  // 48: google.cloud.bigquery.v2.JobConfigurationLoad.connection_properties:type_name -> google.cloud.bigquery.v2.ConnectionProperty
	20, // 49: google.cloud.bigquery.v2.JobConfigurationLoad.create_session:type_name -> google.protobuf.BoolValue
	1,  // 50: google.cloud.bigquery.v2.JobConfigurationLoad.column_name_character_map:type_name -> google.cloud.bigquery.v2.JobConfigurationLoad.ColumnNameCharacterMap
	20, // 51: google.cloud.bigquery.v2.JobConfigurationLoad.copy_files_only:type_name -> google.protobuf.BoolValue
	16, // 52: google.cloud.bigquery.v2.JobConfigurationLoad.time_zone:type_name -> google.protobuf.StringValue
	2,  // 53: google.cloud.bigquery.v2.JobConfigurationLoad.source_column_match:type_name -> google.cloud.bigquery.v2.JobConfigurationLoad.SourceColumnMatch
	17, // 54: google.cloud.bigquery.v2.JobConfigurationTableCopy.source_table:type_name -> google.cloud.bigquery.v2.TableReference
	17, // 55: google.cloud.bigquery.v2.JobConfigurationTableCopy.source_tables:type_name -> google.cloud.bigquery.v2.TableReference
	17, // 56: google.cloud.bigquery.v2.JobConfigurationTableCopy.destination_table:type_name -> google.cloud.bigquery.v2.TableReference
	27, // 57: google.cloud.bigquery.v2.JobConfigurationTableCopy.destination_encryption_configuration:type_name -> google.cloud.bigquery.v2.EncryptionConfiguration
	3,  // 58: google.cloud.bigquery.v2.JobConfigurationTableCopy.operation_type:type_name -> google.cloud.bigquery.v2.JobConfigurationTableCopy.OperationType
	35, // 59: google.cloud.bigquery.v2.JobConfigurationTableCopy.destination_expiration_time:type_name -> google.protobuf.Timestamp
	17, // 60: google.cloud.bigquery.v2.JobConfigurationExtract.source_table:type_name -> google.cloud.bigquery.v2.TableReference
	36, // 61: google.cloud.bigquery.v2.JobConfigurationExtract.source_model:type_name -> google.cloud.bigquery.v2.ModelReference
	20, // 62: google.cloud.bigquery.v2.JobConfigurationExtract.print_header:type_name -> google.protobuf.BoolValue
	20, // 63: google.cloud.bigquery.v2.JobConfigurationExtract.use_avro_logical_types:type_name -> google.protobuf.BoolValue
	14, // 64: google.cloud.bigquery.v2.JobConfigurationExtract.model_extract_options:type_name -> google.cloud.bigquery.v2.JobConfigurationExtract.ModelExtractOptions
	6,  // 65: google.cloud.bigquery.v2.JobConfiguration.query:type_name -> google.cloud.bigquery.v2.JobConfigurationQuery
	8,  // 66: google.cloud.bigquery.v2.JobConfiguration.load:type_name -> google.cloud.bigquery.v2.JobConfigurationLoad
	9,  // 67: google.cloud.bigquery.v2.JobConfiguration.copy:type_name -> google.cloud.bigquery.v2.JobConfigurationTableCopy
	10, // 68: google.cloud.bigquery.v2.JobConfiguration.extract:type_name -> google.cloud.bigquery.v2.JobConfigurationExtract
	20, // 69: google.cloud.bigquery.v2.JobConfiguration.dry_run:type_name -> google.protobuf.BoolValue
	21, // 70: google.cloud.bigquery.v2.JobConfiguration.job_timeout_ms:type_name -> google.protobuf.Int64Value
	15, // 71: google.cloud.bigquery.v2.JobConfiguration.labels:type_name -> google.cloud.bigquery.v2.JobConfiguration.LabelsEntry
	37, // 72: google.cloud.bigquery.v2.JobConfigurationQuery.ExternalTableDefinitionsEntry.value:type_name -> google.cloud.bigquery.v2.ExternalDataConfiguration
	21, // 73: google.cloud.bigquery.v2.JobConfigurationExtract.ModelExtractOptions.trial_id:type_name -> google.protobuf.Int64Value
	74, // [74:74] is the sub-list for method output_type
	74, // [74:74] is the sub-list for method input_type
	74, // [74:74] is the sub-list for extension type_name
	74, // [74:74] is the sub-list for extension extendee
	0,  // [0:74] is the sub-list for field type_name
}

func init() { file_google_cloud_bigquery_v2_job_config_proto_init() }
func file_google_cloud_bigquery_v2_job_config_proto_init() {
	if File_google_cloud_bigquery_v2_job_config_proto != nil {
		return
	}
	file_google_cloud_bigquery_v2_clustering_proto_init()
	file_google_cloud_bigquery_v2_dataset_reference_proto_init()
	file_google_cloud_bigquery_v2_decimal_target_types_proto_init()
	file_google_cloud_bigquery_v2_encryption_config_proto_init()
	file_google_cloud_bigquery_v2_external_data_config_proto_init()
	file_google_cloud_bigquery_v2_file_set_specification_type_proto_init()
	file_google_cloud_bigquery_v2_hive_partitioning_proto_init()
	file_google_cloud_bigquery_v2_json_extension_proto_init()
	file_google_cloud_bigquery_v2_model_reference_proto_init()
	file_google_cloud_bigquery_v2_query_parameter_proto_init()
	file_google_cloud_bigquery_v2_range_partitioning_proto_init()
	file_google_cloud_bigquery_v2_system_variable_proto_init()
	file_google_cloud_bigquery_v2_table_reference_proto_init()
	file_google_cloud_bigquery_v2_table_schema_proto_init()
	file_google_cloud_bigquery_v2_time_partitioning_proto_init()
	file_google_cloud_bigquery_v2_udf_resource_proto_init()
	file_google_cloud_bigquery_v2_job_config_proto_msgTypes[2].OneofWrappers = []any{}
	file_google_cloud_bigquery_v2_job_config_proto_msgTypes[4].OneofWrappers = []any{}
	file_google_cloud_bigquery_v2_job_config_proto_msgTypes[6].OneofWrappers = []any{
		(*JobConfigurationExtract_SourceTable)(nil),
		(*JobConfigurationExtract_SourceModel)(nil),
	}
	file_google_cloud_bigquery_v2_job_config_proto_msgTypes[7].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_bigquery_v2_job_config_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_cloud_bigquery_v2_job_config_proto_goTypes,
		DependencyIndexes: file_google_cloud_bigquery_v2_job_config_proto_depIdxs,
		EnumInfos:         file_google_cloud_bigquery_v2_job_config_proto_enumTypes,
		MessageInfos:      file_google_cloud_bigquery_v2_job_config_proto_msgTypes,
	}.Build()
	File_google_cloud_bigquery_v2_job_config_proto = out.File
	file_google_cloud_bigquery_v2_job_config_proto_rawDesc = nil
	file_google_cloud_bigquery_v2_job_config_proto_goTypes = nil
	file_google_cloud_bigquery_v2_job_config_proto_depIdxs = nil
}
