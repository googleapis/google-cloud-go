// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/bigquery/v2/dataset.proto

package bigquerypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DatasetService_GetDataset_FullMethodName      = "/google.cloud.bigquery.v2.DatasetService/GetDataset"
	DatasetService_InsertDataset_FullMethodName   = "/google.cloud.bigquery.v2.DatasetService/InsertDataset"
	DatasetService_PatchDataset_FullMethodName    = "/google.cloud.bigquery.v2.DatasetService/PatchDataset"
	DatasetService_UpdateDataset_FullMethodName   = "/google.cloud.bigquery.v2.DatasetService/UpdateDataset"
	DatasetService_DeleteDataset_FullMethodName   = "/google.cloud.bigquery.v2.DatasetService/DeleteDataset"
	DatasetService_ListDatasets_FullMethodName    = "/google.cloud.bigquery.v2.DatasetService/ListDatasets"
	DatasetService_UndeleteDataset_FullMethodName = "/google.cloud.bigquery.v2.DatasetService/UndeleteDataset"
)

// DatasetServiceClient is the client API for DatasetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatasetServiceClient interface {
	// Returns the dataset specified by datasetID.
	GetDataset(ctx context.Context, in *GetDatasetRequest, opts ...grpc.CallOption) (*Dataset, error)
	// Creates a new empty dataset.
	InsertDataset(ctx context.Context, in *InsertDatasetRequest, opts ...grpc.CallOption) (*Dataset, error)
	// Updates information in an existing dataset. The update method replaces the
	// entire dataset resource, whereas the patch method only replaces fields that
	// are provided in the submitted dataset resource.
	// This method supports RFC5789 patch semantics.
	PatchDataset(ctx context.Context, in *UpdateOrPatchDatasetRequest, opts ...grpc.CallOption) (*Dataset, error)
	// Updates information in an existing dataset. The update method replaces the
	// entire dataset resource, whereas the patch method only replaces fields that
	// are provided in the submitted dataset resource.
	UpdateDataset(ctx context.Context, in *UpdateOrPatchDatasetRequest, opts ...grpc.CallOption) (*Dataset, error)
	// Deletes the dataset specified by the datasetId value. Before you can delete
	// a dataset, you must delete all its tables, either manually or by specifying
	// deleteContents. Immediately after deletion, you can create another dataset
	// with the same name.
	DeleteDataset(ctx context.Context, in *DeleteDatasetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Lists all datasets in the specified project to which the user has been
	// granted the READER dataset role.
	ListDatasets(ctx context.Context, in *ListDatasetsRequest, opts ...grpc.CallOption) (*DatasetList, error)
	// Undeletes a dataset which is within time travel window based on datasetId.
	// If a time is specified, the dataset version deleted at that time is
	// undeleted, else the last live version is undeleted.
	UndeleteDataset(ctx context.Context, in *UndeleteDatasetRequest, opts ...grpc.CallOption) (*Dataset, error)
}

type datasetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDatasetServiceClient(cc grpc.ClientConnInterface) DatasetServiceClient {
	return &datasetServiceClient{cc}
}

func (c *datasetServiceClient) GetDataset(ctx context.Context, in *GetDatasetRequest, opts ...grpc.CallOption) (*Dataset, error) {
	out := new(Dataset)
	err := c.cc.Invoke(ctx, DatasetService_GetDataset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) InsertDataset(ctx context.Context, in *InsertDatasetRequest, opts ...grpc.CallOption) (*Dataset, error) {
	out := new(Dataset)
	err := c.cc.Invoke(ctx, DatasetService_InsertDataset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) PatchDataset(ctx context.Context, in *UpdateOrPatchDatasetRequest, opts ...grpc.CallOption) (*Dataset, error) {
	out := new(Dataset)
	err := c.cc.Invoke(ctx, DatasetService_PatchDataset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) UpdateDataset(ctx context.Context, in *UpdateOrPatchDatasetRequest, opts ...grpc.CallOption) (*Dataset, error) {
	out := new(Dataset)
	err := c.cc.Invoke(ctx, DatasetService_UpdateDataset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) DeleteDataset(ctx context.Context, in *DeleteDatasetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DatasetService_DeleteDataset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) ListDatasets(ctx context.Context, in *ListDatasetsRequest, opts ...grpc.CallOption) (*DatasetList, error) {
	out := new(DatasetList)
	err := c.cc.Invoke(ctx, DatasetService_ListDatasets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) UndeleteDataset(ctx context.Context, in *UndeleteDatasetRequest, opts ...grpc.CallOption) (*Dataset, error) {
	out := new(Dataset)
	err := c.cc.Invoke(ctx, DatasetService_UndeleteDataset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatasetServiceServer is the server API for DatasetService service.
// All implementations should embed UnimplementedDatasetServiceServer
// for forward compatibility
type DatasetServiceServer interface {
	// Returns the dataset specified by datasetID.
	GetDataset(context.Context, *GetDatasetRequest) (*Dataset, error)
	// Creates a new empty dataset.
	InsertDataset(context.Context, *InsertDatasetRequest) (*Dataset, error)
	// Updates information in an existing dataset. The update method replaces the
	// entire dataset resource, whereas the patch method only replaces fields that
	// are provided in the submitted dataset resource.
	// This method supports RFC5789 patch semantics.
	PatchDataset(context.Context, *UpdateOrPatchDatasetRequest) (*Dataset, error)
	// Updates information in an existing dataset. The update method replaces the
	// entire dataset resource, whereas the patch method only replaces fields that
	// are provided in the submitted dataset resource.
	UpdateDataset(context.Context, *UpdateOrPatchDatasetRequest) (*Dataset, error)
	// Deletes the dataset specified by the datasetId value. Before you can delete
	// a dataset, you must delete all its tables, either manually or by specifying
	// deleteContents. Immediately after deletion, you can create another dataset
	// with the same name.
	DeleteDataset(context.Context, *DeleteDatasetRequest) (*emptypb.Empty, error)
	// Lists all datasets in the specified project to which the user has been
	// granted the READER dataset role.
	ListDatasets(context.Context, *ListDatasetsRequest) (*DatasetList, error)
	// Undeletes a dataset which is within time travel window based on datasetId.
	// If a time is specified, the dataset version deleted at that time is
	// undeleted, else the last live version is undeleted.
	UndeleteDataset(context.Context, *UndeleteDatasetRequest) (*Dataset, error)
}

// UnimplementedDatasetServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDatasetServiceServer struct {
}

func (UnimplementedDatasetServiceServer) GetDataset(context.Context, *GetDatasetRequest) (*Dataset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataset not implemented")
}
func (UnimplementedDatasetServiceServer) InsertDataset(context.Context, *InsertDatasetRequest) (*Dataset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertDataset not implemented")
}
func (UnimplementedDatasetServiceServer) PatchDataset(context.Context, *UpdateOrPatchDatasetRequest) (*Dataset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchDataset not implemented")
}
func (UnimplementedDatasetServiceServer) UpdateDataset(context.Context, *UpdateOrPatchDatasetRequest) (*Dataset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDataset not implemented")
}
func (UnimplementedDatasetServiceServer) DeleteDataset(context.Context, *DeleteDatasetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataset not implemented")
}
func (UnimplementedDatasetServiceServer) ListDatasets(context.Context, *ListDatasetsRequest) (*DatasetList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDatasets not implemented")
}
func (UnimplementedDatasetServiceServer) UndeleteDataset(context.Context, *UndeleteDatasetRequest) (*Dataset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndeleteDataset not implemented")
}

// UnsafeDatasetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatasetServiceServer will
// result in compilation errors.
type UnsafeDatasetServiceServer interface {
	mustEmbedUnimplementedDatasetServiceServer()
}

func RegisterDatasetServiceServer(s grpc.ServiceRegistrar, srv DatasetServiceServer) {
	s.RegisterService(&DatasetService_ServiceDesc, srv)
}

func _DatasetService_GetDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).GetDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatasetService_GetDataset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).GetDataset(ctx, req.(*GetDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_InsertDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).InsertDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatasetService_InsertDataset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).InsertDataset(ctx, req.(*InsertDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_PatchDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrPatchDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).PatchDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatasetService_PatchDataset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).PatchDataset(ctx, req.(*UpdateOrPatchDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_UpdateDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrPatchDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).UpdateDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatasetService_UpdateDataset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).UpdateDataset(ctx, req.(*UpdateOrPatchDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_DeleteDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).DeleteDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatasetService_DeleteDataset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).DeleteDataset(ctx, req.(*DeleteDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_ListDatasets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDatasetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).ListDatasets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatasetService_ListDatasets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).ListDatasets(ctx, req.(*ListDatasetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_UndeleteDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndeleteDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).UndeleteDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatasetService_UndeleteDataset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).UndeleteDataset(ctx, req.(*UndeleteDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DatasetService_ServiceDesc is the grpc.ServiceDesc for DatasetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DatasetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.bigquery.v2.DatasetService",
	HandlerType: (*DatasetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDataset",
			Handler:    _DatasetService_GetDataset_Handler,
		},
		{
			MethodName: "InsertDataset",
			Handler:    _DatasetService_InsertDataset_Handler,
		},
		{
			MethodName: "PatchDataset",
			Handler:    _DatasetService_PatchDataset_Handler,
		},
		{
			MethodName: "UpdateDataset",
			Handler:    _DatasetService_UpdateDataset_Handler,
		},
		{
			MethodName: "DeleteDataset",
			Handler:    _DatasetService_DeleteDataset_Handler,
		},
		{
			MethodName: "ListDatasets",
			Handler:    _DatasetService_ListDatasets_Handler,
		},
		{
			MethodName: "UndeleteDataset",
			Handler:    _DatasetService_UndeleteDataset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/bigquery/v2/dataset.proto",
}
