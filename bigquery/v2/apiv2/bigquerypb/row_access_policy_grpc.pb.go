// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/bigquery/v2/row_access_policy.proto

package bigquerypb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RowAccessPolicyService_ListRowAccessPolicies_FullMethodName        = "/google.cloud.bigquery.v2.RowAccessPolicyService/ListRowAccessPolicies"
	RowAccessPolicyService_GetRowAccessPolicy_FullMethodName           = "/google.cloud.bigquery.v2.RowAccessPolicyService/GetRowAccessPolicy"
	RowAccessPolicyService_CreateRowAccessPolicy_FullMethodName        = "/google.cloud.bigquery.v2.RowAccessPolicyService/CreateRowAccessPolicy"
	RowAccessPolicyService_UpdateRowAccessPolicy_FullMethodName        = "/google.cloud.bigquery.v2.RowAccessPolicyService/UpdateRowAccessPolicy"
	RowAccessPolicyService_DeleteRowAccessPolicy_FullMethodName        = "/google.cloud.bigquery.v2.RowAccessPolicyService/DeleteRowAccessPolicy"
	RowAccessPolicyService_BatchDeleteRowAccessPolicies_FullMethodName = "/google.cloud.bigquery.v2.RowAccessPolicyService/BatchDeleteRowAccessPolicies"
)

// RowAccessPolicyServiceClient is the client API for RowAccessPolicyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RowAccessPolicyServiceClient interface {
	// Lists all row access policies on the specified table.
	ListRowAccessPolicies(ctx context.Context, in *ListRowAccessPoliciesRequest, opts ...grpc.CallOption) (*ListRowAccessPoliciesResponse, error)
	// Gets the specified row access policy by policy ID.
	GetRowAccessPolicy(ctx context.Context, in *GetRowAccessPolicyRequest, opts ...grpc.CallOption) (*RowAccessPolicy, error)
	// Creates a row access policy.
	CreateRowAccessPolicy(ctx context.Context, in *CreateRowAccessPolicyRequest, opts ...grpc.CallOption) (*RowAccessPolicy, error)
	// Updates a row access policy.
	UpdateRowAccessPolicy(ctx context.Context, in *UpdateRowAccessPolicyRequest, opts ...grpc.CallOption) (*RowAccessPolicy, error)
	// Deletes a row access policy.
	DeleteRowAccessPolicy(ctx context.Context, in *DeleteRowAccessPolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Deletes provided row access policies.
	BatchDeleteRowAccessPolicies(ctx context.Context, in *BatchDeleteRowAccessPoliciesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type rowAccessPolicyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRowAccessPolicyServiceClient(cc grpc.ClientConnInterface) RowAccessPolicyServiceClient {
	return &rowAccessPolicyServiceClient{cc}
}

func (c *rowAccessPolicyServiceClient) ListRowAccessPolicies(ctx context.Context, in *ListRowAccessPoliciesRequest, opts ...grpc.CallOption) (*ListRowAccessPoliciesResponse, error) {
	out := new(ListRowAccessPoliciesResponse)
	err := c.cc.Invoke(ctx, RowAccessPolicyService_ListRowAccessPolicies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rowAccessPolicyServiceClient) GetRowAccessPolicy(ctx context.Context, in *GetRowAccessPolicyRequest, opts ...grpc.CallOption) (*RowAccessPolicy, error) {
	out := new(RowAccessPolicy)
	err := c.cc.Invoke(ctx, RowAccessPolicyService_GetRowAccessPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rowAccessPolicyServiceClient) CreateRowAccessPolicy(ctx context.Context, in *CreateRowAccessPolicyRequest, opts ...grpc.CallOption) (*RowAccessPolicy, error) {
	out := new(RowAccessPolicy)
	err := c.cc.Invoke(ctx, RowAccessPolicyService_CreateRowAccessPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rowAccessPolicyServiceClient) UpdateRowAccessPolicy(ctx context.Context, in *UpdateRowAccessPolicyRequest, opts ...grpc.CallOption) (*RowAccessPolicy, error) {
	out := new(RowAccessPolicy)
	err := c.cc.Invoke(ctx, RowAccessPolicyService_UpdateRowAccessPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rowAccessPolicyServiceClient) DeleteRowAccessPolicy(ctx context.Context, in *DeleteRowAccessPolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RowAccessPolicyService_DeleteRowAccessPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rowAccessPolicyServiceClient) BatchDeleteRowAccessPolicies(ctx context.Context, in *BatchDeleteRowAccessPoliciesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RowAccessPolicyService_BatchDeleteRowAccessPolicies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RowAccessPolicyServiceServer is the server API for RowAccessPolicyService service.
// All implementations should embed UnimplementedRowAccessPolicyServiceServer
// for forward compatibility
type RowAccessPolicyServiceServer interface {
	// Lists all row access policies on the specified table.
	ListRowAccessPolicies(context.Context, *ListRowAccessPoliciesRequest) (*ListRowAccessPoliciesResponse, error)
	// Gets the specified row access policy by policy ID.
	GetRowAccessPolicy(context.Context, *GetRowAccessPolicyRequest) (*RowAccessPolicy, error)
	// Creates a row access policy.
	CreateRowAccessPolicy(context.Context, *CreateRowAccessPolicyRequest) (*RowAccessPolicy, error)
	// Updates a row access policy.
	UpdateRowAccessPolicy(context.Context, *UpdateRowAccessPolicyRequest) (*RowAccessPolicy, error)
	// Deletes a row access policy.
	DeleteRowAccessPolicy(context.Context, *DeleteRowAccessPolicyRequest) (*emptypb.Empty, error)
	// Deletes provided row access policies.
	BatchDeleteRowAccessPolicies(context.Context, *BatchDeleteRowAccessPoliciesRequest) (*emptypb.Empty, error)
}

// UnimplementedRowAccessPolicyServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRowAccessPolicyServiceServer struct {
}

func (UnimplementedRowAccessPolicyServiceServer) ListRowAccessPolicies(context.Context, *ListRowAccessPoliciesRequest) (*ListRowAccessPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRowAccessPolicies not implemented")
}
func (UnimplementedRowAccessPolicyServiceServer) GetRowAccessPolicy(context.Context, *GetRowAccessPolicyRequest) (*RowAccessPolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRowAccessPolicy not implemented")
}
func (UnimplementedRowAccessPolicyServiceServer) CreateRowAccessPolicy(context.Context, *CreateRowAccessPolicyRequest) (*RowAccessPolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRowAccessPolicy not implemented")
}
func (UnimplementedRowAccessPolicyServiceServer) UpdateRowAccessPolicy(context.Context, *UpdateRowAccessPolicyRequest) (*RowAccessPolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRowAccessPolicy not implemented")
}
func (UnimplementedRowAccessPolicyServiceServer) DeleteRowAccessPolicy(context.Context, *DeleteRowAccessPolicyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRowAccessPolicy not implemented")
}
func (UnimplementedRowAccessPolicyServiceServer) BatchDeleteRowAccessPolicies(context.Context, *BatchDeleteRowAccessPoliciesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteRowAccessPolicies not implemented")
}

// UnsafeRowAccessPolicyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RowAccessPolicyServiceServer will
// result in compilation errors.
type UnsafeRowAccessPolicyServiceServer interface {
	mustEmbedUnimplementedRowAccessPolicyServiceServer()
}

func RegisterRowAccessPolicyServiceServer(s grpc.ServiceRegistrar, srv RowAccessPolicyServiceServer) {
	s.RegisterService(&RowAccessPolicyService_ServiceDesc, srv)
}

func _RowAccessPolicyService_ListRowAccessPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRowAccessPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RowAccessPolicyServiceServer).ListRowAccessPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RowAccessPolicyService_ListRowAccessPolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RowAccessPolicyServiceServer).ListRowAccessPolicies(ctx, req.(*ListRowAccessPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RowAccessPolicyService_GetRowAccessPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRowAccessPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RowAccessPolicyServiceServer).GetRowAccessPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RowAccessPolicyService_GetRowAccessPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RowAccessPolicyServiceServer).GetRowAccessPolicy(ctx, req.(*GetRowAccessPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RowAccessPolicyService_CreateRowAccessPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRowAccessPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RowAccessPolicyServiceServer).CreateRowAccessPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RowAccessPolicyService_CreateRowAccessPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RowAccessPolicyServiceServer).CreateRowAccessPolicy(ctx, req.(*CreateRowAccessPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RowAccessPolicyService_UpdateRowAccessPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRowAccessPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RowAccessPolicyServiceServer).UpdateRowAccessPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RowAccessPolicyService_UpdateRowAccessPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RowAccessPolicyServiceServer).UpdateRowAccessPolicy(ctx, req.(*UpdateRowAccessPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RowAccessPolicyService_DeleteRowAccessPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRowAccessPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RowAccessPolicyServiceServer).DeleteRowAccessPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RowAccessPolicyService_DeleteRowAccessPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RowAccessPolicyServiceServer).DeleteRowAccessPolicy(ctx, req.(*DeleteRowAccessPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RowAccessPolicyService_BatchDeleteRowAccessPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDeleteRowAccessPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RowAccessPolicyServiceServer).BatchDeleteRowAccessPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RowAccessPolicyService_BatchDeleteRowAccessPolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RowAccessPolicyServiceServer).BatchDeleteRowAccessPolicies(ctx, req.(*BatchDeleteRowAccessPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RowAccessPolicyService_ServiceDesc is the grpc.ServiceDesc for RowAccessPolicyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RowAccessPolicyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.bigquery.v2.RowAccessPolicyService",
	HandlerType: (*RowAccessPolicyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRowAccessPolicies",
			Handler:    _RowAccessPolicyService_ListRowAccessPolicies_Handler,
		},
		{
			MethodName: "GetRowAccessPolicy",
			Handler:    _RowAccessPolicyService_GetRowAccessPolicy_Handler,
		},
		{
			MethodName: "CreateRowAccessPolicy",
			Handler:    _RowAccessPolicyService_CreateRowAccessPolicy_Handler,
		},
		{
			MethodName: "UpdateRowAccessPolicy",
			Handler:    _RowAccessPolicyService_UpdateRowAccessPolicy_Handler,
		},
		{
			MethodName: "DeleteRowAccessPolicy",
			Handler:    _RowAccessPolicyService_DeleteRowAccessPolicy_Handler,
		},
		{
			MethodName: "BatchDeleteRowAccessPolicies",
			Handler:    _RowAccessPolicyService_BatchDeleteRowAccessPolicies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/bigquery/v2/row_access_policy.proto",
}
