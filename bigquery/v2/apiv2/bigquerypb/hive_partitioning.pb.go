// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.7
// source: google/cloud/bigquery/v2/hive_partitioning.proto

package bigquerypb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Options for configuring hive partitioning detect.
type HivePartitioningOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. When set, what mode of hive partitioning to use when reading
	// data.  The following modes are supported:
	//
	// * AUTO: automatically infer partition key name(s) and type(s).
	//
	// * STRINGS: automatically infer partition key name(s).  All types are
	// strings.
	//
	// * CUSTOM: partition key schema is encoded in the source URI prefix.
	//
	// Not all storage formats support hive partitioning. Requesting hive
	// partitioning on an unsupported format will lead to an error.
	// Currently supported formats are: JSON, CSV, ORC, Avro and Parquet.
	Mode string `protobuf:"bytes,1,opt,name=mode,proto3" json:"mode,omitempty"`
	// Optional. When hive partition detection is requested, a common prefix for
	// all source uris must be required.  The prefix must end immediately before
	// the partition key encoding begins. For example, consider files following
	// this data layout:
	//
	// gs://bucket/path_to_table/dt=2019-06-01/country=USA/id=7/file.avro
	//
	// gs://bucket/path_to_table/dt=2019-05-31/country=CA/id=3/file.avro
	//
	// When hive partitioning is requested with either AUTO or STRINGS detection,
	// the common prefix can be either of gs://bucket/path_to_table or
	// gs://bucket/path_to_table/.
	//
	// CUSTOM detection requires encoding the partitioning schema immediately
	// after the common prefix.  For CUSTOM, any of
	//
	// * gs://bucket/path_to_table/{dt:DATE}/{country:STRING}/{id:INTEGER}
	//
	// * gs://bucket/path_to_table/{dt:STRING}/{country:STRING}/{id:INTEGER}
	//
	// * gs://bucket/path_to_table/{dt:DATE}/{country:STRING}/{id:STRING}
	//
	// would all be valid source URI prefixes.
	SourceUriPrefix string `protobuf:"bytes,2,opt,name=source_uri_prefix,json=sourceUriPrefix,proto3" json:"source_uri_prefix,omitempty"`
	// Optional. If set to true, queries over this table require a partition
	// filter that can be used for partition elimination to be specified.
	//
	// Note that this field should only be true when creating a permanent
	// external table or querying a temporary external table.
	//
	// Hive-partitioned loads with require_partition_filter explicitly set to
	// true will fail.
	RequirePartitionFilter *wrapperspb.BoolValue `protobuf:"bytes,3,opt,name=require_partition_filter,json=requirePartitionFilter,proto3" json:"require_partition_filter,omitempty"`
	// Output only. For permanent external tables, this field is populated with
	// the hive partition keys in the order they were inferred. The types of the
	// partition keys can be deduced by checking the table schema (which will
	// include the partition keys). Not every API will populate this field in the
	// output. For example, Tables.Get will populate it, but Tables.List will not
	// contain this field.
	Fields []string `protobuf:"bytes,4,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *HivePartitioningOptions) Reset() {
	*x = HivePartitioningOptions{}
	mi := &file_google_cloud_bigquery_v2_hive_partitioning_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HivePartitioningOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HivePartitioningOptions) ProtoMessage() {}

func (x *HivePartitioningOptions) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_hive_partitioning_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HivePartitioningOptions.ProtoReflect.Descriptor instead.
func (*HivePartitioningOptions) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_hive_partitioning_proto_rawDescGZIP(), []int{0}
}

func (x *HivePartitioningOptions) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *HivePartitioningOptions) GetSourceUriPrefix() string {
	if x != nil {
		return x.SourceUriPrefix
	}
	return ""
}

func (x *HivePartitioningOptions) GetRequirePartitionFilter() *wrapperspb.BoolValue {
	if x != nil {
		return x.RequirePartitionFilter
	}
	return nil
}

func (x *HivePartitioningOptions) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

var File_google_cloud_bigquery_v2_hive_partitioning_proto protoreflect.FileDescriptor

var file_google_cloud_bigquery_v2_hive_partitioning_proto_rawDesc = []byte{
	0x0a, 0x30, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x68, 0x69, 0x76, 0x65, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x18, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdb, 0x01,
	0x0a, 0x17, 0x48, 0x69, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x12, 0x2f, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x69,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x72, 0x69, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x12, 0x59, 0x0a, 0x18, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x16, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1b,
	0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x72, 0x0a, 0x1c, 0x63,
	0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x42, 0x15, 0x48, 0x69, 0x76,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x5a, 0x3b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x70, 0x62, 0x3b, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x70, 0x62, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_bigquery_v2_hive_partitioning_proto_rawDescOnce sync.Once
	file_google_cloud_bigquery_v2_hive_partitioning_proto_rawDescData = file_google_cloud_bigquery_v2_hive_partitioning_proto_rawDesc
)

func file_google_cloud_bigquery_v2_hive_partitioning_proto_rawDescGZIP() []byte {
	file_google_cloud_bigquery_v2_hive_partitioning_proto_rawDescOnce.Do(func() {
		file_google_cloud_bigquery_v2_hive_partitioning_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_bigquery_v2_hive_partitioning_proto_rawDescData)
	})
	return file_google_cloud_bigquery_v2_hive_partitioning_proto_rawDescData
}

var file_google_cloud_bigquery_v2_hive_partitioning_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_google_cloud_bigquery_v2_hive_partitioning_proto_goTypes = []any{
	(*HivePartitioningOptions)(nil), // 0: google.cloud.bigquery.v2.HivePartitioningOptions
	(*wrapperspb.BoolValue)(nil),    // 1: google.protobuf.BoolValue
}
var file_google_cloud_bigquery_v2_hive_partitioning_proto_depIdxs = []int32{
	1, // 0: google.cloud.bigquery.v2.HivePartitioningOptions.require_partition_filter:type_name -> google.protobuf.BoolValue
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_google_cloud_bigquery_v2_hive_partitioning_proto_init() }
func file_google_cloud_bigquery_v2_hive_partitioning_proto_init() {
	if File_google_cloud_bigquery_v2_hive_partitioning_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_bigquery_v2_hive_partitioning_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_cloud_bigquery_v2_hive_partitioning_proto_goTypes,
		DependencyIndexes: file_google_cloud_bigquery_v2_hive_partitioning_proto_depIdxs,
		MessageInfos:      file_google_cloud_bigquery_v2_hive_partitioning_proto_msgTypes,
	}.Build()
	File_google_cloud_bigquery_v2_hive_partitioning_proto = out.File
	file_google_cloud_bigquery_v2_hive_partitioning_proto_rawDesc = nil
	file_google_cloud_bigquery_v2_hive_partitioning_proto_goTypes = nil
	file_google_cloud_bigquery_v2_hive_partitioning_proto_depIdxs = nil
}
