// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.7
// source: google/cloud/bigquery/v2/privacy_policy.proto

package bigquerypb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enum for Join Restrictions policy.
type JoinRestrictionPolicy_JoinCondition int32

const (
	// A join is neither required nor restricted on any column. Default value.
	JoinRestrictionPolicy_JOIN_CONDITION_UNSPECIFIED JoinRestrictionPolicy_JoinCondition = 0
	// A join is required on at least one of the specified columns.
	JoinRestrictionPolicy_JOIN_ANY JoinRestrictionPolicy_JoinCondition = 1
	// A join is required on all specified columns.
	JoinRestrictionPolicy_JOIN_ALL JoinRestrictionPolicy_JoinCondition = 2
	// A join is not required, but if present it is only permitted on
	// 'join_allowed_columns'
	JoinRestrictionPolicy_JOIN_NOT_REQUIRED JoinRestrictionPolicy_JoinCondition = 3
	// Joins are blocked for all queries.
	JoinRestrictionPolicy_JOIN_BLOCKED JoinRestrictionPolicy_JoinCondition = 4
)

// Enum value maps for JoinRestrictionPolicy_JoinCondition.
var (
	JoinRestrictionPolicy_JoinCondition_name = map[int32]string{
		0: "JOIN_CONDITION_UNSPECIFIED",
		1: "JOIN_ANY",
		2: "JOIN_ALL",
		3: "JOIN_NOT_REQUIRED",
		4: "JOIN_BLOCKED",
	}
	JoinRestrictionPolicy_JoinCondition_value = map[string]int32{
		"JOIN_CONDITION_UNSPECIFIED": 0,
		"JOIN_ANY":                   1,
		"JOIN_ALL":                   2,
		"JOIN_NOT_REQUIRED":          3,
		"JOIN_BLOCKED":               4,
	}
)

func (x JoinRestrictionPolicy_JoinCondition) Enum() *JoinRestrictionPolicy_JoinCondition {
	p := new(JoinRestrictionPolicy_JoinCondition)
	*p = x
	return p
}

func (x JoinRestrictionPolicy_JoinCondition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JoinRestrictionPolicy_JoinCondition) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_bigquery_v2_privacy_policy_proto_enumTypes[0].Descriptor()
}

func (JoinRestrictionPolicy_JoinCondition) Type() protoreflect.EnumType {
	return &file_google_cloud_bigquery_v2_privacy_policy_proto_enumTypes[0]
}

func (x JoinRestrictionPolicy_JoinCondition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JoinRestrictionPolicy_JoinCondition.Descriptor instead.
func (JoinRestrictionPolicy_JoinCondition) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_privacy_policy_proto_rawDescGZIP(), []int{2, 0}
}

// Represents privacy policy associated with "aggregation threshold" method.
type AggregationThresholdPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The threshold for the "aggregation threshold" policy.
	Threshold *int64 `protobuf:"varint,1,opt,name=threshold,proto3,oneof" json:"threshold,omitempty"`
	// Optional. The privacy unit column(s) associated with this policy.
	// For now, only one column per data source object (table, view) is allowed as
	// a privacy unit column.
	// Representing as a repeated field in metadata for extensibility to
	// multiple columns in future.
	// Duplicates and Repeated struct fields are not allowed.
	// For nested fields, use dot notation ("outer.inner")
	PrivacyUnitColumns []string `protobuf:"bytes,2,rep,name=privacy_unit_columns,json=privacyUnitColumns,proto3" json:"privacy_unit_columns,omitempty"`
}

func (x *AggregationThresholdPolicy) Reset() {
	*x = AggregationThresholdPolicy{}
	mi := &file_google_cloud_bigquery_v2_privacy_policy_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AggregationThresholdPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregationThresholdPolicy) ProtoMessage() {}

func (x *AggregationThresholdPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_privacy_policy_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregationThresholdPolicy.ProtoReflect.Descriptor instead.
func (*AggregationThresholdPolicy) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_privacy_policy_proto_rawDescGZIP(), []int{0}
}

func (x *AggregationThresholdPolicy) GetThreshold() int64 {
	if x != nil && x.Threshold != nil {
		return *x.Threshold
	}
	return 0
}

func (x *AggregationThresholdPolicy) GetPrivacyUnitColumns() []string {
	if x != nil {
		return x.PrivacyUnitColumns
	}
	return nil
}

// Represents privacy policy associated with "differential privacy" method.
type DifferentialPrivacyPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The maximum epsilon value that a query can consume. If the
	// subscriber specifies epsilon as a parameter in a SELECT query, it must be
	// less than or equal to this value. The epsilon parameter controls the amount
	// of noise that is added to the groups â€” a higher epsilon means less noise.
	MaxEpsilonPerQuery *float64 `protobuf:"fixed64,1,opt,name=max_epsilon_per_query,json=maxEpsilonPerQuery,proto3,oneof" json:"max_epsilon_per_query,omitempty"`
	// Optional. The delta value that is used per query. Delta represents the
	// probability that any row will fail to be epsilon differentially private.
	// Indicates the risk associated with exposing aggregate rows in the result of
	// a query.
	DeltaPerQuery *float64 `protobuf:"fixed64,2,opt,name=delta_per_query,json=deltaPerQuery,proto3,oneof" json:"delta_per_query,omitempty"`
	// Optional. The maximum groups contributed value that is used per query.
	// Represents the maximum number of groups to which each protected entity can
	// contribute. Changing this value does not improve or worsen privacy. The
	// best value for accuracy and utility depends on the query and data.
	MaxGroupsContributed *int64 `protobuf:"varint,3,opt,name=max_groups_contributed,json=maxGroupsContributed,proto3,oneof" json:"max_groups_contributed,omitempty"`
	// Optional. The privacy unit column associated with this policy. Differential
	// privacy policies can only have one privacy unit column per data source
	// object (table, view).
	PrivacyUnitColumn *string `protobuf:"bytes,4,opt,name=privacy_unit_column,json=privacyUnitColumn,proto3,oneof" json:"privacy_unit_column,omitempty"`
	// Optional. The total epsilon budget for all queries against the
	// privacy-protected view. Each subscriber query against this view charges the
	// amount of epsilon they request in their query. If there is sufficient
	// budget, then the subscriber query attempts to complete. It might still fail
	// due to other reasons, in which case the charge is refunded. If there is
	// insufficient budget the query is rejected. There might be multiple charge
	// attempts if a single query references multiple views. In this case there
	// must be sufficient budget for all charges or the query is rejected and
	// charges are refunded in best effort. The budget does not have a refresh
	// policy and can only be updated via ALTER VIEW or circumvented by creating a
	// new view that can be queried with a fresh budget.
	EpsilonBudget *float64 `protobuf:"fixed64,5,opt,name=epsilon_budget,json=epsilonBudget,proto3,oneof" json:"epsilon_budget,omitempty"`
	// Optional. The total delta budget for all queries against the
	// privacy-protected view. Each subscriber query against this view charges the
	// amount of delta that is pre-defined by the contributor through the privacy
	// policy delta_per_query field. If there is sufficient budget, then the
	// subscriber query attempts to complete. It might still fail due to other
	// reasons, in which case the charge is refunded. If there is insufficient
	// budget the query is rejected. There might be multiple charge attempts if a
	// single query references multiple views. In this case there must be
	// sufficient budget for all charges or the query is rejected and charges are
	// refunded in best effort. The budget does not have a refresh policy and can
	// only be updated via ALTER VIEW or circumvented by creating a new view that
	// can be queried with a fresh budget.
	DeltaBudget *float64 `protobuf:"fixed64,6,opt,name=delta_budget,json=deltaBudget,proto3,oneof" json:"delta_budget,omitempty"`
	// Output only. The epsilon budget remaining. If budget is exhausted, no more
	// queries are allowed. Note that the budget for queries that are in progress
	// is deducted before the query executes. If the query fails or is cancelled
	// then the budget is refunded. In this case the amount of budget remaining
	// can increase.
	EpsilonBudgetRemaining *float64 `protobuf:"fixed64,7,opt,name=epsilon_budget_remaining,json=epsilonBudgetRemaining,proto3,oneof" json:"epsilon_budget_remaining,omitempty"`
	// Output only. The delta budget remaining. If budget is exhausted, no more
	// queries are allowed. Note that the budget for queries that are in progress
	// is deducted before the query executes. If the query fails or is cancelled
	// then the budget is refunded. In this case the amount of budget remaining
	// can increase.
	DeltaBudgetRemaining *float64 `protobuf:"fixed64,8,opt,name=delta_budget_remaining,json=deltaBudgetRemaining,proto3,oneof" json:"delta_budget_remaining,omitempty"`
}

func (x *DifferentialPrivacyPolicy) Reset() {
	*x = DifferentialPrivacyPolicy{}
	mi := &file_google_cloud_bigquery_v2_privacy_policy_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DifferentialPrivacyPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DifferentialPrivacyPolicy) ProtoMessage() {}

func (x *DifferentialPrivacyPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_privacy_policy_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DifferentialPrivacyPolicy.ProtoReflect.Descriptor instead.
func (*DifferentialPrivacyPolicy) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_privacy_policy_proto_rawDescGZIP(), []int{1}
}

func (x *DifferentialPrivacyPolicy) GetMaxEpsilonPerQuery() float64 {
	if x != nil && x.MaxEpsilonPerQuery != nil {
		return *x.MaxEpsilonPerQuery
	}
	return 0
}

func (x *DifferentialPrivacyPolicy) GetDeltaPerQuery() float64 {
	if x != nil && x.DeltaPerQuery != nil {
		return *x.DeltaPerQuery
	}
	return 0
}

func (x *DifferentialPrivacyPolicy) GetMaxGroupsContributed() int64 {
	if x != nil && x.MaxGroupsContributed != nil {
		return *x.MaxGroupsContributed
	}
	return 0
}

func (x *DifferentialPrivacyPolicy) GetPrivacyUnitColumn() string {
	if x != nil && x.PrivacyUnitColumn != nil {
		return *x.PrivacyUnitColumn
	}
	return ""
}

func (x *DifferentialPrivacyPolicy) GetEpsilonBudget() float64 {
	if x != nil && x.EpsilonBudget != nil {
		return *x.EpsilonBudget
	}
	return 0
}

func (x *DifferentialPrivacyPolicy) GetDeltaBudget() float64 {
	if x != nil && x.DeltaBudget != nil {
		return *x.DeltaBudget
	}
	return 0
}

func (x *DifferentialPrivacyPolicy) GetEpsilonBudgetRemaining() float64 {
	if x != nil && x.EpsilonBudgetRemaining != nil {
		return *x.EpsilonBudgetRemaining
	}
	return 0
}

func (x *DifferentialPrivacyPolicy) GetDeltaBudgetRemaining() float64 {
	if x != nil && x.DeltaBudgetRemaining != nil {
		return *x.DeltaBudgetRemaining
	}
	return 0
}

// Represents privacy policy associated with "join restrictions". Join
// restriction gives data providers the ability to enforce joins on the
// 'join_allowed_columns' when data is queried from a privacy protected view.
type JoinRestrictionPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Specifies if a join is required or not on queries for the view.
	// Default is JOIN_CONDITION_UNSPECIFIED.
	JoinCondition *JoinRestrictionPolicy_JoinCondition `protobuf:"varint,1,opt,name=join_condition,json=joinCondition,proto3,enum=google.cloud.bigquery.v2.JoinRestrictionPolicy_JoinCondition,oneof" json:"join_condition,omitempty"`
	// Optional. The only columns that joins are allowed on.
	// This field is must be specified for join_conditions JOIN_ANY and JOIN_ALL
	// and it cannot be set for JOIN_BLOCKED.
	JoinAllowedColumns []string `protobuf:"bytes,2,rep,name=join_allowed_columns,json=joinAllowedColumns,proto3" json:"join_allowed_columns,omitempty"`
}

func (x *JoinRestrictionPolicy) Reset() {
	*x = JoinRestrictionPolicy{}
	mi := &file_google_cloud_bigquery_v2_privacy_policy_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinRestrictionPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinRestrictionPolicy) ProtoMessage() {}

func (x *JoinRestrictionPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_privacy_policy_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinRestrictionPolicy.ProtoReflect.Descriptor instead.
func (*JoinRestrictionPolicy) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_privacy_policy_proto_rawDescGZIP(), []int{2}
}

func (x *JoinRestrictionPolicy) GetJoinCondition() JoinRestrictionPolicy_JoinCondition {
	if x != nil && x.JoinCondition != nil {
		return *x.JoinCondition
	}
	return JoinRestrictionPolicy_JOIN_CONDITION_UNSPECIFIED
}

func (x *JoinRestrictionPolicy) GetJoinAllowedColumns() []string {
	if x != nil {
		return x.JoinAllowedColumns
	}
	return nil
}

// Represents privacy policy that contains the privacy requirements specified by
// the data owner. Currently, this is only supported on views.
type PrivacyPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Privacy policy associated with this requirement specification. Only one of
	// the privacy methods is allowed per data source object.
	//
	// Types that are assignable to PrivacyPolicy:
	//
	//	*PrivacyPolicy_AggregationThresholdPolicy
	//	*PrivacyPolicy_DifferentialPrivacyPolicy
	PrivacyPolicy isPrivacyPolicy_PrivacyPolicy `protobuf_oneof:"privacy_policy"`
	// Optional. Join restriction policy is outside of the one of policies, since
	// this policy can be set along with other policies. This policy gives data
	// providers the ability to enforce joins on the 'join_allowed_columns' when
	// data is queried from a privacy protected view.
	JoinRestrictionPolicy *JoinRestrictionPolicy `protobuf:"bytes,1,opt,name=join_restriction_policy,json=joinRestrictionPolicy,proto3,oneof" json:"join_restriction_policy,omitempty"`
}

func (x *PrivacyPolicy) Reset() {
	*x = PrivacyPolicy{}
	mi := &file_google_cloud_bigquery_v2_privacy_policy_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrivacyPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivacyPolicy) ProtoMessage() {}

func (x *PrivacyPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_privacy_policy_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivacyPolicy.ProtoReflect.Descriptor instead.
func (*PrivacyPolicy) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_privacy_policy_proto_rawDescGZIP(), []int{3}
}

func (m *PrivacyPolicy) GetPrivacyPolicy() isPrivacyPolicy_PrivacyPolicy {
	if m != nil {
		return m.PrivacyPolicy
	}
	return nil
}

func (x *PrivacyPolicy) GetAggregationThresholdPolicy() *AggregationThresholdPolicy {
	if x, ok := x.GetPrivacyPolicy().(*PrivacyPolicy_AggregationThresholdPolicy); ok {
		return x.AggregationThresholdPolicy
	}
	return nil
}

func (x *PrivacyPolicy) GetDifferentialPrivacyPolicy() *DifferentialPrivacyPolicy {
	if x, ok := x.GetPrivacyPolicy().(*PrivacyPolicy_DifferentialPrivacyPolicy); ok {
		return x.DifferentialPrivacyPolicy
	}
	return nil
}

func (x *PrivacyPolicy) GetJoinRestrictionPolicy() *JoinRestrictionPolicy {
	if x != nil {
		return x.JoinRestrictionPolicy
	}
	return nil
}

type isPrivacyPolicy_PrivacyPolicy interface {
	isPrivacyPolicy_PrivacyPolicy()
}

type PrivacyPolicy_AggregationThresholdPolicy struct {
	// Optional. Policy used for aggregation thresholds.
	AggregationThresholdPolicy *AggregationThresholdPolicy `protobuf:"bytes,2,opt,name=aggregation_threshold_policy,json=aggregationThresholdPolicy,proto3,oneof"`
}

type PrivacyPolicy_DifferentialPrivacyPolicy struct {
	// Optional. Policy used for differential privacy.
	DifferentialPrivacyPolicy *DifferentialPrivacyPolicy `protobuf:"bytes,3,opt,name=differential_privacy_policy,json=differentialPrivacyPolicy,proto3,oneof"`
}

func (*PrivacyPolicy_AggregationThresholdPolicy) isPrivacyPolicy_PrivacyPolicy() {}

func (*PrivacyPolicy_DifferentialPrivacyPolicy) isPrivacyPolicy_PrivacyPolicy() {}

var File_google_cloud_bigquery_v2_privacy_policy_proto protoreflect.FileDescriptor

var file_google_cloud_bigquery_v2_privacy_policy_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x18, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69,
	0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x89, 0x01, 0x0a, 0x1a, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x26, 0x0a, 0x09, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x48, 0x00, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x35, 0x0a, 0x14, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x12, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x55, 0x6e, 0x69,
	0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0xa3, 0x05, 0x0a, 0x19, 0x44, 0x69, 0x66, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x3b, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x70, 0x73, 0x69,
	0x6c, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x45,
	0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x30, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48,
	0x01, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x50, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x02, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x13, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x03, 0x52, 0x11, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a,
	0x0e, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x04, 0x52, 0x0d, 0x65, 0x70,
	0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b,
	0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x05, 0x52, 0x0b, 0x64, 0x65, 0x6c,
	0x74, 0x61, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x18, 0x65,
	0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x48, 0x06, 0x52, 0x16, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x42, 0x75, 0x64,
	0x67, 0x65, 0x74, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12,
	0x3e, 0x0a, 0x16, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x5f,
	0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x48, 0x07, 0x52, 0x14, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x42, 0x75, 0x64,
	0x67, 0x65, 0x74, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x42,
	0x18, 0x0a, 0x16, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x42, 0x19, 0x0a,
	0x17, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x64,
	0x67, 0x65, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x62, 0x75,
	0x64, 0x67, 0x65, 0x74, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e,
	0x5f, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x62, 0x75, 0x64, 0x67,
	0x65, 0x74, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0xc7, 0x02, 0x0a,
	0x15, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x6e, 0x0a, 0x0e, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69,
	0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x48, 0x00, 0x52, 0x0d, 0x6a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x12, 0x6a, 0x6f, 0x69, 0x6e, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x22, 0x74, 0x0a,
	0x0d, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e,
	0x0a, 0x1a, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x4a, 0x4f,
	0x49, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10,
	0x03, 0x12, 0x10, 0x0a, 0x0c, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45,
	0x44, 0x10, 0x04, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xab, 0x03, 0x0a, 0x0d, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x7d, 0x0a, 0x1c, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69,
	0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x1a, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x7a, 0x0a, 0x1b, 0x64, 0x69, 0x66, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x19, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x71, 0x0a, 0x17, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e,
	0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x01, 0x52, 0x15, 0x6a, 0x6f,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x6a, 0x6f, 0x69,
	0x6e, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x42, 0x6f, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x76, 0x32, 0x42, 0x12, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x3b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x69,
	0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x70, 0x62, 0x3b, 0x62, 0x69, 0x67, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_bigquery_v2_privacy_policy_proto_rawDescOnce sync.Once
	file_google_cloud_bigquery_v2_privacy_policy_proto_rawDescData = file_google_cloud_bigquery_v2_privacy_policy_proto_rawDesc
)

func file_google_cloud_bigquery_v2_privacy_policy_proto_rawDescGZIP() []byte {
	file_google_cloud_bigquery_v2_privacy_policy_proto_rawDescOnce.Do(func() {
		file_google_cloud_bigquery_v2_privacy_policy_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_bigquery_v2_privacy_policy_proto_rawDescData)
	})
	return file_google_cloud_bigquery_v2_privacy_policy_proto_rawDescData
}

var file_google_cloud_bigquery_v2_privacy_policy_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_google_cloud_bigquery_v2_privacy_policy_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_google_cloud_bigquery_v2_privacy_policy_proto_goTypes = []any{
	(JoinRestrictionPolicy_JoinCondition)(0), // 0: google.cloud.bigquery.v2.JoinRestrictionPolicy.JoinCondition
	(*AggregationThresholdPolicy)(nil),       // 1: google.cloud.bigquery.v2.AggregationThresholdPolicy
	(*DifferentialPrivacyPolicy)(nil),        // 2: google.cloud.bigquery.v2.DifferentialPrivacyPolicy
	(*JoinRestrictionPolicy)(nil),            // 3: google.cloud.bigquery.v2.JoinRestrictionPolicy
	(*PrivacyPolicy)(nil),                    // 4: google.cloud.bigquery.v2.PrivacyPolicy
}
var file_google_cloud_bigquery_v2_privacy_policy_proto_depIdxs = []int32{
	0, // 0: google.cloud.bigquery.v2.JoinRestrictionPolicy.join_condition:type_name -> google.cloud.bigquery.v2.JoinRestrictionPolicy.JoinCondition
	1, // 1: google.cloud.bigquery.v2.PrivacyPolicy.aggregation_threshold_policy:type_name -> google.cloud.bigquery.v2.AggregationThresholdPolicy
	2, // 2: google.cloud.bigquery.v2.PrivacyPolicy.differential_privacy_policy:type_name -> google.cloud.bigquery.v2.DifferentialPrivacyPolicy
	3, // 3: google.cloud.bigquery.v2.PrivacyPolicy.join_restriction_policy:type_name -> google.cloud.bigquery.v2.JoinRestrictionPolicy
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_google_cloud_bigquery_v2_privacy_policy_proto_init() }
func file_google_cloud_bigquery_v2_privacy_policy_proto_init() {
	if File_google_cloud_bigquery_v2_privacy_policy_proto != nil {
		return
	}
	file_google_cloud_bigquery_v2_privacy_policy_proto_msgTypes[0].OneofWrappers = []any{}
	file_google_cloud_bigquery_v2_privacy_policy_proto_msgTypes[1].OneofWrappers = []any{}
	file_google_cloud_bigquery_v2_privacy_policy_proto_msgTypes[2].OneofWrappers = []any{}
	file_google_cloud_bigquery_v2_privacy_policy_proto_msgTypes[3].OneofWrappers = []any{
		(*PrivacyPolicy_AggregationThresholdPolicy)(nil),
		(*PrivacyPolicy_DifferentialPrivacyPolicy)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_bigquery_v2_privacy_policy_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_cloud_bigquery_v2_privacy_policy_proto_goTypes,
		DependencyIndexes: file_google_cloud_bigquery_v2_privacy_policy_proto_depIdxs,
		EnumInfos:         file_google_cloud_bigquery_v2_privacy_policy_proto_enumTypes,
		MessageInfos:      file_google_cloud_bigquery_v2_privacy_policy_proto_msgTypes,
	}.Build()
	File_google_cloud_bigquery_v2_privacy_policy_proto = out.File
	file_google_cloud_bigquery_v2_privacy_policy_proto_rawDesc = nil
	file_google_cloud_bigquery_v2_privacy_policy_proto_goTypes = nil
	file_google_cloud_bigquery_v2_privacy_policy_proto_depIdxs = nil
}
