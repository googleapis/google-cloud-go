// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.7
// source: google/cloud/bigquery/v2/routine.proto

package bigquerypb

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The fine-grained type of the routine.
type Routine_RoutineType int32

const (
	// Default value.
	Routine_ROUTINE_TYPE_UNSPECIFIED Routine_RoutineType = 0
	// Non-built-in persistent scalar function.
	Routine_SCALAR_FUNCTION Routine_RoutineType = 1
	// Stored procedure.
	Routine_PROCEDURE Routine_RoutineType = 2
	// Non-built-in persistent TVF.
	Routine_TABLE_VALUED_FUNCTION Routine_RoutineType = 3
	// Non-built-in persistent aggregate function.
	Routine_AGGREGATE_FUNCTION Routine_RoutineType = 4
)

// Enum value maps for Routine_RoutineType.
var (
	Routine_RoutineType_name = map[int32]string{
		0: "ROUTINE_TYPE_UNSPECIFIED",
		1: "SCALAR_FUNCTION",
		2: "PROCEDURE",
		3: "TABLE_VALUED_FUNCTION",
		4: "AGGREGATE_FUNCTION",
	}
	Routine_RoutineType_value = map[string]int32{
		"ROUTINE_TYPE_UNSPECIFIED": 0,
		"SCALAR_FUNCTION":          1,
		"PROCEDURE":                2,
		"TABLE_VALUED_FUNCTION":    3,
		"AGGREGATE_FUNCTION":       4,
	}
)

func (x Routine_RoutineType) Enum() *Routine_RoutineType {
	p := new(Routine_RoutineType)
	*p = x
	return p
}

func (x Routine_RoutineType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Routine_RoutineType) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_bigquery_v2_routine_proto_enumTypes[0].Descriptor()
}

func (Routine_RoutineType) Type() protoreflect.EnumType {
	return &file_google_cloud_bigquery_v2_routine_proto_enumTypes[0]
}

func (x Routine_RoutineType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Routine_RoutineType.Descriptor instead.
func (Routine_RoutineType) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_routine_proto_rawDescGZIP(), []int{0, 0}
}

// The language of the routine.
type Routine_Language int32

const (
	// Default value.
	Routine_LANGUAGE_UNSPECIFIED Routine_Language = 0
	// SQL language.
	Routine_SQL Routine_Language = 1
	// JavaScript language.
	Routine_JAVASCRIPT Routine_Language = 2
	// Python language.
	Routine_PYTHON Routine_Language = 3
	// Java language.
	Routine_JAVA Routine_Language = 4
	// Scala language.
	Routine_SCALA Routine_Language = 5
)

// Enum value maps for Routine_Language.
var (
	Routine_Language_name = map[int32]string{
		0: "LANGUAGE_UNSPECIFIED",
		1: "SQL",
		2: "JAVASCRIPT",
		3: "PYTHON",
		4: "JAVA",
		5: "SCALA",
	}
	Routine_Language_value = map[string]int32{
		"LANGUAGE_UNSPECIFIED": 0,
		"SQL":                  1,
		"JAVASCRIPT":           2,
		"PYTHON":               3,
		"JAVA":                 4,
		"SCALA":                5,
	}
)

func (x Routine_Language) Enum() *Routine_Language {
	p := new(Routine_Language)
	*p = x
	return p
}

func (x Routine_Language) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Routine_Language) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_bigquery_v2_routine_proto_enumTypes[1].Descriptor()
}

func (Routine_Language) Type() protoreflect.EnumType {
	return &file_google_cloud_bigquery_v2_routine_proto_enumTypes[1]
}

func (x Routine_Language) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Routine_Language.Descriptor instead.
func (Routine_Language) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_routine_proto_rawDescGZIP(), []int{0, 1}
}

// JavaScript UDF determinism levels.
//
// If all JavaScript UDFs are DETERMINISTIC, the query result is
// potentially cacheable (see below). If any JavaScript UDF is
// NOT_DETERMINISTIC, the query result is not cacheable.
//
// Even if a JavaScript UDF is deterministic, many other factors can prevent
// usage of cached query results. Example factors include but not limited to:
// DDL/DML, non-deterministic SQL function calls, update of referenced
// tables/views/UDFs or imported JavaScript libraries.
//
// SQL UDFs cannot have determinism specified. Their determinism is
// automatically determined.
type Routine_DeterminismLevel int32

const (
	// The determinism of the UDF is unspecified.
	Routine_DETERMINISM_LEVEL_UNSPECIFIED Routine_DeterminismLevel = 0
	// The UDF is deterministic, meaning that 2 function calls with the same
	// inputs always produce the same result, even across 2 query runs.
	Routine_DETERMINISTIC Routine_DeterminismLevel = 1
	// The UDF is not deterministic.
	Routine_NOT_DETERMINISTIC Routine_DeterminismLevel = 2
)

// Enum value maps for Routine_DeterminismLevel.
var (
	Routine_DeterminismLevel_name = map[int32]string{
		0: "DETERMINISM_LEVEL_UNSPECIFIED",
		1: "DETERMINISTIC",
		2: "NOT_DETERMINISTIC",
	}
	Routine_DeterminismLevel_value = map[string]int32{
		"DETERMINISM_LEVEL_UNSPECIFIED": 0,
		"DETERMINISTIC":                 1,
		"NOT_DETERMINISTIC":             2,
	}
)

func (x Routine_DeterminismLevel) Enum() *Routine_DeterminismLevel {
	p := new(Routine_DeterminismLevel)
	*p = x
	return p
}

func (x Routine_DeterminismLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Routine_DeterminismLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_bigquery_v2_routine_proto_enumTypes[2].Descriptor()
}

func (Routine_DeterminismLevel) Type() protoreflect.EnumType {
	return &file_google_cloud_bigquery_v2_routine_proto_enumTypes[2]
}

func (x Routine_DeterminismLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Routine_DeterminismLevel.Descriptor instead.
func (Routine_DeterminismLevel) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_routine_proto_rawDescGZIP(), []int{0, 2}
}

// Security mode.
type Routine_SecurityMode int32

const (
	// The security mode of the routine is unspecified.
	Routine_SECURITY_MODE_UNSPECIFIED Routine_SecurityMode = 0
	// The routine is to be executed with the privileges of the user who
	// defines it.
	Routine_DEFINER Routine_SecurityMode = 1
	// The routine is to be executed with the privileges of the user who
	// invokes it.
	Routine_INVOKER Routine_SecurityMode = 2
)

// Enum value maps for Routine_SecurityMode.
var (
	Routine_SecurityMode_name = map[int32]string{
		0: "SECURITY_MODE_UNSPECIFIED",
		1: "DEFINER",
		2: "INVOKER",
	}
	Routine_SecurityMode_value = map[string]int32{
		"SECURITY_MODE_UNSPECIFIED": 0,
		"DEFINER":                   1,
		"INVOKER":                   2,
	}
)

func (x Routine_SecurityMode) Enum() *Routine_SecurityMode {
	p := new(Routine_SecurityMode)
	*p = x
	return p
}

func (x Routine_SecurityMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Routine_SecurityMode) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_bigquery_v2_routine_proto_enumTypes[3].Descriptor()
}

func (Routine_SecurityMode) Type() protoreflect.EnumType {
	return &file_google_cloud_bigquery_v2_routine_proto_enumTypes[3]
}

func (x Routine_SecurityMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Routine_SecurityMode.Descriptor instead.
func (Routine_SecurityMode) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_routine_proto_rawDescGZIP(), []int{0, 3}
}

// Data governance type values. Only supports `DATA_MASKING`.
type Routine_DataGovernanceType int32

const (
	// The data governance type is unspecified.
	Routine_DATA_GOVERNANCE_TYPE_UNSPECIFIED Routine_DataGovernanceType = 0
	// The data governance type is data masking.
	Routine_DATA_MASKING Routine_DataGovernanceType = 1
)

// Enum value maps for Routine_DataGovernanceType.
var (
	Routine_DataGovernanceType_name = map[int32]string{
		0: "DATA_GOVERNANCE_TYPE_UNSPECIFIED",
		1: "DATA_MASKING",
	}
	Routine_DataGovernanceType_value = map[string]int32{
		"DATA_GOVERNANCE_TYPE_UNSPECIFIED": 0,
		"DATA_MASKING":                     1,
	}
)

func (x Routine_DataGovernanceType) Enum() *Routine_DataGovernanceType {
	p := new(Routine_DataGovernanceType)
	*p = x
	return p
}

func (x Routine_DataGovernanceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Routine_DataGovernanceType) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_bigquery_v2_routine_proto_enumTypes[4].Descriptor()
}

func (Routine_DataGovernanceType) Type() protoreflect.EnumType {
	return &file_google_cloud_bigquery_v2_routine_proto_enumTypes[4]
}

func (x Routine_DataGovernanceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Routine_DataGovernanceType.Descriptor instead.
func (Routine_DataGovernanceType) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_routine_proto_rawDescGZIP(), []int{0, 4}
}

// Represents the kind of a given argument.
type Routine_Argument_ArgumentKind int32

const (
	// Default value.
	Routine_Argument_ARGUMENT_KIND_UNSPECIFIED Routine_Argument_ArgumentKind = 0
	// The argument is a variable with fully specified type, which can be a
	// struct or an array, but not a table.
	Routine_Argument_FIXED_TYPE Routine_Argument_ArgumentKind = 1
	// The argument is any type, including struct or array, but not a table.
	Routine_Argument_ANY_TYPE Routine_Argument_ArgumentKind = 2
)

// Enum value maps for Routine_Argument_ArgumentKind.
var (
	Routine_Argument_ArgumentKind_name = map[int32]string{
		0: "ARGUMENT_KIND_UNSPECIFIED",
		1: "FIXED_TYPE",
		2: "ANY_TYPE",
	}
	Routine_Argument_ArgumentKind_value = map[string]int32{
		"ARGUMENT_KIND_UNSPECIFIED": 0,
		"FIXED_TYPE":                1,
		"ANY_TYPE":                  2,
	}
)

func (x Routine_Argument_ArgumentKind) Enum() *Routine_Argument_ArgumentKind {
	p := new(Routine_Argument_ArgumentKind)
	*p = x
	return p
}

func (x Routine_Argument_ArgumentKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Routine_Argument_ArgumentKind) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_bigquery_v2_routine_proto_enumTypes[5].Descriptor()
}

func (Routine_Argument_ArgumentKind) Type() protoreflect.EnumType {
	return &file_google_cloud_bigquery_v2_routine_proto_enumTypes[5]
}

func (x Routine_Argument_ArgumentKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Routine_Argument_ArgumentKind.Descriptor instead.
func (Routine_Argument_ArgumentKind) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_routine_proto_rawDescGZIP(), []int{0, 0, 0}
}

// The input/output mode of the argument.
type Routine_Argument_Mode int32

const (
	// Default value.
	Routine_Argument_MODE_UNSPECIFIED Routine_Argument_Mode = 0
	// The argument is input-only.
	Routine_Argument_IN Routine_Argument_Mode = 1
	// The argument is output-only.
	Routine_Argument_OUT Routine_Argument_Mode = 2
	// The argument is both an input and an output.
	Routine_Argument_INOUT Routine_Argument_Mode = 3
)

// Enum value maps for Routine_Argument_Mode.
var (
	Routine_Argument_Mode_name = map[int32]string{
		0: "MODE_UNSPECIFIED",
		1: "IN",
		2: "OUT",
		3: "INOUT",
	}
	Routine_Argument_Mode_value = map[string]int32{
		"MODE_UNSPECIFIED": 0,
		"IN":               1,
		"OUT":              2,
		"INOUT":            3,
	}
)

func (x Routine_Argument_Mode) Enum() *Routine_Argument_Mode {
	p := new(Routine_Argument_Mode)
	*p = x
	return p
}

func (x Routine_Argument_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Routine_Argument_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_bigquery_v2_routine_proto_enumTypes[6].Descriptor()
}

func (Routine_Argument_Mode) Type() protoreflect.EnumType {
	return &file_google_cloud_bigquery_v2_routine_proto_enumTypes[6]
}

func (x Routine_Argument_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Routine_Argument_Mode.Descriptor instead.
func (Routine_Argument_Mode) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_routine_proto_rawDescGZIP(), []int{0, 0, 1}
}

// A user-defined function or a stored procedure.
type Routine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. A hash of this resource.
	Etag string `protobuf:"bytes,1,opt,name=etag,proto3" json:"etag,omitempty"`
	// Required. Reference describing the ID of this routine.
	RoutineReference *RoutineReference `protobuf:"bytes,2,opt,name=routine_reference,json=routineReference,proto3" json:"routine_reference,omitempty"`
	// Required. The type of routine.
	RoutineType Routine_RoutineType `protobuf:"varint,3,opt,name=routine_type,json=routineType,proto3,enum=google.cloud.bigquery.v2.Routine_RoutineType" json:"routine_type,omitempty"`
	// Output only. The time when this routine was created, in milliseconds since
	// the epoch.
	CreationTime int64 `protobuf:"varint,4,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	// Output only. The time when this routine was last modified, in milliseconds
	// since the epoch.
	LastModifiedTime int64 `protobuf:"varint,5,opt,name=last_modified_time,json=lastModifiedTime,proto3" json:"last_modified_time,omitempty"`
	// Optional. Defaults to "SQL" if remote_function_options field is absent, not
	// set otherwise.
	Language Routine_Language `protobuf:"varint,6,opt,name=language,proto3,enum=google.cloud.bigquery.v2.Routine_Language" json:"language,omitempty"`
	// Optional.
	Arguments []*Routine_Argument `protobuf:"bytes,7,rep,name=arguments,proto3" json:"arguments,omitempty"`
	// Optional if language = "SQL"; required otherwise.
	// Cannot be set if routine_type = "TABLE_VALUED_FUNCTION".
	//
	// If absent, the return type is inferred from definition_body at query time
	// in each query that references this routine. If present, then the evaluated
	// result will be cast to the specified returned type at query time.
	//
	// For example, for the functions created with the following statements:
	//
	// * `CREATE FUNCTION Add(x FLOAT64, y FLOAT64) RETURNS FLOAT64 AS (x + y);`
	//
	// * `CREATE FUNCTION Increment(x FLOAT64) AS (Add(x, 1));`
	//
	// * `CREATE FUNCTION Decrement(x FLOAT64) RETURNS FLOAT64 AS (Add(x, -1));`
	//
	// The return_type is `{type_kind: "FLOAT64"}` for `Add` and `Decrement`, and
	// is absent for `Increment` (inferred as FLOAT64 at query time).
	//
	// Suppose the function `Add` is replaced by
	//
	//	`CREATE OR REPLACE FUNCTION Add(x INT64, y INT64) AS (x + y);`
	//
	// Then the inferred return type of `Increment` is automatically changed to
	// INT64 at query time, while the return type of `Decrement` remains FLOAT64.
	ReturnType *StandardSqlDataType `protobuf:"bytes,10,opt,name=return_type,json=returnType,proto3" json:"return_type,omitempty"`
	// Optional. Can be set only if routine_type = "TABLE_VALUED_FUNCTION".
	//
	// If absent, the return table type is inferred from definition_body at query
	// time in each query that references this routine. If present, then the
	// columns in the evaluated table result will be cast to match the column
	// types specified in return table type, at query time.
	ReturnTableType *StandardSqlTableType `protobuf:"bytes,13,opt,name=return_table_type,json=returnTableType,proto3" json:"return_table_type,omitempty"`
	// Optional. If language = "JAVASCRIPT", this field stores the path of the
	// imported JAVASCRIPT libraries.
	ImportedLibraries []string `protobuf:"bytes,8,rep,name=imported_libraries,json=importedLibraries,proto3" json:"imported_libraries,omitempty"`
	// Required. The body of the routine.
	//
	// For functions, this is the expression in the AS clause.
	//
	// If language=SQL, it is the substring inside (but excluding) the
	// parentheses. For example, for the function created with the following
	// statement:
	//
	// `CREATE FUNCTION JoinLines(x string, y string) as (concat(x, "\n", y))`
	//
	// The definition_body is `concat(x, "\n", y)` (\n is not replaced with
	// linebreak).
	//
	// If language=JAVASCRIPT, it is the evaluated string in the AS clause.
	// For example, for the function created with the following statement:
	//
	// `CREATE FUNCTION f() RETURNS STRING LANGUAGE js AS 'return "\n";\n'`
	//
	// The definition_body is
	//
	// `return "\n";\n`
	//
	// Note that both \n are replaced with linebreaks.
	DefinitionBody string `protobuf:"bytes,9,opt,name=definition_body,json=definitionBody,proto3" json:"definition_body,omitempty"`
	// Optional. The description of the routine, if defined.
	Description string `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	// Optional. The determinism level of the JavaScript UDF, if defined.
	DeterminismLevel Routine_DeterminismLevel `protobuf:"varint,12,opt,name=determinism_level,json=determinismLevel,proto3,enum=google.cloud.bigquery.v2.Routine_DeterminismLevel" json:"determinism_level,omitempty"`
	// Optional. The security mode of the routine, if defined. If not defined, the
	// security mode is automatically determined from the routine's configuration.
	SecurityMode Routine_SecurityMode `protobuf:"varint,18,opt,name=security_mode,json=securityMode,proto3,enum=google.cloud.bigquery.v2.Routine_SecurityMode" json:"security_mode,omitempty"`
	// Optional. Use this option to catch many common errors. Error checking is
	// not exhaustive, and successfully creating a procedure doesn't guarantee
	// that the procedure will successfully execute at runtime. If `strictMode` is
	// set to `TRUE`, the procedure body is further checked for errors such as
	// non-existent tables or columns. The `CREATE PROCEDURE` statement fails if
	// the body fails any of these checks.
	//
	// If `strictMode` is set to `FALSE`, the procedure body is checked only for
	// syntax. For procedures that invoke themselves recursively, specify
	// `strictMode=FALSE` to avoid non-existent procedure errors during
	// validation.
	//
	// Default value is `TRUE`.
	StrictMode *wrapperspb.BoolValue `protobuf:"bytes,14,opt,name=strict_mode,json=strictMode,proto3" json:"strict_mode,omitempty"`
	// Optional. Remote function specific options.
	RemoteFunctionOptions *Routine_RemoteFunctionOptions `protobuf:"bytes,15,opt,name=remote_function_options,json=remoteFunctionOptions,proto3" json:"remote_function_options,omitempty"`
	// Optional. Spark specific options.
	SparkOptions *SparkOptions `protobuf:"bytes,16,opt,name=spark_options,json=sparkOptions,proto3" json:"spark_options,omitempty"`
	// Optional. If set to `DATA_MASKING`, the function is validated and made
	// available as a masking function. For more information, see [Create custom
	// masking
	// routines](https://cloud.google.com/bigquery/docs/user-defined-functions#custom-mask).
	DataGovernanceType Routine_DataGovernanceType `protobuf:"varint,17,opt,name=data_governance_type,json=dataGovernanceType,proto3,enum=google.cloud.bigquery.v2.Routine_DataGovernanceType" json:"data_governance_type,omitempty"`
	// Optional. Options for Python UDF.
	// [Preview](https://cloud.google.com/products/#product-launch-stages)
	PythonOptions *PythonOptions `protobuf:"bytes,20,opt,name=python_options,json=pythonOptions,proto3" json:"python_options,omitempty"`
	// Optional. Options for the runtime of the external system executing the
	// routine. This field is only applicable for Python UDFs.
	// [Preview](https://cloud.google.com/products/#product-launch-stages)
	ExternalRuntimeOptions *ExternalRuntimeOptions `protobuf:"bytes,21,opt,name=external_runtime_options,json=externalRuntimeOptions,proto3" json:"external_runtime_options,omitempty"`
}

func (x *Routine) Reset() {
	*x = Routine{}
	mi := &file_google_cloud_bigquery_v2_routine_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Routine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Routine) ProtoMessage() {}

func (x *Routine) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_routine_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Routine.ProtoReflect.Descriptor instead.
func (*Routine) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_routine_proto_rawDescGZIP(), []int{0}
}

func (x *Routine) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *Routine) GetRoutineReference() *RoutineReference {
	if x != nil {
		return x.RoutineReference
	}
	return nil
}

func (x *Routine) GetRoutineType() Routine_RoutineType {
	if x != nil {
		return x.RoutineType
	}
	return Routine_ROUTINE_TYPE_UNSPECIFIED
}

func (x *Routine) GetCreationTime() int64 {
	if x != nil {
		return x.CreationTime
	}
	return 0
}

func (x *Routine) GetLastModifiedTime() int64 {
	if x != nil {
		return x.LastModifiedTime
	}
	return 0
}

func (x *Routine) GetLanguage() Routine_Language {
	if x != nil {
		return x.Language
	}
	return Routine_LANGUAGE_UNSPECIFIED
}

func (x *Routine) GetArguments() []*Routine_Argument {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *Routine) GetReturnType() *StandardSqlDataType {
	if x != nil {
		return x.ReturnType
	}
	return nil
}

func (x *Routine) GetReturnTableType() *StandardSqlTableType {
	if x != nil {
		return x.ReturnTableType
	}
	return nil
}

func (x *Routine) GetImportedLibraries() []string {
	if x != nil {
		return x.ImportedLibraries
	}
	return nil
}

func (x *Routine) GetDefinitionBody() string {
	if x != nil {
		return x.DefinitionBody
	}
	return ""
}

func (x *Routine) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Routine) GetDeterminismLevel() Routine_DeterminismLevel {
	if x != nil {
		return x.DeterminismLevel
	}
	return Routine_DETERMINISM_LEVEL_UNSPECIFIED
}

func (x *Routine) GetSecurityMode() Routine_SecurityMode {
	if x != nil {
		return x.SecurityMode
	}
	return Routine_SECURITY_MODE_UNSPECIFIED
}

func (x *Routine) GetStrictMode() *wrapperspb.BoolValue {
	if x != nil {
		return x.StrictMode
	}
	return nil
}

func (x *Routine) GetRemoteFunctionOptions() *Routine_RemoteFunctionOptions {
	if x != nil {
		return x.RemoteFunctionOptions
	}
	return nil
}

func (x *Routine) GetSparkOptions() *SparkOptions {
	if x != nil {
		return x.SparkOptions
	}
	return nil
}

func (x *Routine) GetDataGovernanceType() Routine_DataGovernanceType {
	if x != nil {
		return x.DataGovernanceType
	}
	return Routine_DATA_GOVERNANCE_TYPE_UNSPECIFIED
}

func (x *Routine) GetPythonOptions() *PythonOptions {
	if x != nil {
		return x.PythonOptions
	}
	return nil
}

func (x *Routine) GetExternalRuntimeOptions() *ExternalRuntimeOptions {
	if x != nil {
		return x.ExternalRuntimeOptions
	}
	return nil
}

// Options for a user-defined Python function.
type PythonOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The entry point function in the user's Python code.
	EntryPoint string `protobuf:"bytes,1,opt,name=entry_point,json=entryPoint,proto3" json:"entry_point,omitempty"`
	// Optional. A list of package names along with versions to be installed.
	// Follows requirements.txt syntax (e.g. numpy==2.0, permutation,
	// urllib3<2.2.1)
	Packages []string `protobuf:"bytes,2,rep,name=packages,proto3" json:"packages,omitempty"`
}

func (x *PythonOptions) Reset() {
	*x = PythonOptions{}
	mi := &file_google_cloud_bigquery_v2_routine_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PythonOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PythonOptions) ProtoMessage() {}

func (x *PythonOptions) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_routine_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PythonOptions.ProtoReflect.Descriptor instead.
func (*PythonOptions) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_routine_proto_rawDescGZIP(), []int{1}
}

func (x *PythonOptions) GetEntryPoint() string {
	if x != nil {
		return x.EntryPoint
	}
	return ""
}

func (x *PythonOptions) GetPackages() []string {
	if x != nil {
		return x.Packages
	}
	return nil
}

// Options for the runtime of the external system.
type ExternalRuntimeOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Amount of memory provisioned for the container instance. Format:
	// {number}{unit} where unit is one of "M", "G", "Mi" and "Gi" (e.g. 1G,
	// 512Mi). If not specified, the default value is 512Mi.
	ContainerMemory string `protobuf:"bytes,1,opt,name=container_memory,json=containerMemory,proto3" json:"container_memory,omitempty"`
	// Optional. Amount of CPU provisioned for the container instance. If not
	// specified, the default value is 0.33 vCPUs.
	ContainerCpu float64 `protobuf:"fixed64,2,opt,name=container_cpu,json=containerCpu,proto3" json:"container_cpu,omitempty"`
	// Optional. Fully qualified name of the connection whose service account will
	// be used to execute the code in the container. Format:
	// ```"projects/{project_id}/locations/{location_id}/connections/{connection_id}"```
	RuntimeConnection string `protobuf:"bytes,3,opt,name=runtime_connection,json=runtimeConnection,proto3" json:"runtime_connection,omitempty"`
	// Optional. Maximum number of rows in each batch sent to the external
	// runtime. If absent or if 0, BigQuery dynamically decides the number of rows
	// in a batch.
	MaxBatchingRows int64 `protobuf:"varint,4,opt,name=max_batching_rows,json=maxBatchingRows,proto3" json:"max_batching_rows,omitempty"`
	// Optional. Language runtime version (e.g. python-3.11).
	RuntimeVersion string `protobuf:"bytes,5,opt,name=runtime_version,json=runtimeVersion,proto3" json:"runtime_version,omitempty"`
}

func (x *ExternalRuntimeOptions) Reset() {
	*x = ExternalRuntimeOptions{}
	mi := &file_google_cloud_bigquery_v2_routine_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExternalRuntimeOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalRuntimeOptions) ProtoMessage() {}

func (x *ExternalRuntimeOptions) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_routine_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalRuntimeOptions.ProtoReflect.Descriptor instead.
func (*ExternalRuntimeOptions) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_routine_proto_rawDescGZIP(), []int{2}
}

func (x *ExternalRuntimeOptions) GetContainerMemory() string {
	if x != nil {
		return x.ContainerMemory
	}
	return ""
}

func (x *ExternalRuntimeOptions) GetContainerCpu() float64 {
	if x != nil {
		return x.ContainerCpu
	}
	return 0
}

func (x *ExternalRuntimeOptions) GetRuntimeConnection() string {
	if x != nil {
		return x.RuntimeConnection
	}
	return ""
}

func (x *ExternalRuntimeOptions) GetMaxBatchingRows() int64 {
	if x != nil {
		return x.MaxBatchingRows
	}
	return 0
}

func (x *ExternalRuntimeOptions) GetRuntimeVersion() string {
	if x != nil {
		return x.RuntimeVersion
	}
	return ""
}

// Options for a user-defined Spark routine.
type SparkOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Fully qualified name of the user-provided Spark connection object. Format:
	// ```"projects/{project_id}/locations/{location_id}/connections/{connection_id}"```
	Connection string `protobuf:"bytes,1,opt,name=connection,proto3" json:"connection,omitempty"`
	// Runtime version. If not specified, the default runtime version is used.
	RuntimeVersion string `protobuf:"bytes,2,opt,name=runtime_version,json=runtimeVersion,proto3" json:"runtime_version,omitempty"`
	// Custom container image for the runtime environment.
	ContainerImage string `protobuf:"bytes,3,opt,name=container_image,json=containerImage,proto3" json:"container_image,omitempty"`
	// Configuration properties as a set of key/value pairs, which will be passed
	// on to the Spark application. For more information, see
	// [Apache Spark](https://spark.apache.org/docs/latest/index.html) and the
	// [procedure option
	// list](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#procedure_option_list).
	Properties map[string]string `protobuf:"bytes,4,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The main file/jar URI of the Spark application. Exactly one of the
	// definition_body field and the main_file_uri field must be set for Python.
	// Exactly one of main_class and main_file_uri field
	// should be set for Java/Scala language type.
	MainFileUri string `protobuf:"bytes,5,opt,name=main_file_uri,json=mainFileUri,proto3" json:"main_file_uri,omitempty"`
	// Python files to be placed on the PYTHONPATH for PySpark application.
	// Supported file types: `.py`, `.egg`, and `.zip`. For more information
	// about Apache Spark, see
	// [Apache Spark](https://spark.apache.org/docs/latest/index.html).
	PyFileUris []string `protobuf:"bytes,6,rep,name=py_file_uris,json=pyFileUris,proto3" json:"py_file_uris,omitempty"`
	// JARs to include on the driver and executor CLASSPATH.
	// For more information about Apache Spark, see
	// [Apache Spark](https://spark.apache.org/docs/latest/index.html).
	JarUris []string `protobuf:"bytes,7,rep,name=jar_uris,json=jarUris,proto3" json:"jar_uris,omitempty"`
	// Files to be placed in the working directory of each executor.
	// For more information about Apache Spark, see
	// [Apache Spark](https://spark.apache.org/docs/latest/index.html).
	FileUris []string `protobuf:"bytes,8,rep,name=file_uris,json=fileUris,proto3" json:"file_uris,omitempty"`
	// Archive files to be extracted into the working directory of each executor.
	// For more information about Apache Spark, see
	// [Apache Spark](https://spark.apache.org/docs/latest/index.html).
	ArchiveUris []string `protobuf:"bytes,9,rep,name=archive_uris,json=archiveUris,proto3" json:"archive_uris,omitempty"`
	// The fully qualified name of a class in jar_uris, for example,
	// com.example.wordcount. Exactly one of main_class and main_jar_uri field
	//
	//	should be set for Java/Scala language type.
	MainClass string `protobuf:"bytes,10,opt,name=main_class,json=mainClass,proto3" json:"main_class,omitempty"`
}

func (x *SparkOptions) Reset() {
	*x = SparkOptions{}
	mi := &file_google_cloud_bigquery_v2_routine_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SparkOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SparkOptions) ProtoMessage() {}

func (x *SparkOptions) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_routine_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SparkOptions.ProtoReflect.Descriptor instead.
func (*SparkOptions) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_routine_proto_rawDescGZIP(), []int{3}
}

func (x *SparkOptions) GetConnection() string {
	if x != nil {
		return x.Connection
	}
	return ""
}

func (x *SparkOptions) GetRuntimeVersion() string {
	if x != nil {
		return x.RuntimeVersion
	}
	return ""
}

func (x *SparkOptions) GetContainerImage() string {
	if x != nil {
		return x.ContainerImage
	}
	return ""
}

func (x *SparkOptions) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *SparkOptions) GetMainFileUri() string {
	if x != nil {
		return x.MainFileUri
	}
	return ""
}

func (x *SparkOptions) GetPyFileUris() []string {
	if x != nil {
		return x.PyFileUris
	}
	return nil
}

func (x *SparkOptions) GetJarUris() []string {
	if x != nil {
		return x.JarUris
	}
	return nil
}

func (x *SparkOptions) GetFileUris() []string {
	if x != nil {
		return x.FileUris
	}
	return nil
}

func (x *SparkOptions) GetArchiveUris() []string {
	if x != nil {
		return x.ArchiveUris
	}
	return nil
}

func (x *SparkOptions) GetMainClass() string {
	if x != nil {
		return x.MainClass
	}
	return ""
}

// Describes the format for getting information about a routine.
type GetRoutineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Project ID of the requested routine
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Required. Dataset ID of the requested routine
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// Required. Routine ID of the requested routine
	RoutineId string `protobuf:"bytes,3,opt,name=routine_id,json=routineId,proto3" json:"routine_id,omitempty"`
}

func (x *GetRoutineRequest) Reset() {
	*x = GetRoutineRequest{}
	mi := &file_google_cloud_bigquery_v2_routine_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRoutineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoutineRequest) ProtoMessage() {}

func (x *GetRoutineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_routine_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoutineRequest.ProtoReflect.Descriptor instead.
func (*GetRoutineRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_routine_proto_rawDescGZIP(), []int{4}
}

func (x *GetRoutineRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GetRoutineRequest) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *GetRoutineRequest) GetRoutineId() string {
	if x != nil {
		return x.RoutineId
	}
	return ""
}

// Describes the format for inserting a routine.
type InsertRoutineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Project ID of the new routine
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Required. Dataset ID of the new routine
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// Required. A routine resource to insert
	Routine *Routine `protobuf:"bytes,3,opt,name=routine,proto3" json:"routine,omitempty"`
}

func (x *InsertRoutineRequest) Reset() {
	*x = InsertRoutineRequest{}
	mi := &file_google_cloud_bigquery_v2_routine_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InsertRoutineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertRoutineRequest) ProtoMessage() {}

func (x *InsertRoutineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_routine_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertRoutineRequest.ProtoReflect.Descriptor instead.
func (*InsertRoutineRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_routine_proto_rawDescGZIP(), []int{5}
}

func (x *InsertRoutineRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *InsertRoutineRequest) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *InsertRoutineRequest) GetRoutine() *Routine {
	if x != nil {
		return x.Routine
	}
	return nil
}

// Describes the format for updating a routine.
type UpdateRoutineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Project ID of the routine to update
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Required. Dataset ID of the routine to update
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// Required. Routine ID of the routine to update
	RoutineId string `protobuf:"bytes,3,opt,name=routine_id,json=routineId,proto3" json:"routine_id,omitempty"`
	// Required. A routine resource which will replace the specified routine
	Routine *Routine `protobuf:"bytes,4,opt,name=routine,proto3" json:"routine,omitempty"`
}

func (x *UpdateRoutineRequest) Reset() {
	*x = UpdateRoutineRequest{}
	mi := &file_google_cloud_bigquery_v2_routine_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRoutineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRoutineRequest) ProtoMessage() {}

func (x *UpdateRoutineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_routine_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRoutineRequest.ProtoReflect.Descriptor instead.
func (*UpdateRoutineRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_routine_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateRoutineRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *UpdateRoutineRequest) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *UpdateRoutineRequest) GetRoutineId() string {
	if x != nil {
		return x.RoutineId
	}
	return ""
}

func (x *UpdateRoutineRequest) GetRoutine() *Routine {
	if x != nil {
		return x.Routine
	}
	return nil
}

// Describes the format for the partial update (patch) of a routine.
type PatchRoutineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Project ID of the routine to update
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Required. Dataset ID of the routine to update
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// Required. Routine ID of the routine to update
	RoutineId string `protobuf:"bytes,3,opt,name=routine_id,json=routineId,proto3" json:"routine_id,omitempty"`
	// Required. A routine resource which will be used to partially
	// update the specified routine
	Routine *Routine `protobuf:"bytes,4,opt,name=routine,proto3" json:"routine,omitempty"`
	// Only the Routine fields in the field mask are updated
	// by the given routine. Repeated routine fields will be fully replaced
	// if contained in the field mask.
	FieldMask *fieldmaskpb.FieldMask `protobuf:"bytes,5,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
}

func (x *PatchRoutineRequest) Reset() {
	*x = PatchRoutineRequest{}
	mi := &file_google_cloud_bigquery_v2_routine_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PatchRoutineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchRoutineRequest) ProtoMessage() {}

func (x *PatchRoutineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_routine_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchRoutineRequest.ProtoReflect.Descriptor instead.
func (*PatchRoutineRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_routine_proto_rawDescGZIP(), []int{7}
}

func (x *PatchRoutineRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *PatchRoutineRequest) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *PatchRoutineRequest) GetRoutineId() string {
	if x != nil {
		return x.RoutineId
	}
	return ""
}

func (x *PatchRoutineRequest) GetRoutine() *Routine {
	if x != nil {
		return x.Routine
	}
	return nil
}

func (x *PatchRoutineRequest) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

// Describes the format for deleting a routine.
type DeleteRoutineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Project ID of the routine to delete
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Required. Dataset ID of the routine to delete
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// Required. Routine ID of the routine to delete
	RoutineId string `protobuf:"bytes,3,opt,name=routine_id,json=routineId,proto3" json:"routine_id,omitempty"`
}

func (x *DeleteRoutineRequest) Reset() {
	*x = DeleteRoutineRequest{}
	mi := &file_google_cloud_bigquery_v2_routine_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRoutineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRoutineRequest) ProtoMessage() {}

func (x *DeleteRoutineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_routine_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRoutineRequest.ProtoReflect.Descriptor instead.
func (*DeleteRoutineRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_routine_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteRoutineRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DeleteRoutineRequest) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *DeleteRoutineRequest) GetRoutineId() string {
	if x != nil {
		return x.RoutineId
	}
	return ""
}

// Describes the format for listing routines.
type ListRoutinesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Project ID of the routines to list
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Required. Dataset ID of the routines to list
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// The maximum number of results to return in a single response page.
	// Leverage the page tokens to iterate through the entire collection.
	MaxResults *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=max_results,json=maxResults,proto3" json:"max_results,omitempty"`
	// Page token, returned by a previous call, to request the next page of
	// results
	PageToken string `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// If set, then only the Routines matching this filter are returned.
	// The supported format is `routineType:{RoutineType}`, where `{RoutineType}`
	// is a RoutineType enum. For example: `routineType:SCALAR_FUNCTION`.
	Filter string `protobuf:"bytes,6,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListRoutinesRequest) Reset() {
	*x = ListRoutinesRequest{}
	mi := &file_google_cloud_bigquery_v2_routine_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRoutinesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRoutinesRequest) ProtoMessage() {}

func (x *ListRoutinesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_routine_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRoutinesRequest.ProtoReflect.Descriptor instead.
func (*ListRoutinesRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_routine_proto_rawDescGZIP(), []int{9}
}

func (x *ListRoutinesRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ListRoutinesRequest) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *ListRoutinesRequest) GetMaxResults() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxResults
	}
	return nil
}

func (x *ListRoutinesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListRoutinesRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// Describes the format of a single result page when listing routines.
type ListRoutinesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Routines in the requested dataset. Unless read_mask is set in the request,
	// only the following fields are populated:
	// etag, project_id, dataset_id, routine_id, routine_type, creation_time,
	// last_modified_time, language, and remote_function_options.
	Routines []*Routine `protobuf:"bytes,1,rep,name=routines,proto3" json:"routines,omitempty"`
	// A token to request the next page of results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListRoutinesResponse) Reset() {
	*x = ListRoutinesResponse{}
	mi := &file_google_cloud_bigquery_v2_routine_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRoutinesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRoutinesResponse) ProtoMessage() {}

func (x *ListRoutinesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_routine_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRoutinesResponse.ProtoReflect.Descriptor instead.
func (*ListRoutinesResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_routine_proto_rawDescGZIP(), []int{10}
}

func (x *ListRoutinesResponse) GetRoutines() []*Routine {
	if x != nil {
		return x.Routines
	}
	return nil
}

func (x *ListRoutinesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Input/output argument of a function or a stored procedure.
type Routine_Argument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The name of this argument. Can be absent for function return
	// argument.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. Defaults to FIXED_TYPE.
	ArgumentKind Routine_Argument_ArgumentKind `protobuf:"varint,2,opt,name=argument_kind,json=argumentKind,proto3,enum=google.cloud.bigquery.v2.Routine_Argument_ArgumentKind" json:"argument_kind,omitempty"`
	// Optional. Specifies whether the argument is input or output.
	// Can be set for procedures only.
	Mode Routine_Argument_Mode `protobuf:"varint,3,opt,name=mode,proto3,enum=google.cloud.bigquery.v2.Routine_Argument_Mode" json:"mode,omitempty"`
	// Set if argument_kind == FIXED_TYPE.
	DataType *StandardSqlDataType `protobuf:"bytes,4,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"`
	// Optional. Whether the argument is an aggregate function parameter.
	// Must be Unset for routine types other than AGGREGATE_FUNCTION.
	// For AGGREGATE_FUNCTION, if set to false, it is equivalent to adding "NOT
	// AGGREGATE" clause in DDL; Otherwise, it is equivalent to omitting "NOT
	// AGGREGATE" clause in DDL.
	IsAggregate *wrapperspb.BoolValue `protobuf:"bytes,6,opt,name=is_aggregate,json=isAggregate,proto3" json:"is_aggregate,omitempty"`
}

func (x *Routine_Argument) Reset() {
	*x = Routine_Argument{}
	mi := &file_google_cloud_bigquery_v2_routine_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Routine_Argument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Routine_Argument) ProtoMessage() {}

func (x *Routine_Argument) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_routine_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Routine_Argument.ProtoReflect.Descriptor instead.
func (*Routine_Argument) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_routine_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Routine_Argument) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Routine_Argument) GetArgumentKind() Routine_Argument_ArgumentKind {
	if x != nil {
		return x.ArgumentKind
	}
	return Routine_Argument_ARGUMENT_KIND_UNSPECIFIED
}

func (x *Routine_Argument) GetMode() Routine_Argument_Mode {
	if x != nil {
		return x.Mode
	}
	return Routine_Argument_MODE_UNSPECIFIED
}

func (x *Routine_Argument) GetDataType() *StandardSqlDataType {
	if x != nil {
		return x.DataType
	}
	return nil
}

func (x *Routine_Argument) GetIsAggregate() *wrapperspb.BoolValue {
	if x != nil {
		return x.IsAggregate
	}
	return nil
}

// Options for a remote user-defined function.
type Routine_RemoteFunctionOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Endpoint of the user-provided remote service, e.g.
	// ```https://us-east1-my_gcf_project.cloudfunctions.net/remote_add```
	Endpoint string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Fully qualified name of the user-provided connection object which holds
	// the authentication information to send requests to the remote service.
	// Format:
	// ```"projects/{projectId}/locations/{locationId}/connections/{connectionId}"```
	Connection string `protobuf:"bytes,2,opt,name=connection,proto3" json:"connection,omitempty"`
	// User-defined context as a set of key/value pairs, which will be sent as
	// function invocation context together with batched arguments in the
	// requests to the remote service. The total number of bytes of keys and
	// values must be less than 8KB.
	UserDefinedContext map[string]string `protobuf:"bytes,3,rep,name=user_defined_context,json=userDefinedContext,proto3" json:"user_defined_context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Max number of rows in each batch sent to the remote service.
	// If absent or if 0, BigQuery dynamically decides the number of rows in a
	// batch.
	MaxBatchingRows int64 `protobuf:"varint,4,opt,name=max_batching_rows,json=maxBatchingRows,proto3" json:"max_batching_rows,omitempty"`
}

func (x *Routine_RemoteFunctionOptions) Reset() {
	*x = Routine_RemoteFunctionOptions{}
	mi := &file_google_cloud_bigquery_v2_routine_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Routine_RemoteFunctionOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Routine_RemoteFunctionOptions) ProtoMessage() {}

func (x *Routine_RemoteFunctionOptions) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_bigquery_v2_routine_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Routine_RemoteFunctionOptions.ProtoReflect.Descriptor instead.
func (*Routine_RemoteFunctionOptions) Descriptor() ([]byte, []int) {
	return file_google_cloud_bigquery_v2_routine_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Routine_RemoteFunctionOptions) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Routine_RemoteFunctionOptions) GetConnection() string {
	if x != nil {
		return x.Connection
	}
	return ""
}

func (x *Routine_RemoteFunctionOptions) GetUserDefinedContext() map[string]string {
	if x != nil {
		return x.UserDefinedContext
	}
	return nil
}

func (x *Routine_RemoteFunctionOptions) GetMaxBatchingRows() int64 {
	if x != nil {
		return x.MaxBatchingRows
	}
	return 0
}

var File_google_cloud_bigquery_v2_routine_proto protoreflect.FileDescriptor

var file_google_cloud_bigquery_v2_routine_proto_rawDesc = []byte{
	0x0a, 0x26, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2f, 0x76, 0x32, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f,
	0x73, 0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x87, 0x16, 0x0a, 0x07, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x5c, 0x0a,
	0x11, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x32, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x10, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x0c, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0c,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x12,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x10, 0x6c,
	0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x4b, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x48, 0x0a, 0x09,
	0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x65, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x61, 0x72, 0x67,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x53,
	0x71, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5f, 0x0a, 0x11, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x53, 0x71, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x11, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x69, 0x73, 0x6d, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x65, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x6d,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x10, 0x64, 0x65, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x58, 0x0a, 0x0d,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4d,
	0x6f, 0x64, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x74, 0x0a, 0x17, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x15, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x50,
	0x0a, 0x0d, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x53, 0x70, 0x61, 0x72, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x0c, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x6b, 0x0a, 0x14, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69,
	0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x47,
	0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x53, 0x0a,
	0x0e, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x0d, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x6f, 0x0a, 0x18, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x16, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x1a, 0xe2, 0x03, 0x0a, 0x08, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x61, 0x0a, 0x0d, 0x61, 0x72, 0x67,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x65, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x72, 0x67,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c,
	0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x43, 0x0a, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x2e, 0x41, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x12, 0x4a, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e,
	0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x53, 0x71, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a,
	0x0c, 0x69, 0x73, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x22, 0x4b, 0x0a, 0x0c, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x69, 0x6e,
	0x64, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x52, 0x47, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4b, 0x49,
	0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x49, 0x58, 0x45, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x41, 0x4e, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x02, 0x22, 0x38,
	0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02,
	0x49, 0x4e, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x55, 0x54, 0x10, 0x02, 0x12, 0x09, 0x0a,
	0x05, 0x49, 0x4e, 0x4f, 0x55, 0x54, 0x10, 0x03, 0x1a, 0xca, 0x02, 0x0a, 0x15, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x81,
	0x01, 0x0a, 0x14, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12,
	0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6d,
	0x61, 0x78, 0x42, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x77, 0x73, 0x1a, 0x45,
	0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x82, 0x01, 0x0a, 0x0b, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x5f, 0x46, 0x55,
	0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x44, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x41, 0x42, 0x4c, 0x45,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x44, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f,
	0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x22, 0x5e, 0x0a, 0x08, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41,
	0x47, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x07, 0x0a, 0x03, 0x53, 0x51, 0x4c, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4a, 0x41, 0x56,
	0x41, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x59, 0x54,
	0x48, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x41, 0x56, 0x41, 0x10, 0x04, 0x12,
	0x09, 0x0a, 0x05, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x10, 0x05, 0x22, 0x5f, 0x0a, 0x10, 0x44, 0x65,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x21,
	0x0a, 0x1d, 0x44, 0x45, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x49, 0x53, 0x4d, 0x5f, 0x4c, 0x45,
	0x56, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x45, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x49, 0x53, 0x54,
	0x49, 0x43, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x4f, 0x54, 0x5f, 0x44, 0x45, 0x54, 0x45,
	0x52, 0x4d, 0x49, 0x4e, 0x49, 0x53, 0x54, 0x49, 0x43, 0x10, 0x02, 0x22, 0x47, 0x0a, 0x0c, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x53,
	0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45,
	0x46, 0x49, 0x4e, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x4f, 0x4b,
	0x45, 0x52, 0x10, 0x02, 0x22, 0x4c, 0x0a, 0x12, 0x44, 0x61, 0x74, 0x61, 0x47, 0x6f, 0x76, 0x65,
	0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x47, 0x4f, 0x56, 0x45, 0x52, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x0c, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x49, 0x4e, 0x47,
	0x10, 0x01, 0x22, 0x56, 0x0a, 0x0d, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x22, 0x85, 0x02, 0x0a, 0x16, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x5f, 0x63, 0x70, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x70, 0x75, 0x12,
	0x32, 0x0a, 0x12, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x11, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x69, 0x6e, 0x67, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x42, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67,
	0x52, 0x6f, 0x77, 0x73, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x0e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0xd7, 0x03, 0x0a, 0x0c, 0x53, 0x70, 0x61, 0x72, 0x6b, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x56, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x70, 0x61, 0x72, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x22, 0x0a,
	0x0d, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x72,
	0x69, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x72, 0x69,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x55,
	0x72, 0x69, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x69, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x61, 0x72, 0x55, 0x72, 0x69, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x69, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x55, 0x72, 0x69, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x1a, 0x3d, 0x0a,
	0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7f, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x22, 0xa0, 0x01,
	0x0a, 0x14, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x40,
	0x0a, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65,
	0x22, 0xc4, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76,
	0x32, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x22, 0xfe, 0x01, 0x0a, 0x13, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x12, 0x39, 0x0a,
	0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x09, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x82, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x22, 0xd3, 0x01,
	0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a,
	0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x22, 0x7d, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65,
	0x52, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x32, 0xe2, 0x09, 0x0a, 0x0e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xba, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x65, 0x12, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x65, 0x22, 0x5c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x56, 0x12, 0x54, 0x2f, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x3d,
	0x2a, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x3d,
	0x2a, 0x7d, 0x12, 0xba, 0x01, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x65, 0x12, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x22, 0x56, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x50, 0x3a,
	0x07, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x22, 0x45, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x73, 0x12,
	0xc9, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x65, 0x12, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x65, 0x22, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5f, 0x3a, 0x07, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x65, 0x1a, 0x54, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x3d, 0x2a, 0x7d, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x12, 0x62, 0x0a, 0x0c, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x12, 0x2d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x22, 0x00, 0x12,
	0xb5, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x65, 0x12, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x5c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x56, 0x2a, 0x54, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73,
	0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x65, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x12, 0xbc, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x47, 0x12,
	0x45, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x65, 0x73, 0x1a, 0xae, 0x01, 0xca, 0x41, 0x17, 0x62, 0x69, 0x67, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x90, 0x01, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77,
	0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2c,
	0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2c, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x72, 0x65,
	0x61, 0x64, 0x2d, 0x6f, 0x6e, 0x6c, 0x79, 0x42, 0x69, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x42, 0x0c, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x3b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x62, 0x69, 0x67,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x70, 0x62, 0x3b, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_bigquery_v2_routine_proto_rawDescOnce sync.Once
	file_google_cloud_bigquery_v2_routine_proto_rawDescData = file_google_cloud_bigquery_v2_routine_proto_rawDesc
)

func file_google_cloud_bigquery_v2_routine_proto_rawDescGZIP() []byte {
	file_google_cloud_bigquery_v2_routine_proto_rawDescOnce.Do(func() {
		file_google_cloud_bigquery_v2_routine_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_bigquery_v2_routine_proto_rawDescData)
	})
	return file_google_cloud_bigquery_v2_routine_proto_rawDescData
}

var file_google_cloud_bigquery_v2_routine_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_google_cloud_bigquery_v2_routine_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_google_cloud_bigquery_v2_routine_proto_goTypes = []any{
	(Routine_RoutineType)(0),              // 0: google.cloud.bigquery.v2.Routine.RoutineType
	(Routine_Language)(0),                 // 1: google.cloud.bigquery.v2.Routine.Language
	(Routine_DeterminismLevel)(0),         // 2: google.cloud.bigquery.v2.Routine.DeterminismLevel
	(Routine_SecurityMode)(0),             // 3: google.cloud.bigquery.v2.Routine.SecurityMode
	(Routine_DataGovernanceType)(0),       // 4: google.cloud.bigquery.v2.Routine.DataGovernanceType
	(Routine_Argument_ArgumentKind)(0),    // 5: google.cloud.bigquery.v2.Routine.Argument.ArgumentKind
	(Routine_Argument_Mode)(0),            // 6: google.cloud.bigquery.v2.Routine.Argument.Mode
	(*Routine)(nil),                       // 7: google.cloud.bigquery.v2.Routine
	(*PythonOptions)(nil),                 // 8: google.cloud.bigquery.v2.PythonOptions
	(*ExternalRuntimeOptions)(nil),        // 9: google.cloud.bigquery.v2.ExternalRuntimeOptions
	(*SparkOptions)(nil),                  // 10: google.cloud.bigquery.v2.SparkOptions
	(*GetRoutineRequest)(nil),             // 11: google.cloud.bigquery.v2.GetRoutineRequest
	(*InsertRoutineRequest)(nil),          // 12: google.cloud.bigquery.v2.InsertRoutineRequest
	(*UpdateRoutineRequest)(nil),          // 13: google.cloud.bigquery.v2.UpdateRoutineRequest
	(*PatchRoutineRequest)(nil),           // 14: google.cloud.bigquery.v2.PatchRoutineRequest
	(*DeleteRoutineRequest)(nil),          // 15: google.cloud.bigquery.v2.DeleteRoutineRequest
	(*ListRoutinesRequest)(nil),           // 16: google.cloud.bigquery.v2.ListRoutinesRequest
	(*ListRoutinesResponse)(nil),          // 17: google.cloud.bigquery.v2.ListRoutinesResponse
	(*Routine_Argument)(nil),              // 18: google.cloud.bigquery.v2.Routine.Argument
	(*Routine_RemoteFunctionOptions)(nil), // 19: google.cloud.bigquery.v2.Routine.RemoteFunctionOptions
	nil,                                   // 20: google.cloud.bigquery.v2.Routine.RemoteFunctionOptions.UserDefinedContextEntry
	nil,                                   // 21: google.cloud.bigquery.v2.SparkOptions.PropertiesEntry
	(*RoutineReference)(nil),              // 22: google.cloud.bigquery.v2.RoutineReference
	(*StandardSqlDataType)(nil),           // 23: google.cloud.bigquery.v2.StandardSqlDataType
	(*StandardSqlTableType)(nil),          // 24: google.cloud.bigquery.v2.StandardSqlTableType
	(*wrapperspb.BoolValue)(nil),          // 25: google.protobuf.BoolValue
	(*fieldmaskpb.FieldMask)(nil),         // 26: google.protobuf.FieldMask
	(*wrapperspb.UInt32Value)(nil),        // 27: google.protobuf.UInt32Value
	(*emptypb.Empty)(nil),                 // 28: google.protobuf.Empty
}
var file_google_cloud_bigquery_v2_routine_proto_depIdxs = []int32{
	22, // 0: google.cloud.bigquery.v2.Routine.routine_reference:type_name -> google.cloud.bigquery.v2.RoutineReference
	0,  // 1: google.cloud.bigquery.v2.Routine.routine_type:type_name -> google.cloud.bigquery.v2.Routine.RoutineType
	1,  // 2: google.cloud.bigquery.v2.Routine.language:type_name -> google.cloud.bigquery.v2.Routine.Language
	18, // 3: google.cloud.bigquery.v2.Routine.arguments:type_name -> google.cloud.bigquery.v2.Routine.Argument
	23, // 4: google.cloud.bigquery.v2.Routine.return_type:type_name -> google.cloud.bigquery.v2.StandardSqlDataType
	24, // 5: google.cloud.bigquery.v2.Routine.return_table_type:type_name -> google.cloud.bigquery.v2.StandardSqlTableType
	2,  // 6: google.cloud.bigquery.v2.Routine.determinism_level:type_name -> google.cloud.bigquery.v2.Routine.DeterminismLevel
	3,  // 7: google.cloud.bigquery.v2.Routine.security_mode:type_name -> google.cloud.bigquery.v2.Routine.SecurityMode
	25, // 8: google.cloud.bigquery.v2.Routine.strict_mode:type_name -> google.protobuf.BoolValue
	19, // 9: google.cloud.bigquery.v2.Routine.remote_function_options:type_name -> google.cloud.bigquery.v2.Routine.RemoteFunctionOptions
	10, // 10: google.cloud.bigquery.v2.Routine.spark_options:type_name -> google.cloud.bigquery.v2.SparkOptions
	4,  // 11: google.cloud.bigquery.v2.Routine.data_governance_type:type_name -> google.cloud.bigquery.v2.Routine.DataGovernanceType
	8,  // 12: google.cloud.bigquery.v2.Routine.python_options:type_name -> google.cloud.bigquery.v2.PythonOptions
	9,  // 13: google.cloud.bigquery.v2.Routine.external_runtime_options:type_name -> google.cloud.bigquery.v2.ExternalRuntimeOptions
	21, // 14: google.cloud.bigquery.v2.SparkOptions.properties:type_name -> google.cloud.bigquery.v2.SparkOptions.PropertiesEntry
	7,  // 15: google.cloud.bigquery.v2.InsertRoutineRequest.routine:type_name -> google.cloud.bigquery.v2.Routine
	7,  // 16: google.cloud.bigquery.v2.UpdateRoutineRequest.routine:type_name -> google.cloud.bigquery.v2.Routine
	7,  // 17: google.cloud.bigquery.v2.PatchRoutineRequest.routine:type_name -> google.cloud.bigquery.v2.Routine
	26, // 18: google.cloud.bigquery.v2.PatchRoutineRequest.field_mask:type_name -> google.protobuf.FieldMask
	27, // 19: google.cloud.bigquery.v2.ListRoutinesRequest.max_results:type_name -> google.protobuf.UInt32Value
	7,  // 20: google.cloud.bigquery.v2.ListRoutinesResponse.routines:type_name -> google.cloud.bigquery.v2.Routine
	5,  // 21: google.cloud.bigquery.v2.Routine.Argument.argument_kind:type_name -> google.cloud.bigquery.v2.Routine.Argument.ArgumentKind
	6,  // 22: google.cloud.bigquery.v2.Routine.Argument.mode:type_name -> google.cloud.bigquery.v2.Routine.Argument.Mode
	23, // 23: google.cloud.bigquery.v2.Routine.Argument.data_type:type_name -> google.cloud.bigquery.v2.StandardSqlDataType
	25, // 24: google.cloud.bigquery.v2.Routine.Argument.is_aggregate:type_name -> google.protobuf.BoolValue
	20, // 25: google.cloud.bigquery.v2.Routine.RemoteFunctionOptions.user_defined_context:type_name -> google.cloud.bigquery.v2.Routine.RemoteFunctionOptions.UserDefinedContextEntry
	11, // 26: google.cloud.bigquery.v2.RoutineService.GetRoutine:input_type -> google.cloud.bigquery.v2.GetRoutineRequest
	12, // 27: google.cloud.bigquery.v2.RoutineService.InsertRoutine:input_type -> google.cloud.bigquery.v2.InsertRoutineRequest
	13, // 28: google.cloud.bigquery.v2.RoutineService.UpdateRoutine:input_type -> google.cloud.bigquery.v2.UpdateRoutineRequest
	14, // 29: google.cloud.bigquery.v2.RoutineService.PatchRoutine:input_type -> google.cloud.bigquery.v2.PatchRoutineRequest
	15, // 30: google.cloud.bigquery.v2.RoutineService.DeleteRoutine:input_type -> google.cloud.bigquery.v2.DeleteRoutineRequest
	16, // 31: google.cloud.bigquery.v2.RoutineService.ListRoutines:input_type -> google.cloud.bigquery.v2.ListRoutinesRequest
	7,  // 32: google.cloud.bigquery.v2.RoutineService.GetRoutine:output_type -> google.cloud.bigquery.v2.Routine
	7,  // 33: google.cloud.bigquery.v2.RoutineService.InsertRoutine:output_type -> google.cloud.bigquery.v2.Routine
	7,  // 34: google.cloud.bigquery.v2.RoutineService.UpdateRoutine:output_type -> google.cloud.bigquery.v2.Routine
	7,  // 35: google.cloud.bigquery.v2.RoutineService.PatchRoutine:output_type -> google.cloud.bigquery.v2.Routine
	28, // 36: google.cloud.bigquery.v2.RoutineService.DeleteRoutine:output_type -> google.protobuf.Empty
	17, // 37: google.cloud.bigquery.v2.RoutineService.ListRoutines:output_type -> google.cloud.bigquery.v2.ListRoutinesResponse
	32, // [32:38] is the sub-list for method output_type
	26, // [26:32] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_google_cloud_bigquery_v2_routine_proto_init() }
func file_google_cloud_bigquery_v2_routine_proto_init() {
	if File_google_cloud_bigquery_v2_routine_proto != nil {
		return
	}
	file_google_cloud_bigquery_v2_routine_reference_proto_init()
	file_google_cloud_bigquery_v2_standard_sql_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_bigquery_v2_routine_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_google_cloud_bigquery_v2_routine_proto_goTypes,
		DependencyIndexes: file_google_cloud_bigquery_v2_routine_proto_depIdxs,
		EnumInfos:         file_google_cloud_bigquery_v2_routine_proto_enumTypes,
		MessageInfos:      file_google_cloud_bigquery_v2_routine_proto_msgTypes,
	}.Build()
	File_google_cloud_bigquery_v2_routine_proto = out.File
	file_google_cloud_bigquery_v2_routine_proto_rawDesc = nil
	file_google_cloud_bigquery_v2_routine_proto_goTypes = nil
	file_google_cloud_bigquery_v2_routine_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RoutineServiceClient is the client API for RoutineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RoutineServiceClient interface {
	// Gets the specified routine resource by routine ID.
	GetRoutine(ctx context.Context, in *GetRoutineRequest, opts ...grpc.CallOption) (*Routine, error)
	// Creates a new routine in the dataset.
	InsertRoutine(ctx context.Context, in *InsertRoutineRequest, opts ...grpc.CallOption) (*Routine, error)
	// Updates information in an existing routine. The update method replaces the
	// entire Routine resource.
	UpdateRoutine(ctx context.Context, in *UpdateRoutineRequest, opts ...grpc.CallOption) (*Routine, error)
	// Patches information in an existing routine. The patch method does a partial
	// update to an existing Routine resource.
	PatchRoutine(ctx context.Context, in *PatchRoutineRequest, opts ...grpc.CallOption) (*Routine, error)
	// Deletes the routine specified by routineId from the dataset.
	DeleteRoutine(ctx context.Context, in *DeleteRoutineRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Lists all routines in the specified dataset. Requires the READER dataset
	// role.
	ListRoutines(ctx context.Context, in *ListRoutinesRequest, opts ...grpc.CallOption) (*ListRoutinesResponse, error)
}

type routineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoutineServiceClient(cc grpc.ClientConnInterface) RoutineServiceClient {
	return &routineServiceClient{cc}
}

func (c *routineServiceClient) GetRoutine(ctx context.Context, in *GetRoutineRequest, opts ...grpc.CallOption) (*Routine, error) {
	out := new(Routine)
	err := c.cc.Invoke(ctx, "/google.cloud.bigquery.v2.RoutineService/GetRoutine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routineServiceClient) InsertRoutine(ctx context.Context, in *InsertRoutineRequest, opts ...grpc.CallOption) (*Routine, error) {
	out := new(Routine)
	err := c.cc.Invoke(ctx, "/google.cloud.bigquery.v2.RoutineService/InsertRoutine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routineServiceClient) UpdateRoutine(ctx context.Context, in *UpdateRoutineRequest, opts ...grpc.CallOption) (*Routine, error) {
	out := new(Routine)
	err := c.cc.Invoke(ctx, "/google.cloud.bigquery.v2.RoutineService/UpdateRoutine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routineServiceClient) PatchRoutine(ctx context.Context, in *PatchRoutineRequest, opts ...grpc.CallOption) (*Routine, error) {
	out := new(Routine)
	err := c.cc.Invoke(ctx, "/google.cloud.bigquery.v2.RoutineService/PatchRoutine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routineServiceClient) DeleteRoutine(ctx context.Context, in *DeleteRoutineRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/google.cloud.bigquery.v2.RoutineService/DeleteRoutine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routineServiceClient) ListRoutines(ctx context.Context, in *ListRoutinesRequest, opts ...grpc.CallOption) (*ListRoutinesResponse, error) {
	out := new(ListRoutinesResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.bigquery.v2.RoutineService/ListRoutines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoutineServiceServer is the server API for RoutineService service.
type RoutineServiceServer interface {
	// Gets the specified routine resource by routine ID.
	GetRoutine(context.Context, *GetRoutineRequest) (*Routine, error)
	// Creates a new routine in the dataset.
	InsertRoutine(context.Context, *InsertRoutineRequest) (*Routine, error)
	// Updates information in an existing routine. The update method replaces the
	// entire Routine resource.
	UpdateRoutine(context.Context, *UpdateRoutineRequest) (*Routine, error)
	// Patches information in an existing routine. The patch method does a partial
	// update to an existing Routine resource.
	PatchRoutine(context.Context, *PatchRoutineRequest) (*Routine, error)
	// Deletes the routine specified by routineId from the dataset.
	DeleteRoutine(context.Context, *DeleteRoutineRequest) (*emptypb.Empty, error)
	// Lists all routines in the specified dataset. Requires the READER dataset
	// role.
	ListRoutines(context.Context, *ListRoutinesRequest) (*ListRoutinesResponse, error)
}

// UnimplementedRoutineServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRoutineServiceServer struct {
}

func (*UnimplementedRoutineServiceServer) GetRoutine(context.Context, *GetRoutineRequest) (*Routine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoutine not implemented")
}
func (*UnimplementedRoutineServiceServer) InsertRoutine(context.Context, *InsertRoutineRequest) (*Routine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertRoutine not implemented")
}
func (*UnimplementedRoutineServiceServer) UpdateRoutine(context.Context, *UpdateRoutineRequest) (*Routine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoutine not implemented")
}
func (*UnimplementedRoutineServiceServer) PatchRoutine(context.Context, *PatchRoutineRequest) (*Routine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchRoutine not implemented")
}
func (*UnimplementedRoutineServiceServer) DeleteRoutine(context.Context, *DeleteRoutineRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoutine not implemented")
}
func (*UnimplementedRoutineServiceServer) ListRoutines(context.Context, *ListRoutinesRequest) (*ListRoutinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoutines not implemented")
}

func RegisterRoutineServiceServer(s *grpc.Server, srv RoutineServiceServer) {
	s.RegisterService(&_RoutineService_serviceDesc, srv)
}

func _RoutineService_GetRoutine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoutineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutineServiceServer).GetRoutine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.bigquery.v2.RoutineService/GetRoutine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutineServiceServer).GetRoutine(ctx, req.(*GetRoutineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutineService_InsertRoutine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertRoutineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutineServiceServer).InsertRoutine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.bigquery.v2.RoutineService/InsertRoutine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutineServiceServer).InsertRoutine(ctx, req.(*InsertRoutineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutineService_UpdateRoutine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoutineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutineServiceServer).UpdateRoutine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.bigquery.v2.RoutineService/UpdateRoutine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutineServiceServer).UpdateRoutine(ctx, req.(*UpdateRoutineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutineService_PatchRoutine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchRoutineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutineServiceServer).PatchRoutine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.bigquery.v2.RoutineService/PatchRoutine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutineServiceServer).PatchRoutine(ctx, req.(*PatchRoutineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutineService_DeleteRoutine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoutineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutineServiceServer).DeleteRoutine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.bigquery.v2.RoutineService/DeleteRoutine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutineServiceServer).DeleteRoutine(ctx, req.(*DeleteRoutineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutineService_ListRoutines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoutinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutineServiceServer).ListRoutines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.bigquery.v2.RoutineService/ListRoutines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutineServiceServer).ListRoutines(ctx, req.(*ListRoutinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RoutineService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.bigquery.v2.RoutineService",
	HandlerType: (*RoutineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRoutine",
			Handler:    _RoutineService_GetRoutine_Handler,
		},
		{
			MethodName: "InsertRoutine",
			Handler:    _RoutineService_InsertRoutine_Handler,
		},
		{
			MethodName: "UpdateRoutine",
			Handler:    _RoutineService_UpdateRoutine_Handler,
		},
		{
			MethodName: "PatchRoutine",
			Handler:    _RoutineService_PatchRoutine_Handler,
		},
		{
			MethodName: "DeleteRoutine",
			Handler:    _RoutineService_DeleteRoutine_Handler,
		},
		{
			MethodName: "ListRoutines",
			Handler:    _RoutineService_ListRoutines_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/bigquery/v2/routine.proto",
}
