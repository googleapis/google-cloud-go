// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/bigquery/v2/table.proto

package bigquerypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TableService_GetTable_FullMethodName    = "/google.cloud.bigquery.v2.TableService/GetTable"
	TableService_InsertTable_FullMethodName = "/google.cloud.bigquery.v2.TableService/InsertTable"
	TableService_PatchTable_FullMethodName  = "/google.cloud.bigquery.v2.TableService/PatchTable"
	TableService_UpdateTable_FullMethodName = "/google.cloud.bigquery.v2.TableService/UpdateTable"
	TableService_DeleteTable_FullMethodName = "/google.cloud.bigquery.v2.TableService/DeleteTable"
	TableService_ListTables_FullMethodName  = "/google.cloud.bigquery.v2.TableService/ListTables"
)

// TableServiceClient is the client API for TableService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TableServiceClient interface {
	// Gets the specified table resource by table ID.
	// This method does not return the data in the table, it only returns the
	// table resource, which describes the structure of this table.
	GetTable(ctx context.Context, in *GetTableRequest, opts ...grpc.CallOption) (*Table, error)
	// Creates a new, empty table in the dataset.
	InsertTable(ctx context.Context, in *InsertTableRequest, opts ...grpc.CallOption) (*Table, error)
	// Updates information in an existing table. The update method replaces the
	// entire table resource, whereas the patch method only replaces fields that
	// are provided in the submitted table resource.
	// This method supports RFC5789 patch semantics.
	PatchTable(ctx context.Context, in *UpdateOrPatchTableRequest, opts ...grpc.CallOption) (*Table, error)
	// Updates information in an existing table. The update method replaces the
	// entire Table resource, whereas the patch method only replaces fields that
	// are provided in the submitted Table resource.
	UpdateTable(ctx context.Context, in *UpdateOrPatchTableRequest, opts ...grpc.CallOption) (*Table, error)
	// Deletes the table specified by tableId from the dataset.
	// If the table contains data, all the data will be deleted.
	DeleteTable(ctx context.Context, in *DeleteTableRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Lists all tables in the specified dataset. Requires the READER dataset
	// role.
	ListTables(ctx context.Context, in *ListTablesRequest, opts ...grpc.CallOption) (*TableList, error)
}

type tableServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTableServiceClient(cc grpc.ClientConnInterface) TableServiceClient {
	return &tableServiceClient{cc}
}

func (c *tableServiceClient) GetTable(ctx context.Context, in *GetTableRequest, opts ...grpc.CallOption) (*Table, error) {
	out := new(Table)
	err := c.cc.Invoke(ctx, TableService_GetTable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableServiceClient) InsertTable(ctx context.Context, in *InsertTableRequest, opts ...grpc.CallOption) (*Table, error) {
	out := new(Table)
	err := c.cc.Invoke(ctx, TableService_InsertTable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableServiceClient) PatchTable(ctx context.Context, in *UpdateOrPatchTableRequest, opts ...grpc.CallOption) (*Table, error) {
	out := new(Table)
	err := c.cc.Invoke(ctx, TableService_PatchTable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableServiceClient) UpdateTable(ctx context.Context, in *UpdateOrPatchTableRequest, opts ...grpc.CallOption) (*Table, error) {
	out := new(Table)
	err := c.cc.Invoke(ctx, TableService_UpdateTable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableServiceClient) DeleteTable(ctx context.Context, in *DeleteTableRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TableService_DeleteTable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableServiceClient) ListTables(ctx context.Context, in *ListTablesRequest, opts ...grpc.CallOption) (*TableList, error) {
	out := new(TableList)
	err := c.cc.Invoke(ctx, TableService_ListTables_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TableServiceServer is the server API for TableService service.
// All implementations should embed UnimplementedTableServiceServer
// for forward compatibility
type TableServiceServer interface {
	// Gets the specified table resource by table ID.
	// This method does not return the data in the table, it only returns the
	// table resource, which describes the structure of this table.
	GetTable(context.Context, *GetTableRequest) (*Table, error)
	// Creates a new, empty table in the dataset.
	InsertTable(context.Context, *InsertTableRequest) (*Table, error)
	// Updates information in an existing table. The update method replaces the
	// entire table resource, whereas the patch method only replaces fields that
	// are provided in the submitted table resource.
	// This method supports RFC5789 patch semantics.
	PatchTable(context.Context, *UpdateOrPatchTableRequest) (*Table, error)
	// Updates information in an existing table. The update method replaces the
	// entire Table resource, whereas the patch method only replaces fields that
	// are provided in the submitted Table resource.
	UpdateTable(context.Context, *UpdateOrPatchTableRequest) (*Table, error)
	// Deletes the table specified by tableId from the dataset.
	// If the table contains data, all the data will be deleted.
	DeleteTable(context.Context, *DeleteTableRequest) (*emptypb.Empty, error)
	// Lists all tables in the specified dataset. Requires the READER dataset
	// role.
	ListTables(context.Context, *ListTablesRequest) (*TableList, error)
}

// UnimplementedTableServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTableServiceServer struct {
}

func (UnimplementedTableServiceServer) GetTable(context.Context, *GetTableRequest) (*Table, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTable not implemented")
}
func (UnimplementedTableServiceServer) InsertTable(context.Context, *InsertTableRequest) (*Table, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertTable not implemented")
}
func (UnimplementedTableServiceServer) PatchTable(context.Context, *UpdateOrPatchTableRequest) (*Table, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchTable not implemented")
}
func (UnimplementedTableServiceServer) UpdateTable(context.Context, *UpdateOrPatchTableRequest) (*Table, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTable not implemented")
}
func (UnimplementedTableServiceServer) DeleteTable(context.Context, *DeleteTableRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTable not implemented")
}
func (UnimplementedTableServiceServer) ListTables(context.Context, *ListTablesRequest) (*TableList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTables not implemented")
}

// UnsafeTableServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TableServiceServer will
// result in compilation errors.
type UnsafeTableServiceServer interface {
	mustEmbedUnimplementedTableServiceServer()
}

func RegisterTableServiceServer(s grpc.ServiceRegistrar, srv TableServiceServer) {
	s.RegisterService(&TableService_ServiceDesc, srv)
}

func _TableService_GetTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).GetTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TableService_GetTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).GetTable(ctx, req.(*GetTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableService_InsertTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).InsertTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TableService_InsertTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).InsertTable(ctx, req.(*InsertTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableService_PatchTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrPatchTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).PatchTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TableService_PatchTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).PatchTable(ctx, req.(*UpdateOrPatchTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableService_UpdateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrPatchTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).UpdateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TableService_UpdateTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).UpdateTable(ctx, req.(*UpdateOrPatchTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableService_DeleteTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).DeleteTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TableService_DeleteTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).DeleteTable(ctx, req.(*DeleteTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableService_ListTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).ListTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TableService_ListTables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).ListTables(ctx, req.(*ListTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TableService_ServiceDesc is the grpc.ServiceDesc for TableService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TableService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.bigquery.v2.TableService",
	HandlerType: (*TableServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTable",
			Handler:    _TableService_GetTable_Handler,
		},
		{
			MethodName: "InsertTable",
			Handler:    _TableService_InsertTable_Handler,
		},
		{
			MethodName: "PatchTable",
			Handler:    _TableService_PatchTable_Handler,
		},
		{
			MethodName: "UpdateTable",
			Handler:    _TableService_UpdateTable_Handler,
		},
		{
			MethodName: "DeleteTable",
			Handler:    _TableService_DeleteTable_Handler,
		},
		{
			MethodName: "ListTables",
			Handler:    _TableService_ListTables_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/bigquery/v2/table.proto",
}
