// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package bigquery

import (
	"bytes"
	"context"
	"fmt"
	"log/slog"
	"math"
	"net/http"
	"net/url"
	"time"

	bigquerypb "cloud.google.com/go/bigquery/v2/apiv2/bigquerypb"
	gax "github.com/googleapis/gax-go/v2"
	"google.golang.org/api/iterator"
	"google.golang.org/api/option"
	"google.golang.org/api/option/internaloption"
	gtransport "google.golang.org/api/transport/grpc"
	httptransport "google.golang.org/api/transport/http"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/wrapperspb"
)

var newRoutineClientHook clientHook

// RoutineCallOptions contains the retry settings for each method of RoutineClient.
type RoutineCallOptions struct {
	GetRoutine    []gax.CallOption
	InsertRoutine []gax.CallOption
	UpdateRoutine []gax.CallOption
	PatchRoutine  []gax.CallOption
	DeleteRoutine []gax.CallOption
	ListRoutines  []gax.CallOption
}

func defaultRoutineGRPCClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("bigquery.googleapis.com:443"),
		internaloption.WithDefaultEndpointTemplate("bigquery.UNIVERSE_DOMAIN:443"),
		internaloption.WithDefaultMTLSEndpoint("bigquery.mtls.googleapis.com:443"),
		internaloption.WithDefaultUniverseDomain("googleapis.com"),
		internaloption.WithDefaultAudience("https://bigquery.googleapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableJwtWithScope(),
		internaloption.EnableNewAuthLibrary(),
		option.WithGRPCDialOption(grpc.WithDefaultCallOptions(
			grpc.MaxCallRecvMsgSize(math.MaxInt32))),
	}
}

func defaultRoutineCallOptions() *RoutineCallOptions {
	return &RoutineCallOptions{
		GetRoutine: []gax.CallOption{
			gax.WithTimeout(64000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.DeadlineExceeded,
					codes.Unavailable,
					codes.ResourceExhausted,
				}, gax.Backoff{
					Initial:    100 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		InsertRoutine: []gax.CallOption{
			gax.WithTimeout(240000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.DeadlineExceeded,
					codes.Unavailable,
					codes.ResourceExhausted,
				}, gax.Backoff{
					Initial:    400 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 2.00,
				})
			}),
		},
		UpdateRoutine: []gax.CallOption{
			gax.WithTimeout(240000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.DeadlineExceeded,
					codes.Unavailable,
					codes.ResourceExhausted,
				}, gax.Backoff{
					Initial:    400 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 2.00,
				})
			}),
		},
		PatchRoutine: []gax.CallOption{
			gax.WithTimeout(240000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.DeadlineExceeded,
					codes.Unavailable,
					codes.ResourceExhausted,
				}, gax.Backoff{
					Initial:    400 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 2.00,
				})
			}),
		},
		DeleteRoutine: []gax.CallOption{
			gax.WithTimeout(240000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.DeadlineExceeded,
					codes.Unavailable,
					codes.ResourceExhausted,
				}, gax.Backoff{
					Initial:    400 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 2.00,
				})
			}),
		},
		ListRoutines: []gax.CallOption{
			gax.WithTimeout(64000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.DeadlineExceeded,
					codes.Unavailable,
					codes.ResourceExhausted,
				}, gax.Backoff{
					Initial:    100 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
	}
}

func defaultRoutineRESTCallOptions() *RoutineCallOptions {
	return &RoutineCallOptions{
		GetRoutine: []gax.CallOption{
			gax.WithTimeout(64000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnHTTPCodes(gax.Backoff{
					Initial:    100 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				},
					http.StatusGatewayTimeout,
					http.StatusServiceUnavailable,
					http.StatusTooManyRequests)
			}),
		},
		InsertRoutine: []gax.CallOption{
			gax.WithTimeout(240000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnHTTPCodes(gax.Backoff{
					Initial:    400 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 2.00,
				},
					http.StatusGatewayTimeout,
					http.StatusServiceUnavailable,
					http.StatusTooManyRequests)
			}),
		},
		UpdateRoutine: []gax.CallOption{
			gax.WithTimeout(240000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnHTTPCodes(gax.Backoff{
					Initial:    400 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 2.00,
				},
					http.StatusGatewayTimeout,
					http.StatusServiceUnavailable,
					http.StatusTooManyRequests)
			}),
		},
		PatchRoutine: []gax.CallOption{
			gax.WithTimeout(240000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnHTTPCodes(gax.Backoff{
					Initial:    400 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 2.00,
				},
					http.StatusGatewayTimeout,
					http.StatusServiceUnavailable,
					http.StatusTooManyRequests)
			}),
		},
		DeleteRoutine: []gax.CallOption{
			gax.WithTimeout(240000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnHTTPCodes(gax.Backoff{
					Initial:    400 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 2.00,
				},
					http.StatusGatewayTimeout,
					http.StatusServiceUnavailable,
					http.StatusTooManyRequests)
			}),
		},
		ListRoutines: []gax.CallOption{
			gax.WithTimeout(64000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnHTTPCodes(gax.Backoff{
					Initial:    100 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				},
					http.StatusGatewayTimeout,
					http.StatusServiceUnavailable,
					http.StatusTooManyRequests)
			}),
		},
	}
}

// internalRoutineClient is an interface that defines the methods available from BigQuery API.
type internalRoutineClient interface {
	Close() error
	setGoogleClientInfo(...string)
	Connection() *grpc.ClientConn
	GetRoutine(context.Context, *bigquerypb.GetRoutineRequest, ...gax.CallOption) (*bigquerypb.Routine, error)
	InsertRoutine(context.Context, *bigquerypb.InsertRoutineRequest, ...gax.CallOption) (*bigquerypb.Routine, error)
	UpdateRoutine(context.Context, *bigquerypb.UpdateRoutineRequest, ...gax.CallOption) (*bigquerypb.Routine, error)
	PatchRoutine(context.Context, *bigquerypb.PatchRoutineRequest, ...gax.CallOption) (*bigquerypb.Routine, error)
	DeleteRoutine(context.Context, *bigquerypb.DeleteRoutineRequest, ...gax.CallOption) error
	ListRoutines(context.Context, *bigquerypb.ListRoutinesRequest, ...gax.CallOption) *RoutineIterator
}

// RoutineClient is a client for interacting with BigQuery API.
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
//
// RoutineService provides management access to BigQuery routines.
type RoutineClient struct {
	// The internal transport-dependent client.
	internalClient internalRoutineClient

	// The call options for this service.
	CallOptions *RoutineCallOptions
}

// Wrapper methods routed to the internal client.

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *RoutineClient) Close() error {
	return c.internalClient.Close()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *RoutineClient) setGoogleClientInfo(keyval ...string) {
	c.internalClient.setGoogleClientInfo(keyval...)
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *RoutineClient) Connection() *grpc.ClientConn {
	return c.internalClient.Connection()
}

// GetRoutine gets the specified routine resource by routine ID.
func (c *RoutineClient) GetRoutine(ctx context.Context, req *bigquerypb.GetRoutineRequest, opts ...gax.CallOption) (*bigquerypb.Routine, error) {
	return c.internalClient.GetRoutine(ctx, req, opts...)
}

// InsertRoutine creates a new routine in the dataset.
func (c *RoutineClient) InsertRoutine(ctx context.Context, req *bigquerypb.InsertRoutineRequest, opts ...gax.CallOption) (*bigquerypb.Routine, error) {
	return c.internalClient.InsertRoutine(ctx, req, opts...)
}

// UpdateRoutine updates information in an existing routine. The update method replaces the
// entire Routine resource.
func (c *RoutineClient) UpdateRoutine(ctx context.Context, req *bigquerypb.UpdateRoutineRequest, opts ...gax.CallOption) (*bigquerypb.Routine, error) {
	return c.internalClient.UpdateRoutine(ctx, req, opts...)
}

// PatchRoutine patches information in an existing routine. The patch method does a partial
// update to an existing Routine resource.
func (c *RoutineClient) PatchRoutine(ctx context.Context, req *bigquerypb.PatchRoutineRequest, opts ...gax.CallOption) (*bigquerypb.Routine, error) {
	return c.internalClient.PatchRoutine(ctx, req, opts...)
}

// DeleteRoutine deletes the routine specified by routineId from the dataset.
func (c *RoutineClient) DeleteRoutine(ctx context.Context, req *bigquerypb.DeleteRoutineRequest, opts ...gax.CallOption) error {
	return c.internalClient.DeleteRoutine(ctx, req, opts...)
}

// ListRoutines lists all routines in the specified dataset. Requires the READER dataset
// role.
func (c *RoutineClient) ListRoutines(ctx context.Context, req *bigquerypb.ListRoutinesRequest, opts ...gax.CallOption) *RoutineIterator {
	return c.internalClient.ListRoutines(ctx, req, opts...)
}

// routineGRPCClient is a client for interacting with BigQuery API over gRPC transport.
//
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type routineGRPCClient struct {
	// Connection pool of gRPC connections to the service.
	connPool gtransport.ConnPool

	// Points back to the CallOptions field of the containing RoutineClient
	CallOptions **RoutineCallOptions

	// The gRPC API client.
	routineClient bigquerypb.RoutineServiceClient

	// The x-goog-* metadata to be sent with each request.
	xGoogHeaders []string

	logger *slog.Logger
}

// NewRoutineClient creates a new routine service client based on gRPC.
// The returned client must be Closed when it is done being used to clean up its underlying connections.
//
// RoutineService provides management access to BigQuery routines.
func NewRoutineClient(ctx context.Context, opts ...option.ClientOption) (*RoutineClient, error) {
	clientOpts := defaultRoutineGRPCClientOptions()
	if newRoutineClientHook != nil {
		hookOpts, err := newRoutineClientHook(ctx, clientHookParams{})
		if err != nil {
			return nil, err
		}
		clientOpts = append(clientOpts, hookOpts...)
	}

	connPool, err := gtransport.DialPool(ctx, append(clientOpts, opts...)...)
	if err != nil {
		return nil, err
	}
	client := RoutineClient{CallOptions: defaultRoutineCallOptions()}

	c := &routineGRPCClient{
		connPool:      connPool,
		routineClient: bigquerypb.NewRoutineServiceClient(connPool),
		CallOptions:   &client.CallOptions,
		logger:        internaloption.GetLogger(opts),
	}
	c.setGoogleClientInfo()

	client.internalClient = c

	return &client, nil
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *routineGRPCClient) Connection() *grpc.ClientConn {
	return c.connPool.Conn()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *routineGRPCClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", gax.GoVersion}, keyval...)
	kv = append(kv, "gapic", getVersionClient(), "gax", gax.Version, "grpc", grpc.Version, "pb", protoVersion)
	c.xGoogHeaders = []string{
		"x-goog-api-client", gax.XGoogHeader(kv...),
	}
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *routineGRPCClient) Close() error {
	return c.connPool.Close()
}

// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type routineRESTClient struct {
	// The http endpoint to connect to.
	endpoint string

	// The http client.
	httpClient *http.Client

	// The x-goog-* headers to be sent with each request.
	xGoogHeaders []string

	// Points back to the CallOptions field of the containing RoutineClient
	CallOptions **RoutineCallOptions

	logger *slog.Logger
}

// NewRoutineRESTClient creates a new routine service rest client.
//
// RoutineService provides management access to BigQuery routines.
func NewRoutineRESTClient(ctx context.Context, opts ...option.ClientOption) (*RoutineClient, error) {
	clientOpts := append(defaultRoutineRESTClientOptions(), opts...)
	httpClient, endpoint, err := httptransport.NewClient(ctx, clientOpts...)
	if err != nil {
		return nil, err
	}

	callOpts := defaultRoutineRESTCallOptions()
	c := &routineRESTClient{
		endpoint:    endpoint,
		httpClient:  httpClient,
		CallOptions: &callOpts,
		logger:      internaloption.GetLogger(opts),
	}
	c.setGoogleClientInfo()

	return &RoutineClient{internalClient: c, CallOptions: callOpts}, nil
}

func defaultRoutineRESTClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("https://bigquery.googleapis.com"),
		internaloption.WithDefaultEndpointTemplate("https://bigquery.UNIVERSE_DOMAIN"),
		internaloption.WithDefaultMTLSEndpoint("https://bigquery.mtls.googleapis.com"),
		internaloption.WithDefaultUniverseDomain("googleapis.com"),
		internaloption.WithDefaultAudience("https://bigquery.googleapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableNewAuthLibrary(),
	}
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *routineRESTClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", gax.GoVersion}, keyval...)
	kv = append(kv, "gapic", getVersionClient(), "gax", gax.Version, "rest", "UNKNOWN", "pb", protoVersion)
	c.xGoogHeaders = []string{
		"x-goog-api-client", gax.XGoogHeader(kv...),
	}
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *routineRESTClient) Close() error {
	// Replace httpClient with nil to force cleanup.
	c.httpClient = nil
	return nil
}

// Connection returns a connection to the API service.
//
// Deprecated: This method always returns nil.
func (c *routineRESTClient) Connection() *grpc.ClientConn {
	return nil
}
func (c *routineGRPCClient) GetRoutine(ctx context.Context, req *bigquerypb.GetRoutineRequest, opts ...gax.CallOption) (*bigquerypb.Routine, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v&%s=%v&%s=%v", "project_id", url.QueryEscape(req.GetProjectId()), "dataset_id", url.QueryEscape(req.GetDatasetId()), "routine_id", url.QueryEscape(req.GetRoutineId()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).GetRoutine[0:len((*c.CallOptions).GetRoutine):len((*c.CallOptions).GetRoutine)], opts...)
	var resp *bigquerypb.Routine
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = executeRPC(ctx, c.routineClient.GetRoutine, req, settings.GRPC, c.logger, "GetRoutine")
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *routineGRPCClient) InsertRoutine(ctx context.Context, req *bigquerypb.InsertRoutineRequest, opts ...gax.CallOption) (*bigquerypb.Routine, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v&%s=%v", "project_id", url.QueryEscape(req.GetProjectId()), "dataset_id", url.QueryEscape(req.GetDatasetId()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).InsertRoutine[0:len((*c.CallOptions).InsertRoutine):len((*c.CallOptions).InsertRoutine)], opts...)
	var resp *bigquerypb.Routine
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = executeRPC(ctx, c.routineClient.InsertRoutine, req, settings.GRPC, c.logger, "InsertRoutine")
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *routineGRPCClient) UpdateRoutine(ctx context.Context, req *bigquerypb.UpdateRoutineRequest, opts ...gax.CallOption) (*bigquerypb.Routine, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v&%s=%v&%s=%v", "project_id", url.QueryEscape(req.GetProjectId()), "dataset_id", url.QueryEscape(req.GetDatasetId()), "routine_id", url.QueryEscape(req.GetRoutineId()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).UpdateRoutine[0:len((*c.CallOptions).UpdateRoutine):len((*c.CallOptions).UpdateRoutine)], opts...)
	var resp *bigquerypb.Routine
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = executeRPC(ctx, c.routineClient.UpdateRoutine, req, settings.GRPC, c.logger, "UpdateRoutine")
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *routineGRPCClient) PatchRoutine(ctx context.Context, req *bigquerypb.PatchRoutineRequest, opts ...gax.CallOption) (*bigquerypb.Routine, error) {
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, c.xGoogHeaders...)
	opts = append((*c.CallOptions).PatchRoutine[0:len((*c.CallOptions).PatchRoutine):len((*c.CallOptions).PatchRoutine)], opts...)
	var resp *bigquerypb.Routine
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = executeRPC(ctx, c.routineClient.PatchRoutine, req, settings.GRPC, c.logger, "PatchRoutine")
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *routineGRPCClient) DeleteRoutine(ctx context.Context, req *bigquerypb.DeleteRoutineRequest, opts ...gax.CallOption) error {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v&%s=%v&%s=%v", "project_id", url.QueryEscape(req.GetProjectId()), "dataset_id", url.QueryEscape(req.GetDatasetId()), "routine_id", url.QueryEscape(req.GetRoutineId()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).DeleteRoutine[0:len((*c.CallOptions).DeleteRoutine):len((*c.CallOptions).DeleteRoutine)], opts...)
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		_, err = executeRPC(ctx, c.routineClient.DeleteRoutine, req, settings.GRPC, c.logger, "DeleteRoutine")
		return err
	}, opts...)
	return err
}

func (c *routineGRPCClient) ListRoutines(ctx context.Context, req *bigquerypb.ListRoutinesRequest, opts ...gax.CallOption) *RoutineIterator {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v&%s=%v", "project_id", url.QueryEscape(req.GetProjectId()), "dataset_id", url.QueryEscape(req.GetDatasetId()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ListRoutines[0:len((*c.CallOptions).ListRoutines):len((*c.CallOptions).ListRoutines)], opts...)
	it := &RoutineIterator{}
	req = proto.Clone(req).(*bigquerypb.ListRoutinesRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*bigquerypb.Routine, string, error) {
		resp := &bigquerypb.ListRoutinesResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.MaxResults = &wrapperspb.UInt32Value{Value: uint32(math.MaxInt32)}
		} else if pageSize != 0 {
			req.MaxResults = &wrapperspb.UInt32Value{Value: uint32(pageSize)}
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = executeRPC(ctx, c.routineClient.ListRoutines, req, settings.GRPC, c.logger, "ListRoutines")
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetRoutines(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	if psVal := req.GetMaxResults(); psVal != nil {
		it.pageInfo.MaxSize = int(psVal.GetValue())
	}
	it.pageInfo.Token = req.GetPageToken()

	return it
}

// GetRoutine gets the specified routine resource by routine ID.
func (c *routineRESTClient) GetRoutine(ctx context.Context, req *bigquerypb.GetRoutineRequest, opts ...gax.CallOption) (*bigquerypb.Routine, error) {
	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/bigquery/v2/projects/%v/datasets/%v/routines/%v", req.GetProjectId(), req.GetDatasetId(), req.GetRoutineId())

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v&%s=%v&%s=%v", "project_id", url.QueryEscape(req.GetProjectId()), "dataset_id", url.QueryEscape(req.GetDatasetId()), "routine_id", url.QueryEscape(req.GetRoutineId()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).GetRoutine[0:len((*c.CallOptions).GetRoutine):len((*c.CallOptions).GetRoutine)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &bigquerypb.Routine{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		buf, err := executeHTTPRequest(ctx, c.httpClient, httpReq, c.logger, nil, "GetRoutine")
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// InsertRoutine creates a new routine in the dataset.
func (c *routineRESTClient) InsertRoutine(ctx context.Context, req *bigquerypb.InsertRoutineRequest, opts ...gax.CallOption) (*bigquerypb.Routine, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	body := req.GetRoutine()
	jsonReq, err := m.Marshal(body)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/bigquery/v2/projects/%v/datasets/%v/routines", req.GetProjectId(), req.GetDatasetId())

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v&%s=%v", "project_id", url.QueryEscape(req.GetProjectId()), "dataset_id", url.QueryEscape(req.GetDatasetId()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).InsertRoutine[0:len((*c.CallOptions).InsertRoutine):len((*c.CallOptions).InsertRoutine)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &bigquerypb.Routine{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		buf, err := executeHTTPRequest(ctx, c.httpClient, httpReq, c.logger, jsonReq, "InsertRoutine")
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// UpdateRoutine updates information in an existing routine. The update method replaces the
// entire Routine resource.
func (c *routineRESTClient) UpdateRoutine(ctx context.Context, req *bigquerypb.UpdateRoutineRequest, opts ...gax.CallOption) (*bigquerypb.Routine, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	body := req.GetRoutine()
	jsonReq, err := m.Marshal(body)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/bigquery/v2/projects/%v/datasets/%v/routines/%v", req.GetProjectId(), req.GetDatasetId(), req.GetRoutineId())

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v&%s=%v&%s=%v", "project_id", url.QueryEscape(req.GetProjectId()), "dataset_id", url.QueryEscape(req.GetDatasetId()), "routine_id", url.QueryEscape(req.GetRoutineId()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).UpdateRoutine[0:len((*c.CallOptions).UpdateRoutine):len((*c.CallOptions).UpdateRoutine)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &bigquerypb.Routine{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("PUT", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		buf, err := executeHTTPRequest(ctx, c.httpClient, httpReq, c.logger, jsonReq, "UpdateRoutine")
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// PatchRoutine patches information in an existing routine. The patch method does a partial
// update to an existing Routine resource.
func (c *routineRESTClient) PatchRoutine(ctx context.Context, req *bigquerypb.PatchRoutineRequest, opts ...gax.CallOption) (*bigquerypb.Routine, error) {
	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("")

	params := url.Values{}
	params.Add("datasetId", fmt.Sprintf("%v", req.GetDatasetId()))
	if req.GetFieldMask() != nil {
		field, err := protojson.Marshal(req.GetFieldMask())
		if err != nil {
			return nil, err
		}
		params.Add("fieldMask", string(field[1:len(field)-1]))
	}
	params.Add("projectId", fmt.Sprintf("%v", req.GetProjectId()))
	if req.GetRoutine().GetCreationTime() != 0 {
		params.Add("routine.creationTime", fmt.Sprintf("%v", req.GetRoutine().GetCreationTime()))
	}
	if req.GetRoutine().GetDataGovernanceType() != 0 {
		params.Add("routine.dataGovernanceType", fmt.Sprintf("%v", req.GetRoutine().GetDataGovernanceType()))
	}
	if req.GetRoutine().GetDefinitionBody() != "" {
		params.Add("routine.definitionBody", fmt.Sprintf("%v", req.GetRoutine().GetDefinitionBody()))
	}
	if req.GetRoutine().GetDescription() != "" {
		params.Add("routine.description", fmt.Sprintf("%v", req.GetRoutine().GetDescription()))
	}
	if req.GetRoutine().GetDeterminismLevel() != 0 {
		params.Add("routine.determinismLevel", fmt.Sprintf("%v", req.GetRoutine().GetDeterminismLevel()))
	}
	if req.GetRoutine().GetEtag() != "" {
		params.Add("routine.etag", fmt.Sprintf("%v", req.GetRoutine().GetEtag()))
	}
	if req.GetRoutine().GetExternalRuntimeOptions().GetContainerCpu() != 0 {
		params.Add("routine.externalRuntimeOptions.containerCpu", fmt.Sprintf("%v", req.GetRoutine().GetExternalRuntimeOptions().GetContainerCpu()))
	}
	if req.GetRoutine().GetExternalRuntimeOptions().GetContainerMemory() != "" {
		params.Add("routine.externalRuntimeOptions.containerMemory", fmt.Sprintf("%v", req.GetRoutine().GetExternalRuntimeOptions().GetContainerMemory()))
	}
	if req.GetRoutine().GetExternalRuntimeOptions().GetMaxBatchingRows() != 0 {
		params.Add("routine.externalRuntimeOptions.maxBatchingRows", fmt.Sprintf("%v", req.GetRoutine().GetExternalRuntimeOptions().GetMaxBatchingRows()))
	}
	if req.GetRoutine().GetExternalRuntimeOptions().GetRuntimeConnection() != "" {
		params.Add("routine.externalRuntimeOptions.runtimeConnection", fmt.Sprintf("%v", req.GetRoutine().GetExternalRuntimeOptions().GetRuntimeConnection()))
	}
	if req.GetRoutine().GetExternalRuntimeOptions().GetRuntimeVersion() != "" {
		params.Add("routine.externalRuntimeOptions.runtimeVersion", fmt.Sprintf("%v", req.GetRoutine().GetExternalRuntimeOptions().GetRuntimeVersion()))
	}
	if items := req.GetRoutine().GetImportedLibraries(); len(items) > 0 {
		for _, item := range items {
			params.Add("routine.importedLibraries", fmt.Sprintf("%v", item))
		}
	}
	if req.GetRoutine().GetLanguage() != 0 {
		params.Add("routine.language", fmt.Sprintf("%v", req.GetRoutine().GetLanguage()))
	}
	if req.GetRoutine().GetLastModifiedTime() != 0 {
		params.Add("routine.lastModifiedTime", fmt.Sprintf("%v", req.GetRoutine().GetLastModifiedTime()))
	}
	params.Add("routine.pythonOptions.entryPoint", fmt.Sprintf("%v", req.GetRoutine().GetPythonOptions().GetEntryPoint()))
	if items := req.GetRoutine().GetPythonOptions().GetPackages(); len(items) > 0 {
		for _, item := range items {
			params.Add("routine.pythonOptions.packages", fmt.Sprintf("%v", item))
		}
	}
	if req.GetRoutine().GetRemoteFunctionOptions().GetConnection() != "" {
		params.Add("routine.remoteFunctionOptions.connection", fmt.Sprintf("%v", req.GetRoutine().GetRemoteFunctionOptions().GetConnection()))
	}
	if req.GetRoutine().GetRemoteFunctionOptions().GetEndpoint() != "" {
		params.Add("routine.remoteFunctionOptions.endpoint", fmt.Sprintf("%v", req.GetRoutine().GetRemoteFunctionOptions().GetEndpoint()))
	}
	if req.GetRoutine().GetRemoteFunctionOptions().GetMaxBatchingRows() != 0 {
		params.Add("routine.remoteFunctionOptions.maxBatchingRows", fmt.Sprintf("%v", req.GetRoutine().GetRemoteFunctionOptions().GetMaxBatchingRows()))
	}
	params.Add("routine.returnType.arrayElementType.rangeElementType.typeKind", fmt.Sprintf("%v", req.GetRoutine().GetReturnType().GetArrayElementType().GetRangeElementType().GetTypeKind()))
	params.Add("routine.returnType.arrayElementType.typeKind", fmt.Sprintf("%v", req.GetRoutine().GetReturnType().GetArrayElementType().GetTypeKind()))
	params.Add("routine.returnType.rangeElementType.arrayElementType.typeKind", fmt.Sprintf("%v", req.GetRoutine().GetReturnType().GetRangeElementType().GetArrayElementType().GetTypeKind()))
	params.Add("routine.returnType.rangeElementType.typeKind", fmt.Sprintf("%v", req.GetRoutine().GetReturnType().GetRangeElementType().GetTypeKind()))
	params.Add("routine.returnType.typeKind", fmt.Sprintf("%v", req.GetRoutine().GetReturnType().GetTypeKind()))
	params.Add("routine.routineReference.datasetId", fmt.Sprintf("%v", req.GetRoutine().GetRoutineReference().GetDatasetId()))
	params.Add("routine.routineReference.projectId", fmt.Sprintf("%v", req.GetRoutine().GetRoutineReference().GetProjectId()))
	params.Add("routine.routineReference.routineId", fmt.Sprintf("%v", req.GetRoutine().GetRoutineReference().GetRoutineId()))
	params.Add("routine.routineType", fmt.Sprintf("%v", req.GetRoutine().GetRoutineType()))
	if req.GetRoutine().GetSecurityMode() != 0 {
		params.Add("routine.securityMode", fmt.Sprintf("%v", req.GetRoutine().GetSecurityMode()))
	}
	if items := req.GetRoutine().GetSparkOptions().GetArchiveUris(); len(items) > 0 {
		for _, item := range items {
			params.Add("routine.sparkOptions.archiveUris", fmt.Sprintf("%v", item))
		}
	}
	if req.GetRoutine().GetSparkOptions().GetConnection() != "" {
		params.Add("routine.sparkOptions.connection", fmt.Sprintf("%v", req.GetRoutine().GetSparkOptions().GetConnection()))
	}
	if req.GetRoutine().GetSparkOptions().GetContainerImage() != "" {
		params.Add("routine.sparkOptions.containerImage", fmt.Sprintf("%v", req.GetRoutine().GetSparkOptions().GetContainerImage()))
	}
	if items := req.GetRoutine().GetSparkOptions().GetFileUris(); len(items) > 0 {
		for _, item := range items {
			params.Add("routine.sparkOptions.fileUris", fmt.Sprintf("%v", item))
		}
	}
	if items := req.GetRoutine().GetSparkOptions().GetJarUris(); len(items) > 0 {
		for _, item := range items {
			params.Add("routine.sparkOptions.jarUris", fmt.Sprintf("%v", item))
		}
	}
	if req.GetRoutine().GetSparkOptions().GetMainClass() != "" {
		params.Add("routine.sparkOptions.mainClass", fmt.Sprintf("%v", req.GetRoutine().GetSparkOptions().GetMainClass()))
	}
	if req.GetRoutine().GetSparkOptions().GetMainFileUri() != "" {
		params.Add("routine.sparkOptions.mainFileUri", fmt.Sprintf("%v", req.GetRoutine().GetSparkOptions().GetMainFileUri()))
	}
	if items := req.GetRoutine().GetSparkOptions().GetPyFileUris(); len(items) > 0 {
		for _, item := range items {
			params.Add("routine.sparkOptions.pyFileUris", fmt.Sprintf("%v", item))
		}
	}
	if req.GetRoutine().GetSparkOptions().GetRuntimeVersion() != "" {
		params.Add("routine.sparkOptions.runtimeVersion", fmt.Sprintf("%v", req.GetRoutine().GetSparkOptions().GetRuntimeVersion()))
	}
	if req.GetRoutine().GetStrictMode() != nil {
		field, err := protojson.Marshal(req.GetRoutine().GetStrictMode())
		if err != nil {
			return nil, err
		}
		params.Add("routine.strictMode", string(field))
	}
	params.Add("routineId", fmt.Sprintf("%v", req.GetRoutineId()))

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := append(c.xGoogHeaders, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).PatchRoutine[0:len((*c.CallOptions).PatchRoutine):len((*c.CallOptions).PatchRoutine)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &bigquerypb.Routine{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("", baseUrl.String(), nil)
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		buf, err := executeHTTPRequest(ctx, c.httpClient, httpReq, c.logger, nil, "PatchRoutine")
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// DeleteRoutine deletes the routine specified by routineId from the dataset.
func (c *routineRESTClient) DeleteRoutine(ctx context.Context, req *bigquerypb.DeleteRoutineRequest, opts ...gax.CallOption) error {
	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return err
	}
	baseUrl.Path += fmt.Sprintf("/bigquery/v2/projects/%v/datasets/%v/routines/%v", req.GetProjectId(), req.GetDatasetId(), req.GetRoutineId())

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v&%s=%v&%s=%v", "project_id", url.QueryEscape(req.GetProjectId()), "dataset_id", url.QueryEscape(req.GetDatasetId()), "routine_id", url.QueryEscape(req.GetRoutineId()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	return gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("DELETE", baseUrl.String(), nil)
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		_, err = executeHTTPRequest(ctx, c.httpClient, httpReq, c.logger, nil, "DeleteRoutine")
		return err
	}, opts...)
}

// ListRoutines lists all routines in the specified dataset. Requires the READER dataset
// role.
func (c *routineRESTClient) ListRoutines(ctx context.Context, req *bigquerypb.ListRoutinesRequest, opts ...gax.CallOption) *RoutineIterator {
	it := &RoutineIterator{}
	req = proto.Clone(req).(*bigquerypb.ListRoutinesRequest)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	it.InternalFetch = func(pageSize int, pageToken string) ([]*bigquerypb.Routine, string, error) {
		resp := &bigquerypb.ListRoutinesResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.MaxResults = &wrapperspb.UInt32Value{Value: uint32(math.MaxInt32)}
		} else if pageSize != 0 {
			req.MaxResults = &wrapperspb.UInt32Value{Value: uint32(pageSize)}
		}
		baseUrl, err := url.Parse(c.endpoint)
		if err != nil {
			return nil, "", err
		}
		baseUrl.Path += fmt.Sprintf("/bigquery/v2/projects/%v/datasets/%v/routines", req.GetProjectId(), req.GetDatasetId())

		params := url.Values{}
		if req.GetFilter() != "" {
			params.Add("filter", fmt.Sprintf("%v", req.GetFilter()))
		}
		if req.GetMaxResults() != nil {
			field, err := protojson.Marshal(req.GetMaxResults())
			if err != nil {
				return nil, "", err
			}
			params.Add("maxResults", string(field))
		}
		if req.GetPageToken() != "" {
			params.Add("pageToken", fmt.Sprintf("%v", req.GetPageToken()))
		}

		baseUrl.RawQuery = params.Encode()

		// Build HTTP headers from client and context metadata.
		hds := append(c.xGoogHeaders, "Content-Type", "application/json")
		headers := gax.BuildHeaders(ctx, hds...)
		e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			if settings.Path != "" {
				baseUrl.Path = settings.Path
			}
			httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
			if err != nil {
				return err
			}
			httpReq.Header = headers

			buf, err := executeHTTPRequest(ctx, c.httpClient, httpReq, c.logger, nil, "ListRoutines")
			if err != nil {
				return err
			}
			if err := unm.Unmarshal(buf, resp); err != nil {
				return err
			}

			return nil
		}, opts...)
		if e != nil {
			return nil, "", e
		}
		it.Response = resp
		return resp.GetRoutines(), resp.GetNextPageToken(), nil
	}

	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	if psVal := req.GetMaxResults(); psVal != nil {
		it.pageInfo.MaxSize = int(psVal.GetValue())
	}
	it.pageInfo.Token = req.GetPageToken()

	return it
}
