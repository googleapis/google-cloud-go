// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.7
// source: google/cloud/locationfinder/v1/cloud_location.proto

package locationfinderpb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The type of the cloud provider. This enum lists all possible providers of
// cloud locations.
type CloudLocation_CloudProvider int32

const (
	// Unspecified type.
	CloudLocation_CLOUD_PROVIDER_UNSPECIFIED CloudLocation_CloudProvider = 0
	// Cloud provider type for Google Cloud.
	CloudLocation_CLOUD_PROVIDER_GCP CloudLocation_CloudProvider = 1
	// Cloud provider type for AWS.
	CloudLocation_CLOUD_PROVIDER_AWS CloudLocation_CloudProvider = 2
	// Cloud provider type for Azure.
	CloudLocation_CLOUD_PROVIDER_AZURE CloudLocation_CloudProvider = 3
	// Cloud provider type for OCI.
	CloudLocation_CLOUD_PROVIDER_OCI CloudLocation_CloudProvider = 4
)

// Enum value maps for CloudLocation_CloudProvider.
var (
	CloudLocation_CloudProvider_name = map[int32]string{
		0: "CLOUD_PROVIDER_UNSPECIFIED",
		1: "CLOUD_PROVIDER_GCP",
		2: "CLOUD_PROVIDER_AWS",
		3: "CLOUD_PROVIDER_AZURE",
		4: "CLOUD_PROVIDER_OCI",
	}
	CloudLocation_CloudProvider_value = map[string]int32{
		"CLOUD_PROVIDER_UNSPECIFIED": 0,
		"CLOUD_PROVIDER_GCP":         1,
		"CLOUD_PROVIDER_AWS":         2,
		"CLOUD_PROVIDER_AZURE":       3,
		"CLOUD_PROVIDER_OCI":         4,
	}
)

func (x CloudLocation_CloudProvider) Enum() *CloudLocation_CloudProvider {
	p := new(CloudLocation_CloudProvider)
	*p = x
	return p
}

func (x CloudLocation_CloudProvider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CloudLocation_CloudProvider) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_locationfinder_v1_cloud_location_proto_enumTypes[0].Descriptor()
}

func (CloudLocation_CloudProvider) Type() protoreflect.EnumType {
	return &file_google_cloud_locationfinder_v1_cloud_location_proto_enumTypes[0]
}

func (x CloudLocation_CloudProvider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CloudLocation_CloudProvider.Descriptor instead.
func (CloudLocation_CloudProvider) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_locationfinder_v1_cloud_location_proto_rawDescGZIP(), []int{0, 0}
}

// The type of the cloud location. This enum lists all possible categories of
// cloud locations.
type CloudLocation_CloudLocationType int32

const (
	// Unspecified type.
	CloudLocation_CLOUD_LOCATION_TYPE_UNSPECIFIED CloudLocation_CloudLocationType = 0
	// CloudLocation type for region.
	CloudLocation_CLOUD_LOCATION_TYPE_REGION CloudLocation_CloudLocationType = 1
	// CloudLocation type for zone.
	CloudLocation_CLOUD_LOCATION_TYPE_ZONE CloudLocation_CloudLocationType = 2
	// CloudLocation type for region extension.
	CloudLocation_CLOUD_LOCATION_TYPE_REGION_EXTENSION CloudLocation_CloudLocationType = 3
	// CloudLocation type for Google Distributed Cloud Connected Zone.
	CloudLocation_CLOUD_LOCATION_TYPE_GDCC_ZONE CloudLocation_CloudLocationType = 4
)

// Enum value maps for CloudLocation_CloudLocationType.
var (
	CloudLocation_CloudLocationType_name = map[int32]string{
		0: "CLOUD_LOCATION_TYPE_UNSPECIFIED",
		1: "CLOUD_LOCATION_TYPE_REGION",
		2: "CLOUD_LOCATION_TYPE_ZONE",
		3: "CLOUD_LOCATION_TYPE_REGION_EXTENSION",
		4: "CLOUD_LOCATION_TYPE_GDCC_ZONE",
	}
	CloudLocation_CloudLocationType_value = map[string]int32{
		"CLOUD_LOCATION_TYPE_UNSPECIFIED":      0,
		"CLOUD_LOCATION_TYPE_REGION":           1,
		"CLOUD_LOCATION_TYPE_ZONE":             2,
		"CLOUD_LOCATION_TYPE_REGION_EXTENSION": 3,
		"CLOUD_LOCATION_TYPE_GDCC_ZONE":        4,
	}
)

func (x CloudLocation_CloudLocationType) Enum() *CloudLocation_CloudLocationType {
	p := new(CloudLocation_CloudLocationType)
	*p = x
	return p
}

func (x CloudLocation_CloudLocationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CloudLocation_CloudLocationType) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_locationfinder_v1_cloud_location_proto_enumTypes[1].Descriptor()
}

func (CloudLocation_CloudLocationType) Type() protoreflect.EnumType {
	return &file_google_cloud_locationfinder_v1_cloud_location_proto_enumTypes[1]
}

func (x CloudLocation_CloudLocationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CloudLocation_CloudLocationType.Descriptor instead.
func (CloudLocation_CloudLocationType) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_locationfinder_v1_cloud_location_proto_rawDescGZIP(), []int{0, 1}
}

// Represents resource cloud locations.
type CloudLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier. Name of the cloud location. Unique name of the cloud location
	// including project and location using the form:
	// `projects/{project_id}/locations/{location}/cloudLocations/{cloud_location}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. The containing cloud location in the strict nesting hierarchy.
	// For example, the containing cloud location of a zone is a region.
	ContainingCloudLocation string `protobuf:"bytes,2,opt,name=containing_cloud_location,json=containingCloudLocation,proto3" json:"containing_cloud_location,omitempty"`
	// Optional. The human-readable name of the cloud location. Example:
	// us-east-2, us-east1.
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Optional. The provider of the cloud location. Values can be Google Cloud or
	// third-party providers, including AWS, Azure, or Oracle Cloud
	// Infrastructure.
	CloudProvider CloudLocation_CloudProvider `protobuf:"varint,4,opt,name=cloud_provider,json=cloudProvider,proto3,enum=google.cloud.locationfinder.v1.CloudLocation_CloudProvider" json:"cloud_provider,omitempty"`
	// Optional. The two-letter ISO 3166-1 alpha-2 code of the cloud location.
	// Examples: US, JP, KR.
	TerritoryCode string `protobuf:"bytes,5,opt,name=territory_code,json=territoryCode,proto3" json:"territory_code,omitempty"`
	// Optional. The type of the cloud location.
	CloudLocationType CloudLocation_CloudLocationType `protobuf:"varint,6,opt,name=cloud_location_type,json=cloudLocationType,proto3,enum=google.cloud.locationfinder.v1.CloudLocation_CloudLocationType" json:"cloud_location_type,omitempty"`
	// Optional. The carbon free energy percentage of the cloud location. This
	// represents the average percentage of time customers' application will be
	// running on carbon-free energy. See
	// https://cloud.google.com/sustainability/region-carbon for more details.
	// There is a difference between default value 0 and unset value. 0 means the
	// carbon free energy percentage is 0%, while unset value means the carbon
	// footprint data is not available.
	CarbonFreeEnergyPercentage *float32 `protobuf:"fixed32,7,opt,name=carbon_free_energy_percentage,json=carbonFreeEnergyPercentage,proto3,oneof" json:"carbon_free_energy_percentage,omitempty"`
}

func (x *CloudLocation) Reset() {
	*x = CloudLocation{}
	mi := &file_google_cloud_locationfinder_v1_cloud_location_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloudLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudLocation) ProtoMessage() {}

func (x *CloudLocation) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_locationfinder_v1_cloud_location_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudLocation.ProtoReflect.Descriptor instead.
func (*CloudLocation) Descriptor() ([]byte, []int) {
	return file_google_cloud_locationfinder_v1_cloud_location_proto_rawDescGZIP(), []int{0}
}

func (x *CloudLocation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CloudLocation) GetContainingCloudLocation() string {
	if x != nil {
		return x.ContainingCloudLocation
	}
	return ""
}

func (x *CloudLocation) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *CloudLocation) GetCloudProvider() CloudLocation_CloudProvider {
	if x != nil {
		return x.CloudProvider
	}
	return CloudLocation_CLOUD_PROVIDER_UNSPECIFIED
}

func (x *CloudLocation) GetTerritoryCode() string {
	if x != nil {
		return x.TerritoryCode
	}
	return ""
}

func (x *CloudLocation) GetCloudLocationType() CloudLocation_CloudLocationType {
	if x != nil {
		return x.CloudLocationType
	}
	return CloudLocation_CLOUD_LOCATION_TYPE_UNSPECIFIED
}

func (x *CloudLocation) GetCarbonFreeEnergyPercentage() float32 {
	if x != nil && x.CarbonFreeEnergyPercentage != nil {
		return *x.CarbonFreeEnergyPercentage
	}
	return 0
}

// Message for requesting list of cloud locations..
type ListCloudLocationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent, which owns this collection of cloud locations.
	// Format: projects/{project}/locations/{location}
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Optional. The maximum number of cloud locations to return per page. The
	// service might return fewer cloud locations than this value. If unspecified,
	// server will pick an appropriate default.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Optional. A token identifying a page of results the server should return.
	// Provide page token returned by a previous 'ListCloudLocations' call to
	// retrieve the next page of results. When paginating, all other parameters
	// provided to 'ListCloudLocations' must match the call that provided the page
	// token.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Optional. A filter expression that filters resources listed in the
	// response. The expression is in the form of field=value. For example,
	// 'cloud_location_type=CLOUD_LOCATION_TYPE_REGION'. Multiple filter queries
	// are space-separated. For example,
	// 'cloud_location_type=CLOUD_LOCATION_TYPE_REGION territory_code="US"' By
	// default, each expression is an AND expression. However, you can include AND
	// and OR expressions explicitly.
	Filter string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListCloudLocationsRequest) Reset() {
	*x = ListCloudLocationsRequest{}
	mi := &file_google_cloud_locationfinder_v1_cloud_location_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCloudLocationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudLocationsRequest) ProtoMessage() {}

func (x *ListCloudLocationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_locationfinder_v1_cloud_location_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudLocationsRequest.ProtoReflect.Descriptor instead.
func (*ListCloudLocationsRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_locationfinder_v1_cloud_location_proto_rawDescGZIP(), []int{1}
}

func (x *ListCloudLocationsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListCloudLocationsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListCloudLocationsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListCloudLocationsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// Message for response to listing cloud locations.
type ListCloudLocationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. List of cloud locations.
	CloudLocations []*CloudLocation `protobuf:"bytes,1,rep,name=cloud_locations,json=cloudLocations,proto3" json:"cloud_locations,omitempty"`
	// Output only. The continuation token, used to page through large result
	// sets. Provide this value in a subsequent request as page_token in
	// subsequent requests to retrieve the next page. If this field is not
	// present, there are no subsequent results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListCloudLocationsResponse) Reset() {
	*x = ListCloudLocationsResponse{}
	mi := &file_google_cloud_locationfinder_v1_cloud_location_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCloudLocationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudLocationsResponse) ProtoMessage() {}

func (x *ListCloudLocationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_locationfinder_v1_cloud_location_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudLocationsResponse.ProtoReflect.Descriptor instead.
func (*ListCloudLocationsResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_locationfinder_v1_cloud_location_proto_rawDescGZIP(), []int{2}
}

func (x *ListCloudLocationsResponse) GetCloudLocations() []*CloudLocation {
	if x != nil {
		return x.CloudLocations
	}
	return nil
}

func (x *ListCloudLocationsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Message for getting a cloud location.
type GetCloudLocationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Name of the resource.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetCloudLocationRequest) Reset() {
	*x = GetCloudLocationRequest{}
	mi := &file_google_cloud_locationfinder_v1_cloud_location_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCloudLocationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCloudLocationRequest) ProtoMessage() {}

func (x *GetCloudLocationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_locationfinder_v1_cloud_location_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCloudLocationRequest.ProtoReflect.Descriptor instead.
func (*GetCloudLocationRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_locationfinder_v1_cloud_location_proto_rawDescGZIP(), []int{3}
}

func (x *GetCloudLocationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Message for searching cloud locations from a given source location.
type SearchCloudLocationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent, which owns this collection of cloud locations.
	// Format: projects/{project}/locations/{location}
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Required. The source cloud location to search from.
	// Example search can be searching nearby cloud locations from the source
	// cloud location by latency.
	SourceCloudLocation string `protobuf:"bytes,2,opt,name=source_cloud_location,json=sourceCloudLocation,proto3" json:"source_cloud_location,omitempty"`
	// Optional. The maximum number of cloud locations to return. The service
	// might return fewer cloud locations than this value. If unspecified, server
	// will pick an appropriate default.
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Optional. A token identifying a page of results the server should return.
	// Provide Page token returned by a previous 'ListCloudLocations' call to
	// retrieve the next page of results. When paginating, all other parameters
	// provided to 'ListCloudLocations' must match the call that provided the page
	// token.
	PageToken string `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Optional. The query string in search query syntax. While filter is used to
	// filter the search results by attributes, query is used to specify the
	// search requirements.
	Query string `protobuf:"bytes,6,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *SearchCloudLocationsRequest) Reset() {
	*x = SearchCloudLocationsRequest{}
	mi := &file_google_cloud_locationfinder_v1_cloud_location_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchCloudLocationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchCloudLocationsRequest) ProtoMessage() {}

func (x *SearchCloudLocationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_locationfinder_v1_cloud_location_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchCloudLocationsRequest.ProtoReflect.Descriptor instead.
func (*SearchCloudLocationsRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_locationfinder_v1_cloud_location_proto_rawDescGZIP(), []int{4}
}

func (x *SearchCloudLocationsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *SearchCloudLocationsRequest) GetSourceCloudLocation() string {
	if x != nil {
		return x.SourceCloudLocation
	}
	return ""
}

func (x *SearchCloudLocationsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SearchCloudLocationsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *SearchCloudLocationsRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

// Message for response to searching cloud locations.
type SearchCloudLocationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. List of cloud locations.
	CloudLocations []*CloudLocation `protobuf:"bytes,1,rep,name=cloud_locations,json=cloudLocations,proto3" json:"cloud_locations,omitempty"`
	// Output only. The continuation token, used to page through large result
	// sets. Provide this value in a subsequent request as page_token in
	// subsequent requests to retrieve the next page. If this field is not
	// present, there are no subsequent results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *SearchCloudLocationsResponse) Reset() {
	*x = SearchCloudLocationsResponse{}
	mi := &file_google_cloud_locationfinder_v1_cloud_location_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchCloudLocationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchCloudLocationsResponse) ProtoMessage() {}

func (x *SearchCloudLocationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_locationfinder_v1_cloud_location_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchCloudLocationsResponse.ProtoReflect.Descriptor instead.
func (*SearchCloudLocationsResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_locationfinder_v1_cloud_location_proto_rawDescGZIP(), []int{5}
}

func (x *SearchCloudLocationsResponse) GetCloudLocations() []*CloudLocation {
	if x != nil {
		return x.CloudLocations
	}
	return nil
}

func (x *SearchCloudLocationsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

var File_google_cloud_locationfinder_v1_cloud_location_proto protoreflect.FileDescriptor

var file_google_cloud_locationfinder_v1_cloud_location_proto_rawDesc = []byte{
	0x0a, 0x33, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x66, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xbb, 0x08, 0x0a, 0x0d, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x08, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x74, 0x0a, 0x19,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x38, 0xe0, 0x41, 0x03, 0xfa, 0x41, 0x32, 0x0a, 0x30, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x67, 0x0a, 0x0e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x0e, 0x74, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x0d, 0x74, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x74, 0x0a, 0x13, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x11, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x1d, 0x63, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x5f,
	0x66, 0x72, 0x65, 0x65, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x48, 0x00, 0x52, 0x1a, 0x63, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x46, 0x72, 0x65, 0x65, 0x45,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x88,
	0x01, 0x01, 0x22, 0x91, 0x01, 0x0a, 0x0d, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x50, 0x52,
	0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x50, 0x52,
	0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x47, 0x43, 0x50, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12,
	0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x41,
	0x57, 0x53, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x50, 0x52,
	0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x41, 0x5a, 0x55, 0x52, 0x45, 0x10, 0x03, 0x12, 0x16,
	0x0a, 0x12, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52,
	0x5f, 0x4f, 0x43, 0x49, 0x10, 0x04, 0x22, 0xc3, 0x01, 0x0a, 0x11, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f,
	0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x10,
	0x01, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x12,
	0x28, 0x0a, 0x24, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58,
	0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4c, 0x4f,
	0x55, 0x44, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x47, 0x44, 0x43, 0x43, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x10, 0x04, 0x3a, 0x9e, 0x01, 0xea,
	0x41, 0x9a, 0x01, 0x0a, 0x30, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2a, 0x0e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x0d,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x20, 0x0a,
	0x1e, 0x5f, 0x63, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x65, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22,
	0xd0, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0xe0,
	0x41, 0x02, 0xfa, 0x41, 0x32, 0x12, 0x30, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x22, 0xa6, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5b, 0x0a, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b,
	0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0d, 0x6e, 0x65,
	0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x67, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x32, 0x0a, 0x30, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x66, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0xbe, 0x02, 0x0a, 0x1b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x32, 0x12, 0x30, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x66, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x6c, 0x0a, 0x15, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x32, 0x0a, 0x30, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x66, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x13, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x19, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0xa8, 0x01, 0x0a, 0x1c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x42, 0xec, 0x01, 0x0a, 0x22, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x66, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x12, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4a, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x67, 0x6f, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x66, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x70, 0x62, 0x3b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x70, 0x62, 0xaa, 0x02, 0x1e, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x1e, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x5c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x5c, 0x56, 0x31, 0xea, 0x02, 0x21, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_locationfinder_v1_cloud_location_proto_rawDescOnce sync.Once
	file_google_cloud_locationfinder_v1_cloud_location_proto_rawDescData = file_google_cloud_locationfinder_v1_cloud_location_proto_rawDesc
)

func file_google_cloud_locationfinder_v1_cloud_location_proto_rawDescGZIP() []byte {
	file_google_cloud_locationfinder_v1_cloud_location_proto_rawDescOnce.Do(func() {
		file_google_cloud_locationfinder_v1_cloud_location_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_locationfinder_v1_cloud_location_proto_rawDescData)
	})
	return file_google_cloud_locationfinder_v1_cloud_location_proto_rawDescData
}

var file_google_cloud_locationfinder_v1_cloud_location_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_google_cloud_locationfinder_v1_cloud_location_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_google_cloud_locationfinder_v1_cloud_location_proto_goTypes = []any{
	(CloudLocation_CloudProvider)(0),     // 0: google.cloud.locationfinder.v1.CloudLocation.CloudProvider
	(CloudLocation_CloudLocationType)(0), // 1: google.cloud.locationfinder.v1.CloudLocation.CloudLocationType
	(*CloudLocation)(nil),                // 2: google.cloud.locationfinder.v1.CloudLocation
	(*ListCloudLocationsRequest)(nil),    // 3: google.cloud.locationfinder.v1.ListCloudLocationsRequest
	(*ListCloudLocationsResponse)(nil),   // 4: google.cloud.locationfinder.v1.ListCloudLocationsResponse
	(*GetCloudLocationRequest)(nil),      // 5: google.cloud.locationfinder.v1.GetCloudLocationRequest
	(*SearchCloudLocationsRequest)(nil),  // 6: google.cloud.locationfinder.v1.SearchCloudLocationsRequest
	(*SearchCloudLocationsResponse)(nil), // 7: google.cloud.locationfinder.v1.SearchCloudLocationsResponse
}
var file_google_cloud_locationfinder_v1_cloud_location_proto_depIdxs = []int32{
	0, // 0: google.cloud.locationfinder.v1.CloudLocation.cloud_provider:type_name -> google.cloud.locationfinder.v1.CloudLocation.CloudProvider
	1, // 1: google.cloud.locationfinder.v1.CloudLocation.cloud_location_type:type_name -> google.cloud.locationfinder.v1.CloudLocation.CloudLocationType
	2, // 2: google.cloud.locationfinder.v1.ListCloudLocationsResponse.cloud_locations:type_name -> google.cloud.locationfinder.v1.CloudLocation
	2, // 3: google.cloud.locationfinder.v1.SearchCloudLocationsResponse.cloud_locations:type_name -> google.cloud.locationfinder.v1.CloudLocation
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_google_cloud_locationfinder_v1_cloud_location_proto_init() }
func file_google_cloud_locationfinder_v1_cloud_location_proto_init() {
	if File_google_cloud_locationfinder_v1_cloud_location_proto != nil {
		return
	}
	file_google_cloud_locationfinder_v1_cloud_location_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_locationfinder_v1_cloud_location_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_cloud_locationfinder_v1_cloud_location_proto_goTypes,
		DependencyIndexes: file_google_cloud_locationfinder_v1_cloud_location_proto_depIdxs,
		EnumInfos:         file_google_cloud_locationfinder_v1_cloud_location_proto_enumTypes,
		MessageInfos:      file_google_cloud_locationfinder_v1_cloud_location_proto_msgTypes,
	}.Build()
	File_google_cloud_locationfinder_v1_cloud_location_proto = out.File
	file_google_cloud_locationfinder_v1_cloud_location_proto_rawDesc = nil
	file_google_cloud_locationfinder_v1_cloud_location_proto_goTypes = nil
	file_google_cloud_locationfinder_v1_cloud_location_proto_depIdxs = nil
}
