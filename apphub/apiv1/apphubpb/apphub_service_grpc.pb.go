// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/apphub/v1/apphub_service.proto

package apphubpb

import (
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AppHub_LookupServiceProjectAttachment_FullMethodName = "/google.cloud.apphub.v1.AppHub/LookupServiceProjectAttachment"
	AppHub_ListServiceProjectAttachments_FullMethodName  = "/google.cloud.apphub.v1.AppHub/ListServiceProjectAttachments"
	AppHub_CreateServiceProjectAttachment_FullMethodName = "/google.cloud.apphub.v1.AppHub/CreateServiceProjectAttachment"
	AppHub_GetServiceProjectAttachment_FullMethodName    = "/google.cloud.apphub.v1.AppHub/GetServiceProjectAttachment"
	AppHub_DeleteServiceProjectAttachment_FullMethodName = "/google.cloud.apphub.v1.AppHub/DeleteServiceProjectAttachment"
	AppHub_DetachServiceProjectAttachment_FullMethodName = "/google.cloud.apphub.v1.AppHub/DetachServiceProjectAttachment"
	AppHub_ListDiscoveredServices_FullMethodName         = "/google.cloud.apphub.v1.AppHub/ListDiscoveredServices"
	AppHub_GetDiscoveredService_FullMethodName           = "/google.cloud.apphub.v1.AppHub/GetDiscoveredService"
	AppHub_LookupDiscoveredService_FullMethodName        = "/google.cloud.apphub.v1.AppHub/LookupDiscoveredService"
	AppHub_ListServices_FullMethodName                   = "/google.cloud.apphub.v1.AppHub/ListServices"
	AppHub_CreateService_FullMethodName                  = "/google.cloud.apphub.v1.AppHub/CreateService"
	AppHub_GetService_FullMethodName                     = "/google.cloud.apphub.v1.AppHub/GetService"
	AppHub_UpdateService_FullMethodName                  = "/google.cloud.apphub.v1.AppHub/UpdateService"
	AppHub_DeleteService_FullMethodName                  = "/google.cloud.apphub.v1.AppHub/DeleteService"
	AppHub_ListDiscoveredWorkloads_FullMethodName        = "/google.cloud.apphub.v1.AppHub/ListDiscoveredWorkloads"
	AppHub_GetDiscoveredWorkload_FullMethodName          = "/google.cloud.apphub.v1.AppHub/GetDiscoveredWorkload"
	AppHub_LookupDiscoveredWorkload_FullMethodName       = "/google.cloud.apphub.v1.AppHub/LookupDiscoveredWorkload"
	AppHub_ListWorkloads_FullMethodName                  = "/google.cloud.apphub.v1.AppHub/ListWorkloads"
	AppHub_CreateWorkload_FullMethodName                 = "/google.cloud.apphub.v1.AppHub/CreateWorkload"
	AppHub_GetWorkload_FullMethodName                    = "/google.cloud.apphub.v1.AppHub/GetWorkload"
	AppHub_UpdateWorkload_FullMethodName                 = "/google.cloud.apphub.v1.AppHub/UpdateWorkload"
	AppHub_DeleteWorkload_FullMethodName                 = "/google.cloud.apphub.v1.AppHub/DeleteWorkload"
	AppHub_ListApplications_FullMethodName               = "/google.cloud.apphub.v1.AppHub/ListApplications"
	AppHub_CreateApplication_FullMethodName              = "/google.cloud.apphub.v1.AppHub/CreateApplication"
	AppHub_GetApplication_FullMethodName                 = "/google.cloud.apphub.v1.AppHub/GetApplication"
	AppHub_UpdateApplication_FullMethodName              = "/google.cloud.apphub.v1.AppHub/UpdateApplication"
	AppHub_DeleteApplication_FullMethodName              = "/google.cloud.apphub.v1.AppHub/DeleteApplication"
)

// AppHubClient is the client API for AppHub service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppHubClient interface {
	// Lists a service project attachment for a given service project. You can
	// call this API from any project to find if it is attached to a host project.
	LookupServiceProjectAttachment(ctx context.Context, in *LookupServiceProjectAttachmentRequest, opts ...grpc.CallOption) (*LookupServiceProjectAttachmentResponse, error)
	// Lists service projects attached to the host project.
	ListServiceProjectAttachments(ctx context.Context, in *ListServiceProjectAttachmentsRequest, opts ...grpc.CallOption) (*ListServiceProjectAttachmentsResponse, error)
	// Attaches a service project to the host project.
	CreateServiceProjectAttachment(ctx context.Context, in *CreateServiceProjectAttachmentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets a service project attachment.
	GetServiceProjectAttachment(ctx context.Context, in *GetServiceProjectAttachmentRequest, opts ...grpc.CallOption) (*ServiceProjectAttachment, error)
	// Deletes a service project attachment.
	DeleteServiceProjectAttachment(ctx context.Context, in *DeleteServiceProjectAttachmentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Detaches a service project from a host project.
	// You can call this API from any service project without needing access to
	// the host project that it is attached to.
	DetachServiceProjectAttachment(ctx context.Context, in *DetachServiceProjectAttachmentRequest, opts ...grpc.CallOption) (*DetachServiceProjectAttachmentResponse, error)
	// Lists Discovered Services that can be added to an Application in a host
	// project and location.
	ListDiscoveredServices(ctx context.Context, in *ListDiscoveredServicesRequest, opts ...grpc.CallOption) (*ListDiscoveredServicesResponse, error)
	// Gets a Discovered Service in a host project and location.
	GetDiscoveredService(ctx context.Context, in *GetDiscoveredServiceRequest, opts ...grpc.CallOption) (*DiscoveredService, error)
	// Lists a Discovered Service in a host project and location, with a
	// given resource URI.
	LookupDiscoveredService(ctx context.Context, in *LookupDiscoveredServiceRequest, opts ...grpc.CallOption) (*LookupDiscoveredServiceResponse, error)
	// Lists Services in an Application.
	ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesResponse, error)
	// Creates a Service in an Application.
	CreateService(ctx context.Context, in *CreateServiceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets a Service in an Application.
	GetService(ctx context.Context, in *GetServiceRequest, opts ...grpc.CallOption) (*Service, error)
	// Updates a Service in an Application.
	UpdateService(ctx context.Context, in *UpdateServiceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a Service from an Application.
	DeleteService(ctx context.Context, in *DeleteServiceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists Discovered Workloads that can be added to an Application in a host
	// project and location.
	ListDiscoveredWorkloads(ctx context.Context, in *ListDiscoveredWorkloadsRequest, opts ...grpc.CallOption) (*ListDiscoveredWorkloadsResponse, error)
	// Gets a Discovered Workload in a host project and location.
	GetDiscoveredWorkload(ctx context.Context, in *GetDiscoveredWorkloadRequest, opts ...grpc.CallOption) (*DiscoveredWorkload, error)
	// Lists a Discovered Workload in a host project and location, with a
	// given resource URI.
	LookupDiscoveredWorkload(ctx context.Context, in *LookupDiscoveredWorkloadRequest, opts ...grpc.CallOption) (*LookupDiscoveredWorkloadResponse, error)
	// Lists Workloads in an Application.
	ListWorkloads(ctx context.Context, in *ListWorkloadsRequest, opts ...grpc.CallOption) (*ListWorkloadsResponse, error)
	// Creates a Workload in an Application.
	CreateWorkload(ctx context.Context, in *CreateWorkloadRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets a Workload in an Application.
	GetWorkload(ctx context.Context, in *GetWorkloadRequest, opts ...grpc.CallOption) (*Workload, error)
	// Updates a Workload in an Application.
	UpdateWorkload(ctx context.Context, in *UpdateWorkloadRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a Workload from an Application.
	DeleteWorkload(ctx context.Context, in *DeleteWorkloadRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists Applications in a host project and location.
	ListApplications(ctx context.Context, in *ListApplicationsRequest, opts ...grpc.CallOption) (*ListApplicationsResponse, error)
	// Creates an Application in a host project and location.
	CreateApplication(ctx context.Context, in *CreateApplicationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets an Application in a host project and location.
	GetApplication(ctx context.Context, in *GetApplicationRequest, opts ...grpc.CallOption) (*Application, error)
	// Updates an Application in a host project and location.
	UpdateApplication(ctx context.Context, in *UpdateApplicationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes an Application in a host project and location.
	DeleteApplication(ctx context.Context, in *DeleteApplicationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type appHubClient struct {
	cc grpc.ClientConnInterface
}

func NewAppHubClient(cc grpc.ClientConnInterface) AppHubClient {
	return &appHubClient{cc}
}

func (c *appHubClient) LookupServiceProjectAttachment(ctx context.Context, in *LookupServiceProjectAttachmentRequest, opts ...grpc.CallOption) (*LookupServiceProjectAttachmentResponse, error) {
	out := new(LookupServiceProjectAttachmentResponse)
	err := c.cc.Invoke(ctx, AppHub_LookupServiceProjectAttachment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appHubClient) ListServiceProjectAttachments(ctx context.Context, in *ListServiceProjectAttachmentsRequest, opts ...grpc.CallOption) (*ListServiceProjectAttachmentsResponse, error) {
	out := new(ListServiceProjectAttachmentsResponse)
	err := c.cc.Invoke(ctx, AppHub_ListServiceProjectAttachments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appHubClient) CreateServiceProjectAttachment(ctx context.Context, in *CreateServiceProjectAttachmentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, AppHub_CreateServiceProjectAttachment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appHubClient) GetServiceProjectAttachment(ctx context.Context, in *GetServiceProjectAttachmentRequest, opts ...grpc.CallOption) (*ServiceProjectAttachment, error) {
	out := new(ServiceProjectAttachment)
	err := c.cc.Invoke(ctx, AppHub_GetServiceProjectAttachment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appHubClient) DeleteServiceProjectAttachment(ctx context.Context, in *DeleteServiceProjectAttachmentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, AppHub_DeleteServiceProjectAttachment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appHubClient) DetachServiceProjectAttachment(ctx context.Context, in *DetachServiceProjectAttachmentRequest, opts ...grpc.CallOption) (*DetachServiceProjectAttachmentResponse, error) {
	out := new(DetachServiceProjectAttachmentResponse)
	err := c.cc.Invoke(ctx, AppHub_DetachServiceProjectAttachment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appHubClient) ListDiscoveredServices(ctx context.Context, in *ListDiscoveredServicesRequest, opts ...grpc.CallOption) (*ListDiscoveredServicesResponse, error) {
	out := new(ListDiscoveredServicesResponse)
	err := c.cc.Invoke(ctx, AppHub_ListDiscoveredServices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appHubClient) GetDiscoveredService(ctx context.Context, in *GetDiscoveredServiceRequest, opts ...grpc.CallOption) (*DiscoveredService, error) {
	out := new(DiscoveredService)
	err := c.cc.Invoke(ctx, AppHub_GetDiscoveredService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appHubClient) LookupDiscoveredService(ctx context.Context, in *LookupDiscoveredServiceRequest, opts ...grpc.CallOption) (*LookupDiscoveredServiceResponse, error) {
	out := new(LookupDiscoveredServiceResponse)
	err := c.cc.Invoke(ctx, AppHub_LookupDiscoveredService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appHubClient) ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesResponse, error) {
	out := new(ListServicesResponse)
	err := c.cc.Invoke(ctx, AppHub_ListServices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appHubClient) CreateService(ctx context.Context, in *CreateServiceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, AppHub_CreateService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appHubClient) GetService(ctx context.Context, in *GetServiceRequest, opts ...grpc.CallOption) (*Service, error) {
	out := new(Service)
	err := c.cc.Invoke(ctx, AppHub_GetService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appHubClient) UpdateService(ctx context.Context, in *UpdateServiceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, AppHub_UpdateService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appHubClient) DeleteService(ctx context.Context, in *DeleteServiceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, AppHub_DeleteService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appHubClient) ListDiscoveredWorkloads(ctx context.Context, in *ListDiscoveredWorkloadsRequest, opts ...grpc.CallOption) (*ListDiscoveredWorkloadsResponse, error) {
	out := new(ListDiscoveredWorkloadsResponse)
	err := c.cc.Invoke(ctx, AppHub_ListDiscoveredWorkloads_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appHubClient) GetDiscoveredWorkload(ctx context.Context, in *GetDiscoveredWorkloadRequest, opts ...grpc.CallOption) (*DiscoveredWorkload, error) {
	out := new(DiscoveredWorkload)
	err := c.cc.Invoke(ctx, AppHub_GetDiscoveredWorkload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appHubClient) LookupDiscoveredWorkload(ctx context.Context, in *LookupDiscoveredWorkloadRequest, opts ...grpc.CallOption) (*LookupDiscoveredWorkloadResponse, error) {
	out := new(LookupDiscoveredWorkloadResponse)
	err := c.cc.Invoke(ctx, AppHub_LookupDiscoveredWorkload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appHubClient) ListWorkloads(ctx context.Context, in *ListWorkloadsRequest, opts ...grpc.CallOption) (*ListWorkloadsResponse, error) {
	out := new(ListWorkloadsResponse)
	err := c.cc.Invoke(ctx, AppHub_ListWorkloads_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appHubClient) CreateWorkload(ctx context.Context, in *CreateWorkloadRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, AppHub_CreateWorkload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appHubClient) GetWorkload(ctx context.Context, in *GetWorkloadRequest, opts ...grpc.CallOption) (*Workload, error) {
	out := new(Workload)
	err := c.cc.Invoke(ctx, AppHub_GetWorkload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appHubClient) UpdateWorkload(ctx context.Context, in *UpdateWorkloadRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, AppHub_UpdateWorkload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appHubClient) DeleteWorkload(ctx context.Context, in *DeleteWorkloadRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, AppHub_DeleteWorkload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appHubClient) ListApplications(ctx context.Context, in *ListApplicationsRequest, opts ...grpc.CallOption) (*ListApplicationsResponse, error) {
	out := new(ListApplicationsResponse)
	err := c.cc.Invoke(ctx, AppHub_ListApplications_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appHubClient) CreateApplication(ctx context.Context, in *CreateApplicationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, AppHub_CreateApplication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appHubClient) GetApplication(ctx context.Context, in *GetApplicationRequest, opts ...grpc.CallOption) (*Application, error) {
	out := new(Application)
	err := c.cc.Invoke(ctx, AppHub_GetApplication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appHubClient) UpdateApplication(ctx context.Context, in *UpdateApplicationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, AppHub_UpdateApplication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appHubClient) DeleteApplication(ctx context.Context, in *DeleteApplicationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, AppHub_DeleteApplication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppHubServer is the server API for AppHub service.
// All implementations should embed UnimplementedAppHubServer
// for forward compatibility
type AppHubServer interface {
	// Lists a service project attachment for a given service project. You can
	// call this API from any project to find if it is attached to a host project.
	LookupServiceProjectAttachment(context.Context, *LookupServiceProjectAttachmentRequest) (*LookupServiceProjectAttachmentResponse, error)
	// Lists service projects attached to the host project.
	ListServiceProjectAttachments(context.Context, *ListServiceProjectAttachmentsRequest) (*ListServiceProjectAttachmentsResponse, error)
	// Attaches a service project to the host project.
	CreateServiceProjectAttachment(context.Context, *CreateServiceProjectAttachmentRequest) (*longrunningpb.Operation, error)
	// Gets a service project attachment.
	GetServiceProjectAttachment(context.Context, *GetServiceProjectAttachmentRequest) (*ServiceProjectAttachment, error)
	// Deletes a service project attachment.
	DeleteServiceProjectAttachment(context.Context, *DeleteServiceProjectAttachmentRequest) (*longrunningpb.Operation, error)
	// Detaches a service project from a host project.
	// You can call this API from any service project without needing access to
	// the host project that it is attached to.
	DetachServiceProjectAttachment(context.Context, *DetachServiceProjectAttachmentRequest) (*DetachServiceProjectAttachmentResponse, error)
	// Lists Discovered Services that can be added to an Application in a host
	// project and location.
	ListDiscoveredServices(context.Context, *ListDiscoveredServicesRequest) (*ListDiscoveredServicesResponse, error)
	// Gets a Discovered Service in a host project and location.
	GetDiscoveredService(context.Context, *GetDiscoveredServiceRequest) (*DiscoveredService, error)
	// Lists a Discovered Service in a host project and location, with a
	// given resource URI.
	LookupDiscoveredService(context.Context, *LookupDiscoveredServiceRequest) (*LookupDiscoveredServiceResponse, error)
	// Lists Services in an Application.
	ListServices(context.Context, *ListServicesRequest) (*ListServicesResponse, error)
	// Creates a Service in an Application.
	CreateService(context.Context, *CreateServiceRequest) (*longrunningpb.Operation, error)
	// Gets a Service in an Application.
	GetService(context.Context, *GetServiceRequest) (*Service, error)
	// Updates a Service in an Application.
	UpdateService(context.Context, *UpdateServiceRequest) (*longrunningpb.Operation, error)
	// Deletes a Service from an Application.
	DeleteService(context.Context, *DeleteServiceRequest) (*longrunningpb.Operation, error)
	// Lists Discovered Workloads that can be added to an Application in a host
	// project and location.
	ListDiscoveredWorkloads(context.Context, *ListDiscoveredWorkloadsRequest) (*ListDiscoveredWorkloadsResponse, error)
	// Gets a Discovered Workload in a host project and location.
	GetDiscoveredWorkload(context.Context, *GetDiscoveredWorkloadRequest) (*DiscoveredWorkload, error)
	// Lists a Discovered Workload in a host project and location, with a
	// given resource URI.
	LookupDiscoveredWorkload(context.Context, *LookupDiscoveredWorkloadRequest) (*LookupDiscoveredWorkloadResponse, error)
	// Lists Workloads in an Application.
	ListWorkloads(context.Context, *ListWorkloadsRequest) (*ListWorkloadsResponse, error)
	// Creates a Workload in an Application.
	CreateWorkload(context.Context, *CreateWorkloadRequest) (*longrunningpb.Operation, error)
	// Gets a Workload in an Application.
	GetWorkload(context.Context, *GetWorkloadRequest) (*Workload, error)
	// Updates a Workload in an Application.
	UpdateWorkload(context.Context, *UpdateWorkloadRequest) (*longrunningpb.Operation, error)
	// Deletes a Workload from an Application.
	DeleteWorkload(context.Context, *DeleteWorkloadRequest) (*longrunningpb.Operation, error)
	// Lists Applications in a host project and location.
	ListApplications(context.Context, *ListApplicationsRequest) (*ListApplicationsResponse, error)
	// Creates an Application in a host project and location.
	CreateApplication(context.Context, *CreateApplicationRequest) (*longrunningpb.Operation, error)
	// Gets an Application in a host project and location.
	GetApplication(context.Context, *GetApplicationRequest) (*Application, error)
	// Updates an Application in a host project and location.
	UpdateApplication(context.Context, *UpdateApplicationRequest) (*longrunningpb.Operation, error)
	// Deletes an Application in a host project and location.
	DeleteApplication(context.Context, *DeleteApplicationRequest) (*longrunningpb.Operation, error)
}

// UnimplementedAppHubServer should be embedded to have forward compatible implementations.
type UnimplementedAppHubServer struct {
}

func (UnimplementedAppHubServer) LookupServiceProjectAttachment(context.Context, *LookupServiceProjectAttachmentRequest) (*LookupServiceProjectAttachmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupServiceProjectAttachment not implemented")
}
func (UnimplementedAppHubServer) ListServiceProjectAttachments(context.Context, *ListServiceProjectAttachmentsRequest) (*ListServiceProjectAttachmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServiceProjectAttachments not implemented")
}
func (UnimplementedAppHubServer) CreateServiceProjectAttachment(context.Context, *CreateServiceProjectAttachmentRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServiceProjectAttachment not implemented")
}
func (UnimplementedAppHubServer) GetServiceProjectAttachment(context.Context, *GetServiceProjectAttachmentRequest) (*ServiceProjectAttachment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceProjectAttachment not implemented")
}
func (UnimplementedAppHubServer) DeleteServiceProjectAttachment(context.Context, *DeleteServiceProjectAttachmentRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServiceProjectAttachment not implemented")
}
func (UnimplementedAppHubServer) DetachServiceProjectAttachment(context.Context, *DetachServiceProjectAttachmentRequest) (*DetachServiceProjectAttachmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetachServiceProjectAttachment not implemented")
}
func (UnimplementedAppHubServer) ListDiscoveredServices(context.Context, *ListDiscoveredServicesRequest) (*ListDiscoveredServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDiscoveredServices not implemented")
}
func (UnimplementedAppHubServer) GetDiscoveredService(context.Context, *GetDiscoveredServiceRequest) (*DiscoveredService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiscoveredService not implemented")
}
func (UnimplementedAppHubServer) LookupDiscoveredService(context.Context, *LookupDiscoveredServiceRequest) (*LookupDiscoveredServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupDiscoveredService not implemented")
}
func (UnimplementedAppHubServer) ListServices(context.Context, *ListServicesRequest) (*ListServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServices not implemented")
}
func (UnimplementedAppHubServer) CreateService(context.Context, *CreateServiceRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateService not implemented")
}
func (UnimplementedAppHubServer) GetService(context.Context, *GetServiceRequest) (*Service, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetService not implemented")
}
func (UnimplementedAppHubServer) UpdateService(context.Context, *UpdateServiceRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateService not implemented")
}
func (UnimplementedAppHubServer) DeleteService(context.Context, *DeleteServiceRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteService not implemented")
}
func (UnimplementedAppHubServer) ListDiscoveredWorkloads(context.Context, *ListDiscoveredWorkloadsRequest) (*ListDiscoveredWorkloadsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDiscoveredWorkloads not implemented")
}
func (UnimplementedAppHubServer) GetDiscoveredWorkload(context.Context, *GetDiscoveredWorkloadRequest) (*DiscoveredWorkload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiscoveredWorkload not implemented")
}
func (UnimplementedAppHubServer) LookupDiscoveredWorkload(context.Context, *LookupDiscoveredWorkloadRequest) (*LookupDiscoveredWorkloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupDiscoveredWorkload not implemented")
}
func (UnimplementedAppHubServer) ListWorkloads(context.Context, *ListWorkloadsRequest) (*ListWorkloadsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkloads not implemented")
}
func (UnimplementedAppHubServer) CreateWorkload(context.Context, *CreateWorkloadRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkload not implemented")
}
func (UnimplementedAppHubServer) GetWorkload(context.Context, *GetWorkloadRequest) (*Workload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkload not implemented")
}
func (UnimplementedAppHubServer) UpdateWorkload(context.Context, *UpdateWorkloadRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkload not implemented")
}
func (UnimplementedAppHubServer) DeleteWorkload(context.Context, *DeleteWorkloadRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkload not implemented")
}
func (UnimplementedAppHubServer) ListApplications(context.Context, *ListApplicationsRequest) (*ListApplicationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApplications not implemented")
}
func (UnimplementedAppHubServer) CreateApplication(context.Context, *CreateApplicationRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApplication not implemented")
}
func (UnimplementedAppHubServer) GetApplication(context.Context, *GetApplicationRequest) (*Application, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplication not implemented")
}
func (UnimplementedAppHubServer) UpdateApplication(context.Context, *UpdateApplicationRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApplication not implemented")
}
func (UnimplementedAppHubServer) DeleteApplication(context.Context, *DeleteApplicationRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApplication not implemented")
}

// UnsafeAppHubServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppHubServer will
// result in compilation errors.
type UnsafeAppHubServer interface {
	mustEmbedUnimplementedAppHubServer()
}

func RegisterAppHubServer(s grpc.ServiceRegistrar, srv AppHubServer) {
	s.RegisterService(&AppHub_ServiceDesc, srv)
}

func _AppHub_LookupServiceProjectAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupServiceProjectAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppHubServer).LookupServiceProjectAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppHub_LookupServiceProjectAttachment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppHubServer).LookupServiceProjectAttachment(ctx, req.(*LookupServiceProjectAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppHub_ListServiceProjectAttachments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServiceProjectAttachmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppHubServer).ListServiceProjectAttachments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppHub_ListServiceProjectAttachments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppHubServer).ListServiceProjectAttachments(ctx, req.(*ListServiceProjectAttachmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppHub_CreateServiceProjectAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceProjectAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppHubServer).CreateServiceProjectAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppHub_CreateServiceProjectAttachment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppHubServer).CreateServiceProjectAttachment(ctx, req.(*CreateServiceProjectAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppHub_GetServiceProjectAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceProjectAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppHubServer).GetServiceProjectAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppHub_GetServiceProjectAttachment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppHubServer).GetServiceProjectAttachment(ctx, req.(*GetServiceProjectAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppHub_DeleteServiceProjectAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServiceProjectAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppHubServer).DeleteServiceProjectAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppHub_DeleteServiceProjectAttachment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppHubServer).DeleteServiceProjectAttachment(ctx, req.(*DeleteServiceProjectAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppHub_DetachServiceProjectAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetachServiceProjectAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppHubServer).DetachServiceProjectAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppHub_DetachServiceProjectAttachment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppHubServer).DetachServiceProjectAttachment(ctx, req.(*DetachServiceProjectAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppHub_ListDiscoveredServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDiscoveredServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppHubServer).ListDiscoveredServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppHub_ListDiscoveredServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppHubServer).ListDiscoveredServices(ctx, req.(*ListDiscoveredServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppHub_GetDiscoveredService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiscoveredServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppHubServer).GetDiscoveredService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppHub_GetDiscoveredService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppHubServer).GetDiscoveredService(ctx, req.(*GetDiscoveredServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppHub_LookupDiscoveredService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupDiscoveredServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppHubServer).LookupDiscoveredService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppHub_LookupDiscoveredService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppHubServer).LookupDiscoveredService(ctx, req.(*LookupDiscoveredServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppHub_ListServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppHubServer).ListServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppHub_ListServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppHubServer).ListServices(ctx, req.(*ListServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppHub_CreateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppHubServer).CreateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppHub_CreateService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppHubServer).CreateService(ctx, req.(*CreateServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppHub_GetService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppHubServer).GetService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppHub_GetService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppHubServer).GetService(ctx, req.(*GetServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppHub_UpdateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppHubServer).UpdateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppHub_UpdateService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppHubServer).UpdateService(ctx, req.(*UpdateServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppHub_DeleteService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppHubServer).DeleteService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppHub_DeleteService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppHubServer).DeleteService(ctx, req.(*DeleteServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppHub_ListDiscoveredWorkloads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDiscoveredWorkloadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppHubServer).ListDiscoveredWorkloads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppHub_ListDiscoveredWorkloads_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppHubServer).ListDiscoveredWorkloads(ctx, req.(*ListDiscoveredWorkloadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppHub_GetDiscoveredWorkload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiscoveredWorkloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppHubServer).GetDiscoveredWorkload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppHub_GetDiscoveredWorkload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppHubServer).GetDiscoveredWorkload(ctx, req.(*GetDiscoveredWorkloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppHub_LookupDiscoveredWorkload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupDiscoveredWorkloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppHubServer).LookupDiscoveredWorkload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppHub_LookupDiscoveredWorkload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppHubServer).LookupDiscoveredWorkload(ctx, req.(*LookupDiscoveredWorkloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppHub_ListWorkloads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkloadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppHubServer).ListWorkloads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppHub_ListWorkloads_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppHubServer).ListWorkloads(ctx, req.(*ListWorkloadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppHub_CreateWorkload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppHubServer).CreateWorkload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppHub_CreateWorkload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppHubServer).CreateWorkload(ctx, req.(*CreateWorkloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppHub_GetWorkload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppHubServer).GetWorkload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppHub_GetWorkload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppHubServer).GetWorkload(ctx, req.(*GetWorkloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppHub_UpdateWorkload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppHubServer).UpdateWorkload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppHub_UpdateWorkload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppHubServer).UpdateWorkload(ctx, req.(*UpdateWorkloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppHub_DeleteWorkload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorkloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppHubServer).DeleteWorkload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppHub_DeleteWorkload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppHubServer).DeleteWorkload(ctx, req.(*DeleteWorkloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppHub_ListApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApplicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppHubServer).ListApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppHub_ListApplications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppHubServer).ListApplications(ctx, req.(*ListApplicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppHub_CreateApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppHubServer).CreateApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppHub_CreateApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppHubServer).CreateApplication(ctx, req.(*CreateApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppHub_GetApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppHubServer).GetApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppHub_GetApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppHubServer).GetApplication(ctx, req.(*GetApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppHub_UpdateApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppHubServer).UpdateApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppHub_UpdateApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppHubServer).UpdateApplication(ctx, req.(*UpdateApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppHub_DeleteApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppHubServer).DeleteApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppHub_DeleteApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppHubServer).DeleteApplication(ctx, req.(*DeleteApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppHub_ServiceDesc is the grpc.ServiceDesc for AppHub service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppHub_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.apphub.v1.AppHub",
	HandlerType: (*AppHubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LookupServiceProjectAttachment",
			Handler:    _AppHub_LookupServiceProjectAttachment_Handler,
		},
		{
			MethodName: "ListServiceProjectAttachments",
			Handler:    _AppHub_ListServiceProjectAttachments_Handler,
		},
		{
			MethodName: "CreateServiceProjectAttachment",
			Handler:    _AppHub_CreateServiceProjectAttachment_Handler,
		},
		{
			MethodName: "GetServiceProjectAttachment",
			Handler:    _AppHub_GetServiceProjectAttachment_Handler,
		},
		{
			MethodName: "DeleteServiceProjectAttachment",
			Handler:    _AppHub_DeleteServiceProjectAttachment_Handler,
		},
		{
			MethodName: "DetachServiceProjectAttachment",
			Handler:    _AppHub_DetachServiceProjectAttachment_Handler,
		},
		{
			MethodName: "ListDiscoveredServices",
			Handler:    _AppHub_ListDiscoveredServices_Handler,
		},
		{
			MethodName: "GetDiscoveredService",
			Handler:    _AppHub_GetDiscoveredService_Handler,
		},
		{
			MethodName: "LookupDiscoveredService",
			Handler:    _AppHub_LookupDiscoveredService_Handler,
		},
		{
			MethodName: "ListServices",
			Handler:    _AppHub_ListServices_Handler,
		},
		{
			MethodName: "CreateService",
			Handler:    _AppHub_CreateService_Handler,
		},
		{
			MethodName: "GetService",
			Handler:    _AppHub_GetService_Handler,
		},
		{
			MethodName: "UpdateService",
			Handler:    _AppHub_UpdateService_Handler,
		},
		{
			MethodName: "DeleteService",
			Handler:    _AppHub_DeleteService_Handler,
		},
		{
			MethodName: "ListDiscoveredWorkloads",
			Handler:    _AppHub_ListDiscoveredWorkloads_Handler,
		},
		{
			MethodName: "GetDiscoveredWorkload",
			Handler:    _AppHub_GetDiscoveredWorkload_Handler,
		},
		{
			MethodName: "LookupDiscoveredWorkload",
			Handler:    _AppHub_LookupDiscoveredWorkload_Handler,
		},
		{
			MethodName: "ListWorkloads",
			Handler:    _AppHub_ListWorkloads_Handler,
		},
		{
			MethodName: "CreateWorkload",
			Handler:    _AppHub_CreateWorkload_Handler,
		},
		{
			MethodName: "GetWorkload",
			Handler:    _AppHub_GetWorkload_Handler,
		},
		{
			MethodName: "UpdateWorkload",
			Handler:    _AppHub_UpdateWorkload_Handler,
		},
		{
			MethodName: "DeleteWorkload",
			Handler:    _AppHub_DeleteWorkload_Handler,
		},
		{
			MethodName: "ListApplications",
			Handler:    _AppHub_ListApplications_Handler,
		},
		{
			MethodName: "CreateApplication",
			Handler:    _AppHub_CreateApplication_Handler,
		},
		{
			MethodName: "GetApplication",
			Handler:    _AppHub_GetApplication_Handler,
		},
		{
			MethodName: "UpdateApplication",
			Handler:    _AppHub_UpdateApplication_Handler,
		},
		{
			MethodName: "DeleteApplication",
			Handler:    _AppHub_DeleteApplication_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/apphub/v1/apphub_service.proto",
}
