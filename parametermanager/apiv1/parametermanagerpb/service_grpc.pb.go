// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/parametermanager/v1/service.proto

package parametermanagerpb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ParameterManager_ListParameters_FullMethodName         = "/google.cloud.parametermanager.v1.ParameterManager/ListParameters"
	ParameterManager_GetParameter_FullMethodName           = "/google.cloud.parametermanager.v1.ParameterManager/GetParameter"
	ParameterManager_CreateParameter_FullMethodName        = "/google.cloud.parametermanager.v1.ParameterManager/CreateParameter"
	ParameterManager_UpdateParameter_FullMethodName        = "/google.cloud.parametermanager.v1.ParameterManager/UpdateParameter"
	ParameterManager_DeleteParameter_FullMethodName        = "/google.cloud.parametermanager.v1.ParameterManager/DeleteParameter"
	ParameterManager_ListParameterVersions_FullMethodName  = "/google.cloud.parametermanager.v1.ParameterManager/ListParameterVersions"
	ParameterManager_GetParameterVersion_FullMethodName    = "/google.cloud.parametermanager.v1.ParameterManager/GetParameterVersion"
	ParameterManager_RenderParameterVersion_FullMethodName = "/google.cloud.parametermanager.v1.ParameterManager/RenderParameterVersion"
	ParameterManager_CreateParameterVersion_FullMethodName = "/google.cloud.parametermanager.v1.ParameterManager/CreateParameterVersion"
	ParameterManager_UpdateParameterVersion_FullMethodName = "/google.cloud.parametermanager.v1.ParameterManager/UpdateParameterVersion"
	ParameterManager_DeleteParameterVersion_FullMethodName = "/google.cloud.parametermanager.v1.ParameterManager/DeleteParameterVersion"
)

// ParameterManagerClient is the client API for ParameterManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ParameterManagerClient interface {
	// Lists Parameters in a given project and location.
	ListParameters(ctx context.Context, in *ListParametersRequest, opts ...grpc.CallOption) (*ListParametersResponse, error)
	// Gets details of a single Parameter.
	GetParameter(ctx context.Context, in *GetParameterRequest, opts ...grpc.CallOption) (*Parameter, error)
	// Creates a new Parameter in a given project and location.
	CreateParameter(ctx context.Context, in *CreateParameterRequest, opts ...grpc.CallOption) (*Parameter, error)
	// Updates a single Parameter.
	UpdateParameter(ctx context.Context, in *UpdateParameterRequest, opts ...grpc.CallOption) (*Parameter, error)
	// Deletes a single Parameter.
	DeleteParameter(ctx context.Context, in *DeleteParameterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Lists ParameterVersions in a given project, location, and parameter.
	ListParameterVersions(ctx context.Context, in *ListParameterVersionsRequest, opts ...grpc.CallOption) (*ListParameterVersionsResponse, error)
	// Gets details of a single ParameterVersion.
	GetParameterVersion(ctx context.Context, in *GetParameterVersionRequest, opts ...grpc.CallOption) (*ParameterVersion, error)
	// Gets rendered version of a ParameterVersion.
	RenderParameterVersion(ctx context.Context, in *RenderParameterVersionRequest, opts ...grpc.CallOption) (*RenderParameterVersionResponse, error)
	// Creates a new ParameterVersion in a given project, location, and parameter.
	CreateParameterVersion(ctx context.Context, in *CreateParameterVersionRequest, opts ...grpc.CallOption) (*ParameterVersion, error)
	// Updates a single ParameterVersion.
	UpdateParameterVersion(ctx context.Context, in *UpdateParameterVersionRequest, opts ...grpc.CallOption) (*ParameterVersion, error)
	// Deletes a single ParameterVersion.
	DeleteParameterVersion(ctx context.Context, in *DeleteParameterVersionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type parameterManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewParameterManagerClient(cc grpc.ClientConnInterface) ParameterManagerClient {
	return &parameterManagerClient{cc}
}

func (c *parameterManagerClient) ListParameters(ctx context.Context, in *ListParametersRequest, opts ...grpc.CallOption) (*ListParametersResponse, error) {
	out := new(ListParametersResponse)
	err := c.cc.Invoke(ctx, ParameterManager_ListParameters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parameterManagerClient) GetParameter(ctx context.Context, in *GetParameterRequest, opts ...grpc.CallOption) (*Parameter, error) {
	out := new(Parameter)
	err := c.cc.Invoke(ctx, ParameterManager_GetParameter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parameterManagerClient) CreateParameter(ctx context.Context, in *CreateParameterRequest, opts ...grpc.CallOption) (*Parameter, error) {
	out := new(Parameter)
	err := c.cc.Invoke(ctx, ParameterManager_CreateParameter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parameterManagerClient) UpdateParameter(ctx context.Context, in *UpdateParameterRequest, opts ...grpc.CallOption) (*Parameter, error) {
	out := new(Parameter)
	err := c.cc.Invoke(ctx, ParameterManager_UpdateParameter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parameterManagerClient) DeleteParameter(ctx context.Context, in *DeleteParameterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ParameterManager_DeleteParameter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parameterManagerClient) ListParameterVersions(ctx context.Context, in *ListParameterVersionsRequest, opts ...grpc.CallOption) (*ListParameterVersionsResponse, error) {
	out := new(ListParameterVersionsResponse)
	err := c.cc.Invoke(ctx, ParameterManager_ListParameterVersions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parameterManagerClient) GetParameterVersion(ctx context.Context, in *GetParameterVersionRequest, opts ...grpc.CallOption) (*ParameterVersion, error) {
	out := new(ParameterVersion)
	err := c.cc.Invoke(ctx, ParameterManager_GetParameterVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parameterManagerClient) RenderParameterVersion(ctx context.Context, in *RenderParameterVersionRequest, opts ...grpc.CallOption) (*RenderParameterVersionResponse, error) {
	out := new(RenderParameterVersionResponse)
	err := c.cc.Invoke(ctx, ParameterManager_RenderParameterVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parameterManagerClient) CreateParameterVersion(ctx context.Context, in *CreateParameterVersionRequest, opts ...grpc.CallOption) (*ParameterVersion, error) {
	out := new(ParameterVersion)
	err := c.cc.Invoke(ctx, ParameterManager_CreateParameterVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parameterManagerClient) UpdateParameterVersion(ctx context.Context, in *UpdateParameterVersionRequest, opts ...grpc.CallOption) (*ParameterVersion, error) {
	out := new(ParameterVersion)
	err := c.cc.Invoke(ctx, ParameterManager_UpdateParameterVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parameterManagerClient) DeleteParameterVersion(ctx context.Context, in *DeleteParameterVersionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ParameterManager_DeleteParameterVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ParameterManagerServer is the server API for ParameterManager service.
// All implementations should embed UnimplementedParameterManagerServer
// for forward compatibility
type ParameterManagerServer interface {
	// Lists Parameters in a given project and location.
	ListParameters(context.Context, *ListParametersRequest) (*ListParametersResponse, error)
	// Gets details of a single Parameter.
	GetParameter(context.Context, *GetParameterRequest) (*Parameter, error)
	// Creates a new Parameter in a given project and location.
	CreateParameter(context.Context, *CreateParameterRequest) (*Parameter, error)
	// Updates a single Parameter.
	UpdateParameter(context.Context, *UpdateParameterRequest) (*Parameter, error)
	// Deletes a single Parameter.
	DeleteParameter(context.Context, *DeleteParameterRequest) (*emptypb.Empty, error)
	// Lists ParameterVersions in a given project, location, and parameter.
	ListParameterVersions(context.Context, *ListParameterVersionsRequest) (*ListParameterVersionsResponse, error)
	// Gets details of a single ParameterVersion.
	GetParameterVersion(context.Context, *GetParameterVersionRequest) (*ParameterVersion, error)
	// Gets rendered version of a ParameterVersion.
	RenderParameterVersion(context.Context, *RenderParameterVersionRequest) (*RenderParameterVersionResponse, error)
	// Creates a new ParameterVersion in a given project, location, and parameter.
	CreateParameterVersion(context.Context, *CreateParameterVersionRequest) (*ParameterVersion, error)
	// Updates a single ParameterVersion.
	UpdateParameterVersion(context.Context, *UpdateParameterVersionRequest) (*ParameterVersion, error)
	// Deletes a single ParameterVersion.
	DeleteParameterVersion(context.Context, *DeleteParameterVersionRequest) (*emptypb.Empty, error)
}

// UnimplementedParameterManagerServer should be embedded to have forward compatible implementations.
type UnimplementedParameterManagerServer struct {
}

func (UnimplementedParameterManagerServer) ListParameters(context.Context, *ListParametersRequest) (*ListParametersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListParameters not implemented")
}
func (UnimplementedParameterManagerServer) GetParameter(context.Context, *GetParameterRequest) (*Parameter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParameter not implemented")
}
func (UnimplementedParameterManagerServer) CreateParameter(context.Context, *CreateParameterRequest) (*Parameter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateParameter not implemented")
}
func (UnimplementedParameterManagerServer) UpdateParameter(context.Context, *UpdateParameterRequest) (*Parameter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParameter not implemented")
}
func (UnimplementedParameterManagerServer) DeleteParameter(context.Context, *DeleteParameterRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteParameter not implemented")
}
func (UnimplementedParameterManagerServer) ListParameterVersions(context.Context, *ListParameterVersionsRequest) (*ListParameterVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListParameterVersions not implemented")
}
func (UnimplementedParameterManagerServer) GetParameterVersion(context.Context, *GetParameterVersionRequest) (*ParameterVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParameterVersion not implemented")
}
func (UnimplementedParameterManagerServer) RenderParameterVersion(context.Context, *RenderParameterVersionRequest) (*RenderParameterVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderParameterVersion not implemented")
}
func (UnimplementedParameterManagerServer) CreateParameterVersion(context.Context, *CreateParameterVersionRequest) (*ParameterVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateParameterVersion not implemented")
}
func (UnimplementedParameterManagerServer) UpdateParameterVersion(context.Context, *UpdateParameterVersionRequest) (*ParameterVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParameterVersion not implemented")
}
func (UnimplementedParameterManagerServer) DeleteParameterVersion(context.Context, *DeleteParameterVersionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteParameterVersion not implemented")
}

// UnsafeParameterManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ParameterManagerServer will
// result in compilation errors.
type UnsafeParameterManagerServer interface {
	mustEmbedUnimplementedParameterManagerServer()
}

func RegisterParameterManagerServer(s grpc.ServiceRegistrar, srv ParameterManagerServer) {
	s.RegisterService(&ParameterManager_ServiceDesc, srv)
}

func _ParameterManager_ListParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListParametersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParameterManagerServer).ListParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParameterManager_ListParameters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParameterManagerServer).ListParameters(ctx, req.(*ListParametersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParameterManager_GetParameter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetParameterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParameterManagerServer).GetParameter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParameterManager_GetParameter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParameterManagerServer).GetParameter(ctx, req.(*GetParameterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParameterManager_CreateParameter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateParameterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParameterManagerServer).CreateParameter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParameterManager_CreateParameter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParameterManagerServer).CreateParameter(ctx, req.(*CreateParameterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParameterManager_UpdateParameter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateParameterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParameterManagerServer).UpdateParameter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParameterManager_UpdateParameter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParameterManagerServer).UpdateParameter(ctx, req.(*UpdateParameterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParameterManager_DeleteParameter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteParameterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParameterManagerServer).DeleteParameter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParameterManager_DeleteParameter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParameterManagerServer).DeleteParameter(ctx, req.(*DeleteParameterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParameterManager_ListParameterVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListParameterVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParameterManagerServer).ListParameterVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParameterManager_ListParameterVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParameterManagerServer).ListParameterVersions(ctx, req.(*ListParameterVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParameterManager_GetParameterVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetParameterVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParameterManagerServer).GetParameterVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParameterManager_GetParameterVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParameterManagerServer).GetParameterVersion(ctx, req.(*GetParameterVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParameterManager_RenderParameterVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderParameterVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParameterManagerServer).RenderParameterVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParameterManager_RenderParameterVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParameterManagerServer).RenderParameterVersion(ctx, req.(*RenderParameterVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParameterManager_CreateParameterVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateParameterVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParameterManagerServer).CreateParameterVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParameterManager_CreateParameterVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParameterManagerServer).CreateParameterVersion(ctx, req.(*CreateParameterVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParameterManager_UpdateParameterVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateParameterVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParameterManagerServer).UpdateParameterVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParameterManager_UpdateParameterVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParameterManagerServer).UpdateParameterVersion(ctx, req.(*UpdateParameterVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParameterManager_DeleteParameterVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteParameterVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParameterManagerServer).DeleteParameterVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParameterManager_DeleteParameterVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParameterManagerServer).DeleteParameterVersion(ctx, req.(*DeleteParameterVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ParameterManager_ServiceDesc is the grpc.ServiceDesc for ParameterManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ParameterManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.parametermanager.v1.ParameterManager",
	HandlerType: (*ParameterManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListParameters",
			Handler:    _ParameterManager_ListParameters_Handler,
		},
		{
			MethodName: "GetParameter",
			Handler:    _ParameterManager_GetParameter_Handler,
		},
		{
			MethodName: "CreateParameter",
			Handler:    _ParameterManager_CreateParameter_Handler,
		},
		{
			MethodName: "UpdateParameter",
			Handler:    _ParameterManager_UpdateParameter_Handler,
		},
		{
			MethodName: "DeleteParameter",
			Handler:    _ParameterManager_DeleteParameter_Handler,
		},
		{
			MethodName: "ListParameterVersions",
			Handler:    _ParameterManager_ListParameterVersions_Handler,
		},
		{
			MethodName: "GetParameterVersion",
			Handler:    _ParameterManager_GetParameterVersion_Handler,
		},
		{
			MethodName: "RenderParameterVersion",
			Handler:    _ParameterManager_RenderParameterVersion_Handler,
		},
		{
			MethodName: "CreateParameterVersion",
			Handler:    _ParameterManager_CreateParameterVersion_Handler,
		},
		{
			MethodName: "UpdateParameterVersion",
			Handler:    _ParameterManager_UpdateParameterVersion_Handler,
		},
		{
			MethodName: "DeleteParameterVersion",
			Handler:    _ParameterManager_DeleteParameterVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/parametermanager/v1/service.proto",
}
