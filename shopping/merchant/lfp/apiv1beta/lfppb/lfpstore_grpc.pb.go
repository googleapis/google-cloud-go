// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/shopping/merchant/lfp/v1beta/lfpstore.proto

package lfppb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LfpStoreService_GetLfpStore_FullMethodName    = "/google.shopping.merchant.lfp.v1beta.LfpStoreService/GetLfpStore"
	LfpStoreService_InsertLfpStore_FullMethodName = "/google.shopping.merchant.lfp.v1beta.LfpStoreService/InsertLfpStore"
	LfpStoreService_DeleteLfpStore_FullMethodName = "/google.shopping.merchant.lfp.v1beta.LfpStoreService/DeleteLfpStore"
	LfpStoreService_ListLfpStores_FullMethodName  = "/google.shopping.merchant.lfp.v1beta.LfpStoreService/ListLfpStores"
)

// LfpStoreServiceClient is the client API for LfpStoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LfpStoreServiceClient interface {
	// Retrieves information about a store.
	GetLfpStore(ctx context.Context, in *GetLfpStoreRequest, opts ...grpc.CallOption) (*LfpStore, error)
	// Inserts a store for the target merchant. If the store with the same store
	// code already exists, it will be replaced.
	InsertLfpStore(ctx context.Context, in *InsertLfpStoreRequest, opts ...grpc.CallOption) (*LfpStore, error)
	// Deletes a store for a target merchant.
	DeleteLfpStore(ctx context.Context, in *DeleteLfpStoreRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Lists the stores of the target merchant, specified by the filter in
	// `ListLfpStoresRequest`.
	ListLfpStores(ctx context.Context, in *ListLfpStoresRequest, opts ...grpc.CallOption) (*ListLfpStoresResponse, error)
}

type lfpStoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLfpStoreServiceClient(cc grpc.ClientConnInterface) LfpStoreServiceClient {
	return &lfpStoreServiceClient{cc}
}

func (c *lfpStoreServiceClient) GetLfpStore(ctx context.Context, in *GetLfpStoreRequest, opts ...grpc.CallOption) (*LfpStore, error) {
	out := new(LfpStore)
	err := c.cc.Invoke(ctx, LfpStoreService_GetLfpStore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lfpStoreServiceClient) InsertLfpStore(ctx context.Context, in *InsertLfpStoreRequest, opts ...grpc.CallOption) (*LfpStore, error) {
	out := new(LfpStore)
	err := c.cc.Invoke(ctx, LfpStoreService_InsertLfpStore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lfpStoreServiceClient) DeleteLfpStore(ctx context.Context, in *DeleteLfpStoreRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, LfpStoreService_DeleteLfpStore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lfpStoreServiceClient) ListLfpStores(ctx context.Context, in *ListLfpStoresRequest, opts ...grpc.CallOption) (*ListLfpStoresResponse, error) {
	out := new(ListLfpStoresResponse)
	err := c.cc.Invoke(ctx, LfpStoreService_ListLfpStores_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LfpStoreServiceServer is the server API for LfpStoreService service.
// All implementations should embed UnimplementedLfpStoreServiceServer
// for forward compatibility
type LfpStoreServiceServer interface {
	// Retrieves information about a store.
	GetLfpStore(context.Context, *GetLfpStoreRequest) (*LfpStore, error)
	// Inserts a store for the target merchant. If the store with the same store
	// code already exists, it will be replaced.
	InsertLfpStore(context.Context, *InsertLfpStoreRequest) (*LfpStore, error)
	// Deletes a store for a target merchant.
	DeleteLfpStore(context.Context, *DeleteLfpStoreRequest) (*emptypb.Empty, error)
	// Lists the stores of the target merchant, specified by the filter in
	// `ListLfpStoresRequest`.
	ListLfpStores(context.Context, *ListLfpStoresRequest) (*ListLfpStoresResponse, error)
}

// UnimplementedLfpStoreServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLfpStoreServiceServer struct {
}

func (UnimplementedLfpStoreServiceServer) GetLfpStore(context.Context, *GetLfpStoreRequest) (*LfpStore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLfpStore not implemented")
}
func (UnimplementedLfpStoreServiceServer) InsertLfpStore(context.Context, *InsertLfpStoreRequest) (*LfpStore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertLfpStore not implemented")
}
func (UnimplementedLfpStoreServiceServer) DeleteLfpStore(context.Context, *DeleteLfpStoreRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLfpStore not implemented")
}
func (UnimplementedLfpStoreServiceServer) ListLfpStores(context.Context, *ListLfpStoresRequest) (*ListLfpStoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLfpStores not implemented")
}

// UnsafeLfpStoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LfpStoreServiceServer will
// result in compilation errors.
type UnsafeLfpStoreServiceServer interface {
	mustEmbedUnimplementedLfpStoreServiceServer()
}

func RegisterLfpStoreServiceServer(s grpc.ServiceRegistrar, srv LfpStoreServiceServer) {
	s.RegisterService(&LfpStoreService_ServiceDesc, srv)
}

func _LfpStoreService_GetLfpStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLfpStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LfpStoreServiceServer).GetLfpStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LfpStoreService_GetLfpStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LfpStoreServiceServer).GetLfpStore(ctx, req.(*GetLfpStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LfpStoreService_InsertLfpStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertLfpStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LfpStoreServiceServer).InsertLfpStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LfpStoreService_InsertLfpStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LfpStoreServiceServer).InsertLfpStore(ctx, req.(*InsertLfpStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LfpStoreService_DeleteLfpStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLfpStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LfpStoreServiceServer).DeleteLfpStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LfpStoreService_DeleteLfpStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LfpStoreServiceServer).DeleteLfpStore(ctx, req.(*DeleteLfpStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LfpStoreService_ListLfpStores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLfpStoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LfpStoreServiceServer).ListLfpStores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LfpStoreService_ListLfpStores_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LfpStoreServiceServer).ListLfpStores(ctx, req.(*ListLfpStoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LfpStoreService_ServiceDesc is the grpc.ServiceDesc for LfpStoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LfpStoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.shopping.merchant.lfp.v1beta.LfpStoreService",
	HandlerType: (*LfpStoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLfpStore",
			Handler:    _LfpStoreService_GetLfpStore_Handler,
		},
		{
			MethodName: "InsertLfpStore",
			Handler:    _LfpStoreService_InsertLfpStore_Handler,
		},
		{
			MethodName: "DeleteLfpStore",
			Handler:    _LfpStoreService_DeleteLfpStore_Handler,
		},
		{
			MethodName: "ListLfpStores",
			Handler:    _LfpStoreService_ListLfpStores_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/shopping/merchant/lfp/v1beta/lfpstore.proto",
}
