// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/shopping/merchant/lfp/v1beta/lfpmerchantstate.proto

package lfppb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LfpMerchantStateService_GetLfpMerchantState_FullMethodName = "/google.shopping.merchant.lfp.v1beta.LfpMerchantStateService/GetLfpMerchantState"
)

// LfpMerchantStateServiceClient is the client API for LfpMerchantStateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LfpMerchantStateServiceClient interface {
	// Gets the LFP state of a merchant
	GetLfpMerchantState(ctx context.Context, in *GetLfpMerchantStateRequest, opts ...grpc.CallOption) (*LfpMerchantState, error)
}

type lfpMerchantStateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLfpMerchantStateServiceClient(cc grpc.ClientConnInterface) LfpMerchantStateServiceClient {
	return &lfpMerchantStateServiceClient{cc}
}

func (c *lfpMerchantStateServiceClient) GetLfpMerchantState(ctx context.Context, in *GetLfpMerchantStateRequest, opts ...grpc.CallOption) (*LfpMerchantState, error) {
	out := new(LfpMerchantState)
	err := c.cc.Invoke(ctx, LfpMerchantStateService_GetLfpMerchantState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LfpMerchantStateServiceServer is the server API for LfpMerchantStateService service.
// All implementations should embed UnimplementedLfpMerchantStateServiceServer
// for forward compatibility
type LfpMerchantStateServiceServer interface {
	// Gets the LFP state of a merchant
	GetLfpMerchantState(context.Context, *GetLfpMerchantStateRequest) (*LfpMerchantState, error)
}

// UnimplementedLfpMerchantStateServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLfpMerchantStateServiceServer struct {
}

func (UnimplementedLfpMerchantStateServiceServer) GetLfpMerchantState(context.Context, *GetLfpMerchantStateRequest) (*LfpMerchantState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLfpMerchantState not implemented")
}

// UnsafeLfpMerchantStateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LfpMerchantStateServiceServer will
// result in compilation errors.
type UnsafeLfpMerchantStateServiceServer interface {
	mustEmbedUnimplementedLfpMerchantStateServiceServer()
}

func RegisterLfpMerchantStateServiceServer(s grpc.ServiceRegistrar, srv LfpMerchantStateServiceServer) {
	s.RegisterService(&LfpMerchantStateService_ServiceDesc, srv)
}

func _LfpMerchantStateService_GetLfpMerchantState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLfpMerchantStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LfpMerchantStateServiceServer).GetLfpMerchantState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LfpMerchantStateService_GetLfpMerchantState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LfpMerchantStateServiceServer).GetLfpMerchantState(ctx, req.(*GetLfpMerchantStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LfpMerchantStateService_ServiceDesc is the grpc.ServiceDesc for LfpMerchantStateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LfpMerchantStateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.shopping.merchant.lfp.v1beta.LfpMerchantStateService",
	HandlerType: (*LfpMerchantStateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLfpMerchantState",
			Handler:    _LfpMerchantStateService_GetLfpMerchantState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/shopping/merchant/lfp/v1beta/lfpmerchantstate.proto",
}
