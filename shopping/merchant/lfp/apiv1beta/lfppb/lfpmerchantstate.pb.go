// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.3
// source: google/shopping/merchant/lfp/v1beta/lfpmerchantstate.proto

package lfppb

import (
	context "context"
	reflect "reflect"
	sync "sync"

	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The state of matching `LfpStore` to a Google Business Profile listing.
type LfpMerchantState_LfpStoreState_StoreMatchingState int32

const (
	// Store matching state unspecified.
	LfpMerchantState_LfpStoreState_STORE_MATCHING_STATE_UNSPECIFIED LfpMerchantState_LfpStoreState_StoreMatchingState = 0
	// The `LfpStore` is successfully matched with a Google Business Profile
	// store.
	LfpMerchantState_LfpStoreState_STORE_MATCHING_STATE_MATCHED LfpMerchantState_LfpStoreState_StoreMatchingState = 1
	// The `LfpStore` is not matched with a Google Business Profile store.
	LfpMerchantState_LfpStoreState_STORE_MATCHING_STATE_FAILED LfpMerchantState_LfpStoreState_StoreMatchingState = 2
)

// Enum value maps for LfpMerchantState_LfpStoreState_StoreMatchingState.
var (
	LfpMerchantState_LfpStoreState_StoreMatchingState_name = map[int32]string{
		0: "STORE_MATCHING_STATE_UNSPECIFIED",
		1: "STORE_MATCHING_STATE_MATCHED",
		2: "STORE_MATCHING_STATE_FAILED",
	}
	LfpMerchantState_LfpStoreState_StoreMatchingState_value = map[string]int32{
		"STORE_MATCHING_STATE_UNSPECIFIED": 0,
		"STORE_MATCHING_STATE_MATCHED":     1,
		"STORE_MATCHING_STATE_FAILED":      2,
	}
)

func (x LfpMerchantState_LfpStoreState_StoreMatchingState) Enum() *LfpMerchantState_LfpStoreState_StoreMatchingState {
	p := new(LfpMerchantState_LfpStoreState_StoreMatchingState)
	*p = x
	return p
}

func (x LfpMerchantState_LfpStoreState_StoreMatchingState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LfpMerchantState_LfpStoreState_StoreMatchingState) Descriptor() protoreflect.EnumDescriptor {
	return file_google_shopping_merchant_lfp_v1beta_lfpmerchantstate_proto_enumTypes[0].Descriptor()
}

func (LfpMerchantState_LfpStoreState_StoreMatchingState) Type() protoreflect.EnumType {
	return &file_google_shopping_merchant_lfp_v1beta_lfpmerchantstate_proto_enumTypes[0]
}

func (x LfpMerchantState_LfpStoreState_StoreMatchingState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LfpMerchantState_LfpStoreState_StoreMatchingState.Descriptor instead.
func (LfpMerchantState_LfpStoreState_StoreMatchingState) EnumDescriptor() ([]byte, []int) {
	return file_google_shopping_merchant_lfp_v1beta_lfpmerchantstate_proto_rawDescGZIP(), []int{0, 0, 0}
}

// The possible verification states for different merchant programs.
type LfpMerchantState_CountrySettings_VerificationState int32

const (
	// Verification state unspecified.
	LfpMerchantState_CountrySettings_VERIFICATION_STATE_UNSPECIFIED LfpMerchantState_CountrySettings_VerificationState = 0
	// Verification state not approved.
	LfpMerchantState_CountrySettings_VERIFICATION_STATE_NOT_APPROVED LfpMerchantState_CountrySettings_VerificationState = 1
	// Verification state in progress.
	LfpMerchantState_CountrySettings_VERIFICATION_STATE_IN_PROGRESS LfpMerchantState_CountrySettings_VerificationState = 2
	// Verification state approved.
	LfpMerchantState_CountrySettings_VERIFICATION_STATE_APPROVED LfpMerchantState_CountrySettings_VerificationState = 3
)

// Enum value maps for LfpMerchantState_CountrySettings_VerificationState.
var (
	LfpMerchantState_CountrySettings_VerificationState_name = map[int32]string{
		0: "VERIFICATION_STATE_UNSPECIFIED",
		1: "VERIFICATION_STATE_NOT_APPROVED",
		2: "VERIFICATION_STATE_IN_PROGRESS",
		3: "VERIFICATION_STATE_APPROVED",
	}
	LfpMerchantState_CountrySettings_VerificationState_value = map[string]int32{
		"VERIFICATION_STATE_UNSPECIFIED":  0,
		"VERIFICATION_STATE_NOT_APPROVED": 1,
		"VERIFICATION_STATE_IN_PROGRESS":  2,
		"VERIFICATION_STATE_APPROVED":     3,
	}
)

func (x LfpMerchantState_CountrySettings_VerificationState) Enum() *LfpMerchantState_CountrySettings_VerificationState {
	p := new(LfpMerchantState_CountrySettings_VerificationState)
	*p = x
	return p
}

func (x LfpMerchantState_CountrySettings_VerificationState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LfpMerchantState_CountrySettings_VerificationState) Descriptor() protoreflect.EnumDescriptor {
	return file_google_shopping_merchant_lfp_v1beta_lfpmerchantstate_proto_enumTypes[1].Descriptor()
}

func (LfpMerchantState_CountrySettings_VerificationState) Type() protoreflect.EnumType {
	return &file_google_shopping_merchant_lfp_v1beta_lfpmerchantstate_proto_enumTypes[1]
}

func (x LfpMerchantState_CountrySettings_VerificationState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LfpMerchantState_CountrySettings_VerificationState.Descriptor instead.
func (LfpMerchantState_CountrySettings_VerificationState) EnumDescriptor() ([]byte, []int) {
	return file_google_shopping_merchant_lfp_v1beta_lfpmerchantstate_proto_rawDescGZIP(), []int{0, 2, 0}
}

// The possible [product page
// types](https://support.google.com/merchants/topic/15148370) for a
// merchant.
type LfpMerchantState_CountrySettings_ProductPageType int32

const (
	// Product page type unspecified.
	LfpMerchantState_CountrySettings_PRODUCT_PAGE_TYPE_UNSPECIFIED LfpMerchantState_CountrySettings_ProductPageType = 0
	// Google hosted product page.
	LfpMerchantState_CountrySettings_GOOGLE_HOSTED LfpMerchantState_CountrySettings_ProductPageType = 1
	// Merchant hosted product page.
	LfpMerchantState_CountrySettings_MERCHANT_HOSTED LfpMerchantState_CountrySettings_ProductPageType = 2
	// Merchant hosted store specific product page.
	LfpMerchantState_CountrySettings_MERCHANT_HOSTED_STORE_SPECIFIC LfpMerchantState_CountrySettings_ProductPageType = 3
)

// Enum value maps for LfpMerchantState_CountrySettings_ProductPageType.
var (
	LfpMerchantState_CountrySettings_ProductPageType_name = map[int32]string{
		0: "PRODUCT_PAGE_TYPE_UNSPECIFIED",
		1: "GOOGLE_HOSTED",
		2: "MERCHANT_HOSTED",
		3: "MERCHANT_HOSTED_STORE_SPECIFIC",
	}
	LfpMerchantState_CountrySettings_ProductPageType_value = map[string]int32{
		"PRODUCT_PAGE_TYPE_UNSPECIFIED":  0,
		"GOOGLE_HOSTED":                  1,
		"MERCHANT_HOSTED":                2,
		"MERCHANT_HOSTED_STORE_SPECIFIC": 3,
	}
)

func (x LfpMerchantState_CountrySettings_ProductPageType) Enum() *LfpMerchantState_CountrySettings_ProductPageType {
	p := new(LfpMerchantState_CountrySettings_ProductPageType)
	*p = x
	return p
}

func (x LfpMerchantState_CountrySettings_ProductPageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LfpMerchantState_CountrySettings_ProductPageType) Descriptor() protoreflect.EnumDescriptor {
	return file_google_shopping_merchant_lfp_v1beta_lfpmerchantstate_proto_enumTypes[2].Descriptor()
}

func (LfpMerchantState_CountrySettings_ProductPageType) Type() protoreflect.EnumType {
	return &file_google_shopping_merchant_lfp_v1beta_lfpmerchantstate_proto_enumTypes[2]
}

func (x LfpMerchantState_CountrySettings_ProductPageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LfpMerchantState_CountrySettings_ProductPageType.Descriptor instead.
func (LfpMerchantState_CountrySettings_ProductPageType) EnumDescriptor() ([]byte, []int) {
	return file_google_shopping_merchant_lfp_v1beta_lfpmerchantstate_proto_rawDescGZIP(), []int{0, 2, 1}
}

// The LFP state of a merchant.
type LfpMerchantState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier. The name of the `LfpMerchantState` resource. Format:
	// `accounts/{account}/lfpMerchantStates/{target_merchant}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Number of [GBPs](https://www.google.com/business/) this merchant has access
	// to.
	LinkedGbps int64 `protobuf:"varint,2,opt,name=linked_gbps,json=linkedGbps,proto3" json:"linked_gbps,omitempty"`
	// Output only. The state per store from the specified merchant. The field
	// will be absent if the merchant has no stores submitted through LFP.
	StoreStates []*LfpMerchantState_LfpStoreState `protobuf:"bytes,3,rep,name=store_states,json=storeStates,proto3" json:"store_states,omitempty"`
	// The inventory statistics for the merchant. The field will be absent if the
	// merchant has no inventory submitted through LFP.
	InventoryStats *LfpMerchantState_InventoryStats `protobuf:"bytes,4,opt,name=inventory_stats,json=inventoryStats,proto3" json:"inventory_stats,omitempty"`
	// Country-specific settings for the merchant.
	CountrySettings []*LfpMerchantState_CountrySettings `protobuf:"bytes,5,rep,name=country_settings,json=countrySettings,proto3" json:"country_settings,omitempty"`
}

func (x *LfpMerchantState) Reset() {
	*x = LfpMerchantState{}
	mi := &file_google_shopping_merchant_lfp_v1beta_lfpmerchantstate_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LfpMerchantState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LfpMerchantState) ProtoMessage() {}

func (x *LfpMerchantState) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_lfp_v1beta_lfpmerchantstate_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LfpMerchantState.ProtoReflect.Descriptor instead.
func (*LfpMerchantState) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_lfp_v1beta_lfpmerchantstate_proto_rawDescGZIP(), []int{0}
}

func (x *LfpMerchantState) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LfpMerchantState) GetLinkedGbps() int64 {
	if x != nil {
		return x.LinkedGbps
	}
	return 0
}

func (x *LfpMerchantState) GetStoreStates() []*LfpMerchantState_LfpStoreState {
	if x != nil {
		return x.StoreStates
	}
	return nil
}

func (x *LfpMerchantState) GetInventoryStats() *LfpMerchantState_InventoryStats {
	if x != nil {
		return x.InventoryStats
	}
	return nil
}

func (x *LfpMerchantState) GetCountrySettings() []*LfpMerchantState_CountrySettings {
	if x != nil {
		return x.CountrySettings
	}
	return nil
}

// Request message for the GetLfpMerchantState method.
type GetLfpMerchantStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the state to retrieve.
	// Format: `accounts/{account}/lfpMerchantStates/{target_merchant}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetLfpMerchantStateRequest) Reset() {
	*x = GetLfpMerchantStateRequest{}
	mi := &file_google_shopping_merchant_lfp_v1beta_lfpmerchantstate_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLfpMerchantStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLfpMerchantStateRequest) ProtoMessage() {}

func (x *GetLfpMerchantStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_lfp_v1beta_lfpmerchantstate_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLfpMerchantStateRequest.ProtoReflect.Descriptor instead.
func (*GetLfpMerchantStateRequest) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_lfp_v1beta_lfpmerchantstate_proto_rawDescGZIP(), []int{1}
}

func (x *GetLfpMerchantStateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// The state of a specific merchant's store.
type LfpMerchantState_LfpStoreState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Immutable. The identifier of this store.
	StoreCode string `protobuf:"bytes,1,opt,name=store_code,json=storeCode,proto3" json:"store_code,omitempty"`
	// Output only. The store matching state.
	MatchingState LfpMerchantState_LfpStoreState_StoreMatchingState `protobuf:"varint,2,opt,name=matching_state,json=matchingState,proto3,enum=google.shopping.merchant.lfp.v1beta.LfpMerchantState_LfpStoreState_StoreMatchingState" json:"matching_state,omitempty"`
	// The hint of why the matching has failed (only set if matching_state is
	// FAILED).
	MatchingStateHint string `protobuf:"bytes,3,opt,name=matching_state_hint,json=matchingStateHint,proto3" json:"matching_state_hint,omitempty"`
}

func (x *LfpMerchantState_LfpStoreState) Reset() {
	*x = LfpMerchantState_LfpStoreState{}
	mi := &file_google_shopping_merchant_lfp_v1beta_lfpmerchantstate_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LfpMerchantState_LfpStoreState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LfpMerchantState_LfpStoreState) ProtoMessage() {}

func (x *LfpMerchantState_LfpStoreState) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_lfp_v1beta_lfpmerchantstate_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LfpMerchantState_LfpStoreState.ProtoReflect.Descriptor instead.
func (*LfpMerchantState_LfpStoreState) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_lfp_v1beta_lfpmerchantstate_proto_rawDescGZIP(), []int{0, 0}
}

func (x *LfpMerchantState_LfpStoreState) GetStoreCode() string {
	if x != nil {
		return x.StoreCode
	}
	return ""
}

func (x *LfpMerchantState_LfpStoreState) GetMatchingState() LfpMerchantState_LfpStoreState_StoreMatchingState {
	if x != nil {
		return x.MatchingState
	}
	return LfpMerchantState_LfpStoreState_STORE_MATCHING_STATE_UNSPECIFIED
}

func (x *LfpMerchantState_LfpStoreState) GetMatchingStateHint() string {
	if x != nil {
		return x.MatchingStateHint
	}
	return ""
}

// The inventory statistics for a merchant.
type LfpMerchantState_InventoryStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of entries (understanding entry as a pair of product and store)
	// that were built based on provided inventories/sales and submitted to
	// Google.
	SubmittedEntries int64 `protobuf:"varint,1,opt,name=submitted_entries,json=submittedEntries,proto3" json:"submitted_entries,omitempty"`
	// Number of submitted in stock entries.
	SubmittedInStockEntries int64 `protobuf:"varint,2,opt,name=submitted_in_stock_entries,json=submittedInStockEntries,proto3" json:"submitted_in_stock_entries,omitempty"`
	// Number of entries that were built based on provided
	// inventories/sales and couldn't be submitted to Google due to errors like
	// missing product.
	UnsubmittedEntries int64 `protobuf:"varint,3,opt,name=unsubmitted_entries,json=unsubmittedEntries,proto3" json:"unsubmitted_entries,omitempty"`
	// Number of products from provided inventories/sales that were created from
	// matches to existing online products provided by the merchant or to the
	// Google catalog.
	SubmittedProducts int64 `protobuf:"varint,4,opt,name=submitted_products,json=submittedProducts,proto3" json:"submitted_products,omitempty"`
}

func (x *LfpMerchantState_InventoryStats) Reset() {
	*x = LfpMerchantState_InventoryStats{}
	mi := &file_google_shopping_merchant_lfp_v1beta_lfpmerchantstate_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LfpMerchantState_InventoryStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LfpMerchantState_InventoryStats) ProtoMessage() {}

func (x *LfpMerchantState_InventoryStats) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_lfp_v1beta_lfpmerchantstate_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LfpMerchantState_InventoryStats.ProtoReflect.Descriptor instead.
func (*LfpMerchantState_InventoryStats) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_lfp_v1beta_lfpmerchantstate_proto_rawDescGZIP(), []int{0, 1}
}

func (x *LfpMerchantState_InventoryStats) GetSubmittedEntries() int64 {
	if x != nil {
		return x.SubmittedEntries
	}
	return 0
}

func (x *LfpMerchantState_InventoryStats) GetSubmittedInStockEntries() int64 {
	if x != nil {
		return x.SubmittedInStockEntries
	}
	return 0
}

func (x *LfpMerchantState_InventoryStats) GetUnsubmittedEntries() int64 {
	if x != nil {
		return x.UnsubmittedEntries
	}
	return 0
}

func (x *LfpMerchantState_InventoryStats) GetSubmittedProducts() int64 {
	if x != nil {
		return x.SubmittedProducts
	}
	return 0
}

// Country-specific settings for the merchant.
type LfpMerchantState_CountrySettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The [CLDR territory
	// code](https://github.com/unicode-org/cldr/blob/latest/common/main/en.xml)
	// for the country for which these settings are defined.
	RegionCode string `protobuf:"bytes,1,opt,name=region_code,json=regionCode,proto3" json:"region_code,omitempty"`
	// True if this merchant has enabled free local listings in MC.
	FreeLocalListingsEnabled bool `protobuf:"varint,2,opt,name=free_local_listings_enabled,json=freeLocalListingsEnabled,proto3" json:"free_local_listings_enabled,omitempty"`
	// True if this merchant has enabled local inventory ads in MC.
	LocalInventoryAdsEnabled bool `protobuf:"varint,3,opt,name=local_inventory_ads_enabled,json=localInventoryAdsEnabled,proto3" json:"local_inventory_ads_enabled,omitempty"`
	// Output only. The verification state of this merchant's inventory check.
	InventoryVerificationState LfpMerchantState_CountrySettings_VerificationState `protobuf:"varint,4,opt,name=inventory_verification_state,json=inventoryVerificationState,proto3,enum=google.shopping.merchant.lfp.v1beta.LfpMerchantState_CountrySettings_VerificationState" json:"inventory_verification_state,omitempty"`
	// Output only. The product page type selected by this merchant.
	ProductPageType LfpMerchantState_CountrySettings_ProductPageType `protobuf:"varint,5,opt,name=product_page_type,json=productPageType,proto3,enum=google.shopping.merchant.lfp.v1beta.LfpMerchantState_CountrySettings_ProductPageType" json:"product_page_type,omitempty"`
	// Output only. The verification state of this merchant's instock serving
	// feature.
	InstockServingVerificationState LfpMerchantState_CountrySettings_VerificationState `protobuf:"varint,6,opt,name=instock_serving_verification_state,json=instockServingVerificationState,proto3,enum=google.shopping.merchant.lfp.v1beta.LfpMerchantState_CountrySettings_VerificationState" json:"instock_serving_verification_state,omitempty"`
	// Output only. The verification state of this merchant's pickup serving
	// feature.
	PickupServingVerificationState LfpMerchantState_CountrySettings_VerificationState `protobuf:"varint,7,opt,name=pickup_serving_verification_state,json=pickupServingVerificationState,proto3,enum=google.shopping.merchant.lfp.v1beta.LfpMerchantState_CountrySettings_VerificationState" json:"pickup_serving_verification_state,omitempty"`
}

func (x *LfpMerchantState_CountrySettings) Reset() {
	*x = LfpMerchantState_CountrySettings{}
	mi := &file_google_shopping_merchant_lfp_v1beta_lfpmerchantstate_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LfpMerchantState_CountrySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LfpMerchantState_CountrySettings) ProtoMessage() {}

func (x *LfpMerchantState_CountrySettings) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_lfp_v1beta_lfpmerchantstate_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LfpMerchantState_CountrySettings.ProtoReflect.Descriptor instead.
func (*LfpMerchantState_CountrySettings) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_lfp_v1beta_lfpmerchantstate_proto_rawDescGZIP(), []int{0, 2}
}

func (x *LfpMerchantState_CountrySettings) GetRegionCode() string {
	if x != nil {
		return x.RegionCode
	}
	return ""
}

func (x *LfpMerchantState_CountrySettings) GetFreeLocalListingsEnabled() bool {
	if x != nil {
		return x.FreeLocalListingsEnabled
	}
	return false
}

func (x *LfpMerchantState_CountrySettings) GetLocalInventoryAdsEnabled() bool {
	if x != nil {
		return x.LocalInventoryAdsEnabled
	}
	return false
}

func (x *LfpMerchantState_CountrySettings) GetInventoryVerificationState() LfpMerchantState_CountrySettings_VerificationState {
	if x != nil {
		return x.InventoryVerificationState
	}
	return LfpMerchantState_CountrySettings_VERIFICATION_STATE_UNSPECIFIED
}

func (x *LfpMerchantState_CountrySettings) GetProductPageType() LfpMerchantState_CountrySettings_ProductPageType {
	if x != nil {
		return x.ProductPageType
	}
	return LfpMerchantState_CountrySettings_PRODUCT_PAGE_TYPE_UNSPECIFIED
}

func (x *LfpMerchantState_CountrySettings) GetInstockServingVerificationState() LfpMerchantState_CountrySettings_VerificationState {
	if x != nil {
		return x.InstockServingVerificationState
	}
	return LfpMerchantState_CountrySettings_VERIFICATION_STATE_UNSPECIFIED
}

func (x *LfpMerchantState_CountrySettings) GetPickupServingVerificationState() LfpMerchantState_CountrySettings_VerificationState {
	if x != nil {
		return x.PickupServingVerificationState
	}
	return LfpMerchantState_CountrySettings_VERIFICATION_STATE_UNSPECIFIED
}

var File_google_shopping_merchant_lfp_v1beta_lfpmerchantstate_proto protoreflect.FileDescriptor

var file_google_shopping_merchant_lfp_v1beta_lfpmerchantstate_proto_rawDesc = []byte{
	0x0a, 0x3a, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x2f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2f, 0x6c, 0x66, 0x70, 0x2f, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x6c, 0x66, 0x70, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x23, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x6c, 0x66, 0x70, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd7, 0x11, 0x0a, 0x10, 0x4c, 0x66, 0x70, 0x4d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x08, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x67, 0x62, 0x70,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x47,
	0x62, 0x70, 0x73, 0x12, 0x6b, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x2e, 0x6c, 0x66, 0x70, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x4c, 0x66, 0x70, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x4c, 0x66, 0x70, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x6d, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x2e, 0x6c, 0x66, 0x70, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x4c, 0x66, 0x70, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x0e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x70, 0x0a, 0x10, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x2e, 0x6c, 0x66, 0x70, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x4c, 0x66, 0x70, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x1a, 0xea, 0x02, 0x0a, 0x0d, 0x4c, 0x66, 0x70, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe0, 0x41, 0x02, 0xe0, 0x41, 0x05, 0x52,
	0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x0e, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x56, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x6c,
	0x66, 0x70, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4c, 0x66, 0x70, 0x4d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4c, 0x66, 0x70, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x69, 0x6e, 0x74, 0x22,
	0x7d, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x53,
	0x54, 0x4f, 0x52, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1f, 0x0a,
	0x1b, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x1a, 0xda,
	0x01, 0x0a, 0x0e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3b,
	0x0a, 0x1a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x17, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x75,
	0x6e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x75, 0x6e, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x12,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x1a, 0xdc, 0x08, 0x0a, 0x0f,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x24, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x66, 0x72, 0x65, 0x65,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x64, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x64, 0x73, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x9e, 0x01, 0x0a, 0x1c, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x57, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x6c, 0x66, 0x70, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x4c, 0x66, 0x70, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x1a, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x55, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x6c, 0x66, 0x70, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4c, 0x66, 0x70, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0xa9, 0x01,
	0x0a, 0x22, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e,
	0x67, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x57, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x6c, 0x66, 0x70, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x4c, 0x66, 0x70, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x1f, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa7, 0x01, 0x0a, 0x21, 0x70, 0x69,
	0x63, 0x6b, 0x75, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x57, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73,
	0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x2e, 0x6c, 0x66, 0x70, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4c, 0x66, 0x70, 0x4d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x1e, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x6e, 0x67, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x11, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x56, 0x45, 0x52,
	0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x23, 0x0a,
	0x1f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47,
	0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x50, 0x50,
	0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x03, 0x22, 0x80, 0x01, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x50,
	0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11,
	0x0a, 0x0d, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x45, 0x52, 0x43, 0x48, 0x41, 0x4e, 0x54, 0x5f, 0x48, 0x4f,
	0x53, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x45, 0x52, 0x43, 0x48, 0x41,
	0x4e, 0x54, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x10, 0x03, 0x3a, 0x91, 0x01, 0xea, 0x41, 0x8d,
	0x01, 0x0a, 0x2b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4c, 0x66,
	0x70, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x39,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x7d, 0x2f, 0x6c, 0x66, 0x70, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x2f, 0x7b, 0x6c, 0x66, 0x70, 0x5f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x7d, 0x2a, 0x11, 0x6c, 0x66, 0x70, 0x4d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x32, 0x10, 0x6c, 0x66,
	0x70, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x65,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4c, 0x66, 0x70, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0xe0, 0x41, 0x02, 0xfa,
	0x41, 0x2d, 0x0a, 0x2b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x61, 0x70, 0x69, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4c,
	0x66, 0x70, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0xb4, 0x02, 0x0a, 0x17, 0x4c, 0x66, 0x70, 0x4d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0xcf, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4c, 0x66, 0x70, 0x4d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x2e, 0x6c, 0x66, 0x70, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x47, 0x65, 0x74, 0x4c, 0x66, 0x70, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x6c, 0x66, 0x70, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x4c, 0x66, 0x70, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x22, 0x40, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33,
	0x12, 0x31, 0x2f, 0x6c, 0x66, 0x70, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x3d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c,
	0x66, 0x70, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x2f, 0x2a, 0x7d, 0x1a, 0x47, 0xca, 0x41, 0x1a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x61, 0x70, 0x69, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0xd2, 0x41, 0x27, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x61, 0x75, 0x74, 0x68, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x83, 0x01, 0x0a,
	0x27, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x6c, 0x66,
	0x70, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x42, 0x15, 0x4c, 0x66, 0x70, 0x4d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x3f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2f,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2f, 0x6c, 0x66, 0x70, 0x2f, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x6c, 0x66, 0x70, 0x70, 0x62, 0x3b, 0x6c, 0x66, 0x70,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_shopping_merchant_lfp_v1beta_lfpmerchantstate_proto_rawDescOnce sync.Once
	file_google_shopping_merchant_lfp_v1beta_lfpmerchantstate_proto_rawDescData = file_google_shopping_merchant_lfp_v1beta_lfpmerchantstate_proto_rawDesc
)

func file_google_shopping_merchant_lfp_v1beta_lfpmerchantstate_proto_rawDescGZIP() []byte {
	file_google_shopping_merchant_lfp_v1beta_lfpmerchantstate_proto_rawDescOnce.Do(func() {
		file_google_shopping_merchant_lfp_v1beta_lfpmerchantstate_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_shopping_merchant_lfp_v1beta_lfpmerchantstate_proto_rawDescData)
	})
	return file_google_shopping_merchant_lfp_v1beta_lfpmerchantstate_proto_rawDescData
}

var file_google_shopping_merchant_lfp_v1beta_lfpmerchantstate_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_google_shopping_merchant_lfp_v1beta_lfpmerchantstate_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_google_shopping_merchant_lfp_v1beta_lfpmerchantstate_proto_goTypes = []any{
	(LfpMerchantState_LfpStoreState_StoreMatchingState)(0),  // 0: google.shopping.merchant.lfp.v1beta.LfpMerchantState.LfpStoreState.StoreMatchingState
	(LfpMerchantState_CountrySettings_VerificationState)(0), // 1: google.shopping.merchant.lfp.v1beta.LfpMerchantState.CountrySettings.VerificationState
	(LfpMerchantState_CountrySettings_ProductPageType)(0),   // 2: google.shopping.merchant.lfp.v1beta.LfpMerchantState.CountrySettings.ProductPageType
	(*LfpMerchantState)(nil),                                // 3: google.shopping.merchant.lfp.v1beta.LfpMerchantState
	(*GetLfpMerchantStateRequest)(nil),                      // 4: google.shopping.merchant.lfp.v1beta.GetLfpMerchantStateRequest
	(*LfpMerchantState_LfpStoreState)(nil),                  // 5: google.shopping.merchant.lfp.v1beta.LfpMerchantState.LfpStoreState
	(*LfpMerchantState_InventoryStats)(nil),                 // 6: google.shopping.merchant.lfp.v1beta.LfpMerchantState.InventoryStats
	(*LfpMerchantState_CountrySettings)(nil),                // 7: google.shopping.merchant.lfp.v1beta.LfpMerchantState.CountrySettings
}
var file_google_shopping_merchant_lfp_v1beta_lfpmerchantstate_proto_depIdxs = []int32{
	5, // 0: google.shopping.merchant.lfp.v1beta.LfpMerchantState.store_states:type_name -> google.shopping.merchant.lfp.v1beta.LfpMerchantState.LfpStoreState
	6, // 1: google.shopping.merchant.lfp.v1beta.LfpMerchantState.inventory_stats:type_name -> google.shopping.merchant.lfp.v1beta.LfpMerchantState.InventoryStats
	7, // 2: google.shopping.merchant.lfp.v1beta.LfpMerchantState.country_settings:type_name -> google.shopping.merchant.lfp.v1beta.LfpMerchantState.CountrySettings
	0, // 3: google.shopping.merchant.lfp.v1beta.LfpMerchantState.LfpStoreState.matching_state:type_name -> google.shopping.merchant.lfp.v1beta.LfpMerchantState.LfpStoreState.StoreMatchingState
	1, // 4: google.shopping.merchant.lfp.v1beta.LfpMerchantState.CountrySettings.inventory_verification_state:type_name -> google.shopping.merchant.lfp.v1beta.LfpMerchantState.CountrySettings.VerificationState
	2, // 5: google.shopping.merchant.lfp.v1beta.LfpMerchantState.CountrySettings.product_page_type:type_name -> google.shopping.merchant.lfp.v1beta.LfpMerchantState.CountrySettings.ProductPageType
	1, // 6: google.shopping.merchant.lfp.v1beta.LfpMerchantState.CountrySettings.instock_serving_verification_state:type_name -> google.shopping.merchant.lfp.v1beta.LfpMerchantState.CountrySettings.VerificationState
	1, // 7: google.shopping.merchant.lfp.v1beta.LfpMerchantState.CountrySettings.pickup_serving_verification_state:type_name -> google.shopping.merchant.lfp.v1beta.LfpMerchantState.CountrySettings.VerificationState
	4, // 8: google.shopping.merchant.lfp.v1beta.LfpMerchantStateService.GetLfpMerchantState:input_type -> google.shopping.merchant.lfp.v1beta.GetLfpMerchantStateRequest
	3, // 9: google.shopping.merchant.lfp.v1beta.LfpMerchantStateService.GetLfpMerchantState:output_type -> google.shopping.merchant.lfp.v1beta.LfpMerchantState
	9, // [9:10] is the sub-list for method output_type
	8, // [8:9] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_google_shopping_merchant_lfp_v1beta_lfpmerchantstate_proto_init() }
func file_google_shopping_merchant_lfp_v1beta_lfpmerchantstate_proto_init() {
	if File_google_shopping_merchant_lfp_v1beta_lfpmerchantstate_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_shopping_merchant_lfp_v1beta_lfpmerchantstate_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_google_shopping_merchant_lfp_v1beta_lfpmerchantstate_proto_goTypes,
		DependencyIndexes: file_google_shopping_merchant_lfp_v1beta_lfpmerchantstate_proto_depIdxs,
		EnumInfos:         file_google_shopping_merchant_lfp_v1beta_lfpmerchantstate_proto_enumTypes,
		MessageInfos:      file_google_shopping_merchant_lfp_v1beta_lfpmerchantstate_proto_msgTypes,
	}.Build()
	File_google_shopping_merchant_lfp_v1beta_lfpmerchantstate_proto = out.File
	file_google_shopping_merchant_lfp_v1beta_lfpmerchantstate_proto_rawDesc = nil
	file_google_shopping_merchant_lfp_v1beta_lfpmerchantstate_proto_goTypes = nil
	file_google_shopping_merchant_lfp_v1beta_lfpmerchantstate_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LfpMerchantStateServiceClient is the client API for LfpMerchantStateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LfpMerchantStateServiceClient interface {
	// Gets the LFP state of a merchant
	GetLfpMerchantState(ctx context.Context, in *GetLfpMerchantStateRequest, opts ...grpc.CallOption) (*LfpMerchantState, error)
}

type lfpMerchantStateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLfpMerchantStateServiceClient(cc grpc.ClientConnInterface) LfpMerchantStateServiceClient {
	return &lfpMerchantStateServiceClient{cc}
}

func (c *lfpMerchantStateServiceClient) GetLfpMerchantState(ctx context.Context, in *GetLfpMerchantStateRequest, opts ...grpc.CallOption) (*LfpMerchantState, error) {
	out := new(LfpMerchantState)
	err := c.cc.Invoke(ctx, "/google.shopping.merchant.lfp.v1beta.LfpMerchantStateService/GetLfpMerchantState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LfpMerchantStateServiceServer is the server API for LfpMerchantStateService service.
type LfpMerchantStateServiceServer interface {
	// Gets the LFP state of a merchant
	GetLfpMerchantState(context.Context, *GetLfpMerchantStateRequest) (*LfpMerchantState, error)
}

// UnimplementedLfpMerchantStateServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLfpMerchantStateServiceServer struct {
}

func (*UnimplementedLfpMerchantStateServiceServer) GetLfpMerchantState(context.Context, *GetLfpMerchantStateRequest) (*LfpMerchantState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLfpMerchantState not implemented")
}

func RegisterLfpMerchantStateServiceServer(s *grpc.Server, srv LfpMerchantStateServiceServer) {
	s.RegisterService(&_LfpMerchantStateService_serviceDesc, srv)
}

func _LfpMerchantStateService_GetLfpMerchantState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLfpMerchantStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LfpMerchantStateServiceServer).GetLfpMerchantState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.shopping.merchant.lfp.v1beta.LfpMerchantStateService/GetLfpMerchantState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LfpMerchantStateServiceServer).GetLfpMerchantState(ctx, req.(*GetLfpMerchantStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LfpMerchantStateService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.shopping.merchant.lfp.v1beta.LfpMerchantStateService",
	HandlerType: (*LfpMerchantStateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLfpMerchantState",
			Handler:    _LfpMerchantStateService_GetLfpMerchantState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/shopping/merchant/lfp/v1beta/lfpmerchantstate.proto",
}
