// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.7
// source: google/shopping/merchant/accounts/v1/developerregistration.proto

package accountspb

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents a developer registration owned by a Merchant account.
type DeveloperRegistration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier. The `name` (ID) of the developer registration. Generated by the
	// Content API upon creation of a new `DeveloperRegistration`. The `account`
	// represents the merchant ID of the merchant that owns the registration.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. The GCP ids attached to this developer registration
	GcpIds []string `protobuf:"bytes,2,rep,name=gcp_ids,json=gcpIds,proto3" json:"gcp_ids,omitempty"`
}

func (x *DeveloperRegistration) Reset() {
	*x = DeveloperRegistration{}
	mi := &file_google_shopping_merchant_accounts_v1_developerregistration_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeveloperRegistration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeveloperRegistration) ProtoMessage() {}

func (x *DeveloperRegistration) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_accounts_v1_developerregistration_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeveloperRegistration.ProtoReflect.Descriptor instead.
func (*DeveloperRegistration) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_accounts_v1_developerregistration_proto_rawDescGZIP(), []int{0}
}

func (x *DeveloperRegistration) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeveloperRegistration) GetGcpIds() []string {
	if x != nil {
		return x.GcpIds
	}
	return nil
}

// Request message for the RegisterGCP method.
type RegisterGcpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the developer registration to be created for the
	// merchant account that the GCP will be registered with. Format:
	// `accounts/{account}/developerRegistration`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Immutable. If the developer email provided is associated with a user in the
	// merchant account provided, the user will be updated to have "API developer"
	// access type and the email preference corresponding to that user will be
	// updated to have the new "API notifications" preference. If the developer
	// email provided is not associated with any user we will just add it as a
	// contact. The email preference corresponding to that contact will have the
	// new "API notifications" preference
	DeveloperEmail string `protobuf:"bytes,2,opt,name=developer_email,json=developerEmail,proto3" json:"developer_email,omitempty"`
}

func (x *RegisterGcpRequest) Reset() {
	*x = RegisterGcpRequest{}
	mi := &file_google_shopping_merchant_accounts_v1_developerregistration_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterGcpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterGcpRequest) ProtoMessage() {}

func (x *RegisterGcpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_accounts_v1_developerregistration_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterGcpRequest.ProtoReflect.Descriptor instead.
func (*RegisterGcpRequest) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_accounts_v1_developerregistration_proto_rawDescGZIP(), []int{1}
}

func (x *RegisterGcpRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RegisterGcpRequest) GetDeveloperEmail() string {
	if x != nil {
		return x.DeveloperEmail
	}
	return ""
}

// Request message for the UnregisterGCP method.
type UnregisterGcpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the developer registration to be created for the
	// merchant account that the GCP will be registered with. Format:
	// `accounts/{account}/developerRegistration`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UnregisterGcpRequest) Reset() {
	*x = UnregisterGcpRequest{}
	mi := &file_google_shopping_merchant_accounts_v1_developerregistration_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnregisterGcpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnregisterGcpRequest) ProtoMessage() {}

func (x *UnregisterGcpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_accounts_v1_developerregistration_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnregisterGcpRequest.ProtoReflect.Descriptor instead.
func (*UnregisterGcpRequest) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_accounts_v1_developerregistration_proto_rawDescGZIP(), []int{2}
}

func (x *UnregisterGcpRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Request message for the GetDeveloperRegistration method.
type GetDeveloperRegistrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The `name` (ID) of the developer registration.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetDeveloperRegistrationRequest) Reset() {
	*x = GetDeveloperRegistrationRequest{}
	mi := &file_google_shopping_merchant_accounts_v1_developerregistration_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDeveloperRegistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeveloperRegistrationRequest) ProtoMessage() {}

func (x *GetDeveloperRegistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_accounts_v1_developerregistration_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeveloperRegistrationRequest.ProtoReflect.Descriptor instead.
func (*GetDeveloperRegistrationRequest) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_accounts_v1_developerregistration_proto_rawDescGZIP(), []int{3}
}

func (x *GetDeveloperRegistrationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_google_shopping_merchant_accounts_v1_developerregistration_proto protoreflect.FileDescriptor

var file_google_shopping_merchant_accounts_v1_developerregistration_proto_rawDesc = []byte{
	0x0a, 0x40, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x2f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x24, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdf, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x08, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x07, 0x67,
	0x63, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x06, 0x67, 0x63, 0x70, 0x49, 0x64, 0x73, 0x3a, 0x8e, 0x01, 0xea, 0x41, 0x8a, 0x01,
	0x0a, 0x30, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x65, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x28, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x7d, 0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2a, 0x15, 0x64, 0x65,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x32, 0x15, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x90, 0x01, 0x0a, 0x12, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x47, 0x63, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x4c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x38, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x32, 0x0a, 0x30, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2c, 0x0a, 0x0f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x05, 0x52, 0x0e, 0x64,
	0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x64, 0x0a,
	0x14, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x47, 0x63, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x38, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x32, 0x0a, 0x30, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x6f, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x32, 0x0a, 0x30, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x32, 0xd6, 0x05, 0x0a, 0x1c, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xd1, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x47, 0x63, 0x70, 0x12, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73,
	0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x47, 0x63, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x45, 0x3a, 0x01, 0x2a, 0x22, 0x40, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x3a, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x47, 0x63, 0x70, 0x12, 0xe3, 0x01, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x43, 0xda, 0x41, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x12, 0x34, 0x2f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x12,
	0xb2, 0x01, 0x0a, 0x0d, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x47, 0x63,
	0x70, 0x12, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x47, 0x63, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x4d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x47, 0x3a, 0x01, 0x2a,
	0x22, 0x42, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f,
	0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x3a, 0x75, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x47, 0x63, 0x70, 0x1a, 0x47, 0xca, 0x41, 0x1a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x27, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77,
	0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x8d, 0x02,
	0x0a, 0x28, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x1a, 0x44, 0x65, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4a, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x68,
	0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x70, 0x62, 0x3b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x70, 0x62, 0xaa, 0x02, 0x24, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x53, 0x68,
	0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x24, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x5c, 0x53, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5c, 0x4d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5c,
	0x56, 0x31, 0xea, 0x02, 0x28, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a, 0x53, 0x68, 0x6f,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x3a, 0x3a, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x3a,
	0x3a, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_shopping_merchant_accounts_v1_developerregistration_proto_rawDescOnce sync.Once
	file_google_shopping_merchant_accounts_v1_developerregistration_proto_rawDescData = file_google_shopping_merchant_accounts_v1_developerregistration_proto_rawDesc
)

func file_google_shopping_merchant_accounts_v1_developerregistration_proto_rawDescGZIP() []byte {
	file_google_shopping_merchant_accounts_v1_developerregistration_proto_rawDescOnce.Do(func() {
		file_google_shopping_merchant_accounts_v1_developerregistration_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_shopping_merchant_accounts_v1_developerregistration_proto_rawDescData)
	})
	return file_google_shopping_merchant_accounts_v1_developerregistration_proto_rawDescData
}

var file_google_shopping_merchant_accounts_v1_developerregistration_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_google_shopping_merchant_accounts_v1_developerregistration_proto_goTypes = []any{
	(*DeveloperRegistration)(nil),           // 0: google.shopping.merchant.accounts.v1.DeveloperRegistration
	(*RegisterGcpRequest)(nil),              // 1: google.shopping.merchant.accounts.v1.RegisterGcpRequest
	(*UnregisterGcpRequest)(nil),            // 2: google.shopping.merchant.accounts.v1.UnregisterGcpRequest
	(*GetDeveloperRegistrationRequest)(nil), // 3: google.shopping.merchant.accounts.v1.GetDeveloperRegistrationRequest
	(*emptypb.Empty)(nil),                   // 4: google.protobuf.Empty
}
var file_google_shopping_merchant_accounts_v1_developerregistration_proto_depIdxs = []int32{
	1, // 0: google.shopping.merchant.accounts.v1.DeveloperRegistrationService.RegisterGcp:input_type -> google.shopping.merchant.accounts.v1.RegisterGcpRequest
	3, // 1: google.shopping.merchant.accounts.v1.DeveloperRegistrationService.GetDeveloperRegistration:input_type -> google.shopping.merchant.accounts.v1.GetDeveloperRegistrationRequest
	2, // 2: google.shopping.merchant.accounts.v1.DeveloperRegistrationService.UnregisterGcp:input_type -> google.shopping.merchant.accounts.v1.UnregisterGcpRequest
	0, // 3: google.shopping.merchant.accounts.v1.DeveloperRegistrationService.RegisterGcp:output_type -> google.shopping.merchant.accounts.v1.DeveloperRegistration
	0, // 4: google.shopping.merchant.accounts.v1.DeveloperRegistrationService.GetDeveloperRegistration:output_type -> google.shopping.merchant.accounts.v1.DeveloperRegistration
	4, // 5: google.shopping.merchant.accounts.v1.DeveloperRegistrationService.UnregisterGcp:output_type -> google.protobuf.Empty
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_google_shopping_merchant_accounts_v1_developerregistration_proto_init() }
func file_google_shopping_merchant_accounts_v1_developerregistration_proto_init() {
	if File_google_shopping_merchant_accounts_v1_developerregistration_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_shopping_merchant_accounts_v1_developerregistration_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_google_shopping_merchant_accounts_v1_developerregistration_proto_goTypes,
		DependencyIndexes: file_google_shopping_merchant_accounts_v1_developerregistration_proto_depIdxs,
		MessageInfos:      file_google_shopping_merchant_accounts_v1_developerregistration_proto_msgTypes,
	}.Build()
	File_google_shopping_merchant_accounts_v1_developerregistration_proto = out.File
	file_google_shopping_merchant_accounts_v1_developerregistration_proto_rawDesc = nil
	file_google_shopping_merchant_accounts_v1_developerregistration_proto_goTypes = nil
	file_google_shopping_merchant_accounts_v1_developerregistration_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DeveloperRegistrationServiceClient is the client API for DeveloperRegistrationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeveloperRegistrationServiceClient interface {
	// Registers the GCP used for the API call to the shopping account passed in
	// the request. Will create a user with an "API developer" and add the
	// "developer_email" as a contact with "API notifications" email preference
	// on.
	RegisterGcp(ctx context.Context, in *RegisterGcpRequest, opts ...grpc.CallOption) (*DeveloperRegistration, error)
	// Retrieves a developer registration for a merchant.
	GetDeveloperRegistration(ctx context.Context, in *GetDeveloperRegistrationRequest, opts ...grpc.CallOption) (*DeveloperRegistration, error)
	// Unregister the calling GCP from the calling shopping account. Note that the
	// GCP will still be able to access the API for at most 1 day from the
	// unregister succussful call.
	UnregisterGcp(ctx context.Context, in *UnregisterGcpRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type developerRegistrationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeveloperRegistrationServiceClient(cc grpc.ClientConnInterface) DeveloperRegistrationServiceClient {
	return &developerRegistrationServiceClient{cc}
}

func (c *developerRegistrationServiceClient) RegisterGcp(ctx context.Context, in *RegisterGcpRequest, opts ...grpc.CallOption) (*DeveloperRegistration, error) {
	out := new(DeveloperRegistration)
	err := c.cc.Invoke(ctx, "/google.shopping.merchant.accounts.v1.DeveloperRegistrationService/RegisterGcp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerRegistrationServiceClient) GetDeveloperRegistration(ctx context.Context, in *GetDeveloperRegistrationRequest, opts ...grpc.CallOption) (*DeveloperRegistration, error) {
	out := new(DeveloperRegistration)
	err := c.cc.Invoke(ctx, "/google.shopping.merchant.accounts.v1.DeveloperRegistrationService/GetDeveloperRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerRegistrationServiceClient) UnregisterGcp(ctx context.Context, in *UnregisterGcpRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/google.shopping.merchant.accounts.v1.DeveloperRegistrationService/UnregisterGcp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeveloperRegistrationServiceServer is the server API for DeveloperRegistrationService service.
type DeveloperRegistrationServiceServer interface {
	// Registers the GCP used for the API call to the shopping account passed in
	// the request. Will create a user with an "API developer" and add the
	// "developer_email" as a contact with "API notifications" email preference
	// on.
	RegisterGcp(context.Context, *RegisterGcpRequest) (*DeveloperRegistration, error)
	// Retrieves a developer registration for a merchant.
	GetDeveloperRegistration(context.Context, *GetDeveloperRegistrationRequest) (*DeveloperRegistration, error)
	// Unregister the calling GCP from the calling shopping account. Note that the
	// GCP will still be able to access the API for at most 1 day from the
	// unregister succussful call.
	UnregisterGcp(context.Context, *UnregisterGcpRequest) (*emptypb.Empty, error)
}

// UnimplementedDeveloperRegistrationServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDeveloperRegistrationServiceServer struct {
}

func (*UnimplementedDeveloperRegistrationServiceServer) RegisterGcp(context.Context, *RegisterGcpRequest) (*DeveloperRegistration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterGcp not implemented")
}
func (*UnimplementedDeveloperRegistrationServiceServer) GetDeveloperRegistration(context.Context, *GetDeveloperRegistrationRequest) (*DeveloperRegistration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeveloperRegistration not implemented")
}
func (*UnimplementedDeveloperRegistrationServiceServer) UnregisterGcp(context.Context, *UnregisterGcpRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterGcp not implemented")
}

func RegisterDeveloperRegistrationServiceServer(s *grpc.Server, srv DeveloperRegistrationServiceServer) {
	s.RegisterService(&_DeveloperRegistrationService_serviceDesc, srv)
}

func _DeveloperRegistrationService_RegisterGcp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterGcpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperRegistrationServiceServer).RegisterGcp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.shopping.merchant.accounts.v1.DeveloperRegistrationService/RegisterGcp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperRegistrationServiceServer).RegisterGcp(ctx, req.(*RegisterGcpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeveloperRegistrationService_GetDeveloperRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeveloperRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperRegistrationServiceServer).GetDeveloperRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.shopping.merchant.accounts.v1.DeveloperRegistrationService/GetDeveloperRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperRegistrationServiceServer).GetDeveloperRegistration(ctx, req.(*GetDeveloperRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeveloperRegistrationService_UnregisterGcp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterGcpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperRegistrationServiceServer).UnregisterGcp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.shopping.merchant.accounts.v1.DeveloperRegistrationService/UnregisterGcp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperRegistrationServiceServer).UnregisterGcp(ctx, req.(*UnregisterGcpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeveloperRegistrationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.shopping.merchant.accounts.v1.DeveloperRegistrationService",
	HandlerType: (*DeveloperRegistrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterGcp",
			Handler:    _DeveloperRegistrationService_RegisterGcp_Handler,
		},
		{
			MethodName: "GetDeveloperRegistration",
			Handler:    _DeveloperRegistrationService_GetDeveloperRegistration_Handler,
		},
		{
			MethodName: "UnregisterGcp",
			Handler:    _DeveloperRegistrationService_UnregisterGcp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/shopping/merchant/accounts/v1/developerregistration.proto",
}
