// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/shopping/merchant/accounts/v1/accountservices.proto

package accountspb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AccountServicesService_GetAccountService_FullMethodName     = "/google.shopping.merchant.accounts.v1.AccountServicesService/GetAccountService"
	AccountServicesService_ListAccountServices_FullMethodName   = "/google.shopping.merchant.accounts.v1.AccountServicesService/ListAccountServices"
	AccountServicesService_ProposeAccountService_FullMethodName = "/google.shopping.merchant.accounts.v1.AccountServicesService/ProposeAccountService"
	AccountServicesService_ApproveAccountService_FullMethodName = "/google.shopping.merchant.accounts.v1.AccountServicesService/ApproveAccountService"
	AccountServicesService_RejectAccountService_FullMethodName  = "/google.shopping.merchant.accounts.v1.AccountServicesService/RejectAccountService"
)

// AccountServicesServiceClient is the client API for AccountServicesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountServicesServiceClient interface {
	// Retrieve an account service.
	GetAccountService(ctx context.Context, in *GetAccountServiceRequest, opts ...grpc.CallOption) (*AccountService, error)
	// List account services for the specified accounts. Supports filtering.
	ListAccountServices(ctx context.Context, in *ListAccountServicesRequest, opts ...grpc.CallOption) (*ListAccountServicesResponse, error)
	// Propose an account service.
	ProposeAccountService(ctx context.Context, in *ProposeAccountServiceRequest, opts ...grpc.CallOption) (*AccountService, error)
	// Approve an account service proposal.
	ApproveAccountService(ctx context.Context, in *ApproveAccountServiceRequest, opts ...grpc.CallOption) (*AccountService, error)
	// Reject an account service (both proposed and approve services can be
	// rejected).
	RejectAccountService(ctx context.Context, in *RejectAccountServiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type accountServicesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountServicesServiceClient(cc grpc.ClientConnInterface) AccountServicesServiceClient {
	return &accountServicesServiceClient{cc}
}

func (c *accountServicesServiceClient) GetAccountService(ctx context.Context, in *GetAccountServiceRequest, opts ...grpc.CallOption) (*AccountService, error) {
	out := new(AccountService)
	err := c.cc.Invoke(ctx, AccountServicesService_GetAccountService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServicesServiceClient) ListAccountServices(ctx context.Context, in *ListAccountServicesRequest, opts ...grpc.CallOption) (*ListAccountServicesResponse, error) {
	out := new(ListAccountServicesResponse)
	err := c.cc.Invoke(ctx, AccountServicesService_ListAccountServices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServicesServiceClient) ProposeAccountService(ctx context.Context, in *ProposeAccountServiceRequest, opts ...grpc.CallOption) (*AccountService, error) {
	out := new(AccountService)
	err := c.cc.Invoke(ctx, AccountServicesService_ProposeAccountService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServicesServiceClient) ApproveAccountService(ctx context.Context, in *ApproveAccountServiceRequest, opts ...grpc.CallOption) (*AccountService, error) {
	out := new(AccountService)
	err := c.cc.Invoke(ctx, AccountServicesService_ApproveAccountService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServicesServiceClient) RejectAccountService(ctx context.Context, in *RejectAccountServiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AccountServicesService_RejectAccountService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServicesServiceServer is the server API for AccountServicesService service.
// All implementations should embed UnimplementedAccountServicesServiceServer
// for forward compatibility
type AccountServicesServiceServer interface {
	// Retrieve an account service.
	GetAccountService(context.Context, *GetAccountServiceRequest) (*AccountService, error)
	// List account services for the specified accounts. Supports filtering.
	ListAccountServices(context.Context, *ListAccountServicesRequest) (*ListAccountServicesResponse, error)
	// Propose an account service.
	ProposeAccountService(context.Context, *ProposeAccountServiceRequest) (*AccountService, error)
	// Approve an account service proposal.
	ApproveAccountService(context.Context, *ApproveAccountServiceRequest) (*AccountService, error)
	// Reject an account service (both proposed and approve services can be
	// rejected).
	RejectAccountService(context.Context, *RejectAccountServiceRequest) (*emptypb.Empty, error)
}

// UnimplementedAccountServicesServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAccountServicesServiceServer struct {
}

func (UnimplementedAccountServicesServiceServer) GetAccountService(context.Context, *GetAccountServiceRequest) (*AccountService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountService not implemented")
}
func (UnimplementedAccountServicesServiceServer) ListAccountServices(context.Context, *ListAccountServicesRequest) (*ListAccountServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccountServices not implemented")
}
func (UnimplementedAccountServicesServiceServer) ProposeAccountService(context.Context, *ProposeAccountServiceRequest) (*AccountService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposeAccountService not implemented")
}
func (UnimplementedAccountServicesServiceServer) ApproveAccountService(context.Context, *ApproveAccountServiceRequest) (*AccountService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveAccountService not implemented")
}
func (UnimplementedAccountServicesServiceServer) RejectAccountService(context.Context, *RejectAccountServiceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectAccountService not implemented")
}

// UnsafeAccountServicesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountServicesServiceServer will
// result in compilation errors.
type UnsafeAccountServicesServiceServer interface {
	mustEmbedUnimplementedAccountServicesServiceServer()
}

func RegisterAccountServicesServiceServer(s grpc.ServiceRegistrar, srv AccountServicesServiceServer) {
	s.RegisterService(&AccountServicesService_ServiceDesc, srv)
}

func _AccountServicesService_GetAccountService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServicesServiceServer).GetAccountService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountServicesService_GetAccountService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServicesServiceServer).GetAccountService(ctx, req.(*GetAccountServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServicesService_ListAccountServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccountServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServicesServiceServer).ListAccountServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountServicesService_ListAccountServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServicesServiceServer).ListAccountServices(ctx, req.(*ListAccountServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServicesService_ProposeAccountService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposeAccountServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServicesServiceServer).ProposeAccountService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountServicesService_ProposeAccountService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServicesServiceServer).ProposeAccountService(ctx, req.(*ProposeAccountServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServicesService_ApproveAccountService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveAccountServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServicesServiceServer).ApproveAccountService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountServicesService_ApproveAccountService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServicesServiceServer).ApproveAccountService(ctx, req.(*ApproveAccountServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServicesService_RejectAccountService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectAccountServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServicesServiceServer).RejectAccountService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountServicesService_RejectAccountService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServicesServiceServer).RejectAccountService(ctx, req.(*RejectAccountServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountServicesService_ServiceDesc is the grpc.ServiceDesc for AccountServicesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountServicesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.shopping.merchant.accounts.v1.AccountServicesService",
	HandlerType: (*AccountServicesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccountService",
			Handler:    _AccountServicesService_GetAccountService_Handler,
		},
		{
			MethodName: "ListAccountServices",
			Handler:    _AccountServicesService_ListAccountServices_Handler,
		},
		{
			MethodName: "ProposeAccountService",
			Handler:    _AccountServicesService_ProposeAccountService_Handler,
		},
		{
			MethodName: "ApproveAccountService",
			Handler:    _AccountServicesService_ApproveAccountService_Handler,
		},
		{
			MethodName: "RejectAccountService",
			Handler:    _AccountServicesService_RejectAccountService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/shopping/merchant/accounts/v1/accountservices.proto",
}
