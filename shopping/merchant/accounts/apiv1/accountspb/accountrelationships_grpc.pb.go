// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/shopping/merchant/accounts/v1/accountrelationships.proto

package accountspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AccountRelationshipsService_GetAccountRelationship_FullMethodName    = "/google.shopping.merchant.accounts.v1.AccountRelationshipsService/GetAccountRelationship"
	AccountRelationshipsService_UpdateAccountRelationship_FullMethodName = "/google.shopping.merchant.accounts.v1.AccountRelationshipsService/UpdateAccountRelationship"
	AccountRelationshipsService_ListAccountRelationships_FullMethodName  = "/google.shopping.merchant.accounts.v1.AccountRelationshipsService/ListAccountRelationships"
)

// AccountRelationshipsServiceClient is the client API for AccountRelationshipsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountRelationshipsServiceClient interface {
	// Retrieve an account relationship.
	GetAccountRelationship(ctx context.Context, in *GetAccountRelationshipRequest, opts ...grpc.CallOption) (*AccountRelationship, error)
	// Updates the account relationship. Executing this method requires admin
	// access.
	UpdateAccountRelationship(ctx context.Context, in *UpdateAccountRelationshipRequest, opts ...grpc.CallOption) (*AccountRelationship, error)
	// List account relationships for the specified account.
	ListAccountRelationships(ctx context.Context, in *ListAccountRelationshipsRequest, opts ...grpc.CallOption) (*ListAccountRelationshipsResponse, error)
}

type accountRelationshipsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountRelationshipsServiceClient(cc grpc.ClientConnInterface) AccountRelationshipsServiceClient {
	return &accountRelationshipsServiceClient{cc}
}

func (c *accountRelationshipsServiceClient) GetAccountRelationship(ctx context.Context, in *GetAccountRelationshipRequest, opts ...grpc.CallOption) (*AccountRelationship, error) {
	out := new(AccountRelationship)
	err := c.cc.Invoke(ctx, AccountRelationshipsService_GetAccountRelationship_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountRelationshipsServiceClient) UpdateAccountRelationship(ctx context.Context, in *UpdateAccountRelationshipRequest, opts ...grpc.CallOption) (*AccountRelationship, error) {
	out := new(AccountRelationship)
	err := c.cc.Invoke(ctx, AccountRelationshipsService_UpdateAccountRelationship_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountRelationshipsServiceClient) ListAccountRelationships(ctx context.Context, in *ListAccountRelationshipsRequest, opts ...grpc.CallOption) (*ListAccountRelationshipsResponse, error) {
	out := new(ListAccountRelationshipsResponse)
	err := c.cc.Invoke(ctx, AccountRelationshipsService_ListAccountRelationships_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountRelationshipsServiceServer is the server API for AccountRelationshipsService service.
// All implementations should embed UnimplementedAccountRelationshipsServiceServer
// for forward compatibility
type AccountRelationshipsServiceServer interface {
	// Retrieve an account relationship.
	GetAccountRelationship(context.Context, *GetAccountRelationshipRequest) (*AccountRelationship, error)
	// Updates the account relationship. Executing this method requires admin
	// access.
	UpdateAccountRelationship(context.Context, *UpdateAccountRelationshipRequest) (*AccountRelationship, error)
	// List account relationships for the specified account.
	ListAccountRelationships(context.Context, *ListAccountRelationshipsRequest) (*ListAccountRelationshipsResponse, error)
}

// UnimplementedAccountRelationshipsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAccountRelationshipsServiceServer struct {
}

func (UnimplementedAccountRelationshipsServiceServer) GetAccountRelationship(context.Context, *GetAccountRelationshipRequest) (*AccountRelationship, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountRelationship not implemented")
}
func (UnimplementedAccountRelationshipsServiceServer) UpdateAccountRelationship(context.Context, *UpdateAccountRelationshipRequest) (*AccountRelationship, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccountRelationship not implemented")
}
func (UnimplementedAccountRelationshipsServiceServer) ListAccountRelationships(context.Context, *ListAccountRelationshipsRequest) (*ListAccountRelationshipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccountRelationships not implemented")
}

// UnsafeAccountRelationshipsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountRelationshipsServiceServer will
// result in compilation errors.
type UnsafeAccountRelationshipsServiceServer interface {
	mustEmbedUnimplementedAccountRelationshipsServiceServer()
}

func RegisterAccountRelationshipsServiceServer(s grpc.ServiceRegistrar, srv AccountRelationshipsServiceServer) {
	s.RegisterService(&AccountRelationshipsService_ServiceDesc, srv)
}

func _AccountRelationshipsService_GetAccountRelationship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRelationshipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountRelationshipsServiceServer).GetAccountRelationship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountRelationshipsService_GetAccountRelationship_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountRelationshipsServiceServer).GetAccountRelationship(ctx, req.(*GetAccountRelationshipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountRelationshipsService_UpdateAccountRelationship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountRelationshipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountRelationshipsServiceServer).UpdateAccountRelationship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountRelationshipsService_UpdateAccountRelationship_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountRelationshipsServiceServer).UpdateAccountRelationship(ctx, req.(*UpdateAccountRelationshipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountRelationshipsService_ListAccountRelationships_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccountRelationshipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountRelationshipsServiceServer).ListAccountRelationships(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountRelationshipsService_ListAccountRelationships_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountRelationshipsServiceServer).ListAccountRelationships(ctx, req.(*ListAccountRelationshipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountRelationshipsService_ServiceDesc is the grpc.ServiceDesc for AccountRelationshipsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountRelationshipsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.shopping.merchant.accounts.v1.AccountRelationshipsService",
	HandlerType: (*AccountRelationshipsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccountRelationship",
			Handler:    _AccountRelationshipsService_GetAccountRelationship_Handler,
		},
		{
			MethodName: "UpdateAccountRelationship",
			Handler:    _AccountRelationshipsService_UpdateAccountRelationship_Handler,
		},
		{
			MethodName: "ListAccountRelationships",
			Handler:    _AccountRelationshipsService_ListAccountRelationships_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/shopping/merchant/accounts/v1/accountrelationships.proto",
}
