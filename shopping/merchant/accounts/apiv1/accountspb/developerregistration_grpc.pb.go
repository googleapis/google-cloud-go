// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/shopping/merchant/accounts/v1/developerregistration.proto

package accountspb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DeveloperRegistrationService_RegisterGcp_FullMethodName              = "/google.shopping.merchant.accounts.v1.DeveloperRegistrationService/RegisterGcp"
	DeveloperRegistrationService_GetDeveloperRegistration_FullMethodName = "/google.shopping.merchant.accounts.v1.DeveloperRegistrationService/GetDeveloperRegistration"
	DeveloperRegistrationService_UnregisterGcp_FullMethodName            = "/google.shopping.merchant.accounts.v1.DeveloperRegistrationService/UnregisterGcp"
)

// DeveloperRegistrationServiceClient is the client API for DeveloperRegistrationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeveloperRegistrationServiceClient interface {
	// Registers the GCP used for the API call to the shopping account passed in
	// the request. Will create a user with an "API developer" and add the
	// "developer_email" as a contact with "API notifications" email preference
	// on.
	RegisterGcp(ctx context.Context, in *RegisterGcpRequest, opts ...grpc.CallOption) (*DeveloperRegistration, error)
	// Retrieves a developer registration for a merchant.
	GetDeveloperRegistration(ctx context.Context, in *GetDeveloperRegistrationRequest, opts ...grpc.CallOption) (*DeveloperRegistration, error)
	// Unregister the calling GCP from the calling shopping account. Note that the
	// GCP will still be able to access the API for at most 1 day from the
	// unregister succussful call.
	UnregisterGcp(ctx context.Context, in *UnregisterGcpRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type developerRegistrationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeveloperRegistrationServiceClient(cc grpc.ClientConnInterface) DeveloperRegistrationServiceClient {
	return &developerRegistrationServiceClient{cc}
}

func (c *developerRegistrationServiceClient) RegisterGcp(ctx context.Context, in *RegisterGcpRequest, opts ...grpc.CallOption) (*DeveloperRegistration, error) {
	out := new(DeveloperRegistration)
	err := c.cc.Invoke(ctx, DeveloperRegistrationService_RegisterGcp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerRegistrationServiceClient) GetDeveloperRegistration(ctx context.Context, in *GetDeveloperRegistrationRequest, opts ...grpc.CallOption) (*DeveloperRegistration, error) {
	out := new(DeveloperRegistration)
	err := c.cc.Invoke(ctx, DeveloperRegistrationService_GetDeveloperRegistration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerRegistrationServiceClient) UnregisterGcp(ctx context.Context, in *UnregisterGcpRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeveloperRegistrationService_UnregisterGcp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeveloperRegistrationServiceServer is the server API for DeveloperRegistrationService service.
// All implementations should embed UnimplementedDeveloperRegistrationServiceServer
// for forward compatibility
type DeveloperRegistrationServiceServer interface {
	// Registers the GCP used for the API call to the shopping account passed in
	// the request. Will create a user with an "API developer" and add the
	// "developer_email" as a contact with "API notifications" email preference
	// on.
	RegisterGcp(context.Context, *RegisterGcpRequest) (*DeveloperRegistration, error)
	// Retrieves a developer registration for a merchant.
	GetDeveloperRegistration(context.Context, *GetDeveloperRegistrationRequest) (*DeveloperRegistration, error)
	// Unregister the calling GCP from the calling shopping account. Note that the
	// GCP will still be able to access the API for at most 1 day from the
	// unregister succussful call.
	UnregisterGcp(context.Context, *UnregisterGcpRequest) (*emptypb.Empty, error)
}

// UnimplementedDeveloperRegistrationServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDeveloperRegistrationServiceServer struct {
}

func (UnimplementedDeveloperRegistrationServiceServer) RegisterGcp(context.Context, *RegisterGcpRequest) (*DeveloperRegistration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterGcp not implemented")
}
func (UnimplementedDeveloperRegistrationServiceServer) GetDeveloperRegistration(context.Context, *GetDeveloperRegistrationRequest) (*DeveloperRegistration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeveloperRegistration not implemented")
}
func (UnimplementedDeveloperRegistrationServiceServer) UnregisterGcp(context.Context, *UnregisterGcpRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterGcp not implemented")
}

// UnsafeDeveloperRegistrationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeveloperRegistrationServiceServer will
// result in compilation errors.
type UnsafeDeveloperRegistrationServiceServer interface {
	mustEmbedUnimplementedDeveloperRegistrationServiceServer()
}

func RegisterDeveloperRegistrationServiceServer(s grpc.ServiceRegistrar, srv DeveloperRegistrationServiceServer) {
	s.RegisterService(&DeveloperRegistrationService_ServiceDesc, srv)
}

func _DeveloperRegistrationService_RegisterGcp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterGcpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperRegistrationServiceServer).RegisterGcp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeveloperRegistrationService_RegisterGcp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperRegistrationServiceServer).RegisterGcp(ctx, req.(*RegisterGcpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeveloperRegistrationService_GetDeveloperRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeveloperRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperRegistrationServiceServer).GetDeveloperRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeveloperRegistrationService_GetDeveloperRegistration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperRegistrationServiceServer).GetDeveloperRegistration(ctx, req.(*GetDeveloperRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeveloperRegistrationService_UnregisterGcp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterGcpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperRegistrationServiceServer).UnregisterGcp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeveloperRegistrationService_UnregisterGcp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperRegistrationServiceServer).UnregisterGcp(ctx, req.(*UnregisterGcpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeveloperRegistrationService_ServiceDesc is the grpc.ServiceDesc for DeveloperRegistrationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeveloperRegistrationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.shopping.merchant.accounts.v1.DeveloperRegistrationService",
	HandlerType: (*DeveloperRegistrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterGcp",
			Handler:    _DeveloperRegistrationService_RegisterGcp_Handler,
		},
		{
			MethodName: "GetDeveloperRegistration",
			Handler:    _DeveloperRegistrationService_GetDeveloperRegistration_Handler,
		},
		{
			MethodName: "UnregisterGcp",
			Handler:    _DeveloperRegistrationService_UnregisterGcp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/shopping/merchant/accounts/v1/developerregistration.proto",
}
