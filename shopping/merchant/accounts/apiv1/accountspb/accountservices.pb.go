// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.7
// source: google/shopping/merchant/accounts/v1/accountservices.proto

package accountspb

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The list of mutability option settings a service can have.
type AccountService_Mutability int32

const (
	// Unused default value
	AccountService_MUTABILITY_UNSPECIFIED AccountService_Mutability = 0
	// The service can be mutated without restrictions.
	AccountService_MUTABLE AccountService_Mutability = 1
	// The service is read-only and must not be mutated.
	AccountService_IMMUTABLE AccountService_Mutability = 2
)

// Enum value maps for AccountService_Mutability.
var (
	AccountService_Mutability_name = map[int32]string{
		0: "MUTABILITY_UNSPECIFIED",
		1: "MUTABLE",
		2: "IMMUTABLE",
	}
	AccountService_Mutability_value = map[string]int32{
		"MUTABILITY_UNSPECIFIED": 0,
		"MUTABLE":                1,
		"IMMUTABLE":              2,
	}
)

func (x AccountService_Mutability) Enum() *AccountService_Mutability {
	p := new(AccountService_Mutability)
	*p = x
	return p
}

func (x AccountService_Mutability) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountService_Mutability) Descriptor() protoreflect.EnumDescriptor {
	return file_google_shopping_merchant_accounts_v1_accountservices_proto_enumTypes[0].Descriptor()
}

func (AccountService_Mutability) Type() protoreflect.EnumType {
	return &file_google_shopping_merchant_accounts_v1_accountservices_proto_enumTypes[0]
}

func (x AccountService_Mutability) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountService_Mutability.Descriptor instead.
func (AccountService_Mutability) EnumDescriptor() ([]byte, []int) {
	return file_google_shopping_merchant_accounts_v1_accountservices_proto_rawDescGZIP(), []int{0, 0}
}

// The approal state of a handshake.
type Handshake_ApprovalState int32

const (
	// Unspecified approval status.
	Handshake_APPROVAL_STATE_UNSPECIFIED Handshake_ApprovalState = 0
	// The service was proposed and is waiting to be confirmed.
	Handshake_PENDING Handshake_ApprovalState = 1
	// Both parties have confirmed the service.
	Handshake_ESTABLISHED Handshake_ApprovalState = 2
	// The service proposal was rejected.
	Handshake_REJECTED Handshake_ApprovalState = 3
)

// Enum value maps for Handshake_ApprovalState.
var (
	Handshake_ApprovalState_name = map[int32]string{
		0: "APPROVAL_STATE_UNSPECIFIED",
		1: "PENDING",
		2: "ESTABLISHED",
		3: "REJECTED",
	}
	Handshake_ApprovalState_value = map[string]int32{
		"APPROVAL_STATE_UNSPECIFIED": 0,
		"PENDING":                    1,
		"ESTABLISHED":                2,
		"REJECTED":                   3,
	}
)

func (x Handshake_ApprovalState) Enum() *Handshake_ApprovalState {
	p := new(Handshake_ApprovalState)
	*p = x
	return p
}

func (x Handshake_ApprovalState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Handshake_ApprovalState) Descriptor() protoreflect.EnumDescriptor {
	return file_google_shopping_merchant_accounts_v1_accountservices_proto_enumTypes[1].Descriptor()
}

func (Handshake_ApprovalState) Type() protoreflect.EnumType {
	return &file_google_shopping_merchant_accounts_v1_accountservices_proto_enumTypes[1]
}

func (x Handshake_ApprovalState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Handshake_ApprovalState.Descriptor instead.
func (Handshake_ApprovalState) EnumDescriptor() ([]byte, []int) {
	return file_google_shopping_merchant_accounts_v1_accountservices_proto_rawDescGZIP(), []int{12, 0}
}

// The various actors that can be involved in a handshake.
type Handshake_Actor int32

const (
	// Unspecified actor.
	Handshake_ACTOR_UNSPECIFIED Handshake_Actor = 0
	// The last change was done by the account who has this service.
	Handshake_ACCOUNT Handshake_Actor = 1
	// The last change was done by the other party who this service points to.
	Handshake_OTHER_PARTY Handshake_Actor = 2
)

// Enum value maps for Handshake_Actor.
var (
	Handshake_Actor_name = map[int32]string{
		0: "ACTOR_UNSPECIFIED",
		1: "ACCOUNT",
		2: "OTHER_PARTY",
	}
	Handshake_Actor_value = map[string]int32{
		"ACTOR_UNSPECIFIED": 0,
		"ACCOUNT":           1,
		"OTHER_PARTY":       2,
	}
)

func (x Handshake_Actor) Enum() *Handshake_Actor {
	p := new(Handshake_Actor)
	*p = x
	return p
}

func (x Handshake_Actor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Handshake_Actor) Descriptor() protoreflect.EnumDescriptor {
	return file_google_shopping_merchant_accounts_v1_accountservices_proto_enumTypes[2].Descriptor()
}

func (Handshake_Actor) Type() protoreflect.EnumType {
	return &file_google_shopping_merchant_accounts_v1_accountservices_proto_enumTypes[2]
}

func (x Handshake_Actor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Handshake_Actor.Descriptor instead.
func (Handshake_Actor) EnumDescriptor() ([]byte, []int) {
	return file_google_shopping_merchant_accounts_v1_accountservices_proto_rawDescGZIP(), []int{12, 1}
}

// The `AccountService` message represents a specific service that a provider
// account offers to a Merchant Center account.
//
// `AccountService` defines the permissions and capabilities granted to the
// provider, allowing for operations such as product management or campaign
// management.
//
// The lifecycle of an `AccountService` involves a proposal phase, where one
// party suggests the service, and an approval phase, where the other party
// accepts or rejects it. This handshake mechanism ensures mutual consent before
// any access is granted. This mechanism safeguards both parties by ensuring
// that access rights are granted appropriately and that both the business and
// provider are aware of the services enabled. In scenarios where a user is an
// admin of both accounts, the approval can happen automatically.
//
// The mutability of a service is also managed through `AccountService`. Some
// services might be immutable, for example, if they were established through
// other systems or APIs, and you cannot alter them through this API.
type AccountService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The payload specified has to correspond to the `service_type`.
	//
	// Types that are assignable to ServiceType:
	//
	//	*AccountService_ProductsManagement
	//	*AccountService_CampaignsManagement
	//	*AccountService_AccountManagement
	//	*AccountService_AccountAggregation
	//	*AccountService_LocalListingManagement
	ServiceType isAccountService_ServiceType `protobuf_oneof:"service_type"`
	// Identifier. The resource name of the account service.
	// Format: `accounts/{account}/services/{service}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. The provider of the service. Either the reference to an
	// account such as `providers/123` or a well-known service provider (one of
	// `providers/GOOGLE_ADS` or `providers/GOOGLE_BUSINESS_PROFILE`).
	Provider *string `protobuf:"bytes,2,opt,name=provider,proto3,oneof" json:"provider,omitempty"`
	// Output only. The human-readable display name of the provider account.
	ProviderDisplayName string `protobuf:"bytes,3,opt,name=provider_display_name,json=providerDisplayName,proto3" json:"provider_display_name,omitempty"`
	// Output only. Information about the state of the service in terms of
	// establishing it (e.g. is it pending approval or approved).
	Handshake *Handshake `protobuf:"bytes,4,opt,name=handshake,proto3" json:"handshake,omitempty"`
	// Output only. Whether the service is mutable (e.g. through Approve / Reject
	// RPCs). A service that was created through another system or API might be
	// immutable.
	Mutability AccountService_Mutability `protobuf:"varint,5,opt,name=mutability,proto3,enum=google.shopping.merchant.accounts.v1.AccountService_Mutability" json:"mutability,omitempty"`
	// Immutable. An optional, immutable identifier that Google uses to refer to
	// this account when communicating with the provider. This should be the
	// unique account ID within the provider's system (for example, your shop ID
	// in Shopify).
	//
	// If you have multiple accounts with the same provider - for instance,
	// different accounts for various regions â€” the `external_account_id`
	// differentiates between them, ensuring accurate linking and integration
	// between Google and the provider.
	ExternalAccountId string `protobuf:"bytes,6,opt,name=external_account_id,json=externalAccountId,proto3" json:"external_account_id,omitempty"`
}

func (x *AccountService) Reset() {
	*x = AccountService{}
	mi := &file_google_shopping_merchant_accounts_v1_accountservices_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountService) ProtoMessage() {}

func (x *AccountService) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_accounts_v1_accountservices_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountService.ProtoReflect.Descriptor instead.
func (*AccountService) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_accounts_v1_accountservices_proto_rawDescGZIP(), []int{0}
}

func (m *AccountService) GetServiceType() isAccountService_ServiceType {
	if m != nil {
		return m.ServiceType
	}
	return nil
}

func (x *AccountService) GetProductsManagement() *ProductsManagement {
	if x, ok := x.GetServiceType().(*AccountService_ProductsManagement); ok {
		return x.ProductsManagement
	}
	return nil
}

func (x *AccountService) GetCampaignsManagement() *CampaignsManagement {
	if x, ok := x.GetServiceType().(*AccountService_CampaignsManagement); ok {
		return x.CampaignsManagement
	}
	return nil
}

func (x *AccountService) GetAccountManagement() *AccountManagement {
	if x, ok := x.GetServiceType().(*AccountService_AccountManagement); ok {
		return x.AccountManagement
	}
	return nil
}

func (x *AccountService) GetAccountAggregation() *AccountAggregation {
	if x, ok := x.GetServiceType().(*AccountService_AccountAggregation); ok {
		return x.AccountAggregation
	}
	return nil
}

func (x *AccountService) GetLocalListingManagement() *LocalListingManagement {
	if x, ok := x.GetServiceType().(*AccountService_LocalListingManagement); ok {
		return x.LocalListingManagement
	}
	return nil
}

func (x *AccountService) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AccountService) GetProvider() string {
	if x != nil && x.Provider != nil {
		return *x.Provider
	}
	return ""
}

func (x *AccountService) GetProviderDisplayName() string {
	if x != nil {
		return x.ProviderDisplayName
	}
	return ""
}

func (x *AccountService) GetHandshake() *Handshake {
	if x != nil {
		return x.Handshake
	}
	return nil
}

func (x *AccountService) GetMutability() AccountService_Mutability {
	if x != nil {
		return x.Mutability
	}
	return AccountService_MUTABILITY_UNSPECIFIED
}

func (x *AccountService) GetExternalAccountId() string {
	if x != nil {
		return x.ExternalAccountId
	}
	return ""
}

type isAccountService_ServiceType interface {
	isAccountService_ServiceType()
}

type AccountService_ProductsManagement struct {
	// Service type for managing products. This allows the provider to handle
	// product data on behalf of the business, including reading and writing
	// product listings. It's commonly used when the provider offers inventory
	// management or catalog synchronization services to keep the business's
	// product information up-to-date across platforms.
	ProductsManagement *ProductsManagement `protobuf:"bytes,100,opt,name=products_management,json=productsManagement,proto3,oneof"`
}

type AccountService_CampaignsManagement struct {
	// Service type for managing advertising campaigns. Grants the provider
	// access to create and manage the business's ad campaigns, including
	// setting up campaigns, adjusting bids, and optimizing performance.
	CampaignsManagement *CampaignsManagement `protobuf:"bytes,101,opt,name=campaigns_management,json=campaignsManagement,proto3,oneof"`
}

type AccountService_AccountManagement struct {
	// Service type for account management. Enables the provider to perform
	// administrative actions on the business's account, such as
	// configuring account settings, managing users, or updating business
	// information.
	AccountManagement *AccountManagement `protobuf:"bytes,102,opt,name=account_management,json=accountManagement,proto3,oneof"`
}

type AccountService_AccountAggregation struct {
	// Service type for account aggregation. This enables the provider, which is
	// an advanced account, to manage multiple sub-accounts (client
	// accounts). Through this service, the advanced account provider can
	// perform administrative and operational tasks across all linked
	// sub-accounts.
	//
	// This is useful for agencies, aggregators, or large retailers that need
	// centralized control over many Merchant Center accounts.
	AccountAggregation *AccountAggregation `protobuf:"bytes,103,opt,name=account_aggregation,json=accountAggregation,proto3,oneof"`
}

type AccountService_LocalListingManagement struct {
	// Service type for local listings management. The business group associated
	// with the external account id will be used to provide local inventory to
	// this Merchant Center account.
	LocalListingManagement *LocalListingManagement `protobuf:"bytes,104,opt,name=local_listing_management,json=localListingManagement,proto3,oneof"`
}

func (*AccountService_ProductsManagement) isAccountService_ServiceType() {}

func (*AccountService_CampaignsManagement) isAccountService_ServiceType() {}

func (*AccountService_AccountManagement) isAccountService_ServiceType() {}

func (*AccountService_AccountAggregation) isAccountService_ServiceType() {}

func (*AccountService_LocalListingManagement) isAccountService_ServiceType() {}

// Request to get an account service.
type GetAccountServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The resource name of the account service to get.
	// Format: `accounts/{account}/services/{service}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetAccountServiceRequest) Reset() {
	*x = GetAccountServiceRequest{}
	mi := &file_google_shopping_merchant_accounts_v1_accountservices_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAccountServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountServiceRequest) ProtoMessage() {}

func (x *GetAccountServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_accounts_v1_accountservices_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountServiceRequest.ProtoReflect.Descriptor instead.
func (*GetAccountServiceRequest) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_accounts_v1_accountservices_proto_rawDescGZIP(), []int{1}
}

func (x *GetAccountServiceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Request to list account services.
type ListAccountServicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent account of the account service to filter by.
	// Format: `accounts/{account}`
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Optional. The token returned by the previous `list` request.
	PageToken string `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Optional. The maximum number of elements to return in the response. Use for
	// paging. If no `page_size` is specified, `100` is used as the default value.
	// The maximum allowed value is `1000`.
	PageSize int32 `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *ListAccountServicesRequest) Reset() {
	*x = ListAccountServicesRequest{}
	mi := &file_google_shopping_merchant_accounts_v1_accountservices_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAccountServicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAccountServicesRequest) ProtoMessage() {}

func (x *ListAccountServicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_accounts_v1_accountservices_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAccountServicesRequest.ProtoReflect.Descriptor instead.
func (*ListAccountServicesRequest) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_accounts_v1_accountservices_proto_rawDescGZIP(), []int{2}
}

func (x *ListAccountServicesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListAccountServicesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListAccountServicesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// Response after trying to list account services.
type ListAccountServicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The account services that match your filter.
	AccountServices []*AccountService `protobuf:"bytes,1,rep,name=account_services,json=accountServices,proto3" json:"account_services,omitempty"`
	// A page token. You can send the `page_token` to get the next page.
	// Only included in the `list` response if there are more pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListAccountServicesResponse) Reset() {
	*x = ListAccountServicesResponse{}
	mi := &file_google_shopping_merchant_accounts_v1_accountservices_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAccountServicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAccountServicesResponse) ProtoMessage() {}

func (x *ListAccountServicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_accounts_v1_accountservices_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAccountServicesResponse.ProtoReflect.Descriptor instead.
func (*ListAccountServicesResponse) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_accounts_v1_accountservices_proto_rawDescGZIP(), []int{3}
}

func (x *ListAccountServicesResponse) GetAccountServices() []*AccountService {
	if x != nil {
		return x.AccountServices
	}
	return nil
}

func (x *ListAccountServicesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Request to propose an account service.
type ProposeAccountServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The resource name of the parent account for the service.
	// Format: `accounts/{account}`
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Required. The provider of the service. Either the reference to an account
	// such as `providers/123` or a well-known service provider (one of
	// `providers/GOOGLE_ADS` or `providers/GOOGLE_BUSINESS_PROFILE`).
	Provider string `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
	// Required. The account service to propose.
	AccountService *AccountService `protobuf:"bytes,4,opt,name=account_service,json=accountService,proto3" json:"account_service,omitempty"`
}

func (x *ProposeAccountServiceRequest) Reset() {
	*x = ProposeAccountServiceRequest{}
	mi := &file_google_shopping_merchant_accounts_v1_accountservices_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProposeAccountServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposeAccountServiceRequest) ProtoMessage() {}

func (x *ProposeAccountServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_accounts_v1_accountservices_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposeAccountServiceRequest.ProtoReflect.Descriptor instead.
func (*ProposeAccountServiceRequest) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_accounts_v1_accountservices_proto_rawDescGZIP(), []int{4}
}

func (x *ProposeAccountServiceRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ProposeAccountServiceRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *ProposeAccountServiceRequest) GetAccountService() *AccountService {
	if x != nil {
		return x.AccountService
	}
	return nil
}

// Request to approve an account service.
type ApproveAccountServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The resource name of the account service to approve.
	// Format: `accounts/{account}/services/{service}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ApproveAccountServiceRequest) Reset() {
	*x = ApproveAccountServiceRequest{}
	mi := &file_google_shopping_merchant_accounts_v1_accountservices_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApproveAccountServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveAccountServiceRequest) ProtoMessage() {}

func (x *ApproveAccountServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_accounts_v1_accountservices_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveAccountServiceRequest.ProtoReflect.Descriptor instead.
func (*ApproveAccountServiceRequest) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_accounts_v1_accountservices_proto_rawDescGZIP(), []int{5}
}

func (x *ApproveAccountServiceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Request to reject an account service.
type RejectAccountServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The resource name of the account service to reject.
	// Format: `accounts/{account}/services/{service}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *RejectAccountServiceRequest) Reset() {
	*x = RejectAccountServiceRequest{}
	mi := &file_google_shopping_merchant_accounts_v1_accountservices_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RejectAccountServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectAccountServiceRequest) ProtoMessage() {}

func (x *RejectAccountServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_accounts_v1_accountservices_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectAccountServiceRequest.ProtoReflect.Descriptor instead.
func (*RejectAccountServiceRequest) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_accounts_v1_accountservices_proto_rawDescGZIP(), []int{6}
}

func (x *RejectAccountServiceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// `ProductsManagement` payload.
type ProductsManagement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProductsManagement) Reset() {
	*x = ProductsManagement{}
	mi := &file_google_shopping_merchant_accounts_v1_accountservices_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductsManagement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductsManagement) ProtoMessage() {}

func (x *ProductsManagement) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_accounts_v1_accountservices_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductsManagement.ProtoReflect.Descriptor instead.
func (*ProductsManagement) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_accounts_v1_accountservices_proto_rawDescGZIP(), []int{7}
}

// `CampaignManagement` payload.
type CampaignsManagement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CampaignsManagement) Reset() {
	*x = CampaignsManagement{}
	mi := &file_google_shopping_merchant_accounts_v1_accountservices_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CampaignsManagement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CampaignsManagement) ProtoMessage() {}

func (x *CampaignsManagement) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_accounts_v1_accountservices_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CampaignsManagement.ProtoReflect.Descriptor instead.
func (*CampaignsManagement) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_accounts_v1_accountservices_proto_rawDescGZIP(), []int{8}
}

// `AccountManagement` payload.
type AccountManagement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AccountManagement) Reset() {
	*x = AccountManagement{}
	mi := &file_google_shopping_merchant_accounts_v1_accountservices_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountManagement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountManagement) ProtoMessage() {}

func (x *AccountManagement) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_accounts_v1_accountservices_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountManagement.ProtoReflect.Descriptor instead.
func (*AccountManagement) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_accounts_v1_accountservices_proto_rawDescGZIP(), []int{9}
}

// `AccountAggregation` payload.
type AccountAggregation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AccountAggregation) Reset() {
	*x = AccountAggregation{}
	mi := &file_google_shopping_merchant_accounts_v1_accountservices_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountAggregation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountAggregation) ProtoMessage() {}

func (x *AccountAggregation) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_accounts_v1_accountservices_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountAggregation.ProtoReflect.Descriptor instead.
func (*AccountAggregation) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_accounts_v1_accountservices_proto_rawDescGZIP(), []int{10}
}

// `LocalListingManagement` payload.
type LocalListingManagement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LocalListingManagement) Reset() {
	*x = LocalListingManagement{}
	mi := &file_google_shopping_merchant_accounts_v1_accountservices_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocalListingManagement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalListingManagement) ProtoMessage() {}

func (x *LocalListingManagement) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_accounts_v1_accountservices_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalListingManagement.ProtoReflect.Descriptor instead.
func (*LocalListingManagement) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_accounts_v1_accountservices_proto_rawDescGZIP(), []int{11}
}

// The current status of establishing of the service.
// (for example, pending approval or approved).
type Handshake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The approval state of this handshake.
	ApprovalState Handshake_ApprovalState `protobuf:"varint,1,opt,name=approval_state,json=approvalState,proto3,enum=google.shopping.merchant.accounts.v1.Handshake_ApprovalState" json:"approval_state,omitempty"`
	// Output only. The most recent account to modify the account service's
	// `approval_status`.
	Actor Handshake_Actor `protobuf:"varint,2,opt,name=actor,proto3,enum=google.shopping.merchant.accounts.v1.Handshake_Actor" json:"actor,omitempty"`
}

func (x *Handshake) Reset() {
	*x = Handshake{}
	mi := &file_google_shopping_merchant_accounts_v1_accountservices_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Handshake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Handshake) ProtoMessage() {}

func (x *Handshake) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_accounts_v1_accountservices_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Handshake.ProtoReflect.Descriptor instead.
func (*Handshake) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_accounts_v1_accountservices_proto_rawDescGZIP(), []int{12}
}

func (x *Handshake) GetApprovalState() Handshake_ApprovalState {
	if x != nil {
		return x.ApprovalState
	}
	return Handshake_APPROVAL_STATE_UNSPECIFIED
}

func (x *Handshake) GetActor() Handshake_Actor {
	if x != nil {
		return x.Actor
	}
	return Handshake_ACTOR_UNSPECIFIED
}

var File_google_shopping_merchant_accounts_v1_accountservices_proto protoreflect.FileDescriptor

var file_google_shopping_merchant_accounts_v1_accountservices_proto_rawDesc = []byte{
	0x0a, 0x3a, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x2f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x80, 0x09, 0x0a, 0x0e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6b, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x12,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x6e, 0x0a, 0x14, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x73, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x13, 0x63,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x68, 0x0a, 0x12, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x11, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x6b, 0x0a, 0x13,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x78, 0x0a, 0x18, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x16, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x08, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x48, 0x01, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x09, 0x68,
	0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x12,
	0x64, 0x0a, 0x0a, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x6d, 0x75, 0x74, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x33, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x05, 0x52, 0x11, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x44, 0x0a, 0x0a, 0x4d, 0x75,
	0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x55, 0x54, 0x41,
	0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x55, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4d, 0x4d, 0x55, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02,
	0x3a, 0x76, 0xea, 0x41, 0x73, 0x0a, 0x29, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x61,
	0x70, 0x69, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x25, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x7d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x7d, 0x2a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x32, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x61, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x45, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x31, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2b, 0x0a, 0x29, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x24, 0x0a,
	0x22, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x22, 0xa6, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5f, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xe7, 0x01, 0x0a, 0x1c, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0xe0, 0x41, 0x02,
	0xfa, 0x41, 0x24, 0x0a, 0x22, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x61, 0x70, 0x69,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x1f, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x12, 0x62, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x22, 0x65, 0x0a, 0x1c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x31, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2b, 0x0a, 0x29, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x64, 0x0a, 0x1b, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2b,
	0x0a, 0x29, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x14, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x15, 0x0a, 0x13, 0x43, 0x61, 0x6d, 0x70, 0x61,
	0x69, 0x67, 0x6e, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x13,
	0x0a, 0x11, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x14, 0x0a, 0x12, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x18, 0x0a, 0x16, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0xe3, 0x02, 0x0a, 0x09, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b,
	0x65, 0x12, 0x69, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0d, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x05,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x2e, 0x41, 0x63, 0x74,
	0x6f, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x5b,
	0x0a, 0x0d, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1e, 0x0a, 0x1a, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b,
	0x45, 0x53, 0x54, 0x41, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a,
	0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x03, 0x22, 0x3c, 0x0a, 0x05, 0x41,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x41,
	0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x10, 0x02, 0x32, 0x85, 0x09, 0x0a, 0x16, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0xc3, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x22, 0x38, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x12,
	0x29, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x3d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xd6, 0x01, 0x0a, 0x13, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x12, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68,
	0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x12, 0xf1, 0x01, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x42, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x5e, 0xda, 0x41, 0x1f, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x2c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2c, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x36, 0x3a, 0x01, 0x2a, 0x22, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x3a,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x12, 0xd6, 0x01, 0x0a, 0x15, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x42, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73,
	0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x43, 0xda, 0x41, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x3a, 0x01, 0x2a, 0x22, 0x31, 0x2f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x12, 0xb5, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x42, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x35, 0x3a, 0x01, 0x2a, 0x22, 0x30, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x2a,
	0x7d, 0x3a, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0x47, 0xca, 0x41, 0x1a, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x27, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a,
	0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x42, 0x87, 0x02, 0x0a, 0x28, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x14,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4a, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x68, 0x6f, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x2f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x70, 0x62, 0x3b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x70, 0x62, 0xaa, 0x02, 0x24, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x53, 0x68, 0x6f, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x24, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x5c, 0x53, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5c, 0x4d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x5c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5c, 0x56, 0x31,
	0xea, 0x02, 0x28, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a, 0x53, 0x68, 0x6f, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x3a, 0x3a, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x3a, 0x3a, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_google_shopping_merchant_accounts_v1_accountservices_proto_rawDescOnce sync.Once
	file_google_shopping_merchant_accounts_v1_accountservices_proto_rawDescData = file_google_shopping_merchant_accounts_v1_accountservices_proto_rawDesc
)

func file_google_shopping_merchant_accounts_v1_accountservices_proto_rawDescGZIP() []byte {
	file_google_shopping_merchant_accounts_v1_accountservices_proto_rawDescOnce.Do(func() {
		file_google_shopping_merchant_accounts_v1_accountservices_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_shopping_merchant_accounts_v1_accountservices_proto_rawDescData)
	})
	return file_google_shopping_merchant_accounts_v1_accountservices_proto_rawDescData
}

var file_google_shopping_merchant_accounts_v1_accountservices_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_google_shopping_merchant_accounts_v1_accountservices_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_google_shopping_merchant_accounts_v1_accountservices_proto_goTypes = []any{
	(AccountService_Mutability)(0),       // 0: google.shopping.merchant.accounts.v1.AccountService.Mutability
	(Handshake_ApprovalState)(0),         // 1: google.shopping.merchant.accounts.v1.Handshake.ApprovalState
	(Handshake_Actor)(0),                 // 2: google.shopping.merchant.accounts.v1.Handshake.Actor
	(*AccountService)(nil),               // 3: google.shopping.merchant.accounts.v1.AccountService
	(*GetAccountServiceRequest)(nil),     // 4: google.shopping.merchant.accounts.v1.GetAccountServiceRequest
	(*ListAccountServicesRequest)(nil),   // 5: google.shopping.merchant.accounts.v1.ListAccountServicesRequest
	(*ListAccountServicesResponse)(nil),  // 6: google.shopping.merchant.accounts.v1.ListAccountServicesResponse
	(*ProposeAccountServiceRequest)(nil), // 7: google.shopping.merchant.accounts.v1.ProposeAccountServiceRequest
	(*ApproveAccountServiceRequest)(nil), // 8: google.shopping.merchant.accounts.v1.ApproveAccountServiceRequest
	(*RejectAccountServiceRequest)(nil),  // 9: google.shopping.merchant.accounts.v1.RejectAccountServiceRequest
	(*ProductsManagement)(nil),           // 10: google.shopping.merchant.accounts.v1.ProductsManagement
	(*CampaignsManagement)(nil),          // 11: google.shopping.merchant.accounts.v1.CampaignsManagement
	(*AccountManagement)(nil),            // 12: google.shopping.merchant.accounts.v1.AccountManagement
	(*AccountAggregation)(nil),           // 13: google.shopping.merchant.accounts.v1.AccountAggregation
	(*LocalListingManagement)(nil),       // 14: google.shopping.merchant.accounts.v1.LocalListingManagement
	(*Handshake)(nil),                    // 15: google.shopping.merchant.accounts.v1.Handshake
	(*emptypb.Empty)(nil),                // 16: google.protobuf.Empty
}
var file_google_shopping_merchant_accounts_v1_accountservices_proto_depIdxs = []int32{
	10, // 0: google.shopping.merchant.accounts.v1.AccountService.products_management:type_name -> google.shopping.merchant.accounts.v1.ProductsManagement
	11, // 1: google.shopping.merchant.accounts.v1.AccountService.campaigns_management:type_name -> google.shopping.merchant.accounts.v1.CampaignsManagement
	12, // 2: google.shopping.merchant.accounts.v1.AccountService.account_management:type_name -> google.shopping.merchant.accounts.v1.AccountManagement
	13, // 3: google.shopping.merchant.accounts.v1.AccountService.account_aggregation:type_name -> google.shopping.merchant.accounts.v1.AccountAggregation
	14, // 4: google.shopping.merchant.accounts.v1.AccountService.local_listing_management:type_name -> google.shopping.merchant.accounts.v1.LocalListingManagement
	15, // 5: google.shopping.merchant.accounts.v1.AccountService.handshake:type_name -> google.shopping.merchant.accounts.v1.Handshake
	0,  // 6: google.shopping.merchant.accounts.v1.AccountService.mutability:type_name -> google.shopping.merchant.accounts.v1.AccountService.Mutability
	3,  // 7: google.shopping.merchant.accounts.v1.ListAccountServicesResponse.account_services:type_name -> google.shopping.merchant.accounts.v1.AccountService
	3,  // 8: google.shopping.merchant.accounts.v1.ProposeAccountServiceRequest.account_service:type_name -> google.shopping.merchant.accounts.v1.AccountService
	1,  // 9: google.shopping.merchant.accounts.v1.Handshake.approval_state:type_name -> google.shopping.merchant.accounts.v1.Handshake.ApprovalState
	2,  // 10: google.shopping.merchant.accounts.v1.Handshake.actor:type_name -> google.shopping.merchant.accounts.v1.Handshake.Actor
	4,  // 11: google.shopping.merchant.accounts.v1.AccountServicesService.GetAccountService:input_type -> google.shopping.merchant.accounts.v1.GetAccountServiceRequest
	5,  // 12: google.shopping.merchant.accounts.v1.AccountServicesService.ListAccountServices:input_type -> google.shopping.merchant.accounts.v1.ListAccountServicesRequest
	7,  // 13: google.shopping.merchant.accounts.v1.AccountServicesService.ProposeAccountService:input_type -> google.shopping.merchant.accounts.v1.ProposeAccountServiceRequest
	8,  // 14: google.shopping.merchant.accounts.v1.AccountServicesService.ApproveAccountService:input_type -> google.shopping.merchant.accounts.v1.ApproveAccountServiceRequest
	9,  // 15: google.shopping.merchant.accounts.v1.AccountServicesService.RejectAccountService:input_type -> google.shopping.merchant.accounts.v1.RejectAccountServiceRequest
	3,  // 16: google.shopping.merchant.accounts.v1.AccountServicesService.GetAccountService:output_type -> google.shopping.merchant.accounts.v1.AccountService
	6,  // 17: google.shopping.merchant.accounts.v1.AccountServicesService.ListAccountServices:output_type -> google.shopping.merchant.accounts.v1.ListAccountServicesResponse
	3,  // 18: google.shopping.merchant.accounts.v1.AccountServicesService.ProposeAccountService:output_type -> google.shopping.merchant.accounts.v1.AccountService
	3,  // 19: google.shopping.merchant.accounts.v1.AccountServicesService.ApproveAccountService:output_type -> google.shopping.merchant.accounts.v1.AccountService
	16, // 20: google.shopping.merchant.accounts.v1.AccountServicesService.RejectAccountService:output_type -> google.protobuf.Empty
	16, // [16:21] is the sub-list for method output_type
	11, // [11:16] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_google_shopping_merchant_accounts_v1_accountservices_proto_init() }
func file_google_shopping_merchant_accounts_v1_accountservices_proto_init() {
	if File_google_shopping_merchant_accounts_v1_accountservices_proto != nil {
		return
	}
	file_google_shopping_merchant_accounts_v1_accountservices_proto_msgTypes[0].OneofWrappers = []any{
		(*AccountService_ProductsManagement)(nil),
		(*AccountService_CampaignsManagement)(nil),
		(*AccountService_AccountManagement)(nil),
		(*AccountService_AccountAggregation)(nil),
		(*AccountService_LocalListingManagement)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_shopping_merchant_accounts_v1_accountservices_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_google_shopping_merchant_accounts_v1_accountservices_proto_goTypes,
		DependencyIndexes: file_google_shopping_merchant_accounts_v1_accountservices_proto_depIdxs,
		EnumInfos:         file_google_shopping_merchant_accounts_v1_accountservices_proto_enumTypes,
		MessageInfos:      file_google_shopping_merchant_accounts_v1_accountservices_proto_msgTypes,
	}.Build()
	File_google_shopping_merchant_accounts_v1_accountservices_proto = out.File
	file_google_shopping_merchant_accounts_v1_accountservices_proto_rawDesc = nil
	file_google_shopping_merchant_accounts_v1_accountservices_proto_goTypes = nil
	file_google_shopping_merchant_accounts_v1_accountservices_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AccountServicesServiceClient is the client API for AccountServicesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AccountServicesServiceClient interface {
	// Retrieve an account service.
	GetAccountService(ctx context.Context, in *GetAccountServiceRequest, opts ...grpc.CallOption) (*AccountService, error)
	// List account services for the specified accounts. Supports filtering.
	ListAccountServices(ctx context.Context, in *ListAccountServicesRequest, opts ...grpc.CallOption) (*ListAccountServicesResponse, error)
	// Propose an account service.
	ProposeAccountService(ctx context.Context, in *ProposeAccountServiceRequest, opts ...grpc.CallOption) (*AccountService, error)
	// Approve an account service proposal.
	ApproveAccountService(ctx context.Context, in *ApproveAccountServiceRequest, opts ...grpc.CallOption) (*AccountService, error)
	// Reject an account service (both proposed and approve services can be
	// rejected).
	RejectAccountService(ctx context.Context, in *RejectAccountServiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type accountServicesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountServicesServiceClient(cc grpc.ClientConnInterface) AccountServicesServiceClient {
	return &accountServicesServiceClient{cc}
}

func (c *accountServicesServiceClient) GetAccountService(ctx context.Context, in *GetAccountServiceRequest, opts ...grpc.CallOption) (*AccountService, error) {
	out := new(AccountService)
	err := c.cc.Invoke(ctx, "/google.shopping.merchant.accounts.v1.AccountServicesService/GetAccountService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServicesServiceClient) ListAccountServices(ctx context.Context, in *ListAccountServicesRequest, opts ...grpc.CallOption) (*ListAccountServicesResponse, error) {
	out := new(ListAccountServicesResponse)
	err := c.cc.Invoke(ctx, "/google.shopping.merchant.accounts.v1.AccountServicesService/ListAccountServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServicesServiceClient) ProposeAccountService(ctx context.Context, in *ProposeAccountServiceRequest, opts ...grpc.CallOption) (*AccountService, error) {
	out := new(AccountService)
	err := c.cc.Invoke(ctx, "/google.shopping.merchant.accounts.v1.AccountServicesService/ProposeAccountService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServicesServiceClient) ApproveAccountService(ctx context.Context, in *ApproveAccountServiceRequest, opts ...grpc.CallOption) (*AccountService, error) {
	out := new(AccountService)
	err := c.cc.Invoke(ctx, "/google.shopping.merchant.accounts.v1.AccountServicesService/ApproveAccountService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServicesServiceClient) RejectAccountService(ctx context.Context, in *RejectAccountServiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/google.shopping.merchant.accounts.v1.AccountServicesService/RejectAccountService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServicesServiceServer is the server API for AccountServicesService service.
type AccountServicesServiceServer interface {
	// Retrieve an account service.
	GetAccountService(context.Context, *GetAccountServiceRequest) (*AccountService, error)
	// List account services for the specified accounts. Supports filtering.
	ListAccountServices(context.Context, *ListAccountServicesRequest) (*ListAccountServicesResponse, error)
	// Propose an account service.
	ProposeAccountService(context.Context, *ProposeAccountServiceRequest) (*AccountService, error)
	// Approve an account service proposal.
	ApproveAccountService(context.Context, *ApproveAccountServiceRequest) (*AccountService, error)
	// Reject an account service (both proposed and approve services can be
	// rejected).
	RejectAccountService(context.Context, *RejectAccountServiceRequest) (*emptypb.Empty, error)
}

// UnimplementedAccountServicesServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAccountServicesServiceServer struct {
}

func (*UnimplementedAccountServicesServiceServer) GetAccountService(context.Context, *GetAccountServiceRequest) (*AccountService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountService not implemented")
}
func (*UnimplementedAccountServicesServiceServer) ListAccountServices(context.Context, *ListAccountServicesRequest) (*ListAccountServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccountServices not implemented")
}
func (*UnimplementedAccountServicesServiceServer) ProposeAccountService(context.Context, *ProposeAccountServiceRequest) (*AccountService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposeAccountService not implemented")
}
func (*UnimplementedAccountServicesServiceServer) ApproveAccountService(context.Context, *ApproveAccountServiceRequest) (*AccountService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveAccountService not implemented")
}
func (*UnimplementedAccountServicesServiceServer) RejectAccountService(context.Context, *RejectAccountServiceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectAccountService not implemented")
}

func RegisterAccountServicesServiceServer(s *grpc.Server, srv AccountServicesServiceServer) {
	s.RegisterService(&_AccountServicesService_serviceDesc, srv)
}

func _AccountServicesService_GetAccountService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServicesServiceServer).GetAccountService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.shopping.merchant.accounts.v1.AccountServicesService/GetAccountService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServicesServiceServer).GetAccountService(ctx, req.(*GetAccountServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServicesService_ListAccountServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccountServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServicesServiceServer).ListAccountServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.shopping.merchant.accounts.v1.AccountServicesService/ListAccountServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServicesServiceServer).ListAccountServices(ctx, req.(*ListAccountServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServicesService_ProposeAccountService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposeAccountServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServicesServiceServer).ProposeAccountService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.shopping.merchant.accounts.v1.AccountServicesService/ProposeAccountService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServicesServiceServer).ProposeAccountService(ctx, req.(*ProposeAccountServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServicesService_ApproveAccountService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveAccountServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServicesServiceServer).ApproveAccountService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.shopping.merchant.accounts.v1.AccountServicesService/ApproveAccountService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServicesServiceServer).ApproveAccountService(ctx, req.(*ApproveAccountServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountServicesService_RejectAccountService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectAccountServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServicesServiceServer).RejectAccountService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.shopping.merchant.accounts.v1.AccountServicesService/RejectAccountService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServicesServiceServer).RejectAccountService(ctx, req.(*RejectAccountServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AccountServicesService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.shopping.merchant.accounts.v1.AccountServicesService",
	HandlerType: (*AccountServicesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccountService",
			Handler:    _AccountServicesService_GetAccountService_Handler,
		},
		{
			MethodName: "ListAccountServices",
			Handler:    _AccountServicesService_ListAccountServices_Handler,
		},
		{
			MethodName: "ProposeAccountService",
			Handler:    _AccountServicesService_ProposeAccountService_Handler,
		},
		{
			MethodName: "ApproveAccountService",
			Handler:    _AccountServicesService_ApproveAccountService_Handler,
		},
		{
			MethodName: "RejectAccountService",
			Handler:    _AccountServicesService_RejectAccountService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/shopping/merchant/accounts/v1/accountservices.proto",
}
