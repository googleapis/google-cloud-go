// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/shopping/merchant/accounts/v1beta/termsofservice.proto

package accountspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TermsOfServiceService_GetTermsOfService_FullMethodName            = "/google.shopping.merchant.accounts.v1beta.TermsOfServiceService/GetTermsOfService"
	TermsOfServiceService_RetrieveLatestTermsOfService_FullMethodName = "/google.shopping.merchant.accounts.v1beta.TermsOfServiceService/RetrieveLatestTermsOfService"
	TermsOfServiceService_AcceptTermsOfService_FullMethodName         = "/google.shopping.merchant.accounts.v1beta.TermsOfServiceService/AcceptTermsOfService"
)

// TermsOfServiceServiceClient is the client API for TermsOfServiceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TermsOfServiceServiceClient interface {
	// Retrieves the `TermsOfService` associated with the provided version.
	GetTermsOfService(ctx context.Context, in *GetTermsOfServiceRequest, opts ...grpc.CallOption) (*TermsOfService, error)
	// Retrieves the latest version of the `TermsOfService` for a given `kind` and
	// `region_code`.
	RetrieveLatestTermsOfService(ctx context.Context, in *RetrieveLatestTermsOfServiceRequest, opts ...grpc.CallOption) (*TermsOfService, error)
	// Accepts a `TermsOfService`. Executing this method requires admin access.
	AcceptTermsOfService(ctx context.Context, in *AcceptTermsOfServiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type termsOfServiceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTermsOfServiceServiceClient(cc grpc.ClientConnInterface) TermsOfServiceServiceClient {
	return &termsOfServiceServiceClient{cc}
}

func (c *termsOfServiceServiceClient) GetTermsOfService(ctx context.Context, in *GetTermsOfServiceRequest, opts ...grpc.CallOption) (*TermsOfService, error) {
	out := new(TermsOfService)
	err := c.cc.Invoke(ctx, TermsOfServiceService_GetTermsOfService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *termsOfServiceServiceClient) RetrieveLatestTermsOfService(ctx context.Context, in *RetrieveLatestTermsOfServiceRequest, opts ...grpc.CallOption) (*TermsOfService, error) {
	out := new(TermsOfService)
	err := c.cc.Invoke(ctx, TermsOfServiceService_RetrieveLatestTermsOfService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *termsOfServiceServiceClient) AcceptTermsOfService(ctx context.Context, in *AcceptTermsOfServiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TermsOfServiceService_AcceptTermsOfService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TermsOfServiceServiceServer is the server API for TermsOfServiceService service.
// All implementations should embed UnimplementedTermsOfServiceServiceServer
// for forward compatibility
type TermsOfServiceServiceServer interface {
	// Retrieves the `TermsOfService` associated with the provided version.
	GetTermsOfService(context.Context, *GetTermsOfServiceRequest) (*TermsOfService, error)
	// Retrieves the latest version of the `TermsOfService` for a given `kind` and
	// `region_code`.
	RetrieveLatestTermsOfService(context.Context, *RetrieveLatestTermsOfServiceRequest) (*TermsOfService, error)
	// Accepts a `TermsOfService`. Executing this method requires admin access.
	AcceptTermsOfService(context.Context, *AcceptTermsOfServiceRequest) (*emptypb.Empty, error)
}

// UnimplementedTermsOfServiceServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTermsOfServiceServiceServer struct {
}

func (UnimplementedTermsOfServiceServiceServer) GetTermsOfService(context.Context, *GetTermsOfServiceRequest) (*TermsOfService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTermsOfService not implemented")
}
func (UnimplementedTermsOfServiceServiceServer) RetrieveLatestTermsOfService(context.Context, *RetrieveLatestTermsOfServiceRequest) (*TermsOfService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveLatestTermsOfService not implemented")
}
func (UnimplementedTermsOfServiceServiceServer) AcceptTermsOfService(context.Context, *AcceptTermsOfServiceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptTermsOfService not implemented")
}

// UnsafeTermsOfServiceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TermsOfServiceServiceServer will
// result in compilation errors.
type UnsafeTermsOfServiceServiceServer interface {
	mustEmbedUnimplementedTermsOfServiceServiceServer()
}

func RegisterTermsOfServiceServiceServer(s grpc.ServiceRegistrar, srv TermsOfServiceServiceServer) {
	s.RegisterService(&TermsOfServiceService_ServiceDesc, srv)
}

func _TermsOfServiceService_GetTermsOfService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTermsOfServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TermsOfServiceServiceServer).GetTermsOfService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TermsOfServiceService_GetTermsOfService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TermsOfServiceServiceServer).GetTermsOfService(ctx, req.(*GetTermsOfServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TermsOfServiceService_RetrieveLatestTermsOfService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveLatestTermsOfServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TermsOfServiceServiceServer).RetrieveLatestTermsOfService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TermsOfServiceService_RetrieveLatestTermsOfService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TermsOfServiceServiceServer).RetrieveLatestTermsOfService(ctx, req.(*RetrieveLatestTermsOfServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TermsOfServiceService_AcceptTermsOfService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptTermsOfServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TermsOfServiceServiceServer).AcceptTermsOfService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TermsOfServiceService_AcceptTermsOfService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TermsOfServiceServiceServer).AcceptTermsOfService(ctx, req.(*AcceptTermsOfServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TermsOfServiceService_ServiceDesc is the grpc.ServiceDesc for TermsOfServiceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TermsOfServiceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.shopping.merchant.accounts.v1beta.TermsOfServiceService",
	HandlerType: (*TermsOfServiceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTermsOfService",
			Handler:    _TermsOfServiceService_GetTermsOfService_Handler,
		},
		{
			MethodName: "RetrieveLatestTermsOfService",
			Handler:    _TermsOfServiceService_RetrieveLatestTermsOfService_Handler,
		},
		{
			MethodName: "AcceptTermsOfService",
			Handler:    _TermsOfServiceService_AcceptTermsOfService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/shopping/merchant/accounts/v1beta/termsofservice.proto",
}
