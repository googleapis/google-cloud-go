// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/shopping/merchant/accounts/v1beta/checkoutsettings.proto

package accountspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CheckoutSettingsService_GetCheckoutSettings_FullMethodName    = "/google.shopping.merchant.accounts.v1beta.CheckoutSettingsService/GetCheckoutSettings"
	CheckoutSettingsService_CreateCheckoutSettings_FullMethodName = "/google.shopping.merchant.accounts.v1beta.CheckoutSettingsService/CreateCheckoutSettings"
	CheckoutSettingsService_UpdateCheckoutSettings_FullMethodName = "/google.shopping.merchant.accounts.v1beta.CheckoutSettingsService/UpdateCheckoutSettings"
	CheckoutSettingsService_DeleteCheckoutSettings_FullMethodName = "/google.shopping.merchant.accounts.v1beta.CheckoutSettingsService/DeleteCheckoutSettings"
)

// CheckoutSettingsServiceClient is the client API for CheckoutSettingsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CheckoutSettingsServiceClient interface {
	// Gets `CheckoutSettings` for the given merchant. This includes
	// information about review state, enrollment state and URL settings.
	GetCheckoutSettings(ctx context.Context, in *GetCheckoutSettingsRequest, opts ...grpc.CallOption) (*CheckoutSettings, error)
	// Creates `CheckoutSettings` for the given merchant.
	CreateCheckoutSettings(ctx context.Context, in *CreateCheckoutSettingsRequest, opts ...grpc.CallOption) (*CheckoutSettings, error)
	// Updates `CheckoutSettings` for the given merchant.
	UpdateCheckoutSettings(ctx context.Context, in *UpdateCheckoutSettingsRequest, opts ...grpc.CallOption) (*CheckoutSettings, error)
	// Deletes `CheckoutSettings` and unenrolls merchant from
	// `Checkout` program.
	DeleteCheckoutSettings(ctx context.Context, in *DeleteCheckoutSettingsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type checkoutSettingsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCheckoutSettingsServiceClient(cc grpc.ClientConnInterface) CheckoutSettingsServiceClient {
	return &checkoutSettingsServiceClient{cc}
}

func (c *checkoutSettingsServiceClient) GetCheckoutSettings(ctx context.Context, in *GetCheckoutSettingsRequest, opts ...grpc.CallOption) (*CheckoutSettings, error) {
	out := new(CheckoutSettings)
	err := c.cc.Invoke(ctx, CheckoutSettingsService_GetCheckoutSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkoutSettingsServiceClient) CreateCheckoutSettings(ctx context.Context, in *CreateCheckoutSettingsRequest, opts ...grpc.CallOption) (*CheckoutSettings, error) {
	out := new(CheckoutSettings)
	err := c.cc.Invoke(ctx, CheckoutSettingsService_CreateCheckoutSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkoutSettingsServiceClient) UpdateCheckoutSettings(ctx context.Context, in *UpdateCheckoutSettingsRequest, opts ...grpc.CallOption) (*CheckoutSettings, error) {
	out := new(CheckoutSettings)
	err := c.cc.Invoke(ctx, CheckoutSettingsService_UpdateCheckoutSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkoutSettingsServiceClient) DeleteCheckoutSettings(ctx context.Context, in *DeleteCheckoutSettingsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CheckoutSettingsService_DeleteCheckoutSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CheckoutSettingsServiceServer is the server API for CheckoutSettingsService service.
// All implementations should embed UnimplementedCheckoutSettingsServiceServer
// for forward compatibility
type CheckoutSettingsServiceServer interface {
	// Gets `CheckoutSettings` for the given merchant. This includes
	// information about review state, enrollment state and URL settings.
	GetCheckoutSettings(context.Context, *GetCheckoutSettingsRequest) (*CheckoutSettings, error)
	// Creates `CheckoutSettings` for the given merchant.
	CreateCheckoutSettings(context.Context, *CreateCheckoutSettingsRequest) (*CheckoutSettings, error)
	// Updates `CheckoutSettings` for the given merchant.
	UpdateCheckoutSettings(context.Context, *UpdateCheckoutSettingsRequest) (*CheckoutSettings, error)
	// Deletes `CheckoutSettings` and unenrolls merchant from
	// `Checkout` program.
	DeleteCheckoutSettings(context.Context, *DeleteCheckoutSettingsRequest) (*emptypb.Empty, error)
}

// UnimplementedCheckoutSettingsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCheckoutSettingsServiceServer struct {
}

func (UnimplementedCheckoutSettingsServiceServer) GetCheckoutSettings(context.Context, *GetCheckoutSettingsRequest) (*CheckoutSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCheckoutSettings not implemented")
}
func (UnimplementedCheckoutSettingsServiceServer) CreateCheckoutSettings(context.Context, *CreateCheckoutSettingsRequest) (*CheckoutSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCheckoutSettings not implemented")
}
func (UnimplementedCheckoutSettingsServiceServer) UpdateCheckoutSettings(context.Context, *UpdateCheckoutSettingsRequest) (*CheckoutSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCheckoutSettings not implemented")
}
func (UnimplementedCheckoutSettingsServiceServer) DeleteCheckoutSettings(context.Context, *DeleteCheckoutSettingsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCheckoutSettings not implemented")
}

// UnsafeCheckoutSettingsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CheckoutSettingsServiceServer will
// result in compilation errors.
type UnsafeCheckoutSettingsServiceServer interface {
	mustEmbedUnimplementedCheckoutSettingsServiceServer()
}

func RegisterCheckoutSettingsServiceServer(s grpc.ServiceRegistrar, srv CheckoutSettingsServiceServer) {
	s.RegisterService(&CheckoutSettingsService_ServiceDesc, srv)
}

func _CheckoutSettingsService_GetCheckoutSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCheckoutSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckoutSettingsServiceServer).GetCheckoutSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CheckoutSettingsService_GetCheckoutSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckoutSettingsServiceServer).GetCheckoutSettings(ctx, req.(*GetCheckoutSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckoutSettingsService_CreateCheckoutSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCheckoutSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckoutSettingsServiceServer).CreateCheckoutSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CheckoutSettingsService_CreateCheckoutSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckoutSettingsServiceServer).CreateCheckoutSettings(ctx, req.(*CreateCheckoutSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckoutSettingsService_UpdateCheckoutSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCheckoutSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckoutSettingsServiceServer).UpdateCheckoutSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CheckoutSettingsService_UpdateCheckoutSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckoutSettingsServiceServer).UpdateCheckoutSettings(ctx, req.(*UpdateCheckoutSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckoutSettingsService_DeleteCheckoutSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCheckoutSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckoutSettingsServiceServer).DeleteCheckoutSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CheckoutSettingsService_DeleteCheckoutSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckoutSettingsServiceServer).DeleteCheckoutSettings(ctx, req.(*DeleteCheckoutSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CheckoutSettingsService_ServiceDesc is the grpc.ServiceDesc for CheckoutSettingsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CheckoutSettingsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.shopping.merchant.accounts.v1beta.CheckoutSettingsService",
	HandlerType: (*CheckoutSettingsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCheckoutSettings",
			Handler:    _CheckoutSettingsService_GetCheckoutSettings_Handler,
		},
		{
			MethodName: "CreateCheckoutSettings",
			Handler:    _CheckoutSettingsService_CreateCheckoutSettings_Handler,
		},
		{
			MethodName: "UpdateCheckoutSettings",
			Handler:    _CheckoutSettingsService_UpdateCheckoutSettings_Handler,
		},
		{
			MethodName: "DeleteCheckoutSettings",
			Handler:    _CheckoutSettingsService_DeleteCheckoutSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/shopping/merchant/accounts/v1beta/checkoutsettings.proto",
}
