// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/shopping/merchant/accounts/v1beta/businessinfo.proto

package accountspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BusinessInfoService_GetBusinessInfo_FullMethodName    = "/google.shopping.merchant.accounts.v1beta.BusinessInfoService/GetBusinessInfo"
	BusinessInfoService_UpdateBusinessInfo_FullMethodName = "/google.shopping.merchant.accounts.v1beta.BusinessInfoService/UpdateBusinessInfo"
)

// BusinessInfoServiceClient is the client API for BusinessInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BusinessInfoServiceClient interface {
	// Retrieves the business info of an account.
	GetBusinessInfo(ctx context.Context, in *GetBusinessInfoRequest, opts ...grpc.CallOption) (*BusinessInfo, error)
	// Updates the business info of an account. Executing this method requires
	// admin access.
	UpdateBusinessInfo(ctx context.Context, in *UpdateBusinessInfoRequest, opts ...grpc.CallOption) (*BusinessInfo, error)
}

type businessInfoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBusinessInfoServiceClient(cc grpc.ClientConnInterface) BusinessInfoServiceClient {
	return &businessInfoServiceClient{cc}
}

func (c *businessInfoServiceClient) GetBusinessInfo(ctx context.Context, in *GetBusinessInfoRequest, opts ...grpc.CallOption) (*BusinessInfo, error) {
	out := new(BusinessInfo)
	err := c.cc.Invoke(ctx, BusinessInfoService_GetBusinessInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessInfoServiceClient) UpdateBusinessInfo(ctx context.Context, in *UpdateBusinessInfoRequest, opts ...grpc.CallOption) (*BusinessInfo, error) {
	out := new(BusinessInfo)
	err := c.cc.Invoke(ctx, BusinessInfoService_UpdateBusinessInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BusinessInfoServiceServer is the server API for BusinessInfoService service.
// All implementations should embed UnimplementedBusinessInfoServiceServer
// for forward compatibility
type BusinessInfoServiceServer interface {
	// Retrieves the business info of an account.
	GetBusinessInfo(context.Context, *GetBusinessInfoRequest) (*BusinessInfo, error)
	// Updates the business info of an account. Executing this method requires
	// admin access.
	UpdateBusinessInfo(context.Context, *UpdateBusinessInfoRequest) (*BusinessInfo, error)
}

// UnimplementedBusinessInfoServiceServer should be embedded to have forward compatible implementations.
type UnimplementedBusinessInfoServiceServer struct {
}

func (UnimplementedBusinessInfoServiceServer) GetBusinessInfo(context.Context, *GetBusinessInfoRequest) (*BusinessInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessInfo not implemented")
}
func (UnimplementedBusinessInfoServiceServer) UpdateBusinessInfo(context.Context, *UpdateBusinessInfoRequest) (*BusinessInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusinessInfo not implemented")
}

// UnsafeBusinessInfoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BusinessInfoServiceServer will
// result in compilation errors.
type UnsafeBusinessInfoServiceServer interface {
	mustEmbedUnimplementedBusinessInfoServiceServer()
}

func RegisterBusinessInfoServiceServer(s grpc.ServiceRegistrar, srv BusinessInfoServiceServer) {
	s.RegisterService(&BusinessInfoService_ServiceDesc, srv)
}

func _BusinessInfoService_GetBusinessInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessInfoServiceServer).GetBusinessInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessInfoService_GetBusinessInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessInfoServiceServer).GetBusinessInfo(ctx, req.(*GetBusinessInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessInfoService_UpdateBusinessInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusinessInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessInfoServiceServer).UpdateBusinessInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessInfoService_UpdateBusinessInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessInfoServiceServer).UpdateBusinessInfo(ctx, req.(*UpdateBusinessInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BusinessInfoService_ServiceDesc is the grpc.ServiceDesc for BusinessInfoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BusinessInfoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.shopping.merchant.accounts.v1beta.BusinessInfoService",
	HandlerType: (*BusinessInfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBusinessInfo",
			Handler:    _BusinessInfoService_GetBusinessInfo_Handler,
		},
		{
			MethodName: "UpdateBusinessInfo",
			Handler:    _BusinessInfoService_UpdateBusinessInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/shopping/merchant/accounts/v1beta/businessinfo.proto",
}
