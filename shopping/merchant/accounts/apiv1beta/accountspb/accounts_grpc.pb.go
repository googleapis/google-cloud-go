// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/shopping/merchant/accounts/v1beta/accounts.proto

package accountspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AccountsService_GetAccount_FullMethodName                = "/google.shopping.merchant.accounts.v1beta.AccountsService/GetAccount"
	AccountsService_CreateAndConfigureAccount_FullMethodName = "/google.shopping.merchant.accounts.v1beta.AccountsService/CreateAndConfigureAccount"
	AccountsService_DeleteAccount_FullMethodName             = "/google.shopping.merchant.accounts.v1beta.AccountsService/DeleteAccount"
	AccountsService_UpdateAccount_FullMethodName             = "/google.shopping.merchant.accounts.v1beta.AccountsService/UpdateAccount"
	AccountsService_ListAccounts_FullMethodName              = "/google.shopping.merchant.accounts.v1beta.AccountsService/ListAccounts"
	AccountsService_ListSubAccounts_FullMethodName           = "/google.shopping.merchant.accounts.v1beta.AccountsService/ListSubAccounts"
)

// AccountsServiceClient is the client API for AccountsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountsServiceClient interface {
	// Retrieves an account from your Merchant Center account.
	// After inserting, updating, or deleting an account, it may take several
	// minutes before changes take effect.
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*Account, error)
	// Creates a standalone Merchant Center account with additional configuration.
	// Adds the user that makes the request as an admin for the new account.
	CreateAndConfigureAccount(ctx context.Context, in *CreateAndConfigureAccountRequest, opts ...grpc.CallOption) (*Account, error)
	// Deletes the specified account regardless of its type: standalone, MCA or
	// sub-account. Deleting an MCA leads to the deletion of all of its
	// sub-accounts. Executing this method requires admin access.
	// The deletion succeeds only if the account does not provide services
	// to any other account and has no processed offers. You can use the `force`
	// parameter to override this.
	DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Updates an account regardless of its type: standalone, MCA or sub-account.
	// Executing this method requires admin access.
	UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*Account, error)
	// Lists accounts accessible to the calling user and matching the
	// constraints of the request such as page size or filters.
	// This is not just listing the sub-accounts of an MCA, but all accounts the
	// calling user has access to including other MCAs, linked accounts,
	// standalone accounts and so on. If no filter is provided, then it returns
	// accounts the user is directly added to.
	ListAccounts(ctx context.Context, in *ListAccountsRequest, opts ...grpc.CallOption) (*ListAccountsResponse, error)
	// List all sub-accounts for a given multi client account. This is a
	// convenience wrapper for the more powerful `ListAccounts` method. This
	// method will produce the same results as calling `ListsAccounts` with the
	// following filter:
	// `relationship(providerId={parent} AND service(type="ACCOUNT_AGGREGATION"))`
	ListSubAccounts(ctx context.Context, in *ListSubAccountsRequest, opts ...grpc.CallOption) (*ListSubAccountsResponse, error)
}

type accountsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountsServiceClient(cc grpc.ClientConnInterface) AccountsServiceClient {
	return &accountsServiceClient{cc}
}

func (c *accountsServiceClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, AccountsService_GetAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsServiceClient) CreateAndConfigureAccount(ctx context.Context, in *CreateAndConfigureAccountRequest, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, AccountsService_CreateAndConfigureAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsServiceClient) DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AccountsService_DeleteAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsServiceClient) UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, AccountsService_UpdateAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsServiceClient) ListAccounts(ctx context.Context, in *ListAccountsRequest, opts ...grpc.CallOption) (*ListAccountsResponse, error) {
	out := new(ListAccountsResponse)
	err := c.cc.Invoke(ctx, AccountsService_ListAccounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsServiceClient) ListSubAccounts(ctx context.Context, in *ListSubAccountsRequest, opts ...grpc.CallOption) (*ListSubAccountsResponse, error) {
	out := new(ListSubAccountsResponse)
	err := c.cc.Invoke(ctx, AccountsService_ListSubAccounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountsServiceServer is the server API for AccountsService service.
// All implementations should embed UnimplementedAccountsServiceServer
// for forward compatibility
type AccountsServiceServer interface {
	// Retrieves an account from your Merchant Center account.
	// After inserting, updating, or deleting an account, it may take several
	// minutes before changes take effect.
	GetAccount(context.Context, *GetAccountRequest) (*Account, error)
	// Creates a standalone Merchant Center account with additional configuration.
	// Adds the user that makes the request as an admin for the new account.
	CreateAndConfigureAccount(context.Context, *CreateAndConfigureAccountRequest) (*Account, error)
	// Deletes the specified account regardless of its type: standalone, MCA or
	// sub-account. Deleting an MCA leads to the deletion of all of its
	// sub-accounts. Executing this method requires admin access.
	// The deletion succeeds only if the account does not provide services
	// to any other account and has no processed offers. You can use the `force`
	// parameter to override this.
	DeleteAccount(context.Context, *DeleteAccountRequest) (*emptypb.Empty, error)
	// Updates an account regardless of its type: standalone, MCA or sub-account.
	// Executing this method requires admin access.
	UpdateAccount(context.Context, *UpdateAccountRequest) (*Account, error)
	// Lists accounts accessible to the calling user and matching the
	// constraints of the request such as page size or filters.
	// This is not just listing the sub-accounts of an MCA, but all accounts the
	// calling user has access to including other MCAs, linked accounts,
	// standalone accounts and so on. If no filter is provided, then it returns
	// accounts the user is directly added to.
	ListAccounts(context.Context, *ListAccountsRequest) (*ListAccountsResponse, error)
	// List all sub-accounts for a given multi client account. This is a
	// convenience wrapper for the more powerful `ListAccounts` method. This
	// method will produce the same results as calling `ListsAccounts` with the
	// following filter:
	// `relationship(providerId={parent} AND service(type="ACCOUNT_AGGREGATION"))`
	ListSubAccounts(context.Context, *ListSubAccountsRequest) (*ListSubAccountsResponse, error)
}

// UnimplementedAccountsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAccountsServiceServer struct {
}

func (UnimplementedAccountsServiceServer) GetAccount(context.Context, *GetAccountRequest) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedAccountsServiceServer) CreateAndConfigureAccount(context.Context, *CreateAndConfigureAccountRequest) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAndConfigureAccount not implemented")
}
func (UnimplementedAccountsServiceServer) DeleteAccount(context.Context, *DeleteAccountRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (UnimplementedAccountsServiceServer) UpdateAccount(context.Context, *UpdateAccountRequest) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (UnimplementedAccountsServiceServer) ListAccounts(context.Context, *ListAccountsRequest) (*ListAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccounts not implemented")
}
func (UnimplementedAccountsServiceServer) ListSubAccounts(context.Context, *ListSubAccountsRequest) (*ListSubAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubAccounts not implemented")
}

// UnsafeAccountsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountsServiceServer will
// result in compilation errors.
type UnsafeAccountsServiceServer interface {
	mustEmbedUnimplementedAccountsServiceServer()
}

func RegisterAccountsServiceServer(s grpc.ServiceRegistrar, srv AccountsServiceServer) {
	s.RegisterService(&AccountsService_ServiceDesc, srv)
}

func _AccountsService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountsService_GetAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServiceServer).GetAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountsService_CreateAndConfigureAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAndConfigureAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServiceServer).CreateAndConfigureAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountsService_CreateAndConfigureAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServiceServer).CreateAndConfigureAccount(ctx, req.(*CreateAndConfigureAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountsService_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServiceServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountsService_DeleteAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServiceServer).DeleteAccount(ctx, req.(*DeleteAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountsService_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServiceServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountsService_UpdateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServiceServer).UpdateAccount(ctx, req.(*UpdateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountsService_ListAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServiceServer).ListAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountsService_ListAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServiceServer).ListAccounts(ctx, req.(*ListAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountsService_ListSubAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServiceServer).ListSubAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountsService_ListSubAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServiceServer).ListSubAccounts(ctx, req.(*ListSubAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountsService_ServiceDesc is the grpc.ServiceDesc for AccountsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.shopping.merchant.accounts.v1beta.AccountsService",
	HandlerType: (*AccountsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccount",
			Handler:    _AccountsService_GetAccount_Handler,
		},
		{
			MethodName: "CreateAndConfigureAccount",
			Handler:    _AccountsService_CreateAndConfigureAccount_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _AccountsService_DeleteAccount_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _AccountsService_UpdateAccount_Handler,
		},
		{
			MethodName: "ListAccounts",
			Handler:    _AccountsService_ListAccounts_Handler,
		},
		{
			MethodName: "ListSubAccounts",
			Handler:    _AccountsService_ListSubAccounts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/shopping/merchant/accounts/v1beta/accounts.proto",
}
