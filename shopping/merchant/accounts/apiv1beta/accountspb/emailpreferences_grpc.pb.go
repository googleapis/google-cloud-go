// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/shopping/merchant/accounts/v1beta/emailpreferences.proto

package accountspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EmailPreferencesService_GetEmailPreferences_FullMethodName    = "/google.shopping.merchant.accounts.v1beta.EmailPreferencesService/GetEmailPreferences"
	EmailPreferencesService_UpdateEmailPreferences_FullMethodName = "/google.shopping.merchant.accounts.v1beta.EmailPreferencesService/UpdateEmailPreferences"
)

// EmailPreferencesServiceClient is the client API for EmailPreferencesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmailPreferencesServiceClient interface {
	// Returns the email preferences for a Merchant Center account user.
	//
	// Use the name=accounts/*/users/me/emailPreferences alias to get preferences
	// for the authenticated user.
	GetEmailPreferences(ctx context.Context, in *GetEmailPreferencesRequest, opts ...grpc.CallOption) (*EmailPreferences, error)
	// Updates the email preferences for a Merchant Center account user. MCA users
	// should specify the MCA account rather than a sub-account of the MCA.
	//
	// Preferences which are not explicitly selected in the update mask will not
	// be updated.
	//
	// It is invalid for updates to specify an UNCONFIRMED opt-in status value.
	//
	// Use the name=accounts/*/users/me/emailPreferences alias to update
	// preferences
	// for the authenticated user.
	UpdateEmailPreferences(ctx context.Context, in *UpdateEmailPreferencesRequest, opts ...grpc.CallOption) (*EmailPreferences, error)
}

type emailPreferencesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmailPreferencesServiceClient(cc grpc.ClientConnInterface) EmailPreferencesServiceClient {
	return &emailPreferencesServiceClient{cc}
}

func (c *emailPreferencesServiceClient) GetEmailPreferences(ctx context.Context, in *GetEmailPreferencesRequest, opts ...grpc.CallOption) (*EmailPreferences, error) {
	out := new(EmailPreferences)
	err := c.cc.Invoke(ctx, EmailPreferencesService_GetEmailPreferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailPreferencesServiceClient) UpdateEmailPreferences(ctx context.Context, in *UpdateEmailPreferencesRequest, opts ...grpc.CallOption) (*EmailPreferences, error) {
	out := new(EmailPreferences)
	err := c.cc.Invoke(ctx, EmailPreferencesService_UpdateEmailPreferences_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmailPreferencesServiceServer is the server API for EmailPreferencesService service.
// All implementations should embed UnimplementedEmailPreferencesServiceServer
// for forward compatibility
type EmailPreferencesServiceServer interface {
	// Returns the email preferences for a Merchant Center account user.
	//
	// Use the name=accounts/*/users/me/emailPreferences alias to get preferences
	// for the authenticated user.
	GetEmailPreferences(context.Context, *GetEmailPreferencesRequest) (*EmailPreferences, error)
	// Updates the email preferences for a Merchant Center account user. MCA users
	// should specify the MCA account rather than a sub-account of the MCA.
	//
	// Preferences which are not explicitly selected in the update mask will not
	// be updated.
	//
	// It is invalid for updates to specify an UNCONFIRMED opt-in status value.
	//
	// Use the name=accounts/*/users/me/emailPreferences alias to update
	// preferences
	// for the authenticated user.
	UpdateEmailPreferences(context.Context, *UpdateEmailPreferencesRequest) (*EmailPreferences, error)
}

// UnimplementedEmailPreferencesServiceServer should be embedded to have forward compatible implementations.
type UnimplementedEmailPreferencesServiceServer struct {
}

func (UnimplementedEmailPreferencesServiceServer) GetEmailPreferences(context.Context, *GetEmailPreferencesRequest) (*EmailPreferences, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmailPreferences not implemented")
}
func (UnimplementedEmailPreferencesServiceServer) UpdateEmailPreferences(context.Context, *UpdateEmailPreferencesRequest) (*EmailPreferences, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmailPreferences not implemented")
}

// UnsafeEmailPreferencesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmailPreferencesServiceServer will
// result in compilation errors.
type UnsafeEmailPreferencesServiceServer interface {
	mustEmbedUnimplementedEmailPreferencesServiceServer()
}

func RegisterEmailPreferencesServiceServer(s grpc.ServiceRegistrar, srv EmailPreferencesServiceServer) {
	s.RegisterService(&EmailPreferencesService_ServiceDesc, srv)
}

func _EmailPreferencesService_GetEmailPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmailPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailPreferencesServiceServer).GetEmailPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailPreferencesService_GetEmailPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailPreferencesServiceServer).GetEmailPreferences(ctx, req.(*GetEmailPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailPreferencesService_UpdateEmailPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmailPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailPreferencesServiceServer).UpdateEmailPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailPreferencesService_UpdateEmailPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailPreferencesServiceServer).UpdateEmailPreferences(ctx, req.(*UpdateEmailPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmailPreferencesService_ServiceDesc is the grpc.ServiceDesc for EmailPreferencesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmailPreferencesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.shopping.merchant.accounts.v1beta.EmailPreferencesService",
	HandlerType: (*EmailPreferencesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEmailPreferences",
			Handler:    _EmailPreferencesService_GetEmailPreferences_Handler,
		},
		{
			MethodName: "UpdateEmailPreferences",
			Handler:    _EmailPreferencesService_UpdateEmailPreferences_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/shopping/merchant/accounts/v1beta/emailpreferences.proto",
}
