// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/shopping/merchant/accounts/v1beta/lfpproviders.proto

package accountspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LfpProvidersService_FindLfpProviders_FullMethodName = "/google.shopping.merchant.accounts.v1beta.LfpProvidersService/FindLfpProviders"
	LfpProvidersService_LinkLfpProvider_FullMethodName  = "/google.shopping.merchant.accounts.v1beta.LfpProvidersService/LinkLfpProvider"
)

// LfpProvidersServiceClient is the client API for LfpProvidersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LfpProvidersServiceClient interface {
	// Find the LFP provider candidates in a given country.
	FindLfpProviders(ctx context.Context, in *FindLfpProvidersRequest, opts ...grpc.CallOption) (*FindLfpProvidersResponse, error)
	// Link the specified merchant to a LFP provider for the specified country.
	LinkLfpProvider(ctx context.Context, in *LinkLfpProviderRequest, opts ...grpc.CallOption) (*LinkLfpProviderResponse, error)
}

type lfpProvidersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLfpProvidersServiceClient(cc grpc.ClientConnInterface) LfpProvidersServiceClient {
	return &lfpProvidersServiceClient{cc}
}

func (c *lfpProvidersServiceClient) FindLfpProviders(ctx context.Context, in *FindLfpProvidersRequest, opts ...grpc.CallOption) (*FindLfpProvidersResponse, error) {
	out := new(FindLfpProvidersResponse)
	err := c.cc.Invoke(ctx, LfpProvidersService_FindLfpProviders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lfpProvidersServiceClient) LinkLfpProvider(ctx context.Context, in *LinkLfpProviderRequest, opts ...grpc.CallOption) (*LinkLfpProviderResponse, error) {
	out := new(LinkLfpProviderResponse)
	err := c.cc.Invoke(ctx, LfpProvidersService_LinkLfpProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LfpProvidersServiceServer is the server API for LfpProvidersService service.
// All implementations should embed UnimplementedLfpProvidersServiceServer
// for forward compatibility
type LfpProvidersServiceServer interface {
	// Find the LFP provider candidates in a given country.
	FindLfpProviders(context.Context, *FindLfpProvidersRequest) (*FindLfpProvidersResponse, error)
	// Link the specified merchant to a LFP provider for the specified country.
	LinkLfpProvider(context.Context, *LinkLfpProviderRequest) (*LinkLfpProviderResponse, error)
}

// UnimplementedLfpProvidersServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLfpProvidersServiceServer struct {
}

func (UnimplementedLfpProvidersServiceServer) FindLfpProviders(context.Context, *FindLfpProvidersRequest) (*FindLfpProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindLfpProviders not implemented")
}
func (UnimplementedLfpProvidersServiceServer) LinkLfpProvider(context.Context, *LinkLfpProviderRequest) (*LinkLfpProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkLfpProvider not implemented")
}

// UnsafeLfpProvidersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LfpProvidersServiceServer will
// result in compilation errors.
type UnsafeLfpProvidersServiceServer interface {
	mustEmbedUnimplementedLfpProvidersServiceServer()
}

func RegisterLfpProvidersServiceServer(s grpc.ServiceRegistrar, srv LfpProvidersServiceServer) {
	s.RegisterService(&LfpProvidersService_ServiceDesc, srv)
}

func _LfpProvidersService_FindLfpProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindLfpProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LfpProvidersServiceServer).FindLfpProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LfpProvidersService_FindLfpProviders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LfpProvidersServiceServer).FindLfpProviders(ctx, req.(*FindLfpProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LfpProvidersService_LinkLfpProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkLfpProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LfpProvidersServiceServer).LinkLfpProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LfpProvidersService_LinkLfpProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LfpProvidersServiceServer).LinkLfpProvider(ctx, req.(*LinkLfpProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LfpProvidersService_ServiceDesc is the grpc.ServiceDesc for LfpProvidersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LfpProvidersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.shopping.merchant.accounts.v1beta.LfpProvidersService",
	HandlerType: (*LfpProvidersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindLfpProviders",
			Handler:    _LfpProvidersService_FindLfpProviders_Handler,
		},
		{
			MethodName: "LinkLfpProvider",
			Handler:    _LfpProvidersService_LinkLfpProvider_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/shopping/merchant/accounts/v1beta/lfpproviders.proto",
}
