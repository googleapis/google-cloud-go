// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.7
// source: google/shopping/merchant/accounts/v1beta/omnichannelsettings.proto

package accountspb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The product page experience type, which is also called the Local Store
// Front (LSF) type. Check the [HC
// article](https://support.google.com/merchants/answer/7178526) for more
// details.
type OmnichannelSetting_LsfType int32

const (
	// Default value. This value is unused.
	OmnichannelSetting_LSF_TYPE_UNSPECIFIED OmnichannelSetting_LsfType = 0
	// Google-Hosted Local Store Front. Check the [HC
	// article](https://support.google.com/merchants/answer/14869424) for more
	// details.
	OmnichannelSetting_GHLSF OmnichannelSetting_LsfType = 1
	// Merchant-Hosted Local Store Front Basic. Check the [HC
	// article](https://support.google.com/merchants/answer/14615867) for more
	// details.
	OmnichannelSetting_MHLSF_BASIC OmnichannelSetting_LsfType = 2
	// Merchant-Hosted Local Store Front Full. Check the [HC
	// article](https://support.google.com/merchants/answer/14617076) for more
	// details.
	OmnichannelSetting_MHLSF_FULL OmnichannelSetting_LsfType = 3
)

// Enum value maps for OmnichannelSetting_LsfType.
var (
	OmnichannelSetting_LsfType_name = map[int32]string{
		0: "LSF_TYPE_UNSPECIFIED",
		1: "GHLSF",
		2: "MHLSF_BASIC",
		3: "MHLSF_FULL",
	}
	OmnichannelSetting_LsfType_value = map[string]int32{
		"LSF_TYPE_UNSPECIFIED": 0,
		"GHLSF":                1,
		"MHLSF_BASIC":          2,
		"MHLSF_FULL":           3,
	}
)

func (x OmnichannelSetting_LsfType) Enum() *OmnichannelSetting_LsfType {
	p := new(OmnichannelSetting_LsfType)
	*p = x
	return p
}

func (x OmnichannelSetting_LsfType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OmnichannelSetting_LsfType) Descriptor() protoreflect.EnumDescriptor {
	return file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_enumTypes[0].Descriptor()
}

func (OmnichannelSetting_LsfType) Type() protoreflect.EnumType {
	return &file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_enumTypes[0]
}

func (x OmnichannelSetting_LsfType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OmnichannelSetting_LsfType.Descriptor instead.
func (OmnichannelSetting_LsfType) EnumDescriptor() ([]byte, []int) {
	return file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_rawDescGZIP(), []int{0, 0}
}

// The state of the review process.
type ReviewState_State int32

const (
	// Default value. This value is unused.
	ReviewState_STATE_UNSPECIFIED ReviewState_State = 0
	// The review process has concluded successfully. The reviewed item is
	// active.
	ReviewState_ACTIVE ReviewState_State = 1
	// The review process failed.
	ReviewState_FAILED ReviewState_State = 2
	// The review process is running.
	ReviewState_RUNNING ReviewState_State = 3
	// The review process is waiting for the merchant to take action.
	ReviewState_ACTION_REQUIRED ReviewState_State = 4
)

// Enum value maps for ReviewState_State.
var (
	ReviewState_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "ACTIVE",
		2: "FAILED",
		3: "RUNNING",
		4: "ACTION_REQUIRED",
	}
	ReviewState_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"ACTIVE":            1,
		"FAILED":            2,
		"RUNNING":           3,
		"ACTION_REQUIRED":   4,
	}
)

func (x ReviewState_State) Enum() *ReviewState_State {
	p := new(ReviewState_State)
	*p = x
	return p
}

func (x ReviewState_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReviewState_State) Descriptor() protoreflect.EnumDescriptor {
	return file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_enumTypes[1].Descriptor()
}

func (ReviewState_State) Type() protoreflect.EnumType {
	return &file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_enumTypes[1]
}

func (x ReviewState_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReviewState_State.Descriptor instead.
func (ReviewState_State) EnumDescriptor() ([]byte, []int) {
	return file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_rawDescGZIP(), []int{1, 0}
}

// The state of the [inventory
// verification](https://support.google.com/merchants/answer/14684499?hl=en&ref_topic=15145634&sjid=6892280366904591178-NC)
// process.
type InventoryVerification_State int32

const (
	// Default value. This value is unused.
	InventoryVerification_STATE_UNSPECIFIED InventoryVerification_State = 0
	// When the merchant needs to initiate the inventory
	// verification process. The next state is INACTIVE.
	InventoryVerification_ACTION_REQUIRED InventoryVerification_State = 1
	// When the merchant is ready to request inventory verification.
	InventoryVerification_INACTIVE InventoryVerification_State = 5
	// The inventory verification process is running. If the merchant is
	// rejected, the next state is INACTIVE.
	InventoryVerification_RUNNING InventoryVerification_State = 2
	// The inventory verification process succeeded.
	InventoryVerification_SUCCEEDED InventoryVerification_State = 3
	// When merchant fails the inventory verification process and all attempts
	// are exhausted.
	InventoryVerification_SUSPENDED InventoryVerification_State = 4
)

// Enum value maps for InventoryVerification_State.
var (
	InventoryVerification_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "ACTION_REQUIRED",
		5: "INACTIVE",
		2: "RUNNING",
		3: "SUCCEEDED",
		4: "SUSPENDED",
	}
	InventoryVerification_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"ACTION_REQUIRED":   1,
		"INACTIVE":          5,
		"RUNNING":           2,
		"SUCCEEDED":         3,
		"SUSPENDED":         4,
	}
)

func (x InventoryVerification_State) Enum() *InventoryVerification_State {
	p := new(InventoryVerification_State)
	*p = x
	return p
}

func (x InventoryVerification_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InventoryVerification_State) Descriptor() protoreflect.EnumDescriptor {
	return file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_enumTypes[2].Descriptor()
}

func (InventoryVerification_State) Type() protoreflect.EnumType {
	return &file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_enumTypes[2]
}

func (x InventoryVerification_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InventoryVerification_State.Descriptor instead.
func (InventoryVerification_State) EnumDescriptor() ([]byte, []int) {
	return file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_rawDescGZIP(), []int{7, 0}
}

// Collection of information related to the omnichannel settings of a merchant.
type OmnichannelSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier. The resource name of the omnichannel setting. Format:
	// `accounts/{account}/omnichannelSettings/{omnichannel_setting}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Required. Immutable. Region code defined by
	// [CLDR](https://cldr.unicode.org/). Must be provided in the Create method,
	// and is immutable.
	RegionCode string `protobuf:"bytes,2,opt,name=region_code,json=regionCode,proto3" json:"region_code,omitempty"`
	// Required. The Local Store Front type for this country.
	LsfType OmnichannelSetting_LsfType `protobuf:"varint,12,opt,name=lsf_type,json=lsfType,proto3,enum=google.shopping.merchant.accounts.v1beta.OmnichannelSetting_LsfType" json:"lsf_type,omitempty"`
	// Optional. The InStock URI and state for this country.
	InStock *InStock `protobuf:"bytes,13,opt,name=in_stock,json=inStock,proto3" json:"in_stock,omitempty"`
	// Optional. The Pickup URI and state for this country.
	Pickup *Pickup `protobuf:"bytes,14,opt,name=pickup,proto3" json:"pickup,omitempty"`
	// Output only. The established link to a LFP provider.
	LfpLink *LfpLink `protobuf:"bytes,5,opt,name=lfp_link,json=lfpLink,proto3" json:"lfp_link,omitempty"`
	// Optional. The On Display to Order (ODO) policy URI and state for this
	// country.
	Odo *OnDisplayToOrder `protobuf:"bytes,6,opt,name=odo,proto3" json:"odo,omitempty"`
	// Optional. The about page URI and state for this country.
	About *About `protobuf:"bytes,7,opt,name=about,proto3" json:"about,omitempty"`
	// Optional. The inventory verification contact and state for this country.
	InventoryVerification *InventoryVerification `protobuf:"bytes,8,opt,name=inventory_verification,json=inventoryVerification,proto3" json:"inventory_verification,omitempty"`
}

func (x *OmnichannelSetting) Reset() {
	*x = OmnichannelSetting{}
	mi := &file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OmnichannelSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmnichannelSetting) ProtoMessage() {}

func (x *OmnichannelSetting) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmnichannelSetting.ProtoReflect.Descriptor instead.
func (*OmnichannelSetting) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_rawDescGZIP(), []int{0}
}

func (x *OmnichannelSetting) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OmnichannelSetting) GetRegionCode() string {
	if x != nil {
		return x.RegionCode
	}
	return ""
}

func (x *OmnichannelSetting) GetLsfType() OmnichannelSetting_LsfType {
	if x != nil {
		return x.LsfType
	}
	return OmnichannelSetting_LSF_TYPE_UNSPECIFIED
}

func (x *OmnichannelSetting) GetInStock() *InStock {
	if x != nil {
		return x.InStock
	}
	return nil
}

func (x *OmnichannelSetting) GetPickup() *Pickup {
	if x != nil {
		return x.Pickup
	}
	return nil
}

func (x *OmnichannelSetting) GetLfpLink() *LfpLink {
	if x != nil {
		return x.LfpLink
	}
	return nil
}

func (x *OmnichannelSetting) GetOdo() *OnDisplayToOrder {
	if x != nil {
		return x.Odo
	}
	return nil
}

func (x *OmnichannelSetting) GetAbout() *About {
	if x != nil {
		return x.About
	}
	return nil
}

func (x *OmnichannelSetting) GetInventoryVerification() *InventoryVerification {
	if x != nil {
		return x.InventoryVerification
	}
	return nil
}

// The state of a omnichannel setting related review process.
type ReviewState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReviewState) Reset() {
	*x = ReviewState{}
	mi := &file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReviewState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReviewState) ProtoMessage() {}

func (x *ReviewState) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReviewState.ProtoReflect.Descriptor instead.
func (*ReviewState) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_rawDescGZIP(), []int{1}
}

// Collection of information related to InStock.
type InStock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Product landing page URI. It is only used for the review of MHLSF
	// in-stock serving. This URI domain should match with the business's
	// homepage. Required to be empty if the lsf_type is GHLSF, and required when
	// the lsf_type is MHLSF_FULL or MHLSF_BASIC.
	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	// Output only. The state of the in-stock serving.
	State ReviewState_State `protobuf:"varint,2,opt,name=state,proto3,enum=google.shopping.merchant.accounts.v1beta.ReviewState_State" json:"state,omitempty"`
}

func (x *InStock) Reset() {
	*x = InStock{}
	mi := &file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InStock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InStock) ProtoMessage() {}

func (x *InStock) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InStock.ProtoReflect.Descriptor instead.
func (*InStock) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_rawDescGZIP(), []int{2}
}

func (x *InStock) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *InStock) GetState() ReviewState_State {
	if x != nil {
		return x.State
	}
	return ReviewState_STATE_UNSPECIFIED
}

// Collection of information related to Pickup.
type Pickup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Pickup product page URI. It is only used for the review of pickup
	// serving. This URI domain should match with the business's homepage.
	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	// Output only. The state of the pickup serving.
	State ReviewState_State `protobuf:"varint,2,opt,name=state,proto3,enum=google.shopping.merchant.accounts.v1beta.ReviewState_State" json:"state,omitempty"`
}

func (x *Pickup) Reset() {
	*x = Pickup{}
	mi := &file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pickup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pickup) ProtoMessage() {}

func (x *Pickup) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pickup.ProtoReflect.Descriptor instead.
func (*Pickup) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_rawDescGZIP(), []int{3}
}

func (x *Pickup) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *Pickup) GetState() ReviewState_State {
	if x != nil {
		return x.State
	}
	return ReviewState_STATE_UNSPECIFIED
}

// Collection of information related to the LFP link.
type LfpLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The resource name of the LFP provider.
	// Format: `lfpProviders/{lfp_provider}`
	LfpProvider string `protobuf:"bytes,1,opt,name=lfp_provider,json=lfpProvider,proto3" json:"lfp_provider,omitempty"`
	// Required. The account ID by which this merchant is known to the LFP
	// provider.
	ExternalAccountId string `protobuf:"bytes,2,opt,name=external_account_id,json=externalAccountId,proto3" json:"external_account_id,omitempty"`
	// Output only. The state of the LFP link.
	State ReviewState_State `protobuf:"varint,3,opt,name=state,proto3,enum=google.shopping.merchant.accounts.v1beta.ReviewState_State" json:"state,omitempty"`
}

func (x *LfpLink) Reset() {
	*x = LfpLink{}
	mi := &file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LfpLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LfpLink) ProtoMessage() {}

func (x *LfpLink) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LfpLink.ProtoReflect.Descriptor instead.
func (*LfpLink) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_rawDescGZIP(), []int{4}
}

func (x *LfpLink) GetLfpProvider() string {
	if x != nil {
		return x.LfpProvider
	}
	return ""
}

func (x *LfpLink) GetExternalAccountId() string {
	if x != nil {
		return x.ExternalAccountId
	}
	return ""
}

func (x *LfpLink) GetState() ReviewState_State {
	if x != nil {
		return x.State
	}
	return ReviewState_STATE_UNSPECIFIED
}

// Collection of information related to the on display to order
// ([ODO](https://support.google.com/merchants/answer/14615056?hl=en&ref_topic=15145747&sjid=6892280366904591178-NC)).
type OnDisplayToOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The on display to order (ODO) policy URI.
	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	// Output only. The state of the URI.
	State ReviewState_State `protobuf:"varint,2,opt,name=state,proto3,enum=google.shopping.merchant.accounts.v1beta.ReviewState_State" json:"state,omitempty"`
}

func (x *OnDisplayToOrder) Reset() {
	*x = OnDisplayToOrder{}
	mi := &file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OnDisplayToOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnDisplayToOrder) ProtoMessage() {}

func (x *OnDisplayToOrder) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnDisplayToOrder.ProtoReflect.Descriptor instead.
func (*OnDisplayToOrder) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_rawDescGZIP(), []int{5}
}

func (x *OnDisplayToOrder) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *OnDisplayToOrder) GetState() ReviewState_State {
	if x != nil {
		return x.State
	}
	return ReviewState_STATE_UNSPECIFIED
}

// Collection of information related to the about page
// ([impressum](https://support.google.com/merchants/answer/14675634?hl=en&ref_topic=15145634&sjid=6892280366904591178-NC)).
type About struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The about page URI.
	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	// Output only. The state of the URI.
	State ReviewState_State `protobuf:"varint,2,opt,name=state,proto3,enum=google.shopping.merchant.accounts.v1beta.ReviewState_State" json:"state,omitempty"`
}

func (x *About) Reset() {
	*x = About{}
	mi := &file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *About) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*About) ProtoMessage() {}

func (x *About) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use About.ProtoReflect.Descriptor instead.
func (*About) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_rawDescGZIP(), []int{6}
}

func (x *About) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *About) GetState() ReviewState_State {
	if x != nil {
		return x.State
	}
	return ReviewState_STATE_UNSPECIFIED
}

// Collection of information related to [inventory
// verification](https://support.google.com/merchants/answer/14684499?hl=en&ref_topic=15145634&sjid=6892280366904591178-NC).
type InventoryVerification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The state of the inventory verification process.
	State InventoryVerification_State `protobuf:"varint,1,opt,name=state,proto3,enum=google.shopping.merchant.accounts.v1beta.InventoryVerification_State" json:"state,omitempty"`
	// Required. The name of the contact for the inventory verification process.
	Contact string `protobuf:"bytes,2,opt,name=contact,proto3" json:"contact,omitempty"`
	// Required. The email address of the contact for the inventory verification
	// process.
	ContactEmail string `protobuf:"bytes,3,opt,name=contact_email,json=contactEmail,proto3" json:"contact_email,omitempty"`
	// Output only. The state of the contact verification.
	ContactState ReviewState_State `protobuf:"varint,4,opt,name=contact_state,json=contactState,proto3,enum=google.shopping.merchant.accounts.v1beta.ReviewState_State" json:"contact_state,omitempty"`
}

func (x *InventoryVerification) Reset() {
	*x = InventoryVerification{}
	mi := &file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InventoryVerification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryVerification) ProtoMessage() {}

func (x *InventoryVerification) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryVerification.ProtoReflect.Descriptor instead.
func (*InventoryVerification) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_rawDescGZIP(), []int{7}
}

func (x *InventoryVerification) GetState() InventoryVerification_State {
	if x != nil {
		return x.State
	}
	return InventoryVerification_STATE_UNSPECIFIED
}

func (x *InventoryVerification) GetContact() string {
	if x != nil {
		return x.Contact
	}
	return ""
}

func (x *InventoryVerification) GetContactEmail() string {
	if x != nil {
		return x.ContactEmail
	}
	return ""
}

func (x *InventoryVerification) GetContactState() ReviewState_State {
	if x != nil {
		return x.ContactState
	}
	return ReviewState_STATE_UNSPECIFIED
}

// Request message for the GetOmnichannelSettings method.
type GetOmnichannelSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the omnichannel setting to retrieve.
	// Format: `accounts/{account}/omnichannelSettings/{omnichannel_setting}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOmnichannelSettingRequest) Reset() {
	*x = GetOmnichannelSettingRequest{}
	mi := &file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOmnichannelSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOmnichannelSettingRequest) ProtoMessage() {}

func (x *GetOmnichannelSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOmnichannelSettingRequest.ProtoReflect.Descriptor instead.
func (*GetOmnichannelSettingRequest) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_rawDescGZIP(), []int{8}
}

func (x *GetOmnichannelSettingRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Request message for the ListOmnichannelSettings method.
type ListOmnichannelSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent, which owns this collection of omnichannel settings.
	// Format: `accounts/{account}`
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Optional. The maximum number of omnichannel settings to return. The service
	// may return fewer than this value. If unspecified, at most 50 omnichannel
	// settings will be returned. The maximum value is 1000; values above 1000
	// will be coerced to 1000.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Optional. A page token, received from a previous `ListOmnichannelSettings`
	// call. Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListOmnichannelSettings`
	// must match the call that provided the page token.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListOmnichannelSettingsRequest) Reset() {
	*x = ListOmnichannelSettingsRequest{}
	mi := &file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListOmnichannelSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOmnichannelSettingsRequest) ProtoMessage() {}

func (x *ListOmnichannelSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOmnichannelSettingsRequest.ProtoReflect.Descriptor instead.
func (*ListOmnichannelSettingsRequest) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_rawDescGZIP(), []int{9}
}

func (x *ListOmnichannelSettingsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListOmnichannelSettingsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListOmnichannelSettingsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// Response message for the ListOmnichannelSettings method.
type ListOmnichannelSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The omnichannel settings from the specified merchant.
	OmnichannelSettings []*OmnichannelSetting `protobuf:"bytes,1,rep,name=omnichannel_settings,json=omnichannelSettings,proto3" json:"omnichannel_settings,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListOmnichannelSettingsResponse) Reset() {
	*x = ListOmnichannelSettingsResponse{}
	mi := &file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListOmnichannelSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOmnichannelSettingsResponse) ProtoMessage() {}

func (x *ListOmnichannelSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOmnichannelSettingsResponse.ProtoReflect.Descriptor instead.
func (*ListOmnichannelSettingsResponse) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_rawDescGZIP(), []int{10}
}

func (x *ListOmnichannelSettingsResponse) GetOmnichannelSettings() []*OmnichannelSetting {
	if x != nil {
		return x.OmnichannelSettings
	}
	return nil
}

func (x *ListOmnichannelSettingsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Request message for the CreateOmnichannelSetting method.
type CreateOmnichannelSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent resource where this omnichannel setting will be
	// created. Format: `accounts/{account}`
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Required. The omnichannel setting to create.
	OmnichannelSetting *OmnichannelSetting `protobuf:"bytes,2,opt,name=omnichannel_setting,json=omnichannelSetting,proto3" json:"omnichannel_setting,omitempty"`
}

func (x *CreateOmnichannelSettingRequest) Reset() {
	*x = CreateOmnichannelSettingRequest{}
	mi := &file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOmnichannelSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOmnichannelSettingRequest) ProtoMessage() {}

func (x *CreateOmnichannelSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOmnichannelSettingRequest.ProtoReflect.Descriptor instead.
func (*CreateOmnichannelSettingRequest) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_rawDescGZIP(), []int{11}
}

func (x *CreateOmnichannelSettingRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateOmnichannelSettingRequest) GetOmnichannelSetting() *OmnichannelSetting {
	if x != nil {
		return x.OmnichannelSetting
	}
	return nil
}

// Request message for the UpdateOmnichannelSetting method.
type UpdateOmnichannelSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The omnichannel setting to update.
	//
	// The omnichannel setting's `name` field is used to identify the
	// omnichannel setting to be updated.
	OmnichannelSetting *OmnichannelSetting `protobuf:"bytes,1,opt,name=omnichannel_setting,json=omnichannelSetting,proto3" json:"omnichannel_setting,omitempty"`
	// Required. The list of fields to be updated.
	//
	// The following fields are supported in snake_case only:
	// - `lsf_type`
	// - `in_stock`
	// - `pickup`
	// - `odo`
	// - `about`
	// - `inventory_verification`
	//
	// Full replacement with wildcard `*`is supported, while empty/implied update
	// mask is not.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateOmnichannelSettingRequest) Reset() {
	*x = UpdateOmnichannelSettingRequest{}
	mi := &file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateOmnichannelSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOmnichannelSettingRequest) ProtoMessage() {}

func (x *UpdateOmnichannelSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOmnichannelSettingRequest.ProtoReflect.Descriptor instead.
func (*UpdateOmnichannelSettingRequest) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateOmnichannelSettingRequest) GetOmnichannelSetting() *OmnichannelSetting {
	if x != nil {
		return x.OmnichannelSetting
	}
	return nil
}

func (x *UpdateOmnichannelSettingRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// Request message for the RequestInventoryVerification method.
type RequestInventoryVerificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the omnichannel setting to request inventory
	// verification. Format:
	// `accounts/{account}/omnichannelSettings/{omnichannel_setting}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *RequestInventoryVerificationRequest) Reset() {
	*x = RequestInventoryVerificationRequest{}
	mi := &file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestInventoryVerificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestInventoryVerificationRequest) ProtoMessage() {}

func (x *RequestInventoryVerificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestInventoryVerificationRequest.ProtoReflect.Descriptor instead.
func (*RequestInventoryVerificationRequest) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_rawDescGZIP(), []int{13}
}

func (x *RequestInventoryVerificationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Response message for the RequestInventoryVerification method.
type RequestInventoryVerificationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The omnichannel setting that was updated.
	OmnichannelSetting *OmnichannelSetting `protobuf:"bytes,1,opt,name=omnichannel_setting,json=omnichannelSetting,proto3" json:"omnichannel_setting,omitempty"`
}

func (x *RequestInventoryVerificationResponse) Reset() {
	*x = RequestInventoryVerificationResponse{}
	mi := &file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestInventoryVerificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestInventoryVerificationResponse) ProtoMessage() {}

func (x *RequestInventoryVerificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestInventoryVerificationResponse.ProtoReflect.Descriptor instead.
func (*RequestInventoryVerificationResponse) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_rawDescGZIP(), []int{14}
}

func (x *RequestInventoryVerificationResponse) GetOmnichannelSetting() *OmnichannelSetting {
	if x != nil {
		return x.OmnichannelSetting
	}
	return nil
}

var File_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto protoreflect.FileDescriptor

var file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_rawDesc = []byte{
	0x0a, 0x42, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x2f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x6f, 0x6d, 0x6e, 0x69, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x28, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xbb, 0x07, 0x0a, 0x12, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x08, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe0, 0x41, 0x02, 0xe0, 0x41, 0x05,
	0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x64, 0x0a, 0x08,
	0x6c, 0x73, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x44,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x73, 0x66,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x6c, 0x73, 0x66, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x51, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68,
	0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x49, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x69, 0x6e,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x4d, 0x0a, 0x06, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73,
	0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x70, 0x69,
	0x63, 0x6b, 0x75, 0x70, 0x12, 0x51, 0x0a, 0x08, 0x6c, 0x66, 0x70, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x4c, 0x66, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x07,
	0x6c, 0x66, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x51, 0x0a, 0x03, 0x6f, 0x64, 0x6f, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68,
	0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x4f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x03, 0x6f, 0x64, 0x6f, 0x12, 0x4a, 0x0a, 0x05, 0x61, 0x62,
	0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x12, 0x7b, 0x0a, 0x16, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x15, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x4f, 0x0a, 0x07, 0x4c, 0x73, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x14, 0x4c, 0x53, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x48, 0x4c, 0x53,
	0x46, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x48, 0x4c, 0x53, 0x46, 0x5f, 0x42, 0x41, 0x53,
	0x49, 0x43, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x48, 0x4c, 0x53, 0x46, 0x5f, 0x46, 0x55,
	0x4c, 0x4c, 0x10, 0x03, 0x3a, 0x9a, 0x01, 0xea, 0x41, 0x96, 0x01, 0x0a, 0x2d, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x3c, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x7d, 0x2f, 0x6f,
	0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2f, 0x7b, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x7d, 0x2a, 0x13, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x32, 0x12, 0x6f,
	0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x22, 0x67, 0x0a, 0x0b, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x22, 0x58, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e,
	0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x04, 0x22, 0x78, 0x0a, 0x07, 0x49, 0x6e,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x56, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x22, 0x77, 0x0a, 0x06, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x15,
	0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x56, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68,
	0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xbe, 0x01,
	0x0a, 0x07, 0x4c, 0x66, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x66, 0x70,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x6c, 0x66, 0x70, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x12, 0x33, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x11, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x56, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73,
	0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x81,
	0x01, 0x0a, 0x10, 0x4f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x6f, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x56, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x22, 0x76, 0x0a, 0x05, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x12, 0x15, 0x0a, 0x03, 0x75,
	0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x75,
	0x72, 0x69, 0x12, 0x56, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x97, 0x03, 0x0a, 0x15, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x65, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x6c, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49,
	0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e,
	0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45,
	0x44, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44,
	0x45, 0x44, 0x10, 0x04, 0x22, 0x69, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4f, 0x6d, 0x6e, 0x69, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x35, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2f, 0x0a, 0x2d, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0xaa, 0x01, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x42, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2a, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x24, 0x0a, 0x22, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xba, 0x01, 0x0a,
	0x1f, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x6f, 0x0a, 0x14, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x13, 0x6f, 0x6d,
	0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xd9, 0x01, 0x0a, 0x1f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0xe0,
	0x41, 0x02, 0xfa, 0x41, 0x24, 0x0a, 0x22, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x61,
	0x70, 0x69, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x72, 0x0a, 0x13, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x12, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0xd7, 0x01, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x72, 0x0a, 0x13, 0x6f, 0x6d, 0x6e,
	0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x12, 0x6f, 0x6d, 0x6e, 0x69, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x40, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22,
	0x70, 0x0a, 0x23, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2f, 0x0a, 0x2d, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x95, 0x01, 0x0a, 0x24, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x13, 0x6f, 0x6d,
	0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x32, 0xc1, 0x0b, 0x0a, 0x1a, 0x4f, 0x6d,
	0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xe6, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x46, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x47, 0x65,
	0x74, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x47, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x12, 0x38, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6f, 0x6d, 0x6e, 0x69, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x2a,
	0x7d, 0x12, 0xf9, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x48, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x6d, 0x6e,
	0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x49, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x49, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x3a, 0x12, 0x38, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x97, 0x02,
	0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x49, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6d, 0x6e, 0x69,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73,
	0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x22, 0x72, 0xda, 0x41, 0x1a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x2c, 0x6f,
	0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4f, 0x3a, 0x13, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x38, 0x2f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f,
	0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x2f, 0x2a, 0x7d, 0x2f, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0xb1, 0x02, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x49, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68,
	0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x8b, 0x01,
	0xda, 0x41, 0x1f, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x63, 0x3a, 0x13, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x32, 0x4c, 0x2f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f,
	0x7b, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xa6, 0x02, 0x0a, 0x1c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x67, 0xda, 0x41, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5a, 0x3a, 0x01, 0x2a, 0x22, 0x55, 0x2f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x2a,
	0x2f, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x47, 0xca, 0x41, 0x1a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x27, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77,
	0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x9a, 0x01,
	0x0a, 0x2c, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x42, 0x18,
	0x4f, 0x6d, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f,
	0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x70, 0x62, 0x3b,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_rawDescOnce sync.Once
	file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_rawDescData = file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_rawDesc
)

func file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_rawDescGZIP() []byte {
	file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_rawDescOnce.Do(func() {
		file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_rawDescData)
	})
	return file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_rawDescData
}

var file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_goTypes = []any{
	(OmnichannelSetting_LsfType)(0),              // 0: google.shopping.merchant.accounts.v1beta.OmnichannelSetting.LsfType
	(ReviewState_State)(0),                       // 1: google.shopping.merchant.accounts.v1beta.ReviewState.State
	(InventoryVerification_State)(0),             // 2: google.shopping.merchant.accounts.v1beta.InventoryVerification.State
	(*OmnichannelSetting)(nil),                   // 3: google.shopping.merchant.accounts.v1beta.OmnichannelSetting
	(*ReviewState)(nil),                          // 4: google.shopping.merchant.accounts.v1beta.ReviewState
	(*InStock)(nil),                              // 5: google.shopping.merchant.accounts.v1beta.InStock
	(*Pickup)(nil),                               // 6: google.shopping.merchant.accounts.v1beta.Pickup
	(*LfpLink)(nil),                              // 7: google.shopping.merchant.accounts.v1beta.LfpLink
	(*OnDisplayToOrder)(nil),                     // 8: google.shopping.merchant.accounts.v1beta.OnDisplayToOrder
	(*About)(nil),                                // 9: google.shopping.merchant.accounts.v1beta.About
	(*InventoryVerification)(nil),                // 10: google.shopping.merchant.accounts.v1beta.InventoryVerification
	(*GetOmnichannelSettingRequest)(nil),         // 11: google.shopping.merchant.accounts.v1beta.GetOmnichannelSettingRequest
	(*ListOmnichannelSettingsRequest)(nil),       // 12: google.shopping.merchant.accounts.v1beta.ListOmnichannelSettingsRequest
	(*ListOmnichannelSettingsResponse)(nil),      // 13: google.shopping.merchant.accounts.v1beta.ListOmnichannelSettingsResponse
	(*CreateOmnichannelSettingRequest)(nil),      // 14: google.shopping.merchant.accounts.v1beta.CreateOmnichannelSettingRequest
	(*UpdateOmnichannelSettingRequest)(nil),      // 15: google.shopping.merchant.accounts.v1beta.UpdateOmnichannelSettingRequest
	(*RequestInventoryVerificationRequest)(nil),  // 16: google.shopping.merchant.accounts.v1beta.RequestInventoryVerificationRequest
	(*RequestInventoryVerificationResponse)(nil), // 17: google.shopping.merchant.accounts.v1beta.RequestInventoryVerificationResponse
	(*fieldmaskpb.FieldMask)(nil),                // 18: google.protobuf.FieldMask
}
var file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_depIdxs = []int32{
	0,  // 0: google.shopping.merchant.accounts.v1beta.OmnichannelSetting.lsf_type:type_name -> google.shopping.merchant.accounts.v1beta.OmnichannelSetting.LsfType
	5,  // 1: google.shopping.merchant.accounts.v1beta.OmnichannelSetting.in_stock:type_name -> google.shopping.merchant.accounts.v1beta.InStock
	6,  // 2: google.shopping.merchant.accounts.v1beta.OmnichannelSetting.pickup:type_name -> google.shopping.merchant.accounts.v1beta.Pickup
	7,  // 3: google.shopping.merchant.accounts.v1beta.OmnichannelSetting.lfp_link:type_name -> google.shopping.merchant.accounts.v1beta.LfpLink
	8,  // 4: google.shopping.merchant.accounts.v1beta.OmnichannelSetting.odo:type_name -> google.shopping.merchant.accounts.v1beta.OnDisplayToOrder
	9,  // 5: google.shopping.merchant.accounts.v1beta.OmnichannelSetting.about:type_name -> google.shopping.merchant.accounts.v1beta.About
	10, // 6: google.shopping.merchant.accounts.v1beta.OmnichannelSetting.inventory_verification:type_name -> google.shopping.merchant.accounts.v1beta.InventoryVerification
	1,  // 7: google.shopping.merchant.accounts.v1beta.InStock.state:type_name -> google.shopping.merchant.accounts.v1beta.ReviewState.State
	1,  // 8: google.shopping.merchant.accounts.v1beta.Pickup.state:type_name -> google.shopping.merchant.accounts.v1beta.ReviewState.State
	1,  // 9: google.shopping.merchant.accounts.v1beta.LfpLink.state:type_name -> google.shopping.merchant.accounts.v1beta.ReviewState.State
	1,  // 10: google.shopping.merchant.accounts.v1beta.OnDisplayToOrder.state:type_name -> google.shopping.merchant.accounts.v1beta.ReviewState.State
	1,  // 11: google.shopping.merchant.accounts.v1beta.About.state:type_name -> google.shopping.merchant.accounts.v1beta.ReviewState.State
	2,  // 12: google.shopping.merchant.accounts.v1beta.InventoryVerification.state:type_name -> google.shopping.merchant.accounts.v1beta.InventoryVerification.State
	1,  // 13: google.shopping.merchant.accounts.v1beta.InventoryVerification.contact_state:type_name -> google.shopping.merchant.accounts.v1beta.ReviewState.State
	3,  // 14: google.shopping.merchant.accounts.v1beta.ListOmnichannelSettingsResponse.omnichannel_settings:type_name -> google.shopping.merchant.accounts.v1beta.OmnichannelSetting
	3,  // 15: google.shopping.merchant.accounts.v1beta.CreateOmnichannelSettingRequest.omnichannel_setting:type_name -> google.shopping.merchant.accounts.v1beta.OmnichannelSetting
	3,  // 16: google.shopping.merchant.accounts.v1beta.UpdateOmnichannelSettingRequest.omnichannel_setting:type_name -> google.shopping.merchant.accounts.v1beta.OmnichannelSetting
	18, // 17: google.shopping.merchant.accounts.v1beta.UpdateOmnichannelSettingRequest.update_mask:type_name -> google.protobuf.FieldMask
	3,  // 18: google.shopping.merchant.accounts.v1beta.RequestInventoryVerificationResponse.omnichannel_setting:type_name -> google.shopping.merchant.accounts.v1beta.OmnichannelSetting
	11, // 19: google.shopping.merchant.accounts.v1beta.OmnichannelSettingsService.GetOmnichannelSetting:input_type -> google.shopping.merchant.accounts.v1beta.GetOmnichannelSettingRequest
	12, // 20: google.shopping.merchant.accounts.v1beta.OmnichannelSettingsService.ListOmnichannelSettings:input_type -> google.shopping.merchant.accounts.v1beta.ListOmnichannelSettingsRequest
	14, // 21: google.shopping.merchant.accounts.v1beta.OmnichannelSettingsService.CreateOmnichannelSetting:input_type -> google.shopping.merchant.accounts.v1beta.CreateOmnichannelSettingRequest
	15, // 22: google.shopping.merchant.accounts.v1beta.OmnichannelSettingsService.UpdateOmnichannelSetting:input_type -> google.shopping.merchant.accounts.v1beta.UpdateOmnichannelSettingRequest
	16, // 23: google.shopping.merchant.accounts.v1beta.OmnichannelSettingsService.RequestInventoryVerification:input_type -> google.shopping.merchant.accounts.v1beta.RequestInventoryVerificationRequest
	3,  // 24: google.shopping.merchant.accounts.v1beta.OmnichannelSettingsService.GetOmnichannelSetting:output_type -> google.shopping.merchant.accounts.v1beta.OmnichannelSetting
	13, // 25: google.shopping.merchant.accounts.v1beta.OmnichannelSettingsService.ListOmnichannelSettings:output_type -> google.shopping.merchant.accounts.v1beta.ListOmnichannelSettingsResponse
	3,  // 26: google.shopping.merchant.accounts.v1beta.OmnichannelSettingsService.CreateOmnichannelSetting:output_type -> google.shopping.merchant.accounts.v1beta.OmnichannelSetting
	3,  // 27: google.shopping.merchant.accounts.v1beta.OmnichannelSettingsService.UpdateOmnichannelSetting:output_type -> google.shopping.merchant.accounts.v1beta.OmnichannelSetting
	17, // 28: google.shopping.merchant.accounts.v1beta.OmnichannelSettingsService.RequestInventoryVerification:output_type -> google.shopping.merchant.accounts.v1beta.RequestInventoryVerificationResponse
	24, // [24:29] is the sub-list for method output_type
	19, // [19:24] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_init() }
func file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_init() {
	if File_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_goTypes,
		DependencyIndexes: file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_depIdxs,
		EnumInfos:         file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_enumTypes,
		MessageInfos:      file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_msgTypes,
	}.Build()
	File_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto = out.File
	file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_rawDesc = nil
	file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_goTypes = nil
	file_google_shopping_merchant_accounts_v1beta_omnichannelsettings_proto_depIdxs = nil
}
