// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/shopping/merchant/accounts/v1beta/shippingsettings.proto

package accountspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ShippingSettingsService_GetShippingSettings_FullMethodName    = "/google.shopping.merchant.accounts.v1beta.ShippingSettingsService/GetShippingSettings"
	ShippingSettingsService_InsertShippingSettings_FullMethodName = "/google.shopping.merchant.accounts.v1beta.ShippingSettingsService/InsertShippingSettings"
)

// ShippingSettingsServiceClient is the client API for ShippingSettingsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShippingSettingsServiceClient interface {
	// Retrieve shipping setting information.
	GetShippingSettings(ctx context.Context, in *GetShippingSettingsRequest, opts ...grpc.CallOption) (*ShippingSettings, error)
	// Replace the shipping setting of a merchant with the request shipping
	// setting. Executing this method requires admin access.
	InsertShippingSettings(ctx context.Context, in *InsertShippingSettingsRequest, opts ...grpc.CallOption) (*ShippingSettings, error)
}

type shippingSettingsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShippingSettingsServiceClient(cc grpc.ClientConnInterface) ShippingSettingsServiceClient {
	return &shippingSettingsServiceClient{cc}
}

func (c *shippingSettingsServiceClient) GetShippingSettings(ctx context.Context, in *GetShippingSettingsRequest, opts ...grpc.CallOption) (*ShippingSettings, error) {
	out := new(ShippingSettings)
	err := c.cc.Invoke(ctx, ShippingSettingsService_GetShippingSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingSettingsServiceClient) InsertShippingSettings(ctx context.Context, in *InsertShippingSettingsRequest, opts ...grpc.CallOption) (*ShippingSettings, error) {
	out := new(ShippingSettings)
	err := c.cc.Invoke(ctx, ShippingSettingsService_InsertShippingSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShippingSettingsServiceServer is the server API for ShippingSettingsService service.
// All implementations should embed UnimplementedShippingSettingsServiceServer
// for forward compatibility
type ShippingSettingsServiceServer interface {
	// Retrieve shipping setting information.
	GetShippingSettings(context.Context, *GetShippingSettingsRequest) (*ShippingSettings, error)
	// Replace the shipping setting of a merchant with the request shipping
	// setting. Executing this method requires admin access.
	InsertShippingSettings(context.Context, *InsertShippingSettingsRequest) (*ShippingSettings, error)
}

// UnimplementedShippingSettingsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedShippingSettingsServiceServer struct {
}

func (UnimplementedShippingSettingsServiceServer) GetShippingSettings(context.Context, *GetShippingSettingsRequest) (*ShippingSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShippingSettings not implemented")
}
func (UnimplementedShippingSettingsServiceServer) InsertShippingSettings(context.Context, *InsertShippingSettingsRequest) (*ShippingSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertShippingSettings not implemented")
}

// UnsafeShippingSettingsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShippingSettingsServiceServer will
// result in compilation errors.
type UnsafeShippingSettingsServiceServer interface {
	mustEmbedUnimplementedShippingSettingsServiceServer()
}

func RegisterShippingSettingsServiceServer(s grpc.ServiceRegistrar, srv ShippingSettingsServiceServer) {
	s.RegisterService(&ShippingSettingsService_ServiceDesc, srv)
}

func _ShippingSettingsService_GetShippingSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShippingSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingSettingsServiceServer).GetShippingSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShippingSettingsService_GetShippingSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingSettingsServiceServer).GetShippingSettings(ctx, req.(*GetShippingSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingSettingsService_InsertShippingSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertShippingSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingSettingsServiceServer).InsertShippingSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShippingSettingsService_InsertShippingSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingSettingsServiceServer).InsertShippingSettings(ctx, req.(*InsertShippingSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShippingSettingsService_ServiceDesc is the grpc.ServiceDesc for ShippingSettingsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShippingSettingsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.shopping.merchant.accounts.v1beta.ShippingSettingsService",
	HandlerType: (*ShippingSettingsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetShippingSettings",
			Handler:    _ShippingSettingsService_GetShippingSettings_Handler,
		},
		{
			MethodName: "InsertShippingSettings",
			Handler:    _ShippingSettingsService_InsertShippingSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/shopping/merchant/accounts/v1beta/shippingsettings.proto",
}
