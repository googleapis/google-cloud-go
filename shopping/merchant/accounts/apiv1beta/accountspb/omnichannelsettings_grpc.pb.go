// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/shopping/merchant/accounts/v1beta/omnichannelsettings.proto

package accountspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OmnichannelSettingsService_GetOmnichannelSetting_FullMethodName        = "/google.shopping.merchant.accounts.v1beta.OmnichannelSettingsService/GetOmnichannelSetting"
	OmnichannelSettingsService_ListOmnichannelSettings_FullMethodName      = "/google.shopping.merchant.accounts.v1beta.OmnichannelSettingsService/ListOmnichannelSettings"
	OmnichannelSettingsService_CreateOmnichannelSetting_FullMethodName     = "/google.shopping.merchant.accounts.v1beta.OmnichannelSettingsService/CreateOmnichannelSetting"
	OmnichannelSettingsService_UpdateOmnichannelSetting_FullMethodName     = "/google.shopping.merchant.accounts.v1beta.OmnichannelSettingsService/UpdateOmnichannelSetting"
	OmnichannelSettingsService_RequestInventoryVerification_FullMethodName = "/google.shopping.merchant.accounts.v1beta.OmnichannelSettingsService/RequestInventoryVerification"
)

// OmnichannelSettingsServiceClient is the client API for OmnichannelSettingsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OmnichannelSettingsServiceClient interface {
	// Get the omnichannel settings for a given merchant.
	GetOmnichannelSetting(ctx context.Context, in *GetOmnichannelSettingRequest, opts ...grpc.CallOption) (*OmnichannelSetting, error)
	// List all the omnichannel settings for a given merchant.
	ListOmnichannelSettings(ctx context.Context, in *ListOmnichannelSettingsRequest, opts ...grpc.CallOption) (*ListOmnichannelSettingsResponse, error)
	// Create the omnichannel settings for a given merchant.
	CreateOmnichannelSetting(ctx context.Context, in *CreateOmnichannelSettingRequest, opts ...grpc.CallOption) (*OmnichannelSetting, error)
	// Update the omnichannel setting for a given merchant in a given country.
	UpdateOmnichannelSetting(ctx context.Context, in *UpdateOmnichannelSettingRequest, opts ...grpc.CallOption) (*OmnichannelSetting, error)
	// Requests inventory verification for a given merchant in a given country.
	RequestInventoryVerification(ctx context.Context, in *RequestInventoryVerificationRequest, opts ...grpc.CallOption) (*RequestInventoryVerificationResponse, error)
}

type omnichannelSettingsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOmnichannelSettingsServiceClient(cc grpc.ClientConnInterface) OmnichannelSettingsServiceClient {
	return &omnichannelSettingsServiceClient{cc}
}

func (c *omnichannelSettingsServiceClient) GetOmnichannelSetting(ctx context.Context, in *GetOmnichannelSettingRequest, opts ...grpc.CallOption) (*OmnichannelSetting, error) {
	out := new(OmnichannelSetting)
	err := c.cc.Invoke(ctx, OmnichannelSettingsService_GetOmnichannelSetting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omnichannelSettingsServiceClient) ListOmnichannelSettings(ctx context.Context, in *ListOmnichannelSettingsRequest, opts ...grpc.CallOption) (*ListOmnichannelSettingsResponse, error) {
	out := new(ListOmnichannelSettingsResponse)
	err := c.cc.Invoke(ctx, OmnichannelSettingsService_ListOmnichannelSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omnichannelSettingsServiceClient) CreateOmnichannelSetting(ctx context.Context, in *CreateOmnichannelSettingRequest, opts ...grpc.CallOption) (*OmnichannelSetting, error) {
	out := new(OmnichannelSetting)
	err := c.cc.Invoke(ctx, OmnichannelSettingsService_CreateOmnichannelSetting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omnichannelSettingsServiceClient) UpdateOmnichannelSetting(ctx context.Context, in *UpdateOmnichannelSettingRequest, opts ...grpc.CallOption) (*OmnichannelSetting, error) {
	out := new(OmnichannelSetting)
	err := c.cc.Invoke(ctx, OmnichannelSettingsService_UpdateOmnichannelSetting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omnichannelSettingsServiceClient) RequestInventoryVerification(ctx context.Context, in *RequestInventoryVerificationRequest, opts ...grpc.CallOption) (*RequestInventoryVerificationResponse, error) {
	out := new(RequestInventoryVerificationResponse)
	err := c.cc.Invoke(ctx, OmnichannelSettingsService_RequestInventoryVerification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OmnichannelSettingsServiceServer is the server API for OmnichannelSettingsService service.
// All implementations should embed UnimplementedOmnichannelSettingsServiceServer
// for forward compatibility
type OmnichannelSettingsServiceServer interface {
	// Get the omnichannel settings for a given merchant.
	GetOmnichannelSetting(context.Context, *GetOmnichannelSettingRequest) (*OmnichannelSetting, error)
	// List all the omnichannel settings for a given merchant.
	ListOmnichannelSettings(context.Context, *ListOmnichannelSettingsRequest) (*ListOmnichannelSettingsResponse, error)
	// Create the omnichannel settings for a given merchant.
	CreateOmnichannelSetting(context.Context, *CreateOmnichannelSettingRequest) (*OmnichannelSetting, error)
	// Update the omnichannel setting for a given merchant in a given country.
	UpdateOmnichannelSetting(context.Context, *UpdateOmnichannelSettingRequest) (*OmnichannelSetting, error)
	// Requests inventory verification for a given merchant in a given country.
	RequestInventoryVerification(context.Context, *RequestInventoryVerificationRequest) (*RequestInventoryVerificationResponse, error)
}

// UnimplementedOmnichannelSettingsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedOmnichannelSettingsServiceServer struct {
}

func (UnimplementedOmnichannelSettingsServiceServer) GetOmnichannelSetting(context.Context, *GetOmnichannelSettingRequest) (*OmnichannelSetting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOmnichannelSetting not implemented")
}
func (UnimplementedOmnichannelSettingsServiceServer) ListOmnichannelSettings(context.Context, *ListOmnichannelSettingsRequest) (*ListOmnichannelSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOmnichannelSettings not implemented")
}
func (UnimplementedOmnichannelSettingsServiceServer) CreateOmnichannelSetting(context.Context, *CreateOmnichannelSettingRequest) (*OmnichannelSetting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOmnichannelSetting not implemented")
}
func (UnimplementedOmnichannelSettingsServiceServer) UpdateOmnichannelSetting(context.Context, *UpdateOmnichannelSettingRequest) (*OmnichannelSetting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOmnichannelSetting not implemented")
}
func (UnimplementedOmnichannelSettingsServiceServer) RequestInventoryVerification(context.Context, *RequestInventoryVerificationRequest) (*RequestInventoryVerificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestInventoryVerification not implemented")
}

// UnsafeOmnichannelSettingsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OmnichannelSettingsServiceServer will
// result in compilation errors.
type UnsafeOmnichannelSettingsServiceServer interface {
	mustEmbedUnimplementedOmnichannelSettingsServiceServer()
}

func RegisterOmnichannelSettingsServiceServer(s grpc.ServiceRegistrar, srv OmnichannelSettingsServiceServer) {
	s.RegisterService(&OmnichannelSettingsService_ServiceDesc, srv)
}

func _OmnichannelSettingsService_GetOmnichannelSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOmnichannelSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmnichannelSettingsServiceServer).GetOmnichannelSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmnichannelSettingsService_GetOmnichannelSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmnichannelSettingsServiceServer).GetOmnichannelSetting(ctx, req.(*GetOmnichannelSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmnichannelSettingsService_ListOmnichannelSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOmnichannelSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmnichannelSettingsServiceServer).ListOmnichannelSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmnichannelSettingsService_ListOmnichannelSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmnichannelSettingsServiceServer).ListOmnichannelSettings(ctx, req.(*ListOmnichannelSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmnichannelSettingsService_CreateOmnichannelSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOmnichannelSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmnichannelSettingsServiceServer).CreateOmnichannelSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmnichannelSettingsService_CreateOmnichannelSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmnichannelSettingsServiceServer).CreateOmnichannelSetting(ctx, req.(*CreateOmnichannelSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmnichannelSettingsService_UpdateOmnichannelSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOmnichannelSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmnichannelSettingsServiceServer).UpdateOmnichannelSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmnichannelSettingsService_UpdateOmnichannelSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmnichannelSettingsServiceServer).UpdateOmnichannelSetting(ctx, req.(*UpdateOmnichannelSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmnichannelSettingsService_RequestInventoryVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestInventoryVerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmnichannelSettingsServiceServer).RequestInventoryVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmnichannelSettingsService_RequestInventoryVerification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmnichannelSettingsServiceServer).RequestInventoryVerification(ctx, req.(*RequestInventoryVerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OmnichannelSettingsService_ServiceDesc is the grpc.ServiceDesc for OmnichannelSettingsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OmnichannelSettingsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.shopping.merchant.accounts.v1beta.OmnichannelSettingsService",
	HandlerType: (*OmnichannelSettingsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOmnichannelSetting",
			Handler:    _OmnichannelSettingsService_GetOmnichannelSetting_Handler,
		},
		{
			MethodName: "ListOmnichannelSettings",
			Handler:    _OmnichannelSettingsService_ListOmnichannelSettings_Handler,
		},
		{
			MethodName: "CreateOmnichannelSetting",
			Handler:    _OmnichannelSettingsService_CreateOmnichannelSetting_Handler,
		},
		{
			MethodName: "UpdateOmnichannelSetting",
			Handler:    _OmnichannelSettingsService_UpdateOmnichannelSetting_Handler,
		},
		{
			MethodName: "RequestInventoryVerification",
			Handler:    _OmnichannelSettingsService_RequestInventoryVerification_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/shopping/merchant/accounts/v1beta/omnichannelsettings.proto",
}
