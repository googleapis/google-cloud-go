// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/shopping/merchant/accounts/v1beta/programs.proto

package accountspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProgramsService_GetProgram_FullMethodName     = "/google.shopping.merchant.accounts.v1beta.ProgramsService/GetProgram"
	ProgramsService_ListPrograms_FullMethodName   = "/google.shopping.merchant.accounts.v1beta.ProgramsService/ListPrograms"
	ProgramsService_EnableProgram_FullMethodName  = "/google.shopping.merchant.accounts.v1beta.ProgramsService/EnableProgram"
	ProgramsService_DisableProgram_FullMethodName = "/google.shopping.merchant.accounts.v1beta.ProgramsService/DisableProgram"
)

// ProgramsServiceClient is the client API for ProgramsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProgramsServiceClient interface {
	// Retrieves the specified program for the account.
	GetProgram(ctx context.Context, in *GetProgramRequest, opts ...grpc.CallOption) (*Program, error)
	// Retrieves all programs for the account.
	ListPrograms(ctx context.Context, in *ListProgramsRequest, opts ...grpc.CallOption) (*ListProgramsResponse, error)
	// Enable participation in the specified program for the account. Executing
	// this method requires admin access.
	EnableProgram(ctx context.Context, in *EnableProgramRequest, opts ...grpc.CallOption) (*Program, error)
	// Disable participation in the specified program for the account. Executing
	// this method requires admin access.
	DisableProgram(ctx context.Context, in *DisableProgramRequest, opts ...grpc.CallOption) (*Program, error)
}

type programsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProgramsServiceClient(cc grpc.ClientConnInterface) ProgramsServiceClient {
	return &programsServiceClient{cc}
}

func (c *programsServiceClient) GetProgram(ctx context.Context, in *GetProgramRequest, opts ...grpc.CallOption) (*Program, error) {
	out := new(Program)
	err := c.cc.Invoke(ctx, ProgramsService_GetProgram_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *programsServiceClient) ListPrograms(ctx context.Context, in *ListProgramsRequest, opts ...grpc.CallOption) (*ListProgramsResponse, error) {
	out := new(ListProgramsResponse)
	err := c.cc.Invoke(ctx, ProgramsService_ListPrograms_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *programsServiceClient) EnableProgram(ctx context.Context, in *EnableProgramRequest, opts ...grpc.CallOption) (*Program, error) {
	out := new(Program)
	err := c.cc.Invoke(ctx, ProgramsService_EnableProgram_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *programsServiceClient) DisableProgram(ctx context.Context, in *DisableProgramRequest, opts ...grpc.CallOption) (*Program, error) {
	out := new(Program)
	err := c.cc.Invoke(ctx, ProgramsService_DisableProgram_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProgramsServiceServer is the server API for ProgramsService service.
// All implementations should embed UnimplementedProgramsServiceServer
// for forward compatibility
type ProgramsServiceServer interface {
	// Retrieves the specified program for the account.
	GetProgram(context.Context, *GetProgramRequest) (*Program, error)
	// Retrieves all programs for the account.
	ListPrograms(context.Context, *ListProgramsRequest) (*ListProgramsResponse, error)
	// Enable participation in the specified program for the account. Executing
	// this method requires admin access.
	EnableProgram(context.Context, *EnableProgramRequest) (*Program, error)
	// Disable participation in the specified program for the account. Executing
	// this method requires admin access.
	DisableProgram(context.Context, *DisableProgramRequest) (*Program, error)
}

// UnimplementedProgramsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedProgramsServiceServer struct {
}

func (UnimplementedProgramsServiceServer) GetProgram(context.Context, *GetProgramRequest) (*Program, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProgram not implemented")
}
func (UnimplementedProgramsServiceServer) ListPrograms(context.Context, *ListProgramsRequest) (*ListProgramsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPrograms not implemented")
}
func (UnimplementedProgramsServiceServer) EnableProgram(context.Context, *EnableProgramRequest) (*Program, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableProgram not implemented")
}
func (UnimplementedProgramsServiceServer) DisableProgram(context.Context, *DisableProgramRequest) (*Program, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableProgram not implemented")
}

// UnsafeProgramsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProgramsServiceServer will
// result in compilation errors.
type UnsafeProgramsServiceServer interface {
	mustEmbedUnimplementedProgramsServiceServer()
}

func RegisterProgramsServiceServer(s grpc.ServiceRegistrar, srv ProgramsServiceServer) {
	s.RegisterService(&ProgramsService_ServiceDesc, srv)
}

func _ProgramsService_GetProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProgramsServiceServer).GetProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProgramsService_GetProgram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProgramsServiceServer).GetProgram(ctx, req.(*GetProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProgramsService_ListPrograms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProgramsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProgramsServiceServer).ListPrograms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProgramsService_ListPrograms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProgramsServiceServer).ListPrograms(ctx, req.(*ListProgramsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProgramsService_EnableProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProgramsServiceServer).EnableProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProgramsService_EnableProgram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProgramsServiceServer).EnableProgram(ctx, req.(*EnableProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProgramsService_DisableProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProgramsServiceServer).DisableProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProgramsService_DisableProgram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProgramsServiceServer).DisableProgram(ctx, req.(*DisableProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProgramsService_ServiceDesc is the grpc.ServiceDesc for ProgramsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProgramsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.shopping.merchant.accounts.v1beta.ProgramsService",
	HandlerType: (*ProgramsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProgram",
			Handler:    _ProgramsService_GetProgram_Handler,
		},
		{
			MethodName: "ListPrograms",
			Handler:    _ProgramsService_ListPrograms_Handler,
		},
		{
			MethodName: "EnableProgram",
			Handler:    _ProgramsService_EnableProgram_Handler,
		},
		{
			MethodName: "DisableProgram",
			Handler:    _ProgramsService_DisableProgram_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/shopping/merchant/accounts/v1beta/programs.proto",
}
