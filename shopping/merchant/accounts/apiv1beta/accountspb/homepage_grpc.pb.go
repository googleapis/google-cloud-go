// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/shopping/merchant/accounts/v1beta/homepage.proto

package accountspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HomepageService_GetHomepage_FullMethodName     = "/google.shopping.merchant.accounts.v1beta.HomepageService/GetHomepage"
	HomepageService_UpdateHomepage_FullMethodName  = "/google.shopping.merchant.accounts.v1beta.HomepageService/UpdateHomepage"
	HomepageService_ClaimHomepage_FullMethodName   = "/google.shopping.merchant.accounts.v1beta.HomepageService/ClaimHomepage"
	HomepageService_UnclaimHomepage_FullMethodName = "/google.shopping.merchant.accounts.v1beta.HomepageService/UnclaimHomepage"
)

// HomepageServiceClient is the client API for HomepageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HomepageServiceClient interface {
	// Retrieves a store's homepage.
	GetHomepage(ctx context.Context, in *GetHomepageRequest, opts ...grpc.CallOption) (*Homepage, error)
	// Updates a store's homepage. Executing this method requires admin access.
	UpdateHomepage(ctx context.Context, in *UpdateHomepageRequest, opts ...grpc.CallOption) (*Homepage, error)
	// Claims a store's homepage. Executing this method requires admin access.
	//
	// If the homepage is already claimed, this will recheck the
	// verification (unless the merchant is exempted from claiming, which also
	// exempts from verification) and return a successful response. If ownership
	// can no longer be verified, it will return an error, but it won't clear the
	// claim. In case of failure, a canonical error message will be returned:
	//   - PERMISSION_DENIED: user doesn't have the necessary permissions on this
	//     MC account;
	//   - FAILED_PRECONDITION:
	//   - The account is not a Merchant Center account;
	//   - MC account doesn't have a homepage;
	//   - claiming failed (in this case the error message will contain more
	//     details).
	ClaimHomepage(ctx context.Context, in *ClaimHomepageRequest, opts ...grpc.CallOption) (*Homepage, error)
	// Unclaims a store's homepage. Executing this method requires admin access.
	UnclaimHomepage(ctx context.Context, in *UnclaimHomepageRequest, opts ...grpc.CallOption) (*Homepage, error)
}

type homepageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHomepageServiceClient(cc grpc.ClientConnInterface) HomepageServiceClient {
	return &homepageServiceClient{cc}
}

func (c *homepageServiceClient) GetHomepage(ctx context.Context, in *GetHomepageRequest, opts ...grpc.CallOption) (*Homepage, error) {
	out := new(Homepage)
	err := c.cc.Invoke(ctx, HomepageService_GetHomepage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homepageServiceClient) UpdateHomepage(ctx context.Context, in *UpdateHomepageRequest, opts ...grpc.CallOption) (*Homepage, error) {
	out := new(Homepage)
	err := c.cc.Invoke(ctx, HomepageService_UpdateHomepage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homepageServiceClient) ClaimHomepage(ctx context.Context, in *ClaimHomepageRequest, opts ...grpc.CallOption) (*Homepage, error) {
	out := new(Homepage)
	err := c.cc.Invoke(ctx, HomepageService_ClaimHomepage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homepageServiceClient) UnclaimHomepage(ctx context.Context, in *UnclaimHomepageRequest, opts ...grpc.CallOption) (*Homepage, error) {
	out := new(Homepage)
	err := c.cc.Invoke(ctx, HomepageService_UnclaimHomepage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HomepageServiceServer is the server API for HomepageService service.
// All implementations should embed UnimplementedHomepageServiceServer
// for forward compatibility
type HomepageServiceServer interface {
	// Retrieves a store's homepage.
	GetHomepage(context.Context, *GetHomepageRequest) (*Homepage, error)
	// Updates a store's homepage. Executing this method requires admin access.
	UpdateHomepage(context.Context, *UpdateHomepageRequest) (*Homepage, error)
	// Claims a store's homepage. Executing this method requires admin access.
	//
	// If the homepage is already claimed, this will recheck the
	// verification (unless the merchant is exempted from claiming, which also
	// exempts from verification) and return a successful response. If ownership
	// can no longer be verified, it will return an error, but it won't clear the
	// claim. In case of failure, a canonical error message will be returned:
	//   - PERMISSION_DENIED: user doesn't have the necessary permissions on this
	//     MC account;
	//   - FAILED_PRECONDITION:
	//   - The account is not a Merchant Center account;
	//   - MC account doesn't have a homepage;
	//   - claiming failed (in this case the error message will contain more
	//     details).
	ClaimHomepage(context.Context, *ClaimHomepageRequest) (*Homepage, error)
	// Unclaims a store's homepage. Executing this method requires admin access.
	UnclaimHomepage(context.Context, *UnclaimHomepageRequest) (*Homepage, error)
}

// UnimplementedHomepageServiceServer should be embedded to have forward compatible implementations.
type UnimplementedHomepageServiceServer struct {
}

func (UnimplementedHomepageServiceServer) GetHomepage(context.Context, *GetHomepageRequest) (*Homepage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHomepage not implemented")
}
func (UnimplementedHomepageServiceServer) UpdateHomepage(context.Context, *UpdateHomepageRequest) (*Homepage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHomepage not implemented")
}
func (UnimplementedHomepageServiceServer) ClaimHomepage(context.Context, *ClaimHomepageRequest) (*Homepage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimHomepage not implemented")
}
func (UnimplementedHomepageServiceServer) UnclaimHomepage(context.Context, *UnclaimHomepageRequest) (*Homepage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnclaimHomepage not implemented")
}

// UnsafeHomepageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HomepageServiceServer will
// result in compilation errors.
type UnsafeHomepageServiceServer interface {
	mustEmbedUnimplementedHomepageServiceServer()
}

func RegisterHomepageServiceServer(s grpc.ServiceRegistrar, srv HomepageServiceServer) {
	s.RegisterService(&HomepageService_ServiceDesc, srv)
}

func _HomepageService_GetHomepage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHomepageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomepageServiceServer).GetHomepage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomepageService_GetHomepage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomepageServiceServer).GetHomepage(ctx, req.(*GetHomepageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomepageService_UpdateHomepage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHomepageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomepageServiceServer).UpdateHomepage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomepageService_UpdateHomepage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomepageServiceServer).UpdateHomepage(ctx, req.(*UpdateHomepageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomepageService_ClaimHomepage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimHomepageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomepageServiceServer).ClaimHomepage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomepageService_ClaimHomepage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomepageServiceServer).ClaimHomepage(ctx, req.(*ClaimHomepageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomepageService_UnclaimHomepage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnclaimHomepageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomepageServiceServer).UnclaimHomepage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomepageService_UnclaimHomepage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomepageServiceServer).UnclaimHomepage(ctx, req.(*UnclaimHomepageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HomepageService_ServiceDesc is the grpc.ServiceDesc for HomepageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HomepageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.shopping.merchant.accounts.v1beta.HomepageService",
	HandlerType: (*HomepageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHomepage",
			Handler:    _HomepageService_GetHomepage_Handler,
		},
		{
			MethodName: "UpdateHomepage",
			Handler:    _HomepageService_UpdateHomepage_Handler,
		},
		{
			MethodName: "ClaimHomepage",
			Handler:    _HomepageService_ClaimHomepage_Handler,
		},
		{
			MethodName: "UnclaimHomepage",
			Handler:    _HomepageService_UnclaimHomepage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/shopping/merchant/accounts/v1beta/homepage.proto",
}
