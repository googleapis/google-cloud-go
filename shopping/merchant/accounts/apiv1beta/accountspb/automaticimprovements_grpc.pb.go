// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/shopping/merchant/accounts/v1beta/automaticimprovements.proto

package accountspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AutomaticImprovementsService_GetAutomaticImprovements_FullMethodName    = "/google.shopping.merchant.accounts.v1beta.AutomaticImprovementsService/GetAutomaticImprovements"
	AutomaticImprovementsService_UpdateAutomaticImprovements_FullMethodName = "/google.shopping.merchant.accounts.v1beta.AutomaticImprovementsService/UpdateAutomaticImprovements"
)

// AutomaticImprovementsServiceClient is the client API for AutomaticImprovementsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AutomaticImprovementsServiceClient interface {
	// Retrieves the automatic improvements of an account.
	GetAutomaticImprovements(ctx context.Context, in *GetAutomaticImprovementsRequest, opts ...grpc.CallOption) (*AutomaticImprovements, error)
	// Updates the automatic improvements of an account.
	UpdateAutomaticImprovements(ctx context.Context, in *UpdateAutomaticImprovementsRequest, opts ...grpc.CallOption) (*AutomaticImprovements, error)
}

type automaticImprovementsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAutomaticImprovementsServiceClient(cc grpc.ClientConnInterface) AutomaticImprovementsServiceClient {
	return &automaticImprovementsServiceClient{cc}
}

func (c *automaticImprovementsServiceClient) GetAutomaticImprovements(ctx context.Context, in *GetAutomaticImprovementsRequest, opts ...grpc.CallOption) (*AutomaticImprovements, error) {
	out := new(AutomaticImprovements)
	err := c.cc.Invoke(ctx, AutomaticImprovementsService_GetAutomaticImprovements_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *automaticImprovementsServiceClient) UpdateAutomaticImprovements(ctx context.Context, in *UpdateAutomaticImprovementsRequest, opts ...grpc.CallOption) (*AutomaticImprovements, error) {
	out := new(AutomaticImprovements)
	err := c.cc.Invoke(ctx, AutomaticImprovementsService_UpdateAutomaticImprovements_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AutomaticImprovementsServiceServer is the server API for AutomaticImprovementsService service.
// All implementations should embed UnimplementedAutomaticImprovementsServiceServer
// for forward compatibility
type AutomaticImprovementsServiceServer interface {
	// Retrieves the automatic improvements of an account.
	GetAutomaticImprovements(context.Context, *GetAutomaticImprovementsRequest) (*AutomaticImprovements, error)
	// Updates the automatic improvements of an account.
	UpdateAutomaticImprovements(context.Context, *UpdateAutomaticImprovementsRequest) (*AutomaticImprovements, error)
}

// UnimplementedAutomaticImprovementsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAutomaticImprovementsServiceServer struct {
}

func (UnimplementedAutomaticImprovementsServiceServer) GetAutomaticImprovements(context.Context, *GetAutomaticImprovementsRequest) (*AutomaticImprovements, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAutomaticImprovements not implemented")
}
func (UnimplementedAutomaticImprovementsServiceServer) UpdateAutomaticImprovements(context.Context, *UpdateAutomaticImprovementsRequest) (*AutomaticImprovements, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAutomaticImprovements not implemented")
}

// UnsafeAutomaticImprovementsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AutomaticImprovementsServiceServer will
// result in compilation errors.
type UnsafeAutomaticImprovementsServiceServer interface {
	mustEmbedUnimplementedAutomaticImprovementsServiceServer()
}

func RegisterAutomaticImprovementsServiceServer(s grpc.ServiceRegistrar, srv AutomaticImprovementsServiceServer) {
	s.RegisterService(&AutomaticImprovementsService_ServiceDesc, srv)
}

func _AutomaticImprovementsService_GetAutomaticImprovements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAutomaticImprovementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutomaticImprovementsServiceServer).GetAutomaticImprovements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutomaticImprovementsService_GetAutomaticImprovements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutomaticImprovementsServiceServer).GetAutomaticImprovements(ctx, req.(*GetAutomaticImprovementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AutomaticImprovementsService_UpdateAutomaticImprovements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAutomaticImprovementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutomaticImprovementsServiceServer).UpdateAutomaticImprovements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AutomaticImprovementsService_UpdateAutomaticImprovements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutomaticImprovementsServiceServer).UpdateAutomaticImprovements(ctx, req.(*UpdateAutomaticImprovementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AutomaticImprovementsService_ServiceDesc is the grpc.ServiceDesc for AutomaticImprovementsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AutomaticImprovementsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.shopping.merchant.accounts.v1beta.AutomaticImprovementsService",
	HandlerType: (*AutomaticImprovementsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAutomaticImprovements",
			Handler:    _AutomaticImprovementsService_GetAutomaticImprovements_Handler,
		},
		{
			MethodName: "UpdateAutomaticImprovements",
			Handler:    _AutomaticImprovementsService_UpdateAutomaticImprovements_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/shopping/merchant/accounts/v1beta/automaticimprovements.proto",
}
