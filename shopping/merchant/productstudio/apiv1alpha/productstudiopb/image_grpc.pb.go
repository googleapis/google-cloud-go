// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/shopping/merchant/productstudio/v1alpha/image.proto

package productstudiopb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ImageService_GenerateProductImageBackground_FullMethodName = "/google.shopping.merchant.productstudio.v1alpha.ImageService/GenerateProductImageBackground"
	ImageService_RemoveProductImageBackground_FullMethodName   = "/google.shopping.merchant.productstudio.v1alpha.ImageService/RemoveProductImageBackground"
	ImageService_UpscaleProductImage_FullMethodName            = "/google.shopping.merchant.productstudio.v1alpha.ImageService/UpscaleProductImage"
)

// ImageServiceClient is the client API for ImageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImageServiceClient interface {
	// GenerateProductImageBackground generates a new image where the background
	// of the original image is replaced by an AI generated scene based on
	// provided product information and a text prompt.
	GenerateProductImageBackground(ctx context.Context, in *GenerateProductImageBackgroundRequest, opts ...grpc.CallOption) (*GenerateProductImageBackgroundResponse, error)
	// RemoveProductImageBackground generates a new image where the background of
	// the original image is removed.
	RemoveProductImageBackground(ctx context.Context, in *RemoveProductImageBackgroundRequest, opts ...grpc.CallOption) (*RemoveProductImageBackgroundResponse, error)
	// UpscaleProductImage generates a new image where the resolution of the
	// original image is enhanced.
	UpscaleProductImage(ctx context.Context, in *UpscaleProductImageRequest, opts ...grpc.CallOption) (*UpscaleProductImageResponse, error)
}

type imageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImageServiceClient(cc grpc.ClientConnInterface) ImageServiceClient {
	return &imageServiceClient{cc}
}

func (c *imageServiceClient) GenerateProductImageBackground(ctx context.Context, in *GenerateProductImageBackgroundRequest, opts ...grpc.CallOption) (*GenerateProductImageBackgroundResponse, error) {
	out := new(GenerateProductImageBackgroundResponse)
	err := c.cc.Invoke(ctx, ImageService_GenerateProductImageBackground_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceClient) RemoveProductImageBackground(ctx context.Context, in *RemoveProductImageBackgroundRequest, opts ...grpc.CallOption) (*RemoveProductImageBackgroundResponse, error) {
	out := new(RemoveProductImageBackgroundResponse)
	err := c.cc.Invoke(ctx, ImageService_RemoveProductImageBackground_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceClient) UpscaleProductImage(ctx context.Context, in *UpscaleProductImageRequest, opts ...grpc.CallOption) (*UpscaleProductImageResponse, error) {
	out := new(UpscaleProductImageResponse)
	err := c.cc.Invoke(ctx, ImageService_UpscaleProductImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageServiceServer is the server API for ImageService service.
// All implementations should embed UnimplementedImageServiceServer
// for forward compatibility
type ImageServiceServer interface {
	// GenerateProductImageBackground generates a new image where the background
	// of the original image is replaced by an AI generated scene based on
	// provided product information and a text prompt.
	GenerateProductImageBackground(context.Context, *GenerateProductImageBackgroundRequest) (*GenerateProductImageBackgroundResponse, error)
	// RemoveProductImageBackground generates a new image where the background of
	// the original image is removed.
	RemoveProductImageBackground(context.Context, *RemoveProductImageBackgroundRequest) (*RemoveProductImageBackgroundResponse, error)
	// UpscaleProductImage generates a new image where the resolution of the
	// original image is enhanced.
	UpscaleProductImage(context.Context, *UpscaleProductImageRequest) (*UpscaleProductImageResponse, error)
}

// UnimplementedImageServiceServer should be embedded to have forward compatible implementations.
type UnimplementedImageServiceServer struct {
}

func (UnimplementedImageServiceServer) GenerateProductImageBackground(context.Context, *GenerateProductImageBackgroundRequest) (*GenerateProductImageBackgroundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateProductImageBackground not implemented")
}
func (UnimplementedImageServiceServer) RemoveProductImageBackground(context.Context, *RemoveProductImageBackgroundRequest) (*RemoveProductImageBackgroundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveProductImageBackground not implemented")
}
func (UnimplementedImageServiceServer) UpscaleProductImage(context.Context, *UpscaleProductImageRequest) (*UpscaleProductImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpscaleProductImage not implemented")
}

// UnsafeImageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageServiceServer will
// result in compilation errors.
type UnsafeImageServiceServer interface {
	mustEmbedUnimplementedImageServiceServer()
}

func RegisterImageServiceServer(s grpc.ServiceRegistrar, srv ImageServiceServer) {
	s.RegisterService(&ImageService_ServiceDesc, srv)
}

func _ImageService_GenerateProductImageBackground_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateProductImageBackgroundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).GenerateProductImageBackground(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageService_GenerateProductImageBackground_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).GenerateProductImageBackground(ctx, req.(*GenerateProductImageBackgroundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageService_RemoveProductImageBackground_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveProductImageBackgroundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).RemoveProductImageBackground(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageService_RemoveProductImageBackground_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).RemoveProductImageBackground(ctx, req.(*RemoveProductImageBackgroundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageService_UpscaleProductImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpscaleProductImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).UpscaleProductImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageService_UpscaleProductImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).UpscaleProductImage(ctx, req.(*UpscaleProductImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImageService_ServiceDesc is the grpc.ServiceDesc for ImageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.shopping.merchant.productstudio.v1alpha.ImageService",
	HandlerType: (*ImageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateProductImageBackground",
			Handler:    _ImageService_GenerateProductImageBackground_Handler,
		},
		{
			MethodName: "RemoveProductImageBackground",
			Handler:    _ImageService_RemoveProductImageBackground_Handler,
		},
		{
			MethodName: "UpscaleProductImage",
			Handler:    _ImageService_UpscaleProductImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/shopping/merchant/productstudio/v1alpha/image.proto",
}
