// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.7
// source: google/shopping/merchant/productstudio/v1alpha/textsuggestions.proto

package productstudiopb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for the GenerateProductTextSuggestions method.
type GenerateProductTextSuggestionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the account to generate text suggestions for. This
	// acts as a container for the request and does not affect the generation
	// itself, as this is a stateless API. Format: accounts/{account}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Required. Available information about the product. Used to inform the genAI
	// models.
	ProductInfo *ProductInfo `protobuf:"bytes,2,opt,name=product_info,json=productInfo,proto3" json:"product_info,omitempty"`
	// Optional. Configuration parameters that directly influence what content is
	// generated, and how that content is rendered in the final response.
	OutputSpec *OutputSpec `protobuf:"bytes,3,opt,name=output_spec,json=outputSpec,proto3,oneof" json:"output_spec,omitempty"`
	// Optional. Provide some hand-crafted examples of title improvements that are
	// unique to your use case. This is a general tool that handles multiple
	// product categories, but your brand identity may require custom
	// functionality. Feel free to specify that here.
	TitleExamples []*TitleExample `protobuf:"bytes,4,rep,name=title_examples,json=titleExamples,proto3" json:"title_examples,omitempty"`
}

func (x *GenerateProductTextSuggestionsRequest) Reset() {
	*x = GenerateProductTextSuggestionsRequest{}
	mi := &file_google_shopping_merchant_productstudio_v1alpha_textsuggestions_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateProductTextSuggestionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateProductTextSuggestionsRequest) ProtoMessage() {}

func (x *GenerateProductTextSuggestionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_productstudio_v1alpha_textsuggestions_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateProductTextSuggestionsRequest.ProtoReflect.Descriptor instead.
func (*GenerateProductTextSuggestionsRequest) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_productstudio_v1alpha_textsuggestions_proto_rawDescGZIP(), []int{0}
}

func (x *GenerateProductTextSuggestionsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GenerateProductTextSuggestionsRequest) GetProductInfo() *ProductInfo {
	if x != nil {
		return x.ProductInfo
	}
	return nil
}

func (x *GenerateProductTextSuggestionsRequest) GetOutputSpec() *OutputSpec {
	if x != nil {
		return x.OutputSpec
	}
	return nil
}

func (x *GenerateProductTextSuggestionsRequest) GetTitleExamples() []*TitleExample {
	if x != nil {
		return x.TitleExamples
	}
	return nil
}

// Response message for the GenerateProductTextSuggestions method.
type GenerateProductTextSuggestionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Generated title suggestion.
	Title *ProductTextGenerationSuggestion `protobuf:"bytes,1,opt,name=title,proto3,oneof" json:"title,omitempty"`
	// Generated description suggestion.
	Description *ProductTextGenerationSuggestion `protobuf:"bytes,2,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// Any other generated attributes.
	Attributes map[string]string `protobuf:"bytes,3,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Additional info that clients may want to audit surrounding the generation.
	Metadata *ProductTextGenerationMetadata `protobuf:"bytes,4,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
}

func (x *GenerateProductTextSuggestionsResponse) Reset() {
	*x = GenerateProductTextSuggestionsResponse{}
	mi := &file_google_shopping_merchant_productstudio_v1alpha_textsuggestions_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateProductTextSuggestionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateProductTextSuggestionsResponse) ProtoMessage() {}

func (x *GenerateProductTextSuggestionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_productstudio_v1alpha_textsuggestions_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateProductTextSuggestionsResponse.ProtoReflect.Descriptor instead.
func (*GenerateProductTextSuggestionsResponse) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_productstudio_v1alpha_textsuggestions_proto_rawDescGZIP(), []int{1}
}

func (x *GenerateProductTextSuggestionsResponse) GetTitle() *ProductTextGenerationSuggestion {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *GenerateProductTextSuggestionsResponse) GetDescription() *ProductTextGenerationSuggestion {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *GenerateProductTextSuggestionsResponse) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *GenerateProductTextSuggestionsResponse) GetMetadata() *ProductTextGenerationMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// A hand-crafted example of a product title improvement. These examples are
// provided to the AI to improve its quality and guide it towards required
// outputs.
type TitleExample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. A map containing all existing product information. For example:
	// {"title": "dress", "description": "A red dress", "brand": "Dresses4All"}
	// Any information that you might use to populate your product feed.
	ProductInfo map[string]string `protobuf:"bytes,1,rep,name=product_info,json=productInfo,proto3" json:"product_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Required. The product's category. This helps the AI understand when certain
	// examples are more relevant than others.
	Category *string `protobuf:"bytes,2,opt,name=category,proto3,oneof" json:"category,omitempty"`
	// Required. The attributes or approximate attributes that make up the title.
	// For example, title "Google GShoe M" title_format can be "brand | product |
	// size".
	TitleFormat *string `protobuf:"bytes,3,opt,name=title_format,json=titleFormat,proto3,oneof" json:"title_format,omitempty"`
	// Required. A map in the same format as product_info but with all
	// improvements included. For example, {"brand": "Dresses4All", "product":
	// "dress", "color": "red", ...}. The order of attributes in this map may be
	// used to guide the order in which they appear in the final generated title.
	// For instance, the above will become: Dresses4All dress | red
	FinalProductInfo map[string]string `protobuf:"bytes,4,rep,name=final_product_info,json=finalProductInfo,proto3" json:"final_product_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TitleExample) Reset() {
	*x = TitleExample{}
	mi := &file_google_shopping_merchant_productstudio_v1alpha_textsuggestions_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TitleExample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TitleExample) ProtoMessage() {}

func (x *TitleExample) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_productstudio_v1alpha_textsuggestions_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TitleExample.ProtoReflect.Descriptor instead.
func (*TitleExample) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_productstudio_v1alpha_textsuggestions_proto_rawDescGZIP(), []int{2}
}

func (x *TitleExample) GetProductInfo() map[string]string {
	if x != nil {
		return x.ProductInfo
	}
	return nil
}

func (x *TitleExample) GetCategory() string {
	if x != nil && x.Category != nil {
		return *x.Category
	}
	return ""
}

func (x *TitleExample) GetTitleFormat() string {
	if x != nil && x.TitleFormat != nil {
		return *x.TitleFormat
	}
	return ""
}

func (x *TitleExample) GetFinalProductInfo() map[string]string {
	if x != nil {
		return x.FinalProductInfo
	}
	return nil
}

// Wrapper data type for any metadata associated with text generation.
type ProductTextGenerationMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metadata is a pretty loose concept. The data is modeled as a map here to
	// indicate that there is no guaranteed structure to the output past a simple
	// K:V association.
	// The first use-case is to track words added/removed/changed in generations.
	Metadata *structpb.Struct `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *ProductTextGenerationMetadata) Reset() {
	*x = ProductTextGenerationMetadata{}
	mi := &file_google_shopping_merchant_productstudio_v1alpha_textsuggestions_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductTextGenerationMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductTextGenerationMetadata) ProtoMessage() {}

func (x *ProductTextGenerationMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_productstudio_v1alpha_textsuggestions_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductTextGenerationMetadata.ProtoReflect.Descriptor instead.
func (*ProductTextGenerationMetadata) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_productstudio_v1alpha_textsuggestions_proto_rawDescGZIP(), []int{3}
}

func (x *ProductTextGenerationMetadata) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Product image represented as bytes directly or a URI.
type Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The image to use for text generation.
	//
	// Types that are assignable to Image:
	//
	//	*Image_Uri
	//	*Image_Data
	Image isImage_Image `protobuf_oneof:"image"`
}

func (x *Image) Reset() {
	*x = Image{}
	mi := &file_google_shopping_merchant_productstudio_v1alpha_textsuggestions_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_productstudio_v1alpha_textsuggestions_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_productstudio_v1alpha_textsuggestions_proto_rawDescGZIP(), []int{4}
}

func (m *Image) GetImage() isImage_Image {
	if m != nil {
		return m.Image
	}
	return nil
}

func (x *Image) GetUri() string {
	if x, ok := x.GetImage().(*Image_Uri); ok {
		return x.Uri
	}
	return ""
}

func (x *Image) GetData() []byte {
	if x, ok := x.GetImage().(*Image_Data); ok {
		return x.Data
	}
	return nil
}

type isImage_Image interface {
	isImage_Image()
}

type Image_Uri struct {
	// Generally web-requestable URI.
	Uri string `protobuf:"bytes,1,opt,name=uri,proto3,oneof"`
}

type Image_Data struct {
	// Raw bytes for the image.
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3,oneof"`
}

func (*Image_Uri) isImage_Image() {}

func (*Image_Data) isImage_Image() {}

// Available information about the product. Used to inform the genAI models.
type ProductInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. A mapping of all available product attributes. This may include
	// title, description, brand, gender, color, size, etc.
	ProductAttributes map[string]string `protobuf:"bytes,1,rep,name=product_attributes,json=productAttributes,proto3" json:"product_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Optional. Image associated with the product.
	ProductImage *Image `protobuf:"bytes,2,opt,name=product_image,json=productImage,proto3,oneof" json:"product_image,omitempty"`
}

func (x *ProductInfo) Reset() {
	*x = ProductInfo{}
	mi := &file_google_shopping_merchant_productstudio_v1alpha_textsuggestions_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductInfo) ProtoMessage() {}

func (x *ProductInfo) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_productstudio_v1alpha_textsuggestions_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductInfo.ProtoReflect.Descriptor instead.
func (*ProductInfo) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_productstudio_v1alpha_textsuggestions_proto_rawDescGZIP(), []int{5}
}

func (x *ProductInfo) GetProductAttributes() map[string]string {
	if x != nil {
		return x.ProductAttributes
	}
	return nil
}

func (x *ProductInfo) GetProductImage() *Image {
	if x != nil {
		return x.ProductImage
	}
	return nil
}

// Configuration parameters that directly influence what content is generated,
// and how that content is rendered in the final response.
type OutputSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The workflow to execute for the provided product data. Workflows
	// may populate the response's title, description, or both. Currently
	// supported workflow_ids are: "title", "description", and "tide"
	WorkflowId *string `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId,proto3,oneof" json:"workflow_id,omitempty"`
	// Optional. The tone of the output generated text. Supported tones are:
	// "playful", "formal", "persuasive", and "conversational"
	Tone *string `protobuf:"bytes,2,opt,name=tone,proto3,oneof" json:"tone,omitempty"`
	// Optional. Any editorial changes for the generated product data. For
	// example, replace Small with "S", do not modify color if already present.
	EditorialChanges *string `protobuf:"bytes,3,opt,name=editorial_changes,json=editorialChanges,proto3,oneof" json:"editorial_changes,omitempty"`
	// Optional. The language for output titles/descriptions. For example.
	// 'German', 'es', 'FR'. Default is 'en'.
	TargetLanguage *string `protobuf:"bytes,4,opt,name=target_language,json=targetLanguage,proto3,oneof" json:"target_language,omitempty"`
	// Optional. The order that generated attributes should be placed in the
	// generated title. Eg., if the attribute order is ["brand", "product",
	// "size"], the generated title will have brand first, followed by the product
	// name, and then size information after that.
	AttributeOrder []string `protobuf:"bytes,5,rep,name=attribute_order,json=attributeOrder,proto3" json:"attribute_order,omitempty"`
	// Optional. Character used to separate attributes in the generated title.
	// For example, '|', '-', ','.
	AttributeSeparator *string `protobuf:"bytes,6,opt,name=attribute_separator,json=attributeSeparator,proto3,oneof" json:"attribute_separator,omitempty"`
}

func (x *OutputSpec) Reset() {
	*x = OutputSpec{}
	mi := &file_google_shopping_merchant_productstudio_v1alpha_textsuggestions_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OutputSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputSpec) ProtoMessage() {}

func (x *OutputSpec) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_productstudio_v1alpha_textsuggestions_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputSpec.ProtoReflect.Descriptor instead.
func (*OutputSpec) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_productstudio_v1alpha_textsuggestions_proto_rawDescGZIP(), []int{6}
}

func (x *OutputSpec) GetWorkflowId() string {
	if x != nil && x.WorkflowId != nil {
		return *x.WorkflowId
	}
	return ""
}

func (x *OutputSpec) GetTone() string {
	if x != nil && x.Tone != nil {
		return *x.Tone
	}
	return ""
}

func (x *OutputSpec) GetEditorialChanges() string {
	if x != nil && x.EditorialChanges != nil {
		return *x.EditorialChanges
	}
	return ""
}

func (x *OutputSpec) GetTargetLanguage() string {
	if x != nil && x.TargetLanguage != nil {
		return *x.TargetLanguage
	}
	return ""
}

func (x *OutputSpec) GetAttributeOrder() []string {
	if x != nil {
		return x.AttributeOrder
	}
	return nil
}

func (x *OutputSpec) GetAttributeSeparator() string {
	if x != nil && x.AttributeSeparator != nil {
		return *x.AttributeSeparator
	}
	return ""
}

// Text generated for a product, optionally including its quality score.
type ProductTextGenerationSuggestion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The text generated
	Text *string `protobuf:"bytes,1,opt,name=text,proto3,oneof" json:"text,omitempty"`
	// The quality score associated with the generation. Heuristic implemented
	// according to the feedgen team's implementation styles.
	Score *float32 `protobuf:"fixed32,2,opt,name=score,proto3,oneof" json:"score,omitempty"`
	// A brief summarization of all the changes that have been made.
	ChangeSummary *string `protobuf:"bytes,3,opt,name=change_summary,json=changeSummary,proto3,oneof" json:"change_summary,omitempty"`
}

func (x *ProductTextGenerationSuggestion) Reset() {
	*x = ProductTextGenerationSuggestion{}
	mi := &file_google_shopping_merchant_productstudio_v1alpha_textsuggestions_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductTextGenerationSuggestion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductTextGenerationSuggestion) ProtoMessage() {}

func (x *ProductTextGenerationSuggestion) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_productstudio_v1alpha_textsuggestions_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductTextGenerationSuggestion.ProtoReflect.Descriptor instead.
func (*ProductTextGenerationSuggestion) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_productstudio_v1alpha_textsuggestions_proto_rawDescGZIP(), []int{7}
}

func (x *ProductTextGenerationSuggestion) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *ProductTextGenerationSuggestion) GetScore() float32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *ProductTextGenerationSuggestion) GetChangeSummary() string {
	if x != nil && x.ChangeSummary != nil {
		return *x.ChangeSummary
	}
	return ""
}

var File_google_shopping_merchant_productstudio_v1alpha_textsuggestions_proto protoreflect.FileDescriptor

var file_google_shopping_merchant_productstudio_v1alpha_textsuggestions_proto_rawDesc = []byte{
	0x0a, 0x44, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x2f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2f, 0x74, 0x65, 0x78, 0x74, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73,
	0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x86, 0x03, 0x0a,
	0x25, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x54, 0x65, 0x78, 0x74, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x63, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73,
	0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x65, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x53, 0x70, 0x65, 0x63, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x0a, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x53, 0x70, 0x65, 0x63, 0x88, 0x01, 0x01, 0x12, 0x68, 0x0a, 0x0e, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0d, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x45, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x22, 0xeb, 0x04, 0x0a, 0x26, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x65, 0x78, 0x74, 0x53, 0x75, 0x67,
	0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x6a, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x4f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x65, 0x78, 0x74, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x76, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x4f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x65, 0x78, 0x74, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x86, 0x01, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x66, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x65, 0x78, 0x74, 0x53, 0x75,
	0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x6e, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x4d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x65, 0x78, 0x74, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x02,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x1a, 0x3d, 0x0a,
	0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x83, 0x04, 0x0a, 0x0c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x45, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x12, 0x75, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x48, 0x00, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x2b, 0x0a, 0x0c, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x48, 0x01, 0x52, 0x0b,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x85,
	0x01, 0x0a, 0x12, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x10, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x3e, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x54, 0x0a, 0x1d, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x54, 0x65, 0x78, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x3a, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x14, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x42, 0x07, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0xd4, 0x02, 0x0a, 0x0b,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x86, 0x01, 0x0a, 0x12,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x64, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x44, 0x0a, 0x16, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x22, 0x83, 0x03, 0x0a, 0x0a, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x29, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x0a, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x04,
	0x74, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48,
	0x01, 0x52, 0x04, 0x74, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x11, 0x65, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x02, 0x52, 0x10, 0x65, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x31, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48,
	0x03, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x0e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x39, 0x0a, 0x13, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f,
	0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x48, 0x04, 0x52, 0x12, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x74, 0x6f, 0x6e, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x73,
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xa7, 0x01, 0x0a, 0x1f, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x54, 0x65, 0x78, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x32, 0x8e, 0x03, 0x0a, 0x16, 0x54, 0x65, 0x78, 0x74, 0x53, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xaa, 0x02,
	0x0a, 0x1e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x54, 0x65, 0x78, 0x74, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x55, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x54, 0x65, 0x78, 0x74, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x56, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x65, 0x78, 0x74, 0x53, 0x75, 0x67, 0x67,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x59, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4c, 0x3a, 0x01,
	0x2a, 0x22, 0x47, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x65, 0x78, 0x74, 0x53,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x47, 0xca, 0x41, 0x1a, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x27, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x42, 0xac, 0x01, 0x0a, 0x32, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x42, 0x14, 0x54, 0x65, 0x78, 0x74,
	0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x5e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x2f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x70, 0x62, 0x3b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_shopping_merchant_productstudio_v1alpha_textsuggestions_proto_rawDescOnce sync.Once
	file_google_shopping_merchant_productstudio_v1alpha_textsuggestions_proto_rawDescData = file_google_shopping_merchant_productstudio_v1alpha_textsuggestions_proto_rawDesc
)

func file_google_shopping_merchant_productstudio_v1alpha_textsuggestions_proto_rawDescGZIP() []byte {
	file_google_shopping_merchant_productstudio_v1alpha_textsuggestions_proto_rawDescOnce.Do(func() {
		file_google_shopping_merchant_productstudio_v1alpha_textsuggestions_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_shopping_merchant_productstudio_v1alpha_textsuggestions_proto_rawDescData)
	})
	return file_google_shopping_merchant_productstudio_v1alpha_textsuggestions_proto_rawDescData
}

var file_google_shopping_merchant_productstudio_v1alpha_textsuggestions_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_google_shopping_merchant_productstudio_v1alpha_textsuggestions_proto_goTypes = []any{
	(*GenerateProductTextSuggestionsRequest)(nil),  // 0: google.shopping.merchant.productstudio.v1alpha.GenerateProductTextSuggestionsRequest
	(*GenerateProductTextSuggestionsResponse)(nil), // 1: google.shopping.merchant.productstudio.v1alpha.GenerateProductTextSuggestionsResponse
	(*TitleExample)(nil),                           // 2: google.shopping.merchant.productstudio.v1alpha.TitleExample
	(*ProductTextGenerationMetadata)(nil),          // 3: google.shopping.merchant.productstudio.v1alpha.ProductTextGenerationMetadata
	(*Image)(nil),                                  // 4: google.shopping.merchant.productstudio.v1alpha.Image
	(*ProductInfo)(nil),                            // 5: google.shopping.merchant.productstudio.v1alpha.ProductInfo
	(*OutputSpec)(nil),                             // 6: google.shopping.merchant.productstudio.v1alpha.OutputSpec
	(*ProductTextGenerationSuggestion)(nil),        // 7: google.shopping.merchant.productstudio.v1alpha.ProductTextGenerationSuggestion
	nil,                                            // 8: google.shopping.merchant.productstudio.v1alpha.GenerateProductTextSuggestionsResponse.AttributesEntry
	nil,                                            // 9: google.shopping.merchant.productstudio.v1alpha.TitleExample.ProductInfoEntry
	nil,                                            // 10: google.shopping.merchant.productstudio.v1alpha.TitleExample.FinalProductInfoEntry
	nil,                                            // 11: google.shopping.merchant.productstudio.v1alpha.ProductInfo.ProductAttributesEntry
	(*structpb.Struct)(nil),                        // 12: google.protobuf.Struct
}
var file_google_shopping_merchant_productstudio_v1alpha_textsuggestions_proto_depIdxs = []int32{
	5,  // 0: google.shopping.merchant.productstudio.v1alpha.GenerateProductTextSuggestionsRequest.product_info:type_name -> google.shopping.merchant.productstudio.v1alpha.ProductInfo
	6,  // 1: google.shopping.merchant.productstudio.v1alpha.GenerateProductTextSuggestionsRequest.output_spec:type_name -> google.shopping.merchant.productstudio.v1alpha.OutputSpec
	2,  // 2: google.shopping.merchant.productstudio.v1alpha.GenerateProductTextSuggestionsRequest.title_examples:type_name -> google.shopping.merchant.productstudio.v1alpha.TitleExample
	7,  // 3: google.shopping.merchant.productstudio.v1alpha.GenerateProductTextSuggestionsResponse.title:type_name -> google.shopping.merchant.productstudio.v1alpha.ProductTextGenerationSuggestion
	7,  // 4: google.shopping.merchant.productstudio.v1alpha.GenerateProductTextSuggestionsResponse.description:type_name -> google.shopping.merchant.productstudio.v1alpha.ProductTextGenerationSuggestion
	8,  // 5: google.shopping.merchant.productstudio.v1alpha.GenerateProductTextSuggestionsResponse.attributes:type_name -> google.shopping.merchant.productstudio.v1alpha.GenerateProductTextSuggestionsResponse.AttributesEntry
	3,  // 6: google.shopping.merchant.productstudio.v1alpha.GenerateProductTextSuggestionsResponse.metadata:type_name -> google.shopping.merchant.productstudio.v1alpha.ProductTextGenerationMetadata
	9,  // 7: google.shopping.merchant.productstudio.v1alpha.TitleExample.product_info:type_name -> google.shopping.merchant.productstudio.v1alpha.TitleExample.ProductInfoEntry
	10, // 8: google.shopping.merchant.productstudio.v1alpha.TitleExample.final_product_info:type_name -> google.shopping.merchant.productstudio.v1alpha.TitleExample.FinalProductInfoEntry
	12, // 9: google.shopping.merchant.productstudio.v1alpha.ProductTextGenerationMetadata.metadata:type_name -> google.protobuf.Struct
	11, // 10: google.shopping.merchant.productstudio.v1alpha.ProductInfo.product_attributes:type_name -> google.shopping.merchant.productstudio.v1alpha.ProductInfo.ProductAttributesEntry
	4,  // 11: google.shopping.merchant.productstudio.v1alpha.ProductInfo.product_image:type_name -> google.shopping.merchant.productstudio.v1alpha.Image
	0,  // 12: google.shopping.merchant.productstudio.v1alpha.TextSuggestionsService.GenerateProductTextSuggestions:input_type -> google.shopping.merchant.productstudio.v1alpha.GenerateProductTextSuggestionsRequest
	1,  // 13: google.shopping.merchant.productstudio.v1alpha.TextSuggestionsService.GenerateProductTextSuggestions:output_type -> google.shopping.merchant.productstudio.v1alpha.GenerateProductTextSuggestionsResponse
	13, // [13:14] is the sub-list for method output_type
	12, // [12:13] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_google_shopping_merchant_productstudio_v1alpha_textsuggestions_proto_init() }
func file_google_shopping_merchant_productstudio_v1alpha_textsuggestions_proto_init() {
	if File_google_shopping_merchant_productstudio_v1alpha_textsuggestions_proto != nil {
		return
	}
	file_google_shopping_merchant_productstudio_v1alpha_textsuggestions_proto_msgTypes[0].OneofWrappers = []any{}
	file_google_shopping_merchant_productstudio_v1alpha_textsuggestions_proto_msgTypes[1].OneofWrappers = []any{}
	file_google_shopping_merchant_productstudio_v1alpha_textsuggestions_proto_msgTypes[2].OneofWrappers = []any{}
	file_google_shopping_merchant_productstudio_v1alpha_textsuggestions_proto_msgTypes[4].OneofWrappers = []any{
		(*Image_Uri)(nil),
		(*Image_Data)(nil),
	}
	file_google_shopping_merchant_productstudio_v1alpha_textsuggestions_proto_msgTypes[5].OneofWrappers = []any{}
	file_google_shopping_merchant_productstudio_v1alpha_textsuggestions_proto_msgTypes[6].OneofWrappers = []any{}
	file_google_shopping_merchant_productstudio_v1alpha_textsuggestions_proto_msgTypes[7].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_shopping_merchant_productstudio_v1alpha_textsuggestions_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_google_shopping_merchant_productstudio_v1alpha_textsuggestions_proto_goTypes,
		DependencyIndexes: file_google_shopping_merchant_productstudio_v1alpha_textsuggestions_proto_depIdxs,
		MessageInfos:      file_google_shopping_merchant_productstudio_v1alpha_textsuggestions_proto_msgTypes,
	}.Build()
	File_google_shopping_merchant_productstudio_v1alpha_textsuggestions_proto = out.File
	file_google_shopping_merchant_productstudio_v1alpha_textsuggestions_proto_rawDesc = nil
	file_google_shopping_merchant_productstudio_v1alpha_textsuggestions_proto_goTypes = nil
	file_google_shopping_merchant_productstudio_v1alpha_textsuggestions_proto_depIdxs = nil
}
