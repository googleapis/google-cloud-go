// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/shopping/merchant/inventories/v1beta/regionalinventory.proto

package inventoriespb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RegionalInventoryService_ListRegionalInventories_FullMethodName = "/google.shopping.merchant.inventories.v1beta.RegionalInventoryService/ListRegionalInventories"
	RegionalInventoryService_InsertRegionalInventory_FullMethodName = "/google.shopping.merchant.inventories.v1beta.RegionalInventoryService/InsertRegionalInventory"
	RegionalInventoryService_DeleteRegionalInventory_FullMethodName = "/google.shopping.merchant.inventories.v1beta.RegionalInventoryService/DeleteRegionalInventory"
)

// RegionalInventoryServiceClient is the client API for RegionalInventoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegionalInventoryServiceClient interface {
	// Lists the `RegionalInventory` resources for the given product in your
	// merchant account. The response might contain fewer items than specified by
	// `pageSize`.  If `pageToken` was returned in previous request, it can be
	// used to obtain additional results.
	//
	// `RegionalInventory` resources are listed per product for a given account.
	ListRegionalInventories(ctx context.Context, in *ListRegionalInventoriesRequest, opts ...grpc.CallOption) (*ListRegionalInventoriesResponse, error)
	// Inserts a `RegionalInventory` to a given product in your
	// merchant account.
	//
	// Replaces the full `RegionalInventory` resource if an entry with the same
	// [`region`][google.shopping.merchant.inventories.v1beta.RegionalInventory.region]
	// already exists for the product.
	//
	// It might take up to 30 minutes for the new or updated `RegionalInventory`
	// resource to appear in products.
	InsertRegionalInventory(ctx context.Context, in *InsertRegionalInventoryRequest, opts ...grpc.CallOption) (*RegionalInventory, error)
	// Deletes the specified `RegionalInventory` resource from the given product
	// in your merchant account.  It might take up to an hour for the
	// `RegionalInventory` to be deleted from the specific product.
	// Once you have received a successful delete response, wait for that
	// period before attempting a delete again.
	DeleteRegionalInventory(ctx context.Context, in *DeleteRegionalInventoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type regionalInventoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRegionalInventoryServiceClient(cc grpc.ClientConnInterface) RegionalInventoryServiceClient {
	return &regionalInventoryServiceClient{cc}
}

func (c *regionalInventoryServiceClient) ListRegionalInventories(ctx context.Context, in *ListRegionalInventoriesRequest, opts ...grpc.CallOption) (*ListRegionalInventoriesResponse, error) {
	out := new(ListRegionalInventoriesResponse)
	err := c.cc.Invoke(ctx, RegionalInventoryService_ListRegionalInventories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionalInventoryServiceClient) InsertRegionalInventory(ctx context.Context, in *InsertRegionalInventoryRequest, opts ...grpc.CallOption) (*RegionalInventory, error) {
	out := new(RegionalInventory)
	err := c.cc.Invoke(ctx, RegionalInventoryService_InsertRegionalInventory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionalInventoryServiceClient) DeleteRegionalInventory(ctx context.Context, in *DeleteRegionalInventoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RegionalInventoryService_DeleteRegionalInventory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegionalInventoryServiceServer is the server API for RegionalInventoryService service.
// All implementations should embed UnimplementedRegionalInventoryServiceServer
// for forward compatibility
type RegionalInventoryServiceServer interface {
	// Lists the `RegionalInventory` resources for the given product in your
	// merchant account. The response might contain fewer items than specified by
	// `pageSize`.  If `pageToken` was returned in previous request, it can be
	// used to obtain additional results.
	//
	// `RegionalInventory` resources are listed per product for a given account.
	ListRegionalInventories(context.Context, *ListRegionalInventoriesRequest) (*ListRegionalInventoriesResponse, error)
	// Inserts a `RegionalInventory` to a given product in your
	// merchant account.
	//
	// Replaces the full `RegionalInventory` resource if an entry with the same
	// [`region`][google.shopping.merchant.inventories.v1beta.RegionalInventory.region]
	// already exists for the product.
	//
	// It might take up to 30 minutes for the new or updated `RegionalInventory`
	// resource to appear in products.
	InsertRegionalInventory(context.Context, *InsertRegionalInventoryRequest) (*RegionalInventory, error)
	// Deletes the specified `RegionalInventory` resource from the given product
	// in your merchant account.  It might take up to an hour for the
	// `RegionalInventory` to be deleted from the specific product.
	// Once you have received a successful delete response, wait for that
	// period before attempting a delete again.
	DeleteRegionalInventory(context.Context, *DeleteRegionalInventoryRequest) (*emptypb.Empty, error)
}

// UnimplementedRegionalInventoryServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRegionalInventoryServiceServer struct {
}

func (UnimplementedRegionalInventoryServiceServer) ListRegionalInventories(context.Context, *ListRegionalInventoriesRequest) (*ListRegionalInventoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRegionalInventories not implemented")
}
func (UnimplementedRegionalInventoryServiceServer) InsertRegionalInventory(context.Context, *InsertRegionalInventoryRequest) (*RegionalInventory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertRegionalInventory not implemented")
}
func (UnimplementedRegionalInventoryServiceServer) DeleteRegionalInventory(context.Context, *DeleteRegionalInventoryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRegionalInventory not implemented")
}

// UnsafeRegionalInventoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegionalInventoryServiceServer will
// result in compilation errors.
type UnsafeRegionalInventoryServiceServer interface {
	mustEmbedUnimplementedRegionalInventoryServiceServer()
}

func RegisterRegionalInventoryServiceServer(s grpc.ServiceRegistrar, srv RegionalInventoryServiceServer) {
	s.RegisterService(&RegionalInventoryService_ServiceDesc, srv)
}

func _RegionalInventoryService_ListRegionalInventories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRegionalInventoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionalInventoryServiceServer).ListRegionalInventories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegionalInventoryService_ListRegionalInventories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionalInventoryServiceServer).ListRegionalInventories(ctx, req.(*ListRegionalInventoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegionalInventoryService_InsertRegionalInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertRegionalInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionalInventoryServiceServer).InsertRegionalInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegionalInventoryService_InsertRegionalInventory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionalInventoryServiceServer).InsertRegionalInventory(ctx, req.(*InsertRegionalInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegionalInventoryService_DeleteRegionalInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRegionalInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionalInventoryServiceServer).DeleteRegionalInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegionalInventoryService_DeleteRegionalInventory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionalInventoryServiceServer).DeleteRegionalInventory(ctx, req.(*DeleteRegionalInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegionalInventoryService_ServiceDesc is the grpc.ServiceDesc for RegionalInventoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegionalInventoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.shopping.merchant.inventories.v1beta.RegionalInventoryService",
	HandlerType: (*RegionalInventoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRegionalInventories",
			Handler:    _RegionalInventoryService_ListRegionalInventories_Handler,
		},
		{
			MethodName: "InsertRegionalInventory",
			Handler:    _RegionalInventoryService_InsertRegionalInventory_Handler,
		},
		{
			MethodName: "DeleteRegionalInventory",
			Handler:    _RegionalInventoryService_DeleteRegionalInventory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/shopping/merchant/inventories/v1beta/regionalinventory.proto",
}
