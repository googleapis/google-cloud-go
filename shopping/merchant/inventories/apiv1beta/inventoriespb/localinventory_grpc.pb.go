// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/shopping/merchant/inventories/v1beta/localinventory.proto

package inventoriespb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LocalInventoryService_ListLocalInventories_FullMethodName = "/google.shopping.merchant.inventories.v1beta.LocalInventoryService/ListLocalInventories"
	LocalInventoryService_InsertLocalInventory_FullMethodName = "/google.shopping.merchant.inventories.v1beta.LocalInventoryService/InsertLocalInventory"
	LocalInventoryService_DeleteLocalInventory_FullMethodName = "/google.shopping.merchant.inventories.v1beta.LocalInventoryService/DeleteLocalInventory"
)

// LocalInventoryServiceClient is the client API for LocalInventoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocalInventoryServiceClient interface {
	// Lists the `LocalInventory` resources for the given product in your merchant
	// account. The response might contain fewer items than specified by
	// `pageSize`. If `pageToken` was returned in previous request, it can be used
	// to obtain additional results.
	//
	// `LocalInventory` resources are listed per product for a given account.
	ListLocalInventories(ctx context.Context, in *ListLocalInventoriesRequest, opts ...grpc.CallOption) (*ListLocalInventoriesResponse, error)
	// Inserts a `LocalInventory` resource to a product in your merchant
	// account.
	//
	// Replaces the full `LocalInventory` resource if an entry with the same
	// [`storeCode`][google.shopping.merchant.inventories.v1beta.LocalInventory.store_code]
	// already exists for the product.
	//
	// It might take up to 30 minutes for the new or updated `LocalInventory`
	// resource to appear in products.
	InsertLocalInventory(ctx context.Context, in *InsertLocalInventoryRequest, opts ...grpc.CallOption) (*LocalInventory, error)
	// Deletes the specified `LocalInventory` from the given product in your
	// merchant account. It might take a up to an hour for the
	// `LocalInventory` to be deleted from the specific product.
	// Once you have received a successful delete response, wait for that
	// period before attempting a delete again.
	DeleteLocalInventory(ctx context.Context, in *DeleteLocalInventoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type localInventoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLocalInventoryServiceClient(cc grpc.ClientConnInterface) LocalInventoryServiceClient {
	return &localInventoryServiceClient{cc}
}

func (c *localInventoryServiceClient) ListLocalInventories(ctx context.Context, in *ListLocalInventoriesRequest, opts ...grpc.CallOption) (*ListLocalInventoriesResponse, error) {
	out := new(ListLocalInventoriesResponse)
	err := c.cc.Invoke(ctx, LocalInventoryService_ListLocalInventories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localInventoryServiceClient) InsertLocalInventory(ctx context.Context, in *InsertLocalInventoryRequest, opts ...grpc.CallOption) (*LocalInventory, error) {
	out := new(LocalInventory)
	err := c.cc.Invoke(ctx, LocalInventoryService_InsertLocalInventory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localInventoryServiceClient) DeleteLocalInventory(ctx context.Context, in *DeleteLocalInventoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, LocalInventoryService_DeleteLocalInventory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocalInventoryServiceServer is the server API for LocalInventoryService service.
// All implementations should embed UnimplementedLocalInventoryServiceServer
// for forward compatibility
type LocalInventoryServiceServer interface {
	// Lists the `LocalInventory` resources for the given product in your merchant
	// account. The response might contain fewer items than specified by
	// `pageSize`. If `pageToken` was returned in previous request, it can be used
	// to obtain additional results.
	//
	// `LocalInventory` resources are listed per product for a given account.
	ListLocalInventories(context.Context, *ListLocalInventoriesRequest) (*ListLocalInventoriesResponse, error)
	// Inserts a `LocalInventory` resource to a product in your merchant
	// account.
	//
	// Replaces the full `LocalInventory` resource if an entry with the same
	// [`storeCode`][google.shopping.merchant.inventories.v1beta.LocalInventory.store_code]
	// already exists for the product.
	//
	// It might take up to 30 minutes for the new or updated `LocalInventory`
	// resource to appear in products.
	InsertLocalInventory(context.Context, *InsertLocalInventoryRequest) (*LocalInventory, error)
	// Deletes the specified `LocalInventory` from the given product in your
	// merchant account. It might take a up to an hour for the
	// `LocalInventory` to be deleted from the specific product.
	// Once you have received a successful delete response, wait for that
	// period before attempting a delete again.
	DeleteLocalInventory(context.Context, *DeleteLocalInventoryRequest) (*emptypb.Empty, error)
}

// UnimplementedLocalInventoryServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLocalInventoryServiceServer struct {
}

func (UnimplementedLocalInventoryServiceServer) ListLocalInventories(context.Context, *ListLocalInventoriesRequest) (*ListLocalInventoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLocalInventories not implemented")
}
func (UnimplementedLocalInventoryServiceServer) InsertLocalInventory(context.Context, *InsertLocalInventoryRequest) (*LocalInventory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertLocalInventory not implemented")
}
func (UnimplementedLocalInventoryServiceServer) DeleteLocalInventory(context.Context, *DeleteLocalInventoryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLocalInventory not implemented")
}

// UnsafeLocalInventoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocalInventoryServiceServer will
// result in compilation errors.
type UnsafeLocalInventoryServiceServer interface {
	mustEmbedUnimplementedLocalInventoryServiceServer()
}

func RegisterLocalInventoryServiceServer(s grpc.ServiceRegistrar, srv LocalInventoryServiceServer) {
	s.RegisterService(&LocalInventoryService_ServiceDesc, srv)
}

func _LocalInventoryService_ListLocalInventories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLocalInventoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalInventoryServiceServer).ListLocalInventories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalInventoryService_ListLocalInventories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalInventoryServiceServer).ListLocalInventories(ctx, req.(*ListLocalInventoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalInventoryService_InsertLocalInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertLocalInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalInventoryServiceServer).InsertLocalInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalInventoryService_InsertLocalInventory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalInventoryServiceServer).InsertLocalInventory(ctx, req.(*InsertLocalInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalInventoryService_DeleteLocalInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLocalInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalInventoryServiceServer).DeleteLocalInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalInventoryService_DeleteLocalInventory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalInventoryServiceServer).DeleteLocalInventory(ctx, req.(*DeleteLocalInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LocalInventoryService_ServiceDesc is the grpc.ServiceDesc for LocalInventoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LocalInventoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.shopping.merchant.inventories.v1beta.LocalInventoryService",
	HandlerType: (*LocalInventoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListLocalInventories",
			Handler:    _LocalInventoryService_ListLocalInventories_Handler,
		},
		{
			MethodName: "InsertLocalInventory",
			Handler:    _LocalInventoryService_InsertLocalInventory_Handler,
		},
		{
			MethodName: "DeleteLocalInventory",
			Handler:    _LocalInventoryService_DeleteLocalInventory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/shopping/merchant/inventories/v1beta/localinventory.proto",
}
