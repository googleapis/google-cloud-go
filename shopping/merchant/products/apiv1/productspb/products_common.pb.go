// LINT: LEGACY_NAMES
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.7
// source: google/shopping/merchant/products/v1/products_common.proto

package productspb

import (
	typepb "cloud.google.com/go/shopping/type/typepb"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	interval "google.golang.org/genproto/googleapis/type/interval"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The subscription period of the product.
type SubscriptionPeriod int32

const (
	// Indicates that the subscription period is unspecified.
	SubscriptionPeriod_SUBSCRIPTION_PERIOD_UNSPECIFIED SubscriptionPeriod = 0
	// Indicates that the subscription period is month.
	SubscriptionPeriod_MONTH SubscriptionPeriod = 1
	// Indicates that the subscription period is year.
	SubscriptionPeriod_YEAR SubscriptionPeriod = 2
)

// Enum value maps for SubscriptionPeriod.
var (
	SubscriptionPeriod_name = map[int32]string{
		0: "SUBSCRIPTION_PERIOD_UNSPECIFIED",
		1: "MONTH",
		2: "YEAR",
	}
	SubscriptionPeriod_value = map[string]int32{
		"SUBSCRIPTION_PERIOD_UNSPECIFIED": 0,
		"MONTH":                           1,
		"YEAR":                            2,
	}
)

func (x SubscriptionPeriod) Enum() *SubscriptionPeriod {
	p := new(SubscriptionPeriod)
	*p = x
	return p
}

func (x SubscriptionPeriod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubscriptionPeriod) Descriptor() protoreflect.EnumDescriptor {
	return file_google_shopping_merchant_products_v1_products_common_proto_enumTypes[0].Descriptor()
}

func (SubscriptionPeriod) Type() protoreflect.EnumType {
	return &file_google_shopping_merchant_products_v1_products_common_proto_enumTypes[0]
}

func (x SubscriptionPeriod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubscriptionPeriod.Descriptor instead.
func (SubscriptionPeriod) EnumDescriptor() ([]byte, []int) {
	return file_google_shopping_merchant_products_v1_products_common_proto_rawDescGZIP(), []int{0}
}

// Target [age group](https://support.google.com/merchants/answer/6324463) of
// the item.
type AgeGroup int32

const (
	// Age group is not specified.
	AgeGroup_AGE_GROUP_UNSPECIFIED AgeGroup = 0
	// Teens or older.
	AgeGroup_ADULT AgeGroup = 1
	// 5-13 years old.
	AgeGroup_KIDS AgeGroup = 2
	// 1-5 years old.
	AgeGroup_TODDLER AgeGroup = 3
	// 3-12 months old.
	AgeGroup_INFANT AgeGroup = 4
	// 0-3 months old.
	AgeGroup_NEWBORN AgeGroup = 5
)

// Enum value maps for AgeGroup.
var (
	AgeGroup_name = map[int32]string{
		0: "AGE_GROUP_UNSPECIFIED",
		1: "ADULT",
		2: "KIDS",
		3: "TODDLER",
		4: "INFANT",
		5: "NEWBORN",
	}
	AgeGroup_value = map[string]int32{
		"AGE_GROUP_UNSPECIFIED": 0,
		"ADULT":                 1,
		"KIDS":                  2,
		"TODDLER":               3,
		"INFANT":                4,
		"NEWBORN":               5,
	}
)

func (x AgeGroup) Enum() *AgeGroup {
	p := new(AgeGroup)
	*p = x
	return p
}

func (x AgeGroup) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AgeGroup) Descriptor() protoreflect.EnumDescriptor {
	return file_google_shopping_merchant_products_v1_products_common_proto_enumTypes[1].Descriptor()
}

func (AgeGroup) Type() protoreflect.EnumType {
	return &file_google_shopping_merchant_products_v1_products_common_proto_enumTypes[1]
}

func (x AgeGroup) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AgeGroup.Descriptor instead.
func (AgeGroup) EnumDescriptor() ([]byte, []int) {
	return file_google_shopping_merchant_products_v1_products_common_proto_rawDescGZIP(), []int{1}
}

// [Availability](https://support.google.com/merchants/answer/6324448) status
// of the item.
type Availability int32

const (
	// Availability is not specified.
	Availability_AVAILABILITY_UNSPECIFIED Availability = 0
	// In stock.
	Availability_IN_STOCK Availability = 1
	// Out of stock.
	Availability_OUT_OF_STOCK Availability = 2
	// Pre-order.
	Availability_PREORDER Availability = 3
	// Limited availability.
	Availability_LIMITED_AVAILABILITY Availability = 4
	// Backorder.
	Availability_BACKORDER Availability = 5
)

// Enum value maps for Availability.
var (
	Availability_name = map[int32]string{
		0: "AVAILABILITY_UNSPECIFIED",
		1: "IN_STOCK",
		2: "OUT_OF_STOCK",
		3: "PREORDER",
		4: "LIMITED_AVAILABILITY",
		5: "BACKORDER",
	}
	Availability_value = map[string]int32{
		"AVAILABILITY_UNSPECIFIED": 0,
		"IN_STOCK":                 1,
		"OUT_OF_STOCK":             2,
		"PREORDER":                 3,
		"LIMITED_AVAILABILITY":     4,
		"BACKORDER":                5,
	}
)

func (x Availability) Enum() *Availability {
	p := new(Availability)
	*p = x
	return p
}

func (x Availability) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Availability) Descriptor() protoreflect.EnumDescriptor {
	return file_google_shopping_merchant_products_v1_products_common_proto_enumTypes[2].Descriptor()
}

func (Availability) Type() protoreflect.EnumType {
	return &file_google_shopping_merchant_products_v1_products_common_proto_enumTypes[2]
}

func (x Availability) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Availability.Descriptor instead.
func (Availability) EnumDescriptor() ([]byte, []int) {
	return file_google_shopping_merchant_products_v1_products_common_proto_rawDescGZIP(), []int{2}
}

// [Condition](https://support.google.com/merchants/answer/6324469) or state
// of the item.
type Condition int32

const (
	// Default value. This value is unused.
	Condition_CONDITION_UNSPECIFIED Condition = 0
	// Brand new, original, unopened packaging.
	Condition_NEW Condition = 1
	// Previously used, original packaging opened or missing.
	Condition_USED Condition = 2
	// Professionally restored to working order, comes with a warranty, may or
	// may not have the original packaging.
	Condition_REFURBISHED Condition = 3
)

// Enum value maps for Condition.
var (
	Condition_name = map[int32]string{
		0: "CONDITION_UNSPECIFIED",
		1: "NEW",
		2: "USED",
		3: "REFURBISHED",
	}
	Condition_value = map[string]int32{
		"CONDITION_UNSPECIFIED": 0,
		"NEW":                   1,
		"USED":                  2,
		"REFURBISHED":           3,
	}
)

func (x Condition) Enum() *Condition {
	p := new(Condition)
	*p = x
	return p
}

func (x Condition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Condition) Descriptor() protoreflect.EnumDescriptor {
	return file_google_shopping_merchant_products_v1_products_common_proto_enumTypes[3].Descriptor()
}

func (Condition) Type() protoreflect.EnumType {
	return &file_google_shopping_merchant_products_v1_products_common_proto_enumTypes[3]
}

func (x Condition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Condition.Descriptor instead.
func (Condition) EnumDescriptor() ([]byte, []int) {
	return file_google_shopping_merchant_products_v1_products_common_proto_rawDescGZIP(), []int{3}
}

// Target [gender](https://support.google.com/merchants/answer/6324479) of the
// item.
type Gender int32

const (
	// Gender is not specified.
	Gender_GENDER_UNSPECIFIED Gender = 0
	// Male.
	Gender_MALE Gender = 1
	// Female.
	Gender_FEMALE Gender = 2
	// Unisex.
	Gender_UNISEX Gender = 3
)

// Enum value maps for Gender.
var (
	Gender_name = map[int32]string{
		0: "GENDER_UNSPECIFIED",
		1: "MALE",
		2: "FEMALE",
		3: "UNISEX",
	}
	Gender_value = map[string]int32{
		"GENDER_UNSPECIFIED": 0,
		"MALE":               1,
		"FEMALE":             2,
		"UNISEX":             3,
	}
)

func (x Gender) Enum() *Gender {
	p := new(Gender)
	*p = x
	return p
}

func (x Gender) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Gender) Descriptor() protoreflect.EnumDescriptor {
	return file_google_shopping_merchant_products_v1_products_common_proto_enumTypes[4].Descriptor()
}

func (Gender) Type() protoreflect.EnumType {
	return &file_google_shopping_merchant_products_v1_products_common_proto_enumTypes[4]
}

func (x Gender) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Gender.Descriptor instead.
func (Gender) EnumDescriptor() ([]byte, []int) {
	return file_google_shopping_merchant_products_v1_products_common_proto_rawDescGZIP(), []int{4}
}

// Type of installment payments.
type CreditType int32

const (
	// Default value. This value is unused.
	CreditType_CREDIT_TYPE_UNSPECIFIED CreditType = 0
	// Finance.
	CreditType_FINANCE CreditType = 1
	// Lease.
	CreditType_LEASE CreditType = 2
)

// Enum value maps for CreditType.
var (
	CreditType_name = map[int32]string{
		0: "CREDIT_TYPE_UNSPECIFIED",
		1: "FINANCE",
		2: "LEASE",
	}
	CreditType_value = map[string]int32{
		"CREDIT_TYPE_UNSPECIFIED": 0,
		"FINANCE":                 1,
		"LEASE":                   2,
	}
)

func (x CreditType) Enum() *CreditType {
	p := new(CreditType)
	*p = x
	return p
}

func (x CreditType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreditType) Descriptor() protoreflect.EnumDescriptor {
	return file_google_shopping_merchant_products_v1_products_common_proto_enumTypes[5].Descriptor()
}

func (CreditType) Type() protoreflect.EnumType {
	return &file_google_shopping_merchant_products_v1_products_common_proto_enumTypes[5]
}

func (x CreditType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreditType.Descriptor instead.
func (CreditType) EnumDescriptor() ([]byte, []int) {
	return file_google_shopping_merchant_products_v1_products_common_proto_rawDescGZIP(), []int{5}
}

// System in which the size is specified. Recommended for apparel items.
// For more information, see
// [Size system](https://support.google.com/merchants/answer/6324502).
type SizeSystem int32

const (
	// Unspecified size system.
	SizeSystem_SIZE_SYSTEM_UNSPECIFIED SizeSystem = 0
	// AU.
	SizeSystem_AU SizeSystem = 1
	// BR.
	SizeSystem_BR SizeSystem = 2
	// CN.
	SizeSystem_CN SizeSystem = 3
	// DE.
	SizeSystem_DE SizeSystem = 4
	// EU.
	SizeSystem_EU SizeSystem = 5
	// FR.
	SizeSystem_FR SizeSystem = 6
	// IT.
	SizeSystem_IT SizeSystem = 7
	// JP.
	SizeSystem_JP SizeSystem = 8
	// MEX.
	SizeSystem_MEX SizeSystem = 9
	// UK.
	SizeSystem_UK SizeSystem = 10
	// US.
	SizeSystem_US SizeSystem = 11
)

// Enum value maps for SizeSystem.
var (
	SizeSystem_name = map[int32]string{
		0:  "SIZE_SYSTEM_UNSPECIFIED",
		1:  "AU",
		2:  "BR",
		3:  "CN",
		4:  "DE",
		5:  "EU",
		6:  "FR",
		7:  "IT",
		8:  "JP",
		9:  "MEX",
		10: "UK",
		11: "US",
	}
	SizeSystem_value = map[string]int32{
		"SIZE_SYSTEM_UNSPECIFIED": 0,
		"AU":                      1,
		"BR":                      2,
		"CN":                      3,
		"DE":                      4,
		"EU":                      5,
		"FR":                      6,
		"IT":                      7,
		"JP":                      8,
		"MEX":                     9,
		"UK":                      10,
		"US":                      11,
	}
)

func (x SizeSystem) Enum() *SizeSystem {
	p := new(SizeSystem)
	*p = x
	return p
}

func (x SizeSystem) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SizeSystem) Descriptor() protoreflect.EnumDescriptor {
	return file_google_shopping_merchant_products_v1_products_common_proto_enumTypes[6].Descriptor()
}

func (SizeSystem) Type() protoreflect.EnumType {
	return &file_google_shopping_merchant_products_v1_products_common_proto_enumTypes[6]
}

func (x SizeSystem) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SizeSystem.Descriptor instead.
func (SizeSystem) EnumDescriptor() ([]byte, []int) {
	return file_google_shopping_merchant_products_v1_products_common_proto_rawDescGZIP(), []int{6}
}

// The cut of the item. It can be used to represent combined size types for
// apparel items. Maximum two of size types can be provided, see
// [Size type](https://support.google.com/merchants/answer/6324497).
type SizeType int32

const (
	// The size type is not specified.
	SizeType_SIZE_TYPE_UNSPECIFIED SizeType = 0
	// Regular size.
	SizeType_REGULAR SizeType = 1
	// Petite size.
	SizeType_PETITE SizeType = 2
	// Maternity size.
	SizeType_MATERNITY SizeType = 3
	// Big size.
	SizeType_BIG SizeType = 4
	// Tall size.
	SizeType_TALL SizeType = 5
	// Plus size.
	SizeType_PLUS SizeType = 6
)

// Enum value maps for SizeType.
var (
	SizeType_name = map[int32]string{
		0: "SIZE_TYPE_UNSPECIFIED",
		1: "REGULAR",
		2: "PETITE",
		3: "MATERNITY",
		4: "BIG",
		5: "TALL",
		6: "PLUS",
	}
	SizeType_value = map[string]int32{
		"SIZE_TYPE_UNSPECIFIED": 0,
		"REGULAR":               1,
		"PETITE":                2,
		"MATERNITY":             3,
		"BIG":                   4,
		"TALL":                  5,
		"PLUS":                  6,
	}
)

func (x SizeType) Enum() *SizeType {
	p := new(SizeType)
	*p = x
	return p
}

func (x SizeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SizeType) Descriptor() protoreflect.EnumDescriptor {
	return file_google_shopping_merchant_products_v1_products_common_proto_enumTypes[7].Descriptor()
}

func (SizeType) Type() protoreflect.EnumType {
	return &file_google_shopping_merchant_products_v1_products_common_proto_enumTypes[7]
}

func (x SizeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SizeType.Descriptor instead.
func (SizeType) EnumDescriptor() ([]byte, []int) {
	return file_google_shopping_merchant_products_v1_products_common_proto_rawDescGZIP(), []int{7}
}

// The [energy efficiency
// class](https://support.google.com/merchants/answer/7562785) as defined in EU
// directive 2010/30/EU.
type EnergyEfficiencyClass int32

const (
	// The energy efficiency class is unspecified.
	EnergyEfficiencyClass_ENERGY_EFFICIENCY_CLASS_UNSPECIFIED EnergyEfficiencyClass = 0
	// A+++.
	EnergyEfficiencyClass_APPP EnergyEfficiencyClass = 1
	// A++.
	EnergyEfficiencyClass_APP EnergyEfficiencyClass = 2
	// A+.
	EnergyEfficiencyClass_AP EnergyEfficiencyClass = 3
	// A.
	EnergyEfficiencyClass_A EnergyEfficiencyClass = 4
	// B.
	EnergyEfficiencyClass_B EnergyEfficiencyClass = 5
	// C.
	EnergyEfficiencyClass_C EnergyEfficiencyClass = 6
	// D.
	EnergyEfficiencyClass_D EnergyEfficiencyClass = 7
	// E.
	EnergyEfficiencyClass_E EnergyEfficiencyClass = 8
	// F.
	EnergyEfficiencyClass_F EnergyEfficiencyClass = 9
	// G.
	EnergyEfficiencyClass_G EnergyEfficiencyClass = 10
)

// Enum value maps for EnergyEfficiencyClass.
var (
	EnergyEfficiencyClass_name = map[int32]string{
		0:  "ENERGY_EFFICIENCY_CLASS_UNSPECIFIED",
		1:  "APPP",
		2:  "APP",
		3:  "AP",
		4:  "A",
		5:  "B",
		6:  "C",
		7:  "D",
		8:  "E",
		9:  "F",
		10: "G",
	}
	EnergyEfficiencyClass_value = map[string]int32{
		"ENERGY_EFFICIENCY_CLASS_UNSPECIFIED": 0,
		"APPP":                                1,
		"APP":                                 2,
		"AP":                                  3,
		"A":                                   4,
		"B":                                   5,
		"C":                                   6,
		"D":                                   7,
		"E":                                   8,
		"F":                                   9,
		"G":                                   10,
	}
)

func (x EnergyEfficiencyClass) Enum() *EnergyEfficiencyClass {
	p := new(EnergyEfficiencyClass)
	*p = x
	return p
}

func (x EnergyEfficiencyClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnergyEfficiencyClass) Descriptor() protoreflect.EnumDescriptor {
	return file_google_shopping_merchant_products_v1_products_common_proto_enumTypes[8].Descriptor()
}

func (EnergyEfficiencyClass) Type() protoreflect.EnumType {
	return &file_google_shopping_merchant_products_v1_products_common_proto_enumTypes[8]
}

func (x EnergyEfficiencyClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnergyEfficiencyClass.Descriptor instead.
func (EnergyEfficiencyClass) EnumDescriptor() ([]byte, []int) {
	return file_google_shopping_merchant_products_v1_products_common_proto_rawDescGZIP(), []int{8}
}

// The [pickup](https://support.google.com/merchants/answer/14634021) option
// for the item.
type PickupMethod int32

const (
	// Pickup method is not specified.
	PickupMethod_PICKUP_METHOD_UNSPECIFIED PickupMethod = 0
	// The item is not available for store pickup.
	PickupMethod_NOT_SUPPORTED PickupMethod = 1
	// The entire transaction occurs online.
	PickupMethod_BUY PickupMethod = 2
	// The item is reserved online and the transaction occurs in-store.
	PickupMethod_RESERVE PickupMethod = 3
	// The item is purchased online and shipped to a local store for the customer
	// to pick up.
	PickupMethod_SHIP_TO_STORE PickupMethod = 4
)

// Enum value maps for PickupMethod.
var (
	PickupMethod_name = map[int32]string{
		0: "PICKUP_METHOD_UNSPECIFIED",
		1: "NOT_SUPPORTED",
		2: "BUY",
		3: "RESERVE",
		4: "SHIP_TO_STORE",
	}
	PickupMethod_value = map[string]int32{
		"PICKUP_METHOD_UNSPECIFIED": 0,
		"NOT_SUPPORTED":             1,
		"BUY":                       2,
		"RESERVE":                   3,
		"SHIP_TO_STORE":             4,
	}
)

func (x PickupMethod) Enum() *PickupMethod {
	p := new(PickupMethod)
	*p = x
	return p
}

func (x PickupMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PickupMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_google_shopping_merchant_products_v1_products_common_proto_enumTypes[9].Descriptor()
}

func (PickupMethod) Type() protoreflect.EnumType {
	return &file_google_shopping_merchant_products_v1_products_common_proto_enumTypes[9]
}

func (x PickupMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PickupMethod.Descriptor instead.
func (PickupMethod) EnumDescriptor() ([]byte, []int) {
	return file_google_shopping_merchant_products_v1_products_common_proto_rawDescGZIP(), []int{9}
}

// Item store pickup timeline. For more information, see
// [Pickup SLA](https://support.google.com/merchants/answer/14635400).
type PickupSla int32

const (
	// Pickup SLA is not specified.
	PickupSla_PICKUP_SLA_UNSPECIFIED PickupSla = 0
	// Indicates that the product is available for pickup the same day that the
	// order is placed, subject to cut off times.
	PickupSla_SAME_DAY PickupSla = 1
	// Indicates that the product is available for pickup the following day that
	// the order is placed.
	PickupSla_NEXT_DAY PickupSla = 2
	// Indicates that the product will be shipped to a store for a customer to
	// pick up in 2 days.
	PickupSla_TWO_DAY PickupSla = 3
	// Indicates that the product will be shipped to a store for a customer to
	// pick up in 3 days.
	PickupSla_THREE_DAY PickupSla = 4
	// Indicates that the product will be shipped to a store for a customer to
	// pick up in 4 days
	PickupSla_FOUR_DAY PickupSla = 5
	// Indicates that the product will be shipped to a store for a customer to
	// pick up in 5 days.
	PickupSla_FIVE_DAY PickupSla = 6
	// Indicates that the product will be shipped to a store for a customer to
	// pick up in 6 days.
	PickupSla_SIX_DAY PickupSla = 7
	// Indicates that the product will be shipped to a store for a customer to
	// pick up in one week or more.
	PickupSla_MULTI_WEEK PickupSla = 8
)

// Enum value maps for PickupSla.
var (
	PickupSla_name = map[int32]string{
		0: "PICKUP_SLA_UNSPECIFIED",
		1: "SAME_DAY",
		2: "NEXT_DAY",
		3: "TWO_DAY",
		4: "THREE_DAY",
		5: "FOUR_DAY",
		6: "FIVE_DAY",
		7: "SIX_DAY",
		8: "MULTI_WEEK",
	}
	PickupSla_value = map[string]int32{
		"PICKUP_SLA_UNSPECIFIED": 0,
		"SAME_DAY":               1,
		"NEXT_DAY":               2,
		"TWO_DAY":                3,
		"THREE_DAY":              4,
		"FOUR_DAY":               5,
		"FIVE_DAY":               6,
		"SIX_DAY":                7,
		"MULTI_WEEK":             8,
	}
)

func (x PickupSla) Enum() *PickupSla {
	p := new(PickupSla)
	*p = x
	return p
}

func (x PickupSla) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PickupSla) Descriptor() protoreflect.EnumDescriptor {
	return file_google_shopping_merchant_products_v1_products_common_proto_enumTypes[10].Descriptor()
}

func (PickupSla) Type() protoreflect.EnumType {
	return &file_google_shopping_merchant_products_v1_products_common_proto_enumTypes[10]
}

func (x PickupSla) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PickupSla.Descriptor instead.
func (PickupSla) EnumDescriptor() ([]byte, []int) {
	return file_google_shopping_merchant_products_v1_products_common_proto_rawDescGZIP(), []int{10}
}

// Publication of this item will be temporarily
// [paused](https://support.google.com/merchants/answer/11909930).
type Pause int32

const (
	// The pause is unspecified.
	Pause_PAUSE_UNSPECIFIED Pause = 0
	// You’re currently pausing your product for all ads locations (including
	// Shopping Ads, Display Ads, and local inventory ads).
	Pause_ADS Pause = 1
	// You’re currently pausing your product for all Shopping locations
	// (including Shopping Ads, Display Ads, local inventory ads, Buy on Google,
	// and free listings).
	Pause_ALL Pause = 2
)

// Enum value maps for Pause.
var (
	Pause_name = map[int32]string{
		0: "PAUSE_UNSPECIFIED",
		1: "ADS",
		2: "ALL",
	}
	Pause_value = map[string]int32{
		"PAUSE_UNSPECIFIED": 0,
		"ADS":               1,
		"ALL":               2,
	}
)

func (x Pause) Enum() *Pause {
	p := new(Pause)
	*p = x
	return p
}

func (x Pause) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Pause) Descriptor() protoreflect.EnumDescriptor {
	return file_google_shopping_merchant_products_v1_products_common_proto_enumTypes[11].Descriptor()
}

func (Pause) Type() protoreflect.EnumType {
	return &file_google_shopping_merchant_products_v1_products_common_proto_enumTypes[11]
}

func (x Pause) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Pause.Descriptor instead.
func (Pause) EnumDescriptor() ([]byte, []int) {
	return file_google_shopping_merchant_products_v1_products_common_proto_rawDescGZIP(), []int{11}
}

// The certification authority.
type CertificationAuthority int32

const (
	// Certification authority is not specified.
	CertificationAuthority_CERTIFICATION_AUTHORITY_UNSPECIFIED CertificationAuthority = 0
	// For the French CO2 emissions class for vehicles.
	CertificationAuthority_ADEME CertificationAuthority = 1
	// For the German CO2 emissions classes for vehicles.
	CertificationAuthority_BMWK CertificationAuthority = 2
	// Environment Protection Agency.
	CertificationAuthority_EPA CertificationAuthority = 3
	// European Commission for energy labels in the EU.
	CertificationAuthority_EC CertificationAuthority = 4
)

// Enum value maps for CertificationAuthority.
var (
	CertificationAuthority_name = map[int32]string{
		0: "CERTIFICATION_AUTHORITY_UNSPECIFIED",
		1: "ADEME",
		2: "BMWK",
		3: "EPA",
		4: "EC",
	}
	CertificationAuthority_value = map[string]int32{
		"CERTIFICATION_AUTHORITY_UNSPECIFIED": 0,
		"ADEME":                               1,
		"BMWK":                                2,
		"EPA":                                 3,
		"EC":                                  4,
	}
)

func (x CertificationAuthority) Enum() *CertificationAuthority {
	p := new(CertificationAuthority)
	*p = x
	return p
}

func (x CertificationAuthority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CertificationAuthority) Descriptor() protoreflect.EnumDescriptor {
	return file_google_shopping_merchant_products_v1_products_common_proto_enumTypes[12].Descriptor()
}

func (CertificationAuthority) Type() protoreflect.EnumType {
	return &file_google_shopping_merchant_products_v1_products_common_proto_enumTypes[12]
}

func (x CertificationAuthority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CertificationAuthority.Descriptor instead.
func (CertificationAuthority) EnumDescriptor() ([]byte, []int) {
	return file_google_shopping_merchant_products_v1_products_common_proto_rawDescGZIP(), []int{12}
}

// The name of the certification.
type CertificationName int32

const (
	// Certification name is not specified.
	CertificationName_CERTIFICATION_NAME_UNSPECIFIED CertificationName = 0
	// Energy Star.
	CertificationName_ENERGY_STAR CertificationName = 1
	// Energy Star Most Efficient.
	CertificationName_ENERGY_STAR_MOST_EFFICIENT CertificationName = 2
	// Represents energy efficiency certifications in the EU European
	// Registry for Energy Labeling (EPREL) database.
	CertificationName_EPREL CertificationName = 3
	// EU Ecolabel.
	CertificationName_EU_ECOLABEL CertificationName = 4
	// The overall CO2 class of a vehicle
	CertificationName_VEHICLE_ENERGY_EFFICIENCY CertificationName = 5
	// For the CO2 class of a vehicle with a discharged battery.
	CertificationName_VEHICLE_ENERGY_EFFICIENCY_DISCHARGED_BATTERY CertificationName = 6
)

// Enum value maps for CertificationName.
var (
	CertificationName_name = map[int32]string{
		0: "CERTIFICATION_NAME_UNSPECIFIED",
		1: "ENERGY_STAR",
		2: "ENERGY_STAR_MOST_EFFICIENT",
		3: "EPREL",
		4: "EU_ECOLABEL",
		5: "VEHICLE_ENERGY_EFFICIENCY",
		6: "VEHICLE_ENERGY_EFFICIENCY_DISCHARGED_BATTERY",
	}
	CertificationName_value = map[string]int32{
		"CERTIFICATION_NAME_UNSPECIFIED": 0,
		"ENERGY_STAR":                    1,
		"ENERGY_STAR_MOST_EFFICIENT":     2,
		"EPREL":                          3,
		"EU_ECOLABEL":                    4,
		"VEHICLE_ENERGY_EFFICIENCY":      5,
		"VEHICLE_ENERGY_EFFICIENCY_DISCHARGED_BATTERY": 6,
	}
)

func (x CertificationName) Enum() *CertificationName {
	p := new(CertificationName)
	*p = x
	return p
}

func (x CertificationName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CertificationName) Descriptor() protoreflect.EnumDescriptor {
	return file_google_shopping_merchant_products_v1_products_common_proto_enumTypes[13].Descriptor()
}

func (CertificationName) Type() protoreflect.EnumType {
	return &file_google_shopping_merchant_products_v1_products_common_proto_enumTypes[13]
}

func (x CertificationName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CertificationName.Descriptor instead.
func (CertificationName) EnumDescriptor() ([]byte, []int) {
	return file_google_shopping_merchant_products_v1_products_common_proto_rawDescGZIP(), []int{13}
}

// The digital source type.
// Following [IPTC](https://cv.iptc.org/newscodes/digitalsourcetype).
type DigitalSourceType int32

const (
	// Digital source type is unspecified.
	DigitalSourceType_DIGITAL_SOURCE_TYPE_UNSPECIFIED DigitalSourceType = 0
	// Text created algorithmically using a model derived from sampled
	// content.
	DigitalSourceType_TRAINED_ALGORITHMIC_MEDIA DigitalSourceType = 1
	// Text NOT created algorithmically using a model derived from sampled
	// content (the default)
	DigitalSourceType_DEFAULT DigitalSourceType = 2
)

// Enum value maps for DigitalSourceType.
var (
	DigitalSourceType_name = map[int32]string{
		0: "DIGITAL_SOURCE_TYPE_UNSPECIFIED",
		1: "TRAINED_ALGORITHMIC_MEDIA",
		2: "DEFAULT",
	}
	DigitalSourceType_value = map[string]int32{
		"DIGITAL_SOURCE_TYPE_UNSPECIFIED": 0,
		"TRAINED_ALGORITHMIC_MEDIA":       1,
		"DEFAULT":                         2,
	}
)

func (x DigitalSourceType) Enum() *DigitalSourceType {
	p := new(DigitalSourceType)
	*p = x
	return p
}

func (x DigitalSourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DigitalSourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_google_shopping_merchant_products_v1_products_common_proto_enumTypes[14].Descriptor()
}

func (DigitalSourceType) Type() protoreflect.EnumType {
	return &file_google_shopping_merchant_products_v1_products_common_proto_enumTypes[14]
}

func (x DigitalSourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DigitalSourceType.Descriptor instead.
func (DigitalSourceType) EnumDescriptor() ([]byte, []int) {
	return file_google_shopping_merchant_products_v1_products_common_proto_rawDescGZIP(), []int{14}
}

// How the issue affects the serving of the product.
type ProductStatus_ItemLevelIssue_Severity int32

const (
	// Not specified.
	ProductStatus_ItemLevelIssue_SEVERITY_UNSPECIFIED ProductStatus_ItemLevelIssue_Severity = 0
	// This issue represents a warning and does not have a direct affect
	// on the product.
	ProductStatus_ItemLevelIssue_NOT_IMPACTED ProductStatus_ItemLevelIssue_Severity = 1
	// The product is demoted and most likely have limited performance
	// in search results
	ProductStatus_ItemLevelIssue_DEMOTED ProductStatus_ItemLevelIssue_Severity = 2
	// Issue disapproves the product.
	ProductStatus_ItemLevelIssue_DISAPPROVED ProductStatus_ItemLevelIssue_Severity = 3
)

// Enum value maps for ProductStatus_ItemLevelIssue_Severity.
var (
	ProductStatus_ItemLevelIssue_Severity_name = map[int32]string{
		0: "SEVERITY_UNSPECIFIED",
		1: "NOT_IMPACTED",
		2: "DEMOTED",
		3: "DISAPPROVED",
	}
	ProductStatus_ItemLevelIssue_Severity_value = map[string]int32{
		"SEVERITY_UNSPECIFIED": 0,
		"NOT_IMPACTED":         1,
		"DEMOTED":              2,
		"DISAPPROVED":          3,
	}
)

func (x ProductStatus_ItemLevelIssue_Severity) Enum() *ProductStatus_ItemLevelIssue_Severity {
	p := new(ProductStatus_ItemLevelIssue_Severity)
	*p = x
	return p
}

func (x ProductStatus_ItemLevelIssue_Severity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProductStatus_ItemLevelIssue_Severity) Descriptor() protoreflect.EnumDescriptor {
	return file_google_shopping_merchant_products_v1_products_common_proto_enumTypes[15].Descriptor()
}

func (ProductStatus_ItemLevelIssue_Severity) Type() protoreflect.EnumType {
	return &file_google_shopping_merchant_products_v1_products_common_proto_enumTypes[15]
}

func (x ProductStatus_ItemLevelIssue_Severity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProductStatus_ItemLevelIssue_Severity.Descriptor instead.
func (ProductStatus_ItemLevelIssue_Severity) EnumDescriptor() ([]byte, []int) {
	return file_google_shopping_merchant_products_v1_products_common_proto_rawDescGZIP(), []int{17, 1, 0}
}

// Types of supported sustainability incentive programs.
type ProductSustainabilityIncentive_Type int32

const (
	// Unspecified or unknown sustainability incentive type.
	ProductSustainabilityIncentive_TYPE_UNSPECIFIED ProductSustainabilityIncentive_Type = 0
	// Program offering tax liability reductions for electric vehicles and, in
	// some countries, plug-in hybrids. These reductions can be based on a
	// specific amount or a percentage of the sale price.
	ProductSustainabilityIncentive_EV_TAX_CREDIT ProductSustainabilityIncentive_Type = 1
	// A subsidy program, often called an environmental bonus, provides a
	// purchase grant for electric vehicles and, in some countries, plug-in
	// hybrids. The grant amount may be a fixed sum or a percentage of the sale
	// price.
	ProductSustainabilityIncentive_EV_PRICE_DISCOUNT ProductSustainabilityIncentive_Type = 2
)

// Enum value maps for ProductSustainabilityIncentive_Type.
var (
	ProductSustainabilityIncentive_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "EV_TAX_CREDIT",
		2: "EV_PRICE_DISCOUNT",
	}
	ProductSustainabilityIncentive_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED":  0,
		"EV_TAX_CREDIT":     1,
		"EV_PRICE_DISCOUNT": 2,
	}
)

func (x ProductSustainabilityIncentive_Type) Enum() *ProductSustainabilityIncentive_Type {
	p := new(ProductSustainabilityIncentive_Type)
	*p = x
	return p
}

func (x ProductSustainabilityIncentive_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProductSustainabilityIncentive_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_google_shopping_merchant_products_v1_products_common_proto_enumTypes[16].Descriptor()
}

func (ProductSustainabilityIncentive_Type) Type() protoreflect.EnumType {
	return &file_google_shopping_merchant_products_v1_products_common_proto_enumTypes[16]
}

func (x ProductSustainabilityIncentive_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProductSustainabilityIncentive_Type.Descriptor instead.
func (ProductSustainabilityIncentive_Type) EnumDescriptor() ([]byte, []int) {
	return file_google_shopping_merchant_products_v1_products_common_proto_rawDescGZIP(), []int{19, 0}
}

// Product attributes.
type ProductAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set this value to false when the item does not have unique product
	// identifiers appropriate to its category, such as GTIN, MPN, and brand.
	// Defaults to true, if not provided.
	IdentifierExists *bool `protobuf:"varint,4,opt,name=identifier_exists,json=identifierExists,proto3,oneof" json:"identifier_exists,omitempty"`
	// Whether the item is a business-defined sub-API. A [sub-API]
	// (https://support.google.com/merchants/answer/6324449) is a custom
	// grouping of different products sold by a business for a single price.
	IsBundle *bool `protobuf:"varint,5,opt,name=is_bundle,json=isBundle,proto3,oneof" json:"is_bundle,omitempty"`
	// Title of the item.
	Title *string `protobuf:"bytes,6,opt,name=title,proto3,oneof" json:"title,omitempty"`
	// Description of the item.
	Description *string `protobuf:"bytes,7,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// URL directly linking to your item's page on your online store.
	Link *string `protobuf:"bytes,8,opt,name=link,proto3,oneof" json:"link,omitempty"`
	// URL for the mobile-optimized version of your item's landing page.
	MobileLink *string `protobuf:"bytes,9,opt,name=mobile_link,json=mobileLink,proto3,oneof" json:"mobile_link,omitempty"`
	// URL for the canonical version of your item's landing page.
	CanonicalLink *string `protobuf:"bytes,10,opt,name=canonical_link,json=canonicalLink,proto3,oneof" json:"canonical_link,omitempty"`
	// URL of an image of the item.
	ImageLink *string `protobuf:"bytes,11,opt,name=image_link,json=imageLink,proto3,oneof" json:"image_link,omitempty"`
	// Additional URLs of images of the item.
	AdditionalImageLinks []string `protobuf:"bytes,12,rep,name=additional_image_links,json=additionalImageLinks,proto3" json:"additional_image_links,omitempty"`
	// Date on which the item should expire, as specified upon insertion, in
	// [ISO
	// 8601](http://en.wikipedia.org/wiki/ISO_8601) format. The actual
	// expiration date is exposed in `productstatuses` as
	// [googleExpirationDate](https://support.google.com/merchants/answer/6324499)
	// and might be earlier if `expirationDate` is too far in the future.
	ExpirationDate *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
	// The date time when an offer becomes visible in search results across
	// Google’s YouTube surfaces, in [ISO
	// 8601](http://en.wikipedia.org/wiki/ISO_8601) format.
	// See [Disclosure date](https://support.google.com/merchants/answer/13034208)
	// for more information.
	DisclosureDate *timestamppb.Timestamp `protobuf:"bytes,79,opt,name=disclosure_date,json=disclosureDate,proto3" json:"disclosure_date,omitempty"`
	// Set to true if the item is targeted towards adults.
	Adult *bool `protobuf:"varint,17,opt,name=adult,proto3,oneof" json:"adult,omitempty"`
	// Target [age group](https://support.google.com/merchants/answer/6324463) of
	// the item.
	AgeGroup *AgeGroup `protobuf:"varint,18,opt,name=age_group,json=ageGroup,proto3,enum=google.shopping.merchant.products.v1.AgeGroup,oneof" json:"age_group,omitempty"`
	// [Availability](https://support.google.com/merchants/answer/6324448) status
	// of the item.
	Availability *Availability `protobuf:"varint,19,opt,name=availability,proto3,enum=google.shopping.merchant.products.v1.Availability,oneof" json:"availability,omitempty"`
	// The day a pre-ordered product becomes available for delivery, in [ISO
	// 8601](http://en.wikipedia.org/wiki/ISO_8601) format.
	AvailabilityDate *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=availability_date,json=availabilityDate,proto3" json:"availability_date,omitempty"`
	// [Brand](https://support.google.com/merchants/answer/6324351) of the item.
	// For example, "Google".
	Brand *string `protobuf:"bytes,21,opt,name=brand,proto3,oneof" json:"brand,omitempty"`
	// [Color](https://support.google.com/merchants/answer/6324487) of the item.
	// For example, "red".
	Color *string `protobuf:"bytes,22,opt,name=color,proto3,oneof" json:"color,omitempty"`
	// [Condition](https://support.google.com/merchants/answer/6324469) or state
	// of the item.
	Condition *Condition `protobuf:"varint,23,opt,name=condition,proto3,enum=google.shopping.merchant.products.v1.Condition,oneof" json:"condition,omitempty"`
	// Target [gender](https://support.google.com/merchants/answer/6324479) of the
	// item.
	Gender *Gender `protobuf:"varint,24,opt,name=gender,proto3,enum=google.shopping.merchant.products.v1.Gender,oneof" json:"gender,omitempty"`
	// Google's category of the item (see [Google product
	// taxonomy](https://support.google.com/merchants/answer/1705911)). When
	// querying products, this field will contain the user provided value. There
	// is currently no way to get back the auto assigned google product
	// categories through the API.
	GoogleProductCategory *string `protobuf:"bytes,25,opt,name=google_product_category,json=googleProductCategory,proto3,oneof" json:"google_product_category,omitempty"`
	// Global Trade Item Numbers
	// ([GTIN](https://support.google.com/merchants/answer/188494#gtin)) of the
	// item.
	// You can provide up to 10 GTINs.
	Gtins []string `protobuf:"bytes,140,rep,name=gtins,proto3" json:"gtins,omitempty"`
	// Shared identifier for all variants of the same product.
	ItemGroupId *string `protobuf:"bytes,27,opt,name=item_group_id,json=itemGroupId,proto3,oneof" json:"item_group_id,omitempty"`
	// The [material](https://support.google.com/merchants/answer/6324410) of
	// which the item is made. For example, "Leather" or "Cotton".
	Material *string `protobuf:"bytes,28,opt,name=material,proto3,oneof" json:"material,omitempty"`
	// Manufacturer Part Number
	// ([MPN](https://support.google.com/merchants/answer/188494#mpn)) of the
	// item.
	Mpn *string `protobuf:"bytes,29,opt,name=mpn,proto3,oneof" json:"mpn,omitempty"`
	// The item's [pattern](https://support.google.com/merchants/answer/6324483).
	// For example, polka dots.
	Pattern *string `protobuf:"bytes,30,opt,name=pattern,proto3,oneof" json:"pattern,omitempty"`
	// Price of the item.
	Price *typepb.Price `protobuf:"bytes,31,opt,name=price,proto3" json:"price,omitempty"`
	// Maximum retail price (MRP) of the item. Applicable to India only.
	MaximumRetailPrice *typepb.Price `protobuf:"bytes,139,opt,name=maximum_retail_price,json=maximumRetailPrice,proto3" json:"maximum_retail_price,omitempty"`
	// Number and amount of installments to pay for an item.
	Installment *ProductInstallment `protobuf:"bytes,32,opt,name=installment,proto3" json:"installment,omitempty"`
	// Number of periods (months or years) and amount of payment per period
	// for an item with an associated subscription contract.
	SubscriptionCost *SubscriptionCost `protobuf:"bytes,33,opt,name=subscription_cost,json=subscriptionCost,proto3" json:"subscription_cost,omitempty"`
	// Loyalty points that users receive after purchasing the item. Japan only.
	LoyaltyPoints *LoyaltyPoints `protobuf:"bytes,34,opt,name=loyalty_points,json=loyaltyPoints,proto3" json:"loyalty_points,omitempty"`
	// A list of loyalty program information that is used to surface loyalty
	// benefits (for example, better pricing, points, etc) to the user of this
	// item.
	LoyaltyPrograms []*LoyaltyProgram `protobuf:"bytes,136,rep,name=loyalty_programs,json=loyaltyPrograms,proto3" json:"loyalty_programs,omitempty"`
	// Categories of the item (formatted as in [product data
	// specification](https://support.google.com/merchants/answer/7052112#product_category)).
	ProductTypes []string `protobuf:"bytes,35,rep,name=product_types,json=productTypes,proto3" json:"product_types,omitempty"`
	// Advertised sale price of the item.
	SalePrice *typepb.Price `protobuf:"bytes,36,opt,name=sale_price,json=salePrice,proto3" json:"sale_price,omitempty"`
	// Date range during which the item is on sale, see [product data
	// specification](https://support.google.com/merchants/answer/7052112#price_and_availability).
	SalePriceEffectiveDate *interval.Interval `protobuf:"bytes,37,opt,name=sale_price_effective_date,json=salePriceEffectiveDate,proto3" json:"sale_price_effective_date,omitempty"`
	// The quantity of the product that is available for selling on Google.
	// Supported only for online products.
	SellOnGoogleQuantity *int64 `protobuf:"varint,38,opt,name=sell_on_google_quantity,json=sellOnGoogleQuantity,proto3,oneof" json:"sell_on_google_quantity,omitempty"`
	// The height of the product in the units provided. The value must be
	// between
	// 0 (exclusive) and 3000 (inclusive).
	ProductHeight *ProductDimension `protobuf:"bytes,119,opt,name=product_height,json=productHeight,proto3" json:"product_height,omitempty"`
	// The length of the product in the units provided. The value must be
	// between 0 (exclusive) and 3000 (inclusive).
	ProductLength *ProductDimension `protobuf:"bytes,120,opt,name=product_length,json=productLength,proto3" json:"product_length,omitempty"`
	// The width of the product in the units provided. The value must be between
	// 0 (exclusive) and 3000 (inclusive).
	ProductWidth *ProductDimension `protobuf:"bytes,121,opt,name=product_width,json=productWidth,proto3" json:"product_width,omitempty"`
	// The weight of the product in the units provided. The value must be
	// between 0 (exclusive) and 2000 (inclusive).
	ProductWeight *ProductWeight `protobuf:"bytes,122,opt,name=product_weight,json=productWeight,proto3" json:"product_weight,omitempty"`
	// Shipping rules.
	Shipping []*Shipping `protobuf:"bytes,39,rep,name=shipping,proto3" json:"shipping,omitempty"`
	// Conditions to be met for a product to have free shipping.
	FreeShippingThreshold []*FreeShippingThreshold `protobuf:"bytes,135,rep,name=free_shipping_threshold,json=freeShippingThreshold,proto3" json:"free_shipping_threshold,omitempty"`
	// Weight of the item for shipping.
	ShippingWeight *ShippingWeight `protobuf:"bytes,40,opt,name=shipping_weight,json=shippingWeight,proto3" json:"shipping_weight,omitempty"`
	// Length of the item for shipping.
	ShippingLength *ShippingDimension `protobuf:"bytes,41,opt,name=shipping_length,json=shippingLength,proto3" json:"shipping_length,omitempty"`
	// Width of the item for shipping.
	ShippingWidth *ShippingDimension `protobuf:"bytes,42,opt,name=shipping_width,json=shippingWidth,proto3" json:"shipping_width,omitempty"`
	// Height of the item for shipping.
	ShippingHeight *ShippingDimension `protobuf:"bytes,43,opt,name=shipping_height,json=shippingHeight,proto3" json:"shipping_height,omitempty"`
	// Maximal product handling time (in business days).
	MaxHandlingTime *int64 `protobuf:"varint,44,opt,name=max_handling_time,json=maxHandlingTime,proto3,oneof" json:"max_handling_time,omitempty"`
	// Minimal product handling time (in business days).
	MinHandlingTime *int64 `protobuf:"varint,45,opt,name=min_handling_time,json=minHandlingTime,proto3,oneof" json:"min_handling_time,omitempty"`
	// The shipping label of the product, used to group product in account-level
	// shipping rules.
	ShippingLabel *string `protobuf:"bytes,46,opt,name=shipping_label,json=shippingLabel,proto3,oneof" json:"shipping_label,omitempty"`
	// The transit time label of the product, used to group product in
	// account-level transit time tables.
	TransitTimeLabel *string `protobuf:"bytes,47,opt,name=transit_time_label,json=transitTimeLabel,proto3,oneof" json:"transit_time_label,omitempty"`
	// Size of the item. Only one value is allowed. For variants with different
	// sizes, insert a separate product for each size with the same
	// `itemGroupId` value, see
	// [Size](https://support.google.com/merchants/answer/6324492).
	Size *string `protobuf:"bytes,48,opt,name=size,proto3,oneof" json:"size,omitempty"`
	// System in which the size is specified. Recommended for apparel items.
	// For more information, see
	// [Size system](https://support.google.com/merchants/answer/6324502).
	SizeSystem *SizeSystem `protobuf:"varint,49,opt,name=size_system,json=sizeSystem,proto3,enum=google.shopping.merchant.products.v1.SizeSystem,oneof" json:"size_system,omitempty"`
	// The cut of the item. It can be used to represent combined size types for
	// apparel items. Maximum two of size types can be provided, see
	// [Size type](https://support.google.com/merchants/answer/6324497).
	SizeTypes []SizeType `protobuf:"varint,50,rep,packed,name=size_types,json=sizeTypes,proto3,enum=google.shopping.merchant.products.v1.SizeType" json:"size_types,omitempty"`
	// The [energy efficiency
	// class](https://support.google.com/merchants/answer/7562785) as defined in
	// EU directive 2010/30/EU.
	EnergyEfficiencyClass *EnergyEfficiencyClass `protobuf:"varint,53,opt,name=energy_efficiency_class,json=energyEfficiencyClass,proto3,enum=google.shopping.merchant.products.v1.EnergyEfficiencyClass,oneof" json:"energy_efficiency_class,omitempty"`
	// The [energy efficiency
	// class](https://support.google.com/merchants/answer/7562785) as defined in
	// EU directive 2010/30/EU.
	MinEnergyEfficiencyClass *EnergyEfficiencyClass `protobuf:"varint,54,opt,name=min_energy_efficiency_class,json=minEnergyEfficiencyClass,proto3,enum=google.shopping.merchant.products.v1.EnergyEfficiencyClass,oneof" json:"min_energy_efficiency_class,omitempty"`
	// The [energy efficiency
	// class](https://support.google.com/merchants/answer/7562785) as defined in
	// EU directive 2010/30/EU.
	MaxEnergyEfficiencyClass *EnergyEfficiencyClass `protobuf:"varint,55,opt,name=max_energy_efficiency_class,json=maxEnergyEfficiencyClass,proto3,enum=google.shopping.merchant.products.v1.EnergyEfficiencyClass,oneof" json:"max_energy_efficiency_class,omitempty"`
	// The measure and dimension of an item.
	UnitPricingMeasure *UnitPricingMeasure `protobuf:"bytes,56,opt,name=unit_pricing_measure,json=unitPricingMeasure,proto3" json:"unit_pricing_measure,omitempty"`
	// The preference of the denominator of the unit price.
	UnitPricingBaseMeasure *UnitPricingBaseMeasure `protobuf:"bytes,57,opt,name=unit_pricing_base_measure,json=unitPricingBaseMeasure,proto3" json:"unit_pricing_base_measure,omitempty"`
	// The number of identical products in a business-defined multipack.
	Multipack *int64 `protobuf:"varint,58,opt,name=multipack,proto3,oneof" json:"multipack,omitempty"`
	// Used to group items in an arbitrary way. Only for CPA%, discouraged
	// otherwise. For more information, see
	// [Display ads
	// attribute](https://support.google.com/merchants/answer/6069387).
	AdsGrouping *string `protobuf:"bytes,59,opt,name=ads_grouping,json=adsGrouping,proto3,oneof" json:"ads_grouping,omitempty"`
	// Similar to ads_grouping, but only works on CPC.
	AdsLabels []string `protobuf:"bytes,60,rep,name=ads_labels,json=adsLabels,proto3" json:"ads_labels,omitempty"`
	// Allows advertisers to override the item URL when the product is shown
	// within the context of Product ads.
	AdsRedirect *string `protobuf:"bytes,61,opt,name=ads_redirect,json=adsRedirect,proto3,oneof" json:"ads_redirect,omitempty"`
	// Cost of goods sold. Used for gross profit reporting.
	CostOfGoodsSold *typepb.Price `protobuf:"bytes,62,opt,name=cost_of_goods_sold,json=costOfGoodsSold,proto3" json:"cost_of_goods_sold,omitempty"`
	// Technical specification or additional product details.
	ProductDetails []*ProductDetail `protobuf:"bytes,63,rep,name=product_details,json=productDetails,proto3" json:"product_details,omitempty"`
	// Bullet points describing the most relevant [product
	// highlights](https://support.google.com/merchants/answer/9216100).
	ProductHighlights []string `protobuf:"bytes,64,rep,name=product_highlights,json=productHighlights,proto3" json:"product_highlights,omitempty"`
	// An identifier for an item for dynamic remarketing campaigns.
	DisplayAdsId *string `protobuf:"bytes,65,opt,name=display_ads_id,json=displayAdsId,proto3,oneof" json:"display_ads_id,omitempty"`
	// Advertiser-specified recommendations. For more information, see
	// [Display ads attribute
	// specification](https://support.google.com/merchants/answer/6069387).
	DisplayAdsSimilarIds []string `protobuf:"bytes,66,rep,name=display_ads_similar_ids,json=displayAdsSimilarIds,proto3" json:"display_ads_similar_ids,omitempty"`
	// Title of an item for dynamic remarketing campaigns.
	DisplayAdsTitle *string `protobuf:"bytes,67,opt,name=display_ads_title,json=displayAdsTitle,proto3,oneof" json:"display_ads_title,omitempty"`
	// URL directly to your item's landing page for dynamic remarketing
	// campaigns.
	DisplayAdsLink *string `protobuf:"bytes,68,opt,name=display_ads_link,json=displayAdsLink,proto3,oneof" json:"display_ads_link,omitempty"`
	// Offer margin for dynamic remarketing campaigns. For more information, see
	// [Display ads
	// attribute](https://support.google.com/merchants/answer/6069387).
	DisplayAdsValue *float64 `protobuf:"fixed64,69,opt,name=display_ads_value,json=displayAdsValue,proto3,oneof" json:"display_ads_value,omitempty"`
	// The unique ID of a promotion.
	PromotionIds []string `protobuf:"bytes,70,rep,name=promotion_ids,json=promotionIds,proto3" json:"promotion_ids,omitempty"`
	// The [pickup](https://support.google.com/merchants/answer/14634021) option
	// for the item.
	PickupMethod *PickupMethod `protobuf:"varint,80,opt,name=pickup_method,json=pickupMethod,proto3,enum=google.shopping.merchant.products.v1.PickupMethod,oneof" json:"pickup_method,omitempty"`
	// Item store pickup timeline. For more information, see
	// [Pickup SLA](https://support.google.com/merchants/answer/14635400).
	PickupSla *PickupSla `protobuf:"varint,81,opt,name=pickup_sla,json=pickupSla,proto3,enum=google.shopping.merchant.products.v1.PickupSla,oneof" json:"pickup_sla,omitempty"`
	// [Link template](https://support.google.com/merchants/answer/13871172) for
	// business hosted local storefront.
	LinkTemplate *string `protobuf:"bytes,82,opt,name=link_template,json=linkTemplate,proto3,oneof" json:"link_template,omitempty"`
	// [Link template](https://support.google.com/merchants/answer/13870216) for
	// business hosted local storefront optimized for mobile
	// devices.
	MobileLinkTemplate *string `protobuf:"bytes,83,opt,name=mobile_link_template,json=mobileLinkTemplate,proto3,oneof" json:"mobile_link_template,omitempty"`
	// [Custom label 0](https://support.google.com/merchants/answer/6324473) for
	// custom grouping of items in a Shopping campaign.
	CustomLabel_0 *string `protobuf:"bytes,71,opt,name=custom_label_0,json=customLabel0,proto3,oneof" json:"custom_label_0,omitempty"`
	// [Custom label 1](https://support.google.com/merchants/answer/6324473)
	// for custom grouping of items in a Shopping campaign.
	CustomLabel_1 *string `protobuf:"bytes,72,opt,name=custom_label_1,json=customLabel1,proto3,oneof" json:"custom_label_1,omitempty"`
	// [Custom label 2](https://support.google.com/merchants/answer/6324473)
	// for custom grouping of items in a Shopping campaign.
	CustomLabel_2 *string `protobuf:"bytes,73,opt,name=custom_label_2,json=customLabel2,proto3,oneof" json:"custom_label_2,omitempty"`
	// [Custom label 3](https://support.google.com/merchants/answer/6324473)
	// for custom grouping of items in a Shopping campaign.
	CustomLabel_3 *string `protobuf:"bytes,74,opt,name=custom_label_3,json=customLabel3,proto3,oneof" json:"custom_label_3,omitempty"`
	// [Custom label 4](https://support.google.com/merchants/answer/6324473) for
	// custom grouping of items in a Shopping campaign.
	CustomLabel_4 *string `protobuf:"bytes,75,opt,name=custom_label_4,json=customLabel4,proto3,oneof" json:"custom_label_4,omitempty"`
	// The list of destinations to include for this target (corresponds to
	// checked check boxes in Merchant Center). Default destinations are always
	// included unless provided in `excludedDestinations`.
	//
	// For more information, see
	// [Included
	// destination](https://support.google.com/merchants/answer/7501026).
	//
	// Note: We recommend setting destinations on datasources level for most use
	// cases. Use this field within products to only setup exceptions.
	IncludedDestinations []typepb.Destination_DestinationEnum `protobuf:"varint,76,rep,packed,name=included_destinations,json=includedDestinations,proto3,enum=google.shopping.type.Destination_DestinationEnum" json:"included_destinations,omitempty"`
	// The list of destinations to exclude for this target (corresponds to
	// unchecked check boxes in Merchant Center).
	//
	// For more information, see
	// [Excluded
	// destination](https://support.google.com/merchants/answer/6324486).
	//
	// Note: We recommend setting destinations on datasources level for most use
	// cases. Use this field within products to only setup exceptions.
	ExcludedDestinations []typepb.Destination_DestinationEnum `protobuf:"varint,77,rep,packed,name=excluded_destinations,json=excludedDestinations,proto3,enum=google.shopping.type.Destination_DestinationEnum" json:"excluded_destinations,omitempty"`
	// List of country codes [(ISO 3166-1
	// alpha-2)](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) to exclude the
	// offer from Shopping Ads destination. Countries from this list are removed
	// from countries configured in data source settings.
	ShoppingAdsExcludedCountries []string `protobuf:"bytes,78,rep,name=shopping_ads_excluded_countries,json=shoppingAdsExcludedCountries,proto3" json:"shopping_ads_excluded_countries,omitempty"`
	// Required for multi-seller accounts. Use this attribute if you're a
	// marketplace uploading products for various sellers to your multi-seller
	// account.
	ExternalSellerId *string `protobuf:"bytes,1,opt,name=external_seller_id,json=externalSellerId,proto3,oneof" json:"external_seller_id,omitempty"`
	// Publication of this item will be temporarily
	// [paused](https://support.google.com/merchants/answer/11909930).
	Pause *Pause `protobuf:"varint,13,opt,name=pause,proto3,enum=google.shopping.merchant.products.v1.Pause,oneof" json:"pause,omitempty"`
	// Additional URLs of lifestyle images of the item, used to explicitly
	// identify images that showcase your item in a real-world context. See the
	// [Help Center article](https://support.google.com/merchants/answer/9103186)
	// for more information.
	LifestyleImageLinks []string `protobuf:"bytes,14,rep,name=lifestyle_image_links,json=lifestyleImageLinks,proto3" json:"lifestyle_image_links,omitempty"`
	// Extra fields to export to the Cloud Retail program.
	CloudExportAdditionalProperties []*CloudExportAdditionalProperties `protobuf:"bytes,84,rep,name=cloud_export_additional_properties,json=cloudExportAdditionalProperties,proto3" json:"cloud_export_additional_properties,omitempty"`
	// URL of the 3D image of the item. See the
	// [Help Center article](https://support.google.com/merchants/answer/13674896)
	// for more information.
	VirtualModelLink *string `protobuf:"bytes,130,opt,name=virtual_model_link,json=virtualModelLink,proto3,oneof" json:"virtual_model_link,omitempty"`
	// Product Certifications, for example for energy efficiency labeling of
	// products recorded in the [EU EPREL](https://eprel.ec.europa.eu/screen/home)
	// database. See the [Help
	// Center](https://support.google.com/merchants/answer/13528839)
	// article for more information.
	Certifications []*ProductCertification `protobuf:"bytes,123,rep,name=certifications,proto3" json:"certifications,omitempty"`
	// Structured title, for algorithmically (AI)-generated titles.
	StructuredTitle *StructuredTitle `protobuf:"bytes,132,opt,name=structured_title,json=structuredTitle,proto3,oneof" json:"structured_title,omitempty"`
	// Structured description, for algorithmically (AI)-generated descriptions.
	StructuredDescription *StructuredDescription `protobuf:"bytes,133,opt,name=structured_description,json=structuredDescription,proto3,oneof" json:"structured_description,omitempty"`
	// A safeguard in the [automated discounts]
	// (https://support.google.com/merchants/answer/10295759) and
	// "Dynamic Promotions"
	// (https://support.google.com/merchants/answer/13949249) projects,
	// ensuring that discounts on business offers do not fall below this value,
	// thereby preserving the offer's value and profitability.
	AutoPricingMinPrice *typepb.Price `protobuf:"bytes,124,opt,name=auto_pricing_min_price,json=autoPricingMinPrice,proto3" json:"auto_pricing_min_price,omitempty"`
	// The list of sustainability incentive programs.
	SustainabilityIncentives []*ProductSustainabilityIncentive `protobuf:"bytes,138,rep,name=sustainability_incentives,json=sustainabilityIncentives,proto3" json:"sustainability_incentives,omitempty"`
}

func (x *ProductAttributes) Reset() {
	*x = ProductAttributes{}
	mi := &file_google_shopping_merchant_products_v1_products_common_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductAttributes) ProtoMessage() {}

func (x *ProductAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_products_v1_products_common_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductAttributes.ProtoReflect.Descriptor instead.
func (*ProductAttributes) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_products_v1_products_common_proto_rawDescGZIP(), []int{0}
}

func (x *ProductAttributes) GetIdentifierExists() bool {
	if x != nil && x.IdentifierExists != nil {
		return *x.IdentifierExists
	}
	return false
}

func (x *ProductAttributes) GetIsBundle() bool {
	if x != nil && x.IsBundle != nil {
		return *x.IsBundle
	}
	return false
}

func (x *ProductAttributes) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *ProductAttributes) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ProductAttributes) GetLink() string {
	if x != nil && x.Link != nil {
		return *x.Link
	}
	return ""
}

func (x *ProductAttributes) GetMobileLink() string {
	if x != nil && x.MobileLink != nil {
		return *x.MobileLink
	}
	return ""
}

func (x *ProductAttributes) GetCanonicalLink() string {
	if x != nil && x.CanonicalLink != nil {
		return *x.CanonicalLink
	}
	return ""
}

func (x *ProductAttributes) GetImageLink() string {
	if x != nil && x.ImageLink != nil {
		return *x.ImageLink
	}
	return ""
}

func (x *ProductAttributes) GetAdditionalImageLinks() []string {
	if x != nil {
		return x.AdditionalImageLinks
	}
	return nil
}

func (x *ProductAttributes) GetExpirationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

func (x *ProductAttributes) GetDisclosureDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DisclosureDate
	}
	return nil
}

func (x *ProductAttributes) GetAdult() bool {
	if x != nil && x.Adult != nil {
		return *x.Adult
	}
	return false
}

func (x *ProductAttributes) GetAgeGroup() AgeGroup {
	if x != nil && x.AgeGroup != nil {
		return *x.AgeGroup
	}
	return AgeGroup_AGE_GROUP_UNSPECIFIED
}

func (x *ProductAttributes) GetAvailability() Availability {
	if x != nil && x.Availability != nil {
		return *x.Availability
	}
	return Availability_AVAILABILITY_UNSPECIFIED
}

func (x *ProductAttributes) GetAvailabilityDate() *timestamppb.Timestamp {
	if x != nil {
		return x.AvailabilityDate
	}
	return nil
}

func (x *ProductAttributes) GetBrand() string {
	if x != nil && x.Brand != nil {
		return *x.Brand
	}
	return ""
}

func (x *ProductAttributes) GetColor() string {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return ""
}

func (x *ProductAttributes) GetCondition() Condition {
	if x != nil && x.Condition != nil {
		return *x.Condition
	}
	return Condition_CONDITION_UNSPECIFIED
}

func (x *ProductAttributes) GetGender() Gender {
	if x != nil && x.Gender != nil {
		return *x.Gender
	}
	return Gender_GENDER_UNSPECIFIED
}

func (x *ProductAttributes) GetGoogleProductCategory() string {
	if x != nil && x.GoogleProductCategory != nil {
		return *x.GoogleProductCategory
	}
	return ""
}

func (x *ProductAttributes) GetGtins() []string {
	if x != nil {
		return x.Gtins
	}
	return nil
}

func (x *ProductAttributes) GetItemGroupId() string {
	if x != nil && x.ItemGroupId != nil {
		return *x.ItemGroupId
	}
	return ""
}

func (x *ProductAttributes) GetMaterial() string {
	if x != nil && x.Material != nil {
		return *x.Material
	}
	return ""
}

func (x *ProductAttributes) GetMpn() string {
	if x != nil && x.Mpn != nil {
		return *x.Mpn
	}
	return ""
}

func (x *ProductAttributes) GetPattern() string {
	if x != nil && x.Pattern != nil {
		return *x.Pattern
	}
	return ""
}

func (x *ProductAttributes) GetPrice() *typepb.Price {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *ProductAttributes) GetMaximumRetailPrice() *typepb.Price {
	if x != nil {
		return x.MaximumRetailPrice
	}
	return nil
}

func (x *ProductAttributes) GetInstallment() *ProductInstallment {
	if x != nil {
		return x.Installment
	}
	return nil
}

func (x *ProductAttributes) GetSubscriptionCost() *SubscriptionCost {
	if x != nil {
		return x.SubscriptionCost
	}
	return nil
}

func (x *ProductAttributes) GetLoyaltyPoints() *LoyaltyPoints {
	if x != nil {
		return x.LoyaltyPoints
	}
	return nil
}

func (x *ProductAttributes) GetLoyaltyPrograms() []*LoyaltyProgram {
	if x != nil {
		return x.LoyaltyPrograms
	}
	return nil
}

func (x *ProductAttributes) GetProductTypes() []string {
	if x != nil {
		return x.ProductTypes
	}
	return nil
}

func (x *ProductAttributes) GetSalePrice() *typepb.Price {
	if x != nil {
		return x.SalePrice
	}
	return nil
}

func (x *ProductAttributes) GetSalePriceEffectiveDate() *interval.Interval {
	if x != nil {
		return x.SalePriceEffectiveDate
	}
	return nil
}

func (x *ProductAttributes) GetSellOnGoogleQuantity() int64 {
	if x != nil && x.SellOnGoogleQuantity != nil {
		return *x.SellOnGoogleQuantity
	}
	return 0
}

func (x *ProductAttributes) GetProductHeight() *ProductDimension {
	if x != nil {
		return x.ProductHeight
	}
	return nil
}

func (x *ProductAttributes) GetProductLength() *ProductDimension {
	if x != nil {
		return x.ProductLength
	}
	return nil
}

func (x *ProductAttributes) GetProductWidth() *ProductDimension {
	if x != nil {
		return x.ProductWidth
	}
	return nil
}

func (x *ProductAttributes) GetProductWeight() *ProductWeight {
	if x != nil {
		return x.ProductWeight
	}
	return nil
}

func (x *ProductAttributes) GetShipping() []*Shipping {
	if x != nil {
		return x.Shipping
	}
	return nil
}

func (x *ProductAttributes) GetFreeShippingThreshold() []*FreeShippingThreshold {
	if x != nil {
		return x.FreeShippingThreshold
	}
	return nil
}

func (x *ProductAttributes) GetShippingWeight() *ShippingWeight {
	if x != nil {
		return x.ShippingWeight
	}
	return nil
}

func (x *ProductAttributes) GetShippingLength() *ShippingDimension {
	if x != nil {
		return x.ShippingLength
	}
	return nil
}

func (x *ProductAttributes) GetShippingWidth() *ShippingDimension {
	if x != nil {
		return x.ShippingWidth
	}
	return nil
}

func (x *ProductAttributes) GetShippingHeight() *ShippingDimension {
	if x != nil {
		return x.ShippingHeight
	}
	return nil
}

func (x *ProductAttributes) GetMaxHandlingTime() int64 {
	if x != nil && x.MaxHandlingTime != nil {
		return *x.MaxHandlingTime
	}
	return 0
}

func (x *ProductAttributes) GetMinHandlingTime() int64 {
	if x != nil && x.MinHandlingTime != nil {
		return *x.MinHandlingTime
	}
	return 0
}

func (x *ProductAttributes) GetShippingLabel() string {
	if x != nil && x.ShippingLabel != nil {
		return *x.ShippingLabel
	}
	return ""
}

func (x *ProductAttributes) GetTransitTimeLabel() string {
	if x != nil && x.TransitTimeLabel != nil {
		return *x.TransitTimeLabel
	}
	return ""
}

func (x *ProductAttributes) GetSize() string {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return ""
}

func (x *ProductAttributes) GetSizeSystem() SizeSystem {
	if x != nil && x.SizeSystem != nil {
		return *x.SizeSystem
	}
	return SizeSystem_SIZE_SYSTEM_UNSPECIFIED
}

func (x *ProductAttributes) GetSizeTypes() []SizeType {
	if x != nil {
		return x.SizeTypes
	}
	return nil
}

func (x *ProductAttributes) GetEnergyEfficiencyClass() EnergyEfficiencyClass {
	if x != nil && x.EnergyEfficiencyClass != nil {
		return *x.EnergyEfficiencyClass
	}
	return EnergyEfficiencyClass_ENERGY_EFFICIENCY_CLASS_UNSPECIFIED
}

func (x *ProductAttributes) GetMinEnergyEfficiencyClass() EnergyEfficiencyClass {
	if x != nil && x.MinEnergyEfficiencyClass != nil {
		return *x.MinEnergyEfficiencyClass
	}
	return EnergyEfficiencyClass_ENERGY_EFFICIENCY_CLASS_UNSPECIFIED
}

func (x *ProductAttributes) GetMaxEnergyEfficiencyClass() EnergyEfficiencyClass {
	if x != nil && x.MaxEnergyEfficiencyClass != nil {
		return *x.MaxEnergyEfficiencyClass
	}
	return EnergyEfficiencyClass_ENERGY_EFFICIENCY_CLASS_UNSPECIFIED
}

func (x *ProductAttributes) GetUnitPricingMeasure() *UnitPricingMeasure {
	if x != nil {
		return x.UnitPricingMeasure
	}
	return nil
}

func (x *ProductAttributes) GetUnitPricingBaseMeasure() *UnitPricingBaseMeasure {
	if x != nil {
		return x.UnitPricingBaseMeasure
	}
	return nil
}

func (x *ProductAttributes) GetMultipack() int64 {
	if x != nil && x.Multipack != nil {
		return *x.Multipack
	}
	return 0
}

func (x *ProductAttributes) GetAdsGrouping() string {
	if x != nil && x.AdsGrouping != nil {
		return *x.AdsGrouping
	}
	return ""
}

func (x *ProductAttributes) GetAdsLabels() []string {
	if x != nil {
		return x.AdsLabels
	}
	return nil
}

func (x *ProductAttributes) GetAdsRedirect() string {
	if x != nil && x.AdsRedirect != nil {
		return *x.AdsRedirect
	}
	return ""
}

func (x *ProductAttributes) GetCostOfGoodsSold() *typepb.Price {
	if x != nil {
		return x.CostOfGoodsSold
	}
	return nil
}

func (x *ProductAttributes) GetProductDetails() []*ProductDetail {
	if x != nil {
		return x.ProductDetails
	}
	return nil
}

func (x *ProductAttributes) GetProductHighlights() []string {
	if x != nil {
		return x.ProductHighlights
	}
	return nil
}

func (x *ProductAttributes) GetDisplayAdsId() string {
	if x != nil && x.DisplayAdsId != nil {
		return *x.DisplayAdsId
	}
	return ""
}

func (x *ProductAttributes) GetDisplayAdsSimilarIds() []string {
	if x != nil {
		return x.DisplayAdsSimilarIds
	}
	return nil
}

func (x *ProductAttributes) GetDisplayAdsTitle() string {
	if x != nil && x.DisplayAdsTitle != nil {
		return *x.DisplayAdsTitle
	}
	return ""
}

func (x *ProductAttributes) GetDisplayAdsLink() string {
	if x != nil && x.DisplayAdsLink != nil {
		return *x.DisplayAdsLink
	}
	return ""
}

func (x *ProductAttributes) GetDisplayAdsValue() float64 {
	if x != nil && x.DisplayAdsValue != nil {
		return *x.DisplayAdsValue
	}
	return 0
}

func (x *ProductAttributes) GetPromotionIds() []string {
	if x != nil {
		return x.PromotionIds
	}
	return nil
}

func (x *ProductAttributes) GetPickupMethod() PickupMethod {
	if x != nil && x.PickupMethod != nil {
		return *x.PickupMethod
	}
	return PickupMethod_PICKUP_METHOD_UNSPECIFIED
}

func (x *ProductAttributes) GetPickupSla() PickupSla {
	if x != nil && x.PickupSla != nil {
		return *x.PickupSla
	}
	return PickupSla_PICKUP_SLA_UNSPECIFIED
}

func (x *ProductAttributes) GetLinkTemplate() string {
	if x != nil && x.LinkTemplate != nil {
		return *x.LinkTemplate
	}
	return ""
}

func (x *ProductAttributes) GetMobileLinkTemplate() string {
	if x != nil && x.MobileLinkTemplate != nil {
		return *x.MobileLinkTemplate
	}
	return ""
}

func (x *ProductAttributes) GetCustomLabel_0() string {
	if x != nil && x.CustomLabel_0 != nil {
		return *x.CustomLabel_0
	}
	return ""
}

func (x *ProductAttributes) GetCustomLabel_1() string {
	if x != nil && x.CustomLabel_1 != nil {
		return *x.CustomLabel_1
	}
	return ""
}

func (x *ProductAttributes) GetCustomLabel_2() string {
	if x != nil && x.CustomLabel_2 != nil {
		return *x.CustomLabel_2
	}
	return ""
}

func (x *ProductAttributes) GetCustomLabel_3() string {
	if x != nil && x.CustomLabel_3 != nil {
		return *x.CustomLabel_3
	}
	return ""
}

func (x *ProductAttributes) GetCustomLabel_4() string {
	if x != nil && x.CustomLabel_4 != nil {
		return *x.CustomLabel_4
	}
	return ""
}

func (x *ProductAttributes) GetIncludedDestinations() []typepb.Destination_DestinationEnum {
	if x != nil {
		return x.IncludedDestinations
	}
	return nil
}

func (x *ProductAttributes) GetExcludedDestinations() []typepb.Destination_DestinationEnum {
	if x != nil {
		return x.ExcludedDestinations
	}
	return nil
}

func (x *ProductAttributes) GetShoppingAdsExcludedCountries() []string {
	if x != nil {
		return x.ShoppingAdsExcludedCountries
	}
	return nil
}

func (x *ProductAttributes) GetExternalSellerId() string {
	if x != nil && x.ExternalSellerId != nil {
		return *x.ExternalSellerId
	}
	return ""
}

func (x *ProductAttributes) GetPause() Pause {
	if x != nil && x.Pause != nil {
		return *x.Pause
	}
	return Pause_PAUSE_UNSPECIFIED
}

func (x *ProductAttributes) GetLifestyleImageLinks() []string {
	if x != nil {
		return x.LifestyleImageLinks
	}
	return nil
}

func (x *ProductAttributes) GetCloudExportAdditionalProperties() []*CloudExportAdditionalProperties {
	if x != nil {
		return x.CloudExportAdditionalProperties
	}
	return nil
}

func (x *ProductAttributes) GetVirtualModelLink() string {
	if x != nil && x.VirtualModelLink != nil {
		return *x.VirtualModelLink
	}
	return ""
}

func (x *ProductAttributes) GetCertifications() []*ProductCertification {
	if x != nil {
		return x.Certifications
	}
	return nil
}

func (x *ProductAttributes) GetStructuredTitle() *StructuredTitle {
	if x != nil {
		return x.StructuredTitle
	}
	return nil
}

func (x *ProductAttributes) GetStructuredDescription() *StructuredDescription {
	if x != nil {
		return x.StructuredDescription
	}
	return nil
}

func (x *ProductAttributes) GetAutoPricingMinPrice() *typepb.Price {
	if x != nil {
		return x.AutoPricingMinPrice
	}
	return nil
}

func (x *ProductAttributes) GetSustainabilityIncentives() []*ProductSustainabilityIncentive {
	if x != nil {
		return x.SustainabilityIncentives
	}
	return nil
}

// The ShippingWeight of the product.
type ShippingWeight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The weight of the product used to calculate the shipping cost of the
	// item.
	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	// The unit of value.
	Unit string `protobuf:"bytes,2,opt,name=unit,proto3" json:"unit,omitempty"`
}

func (x *ShippingWeight) Reset() {
	*x = ShippingWeight{}
	mi := &file_google_shopping_merchant_products_v1_products_common_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShippingWeight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShippingWeight) ProtoMessage() {}

func (x *ShippingWeight) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_products_v1_products_common_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShippingWeight.ProtoReflect.Descriptor instead.
func (*ShippingWeight) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_products_v1_products_common_proto_rawDescGZIP(), []int{1}
}

func (x *ShippingWeight) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ShippingWeight) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

// The ShippingDimension of the product.
type ShippingDimension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The dimension of the product used to calculate the shipping cost of the
	// item.
	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	// The unit of value.
	Unit string `protobuf:"bytes,2,opt,name=unit,proto3" json:"unit,omitempty"`
}

func (x *ShippingDimension) Reset() {
	*x = ShippingDimension{}
	mi := &file_google_shopping_merchant_products_v1_products_common_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShippingDimension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShippingDimension) ProtoMessage() {}

func (x *ShippingDimension) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_products_v1_products_common_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShippingDimension.ProtoReflect.Descriptor instead.
func (*ShippingDimension) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_products_v1_products_common_proto_rawDescGZIP(), []int{2}
}

func (x *ShippingDimension) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ShippingDimension) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

// The UnitPricingBaseMeasure of the product.
type UnitPricingBaseMeasure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The denominator of the unit price.
	Value int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	// The unit of the denominator.
	Unit string `protobuf:"bytes,2,opt,name=unit,proto3" json:"unit,omitempty"`
}

func (x *UnitPricingBaseMeasure) Reset() {
	*x = UnitPricingBaseMeasure{}
	mi := &file_google_shopping_merchant_products_v1_products_common_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnitPricingBaseMeasure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnitPricingBaseMeasure) ProtoMessage() {}

func (x *UnitPricingBaseMeasure) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_products_v1_products_common_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnitPricingBaseMeasure.ProtoReflect.Descriptor instead.
func (*UnitPricingBaseMeasure) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_products_v1_products_common_proto_rawDescGZIP(), []int{3}
}

func (x *UnitPricingBaseMeasure) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *UnitPricingBaseMeasure) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

// The UnitPricingMeasure of the product.
type UnitPricingMeasure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The measure of an item.
	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	// The unit of the measure.
	Unit string `protobuf:"bytes,2,opt,name=unit,proto3" json:"unit,omitempty"`
}

func (x *UnitPricingMeasure) Reset() {
	*x = UnitPricingMeasure{}
	mi := &file_google_shopping_merchant_products_v1_products_common_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnitPricingMeasure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnitPricingMeasure) ProtoMessage() {}

func (x *UnitPricingMeasure) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_products_v1_products_common_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnitPricingMeasure.ProtoReflect.Descriptor instead.
func (*UnitPricingMeasure) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_products_v1_products_common_proto_rawDescGZIP(), []int{4}
}

func (x *UnitPricingMeasure) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *UnitPricingMeasure) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

// The SubscriptionCost of the product.
type SubscriptionCost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of subscription period.
	// Supported values are:
	//   - "`month`"
	//   - "`year`"
	Period SubscriptionPeriod `protobuf:"varint,1,opt,name=period,proto3,enum=google.shopping.merchant.products.v1.SubscriptionPeriod" json:"period,omitempty"`
	// The number of subscription periods the buyer has to pay.
	PeriodLength int64 `protobuf:"varint,2,opt,name=period_length,json=periodLength,proto3" json:"period_length,omitempty"`
	// The amount the buyer has to pay per subscription period.
	Amount *typepb.Price `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *SubscriptionCost) Reset() {
	*x = SubscriptionCost{}
	mi := &file_google_shopping_merchant_products_v1_products_common_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscriptionCost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionCost) ProtoMessage() {}

func (x *SubscriptionCost) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_products_v1_products_common_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionCost.ProtoReflect.Descriptor instead.
func (*SubscriptionCost) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_products_v1_products_common_proto_rawDescGZIP(), []int{5}
}

func (x *SubscriptionCost) GetPeriod() SubscriptionPeriod {
	if x != nil {
		return x.Period
	}
	return SubscriptionPeriod_SUBSCRIPTION_PERIOD_UNSPECIFIED
}

func (x *SubscriptionCost) GetPeriodLength() int64 {
	if x != nil {
		return x.PeriodLength
	}
	return 0
}

func (x *SubscriptionCost) GetAmount() *typepb.Price {
	if x != nil {
		return x.Amount
	}
	return nil
}

// A message that represents installment.
type ProductInstallment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of installments the buyer has to pay.
	Months int64 `protobuf:"varint,1,opt,name=months,proto3" json:"months,omitempty"`
	// The amount the buyer has to pay per month.
	Amount *typepb.Price `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// The up-front down payment amount the buyer has to pay.
	Downpayment *typepb.Price `protobuf:"bytes,3,opt,name=downpayment,proto3,oneof" json:"downpayment,omitempty"`
	// Type of installment payments.
	CreditType *CreditType `protobuf:"varint,4,opt,name=credit_type,json=creditType,proto3,enum=google.shopping.merchant.products.v1.CreditType,oneof" json:"credit_type,omitempty"`
}

func (x *ProductInstallment) Reset() {
	*x = ProductInstallment{}
	mi := &file_google_shopping_merchant_products_v1_products_common_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductInstallment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductInstallment) ProtoMessage() {}

func (x *ProductInstallment) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_products_v1_products_common_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductInstallment.ProtoReflect.Descriptor instead.
func (*ProductInstallment) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_products_v1_products_common_proto_rawDescGZIP(), []int{6}
}

func (x *ProductInstallment) GetMonths() int64 {
	if x != nil {
		return x.Months
	}
	return 0
}

func (x *ProductInstallment) GetAmount() *typepb.Price {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *ProductInstallment) GetDownpayment() *typepb.Price {
	if x != nil {
		return x.Downpayment
	}
	return nil
}

func (x *ProductInstallment) GetCreditType() CreditType {
	if x != nil && x.CreditType != nil {
		return *x.CreditType
	}
	return CreditType_CREDIT_TYPE_UNSPECIFIED
}

// A message that represents loyalty points.
type LoyaltyPoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of loyalty points program. It is recommended to limit the name to
	// 12 full-width characters or 24 Roman characters.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The retailer's loyalty points in absolute value.
	PointsValue int64 `protobuf:"varint,2,opt,name=points_value,json=pointsValue,proto3" json:"points_value,omitempty"`
	// The ratio of a point when converted to currency. Google assumes currency
	// based on Merchant Center settings. If ratio is left out, it defaults to
	// 1.0.
	Ratio float64 `protobuf:"fixed64,3,opt,name=ratio,proto3" json:"ratio,omitempty"`
}

func (x *LoyaltyPoints) Reset() {
	*x = LoyaltyPoints{}
	mi := &file_google_shopping_merchant_products_v1_products_common_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoyaltyPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoyaltyPoints) ProtoMessage() {}

func (x *LoyaltyPoints) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_products_v1_products_common_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoyaltyPoints.ProtoReflect.Descriptor instead.
func (*LoyaltyPoints) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_products_v1_products_common_proto_rawDescGZIP(), []int{7}
}

func (x *LoyaltyPoints) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LoyaltyPoints) GetPointsValue() int64 {
	if x != nil {
		return x.PointsValue
	}
	return 0
}

func (x *LoyaltyPoints) GetRatio() float64 {
	if x != nil {
		return x.Ratio
	}
	return 0
}

// A message that represents loyalty program.
type LoyaltyProgram struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The label of the loyalty program. This is an internal label that uniquely
	// identifies the relationship between a business entity and a loyalty
	// program entity. The label must be provided so that the system can associate
	// the assets below (for example, price and points) with a business. The
	// corresponding program must be linked to the Merchant Center account.
	ProgramLabel *string `protobuf:"bytes,1,opt,name=program_label,json=programLabel,proto3,oneof" json:"program_label,omitempty"`
	// The label of the tier within the loyalty program.
	// Must match one of the labels within the program.
	TierLabel *string `protobuf:"bytes,2,opt,name=tier_label,json=tierLabel,proto3,oneof" json:"tier_label,omitempty"`
	// The price for members of the given tier, that is, the instant discount
	// price. Must be smaller or equal to the regular price.
	Price *typepb.Price `protobuf:"bytes,3,opt,name=price,proto3,oneof" json:"price,omitempty"`
	// The cashback that can be used for future purchases.
	CashbackForFutureUse *typepb.Price `protobuf:"bytes,4,opt,name=cashback_for_future_use,json=cashbackForFutureUse,proto3,oneof" json:"cashback_for_future_use,omitempty"`
	// The amount of loyalty points earned on a purchase.
	LoyaltyPoints *int64 `protobuf:"varint,5,opt,name=loyalty_points,json=loyaltyPoints,proto3,oneof" json:"loyalty_points,omitempty"`
	// A date range during which the item is eligible for member price. If not
	// specified, the member price is always applicable. The date range is
	// represented by a pair of ISO 8601 dates separated by a space,
	// comma, or slash.
	MemberPriceEffectiveDate *interval.Interval `protobuf:"bytes,6,opt,name=member_price_effective_date,json=memberPriceEffectiveDate,proto3,oneof" json:"member_price_effective_date,omitempty"`
	// The label of the shipping benefit. If the field has value, this offer has
	// loyalty shipping benefit. If the field value isn't provided, the item is
	// not eligible for loyalty shipping for the given loyalty tier.
	ShippingLabel *string `protobuf:"bytes,7,opt,name=shipping_label,json=shippingLabel,proto3,oneof" json:"shipping_label,omitempty"`
}

func (x *LoyaltyProgram) Reset() {
	*x = LoyaltyProgram{}
	mi := &file_google_shopping_merchant_products_v1_products_common_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoyaltyProgram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoyaltyProgram) ProtoMessage() {}

func (x *LoyaltyProgram) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_products_v1_products_common_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoyaltyProgram.ProtoReflect.Descriptor instead.
func (*LoyaltyProgram) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_products_v1_products_common_proto_rawDescGZIP(), []int{8}
}

func (x *LoyaltyProgram) GetProgramLabel() string {
	if x != nil && x.ProgramLabel != nil {
		return *x.ProgramLabel
	}
	return ""
}

func (x *LoyaltyProgram) GetTierLabel() string {
	if x != nil && x.TierLabel != nil {
		return *x.TierLabel
	}
	return ""
}

func (x *LoyaltyProgram) GetPrice() *typepb.Price {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *LoyaltyProgram) GetCashbackForFutureUse() *typepb.Price {
	if x != nil {
		return x.CashbackForFutureUse
	}
	return nil
}

func (x *LoyaltyProgram) GetLoyaltyPoints() int64 {
	if x != nil && x.LoyaltyPoints != nil {
		return *x.LoyaltyPoints
	}
	return 0
}

func (x *LoyaltyProgram) GetMemberPriceEffectiveDate() *interval.Interval {
	if x != nil {
		return x.MemberPriceEffectiveDate
	}
	return nil
}

func (x *LoyaltyProgram) GetShippingLabel() string {
	if x != nil && x.ShippingLabel != nil {
		return *x.ShippingLabel
	}
	return ""
}

// The Shipping of the product.
type Shipping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Fixed shipping price, represented as a number.
	Price *typepb.Price `protobuf:"bytes,1,opt,name=price,proto3" json:"price,omitempty"`
	// The [CLDR territory
	// code](http://www.unicode.org/repos/cldr/tags/latest/common/main/en.xml)
	// of the country to which an item will ship.
	Country string `protobuf:"bytes,2,opt,name=country,proto3" json:"country,omitempty"`
	// The geographic region to which a shipping rate applies.
	// See [region](https://support.google.com/merchants/answer/6324484) for more
	// information.
	Region string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	// A free-form description of the service class or delivery speed.
	Service string `protobuf:"bytes,4,opt,name=service,proto3" json:"service,omitempty"`
	// The numeric ID of a location that the shipping rate applies to as
	// defined in the [AdWords
	// API](https://developers.google.com/adwords/api/docs/appendix/geotargeting).
	LocationId int64 `protobuf:"varint,5,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	// The location where the shipping is applicable, represented by a
	// location group name.
	LocationGroupName string `protobuf:"bytes,6,opt,name=location_group_name,json=locationGroupName,proto3" json:"location_group_name,omitempty"`
	// The postal code range that the shipping rate applies to, represented by
	// a postal code, a postal code prefix followed by a * wildcard, a range
	// between two postal codes or two postal code prefixes of equal length.
	PostalCode string `protobuf:"bytes,7,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
	// Minimum handling time (inclusive) between when the order is received and
	// shipped in business days. 0 means that the order is shipped on the same
	// day as it is received if it happens before the cut-off time.
	// [minHandlingTime][google.shopping.merchant.products.v1.Shipping.min_handling_time]
	// can only be present together with
	// [maxHandlingTime][google.shopping.merchant.products.v1.Shipping.max_handling_time];
	// but it is not required if
	// [maxHandlingTime][google.shopping.merchant.products.v1.Shipping.max_handling_time]
	// is present.
	MinHandlingTime *int64 `protobuf:"varint,8,opt,name=min_handling_time,json=minHandlingTime,proto3,oneof" json:"min_handling_time,omitempty"`
	// Maximum handling time (inclusive) between when the order is received and
	// shipped in business days. 0 means that the order is shipped on the same
	// day as it is received if it happens before the cut-off time. Both
	// [maxHandlingTime][google.shopping.merchant.products.v1.Shipping.max_handling_time]
	// and
	// [maxTransitTime][google.shopping.merchant.products.v1.Shipping.max_transit_time]
	// are required if providing shipping speeds.
	// [minHandlingTime][google.shopping.merchant.products.v1.Shipping.min_handling_time]
	// is optional if
	// [maxHandlingTime][google.shopping.merchant.products.v1.Shipping.max_handling_time]
	// is present.
	MaxHandlingTime *int64 `protobuf:"varint,9,opt,name=max_handling_time,json=maxHandlingTime,proto3,oneof" json:"max_handling_time,omitempty"`
	// Minimum transit time (inclusive) between when the order has shipped and
	// when it is delivered in business days. 0 means that the order is
	// delivered on the same day as it ships.
	// [minTransitTime][google.shopping.merchant.products.v1.Shipping.min_transit_time]
	// can only be present together with
	// [maxTransitTime][google.shopping.merchant.products.v1.Shipping.max_transit_time];
	// but it is not required if
	// [maxTransitTime][google.shopping.merchant.products.v1.Shipping.max_transit_time]
	// is present.
	MinTransitTime *int64 `protobuf:"varint,10,opt,name=min_transit_time,json=minTransitTime,proto3,oneof" json:"min_transit_time,omitempty"`
	// Maximum transit time (inclusive) between when the order has shipped and
	// when it is delivered in business days. 0 means that the order is
	// delivered on the same day as it ships. Both
	// [maxHandlingTime][google.shopping.merchant.products.v1.Shipping.max_handling_time]
	// and
	// [maxTransitTime][google.shopping.merchant.products.v1.Shipping.max_transit_time]
	// are required if providing shipping speeds.
	// [minTransitTime][google.shopping.merchant.products.v1.Shipping.min_transit_time]
	// is optional if
	// [maxTransitTime][google.shopping.merchant.products.v1.Shipping.max_transit_time]
	// is present.
	MaxTransitTime *int64 `protobuf:"varint,11,opt,name=max_transit_time,json=maxTransitTime,proto3,oneof" json:"max_transit_time,omitempty"`
}

func (x *Shipping) Reset() {
	*x = Shipping{}
	mi := &file_google_shopping_merchant_products_v1_products_common_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Shipping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shipping) ProtoMessage() {}

func (x *Shipping) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_products_v1_products_common_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shipping.ProtoReflect.Descriptor instead.
func (*Shipping) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_products_v1_products_common_proto_rawDescGZIP(), []int{9}
}

func (x *Shipping) GetPrice() *typepb.Price {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *Shipping) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Shipping) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Shipping) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *Shipping) GetLocationId() int64 {
	if x != nil {
		return x.LocationId
	}
	return 0
}

func (x *Shipping) GetLocationGroupName() string {
	if x != nil {
		return x.LocationGroupName
	}
	return ""
}

func (x *Shipping) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *Shipping) GetMinHandlingTime() int64 {
	if x != nil && x.MinHandlingTime != nil {
		return *x.MinHandlingTime
	}
	return 0
}

func (x *Shipping) GetMaxHandlingTime() int64 {
	if x != nil && x.MaxHandlingTime != nil {
		return *x.MaxHandlingTime
	}
	return 0
}

func (x *Shipping) GetMinTransitTime() int64 {
	if x != nil && x.MinTransitTime != nil {
		return *x.MinTransitTime
	}
	return 0
}

func (x *Shipping) GetMaxTransitTime() int64 {
	if x != nil && x.MaxTransitTime != nil {
		return *x.MaxTransitTime
	}
	return 0
}

// Conditions to be met for a product to have free shipping.
type FreeShippingThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The [CLDR territory
	// code](http://www.unicode.org/repos/cldr/tags/latest/common/main/en.xml)
	// of the country to which an item will ship.
	Country *string `protobuf:"bytes,1,opt,name=country,proto3,oneof" json:"country,omitempty"`
	// The minimum product price for the shipping cost to become free. Represented
	// as a number.
	PriceThreshold *typepb.Price `protobuf:"bytes,2,opt,name=price_threshold,json=priceThreshold,proto3,oneof" json:"price_threshold,omitempty"`
}

func (x *FreeShippingThreshold) Reset() {
	*x = FreeShippingThreshold{}
	mi := &file_google_shopping_merchant_products_v1_products_common_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FreeShippingThreshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FreeShippingThreshold) ProtoMessage() {}

func (x *FreeShippingThreshold) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_products_v1_products_common_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FreeShippingThreshold.ProtoReflect.Descriptor instead.
func (*FreeShippingThreshold) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_products_v1_products_common_proto_rawDescGZIP(), []int{10}
}

func (x *FreeShippingThreshold) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

func (x *FreeShippingThreshold) GetPriceThreshold() *typepb.Price {
	if x != nil {
		return x.PriceThreshold
	}
	return nil
}

// The product details.
type ProductDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The section header used to group a set of product details.
	SectionName string `protobuf:"bytes,1,opt,name=section_name,json=sectionName,proto3" json:"section_name,omitempty"`
	// The name of the product detail.
	AttributeName string `protobuf:"bytes,2,opt,name=attribute_name,json=attributeName,proto3" json:"attribute_name,omitempty"`
	// The value of the product detail.
	AttributeValue string `protobuf:"bytes,3,opt,name=attribute_value,json=attributeValue,proto3" json:"attribute_value,omitempty"`
}

func (x *ProductDetail) Reset() {
	*x = ProductDetail{}
	mi := &file_google_shopping_merchant_products_v1_products_common_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductDetail) ProtoMessage() {}

func (x *ProductDetail) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_products_v1_products_common_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductDetail.ProtoReflect.Descriptor instead.
func (*ProductDetail) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_products_v1_products_common_proto_rawDescGZIP(), []int{11}
}

func (x *ProductDetail) GetSectionName() string {
	if x != nil {
		return x.SectionName
	}
	return ""
}

func (x *ProductDetail) GetAttributeName() string {
	if x != nil {
		return x.AttributeName
	}
	return ""
}

func (x *ProductDetail) GetAttributeValue() string {
	if x != nil {
		return x.AttributeValue
	}
	return ""
}

// Product
// [certification](https://support.google.com/merchants/answer/13528839),
// initially introduced for EU energy efficiency labeling compliance using the
// EU EPREL database.
type ProductCertification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The certification authority.
	CertificationAuthority *CertificationAuthority `protobuf:"varint,1,opt,name=certification_authority,json=certificationAuthority,proto3,enum=google.shopping.merchant.products.v1.CertificationAuthority,oneof" json:"certification_authority,omitempty"`
	// The name of the certification.
	CertificationName *CertificationName `protobuf:"varint,2,opt,name=certification_name,json=certificationName,proto3,enum=google.shopping.merchant.products.v1.CertificationName,oneof" json:"certification_name,omitempty"`
	// The certification code.
	// Maximum length is 2000 characters.
	CertificationCode *string `protobuf:"bytes,3,opt,name=certification_code,json=certificationCode,proto3,oneof" json:"certification_code,omitempty"`
	// The certification value (also known as class, level or grade), for
	// example "A+", "C", "gold". Maximum length is 2000 characters.
	CertificationValue *string `protobuf:"bytes,4,opt,name=certification_value,json=certificationValue,proto3,oneof" json:"certification_value,omitempty"`
}

func (x *ProductCertification) Reset() {
	*x = ProductCertification{}
	mi := &file_google_shopping_merchant_products_v1_products_common_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductCertification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductCertification) ProtoMessage() {}

func (x *ProductCertification) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_products_v1_products_common_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductCertification.ProtoReflect.Descriptor instead.
func (*ProductCertification) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_products_v1_products_common_proto_rawDescGZIP(), []int{12}
}

func (x *ProductCertification) GetCertificationAuthority() CertificationAuthority {
	if x != nil && x.CertificationAuthority != nil {
		return *x.CertificationAuthority
	}
	return CertificationAuthority_CERTIFICATION_AUTHORITY_UNSPECIFIED
}

func (x *ProductCertification) GetCertificationName() CertificationName {
	if x != nil && x.CertificationName != nil {
		return *x.CertificationName
	}
	return CertificationName_CERTIFICATION_NAME_UNSPECIFIED
}

func (x *ProductCertification) GetCertificationCode() string {
	if x != nil && x.CertificationCode != nil {
		return *x.CertificationCode
	}
	return ""
}

func (x *ProductCertification) GetCertificationValue() string {
	if x != nil && x.CertificationValue != nil {
		return *x.CertificationValue
	}
	return ""
}

// Structured title, for algorithmically (AI)-generated titles.
type StructuredTitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The digital source type.
	// Following [IPTC](https://cv.iptc.org/newscodes/digitalsourcetype).
	DigitalSourceType *DigitalSourceType `protobuf:"varint,1,opt,name=digital_source_type,json=digitalSourceType,proto3,enum=google.shopping.merchant.products.v1.DigitalSourceType,oneof" json:"digital_source_type,omitempty"`
	// The title text
	// Maximum length is 150 characters
	Content *string `protobuf:"bytes,2,opt,name=content,proto3,oneof" json:"content,omitempty"`
}

func (x *StructuredTitle) Reset() {
	*x = StructuredTitle{}
	mi := &file_google_shopping_merchant_products_v1_products_common_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StructuredTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructuredTitle) ProtoMessage() {}

func (x *StructuredTitle) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_products_v1_products_common_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructuredTitle.ProtoReflect.Descriptor instead.
func (*StructuredTitle) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_products_v1_products_common_proto_rawDescGZIP(), []int{13}
}

func (x *StructuredTitle) GetDigitalSourceType() DigitalSourceType {
	if x != nil && x.DigitalSourceType != nil {
		return *x.DigitalSourceType
	}
	return DigitalSourceType_DIGITAL_SOURCE_TYPE_UNSPECIFIED
}

func (x *StructuredTitle) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

// Structured description, for algorithmically (AI)-generated descriptions.
type StructuredDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The digital source type.
	// Following [IPTC](https://cv.iptc.org/newscodes/digitalsourcetype).
	DigitalSourceType *DigitalSourceType `protobuf:"varint,1,opt,name=digital_source_type,json=digitalSourceType,proto3,enum=google.shopping.merchant.products.v1.DigitalSourceType,oneof" json:"digital_source_type,omitempty"`
	// The description text
	// Maximum length is 5000 characters
	Content *string `protobuf:"bytes,2,opt,name=content,proto3,oneof" json:"content,omitempty"`
}

func (x *StructuredDescription) Reset() {
	*x = StructuredDescription{}
	mi := &file_google_shopping_merchant_products_v1_products_common_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StructuredDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructuredDescription) ProtoMessage() {}

func (x *StructuredDescription) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_products_v1_products_common_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructuredDescription.ProtoReflect.Descriptor instead.
func (*StructuredDescription) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_products_v1_products_common_proto_rawDescGZIP(), []int{14}
}

func (x *StructuredDescription) GetDigitalSourceType() DigitalSourceType {
	if x != nil && x.DigitalSourceType != nil {
		return *x.DigitalSourceType
	}
	return DigitalSourceType_DIGITAL_SOURCE_TYPE_UNSPECIFIED
}

func (x *StructuredDescription) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

// The dimension of the product.
type ProductDimension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The dimension value represented as a number. The value can have a
	// maximum precision of four decimal places.
	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	// Required. The dimension units.
	// Acceptable values are:
	//   - "`in`"
	//   - "`cm`"
	Unit string `protobuf:"bytes,2,opt,name=unit,proto3" json:"unit,omitempty"`
}

func (x *ProductDimension) Reset() {
	*x = ProductDimension{}
	mi := &file_google_shopping_merchant_products_v1_products_common_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductDimension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductDimension) ProtoMessage() {}

func (x *ProductDimension) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_products_v1_products_common_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductDimension.ProtoReflect.Descriptor instead.
func (*ProductDimension) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_products_v1_products_common_proto_rawDescGZIP(), []int{15}
}

func (x *ProductDimension) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ProductDimension) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

// The weight of the product.
type ProductWeight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The weight represented as a number. The weight can have a maximum
	// precision of four decimal places.
	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	// Required. The weight unit.
	// Acceptable values are:
	//   - "`g`"
	//   - "`kg`"
	//   - "`oz`"
	//   - "`lb`"
	Unit string `protobuf:"bytes,2,opt,name=unit,proto3" json:"unit,omitempty"`
}

func (x *ProductWeight) Reset() {
	*x = ProductWeight{}
	mi := &file_google_shopping_merchant_products_v1_products_common_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductWeight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductWeight) ProtoMessage() {}

func (x *ProductWeight) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_products_v1_products_common_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductWeight.ProtoReflect.Descriptor instead.
func (*ProductWeight) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_products_v1_products_common_proto_rawDescGZIP(), []int{16}
}

func (x *ProductWeight) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ProductWeight) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

// The status of a product, data validation issues, that is, information about
// a product computed asynchronously.
type ProductStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The intended destinations for the product.
	DestinationStatuses []*ProductStatus_DestinationStatus `protobuf:"bytes,3,rep,name=destination_statuses,json=destinationStatuses,proto3" json:"destination_statuses,omitempty"`
	// A list of all issues associated with the product.
	ItemLevelIssues []*ProductStatus_ItemLevelIssue `protobuf:"bytes,4,rep,name=item_level_issues,json=itemLevelIssues,proto3" json:"item_level_issues,omitempty"`
	// Date on which the item has been created, in [ISO
	// 8601](http://en.wikipedia.org/wiki/ISO_8601) format.
	CreationDate *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
	// Date on which the item has been last updated, in [ISO
	// 8601](http://en.wikipedia.org/wiki/ISO_8601) format.
	LastUpdateDate *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=last_update_date,json=lastUpdateDate,proto3" json:"last_update_date,omitempty"`
	// Date on which the item expires, in [ISO
	// 8601](http://en.wikipedia.org/wiki/ISO_8601) format.
	GoogleExpirationDate *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=google_expiration_date,json=googleExpirationDate,proto3" json:"google_expiration_date,omitempty"`
}

func (x *ProductStatus) Reset() {
	*x = ProductStatus{}
	mi := &file_google_shopping_merchant_products_v1_products_common_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductStatus) ProtoMessage() {}

func (x *ProductStatus) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_products_v1_products_common_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductStatus.ProtoReflect.Descriptor instead.
func (*ProductStatus) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_products_v1_products_common_proto_rawDescGZIP(), []int{17}
}

func (x *ProductStatus) GetDestinationStatuses() []*ProductStatus_DestinationStatus {
	if x != nil {
		return x.DestinationStatuses
	}
	return nil
}

func (x *ProductStatus) GetItemLevelIssues() []*ProductStatus_ItemLevelIssue {
	if x != nil {
		return x.ItemLevelIssues
	}
	return nil
}

func (x *ProductStatus) GetCreationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationDate
	}
	return nil
}

func (x *ProductStatus) GetLastUpdateDate() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdateDate
	}
	return nil
}

func (x *ProductStatus) GetGoogleExpirationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.GoogleExpirationDate
	}
	return nil
}

// Product property for the Cloud Retail API.
// For example, properties for a TV product could be "Screen-Resolution" or
// "Screen-Size".
type CloudExportAdditionalProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the given property. For example,
	// "Screen-Resolution" for a TV product. Maximum string size is 256
	// characters.
	PropertyName *string `protobuf:"bytes,1,opt,name=property_name,json=propertyName,proto3,oneof" json:"property_name,omitempty"`
	// Text value of the given property. For example,
	// "8K(UHD)" could be a text value for a TV product. Maximum
	// repeatedness of this value is 400. Values are stored in an arbitrary but
	// consistent order. Maximum string size is 256 characters.
	TextValue []string `protobuf:"bytes,2,rep,name=text_value,json=textValue,proto3" json:"text_value,omitempty"`
	// Boolean value of the given property. For example for a TV product,
	// "True" or "False" if the screen is UHD.
	BoolValue *bool `protobuf:"varint,3,opt,name=bool_value,json=boolValue,proto3,oneof" json:"bool_value,omitempty"`
	// Integer values of the given property. For example, 1080 for a TV
	// product's Screen Resolution. Maximum repeatedness of this value
	// is 400. Values are stored in an arbitrary but consistent order.
	IntValue []int64 `protobuf:"varint,4,rep,packed,name=int_value,json=intValue,proto3" json:"int_value,omitempty"`
	// Float values of the given property. For example for a TV product
	// 1.2345. Maximum repeatedness of this value is 400. Values
	// are stored in an arbitrary but consistent order.
	FloatValue []float32 `protobuf:"fixed32,5,rep,packed,name=float_value,json=floatValue,proto3" json:"float_value,omitempty"`
	// Minimum float value of the given property. For example for a TV
	// product 1.00.
	MinValue *float32 `protobuf:"fixed32,6,opt,name=min_value,json=minValue,proto3,oneof" json:"min_value,omitempty"`
	// Maximum float value of the given property. For example for a TV
	// product 100.00.
	MaxValue *float32 `protobuf:"fixed32,7,opt,name=max_value,json=maxValue,proto3,oneof" json:"max_value,omitempty"`
	// Unit of the given property. For example, "Pixels" for a TV product. Maximum
	// string size is 256B.
	UnitCode *string `protobuf:"bytes,8,opt,name=unit_code,json=unitCode,proto3,oneof" json:"unit_code,omitempty"`
}

func (x *CloudExportAdditionalProperties) Reset() {
	*x = CloudExportAdditionalProperties{}
	mi := &file_google_shopping_merchant_products_v1_products_common_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloudExportAdditionalProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudExportAdditionalProperties) ProtoMessage() {}

func (x *CloudExportAdditionalProperties) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_products_v1_products_common_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudExportAdditionalProperties.ProtoReflect.Descriptor instead.
func (*CloudExportAdditionalProperties) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_products_v1_products_common_proto_rawDescGZIP(), []int{18}
}

func (x *CloudExportAdditionalProperties) GetPropertyName() string {
	if x != nil && x.PropertyName != nil {
		return *x.PropertyName
	}
	return ""
}

func (x *CloudExportAdditionalProperties) GetTextValue() []string {
	if x != nil {
		return x.TextValue
	}
	return nil
}

func (x *CloudExportAdditionalProperties) GetBoolValue() bool {
	if x != nil && x.BoolValue != nil {
		return *x.BoolValue
	}
	return false
}

func (x *CloudExportAdditionalProperties) GetIntValue() []int64 {
	if x != nil {
		return x.IntValue
	}
	return nil
}

func (x *CloudExportAdditionalProperties) GetFloatValue() []float32 {
	if x != nil {
		return x.FloatValue
	}
	return nil
}

func (x *CloudExportAdditionalProperties) GetMinValue() float32 {
	if x != nil && x.MinValue != nil {
		return *x.MinValue
	}
	return 0
}

func (x *CloudExportAdditionalProperties) GetMaxValue() float32 {
	if x != nil && x.MaxValue != nil {
		return *x.MaxValue
	}
	return 0
}

func (x *CloudExportAdditionalProperties) GetUnitCode() string {
	if x != nil && x.UnitCode != nil {
		return *x.UnitCode
	}
	return ""
}

// Information regarding sustainability-related incentive programs such as
// rebates or tax relief.
type ProductSustainabilityIncentive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sustainability incentive value.
	//
	// Types that are assignable to Value:
	//
	//	*ProductSustainabilityIncentive_Amount
	//	*ProductSustainabilityIncentive_Percentage
	Value isProductSustainabilityIncentive_Value `protobuf_oneof:"value"`
	// Sustainability incentive program.
	Type *ProductSustainabilityIncentive_Type `protobuf:"varint,1,opt,name=type,proto3,enum=google.shopping.merchant.products.v1.ProductSustainabilityIncentive_Type,oneof" json:"type,omitempty"`
}

func (x *ProductSustainabilityIncentive) Reset() {
	*x = ProductSustainabilityIncentive{}
	mi := &file_google_shopping_merchant_products_v1_products_common_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductSustainabilityIncentive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductSustainabilityIncentive) ProtoMessage() {}

func (x *ProductSustainabilityIncentive) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_products_v1_products_common_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductSustainabilityIncentive.ProtoReflect.Descriptor instead.
func (*ProductSustainabilityIncentive) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_products_v1_products_common_proto_rawDescGZIP(), []int{19}
}

func (m *ProductSustainabilityIncentive) GetValue() isProductSustainabilityIncentive_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ProductSustainabilityIncentive) GetAmount() *typepb.Price {
	if x, ok := x.GetValue().(*ProductSustainabilityIncentive_Amount); ok {
		return x.Amount
	}
	return nil
}

func (x *ProductSustainabilityIncentive) GetPercentage() float64 {
	if x, ok := x.GetValue().(*ProductSustainabilityIncentive_Percentage); ok {
		return x.Percentage
	}
	return 0
}

func (x *ProductSustainabilityIncentive) GetType() ProductSustainabilityIncentive_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ProductSustainabilityIncentive_TYPE_UNSPECIFIED
}

type isProductSustainabilityIncentive_Value interface {
	isProductSustainabilityIncentive_Value()
}

type ProductSustainabilityIncentive_Amount struct {
	// The fixed amount of the incentive.
	Amount *typepb.Price `protobuf:"bytes,2,opt,name=amount,proto3,oneof"`
}

type ProductSustainabilityIncentive_Percentage struct {
	// The percentage of the sale price that the incentive is applied to.
	Percentage float64 `protobuf:"fixed64,3,opt,name=percentage,proto3,oneof"`
}

func (*ProductSustainabilityIncentive_Amount) isProductSustainabilityIncentive_Value() {}

func (*ProductSustainabilityIncentive_Percentage) isProductSustainabilityIncentive_Value() {}

// Information regarding Automated Discounts.
type AutomatedDiscounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The price prior to the application of the first price reduction.
	// Absent if the information about the prior price of the product is not
	// available.
	PriorPrice *typepb.Price `protobuf:"bytes,1,opt,name=prior_price,json=priorPrice,proto3" json:"prior_price,omitempty"`
	// The price prior to the application of consecutive price reductions.
	// Absent if the information about the prior price of the product is not
	// available.
	PriorPriceProgressive *typepb.Price `protobuf:"bytes,2,opt,name=prior_price_progressive,json=priorPriceProgressive,proto3" json:"prior_price_progressive,omitempty"`
	// The current sale price for products with a price optimized using Google
	// Automated Discounts (GAD). Absent if the information about the GAD_price of
	// the product is not available.
	GadPrice *typepb.Price `protobuf:"bytes,3,opt,name=gad_price,json=gadPrice,proto3" json:"gad_price,omitempty"`
}

func (x *AutomatedDiscounts) Reset() {
	*x = AutomatedDiscounts{}
	mi := &file_google_shopping_merchant_products_v1_products_common_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AutomatedDiscounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutomatedDiscounts) ProtoMessage() {}

func (x *AutomatedDiscounts) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_products_v1_products_common_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutomatedDiscounts.ProtoReflect.Descriptor instead.
func (*AutomatedDiscounts) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_products_v1_products_common_proto_rawDescGZIP(), []int{20}
}

func (x *AutomatedDiscounts) GetPriorPrice() *typepb.Price {
	if x != nil {
		return x.PriorPrice
	}
	return nil
}

func (x *AutomatedDiscounts) GetPriorPriceProgressive() *typepb.Price {
	if x != nil {
		return x.PriorPriceProgressive
	}
	return nil
}

func (x *AutomatedDiscounts) GetGadPrice() *typepb.Price {
	if x != nil {
		return x.GadPrice
	}
	return nil
}

// The destination status of the product status.
type ProductStatus_DestinationStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the reporting context.
	ReportingContext typepb.ReportingContext_ReportingContextEnum `protobuf:"varint,1,opt,name=reporting_context,json=reportingContext,proto3,enum=google.shopping.type.ReportingContext_ReportingContextEnum" json:"reporting_context,omitempty"`
	// List of country codes (ISO 3166-1 alpha-2) where the offer is approved.
	ApprovedCountries []string `protobuf:"bytes,2,rep,name=approved_countries,json=approvedCountries,proto3" json:"approved_countries,omitempty"`
	// List of country codes (ISO 3166-1 alpha-2) where the offer is pending
	// approval.
	PendingCountries []string `protobuf:"bytes,3,rep,name=pending_countries,json=pendingCountries,proto3" json:"pending_countries,omitempty"`
	// List of country codes (ISO 3166-1 alpha-2) where the offer is
	// disapproved.
	DisapprovedCountries []string `protobuf:"bytes,4,rep,name=disapproved_countries,json=disapprovedCountries,proto3" json:"disapproved_countries,omitempty"`
}

func (x *ProductStatus_DestinationStatus) Reset() {
	*x = ProductStatus_DestinationStatus{}
	mi := &file_google_shopping_merchant_products_v1_products_common_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductStatus_DestinationStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductStatus_DestinationStatus) ProtoMessage() {}

func (x *ProductStatus_DestinationStatus) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_products_v1_products_common_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductStatus_DestinationStatus.ProtoReflect.Descriptor instead.
func (*ProductStatus_DestinationStatus) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_products_v1_products_common_proto_rawDescGZIP(), []int{17, 0}
}

func (x *ProductStatus_DestinationStatus) GetReportingContext() typepb.ReportingContext_ReportingContextEnum {
	if x != nil {
		return x.ReportingContext
	}
	return typepb.ReportingContext_ReportingContextEnum(0)
}

func (x *ProductStatus_DestinationStatus) GetApprovedCountries() []string {
	if x != nil {
		return x.ApprovedCountries
	}
	return nil
}

func (x *ProductStatus_DestinationStatus) GetPendingCountries() []string {
	if x != nil {
		return x.PendingCountries
	}
	return nil
}

func (x *ProductStatus_DestinationStatus) GetDisapprovedCountries() []string {
	if x != nil {
		return x.DisapprovedCountries
	}
	return nil
}

// The ItemLevelIssue of the product status.
type ProductStatus_ItemLevelIssue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error code of the issue.
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	// How this issue affects serving of the offer.
	Severity ProductStatus_ItemLevelIssue_Severity `protobuf:"varint,2,opt,name=severity,proto3,enum=google.shopping.merchant.products.v1.ProductStatus_ItemLevelIssue_Severity" json:"severity,omitempty"`
	// Whether the issue can be resolved by the business.
	Resolution string `protobuf:"bytes,3,opt,name=resolution,proto3" json:"resolution,omitempty"`
	// The attribute's name, if the issue is caused by a single attribute.
	Attribute string `protobuf:"bytes,4,opt,name=attribute,proto3" json:"attribute,omitempty"`
	// The reporting context the issue applies to.
	ReportingContext typepb.ReportingContext_ReportingContextEnum `protobuf:"varint,5,opt,name=reporting_context,json=reportingContext,proto3,enum=google.shopping.type.ReportingContext_ReportingContextEnum" json:"reporting_context,omitempty"`
	// A short issue description in English.
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// A detailed issue description in English.
	Detail string `protobuf:"bytes,7,opt,name=detail,proto3" json:"detail,omitempty"`
	// The URL of a web page to help with resolving this issue.
	Documentation string `protobuf:"bytes,8,opt,name=documentation,proto3" json:"documentation,omitempty"`
	// List of country codes (ISO 3166-1 alpha-2) where issue applies to the
	// offer.
	ApplicableCountries []string `protobuf:"bytes,9,rep,name=applicable_countries,json=applicableCountries,proto3" json:"applicable_countries,omitempty"`
}

func (x *ProductStatus_ItemLevelIssue) Reset() {
	*x = ProductStatus_ItemLevelIssue{}
	mi := &file_google_shopping_merchant_products_v1_products_common_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductStatus_ItemLevelIssue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductStatus_ItemLevelIssue) ProtoMessage() {}

func (x *ProductStatus_ItemLevelIssue) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_products_v1_products_common_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductStatus_ItemLevelIssue.ProtoReflect.Descriptor instead.
func (*ProductStatus_ItemLevelIssue) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_products_v1_products_common_proto_rawDescGZIP(), []int{17, 1}
}

func (x *ProductStatus_ItemLevelIssue) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ProductStatus_ItemLevelIssue) GetSeverity() ProductStatus_ItemLevelIssue_Severity {
	if x != nil {
		return x.Severity
	}
	return ProductStatus_ItemLevelIssue_SEVERITY_UNSPECIFIED
}

func (x *ProductStatus_ItemLevelIssue) GetResolution() string {
	if x != nil {
		return x.Resolution
	}
	return ""
}

func (x *ProductStatus_ItemLevelIssue) GetAttribute() string {
	if x != nil {
		return x.Attribute
	}
	return ""
}

func (x *ProductStatus_ItemLevelIssue) GetReportingContext() typepb.ReportingContext_ReportingContextEnum {
	if x != nil {
		return x.ReportingContext
	}
	return typepb.ReportingContext_ReportingContextEnum(0)
}

func (x *ProductStatus_ItemLevelIssue) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ProductStatus_ItemLevelIssue) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *ProductStatus_ItemLevelIssue) GetDocumentation() string {
	if x != nil {
		return x.Documentation
	}
	return ""
}

func (x *ProductStatus_ItemLevelIssue) GetApplicableCountries() []string {
	if x != nil {
		return x.ApplicableCountries
	}
	return nil
}

var File_google_shopping_merchant_products_v1_products_common_proto protoreflect.FileDescriptor

var file_google_shopping_merchant_products_v1_products_common_proto_rawDesc = []byte{
	0x0a, 0x3a, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x2f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x73, 0x68, 0x6f,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xf7, 0x37, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x11, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x10, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x69, 0x73,
	0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52,
	0x08, 0x69, 0x73, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x04,
	0x6c, 0x69, 0x6e, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0a,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63,
	0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52,
	0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a,
	0x16, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69,
	0x6e, 0x6b, 0x73, 0x12, 0x43, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63,
	0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x4f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x64,
	0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a,
	0x05, 0x61, 0x64, 0x75, 0x6c, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x48, 0x08, 0x52, 0x05,
	0x61, 0x64, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x09, 0x52, 0x08, 0x61,
	0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x5b, 0x0a, 0x0c, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x48, 0x0a, 0x52, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x19, 0x0a, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0b, 0x52, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x0d, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x06, 0x67, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x48, 0x0e, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x15, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x15, 0x0a, 0x05, 0x67, 0x74, 0x69, 0x6e, 0x73, 0x18, 0x8c, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x67, 0x74, 0x69, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0d, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x10, 0x52, 0x0b, 0x69, 0x74, 0x65, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6d, 0x70, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x12, 0x52, 0x03, 0x6d, 0x70, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x70, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x07, 0x70,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x14,
	0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x8b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x52, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x5a, 0x0a, 0x0b,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x63, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x10, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x5a, 0x0a,
	0x0e, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73,
	0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x79,
	0x61, 0x6c, 0x74, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x0d, 0x6c, 0x6f, 0x79, 0x61,
	0x6c, 0x74, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x60, 0x0a, 0x10, 0x6c, 0x6f, 0x79,
	0x61, 0x6c, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x88, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68,
	0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x79, 0x61,
	0x6c, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x0f, 0x6c, 0x6f, 0x79, 0x61,
	0x6c, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x23, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68,
	0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x52, 0x09, 0x73, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x19,
	0x73, 0x61, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x16, 0x73, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3a,
	0x0a, 0x17, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x6f, 0x6e, 0x5f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x26, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x14, 0x52, 0x14, 0x73, 0x65, 0x6c, 0x6c, 0x4f, 0x6e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x5d, 0x0a, 0x0e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x77, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x5d, 0x0a, 0x0e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x78, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x5b, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x79, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x69,
	0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x5a, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x4a, 0x0a, 0x08, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x27, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x52, 0x08, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x74, 0x0a,
	0x17, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x87, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x65, 0x65, 0x53, 0x68, 0x69, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x15, 0x66, 0x72,
	0x65, 0x65, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x12, 0x5d, 0x0a, 0x0f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x52, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x60, 0x0a, 0x0f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x5e, 0x0a, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x57,
	0x69, 0x64, 0x74, 0x68, 0x12, 0x60, 0x0a, 0x0f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2f, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x15, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67,
	0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x5f, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x2d, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x16, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e,
	0x67, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x68, 0x69, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x17, 0x52, 0x0d, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x18, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x30, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x56, 0x0a, 0x0b, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18,
	0x31, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73,
	0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x7a,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x48, 0x1a, 0x52, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x0a, 0x73, 0x69, 0x7a, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x32, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x7a, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x73, 0x69,
	0x7a, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x78, 0x0a, 0x17, 0x65, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x5f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x45, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x48, 0x1b, 0x52, 0x15, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x45,
	0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x7f, 0x0a, 0x1b, 0x6d, 0x69, 0x6e, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f,
	0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x18, 0x36, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x45, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x48, 0x1c, 0x52, 0x18, 0x6d, 0x69, 0x6e, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x45, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x7f, 0x0a, 0x1b, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x5f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x45, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x48, 0x1d, 0x52, 0x18, 0x6d, 0x61, 0x78, 0x45, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x45, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x6a, 0x0a, 0x14, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x12, 0x75, 0x6e, 0x69,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12,
	0x77, 0x0a, 0x19, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x18, 0x39, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x52, 0x16, 0x75, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x73,
	0x65, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x09, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x61, 0x63, 0x6b, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x03, 0x48, 0x1e, 0x52, 0x09, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x61,
	0x64, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x3b, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x1f, 0x52, 0x0b, 0x61, 0x64, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x3c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x73, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x20, 0x52, 0x0b, 0x61, 0x64, 0x73, 0x52,
	0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x12, 0x63, 0x6f,
	0x73, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x73, 0x6f, 0x6c, 0x64,
	0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x73, 0x74, 0x4f, 0x66, 0x47, 0x6f, 0x6f, 0x64, 0x73,
	0x53, 0x6f, 0x6c, 0x64, 0x12, 0x5c, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x3f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x68, 0x69,
	0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x40, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x12, 0x29, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x64, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x48, 0x21, 0x52, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x41, 0x64, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x17,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6d, 0x69,
	0x6c, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x42, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x41, 0x64, 0x73, 0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72,
	0x49, 0x64, 0x73, 0x12, 0x2f, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x61,
	0x64, 0x73, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x43, 0x20, 0x01, 0x28, 0x09, 0x48, 0x22,
	0x52, 0x0f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x41, 0x64, 0x73, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x61, 0x64, 0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x44, 0x20, 0x01, 0x28, 0x09, 0x48, 0x23,
	0x52, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x41, 0x64, 0x73, 0x4c, 0x69, 0x6e, 0x6b,
	0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x61,
	0x64, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x45, 0x20, 0x01, 0x28, 0x01, 0x48, 0x24,
	0x52, 0x0f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x41, 0x64, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x46, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x5c, 0x0a, 0x0d, 0x70, 0x69, 0x63,
	0x6b, 0x75, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x48, 0x25, 0x52, 0x0c, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x12, 0x53, 0x0a, 0x0a, 0x70, 0x69, 0x63, 0x6b, 0x75,
	0x70, 0x5f, 0x73, 0x6c, 0x61, 0x18, 0x51, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x6c, 0x61, 0x48, 0x26, 0x52, 0x09,
	0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x6c, 0x61, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x52, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x27, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x53,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x28, 0x52, 0x12, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4c, 0x69,
	0x6e, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a,
	0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x30, 0x18,
	0x47, 0x20, 0x01, 0x28, 0x09, 0x48, 0x29, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x30, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x31, 0x18, 0x48, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x2a, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x31,
	0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x5f, 0x32, 0x18, 0x49, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2b, 0x52, 0x0c, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x32, 0x88, 0x01, 0x01, 0x12, 0x29,
	0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x33,
	0x18, 0x4a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2c, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x33, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x34, 0x18, 0x4b, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x2d, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x34, 0x88, 0x01, 0x01, 0x12, 0x66, 0x0a, 0x15, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64,
	0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x4c, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x14, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x66, 0x0a, 0x15,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x4d, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x14,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x45, 0x0a, 0x1f, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x64, 0x73, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x4e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1c, 0x73,
	0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x73, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x12, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2e, 0x52, 0x10, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x46,
	0x0a, 0x05, 0x70, 0x61, 0x75, 0x73, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x48, 0x2f, 0x52, 0x05, 0x70, 0x61,
	0x75, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x92, 0x01, 0x0a, 0x22, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x54, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x1f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x32, 0x0a, 0x12, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x30, 0x52, 0x10,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x69, 0x6e, 0x6b,
	0x88, 0x01, 0x01, 0x12, 0x62, 0x0a, 0x0e, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x7b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x66, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x84, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x64, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x48, 0x31, 0x52, 0x0f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x78, 0x0a, 0x16, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x85, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x32, 0x52,
	0x15, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x16, 0x61, 0x75, 0x74,
	0x6f, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x13, 0x61, 0x75, 0x74, 0x6f, 0x50, 0x72, 0x69, 0x63,
	0x69, 0x6e, 0x67, 0x4d, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x19,
	0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x65, 0x73, 0x18, 0x8a, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x44, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53,
	0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x63,
	0x65, 0x6e, 0x74, 0x69, 0x76, 0x65, 0x52, 0x18, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x65, 0x73,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x73, 0x5f, 0x62, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x61, 0x6e, 0x6f,
	0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x64,
	0x75, 0x6c, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x42,
	0x1a, 0x0a, 0x18, 0x5f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d,
	0x70, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x42, 0x1a,
	0x0a, 0x18, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x6f, 0x6e, 0x5f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x65, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x5f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x65, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x5f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x5f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x61, 0x63, 0x6b, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x64, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x69, 0x6e, 0x67, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x61, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x64, 0x73, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x64, 0x73, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x61, 0x64, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x69,
	0x63, 0x6b, 0x75, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x73, 0x6c, 0x61, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x17, 0x0a, 0x15,
	0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x30, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x31, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x32, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f,
	0x33, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x5f, 0x34, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x70, 0x61, 0x75, 0x73, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x0a, 0x0e,
	0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x3d, 0x0a, 0x11, 0x53, 0x68, 0x69, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x42, 0x0a, 0x16, 0x55, 0x6e, 0x69, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x3e, 0x0a, 0x12, 0x55,
	0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0xbe, 0x01, 0x0a, 0x10,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x73, 0x74,
	0x12, 0x50, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x33, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9d, 0x02, 0x0a,
	0x12, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x42, 0x0a, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73,
	0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x56, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x5c, 0x0a, 0x0d,
	0x4c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x22, 0xaf, 0x04, 0x0a, 0x0e, 0x4c,
	0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x28, 0x0a,
	0x0d, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x69, 0x65, 0x72, 0x5f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x74,
	0x69, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x48, 0x02, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x57, 0x0a, 0x17, 0x63, 0x61, 0x73, 0x68, 0x62, 0x61, 0x63, 0x6b, 0x5f,
	0x66, 0x6f, 0x72, 0x5f, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68,
	0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x48, 0x03, 0x52, 0x14, 0x63, 0x61, 0x73, 0x68, 0x62, 0x61, 0x63, 0x6b, 0x46, 0x6f, 0x72,
	0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x55, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e,
	0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x0d, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x59, 0x0a, 0x1b, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x48, 0x05, 0x52, 0x18, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0d, 0x73,
	0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x63,
	0x61, 0x73, 0x68, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x66, 0x75, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x79, 0x61, 0x6c,
	0x74, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x68,
	0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x91, 0x04, 0x0a,
	0x08, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x31, 0x0a, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73,
	0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x11, 0x6d, 0x69,
	0x6e, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x6d,
	0x61, 0x78, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10,
	0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x6d,
	0x61, 0x78, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6d,
	0x69, 0x6e, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x22, 0xa1, 0x01, 0x0a, 0x15, 0x46, 0x72, 0x65, 0x65, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x0f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x48,
	0x01, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xcb, 0x03, 0x0a, 0x14, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x7a, 0x0a, 0x17, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x48, 0x00, 0x52, 0x16, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x6b,
	0x0a, 0x12, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x48, 0x01, 0x52, 0x11, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x12, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x11, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x34, 0x0a, 0x13, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x12,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x88, 0x01, 0x01, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42,
	0x16, 0x0a, 0x14, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x0f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x6c, 0x0a, 0x13, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x48, 0x00, 0x52, 0x11, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xc8, 0x01, 0x0a,
	0x15, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6c, 0x0a, 0x13, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61,
	0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x11,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x46, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22,
	0x43, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x75,
	0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04,
	0x75, 0x6e, 0x69, 0x74, 0x22, 0x84, 0x0a, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x78, 0x0a, 0x14, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68,
	0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x13, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73,
	0x12, 0x6e, 0x0a, 0x11, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52,
	0x0f, 0x69, 0x74, 0x65, 0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73,
	0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x44, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x16, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x14, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x1a, 0x8e, 0x02, 0x0a, 0x11, 0x44, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x68, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x10, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x64, 0x69, 0x73, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x9e, 0x04, 0x0a, 0x0e, 0x49,
	0x74, 0x65, 0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x67, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x4b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x49, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x68, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x75, 0x6d,
	0x52, 0x10, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x24, 0x0a, 0x0d,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x14, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x13, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x54, 0x0a, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4e,
	0x4f, 0x54, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x44, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x49,
	0x53, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x03, 0x22, 0xfd, 0x02, 0x0a, 0x1f,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x28, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x78,
	0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x65, 0x78, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x09,
	0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x08, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0a,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x6d, 0x69,
	0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x48, 0x02, 0x52,
	0x08, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x48,
	0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x04, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xb7, 0x02, 0x0a, 0x1e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x65, 0x12, 0x35,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x62, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x49, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73,
	0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x53, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x49, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x48, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x22, 0x46, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x56, 0x5f,
	0x54, 0x41, 0x58, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11,
	0x45, 0x56, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x10, 0x02, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xe1, 0x01, 0x0a, 0x12, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x64, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x0b,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x0a,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x53, 0x0a, 0x17, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x15, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x12,
	0x38, 0x0a, 0x09, 0x67, 0x61, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52,
	0x08, 0x67, 0x61, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x2a, 0x4e, 0x0a, 0x12, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12,
	0x23, 0x0a, 0x1f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x01, 0x12,
	0x08, 0x0a, 0x04, 0x59, 0x45, 0x41, 0x52, 0x10, 0x02, 0x2a, 0x60, 0x0a, 0x08, 0x41, 0x67, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x47, 0x45, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x41, 0x44, 0x55, 0x4c, 0x54, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4b,
	0x49, 0x44, 0x53, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x4f, 0x44, 0x44, 0x4c, 0x45, 0x52,
	0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x4e, 0x46, 0x41, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x0b,
	0x0a, 0x07, 0x4e, 0x45, 0x57, 0x42, 0x4f, 0x52, 0x4e, 0x10, 0x05, 0x2a, 0x83, 0x01, 0x0a, 0x0c,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x18,
	0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e,
	0x5f, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x55, 0x54, 0x5f,
	0x4f, 0x46, 0x5f, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52,
	0x45, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x49, 0x4d, 0x49,
	0x54, 0x45, 0x44, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59,
	0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x41, 0x43, 0x4b, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10,
	0x05, 0x2a, 0x4a, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19,
	0x0a, 0x15, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x45, 0x57,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x53, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b,
	0x52, 0x45, 0x46, 0x55, 0x52, 0x42, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x42, 0x0a,
	0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x45, 0x4e, 0x44, 0x45,
	0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x45, 0x4d,
	0x41, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x4e, 0x49, 0x53, 0x45, 0x58, 0x10,
	0x03, 0x2a, 0x41, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1b, 0x0a, 0x17, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x46, 0x49, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x45, 0x41,
	0x53, 0x45, 0x10, 0x02, 0x2a, 0x82, 0x01, 0x0a, 0x0a, 0x53, 0x69, 0x7a, 0x65, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54,
	0x45, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x06, 0x0a, 0x02, 0x41, 0x55, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x42, 0x52, 0x10, 0x02,
	0x12, 0x06, 0x0a, 0x02, 0x43, 0x4e, 0x10, 0x03, 0x12, 0x06, 0x0a, 0x02, 0x44, 0x45, 0x10, 0x04,
	0x12, 0x06, 0x0a, 0x02, 0x45, 0x55, 0x10, 0x05, 0x12, 0x06, 0x0a, 0x02, 0x46, 0x52, 0x10, 0x06,
	0x12, 0x06, 0x0a, 0x02, 0x49, 0x54, 0x10, 0x07, 0x12, 0x06, 0x0a, 0x02, 0x4a, 0x50, 0x10, 0x08,
	0x12, 0x07, 0x0a, 0x03, 0x4d, 0x45, 0x58, 0x10, 0x09, 0x12, 0x06, 0x0a, 0x02, 0x55, 0x4b, 0x10,
	0x0a, 0x12, 0x06, 0x0a, 0x02, 0x55, 0x53, 0x10, 0x0b, 0x2a, 0x6a, 0x0a, 0x08, 0x53, 0x69, 0x7a,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x52, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x50, 0x45, 0x54, 0x49, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x41, 0x54,
	0x45, 0x52, 0x4e, 0x49, 0x54, 0x59, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x49, 0x47, 0x10,
	0x04, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x41, 0x4c, 0x4c, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x50,
	0x4c, 0x55, 0x53, 0x10, 0x06, 0x2a, 0x8c, 0x01, 0x0a, 0x15, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x45, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12,
	0x27, 0x0a, 0x23, 0x45, 0x4e, 0x45, 0x52, 0x47, 0x59, 0x5f, 0x45, 0x46, 0x46, 0x49, 0x43, 0x49,
	0x45, 0x4e, 0x43, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x50, 0x50, 0x50,
	0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x50, 0x50, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x41,
	0x50, 0x10, 0x03, 0x12, 0x05, 0x0a, 0x01, 0x41, 0x10, 0x04, 0x12, 0x05, 0x0a, 0x01, 0x42, 0x10,
	0x05, 0x12, 0x05, 0x0a, 0x01, 0x43, 0x10, 0x06, 0x12, 0x05, 0x0a, 0x01, 0x44, 0x10, 0x07, 0x12,
	0x05, 0x0a, 0x01, 0x45, 0x10, 0x08, 0x12, 0x05, 0x0a, 0x01, 0x46, 0x10, 0x09, 0x12, 0x05, 0x0a,
	0x01, 0x47, 0x10, 0x0a, 0x2a, 0x69, 0x0a, 0x0c, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x49, 0x43, 0x4b, 0x55, 0x50, 0x5f, 0x4d,
	0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f,
	0x52, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x55, 0x59, 0x10, 0x02, 0x12,
	0x0b, 0x0a, 0x07, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d,
	0x53, 0x48, 0x49, 0x50, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x04, 0x2a,
	0x98, 0x01, 0x0a, 0x09, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x6c, 0x61, 0x12, 0x1a, 0x0a,
	0x16, 0x50, 0x49, 0x43, 0x4b, 0x55, 0x50, 0x5f, 0x53, 0x4c, 0x41, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x41, 0x4d,
	0x45, 0x5f, 0x44, 0x41, 0x59, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x45, 0x58, 0x54, 0x5f,
	0x44, 0x41, 0x59, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x57, 0x4f, 0x5f, 0x44, 0x41, 0x59,
	0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x48, 0x52, 0x45, 0x45, 0x5f, 0x44, 0x41, 0x59, 0x10,
	0x04, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x4f, 0x55, 0x52, 0x5f, 0x44, 0x41, 0x59, 0x10, 0x05, 0x12,
	0x0c, 0x0a, 0x08, 0x46, 0x49, 0x56, 0x45, 0x5f, 0x44, 0x41, 0x59, 0x10, 0x06, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x49, 0x58, 0x5f, 0x44, 0x41, 0x59, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x55,
	0x4c, 0x54, 0x49, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x10, 0x08, 0x2a, 0x30, 0x0a, 0x05, 0x50, 0x61,
	0x75, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x44,
	0x53, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x02, 0x2a, 0x67, 0x0a, 0x16,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x23, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x41, 0x44, 0x45, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4d,
	0x57, 0x4b, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x50, 0x41, 0x10, 0x03, 0x12, 0x06, 0x0a,
	0x02, 0x45, 0x43, 0x10, 0x04, 0x2a, 0xd5, 0x01, 0x0a, 0x11, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x43,
	0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4d,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x45, 0x4e, 0x45, 0x52, 0x47, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x10, 0x01,
	0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x4e, 0x45, 0x52, 0x47, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x5f,
	0x4d, 0x4f, 0x53, 0x54, 0x5f, 0x45, 0x46, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x02,
	0x12, 0x09, 0x0a, 0x05, 0x45, 0x50, 0x52, 0x45, 0x4c, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x45,
	0x55, 0x5f, 0x45, 0x43, 0x4f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19,
	0x56, 0x45, 0x48, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x45, 0x52, 0x47, 0x59, 0x5f, 0x45,
	0x46, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x05, 0x12, 0x30, 0x0a, 0x2c, 0x56,
	0x45, 0x48, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x45, 0x52, 0x47, 0x59, 0x5f, 0x45, 0x46,
	0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x48, 0x41, 0x52,
	0x47, 0x45, 0x44, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x45, 0x52, 0x59, 0x10, 0x06, 0x2a, 0x64, 0x0a,
	0x11, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x49, 0x47, 0x49, 0x54, 0x41, 0x4c, 0x5f, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x52, 0x41, 0x49, 0x4e,
	0x45, 0x44, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x49, 0x43, 0x5f, 0x4d,
	0x45, 0x44, 0x49, 0x41, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c,
	0x54, 0x10, 0x02, 0x42, 0x86, 0x02, 0x0a, 0x28, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x42, 0x13, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4a, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x68, 0x6f,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x2f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x70, 0x62, 0x3b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x70, 0x62, 0xaa, 0x02, 0x24, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x53, 0x68, 0x6f,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x24, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x5c, 0x53, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5c, 0x4d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x5c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x5c, 0x56,
	0x31, 0xea, 0x02, 0x28, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a, 0x53, 0x68, 0x6f, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x3a, 0x3a, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x3a, 0x3a,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_shopping_merchant_products_v1_products_common_proto_rawDescOnce sync.Once
	file_google_shopping_merchant_products_v1_products_common_proto_rawDescData = file_google_shopping_merchant_products_v1_products_common_proto_rawDesc
)

func file_google_shopping_merchant_products_v1_products_common_proto_rawDescGZIP() []byte {
	file_google_shopping_merchant_products_v1_products_common_proto_rawDescOnce.Do(func() {
		file_google_shopping_merchant_products_v1_products_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_shopping_merchant_products_v1_products_common_proto_rawDescData)
	})
	return file_google_shopping_merchant_products_v1_products_common_proto_rawDescData
}

var file_google_shopping_merchant_products_v1_products_common_proto_enumTypes = make([]protoimpl.EnumInfo, 17)
var file_google_shopping_merchant_products_v1_products_common_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_google_shopping_merchant_products_v1_products_common_proto_goTypes = []any{
	(SubscriptionPeriod)(0),     // 0: google.shopping.merchant.products.v1.SubscriptionPeriod
	(AgeGroup)(0),               // 1: google.shopping.merchant.products.v1.AgeGroup
	(Availability)(0),           // 2: google.shopping.merchant.products.v1.Availability
	(Condition)(0),              // 3: google.shopping.merchant.products.v1.Condition
	(Gender)(0),                 // 4: google.shopping.merchant.products.v1.Gender
	(CreditType)(0),             // 5: google.shopping.merchant.products.v1.CreditType
	(SizeSystem)(0),             // 6: google.shopping.merchant.products.v1.SizeSystem
	(SizeType)(0),               // 7: google.shopping.merchant.products.v1.SizeType
	(EnergyEfficiencyClass)(0),  // 8: google.shopping.merchant.products.v1.EnergyEfficiencyClass
	(PickupMethod)(0),           // 9: google.shopping.merchant.products.v1.PickupMethod
	(PickupSla)(0),              // 10: google.shopping.merchant.products.v1.PickupSla
	(Pause)(0),                  // 11: google.shopping.merchant.products.v1.Pause
	(CertificationAuthority)(0), // 12: google.shopping.merchant.products.v1.CertificationAuthority
	(CertificationName)(0),      // 13: google.shopping.merchant.products.v1.CertificationName
	(DigitalSourceType)(0),      // 14: google.shopping.merchant.products.v1.DigitalSourceType
	(ProductStatus_ItemLevelIssue_Severity)(0),        // 15: google.shopping.merchant.products.v1.ProductStatus.ItemLevelIssue.Severity
	(ProductSustainabilityIncentive_Type)(0),          // 16: google.shopping.merchant.products.v1.ProductSustainabilityIncentive.Type
	(*ProductAttributes)(nil),                         // 17: google.shopping.merchant.products.v1.ProductAttributes
	(*ShippingWeight)(nil),                            // 18: google.shopping.merchant.products.v1.ShippingWeight
	(*ShippingDimension)(nil),                         // 19: google.shopping.merchant.products.v1.ShippingDimension
	(*UnitPricingBaseMeasure)(nil),                    // 20: google.shopping.merchant.products.v1.UnitPricingBaseMeasure
	(*UnitPricingMeasure)(nil),                        // 21: google.shopping.merchant.products.v1.UnitPricingMeasure
	(*SubscriptionCost)(nil),                          // 22: google.shopping.merchant.products.v1.SubscriptionCost
	(*ProductInstallment)(nil),                        // 23: google.shopping.merchant.products.v1.ProductInstallment
	(*LoyaltyPoints)(nil),                             // 24: google.shopping.merchant.products.v1.LoyaltyPoints
	(*LoyaltyProgram)(nil),                            // 25: google.shopping.merchant.products.v1.LoyaltyProgram
	(*Shipping)(nil),                                  // 26: google.shopping.merchant.products.v1.Shipping
	(*FreeShippingThreshold)(nil),                     // 27: google.shopping.merchant.products.v1.FreeShippingThreshold
	(*ProductDetail)(nil),                             // 28: google.shopping.merchant.products.v1.ProductDetail
	(*ProductCertification)(nil),                      // 29: google.shopping.merchant.products.v1.ProductCertification
	(*StructuredTitle)(nil),                           // 30: google.shopping.merchant.products.v1.StructuredTitle
	(*StructuredDescription)(nil),                     // 31: google.shopping.merchant.products.v1.StructuredDescription
	(*ProductDimension)(nil),                          // 32: google.shopping.merchant.products.v1.ProductDimension
	(*ProductWeight)(nil),                             // 33: google.shopping.merchant.products.v1.ProductWeight
	(*ProductStatus)(nil),                             // 34: google.shopping.merchant.products.v1.ProductStatus
	(*CloudExportAdditionalProperties)(nil),           // 35: google.shopping.merchant.products.v1.CloudExportAdditionalProperties
	(*ProductSustainabilityIncentive)(nil),            // 36: google.shopping.merchant.products.v1.ProductSustainabilityIncentive
	(*AutomatedDiscounts)(nil),                        // 37: google.shopping.merchant.products.v1.AutomatedDiscounts
	(*ProductStatus_DestinationStatus)(nil),           // 38: google.shopping.merchant.products.v1.ProductStatus.DestinationStatus
	(*ProductStatus_ItemLevelIssue)(nil),              // 39: google.shopping.merchant.products.v1.ProductStatus.ItemLevelIssue
	(*timestamppb.Timestamp)(nil),                     // 40: google.protobuf.Timestamp
	(*typepb.Price)(nil),                              // 41: google.shopping.type.Price
	(*interval.Interval)(nil),                         // 42: google.type.Interval
	(typepb.Destination_DestinationEnum)(0),           // 43: google.shopping.type.Destination.DestinationEnum
	(typepb.ReportingContext_ReportingContextEnum)(0), // 44: google.shopping.type.ReportingContext.ReportingContextEnum
}
var file_google_shopping_merchant_products_v1_products_common_proto_depIdxs = []int32{
	40, // 0: google.shopping.merchant.products.v1.ProductAttributes.expiration_date:type_name -> google.protobuf.Timestamp
	40, // 1: google.shopping.merchant.products.v1.ProductAttributes.disclosure_date:type_name -> google.protobuf.Timestamp
	1,  // 2: google.shopping.merchant.products.v1.ProductAttributes.age_group:type_name -> google.shopping.merchant.products.v1.AgeGroup
	2,  // 3: google.shopping.merchant.products.v1.ProductAttributes.availability:type_name -> google.shopping.merchant.products.v1.Availability
	40, // 4: google.shopping.merchant.products.v1.ProductAttributes.availability_date:type_name -> google.protobuf.Timestamp
	3,  // 5: google.shopping.merchant.products.v1.ProductAttributes.condition:type_name -> google.shopping.merchant.products.v1.Condition
	4,  // 6: google.shopping.merchant.products.v1.ProductAttributes.gender:type_name -> google.shopping.merchant.products.v1.Gender
	41, // 7: google.shopping.merchant.products.v1.ProductAttributes.price:type_name -> google.shopping.type.Price
	41, // 8: google.shopping.merchant.products.v1.ProductAttributes.maximum_retail_price:type_name -> google.shopping.type.Price
	23, // 9: google.shopping.merchant.products.v1.ProductAttributes.installment:type_name -> google.shopping.merchant.products.v1.ProductInstallment
	22, // 10: google.shopping.merchant.products.v1.ProductAttributes.subscription_cost:type_name -> google.shopping.merchant.products.v1.SubscriptionCost
	24, // 11: google.shopping.merchant.products.v1.ProductAttributes.loyalty_points:type_name -> google.shopping.merchant.products.v1.LoyaltyPoints
	25, // 12: google.shopping.merchant.products.v1.ProductAttributes.loyalty_programs:type_name -> google.shopping.merchant.products.v1.LoyaltyProgram
	41, // 13: google.shopping.merchant.products.v1.ProductAttributes.sale_price:type_name -> google.shopping.type.Price
	42, // 14: google.shopping.merchant.products.v1.ProductAttributes.sale_price_effective_date:type_name -> google.type.Interval
	32, // 15: google.shopping.merchant.products.v1.ProductAttributes.product_height:type_name -> google.shopping.merchant.products.v1.ProductDimension
	32, // 16: google.shopping.merchant.products.v1.ProductAttributes.product_length:type_name -> google.shopping.merchant.products.v1.ProductDimension
	32, // 17: google.shopping.merchant.products.v1.ProductAttributes.product_width:type_name -> google.shopping.merchant.products.v1.ProductDimension
	33, // 18: google.shopping.merchant.products.v1.ProductAttributes.product_weight:type_name -> google.shopping.merchant.products.v1.ProductWeight
	26, // 19: google.shopping.merchant.products.v1.ProductAttributes.shipping:type_name -> google.shopping.merchant.products.v1.Shipping
	27, // 20: google.shopping.merchant.products.v1.ProductAttributes.free_shipping_threshold:type_name -> google.shopping.merchant.products.v1.FreeShippingThreshold
	18, // 21: google.shopping.merchant.products.v1.ProductAttributes.shipping_weight:type_name -> google.shopping.merchant.products.v1.ShippingWeight
	19, // 22: google.shopping.merchant.products.v1.ProductAttributes.shipping_length:type_name -> google.shopping.merchant.products.v1.ShippingDimension
	19, // 23: google.shopping.merchant.products.v1.ProductAttributes.shipping_width:type_name -> google.shopping.merchant.products.v1.ShippingDimension
	19, // 24: google.shopping.merchant.products.v1.ProductAttributes.shipping_height:type_name -> google.shopping.merchant.products.v1.ShippingDimension
	6,  // 25: google.shopping.merchant.products.v1.ProductAttributes.size_system:type_name -> google.shopping.merchant.products.v1.SizeSystem
	7,  // 26: google.shopping.merchant.products.v1.ProductAttributes.size_types:type_name -> google.shopping.merchant.products.v1.SizeType
	8,  // 27: google.shopping.merchant.products.v1.ProductAttributes.energy_efficiency_class:type_name -> google.shopping.merchant.products.v1.EnergyEfficiencyClass
	8,  // 28: google.shopping.merchant.products.v1.ProductAttributes.min_energy_efficiency_class:type_name -> google.shopping.merchant.products.v1.EnergyEfficiencyClass
	8,  // 29: google.shopping.merchant.products.v1.ProductAttributes.max_energy_efficiency_class:type_name -> google.shopping.merchant.products.v1.EnergyEfficiencyClass
	21, // 30: google.shopping.merchant.products.v1.ProductAttributes.unit_pricing_measure:type_name -> google.shopping.merchant.products.v1.UnitPricingMeasure
	20, // 31: google.shopping.merchant.products.v1.ProductAttributes.unit_pricing_base_measure:type_name -> google.shopping.merchant.products.v1.UnitPricingBaseMeasure
	41, // 32: google.shopping.merchant.products.v1.ProductAttributes.cost_of_goods_sold:type_name -> google.shopping.type.Price
	28, // 33: google.shopping.merchant.products.v1.ProductAttributes.product_details:type_name -> google.shopping.merchant.products.v1.ProductDetail
	9,  // 34: google.shopping.merchant.products.v1.ProductAttributes.pickup_method:type_name -> google.shopping.merchant.products.v1.PickupMethod
	10, // 35: google.shopping.merchant.products.v1.ProductAttributes.pickup_sla:type_name -> google.shopping.merchant.products.v1.PickupSla
	43, // 36: google.shopping.merchant.products.v1.ProductAttributes.included_destinations:type_name -> google.shopping.type.Destination.DestinationEnum
	43, // 37: google.shopping.merchant.products.v1.ProductAttributes.excluded_destinations:type_name -> google.shopping.type.Destination.DestinationEnum
	11, // 38: google.shopping.merchant.products.v1.ProductAttributes.pause:type_name -> google.shopping.merchant.products.v1.Pause
	35, // 39: google.shopping.merchant.products.v1.ProductAttributes.cloud_export_additional_properties:type_name -> google.shopping.merchant.products.v1.CloudExportAdditionalProperties
	29, // 40: google.shopping.merchant.products.v1.ProductAttributes.certifications:type_name -> google.shopping.merchant.products.v1.ProductCertification
	30, // 41: google.shopping.merchant.products.v1.ProductAttributes.structured_title:type_name -> google.shopping.merchant.products.v1.StructuredTitle
	31, // 42: google.shopping.merchant.products.v1.ProductAttributes.structured_description:type_name -> google.shopping.merchant.products.v1.StructuredDescription
	41, // 43: google.shopping.merchant.products.v1.ProductAttributes.auto_pricing_min_price:type_name -> google.shopping.type.Price
	36, // 44: google.shopping.merchant.products.v1.ProductAttributes.sustainability_incentives:type_name -> google.shopping.merchant.products.v1.ProductSustainabilityIncentive
	0,  // 45: google.shopping.merchant.products.v1.SubscriptionCost.period:type_name -> google.shopping.merchant.products.v1.SubscriptionPeriod
	41, // 46: google.shopping.merchant.products.v1.SubscriptionCost.amount:type_name -> google.shopping.type.Price
	41, // 47: google.shopping.merchant.products.v1.ProductInstallment.amount:type_name -> google.shopping.type.Price
	41, // 48: google.shopping.merchant.products.v1.ProductInstallment.downpayment:type_name -> google.shopping.type.Price
	5,  // 49: google.shopping.merchant.products.v1.ProductInstallment.credit_type:type_name -> google.shopping.merchant.products.v1.CreditType
	41, // 50: google.shopping.merchant.products.v1.LoyaltyProgram.price:type_name -> google.shopping.type.Price
	41, // 51: google.shopping.merchant.products.v1.LoyaltyProgram.cashback_for_future_use:type_name -> google.shopping.type.Price
	42, // 52: google.shopping.merchant.products.v1.LoyaltyProgram.member_price_effective_date:type_name -> google.type.Interval
	41, // 53: google.shopping.merchant.products.v1.Shipping.price:type_name -> google.shopping.type.Price
	41, // 54: google.shopping.merchant.products.v1.FreeShippingThreshold.price_threshold:type_name -> google.shopping.type.Price
	12, // 55: google.shopping.merchant.products.v1.ProductCertification.certification_authority:type_name -> google.shopping.merchant.products.v1.CertificationAuthority
	13, // 56: google.shopping.merchant.products.v1.ProductCertification.certification_name:type_name -> google.shopping.merchant.products.v1.CertificationName
	14, // 57: google.shopping.merchant.products.v1.StructuredTitle.digital_source_type:type_name -> google.shopping.merchant.products.v1.DigitalSourceType
	14, // 58: google.shopping.merchant.products.v1.StructuredDescription.digital_source_type:type_name -> google.shopping.merchant.products.v1.DigitalSourceType
	38, // 59: google.shopping.merchant.products.v1.ProductStatus.destination_statuses:type_name -> google.shopping.merchant.products.v1.ProductStatus.DestinationStatus
	39, // 60: google.shopping.merchant.products.v1.ProductStatus.item_level_issues:type_name -> google.shopping.merchant.products.v1.ProductStatus.ItemLevelIssue
	40, // 61: google.shopping.merchant.products.v1.ProductStatus.creation_date:type_name -> google.protobuf.Timestamp
	40, // 62: google.shopping.merchant.products.v1.ProductStatus.last_update_date:type_name -> google.protobuf.Timestamp
	40, // 63: google.shopping.merchant.products.v1.ProductStatus.google_expiration_date:type_name -> google.protobuf.Timestamp
	41, // 64: google.shopping.merchant.products.v1.ProductSustainabilityIncentive.amount:type_name -> google.shopping.type.Price
	16, // 65: google.shopping.merchant.products.v1.ProductSustainabilityIncentive.type:type_name -> google.shopping.merchant.products.v1.ProductSustainabilityIncentive.Type
	41, // 66: google.shopping.merchant.products.v1.AutomatedDiscounts.prior_price:type_name -> google.shopping.type.Price
	41, // 67: google.shopping.merchant.products.v1.AutomatedDiscounts.prior_price_progressive:type_name -> google.shopping.type.Price
	41, // 68: google.shopping.merchant.products.v1.AutomatedDiscounts.gad_price:type_name -> google.shopping.type.Price
	44, // 69: google.shopping.merchant.products.v1.ProductStatus.DestinationStatus.reporting_context:type_name -> google.shopping.type.ReportingContext.ReportingContextEnum
	15, // 70: google.shopping.merchant.products.v1.ProductStatus.ItemLevelIssue.severity:type_name -> google.shopping.merchant.products.v1.ProductStatus.ItemLevelIssue.Severity
	44, // 71: google.shopping.merchant.products.v1.ProductStatus.ItemLevelIssue.reporting_context:type_name -> google.shopping.type.ReportingContext.ReportingContextEnum
	72, // [72:72] is the sub-list for method output_type
	72, // [72:72] is the sub-list for method input_type
	72, // [72:72] is the sub-list for extension type_name
	72, // [72:72] is the sub-list for extension extendee
	0,  // [0:72] is the sub-list for field type_name
}

func init() { file_google_shopping_merchant_products_v1_products_common_proto_init() }
func file_google_shopping_merchant_products_v1_products_common_proto_init() {
	if File_google_shopping_merchant_products_v1_products_common_proto != nil {
		return
	}
	file_google_shopping_merchant_products_v1_products_common_proto_msgTypes[0].OneofWrappers = []any{}
	file_google_shopping_merchant_products_v1_products_common_proto_msgTypes[6].OneofWrappers = []any{}
	file_google_shopping_merchant_products_v1_products_common_proto_msgTypes[8].OneofWrappers = []any{}
	file_google_shopping_merchant_products_v1_products_common_proto_msgTypes[9].OneofWrappers = []any{}
	file_google_shopping_merchant_products_v1_products_common_proto_msgTypes[10].OneofWrappers = []any{}
	file_google_shopping_merchant_products_v1_products_common_proto_msgTypes[12].OneofWrappers = []any{}
	file_google_shopping_merchant_products_v1_products_common_proto_msgTypes[13].OneofWrappers = []any{}
	file_google_shopping_merchant_products_v1_products_common_proto_msgTypes[14].OneofWrappers = []any{}
	file_google_shopping_merchant_products_v1_products_common_proto_msgTypes[18].OneofWrappers = []any{}
	file_google_shopping_merchant_products_v1_products_common_proto_msgTypes[19].OneofWrappers = []any{
		(*ProductSustainabilityIncentive_Amount)(nil),
		(*ProductSustainabilityIncentive_Percentage)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_shopping_merchant_products_v1_products_common_proto_rawDesc,
			NumEnums:      17,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_shopping_merchant_products_v1_products_common_proto_goTypes,
		DependencyIndexes: file_google_shopping_merchant_products_v1_products_common_proto_depIdxs,
		EnumInfos:         file_google_shopping_merchant_products_v1_products_common_proto_enumTypes,
		MessageInfos:      file_google_shopping_merchant_products_v1_products_common_proto_msgTypes,
	}.Build()
	File_google_shopping_merchant_products_v1_products_common_proto = out.File
	file_google_shopping_merchant_products_v1_products_common_proto_rawDesc = nil
	file_google_shopping_merchant_products_v1_products_common_proto_goTypes = nil
	file_google_shopping_merchant_products_v1_products_common_proto_depIdxs = nil
}
