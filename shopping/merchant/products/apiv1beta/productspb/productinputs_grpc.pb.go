// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/shopping/merchant/products/v1beta/productinputs.proto

package productspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProductInputsService_InsertProductInput_FullMethodName = "/google.shopping.merchant.products.v1beta.ProductInputsService/InsertProductInput"
	ProductInputsService_UpdateProductInput_FullMethodName = "/google.shopping.merchant.products.v1beta.ProductInputsService/UpdateProductInput"
	ProductInputsService_DeleteProductInput_FullMethodName = "/google.shopping.merchant.products.v1beta.ProductInputsService/DeleteProductInput"
)

// ProductInputsServiceClient is the client API for ProductInputsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductInputsServiceClient interface {
	// Uploads a product input to your Merchant Center account. If an input
	// with the same contentLanguage, offerId, and dataSource already exists,
	// this method replaces that entry.
	//
	// After inserting, updating, or deleting a product input, it may take several
	// minutes before the processed product can be retrieved.
	InsertProductInput(ctx context.Context, in *InsertProductInputRequest, opts ...grpc.CallOption) (*ProductInput, error)
	// Updates the existing product input in your Merchant Center account.
	//
	// After inserting, updating, or deleting a product input, it may take several
	// minutes before the processed product can be retrieved.
	UpdateProductInput(ctx context.Context, in *UpdateProductInputRequest, opts ...grpc.CallOption) (*ProductInput, error)
	// Deletes a product input from your Merchant Center account.
	//
	// After inserting, updating, or deleting a product input, it may take several
	// minutes before the processed product can be retrieved.
	DeleteProductInput(ctx context.Context, in *DeleteProductInputRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type productInputsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductInputsServiceClient(cc grpc.ClientConnInterface) ProductInputsServiceClient {
	return &productInputsServiceClient{cc}
}

func (c *productInputsServiceClient) InsertProductInput(ctx context.Context, in *InsertProductInputRequest, opts ...grpc.CallOption) (*ProductInput, error) {
	out := new(ProductInput)
	err := c.cc.Invoke(ctx, ProductInputsService_InsertProductInput_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productInputsServiceClient) UpdateProductInput(ctx context.Context, in *UpdateProductInputRequest, opts ...grpc.CallOption) (*ProductInput, error) {
	out := new(ProductInput)
	err := c.cc.Invoke(ctx, ProductInputsService_UpdateProductInput_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productInputsServiceClient) DeleteProductInput(ctx context.Context, in *DeleteProductInputRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProductInputsService_DeleteProductInput_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductInputsServiceServer is the server API for ProductInputsService service.
// All implementations should embed UnimplementedProductInputsServiceServer
// for forward compatibility
type ProductInputsServiceServer interface {
	// Uploads a product input to your Merchant Center account. If an input
	// with the same contentLanguage, offerId, and dataSource already exists,
	// this method replaces that entry.
	//
	// After inserting, updating, or deleting a product input, it may take several
	// minutes before the processed product can be retrieved.
	InsertProductInput(context.Context, *InsertProductInputRequest) (*ProductInput, error)
	// Updates the existing product input in your Merchant Center account.
	//
	// After inserting, updating, or deleting a product input, it may take several
	// minutes before the processed product can be retrieved.
	UpdateProductInput(context.Context, *UpdateProductInputRequest) (*ProductInput, error)
	// Deletes a product input from your Merchant Center account.
	//
	// After inserting, updating, or deleting a product input, it may take several
	// minutes before the processed product can be retrieved.
	DeleteProductInput(context.Context, *DeleteProductInputRequest) (*emptypb.Empty, error)
}

// UnimplementedProductInputsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedProductInputsServiceServer struct {
}

func (UnimplementedProductInputsServiceServer) InsertProductInput(context.Context, *InsertProductInputRequest) (*ProductInput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertProductInput not implemented")
}
func (UnimplementedProductInputsServiceServer) UpdateProductInput(context.Context, *UpdateProductInputRequest) (*ProductInput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductInput not implemented")
}
func (UnimplementedProductInputsServiceServer) DeleteProductInput(context.Context, *DeleteProductInputRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductInput not implemented")
}

// UnsafeProductInputsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductInputsServiceServer will
// result in compilation errors.
type UnsafeProductInputsServiceServer interface {
	mustEmbedUnimplementedProductInputsServiceServer()
}

func RegisterProductInputsServiceServer(s grpc.ServiceRegistrar, srv ProductInputsServiceServer) {
	s.RegisterService(&ProductInputsService_ServiceDesc, srv)
}

func _ProductInputsService_InsertProductInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertProductInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductInputsServiceServer).InsertProductInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductInputsService_InsertProductInput_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductInputsServiceServer).InsertProductInput(ctx, req.(*InsertProductInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductInputsService_UpdateProductInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductInputsServiceServer).UpdateProductInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductInputsService_UpdateProductInput_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductInputsServiceServer).UpdateProductInput(ctx, req.(*UpdateProductInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductInputsService_DeleteProductInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductInputsServiceServer).DeleteProductInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductInputsService_DeleteProductInput_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductInputsServiceServer).DeleteProductInput(ctx, req.(*DeleteProductInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductInputsService_ServiceDesc is the grpc.ServiceDesc for ProductInputsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductInputsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.shopping.merchant.products.v1beta.ProductInputsService",
	HandlerType: (*ProductInputsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertProductInput",
			Handler:    _ProductInputsService_InsertProductInput_Handler,
		},
		{
			MethodName: "UpdateProductInput",
			Handler:    _ProductInputsService_UpdateProductInput_Handler,
		},
		{
			MethodName: "DeleteProductInput",
			Handler:    _ProductInputsService_DeleteProductInput_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/shopping/merchant/products/v1beta/productinputs.proto",
}
