// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.3
// source: google/shopping/merchant/issueresolution/v1beta/issueresolution.proto

package issueresolutionpb

import (
	context "context"
	reflect "reflect"
	sync "sync"

	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enum specifying the severity of the issue.
type Severity int32

const (
	// Default value. Will never be provided by the API.
	Severity_SEVERITY_UNSPECIFIED Severity = 0
	// Causes either an account suspension or an item disapproval. Errors should
	// be resolved as soon as possible to ensure items are eligible to appear in
	// results again.
	Severity_ERROR Severity = 1
	// Warnings can negatively impact the performance of ads and can lead to item
	// or account suspensions in the future unless the issue is resolved.
	Severity_WARNING Severity = 2
	// Infos are suggested optimizations to increase data quality. Resolving these
	// issues is recommended, but not required.
	Severity_INFO Severity = 3
)

// Enum value maps for Severity.
var (
	Severity_name = map[int32]string{
		0: "SEVERITY_UNSPECIFIED",
		1: "ERROR",
		2: "WARNING",
		3: "INFO",
	}
	Severity_value = map[string]int32{
		"SEVERITY_UNSPECIFIED": 0,
		"ERROR":                1,
		"WARNING":              2,
		"INFO":                 3,
	}
)

func (x Severity) Enum() *Severity {
	p := new(Severity)
	*p = x
	return p
}

func (x Severity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Severity) Descriptor() protoreflect.EnumDescriptor {
	return file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_enumTypes[0].Descriptor()
}

func (Severity) Type() protoreflect.EnumType {
	return &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_enumTypes[0]
}

func (x Severity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Severity.Descriptor instead.
func (Severity) EnumDescriptor() ([]byte, []int) {
	return file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_rawDescGZIP(), []int{0}
}

// Enum specifying how is the content returned.
type ContentOption int32

const (
	// Default value. Will never be provided by the API.
	ContentOption_CONTENT_OPTION_UNSPECIFIED ContentOption = 0
	// Returns the detail of the issue as a pre-rendered HTML text.
	ContentOption_PRE_RENDERED_HTML ContentOption = 1
)

// Enum value maps for ContentOption.
var (
	ContentOption_name = map[int32]string{
		0: "CONTENT_OPTION_UNSPECIFIED",
		1: "PRE_RENDERED_HTML",
	}
	ContentOption_value = map[string]int32{
		"CONTENT_OPTION_UNSPECIFIED": 0,
		"PRE_RENDERED_HTML":          1,
	}
)

func (x ContentOption) Enum() *ContentOption {
	p := new(ContentOption)
	*p = x
	return p
}

func (x ContentOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentOption) Descriptor() protoreflect.EnumDescriptor {
	return file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_enumTypes[1].Descriptor()
}

func (ContentOption) Type() protoreflect.EnumType {
	return &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_enumTypes[1]
}

func (x ContentOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContentOption.Descriptor instead.
func (ContentOption) EnumDescriptor() ([]byte, []int) {
	return file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_rawDescGZIP(), []int{1}
}

// Enum specifying how actions with user input forms, such as requesting
// re-review, are handled.
type UserInputActionRenderingOption int32

const (
	// Default value. Will never be provided by the API.
	UserInputActionRenderingOption_USER_INPUT_ACTION_RENDERING_OPTION_UNSPECIFIED UserInputActionRenderingOption = 0
	// Actions that require user input are represented only as links that points
	// the business to Merchant Center where they can request the action. Provides
	// easier to implement alternative to `BUILT_IN_USER_INPUT_ACTIONS`.
	UserInputActionRenderingOption_REDIRECT_TO_MERCHANT_CENTER UserInputActionRenderingOption = 1
	// Returns content and input form definition for each complex action. Your
	// application needs to display this content and input form to the business
	// before they can request processing of the action. To start the action, your
	// application needs to call the `triggeraction` method.
	UserInputActionRenderingOption_BUILT_IN_USER_INPUT_ACTIONS UserInputActionRenderingOption = 2
)

// Enum value maps for UserInputActionRenderingOption.
var (
	UserInputActionRenderingOption_name = map[int32]string{
		0: "USER_INPUT_ACTION_RENDERING_OPTION_UNSPECIFIED",
		1: "REDIRECT_TO_MERCHANT_CENTER",
		2: "BUILT_IN_USER_INPUT_ACTIONS",
	}
	UserInputActionRenderingOption_value = map[string]int32{
		"USER_INPUT_ACTION_RENDERING_OPTION_UNSPECIFIED": 0,
		"REDIRECT_TO_MERCHANT_CENTER":                    1,
		"BUILT_IN_USER_INPUT_ACTIONS":                    2,
	}
)

func (x UserInputActionRenderingOption) Enum() *UserInputActionRenderingOption {
	p := new(UserInputActionRenderingOption)
	*p = x
	return p
}

func (x UserInputActionRenderingOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserInputActionRenderingOption) Descriptor() protoreflect.EnumDescriptor {
	return file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_enumTypes[2].Descriptor()
}

func (UserInputActionRenderingOption) Type() protoreflect.EnumType {
	return &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_enumTypes[2]
}

func (x UserInputActionRenderingOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserInputActionRenderingOption.Descriptor instead.
func (UserInputActionRenderingOption) EnumDescriptor() ([]byte, []int) {
	return file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_rawDescGZIP(), []int{2}
}

// Enum specifying the type of action in third-party application.
type BuiltInSimpleAction_BuiltInSimpleActionType int32

const (
	// Default value. Will never be provided by the API.
	BuiltInSimpleAction_BUILT_IN_SIMPLE_ACTION_TYPE_UNSPECIFIED BuiltInSimpleAction_BuiltInSimpleActionType = 0
	// Redirect the business to the part of your application where they can
	// verify their phone.
	BuiltInSimpleAction_VERIFY_PHONE BuiltInSimpleAction_BuiltInSimpleActionType = 1
	// Redirect the business to the part of your application where they can
	// claim their website.
	BuiltInSimpleAction_CLAIM_WEBSITE BuiltInSimpleAction_BuiltInSimpleActionType = 2
	// Redirect the business to the part of your application where they can add
	// products.
	BuiltInSimpleAction_ADD_PRODUCTS BuiltInSimpleAction_BuiltInSimpleActionType = 3
	// Open a form where the business can edit their contact information.
	BuiltInSimpleAction_ADD_CONTACT_INFO BuiltInSimpleAction_BuiltInSimpleActionType = 4
	// Redirect the business to the part of your application where they can link
	// ads account.
	BuiltInSimpleAction_LINK_ADS_ACCOUNT BuiltInSimpleAction_BuiltInSimpleActionType = 5
	// Open a form where the business can add their business registration
	// number.
	BuiltInSimpleAction_ADD_BUSINESS_REGISTRATION_NUMBER BuiltInSimpleAction_BuiltInSimpleActionType = 6
	// Open a form where the business can edit an attribute. The attribute that
	// needs to be updated is specified in
	// [attribute_code][google.shopping.merchant.issueresolution.v1beta.BuiltInSimpleAction.attribute_code]
	// field of the action.
	BuiltInSimpleAction_EDIT_ITEM_ATTRIBUTE BuiltInSimpleAction_BuiltInSimpleActionType = 7
	// Redirect the business from the product issues to the diagnostic page with
	// their account issues in your application.
	//
	// This action will be returned only for product issues that are caused by
	// an account issue and thus the business should resolve the problem on the
	// account level.
	BuiltInSimpleAction_FIX_ACCOUNT_ISSUE BuiltInSimpleAction_BuiltInSimpleActionType = 8
	// Show [additional
	// content][google.shopping.merchant.issueresolution.v1beta.BuiltInSimpleAction.additional_content]
	// to the business.
	//
	// This action will be used for example to deliver a justification from
	// national authority.
	BuiltInSimpleAction_SHOW_ADDITIONAL_CONTENT BuiltInSimpleAction_BuiltInSimpleActionType = 9
)

// Enum value maps for BuiltInSimpleAction_BuiltInSimpleActionType.
var (
	BuiltInSimpleAction_BuiltInSimpleActionType_name = map[int32]string{
		0: "BUILT_IN_SIMPLE_ACTION_TYPE_UNSPECIFIED",
		1: "VERIFY_PHONE",
		2: "CLAIM_WEBSITE",
		3: "ADD_PRODUCTS",
		4: "ADD_CONTACT_INFO",
		5: "LINK_ADS_ACCOUNT",
		6: "ADD_BUSINESS_REGISTRATION_NUMBER",
		7: "EDIT_ITEM_ATTRIBUTE",
		8: "FIX_ACCOUNT_ISSUE",
		9: "SHOW_ADDITIONAL_CONTENT",
	}
	BuiltInSimpleAction_BuiltInSimpleActionType_value = map[string]int32{
		"BUILT_IN_SIMPLE_ACTION_TYPE_UNSPECIFIED": 0,
		"VERIFY_PHONE":                     1,
		"CLAIM_WEBSITE":                    2,
		"ADD_PRODUCTS":                     3,
		"ADD_CONTACT_INFO":                 4,
		"LINK_ADS_ACCOUNT":                 5,
		"ADD_BUSINESS_REGISTRATION_NUMBER": 6,
		"EDIT_ITEM_ATTRIBUTE":              7,
		"FIX_ACCOUNT_ISSUE":                8,
		"SHOW_ADDITIONAL_CONTENT":          9,
	}
)

func (x BuiltInSimpleAction_BuiltInSimpleActionType) Enum() *BuiltInSimpleAction_BuiltInSimpleActionType {
	p := new(BuiltInSimpleAction_BuiltInSimpleActionType)
	*p = x
	return p
}

func (x BuiltInSimpleAction_BuiltInSimpleActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BuiltInSimpleAction_BuiltInSimpleActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_enumTypes[3].Descriptor()
}

func (BuiltInSimpleAction_BuiltInSimpleActionType) Type() protoreflect.EnumType {
	return &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_enumTypes[3]
}

func (x BuiltInSimpleAction_BuiltInSimpleActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BuiltInSimpleAction_BuiltInSimpleActionType.Descriptor instead.
func (BuiltInSimpleAction_BuiltInSimpleActionType) EnumDescriptor() ([]byte, []int) {
	return file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_rawDescGZIP(), []int{9, 0}
}

// Enum specifying the type of the text input and how it should be rendered.
type InputField_TextInput_TextInputType int32

const (
	// Default value. Will never be provided by the API.
	InputField_TextInput_TEXT_INPUT_TYPE_UNSPECIFIED InputField_TextInput_TextInputType = 0
	// Used when a short text is expected. The field can be rendered as a
	// [text
	// field](https://www.w3.org/TR/2012/WD-html-markup-20121025/input.text.html#input.text).
	InputField_TextInput_GENERIC_SHORT_TEXT InputField_TextInput_TextInputType = 1
	// Used when a longer text is expected. The field should be rendered as a
	// [textarea](https://www.w3.org/TR/2012/WD-html-markup-20121025/textarea.html#textarea).
	InputField_TextInput_GENERIC_LONG_TEXT InputField_TextInput_TextInputType = 2
)

// Enum value maps for InputField_TextInput_TextInputType.
var (
	InputField_TextInput_TextInputType_name = map[int32]string{
		0: "TEXT_INPUT_TYPE_UNSPECIFIED",
		1: "GENERIC_SHORT_TEXT",
		2: "GENERIC_LONG_TEXT",
	}
	InputField_TextInput_TextInputType_value = map[string]int32{
		"TEXT_INPUT_TYPE_UNSPECIFIED": 0,
		"GENERIC_SHORT_TEXT":          1,
		"GENERIC_LONG_TEXT":           2,
	}
)

func (x InputField_TextInput_TextInputType) Enum() *InputField_TextInput_TextInputType {
	p := new(InputField_TextInput_TextInputType)
	*p = x
	return p
}

func (x InputField_TextInput_TextInputType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InputField_TextInput_TextInputType) Descriptor() protoreflect.EnumDescriptor {
	return file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_enumTypes[4].Descriptor()
}

func (InputField_TextInput_TextInputType) Type() protoreflect.EnumType {
	return &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_enumTypes[4]
}

func (x InputField_TextInput_TextInputType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InputField_TextInput_TextInputType.Descriptor instead.
func (InputField_TextInput_TextInputType) EnumDescriptor() ([]byte, []int) {
	return file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_rawDescGZIP(), []int{12, 0, 0}
}

// Enum specifying the type of an icon that is being used to display a
// corresponding tooltip in the Merchant Center.
type TextWithTooltip_TooltipIconStyle int32

const (
	// Default value. Will never be provided by the API.
	TextWithTooltip_TOOLTIP_ICON_STYLE_UNSPECIFIED TextWithTooltip_TooltipIconStyle = 0
	// Used when the tooltip adds additional information to the context,
	// the 'i' can be used as an icon.
	TextWithTooltip_INFO TextWithTooltip_TooltipIconStyle = 1
	// Used when the tooltip shows helpful information, the '?' can be used as
	// an icon.
	TextWithTooltip_QUESTION TextWithTooltip_TooltipIconStyle = 2
)

// Enum value maps for TextWithTooltip_TooltipIconStyle.
var (
	TextWithTooltip_TooltipIconStyle_name = map[int32]string{
		0: "TOOLTIP_ICON_STYLE_UNSPECIFIED",
		1: "INFO",
		2: "QUESTION",
	}
	TextWithTooltip_TooltipIconStyle_value = map[string]int32{
		"TOOLTIP_ICON_STYLE_UNSPECIFIED": 0,
		"INFO":                           1,
		"QUESTION":                       2,
	}
)

func (x TextWithTooltip_TooltipIconStyle) Enum() *TextWithTooltip_TooltipIconStyle {
	p := new(TextWithTooltip_TooltipIconStyle)
	*p = x
	return p
}

func (x TextWithTooltip_TooltipIconStyle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TextWithTooltip_TooltipIconStyle) Descriptor() protoreflect.EnumDescriptor {
	return file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_enumTypes[5].Descriptor()
}

func (TextWithTooltip_TooltipIconStyle) Type() protoreflect.EnumType {
	return &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_enumTypes[5]
}

func (x TextWithTooltip_TooltipIconStyle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TextWithTooltip_TooltipIconStyle.Descriptor instead.
func (TextWithTooltip_TooltipIconStyle) EnumDescriptor() ([]byte, []int) {
	return file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_rawDescGZIP(), []int{13, 0}
}

// Enum specifying the suggested style, how the message should be rendered.
type Callout_CalloutStyleHint int32

const (
	// Default value. Will never be provided by the API.
	Callout_CALLOUT_STYLE_HINT_UNSPECIFIED Callout_CalloutStyleHint = 0
	// The most important type of information highlighting problems, like an
	// unsuccessful outcome of previously requested actions.
	Callout_ERROR Callout_CalloutStyleHint = 1
	// Information warning about pending problems, risks or deadlines.
	Callout_WARNING Callout_CalloutStyleHint = 2
	// Default severity for important information like pending status of
	// previously requested action or cooldown for re-review.
	Callout_INFO Callout_CalloutStyleHint = 3
)

// Enum value maps for Callout_CalloutStyleHint.
var (
	Callout_CalloutStyleHint_name = map[int32]string{
		0: "CALLOUT_STYLE_HINT_UNSPECIFIED",
		1: "ERROR",
		2: "WARNING",
		3: "INFO",
	}
	Callout_CalloutStyleHint_value = map[string]int32{
		"CALLOUT_STYLE_HINT_UNSPECIFIED": 0,
		"ERROR":                          1,
		"WARNING":                        2,
		"INFO":                           3,
	}
)

func (x Callout_CalloutStyleHint) Enum() *Callout_CalloutStyleHint {
	p := new(Callout_CalloutStyleHint)
	*p = x
	return p
}

func (x Callout_CalloutStyleHint) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Callout_CalloutStyleHint) Descriptor() protoreflect.EnumDescriptor {
	return file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_enumTypes[6].Descriptor()
}

func (Callout_CalloutStyleHint) Type() protoreflect.EnumType {
	return &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_enumTypes[6]
}

func (x Callout_CalloutStyleHint) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Callout_CalloutStyleHint.Descriptor instead.
func (Callout_CalloutStyleHint) EnumDescriptor() ([]byte, []int) {
	return file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_rawDescGZIP(), []int{14, 0}
}

// Enum specifying the type of action that requires to redirect the business
// to an external location.
type ExternalAction_ExternalActionType int32

const (
	// Default value. Will never be provided by the API.
	ExternalAction_EXTERNAL_ACTION_TYPE_UNSPECIFIED ExternalAction_ExternalActionType = 0
	// Redirect to Merchant Center where the business can request a review for
	// issue related to their product.
	ExternalAction_REVIEW_PRODUCT_ISSUE_IN_MERCHANT_CENTER ExternalAction_ExternalActionType = 1
	// Redirect to Merchant Center where the business can request a review for
	// issue related to their account.
	ExternalAction_REVIEW_ACCOUNT_ISSUE_IN_MERCHANT_CENTER ExternalAction_ExternalActionType = 2
	// Redirect to the form in Help Center where the business can request a
	// legal appeal for the issue.
	ExternalAction_LEGAL_APPEAL_IN_HELP_CENTER ExternalAction_ExternalActionType = 3
	// Redirect to Merchant Center where the business can perform identity
	// verification.
	ExternalAction_VERIFY_IDENTITY_IN_MERCHANT_CENTER ExternalAction_ExternalActionType = 4
)

// Enum value maps for ExternalAction_ExternalActionType.
var (
	ExternalAction_ExternalActionType_name = map[int32]string{
		0: "EXTERNAL_ACTION_TYPE_UNSPECIFIED",
		1: "REVIEW_PRODUCT_ISSUE_IN_MERCHANT_CENTER",
		2: "REVIEW_ACCOUNT_ISSUE_IN_MERCHANT_CENTER",
		3: "LEGAL_APPEAL_IN_HELP_CENTER",
		4: "VERIFY_IDENTITY_IN_MERCHANT_CENTER",
	}
	ExternalAction_ExternalActionType_value = map[string]int32{
		"EXTERNAL_ACTION_TYPE_UNSPECIFIED":        0,
		"REVIEW_PRODUCT_ISSUE_IN_MERCHANT_CENTER": 1,
		"REVIEW_ACCOUNT_ISSUE_IN_MERCHANT_CENTER": 2,
		"LEGAL_APPEAL_IN_HELP_CENTER":             3,
		"VERIFY_IDENTITY_IN_MERCHANT_CENTER":      4,
	}
)

func (x ExternalAction_ExternalActionType) Enum() *ExternalAction_ExternalActionType {
	p := new(ExternalAction_ExternalActionType)
	*p = x
	return p
}

func (x ExternalAction_ExternalActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExternalAction_ExternalActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_enumTypes[7].Descriptor()
}

func (ExternalAction_ExternalActionType) Type() protoreflect.EnumType {
	return &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_enumTypes[7]
}

func (x ExternalAction_ExternalActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExternalAction_ExternalActionType.Descriptor instead.
func (ExternalAction_ExternalActionType) EnumDescriptor() ([]byte, []int) {
	return file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_rawDescGZIP(), []int{15, 0}
}

// Response containing an issue resolution content and actions for listed
// account issues.
type RenderAccountIssuesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of account issues for a given account.
	//
	// This list can be shown with compressed, expandable items. In the compressed
	// form, the title and impact should be shown for each issue. Once the issue
	// is expanded, the detailed
	// [content][google.shopping.merchant.issueresolution.v1beta.RenderedIssue.prerendered_content]
	// and available
	// [actions][google.shopping.merchant.issueresolution.v1beta.RenderedIssue.actions]
	// should be rendered.
	RenderedIssues []*RenderedIssue `protobuf:"bytes,1,rep,name=rendered_issues,json=renderedIssues,proto3" json:"rendered_issues,omitempty"`
}

func (x *RenderAccountIssuesResponse) Reset() {
	*x = RenderAccountIssuesResponse{}
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RenderAccountIssuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderAccountIssuesResponse) ProtoMessage() {}

func (x *RenderAccountIssuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderAccountIssuesResponse.ProtoReflect.Descriptor instead.
func (*RenderAccountIssuesResponse) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_rawDescGZIP(), []int{0}
}

func (x *RenderAccountIssuesResponse) GetRenderedIssues() []*RenderedIssue {
	if x != nil {
		return x.RenderedIssues
	}
	return nil
}

// Request to provide issue resolution content and actions for business's
// account issues.
type RenderAccountIssuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The account to fetch issues for.
	// Format: `accounts/{account}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. The [IETF BCP-47](https://tools.ietf.org/html/bcp47) language
	// code used to localize issue resolution content. If not set, the result will
	// be in default language `en-US`.
	LanguageCode string `protobuf:"bytes,2,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"`
	// Optional. The [IANA](https://www.iana.org/time-zones) timezone used to
	// localize times in an issue resolution content. For example
	// 'America/Los_Angeles'. If not set, results will use as a default UTC.
	TimeZone string `protobuf:"bytes,3,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
	// Optional. The payload for configuring how the content should be rendered.
	Payload *RenderIssuesRequestPayload `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *RenderAccountIssuesRequest) Reset() {
	*x = RenderAccountIssuesRequest{}
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RenderAccountIssuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderAccountIssuesRequest) ProtoMessage() {}

func (x *RenderAccountIssuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderAccountIssuesRequest.ProtoReflect.Descriptor instead.
func (*RenderAccountIssuesRequest) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_rawDescGZIP(), []int{1}
}

func (x *RenderAccountIssuesRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RenderAccountIssuesRequest) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

func (x *RenderAccountIssuesRequest) GetTimeZone() string {
	if x != nil {
		return x.TimeZone
	}
	return ""
}

func (x *RenderAccountIssuesRequest) GetPayload() *RenderIssuesRequestPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

// The payload for configuring how the content should be rendered.
type RenderIssuesRequestPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. How the detailed content should be returned. Default option is to
	// return the content as a pre-rendered HTML text.
	ContentOption *ContentOption `protobuf:"varint,1,opt,name=content_option,json=contentOption,proto3,enum=google.shopping.merchant.issueresolution.v1beta.ContentOption,oneof" json:"content_option,omitempty"`
	// Optional. How actions with user input form should be handled. If not
	// provided, actions will be returned as links that points the business to
	// Merchant Center where they can request the action.
	UserInputActionOption *UserInputActionRenderingOption `protobuf:"varint,2,opt,name=user_input_action_option,json=userInputActionOption,proto3,enum=google.shopping.merchant.issueresolution.v1beta.UserInputActionRenderingOption,oneof" json:"user_input_action_option,omitempty"`
}

func (x *RenderIssuesRequestPayload) Reset() {
	*x = RenderIssuesRequestPayload{}
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RenderIssuesRequestPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderIssuesRequestPayload) ProtoMessage() {}

func (x *RenderIssuesRequestPayload) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderIssuesRequestPayload.ProtoReflect.Descriptor instead.
func (*RenderIssuesRequestPayload) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_rawDescGZIP(), []int{2}
}

func (x *RenderIssuesRequestPayload) GetContentOption() ContentOption {
	if x != nil && x.ContentOption != nil {
		return *x.ContentOption
	}
	return ContentOption_CONTENT_OPTION_UNSPECIFIED
}

func (x *RenderIssuesRequestPayload) GetUserInputActionOption() UserInputActionRenderingOption {
	if x != nil && x.UserInputActionOption != nil {
		return *x.UserInputActionOption
	}
	return UserInputActionRenderingOption_USER_INPUT_ACTION_RENDERING_OPTION_UNSPECIFIED
}

// Response containing an issue resolution content and actions for listed
// product issues.
type RenderProductIssuesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of issues for a given product.
	//
	// This list can be shown with compressed, expandable items. In the compressed
	// form, the
	// [title][google.shopping.merchant.issueresolution.v1beta.RenderedIssue.title]
	// and
	// [impact][google.shopping.merchant.issueresolution.v1beta.RenderedIssue.impact]
	// should be shown for each issue. Once the issue is expanded, the detailed
	// [content][google.shopping.merchant.issueresolution.v1beta.RenderedIssue.prerendered_content]
	// and available
	// [actions][google.shopping.merchant.issueresolution.v1beta.RenderedIssue.actions]
	// should be rendered.
	RenderedIssues []*RenderedIssue `protobuf:"bytes,1,rep,name=rendered_issues,json=renderedIssues,proto3" json:"rendered_issues,omitempty"`
}

func (x *RenderProductIssuesResponse) Reset() {
	*x = RenderProductIssuesResponse{}
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RenderProductIssuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderProductIssuesResponse) ProtoMessage() {}

func (x *RenderProductIssuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderProductIssuesResponse.ProtoReflect.Descriptor instead.
func (*RenderProductIssuesResponse) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_rawDescGZIP(), []int{3}
}

func (x *RenderProductIssuesResponse) GetRenderedIssues() []*RenderedIssue {
	if x != nil {
		return x.RenderedIssues
	}
	return nil
}

// Request to provide an issue resolution content and actions for product issues
// of business's product.
type RenderProductIssuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the product to fetch issues for.
	// Format: `accounts/{account}/products/{product}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. The [IETF BCP-47](https://tools.ietf.org/html/bcp47) language
	// code used to localize an issue resolution content. If not set, the result
	// will be in default language `en-US`.
	LanguageCode string `protobuf:"bytes,2,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"`
	// Optional. The [IANA](https://www.iana.org/time-zones) timezone used to
	// localize times in an issue resolution content. For example
	// 'America/Los_Angeles'. If not set, results will use as a default UTC.
	TimeZone string `protobuf:"bytes,3,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
	// Optional. The payload for configuring how the content should be rendered.
	Payload *RenderIssuesRequestPayload `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *RenderProductIssuesRequest) Reset() {
	*x = RenderProductIssuesRequest{}
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RenderProductIssuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderProductIssuesRequest) ProtoMessage() {}

func (x *RenderProductIssuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderProductIssuesRequest.ProtoReflect.Descriptor instead.
func (*RenderProductIssuesRequest) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_rawDescGZIP(), []int{4}
}

func (x *RenderProductIssuesRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RenderProductIssuesRequest) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

func (x *RenderProductIssuesRequest) GetTimeZone() string {
	if x != nil {
		return x.TimeZone
	}
	return ""
}

func (x *RenderProductIssuesRequest) GetPayload() *RenderIssuesRequestPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

// An issue affecting specific business or their product.
type RenderedIssue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Detailed content of the issue. Should be shown to the business when they
	// expand the issue. The form in which is the content returned is specified
	// with the [content
	// option][google.shopping.merchant.issueresolution.v1beta.RenderIssuesRequestPayload.content_option]
	// request field.
	//
	// Types that are assignable to Content:
	//
	//	*RenderedIssue_PrerenderedContent
	Content isRenderedIssue_Content `protobuf_oneof:"content"`
	// Out-of-court dispute settlement (ODS) contains a link to a page where
	// the business can bring their appeal to an [external
	// body](https://support.google.com/european-union-digital-services-act-redress-options/answer/13535501).
	// It may contains a detailed instructions and any values needed for the
	// business to proceed with their request.
	//
	// The ODS is a part of the EU's Digital Service ACT (DSA). If present, it
	// should be shown to the business.
	//
	// The ODS may differ for individual issues and thus it should be by default
	// shown in the detail of the issue. It could be shown next to
	// [actions][google.shopping.merchant.issueresolution.v1beta.RenderedIssue.actions]
	// for the issue.
	//
	// In some cases the ODS could be the same for all issues in the list. If the
	// values for individual issues do not differ, then the ODS could be shown
	// only once. For example under the list with issues. This is an optional UX
	// improvement. If values differ, then ODS needs to be shown in details of
	// individual issues.
	//
	// Types that are assignable to OutOfCourtDisputeSettlement:
	//
	//	*RenderedIssue_PrerenderedOutOfCourtDisputeSettlement
	OutOfCourtDisputeSettlement isRenderedIssue_OutOfCourtDisputeSettlement `protobuf_oneof:"out_of_court_dispute_settlement"`
	// Title of the issue.
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// Clarifies the severity of the issue.
	//
	// The [summarizing
	// message][google.shopping.merchant.issueresolution.v1beta.Impact.message],
	// if present, should be shown right under the title for each issue. It helps
	// business to quickly understand the impact of the issue.
	//
	// The detailed
	// [breakdown][google.shopping.merchant.issueresolution.v1beta.Impact.breakdowns]
	// helps the business to fully understand the impact of the issue. It can be
	// rendered as dialog that opens when the business mouse over the summarized
	// impact statement.
	//
	// Issues with different
	// [severity][google.shopping.merchant.issueresolution.v1beta.Impact.severity]
	// can be styled differently. They may use a different color or icon to signal
	// the difference between `ERROR`, `WARNING` and `INFO`.
	Impact *Impact `protobuf:"bytes,2,opt,name=impact,proto3" json:"impact,omitempty"`
	// A list of actionable steps that can be executed to solve the issue. An
	// example is requesting a re-review or providing arguments when business
	// disagrees with the issue.
	//
	// Actions that are supported in (your) third-party application can be
	// rendered as buttons and should be available to the business when they
	// expand the issue.
	Actions []*Action `protobuf:"bytes,4,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (x *RenderedIssue) Reset() {
	*x = RenderedIssue{}
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RenderedIssue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderedIssue) ProtoMessage() {}

func (x *RenderedIssue) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderedIssue.ProtoReflect.Descriptor instead.
func (*RenderedIssue) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_rawDescGZIP(), []int{5}
}

func (m *RenderedIssue) GetContent() isRenderedIssue_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *RenderedIssue) GetPrerenderedContent() string {
	if x, ok := x.GetContent().(*RenderedIssue_PrerenderedContent); ok {
		return x.PrerenderedContent
	}
	return ""
}

func (m *RenderedIssue) GetOutOfCourtDisputeSettlement() isRenderedIssue_OutOfCourtDisputeSettlement {
	if m != nil {
		return m.OutOfCourtDisputeSettlement
	}
	return nil
}

func (x *RenderedIssue) GetPrerenderedOutOfCourtDisputeSettlement() string {
	if x, ok := x.GetOutOfCourtDisputeSettlement().(*RenderedIssue_PrerenderedOutOfCourtDisputeSettlement); ok {
		return x.PrerenderedOutOfCourtDisputeSettlement
	}
	return ""
}

func (x *RenderedIssue) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *RenderedIssue) GetImpact() *Impact {
	if x != nil {
		return x.Impact
	}
	return nil
}

func (x *RenderedIssue) GetActions() []*Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

type isRenderedIssue_Content interface {
	isRenderedIssue_Content()
}

type RenderedIssue_PrerenderedContent struct {
	// Details of the issue as a pre-rendered HTML. HTML elements contain CSS
	// classes that can be used to customize the style of the content.
	//
	// Always sanitize the HTML before embedding it directly to your
	// application. The sanitizer needs to allow basic HTML tags, such as:
	// `div`, `span`, `p`, `a`, `ul`, `li`, `table`, `tr`, `td`. For example,
	// you can use [DOMPurify](https://www.npmjs.com/package/dompurify).
	//
	// CSS classes:
	//
	// * `issue-detail` - top level container for the detail of the issue
	// * `callout-banners` - section of the `issue-detail` with callout banners
	// * `callout-banner` - single callout banner, inside `callout-banners`
	// * `callout-banner-info` - callout with important information (default)
	// * `callout-banner-warning` - callout with a warning
	// * `callout-banner-error` - callout informing about an error (most severe)
	// * `issue-content` - section of the `issue-detail`, contains multiple
	// `content-element`
	// * `content-element` - content element such as a list, link or paragraph,
	// inside `issue-content`
	// * `root-causes` - unordered list with items describing root causes of the
	// issue, inside `issue-content`
	// * `root-causes-intro` - intro text before the `root-causes` list, inside
	// `issue-content`
	// * `segment` - section of the text, `span` inside paragraph
	// * `segment-attribute` - section of the text that represents a product
	// attribute, for example 'image\_link'
	// * `segment-literal` - section of the text that contains a special value,
	// for example '0-1000 kg'
	// * `segment-bold` - section of the text that should be rendered as bold
	// * `segment-italic` - section of the text that should be rendered as
	// italic
	// * `tooltip` - used on paragraphs that should be rendered with a tooltip.
	// A section of the text in such a paragraph will have a class
	// `tooltip-text` and is intended to be shown in a mouse over dialog. If the
	// style is not used, the `tooltip-text` section would be shown on a new
	// line, after the main part of the text.
	// * `tooltip-text` - marks a section of the text within a `tooltip`, that
	// is intended to be shown in a mouse over dialog.
	// * `tooltip-icon` - marks a section of the text within a `tooltip`, that
	// can be replaced with a tooltip icon, for example '?' or 'i'. By default,
	// this section contains a `br` tag, that is separating the main text and
	// the tooltip text when the style is not used.
	// * `tooltip-style-question` - the tooltip shows helpful information,
	// can use the '?' as an icon.
	// * `tooltip-style-info` - the tooltip adds additional information fitting
	// to the context, can use the 'i' as an icon.
	// * `content-moderation` - marks the paragraph that explains how the issue
	// was identified.
	// * `new-element` - Present for new elements added to the pre-rendered
	// content in the future. To make sure that a new content element does not
	// break your style, you can hide everything with this class.
	PrerenderedContent string `protobuf:"bytes,3,opt,name=prerendered_content,json=prerenderedContent,proto3,oneof"`
}

func (*RenderedIssue_PrerenderedContent) isRenderedIssue_Content() {}

type isRenderedIssue_OutOfCourtDisputeSettlement interface {
	isRenderedIssue_OutOfCourtDisputeSettlement()
}

type RenderedIssue_PrerenderedOutOfCourtDisputeSettlement struct {
	// Pre-rendered HTML that contains a link to the external location where the
	// ODS can be requested and instructions for how to request it. HTML
	// elements contain CSS classes that can be used to customize the style of
	// this snippet.
	//
	// Always sanitize the HTML before embedding it directly to your
	// application. The sanitizer needs to allow basic HTML tags, such as:
	// `div`, `span`, `p`, `a`, `ul`, `li`, `table`, `tr`, `td`. For example,
	// you can use [DOMPurify](https://www.npmjs.com/package/dompurify).
	//
	// CSS classes:
	//
	// * `ods-section`* - wrapper around the out-of-court dispute resolution
	// section
	// * `ods-description`* - intro text for the out-of-court dispute
	// resolution. It may contain multiple segments and a link.
	// * `ods-param`* - wrapper around the header-value pair for parameters that
	// the business may need to provide during the ODS process.
	// * `ods-routing-id`* - ods param for the Routing ID.
	// * `ods-reference-id`* - ods param for the Routing ID.
	// * `ods-param-header`* - header for the ODS parameter
	// * `ods-param-value`* - value of the ODS parameter. This value should be
	// rendered in a way that it is easy for the user to identify and copy.
	// * `segment` - section of the text, `span` inside paragraph
	// * `segment-attribute` - section of the text that represents a product
	// attribute, for example 'image\_link'
	// * `segment-literal` - section of the text that contains a special value,
	// for example '0-1000 kg'
	// * `segment-bold` - section of the text that should be rendered as bold
	// * `segment-italic` - section of the text that should be rendered as
	// italic
	// * `tooltip` - used on paragraphs that should be rendered with a tooltip.
	// A section of the text in such a paragraph will have a class
	// `tooltip-text` and is intended to be shown in a mouse over dialog. If the
	// style is not used, the `tooltip-text` section would be shown on a new
	// line, after the main part of the text.
	// * `tooltip-text` - marks a section of the text within a `tooltip`, that
	// is intended to be shown in a mouse over dialog.
	// * `tooltip-icon` - marks a section of the text within a `tooltip`, that
	// can be replaced with a tooltip icon, for example '?' or 'i'. By default,
	// this section contains a `br` tag, that is separating the main text and
	// the tooltip text when the style is not used.
	// * `tooltip-style-question` - the tooltip shows helpful information,
	// can use the '?' as an icon.
	// * `tooltip-style-info` - the tooltip adds additional information fitting
	// to the context, can use the 'i' as an icon.
	PrerenderedOutOfCourtDisputeSettlement string `protobuf:"bytes,5,opt,name=prerendered_out_of_court_dispute_settlement,json=prerenderedOutOfCourtDisputeSettlement,proto3,oneof"`
}

func (*RenderedIssue_PrerenderedOutOfCourtDisputeSettlement) isRenderedIssue_OutOfCourtDisputeSettlement() {
}

// Overall impact of the issue.
type Impact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Message summarizing the overall impact of the issue. If present,
	// it should be rendered to the business. For example: "Disapproves 90k offers
	// in 25 countries"
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// The severity of the issue.
	Severity Severity `protobuf:"varint,2,opt,name=severity,proto3,enum=google.shopping.merchant.issueresolution.v1beta.Severity" json:"severity,omitempty"`
	// Detailed impact breakdown. Explains the types of restriction the issue has
	// in different shopping destinations and territory. If present, it should be
	// rendered to the business. Can be shown as a mouse over dropdown or a
	// dialog. Each breakdown item represents a group of regions with the same
	// impact details.
	Breakdowns []*Breakdown `protobuf:"bytes,3,rep,name=breakdowns,proto3" json:"breakdowns,omitempty"`
}

func (x *Impact) Reset() {
	*x = Impact{}
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Impact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Impact) ProtoMessage() {}

func (x *Impact) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Impact.ProtoReflect.Descriptor instead.
func (*Impact) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_rawDescGZIP(), []int{6}
}

func (x *Impact) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Impact) GetSeverity() Severity {
	if x != nil {
		return x.Severity
	}
	return Severity_SEVERITY_UNSPECIFIED
}

func (x *Impact) GetBreakdowns() []*Breakdown {
	if x != nil {
		return x.Breakdowns
	}
	return nil
}

// A detailed impact breakdown for a group of regions where the impact of the
// issue on different shopping destinations is the same.
type Breakdown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Lists of regions. Should be rendered as a title for this group of details.
	// The full list should be shown to the business. If the list is too long, it
	// is recommended to make it expandable.
	Regions []*Breakdown_Region `protobuf:"bytes,1,rep,name=regions,proto3" json:"regions,omitempty"`
	// Human readable, localized description of issue's effect on different
	// targets. Should be rendered as a list.
	//
	// For example:
	//
	// * "Products not showing in ads"
	// * "Products not showing organically"
	Details []string `protobuf:"bytes,4,rep,name=details,proto3" json:"details,omitempty"`
}

func (x *Breakdown) Reset() {
	*x = Breakdown{}
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Breakdown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Breakdown) ProtoMessage() {}

func (x *Breakdown) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Breakdown.ProtoReflect.Descriptor instead.
func (*Breakdown) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_rawDescGZIP(), []int{7}
}

func (x *Breakdown) GetRegions() []*Breakdown_Region {
	if x != nil {
		return x.Regions
	}
	return nil
}

func (x *Breakdown) GetDetails() []string {
	if x != nil {
		return x.Details
	}
	return nil
}

// An actionable step that can be executed to solve the issue.
type Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An actionable step that can be executed to solve the issue.
	//
	// Types that are assignable to Action:
	//
	//	*Action_BuiltinSimpleAction
	//	*Action_ExternalAction
	//	*Action_BuiltinUserInputAction
	Action isAction_Action `protobuf_oneof:"action"`
	// Label of the action button.
	ButtonLabel string `protobuf:"bytes,4,opt,name=button_label,json=buttonLabel,proto3" json:"button_label,omitempty"`
	// Controlling whether the button is active or disabled. The value is 'false'
	// when the action was already requested or is not available. If the action is
	// not available then a
	// [reason][google.shopping.merchant.issueresolution.v1beta.Action.reasons]
	// will be present. If (your) third-party application shows a disabled button
	// for action that is not available, then it should also show reasons.
	IsAvailable bool `protobuf:"varint,5,opt,name=is_available,json=isAvailable,proto3" json:"is_available,omitempty"`
	// List of reasons why the action is not available. The list of reasons is
	// empty if the action is available. If there is only one reason, it can be
	// displayed next to the disabled button. If there are more reasons, all of
	// them should be displayed, for example in a pop-up dialog.
	Reasons []*Action_Reason `protobuf:"bytes,6,rep,name=reasons,proto3" json:"reasons,omitempty"`
}

func (x *Action) Reset() {
	*x = Action{}
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action) ProtoMessage() {}

func (x *Action) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action.ProtoReflect.Descriptor instead.
func (*Action) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_rawDescGZIP(), []int{8}
}

func (m *Action) GetAction() isAction_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *Action) GetBuiltinSimpleAction() *BuiltInSimpleAction {
	if x, ok := x.GetAction().(*Action_BuiltinSimpleAction); ok {
		return x.BuiltinSimpleAction
	}
	return nil
}

func (x *Action) GetExternalAction() *ExternalAction {
	if x, ok := x.GetAction().(*Action_ExternalAction); ok {
		return x.ExternalAction
	}
	return nil
}

func (x *Action) GetBuiltinUserInputAction() *BuiltInUserInputAction {
	if x, ok := x.GetAction().(*Action_BuiltinUserInputAction); ok {
		return x.BuiltinUserInputAction
	}
	return nil
}

func (x *Action) GetButtonLabel() string {
	if x != nil {
		return x.ButtonLabel
	}
	return ""
}

func (x *Action) GetIsAvailable() bool {
	if x != nil {
		return x.IsAvailable
	}
	return false
}

func (x *Action) GetReasons() []*Action_Reason {
	if x != nil {
		return x.Reasons
	}
	return nil
}

type isAction_Action interface {
	isAction_Action()
}

type Action_BuiltinSimpleAction struct {
	// Action implemented and performed in (your) third-party application. The
	// application should point the business to the place, where they can access
	// the corresponding functionality or provide instructions, if the specific
	// functionality is not available.
	BuiltinSimpleAction *BuiltInSimpleAction `protobuf:"bytes,2,opt,name=builtin_simple_action,json=builtinSimpleAction,proto3,oneof"`
}

type Action_ExternalAction struct {
	// Action that is implemented and performed outside of (your) third-party
	// application. The application needs to redirect the business to the
	// external location where they can perform the action.
	ExternalAction *ExternalAction `protobuf:"bytes,3,opt,name=external_action,json=externalAction,proto3,oneof"`
}

type Action_BuiltinUserInputAction struct {
	// Action implemented and performed in (your) third-party application.
	// The application needs to show an additional content and input form to the
	// business as specified for given action. They can trigger the action only
	// when they provided all required inputs.
	BuiltinUserInputAction *BuiltInUserInputAction `protobuf:"bytes,7,opt,name=builtin_user_input_action,json=builtinUserInputAction,proto3,oneof"`
}

func (*Action_BuiltinSimpleAction) isAction_Action() {}

func (*Action_ExternalAction) isAction_Action() {}

func (*Action_BuiltinUserInputAction) isAction_Action() {}

// Action that is implemented and performed in (your) third-party application.
// Represents various functionality that is expected to be available to business
// and will help them with resolving the issue. The application should point the
// business to the place, where they can access the corresponding functionality.
// If the functionality is not supported, it is recommended to explain the
// situation to the business and provide them with instructions how to solve the
// issue.
type BuiltInSimpleAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of action that represents a functionality that is expected to be
	// available in third-party application.
	Type BuiltInSimpleAction_BuiltInSimpleActionType `protobuf:"varint,1,opt,name=type,proto3,enum=google.shopping.merchant.issueresolution.v1beta.BuiltInSimpleAction_BuiltInSimpleActionType" json:"type,omitempty"`
	// The attribute that needs to be updated. Present when the
	// [type][google.shopping.merchant.issueresolution.v1beta.BuiltInSimpleAction.type]
	// is `EDIT_ITEM_ATTRIBUTE`.
	//
	// This field contains a code for attribute, represented in snake_case. You
	// can find a list of product's attributes, with their codes
	// [here](https://support.google.com/merchants/answer/7052112).
	AttributeCode *string `protobuf:"bytes,2,opt,name=attribute_code,json=attributeCode,proto3,oneof" json:"attribute_code,omitempty"`
	// Long text from an external source that should be available to the business.
	// Present when the
	// [type][google.shopping.merchant.issueresolution.v1beta.BuiltInSimpleAction.type]
	// is `SHOW_ADDITIONAL_CONTENT`.
	AdditionalContent *BuiltInSimpleAction_AdditionalContent `protobuf:"bytes,3,opt,name=additional_content,json=additionalContent,proto3,oneof" json:"additional_content,omitempty"`
}

func (x *BuiltInSimpleAction) Reset() {
	*x = BuiltInSimpleAction{}
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuiltInSimpleAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuiltInSimpleAction) ProtoMessage() {}

func (x *BuiltInSimpleAction) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuiltInSimpleAction.ProtoReflect.Descriptor instead.
func (*BuiltInSimpleAction) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_rawDescGZIP(), []int{9}
}

func (x *BuiltInSimpleAction) GetType() BuiltInSimpleAction_BuiltInSimpleActionType {
	if x != nil {
		return x.Type
	}
	return BuiltInSimpleAction_BUILT_IN_SIMPLE_ACTION_TYPE_UNSPECIFIED
}

func (x *BuiltInSimpleAction) GetAttributeCode() string {
	if x != nil && x.AttributeCode != nil {
		return *x.AttributeCode
	}
	return ""
}

func (x *BuiltInSimpleAction) GetAdditionalContent() *BuiltInSimpleAction_AdditionalContent {
	if x != nil {
		return x.AdditionalContent
	}
	return nil
}

// Action that is implemented and performed in (your) third-party application.
// The application needs to show an additional content and input form to the
// business. They can start the action only when they provided all required
// inputs. The application will request processing of the action by calling the
// [triggeraction
// method](https://developers.google.com/merchant/api/reference/rest/issueresolution_v1beta/issueresolution/triggeraction).
type BuiltInUserInputAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains the action's context that must be included as part of the
	// [TriggerActionPayload.action_context][google.shopping.merchant.issueresolution.v1beta.TriggerActionPayload.action_context]
	// in
	// [TriggerActionRequest.payload][google.shopping.merchant.issueresolution.v1beta.TriggerActionRequest.payload]
	// to call the `triggeraction` method. The content should be treated as opaque
	// and must not be modified.
	ActionContext string `protobuf:"bytes,1,opt,name=action_context,json=actionContext,proto3" json:"action_context,omitempty"`
	// Actions may provide multiple different flows. Business selects one that
	// fits best to their intent. Selecting the flow is the first step in user's
	// interaction with the action. It affects what input fields will be available
	// and required and also how the request will be processed.
	Flows []*ActionFlow `protobuf:"bytes,3,rep,name=flows,proto3" json:"flows,omitempty"`
}

func (x *BuiltInUserInputAction) Reset() {
	*x = BuiltInUserInputAction{}
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuiltInUserInputAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuiltInUserInputAction) ProtoMessage() {}

func (x *BuiltInUserInputAction) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuiltInUserInputAction.ProtoReflect.Descriptor instead.
func (*BuiltInUserInputAction) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_rawDescGZIP(), []int{10}
}

func (x *BuiltInUserInputAction) GetActionContext() string {
	if x != nil {
		return x.ActionContext
	}
	return ""
}

func (x *BuiltInUserInputAction) GetFlows() []*ActionFlow {
	if x != nil {
		return x.Flows
	}
	return nil
}

// Flow that can be selected for an action. When a business selects a flow,
// application should open a dialog with more information and input form.
type ActionFlow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Not for display but need to be sent back for the selected action flow.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Text value describing the intent for the action flow. It can be used as an
	// input label if business needs to pick one of multiple flows. For example:
	// "I disagree with the issue"
	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	// A list of input fields.
	Inputs []*InputField `protobuf:"bytes,3,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// Title of the request dialog. For example: "Before you request a review"
	DialogTitle string `protobuf:"bytes,4,opt,name=dialog_title,json=dialogTitle,proto3" json:"dialog_title,omitempty"`
	// Message displayed in the request dialog. For example: "Make sure you've
	// fixed all your country-specific issues. If not, you may have to wait 7 days
	// to request another review". There may be an more information to be shown in
	// a tooltip.
	DialogMessage *TextWithTooltip `protobuf:"bytes,7,opt,name=dialog_message,json=dialogMessage,proto3,oneof" json:"dialog_message,omitempty"`
	// Important message to be highlighted in the request dialog. For example:
	// "You can only request a review for disagreeing with this issue once. If
	// it's not approved, you'll need to fix the issue and wait a few days before
	// you can request another review."
	DialogCallout *Callout `protobuf:"bytes,8,opt,name=dialog_callout,json=dialogCallout,proto3,oneof" json:"dialog_callout,omitempty"`
	// Label for the button to trigger the action from the action dialog. For
	// example: "Request review"
	DialogButtonLabel string `protobuf:"bytes,9,opt,name=dialog_button_label,json=dialogButtonLabel,proto3" json:"dialog_button_label,omitempty"`
}

func (x *ActionFlow) Reset() {
	*x = ActionFlow{}
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionFlow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionFlow) ProtoMessage() {}

func (x *ActionFlow) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionFlow.ProtoReflect.Descriptor instead.
func (*ActionFlow) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_rawDescGZIP(), []int{11}
}

func (x *ActionFlow) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ActionFlow) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ActionFlow) GetInputs() []*InputField {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *ActionFlow) GetDialogTitle() string {
	if x != nil {
		return x.DialogTitle
	}
	return ""
}

func (x *ActionFlow) GetDialogMessage() *TextWithTooltip {
	if x != nil {
		return x.DialogMessage
	}
	return nil
}

func (x *ActionFlow) GetDialogCallout() *Callout {
	if x != nil {
		return x.DialogCallout
	}
	return nil
}

func (x *ActionFlow) GetDialogButtonLabel() string {
	if x != nil {
		return x.DialogButtonLabel
	}
	return ""
}

// Input field that needs to be available to the business. If the field is
// marked as required, then a value needs to be provided for a successful
// processing of the request.
type InputField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specific type of the input field.
	//
	// Types that are assignable to ValueInput:
	//
	//	*InputField_TextInput_
	//	*InputField_ChoiceInput_
	//	*InputField_CheckboxInput_
	ValueInput isInputField_ValueInput `protobuf_oneof:"value_input"`
	// Not for display but need to be sent back for the given input field.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Input field label. There may be more information to be shown in a tooltip.
	Label *TextWithTooltip `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	// Whether the field is required. The action button needs to stay disabled
	// till values for all required fields are provided.
	Required bool `protobuf:"varint,3,opt,name=required,proto3" json:"required,omitempty"`
}

func (x *InputField) Reset() {
	*x = InputField{}
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InputField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputField) ProtoMessage() {}

func (x *InputField) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputField.ProtoReflect.Descriptor instead.
func (*InputField) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_rawDescGZIP(), []int{12}
}

func (m *InputField) GetValueInput() isInputField_ValueInput {
	if m != nil {
		return m.ValueInput
	}
	return nil
}

func (x *InputField) GetTextInput() *InputField_TextInput {
	if x, ok := x.GetValueInput().(*InputField_TextInput_); ok {
		return x.TextInput
	}
	return nil
}

func (x *InputField) GetChoiceInput() *InputField_ChoiceInput {
	if x, ok := x.GetValueInput().(*InputField_ChoiceInput_); ok {
		return x.ChoiceInput
	}
	return nil
}

func (x *InputField) GetCheckboxInput() *InputField_CheckboxInput {
	if x, ok := x.GetValueInput().(*InputField_CheckboxInput_); ok {
		return x.CheckboxInput
	}
	return nil
}

func (x *InputField) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InputField) GetLabel() *TextWithTooltip {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *InputField) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

type isInputField_ValueInput interface {
	isInputField_ValueInput()
}

type InputField_TextInput_ struct {
	// Input field to provide text information.
	// Corresponds to the [html input
	// type=text](https://www.w3.org/TR/2012/WD-html-markup-20121025/input.text.html#input.text)
	// or [html
	// textarea](https://www.w3.org/TR/2012/WD-html-markup-20121025/textarea.html#textarea).
	TextInput *InputField_TextInput `protobuf:"bytes,4,opt,name=text_input,json=textInput,proto3,oneof"`
}

type InputField_ChoiceInput_ struct {
	// Input field to select one of the offered choices.
	// Corresponds to the [html input
	// type=radio](https://www.w3.org/TR/2012/WD-html-markup-20121025/input.radio.html#input.radio).
	ChoiceInput *InputField_ChoiceInput `protobuf:"bytes,5,opt,name=choice_input,json=choiceInput,proto3,oneof"`
}

type InputField_CheckboxInput_ struct {
	// Input field to provide a boolean value.
	// Corresponds to the [html input
	// type=checkbox](https://www.w3.org/TR/2012/WD-html-markup-20121025/input.checkbox.html#input.checkbox).
	CheckboxInput *InputField_CheckboxInput `protobuf:"bytes,6,opt,name=checkbox_input,json=checkboxInput,proto3,oneof"`
}

func (*InputField_TextInput_) isInputField_ValueInput() {}

func (*InputField_ChoiceInput_) isInputField_ValueInput() {}

func (*InputField_CheckboxInput_) isInputField_ValueInput() {}

// Block of text that may contain a tooltip with more information.
type TextWithTooltip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value of the text message. The form in which the value is returned is
	// specified with the content option request field.
	//
	// Types that are assignable to Value:
	//
	//	*TextWithTooltip_SimpleValue
	Value isTextWithTooltip_Value `protobuf_oneof:"value"`
	// Text that is meant to be shown in a tooltip for the main message. The
	// tooltip is present when there is additional content needed to be available
	// to the business. The form in which the value is returned is specified with
	// the content option request field.
	//
	// Types that are assignable to TooltipValue:
	//
	//	*TextWithTooltip_SimpleTooltipValue
	TooltipValue isTextWithTooltip_TooltipValue `protobuf_oneof:"tooltip_value"`
	// The suggested type of an icon for tooltip, if a tooltip is present.
	TooltipIconStyle TextWithTooltip_TooltipIconStyle `protobuf:"varint,3,opt,name=tooltip_icon_style,json=tooltipIconStyle,proto3,enum=google.shopping.merchant.issueresolution.v1beta.TextWithTooltip_TooltipIconStyle" json:"tooltip_icon_style,omitempty"`
}

func (x *TextWithTooltip) Reset() {
	*x = TextWithTooltip{}
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TextWithTooltip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextWithTooltip) ProtoMessage() {}

func (x *TextWithTooltip) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextWithTooltip.ProtoReflect.Descriptor instead.
func (*TextWithTooltip) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_rawDescGZIP(), []int{13}
}

func (m *TextWithTooltip) GetValue() isTextWithTooltip_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *TextWithTooltip) GetSimpleValue() string {
	if x, ok := x.GetValue().(*TextWithTooltip_SimpleValue); ok {
		return x.SimpleValue
	}
	return ""
}

func (m *TextWithTooltip) GetTooltipValue() isTextWithTooltip_TooltipValue {
	if m != nil {
		return m.TooltipValue
	}
	return nil
}

func (x *TextWithTooltip) GetSimpleTooltipValue() string {
	if x, ok := x.GetTooltipValue().(*TextWithTooltip_SimpleTooltipValue); ok {
		return x.SimpleTooltipValue
	}
	return ""
}

func (x *TextWithTooltip) GetTooltipIconStyle() TextWithTooltip_TooltipIconStyle {
	if x != nil {
		return x.TooltipIconStyle
	}
	return TextWithTooltip_TOOLTIP_ICON_STYLE_UNSPECIFIED
}

type isTextWithTooltip_Value interface {
	isTextWithTooltip_Value()
}

type TextWithTooltip_SimpleValue struct {
	// Value of the message as a simple text.
	SimpleValue string `protobuf:"bytes,1,opt,name=simple_value,json=simpleValue,proto3,oneof"`
}

func (*TextWithTooltip_SimpleValue) isTextWithTooltip_Value() {}

type isTextWithTooltip_TooltipValue interface {
	isTextWithTooltip_TooltipValue()
}

type TextWithTooltip_SimpleTooltipValue struct {
	// Value of the tooltip as a simple text.
	SimpleTooltipValue string `protobuf:"bytes,2,opt,name=simple_tooltip_value,json=simpleTooltipValue,proto3,oneof"`
}

func (*TextWithTooltip_SimpleTooltipValue) isTextWithTooltip_TooltipValue() {}

// An important message that should be highlighted. Usually displayed as a
// banner.
type Callout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Can be used to render messages with different severity in different styles.
	// Snippets off all types contain important information that should be
	// displayed to the business.
	StyleHint Callout_CalloutStyleHint `protobuf:"varint,1,opt,name=style_hint,json=styleHint,proto3,enum=google.shopping.merchant.issueresolution.v1beta.Callout_CalloutStyleHint" json:"style_hint,omitempty"`
	// A full message that needs to be shown to the business.
	FullMessage *TextWithTooltip `protobuf:"bytes,3,opt,name=full_message,json=fullMessage,proto3" json:"full_message,omitempty"`
}

func (x *Callout) Reset() {
	*x = Callout{}
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Callout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Callout) ProtoMessage() {}

func (x *Callout) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Callout.ProtoReflect.Descriptor instead.
func (*Callout) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_rawDescGZIP(), []int{14}
}

func (x *Callout) GetStyleHint() Callout_CalloutStyleHint {
	if x != nil {
		return x.StyleHint
	}
	return Callout_CALLOUT_STYLE_HINT_UNSPECIFIED
}

func (x *Callout) GetFullMessage() *TextWithTooltip {
	if x != nil {
		return x.FullMessage
	}
	return nil
}

// Action that is implemented and performed outside of the third-party
// application. It should redirect the business to the provided URL of an
// external system where they can perform the action. For example to request a
// review in the Merchant Center.
type ExternalAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of external action.
	Type ExternalAction_ExternalActionType `protobuf:"varint,1,opt,name=type,proto3,enum=google.shopping.merchant.issueresolution.v1beta.ExternalAction_ExternalActionType" json:"type,omitempty"`
	// URL to external system, for example Merchant Center, where the business can
	// perform the action.
	Uri string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (x *ExternalAction) Reset() {
	*x = ExternalAction{}
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExternalAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalAction) ProtoMessage() {}

func (x *ExternalAction) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalAction.ProtoReflect.Descriptor instead.
func (*ExternalAction) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_rawDescGZIP(), []int{15}
}

func (x *ExternalAction) GetType() ExternalAction_ExternalActionType {
	if x != nil {
		return x.Type
	}
	return ExternalAction_EXTERNAL_ACTION_TYPE_UNSPECIFIED
}

func (x *ExternalAction) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

// Request to start the selected action
type TriggerActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The business's account that is triggering the action.
	// Format: `accounts/{account}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Required. The payload for the triggered action.
	Payload *TriggerActionPayload `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	// Optional. Language code [IETF BCP 47
	// syntax](https://tools.ietf.org/html/bcp47) used to localize the response.
	// If not set, the result will be in default language `en-US`.
	LanguageCode string `protobuf:"bytes,3,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"`
}

func (x *TriggerActionRequest) Reset() {
	*x = TriggerActionRequest{}
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TriggerActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerActionRequest) ProtoMessage() {}

func (x *TriggerActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerActionRequest.ProtoReflect.Descriptor instead.
func (*TriggerActionRequest) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_rawDescGZIP(), []int{16}
}

func (x *TriggerActionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TriggerActionRequest) GetPayload() *TriggerActionPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *TriggerActionRequest) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

// The payload for the triggered action.
type TriggerActionPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The
	// [context][google.shopping.merchant.issueresolution.v1beta.BuiltInUserInputAction.action_context]
	// from the selected action. The value is obtained from rendered issues and
	// needs to be sent back to identify the
	// [action][google.shopping.merchant.issueresolution.v1beta.Action.builtin_user_input_action]
	// that is being triggered.
	ActionContext string `protobuf:"bytes,1,opt,name=action_context,json=actionContext,proto3" json:"action_context,omitempty"`
	// Required. Input provided by the business.
	ActionInput *ActionInput `protobuf:"bytes,2,opt,name=action_input,json=actionInput,proto3" json:"action_input,omitempty"`
}

func (x *TriggerActionPayload) Reset() {
	*x = TriggerActionPayload{}
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TriggerActionPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerActionPayload) ProtoMessage() {}

func (x *TriggerActionPayload) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerActionPayload.ProtoReflect.Descriptor instead.
func (*TriggerActionPayload) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_rawDescGZIP(), []int{17}
}

func (x *TriggerActionPayload) GetActionContext() string {
	if x != nil {
		return x.ActionContext
	}
	return ""
}

func (x *TriggerActionPayload) GetActionInput() *ActionInput {
	if x != nil {
		return x.ActionInput
	}
	return nil
}

// Response informing about the started action.
type TriggerActionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The message for the business.
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *TriggerActionResponse) Reset() {
	*x = TriggerActionResponse{}
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TriggerActionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerActionResponse) ProtoMessage() {}

func (x *TriggerActionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerActionResponse.ProtoReflect.Descriptor instead.
func (*TriggerActionResponse) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_rawDescGZIP(), []int{18}
}

func (x *TriggerActionResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Input provided by the business.
type ActionInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	// [Id][google.shopping.merchant.issueresolution.v1beta.ActionFlow.id] of the
	// selected action flow.
	ActionFlowId string `protobuf:"bytes,1,opt,name=action_flow_id,json=actionFlowId,proto3" json:"action_flow_id,omitempty"`
	// Required. Values for input fields.
	InputValues []*InputValue `protobuf:"bytes,2,rep,name=input_values,json=inputValues,proto3" json:"input_values,omitempty"`
}

func (x *ActionInput) Reset() {
	*x = ActionInput{}
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionInput) ProtoMessage() {}

func (x *ActionInput) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionInput.ProtoReflect.Descriptor instead.
func (*ActionInput) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_rawDescGZIP(), []int{19}
}

func (x *ActionInput) GetActionFlowId() string {
	if x != nil {
		return x.ActionFlowId
	}
	return ""
}

func (x *ActionInput) GetInputValues() []*InputValue {
	if x != nil {
		return x.InputValues
	}
	return nil
}

// Input provided by the business for input field.
type InputValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value provided by the business.
	//
	// Types that are assignable to Value:
	//
	//	*InputValue_TextInputValue_
	//	*InputValue_ChoiceInputValue_
	//	*InputValue_CheckboxInputValue_
	Value isInputValue_Value `protobuf_oneof:"value"`
	// Required.
	// [Id][google.shopping.merchant.issueresolution.v1beta.InputField.id] of the
	// corresponding input field.
	InputFieldId string `protobuf:"bytes,1,opt,name=input_field_id,json=inputFieldId,proto3" json:"input_field_id,omitempty"`
}

func (x *InputValue) Reset() {
	*x = InputValue{}
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InputValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputValue) ProtoMessage() {}

func (x *InputValue) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputValue.ProtoReflect.Descriptor instead.
func (*InputValue) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_rawDescGZIP(), []int{20}
}

func (m *InputValue) GetValue() isInputValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *InputValue) GetTextInputValue() *InputValue_TextInputValue {
	if x, ok := x.GetValue().(*InputValue_TextInputValue_); ok {
		return x.TextInputValue
	}
	return nil
}

func (x *InputValue) GetChoiceInputValue() *InputValue_ChoiceInputValue {
	if x, ok := x.GetValue().(*InputValue_ChoiceInputValue_); ok {
		return x.ChoiceInputValue
	}
	return nil
}

func (x *InputValue) GetCheckboxInputValue() *InputValue_CheckboxInputValue {
	if x, ok := x.GetValue().(*InputValue_CheckboxInputValue_); ok {
		return x.CheckboxInputValue
	}
	return nil
}

func (x *InputValue) GetInputFieldId() string {
	if x != nil {
		return x.InputFieldId
	}
	return ""
}

type isInputValue_Value interface {
	isInputValue_Value()
}

type InputValue_TextInputValue_ struct {
	// Value for [text
	// input][google.shopping.merchant.issueresolution.v1beta.InputField.TextInput]
	// field.
	TextInputValue *InputValue_TextInputValue `protobuf:"bytes,2,opt,name=text_input_value,json=textInputValue,proto3,oneof"`
}

type InputValue_ChoiceInputValue_ struct {
	// Value for [choice
	// input][google.shopping.merchant.issueresolution.v1beta.InputField.ChoiceInput]
	// field.
	ChoiceInputValue *InputValue_ChoiceInputValue `protobuf:"bytes,3,opt,name=choice_input_value,json=choiceInputValue,proto3,oneof"`
}

type InputValue_CheckboxInputValue_ struct {
	// Value for [checkbox
	// input][google.shopping.merchant.issueresolution.v1beta.InputField.CheckboxInput]
	// field.
	CheckboxInputValue *InputValue_CheckboxInputValue `protobuf:"bytes,4,opt,name=checkbox_input_value,json=checkboxInputValue,proto3,oneof"`
}

func (*InputValue_TextInputValue_) isInputValue_Value() {}

func (*InputValue_ChoiceInputValue_) isInputValue_Value() {}

func (*InputValue_CheckboxInputValue_) isInputValue_Value() {}

// Region with code and localized name.
type Breakdown_Region struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The [CLDR territory code]
	// (http://www.unicode.org/repos/cldr/tags/latest/common/main/en.xml)
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	// The localized name of the region.
	// For region with code='001' the value is 'All countries' or the equivalent
	// in other languages.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Breakdown_Region) Reset() {
	*x = Breakdown_Region{}
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Breakdown_Region) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Breakdown_Region) ProtoMessage() {}

func (x *Breakdown_Region) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Breakdown_Region.ProtoReflect.Descriptor instead.
func (*Breakdown_Region) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_rawDescGZIP(), []int{7, 0}
}

func (x *Breakdown_Region) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Breakdown_Region) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// A single reason why the action is not available.
type Action_Reason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Messages summarizing the reason, why the action is not available.
	// For example: "Review requested on Jan 03. Review requests can take a few
	// days to complete."
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// Detailed explanation of the reason. Should be displayed as a hint if
	// present.
	Detail *string `protobuf:"bytes,2,opt,name=detail,proto3,oneof" json:"detail,omitempty"`
	// Optional. An action that needs to be performed to solve the problem
	// represented by this reason. This action will always be available. Should
	// be rendered as a link or button next to the summarizing message.
	//
	// For example, the review may be available only once the business configure
	// all required attributes. In such a situation this action can be a link to
	// the form, where they can fill the missing attribute to unblock the main
	// action.
	Action *Action `protobuf:"bytes,3,opt,name=action,proto3,oneof" json:"action,omitempty"`
}

func (x *Action_Reason) Reset() {
	*x = Action_Reason{}
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Action_Reason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action_Reason) ProtoMessage() {}

func (x *Action_Reason) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action_Reason.ProtoReflect.Descriptor instead.
func (*Action_Reason) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_rawDescGZIP(), []int{8, 0}
}

func (x *Action_Reason) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Action_Reason) GetDetail() string {
	if x != nil && x.Detail != nil {
		return *x.Detail
	}
	return ""
}

func (x *Action_Reason) GetAction() *Action {
	if x != nil {
		return x.Action
	}
	return nil
}

// Long text from external source.
type BuiltInSimpleAction_AdditionalContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Title of the additional content;
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// Long text organized into paragraphs.
	Paragraphs []string `protobuf:"bytes,2,rep,name=paragraphs,proto3" json:"paragraphs,omitempty"`
}

func (x *BuiltInSimpleAction_AdditionalContent) Reset() {
	*x = BuiltInSimpleAction_AdditionalContent{}
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuiltInSimpleAction_AdditionalContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuiltInSimpleAction_AdditionalContent) ProtoMessage() {}

func (x *BuiltInSimpleAction_AdditionalContent) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuiltInSimpleAction_AdditionalContent.ProtoReflect.Descriptor instead.
func (*BuiltInSimpleAction_AdditionalContent) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_rawDescGZIP(), []int{9, 0}
}

func (x *BuiltInSimpleAction_AdditionalContent) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *BuiltInSimpleAction_AdditionalContent) GetParagraphs() []string {
	if x != nil {
		return x.Paragraphs
	}
	return nil
}

// Text input allows the business to provide a text value.
type InputField_TextInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of the text input
	Type InputField_TextInput_TextInputType `protobuf:"varint,1,opt,name=type,proto3,enum=google.shopping.merchant.issueresolution.v1beta.InputField_TextInput_TextInputType" json:"type,omitempty"`
	// Additional info regarding the field to be displayed to the business. For
	// example, warning to not include personal identifiable information. There
	// may be more information to be shown in a tooltip.
	AdditionalInfo *TextWithTooltip `protobuf:"bytes,2,opt,name=additional_info,json=additionalInfo,proto3,oneof" json:"additional_info,omitempty"`
	// Information about the required format. If present, it should be shown
	// close to the input field to help the business to provide a correct value.
	// For example: "VAT numbers should be in a format similar to SK9999999999"
	FormatInfo *string `protobuf:"bytes,3,opt,name=format_info,json=formatInfo,proto3,oneof" json:"format_info,omitempty"`
	// Text to be used as the
	// [aria-label](https://www.w3.org/TR/WCAG20-TECHS/ARIA14.html) for the
	// input.
	AriaLabel *string `protobuf:"bytes,4,opt,name=aria_label,json=ariaLabel,proto3,oneof" json:"aria_label,omitempty"`
}

func (x *InputField_TextInput) Reset() {
	*x = InputField_TextInput{}
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InputField_TextInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputField_TextInput) ProtoMessage() {}

func (x *InputField_TextInput) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputField_TextInput.ProtoReflect.Descriptor instead.
func (*InputField_TextInput) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_rawDescGZIP(), []int{12, 0}
}

func (x *InputField_TextInput) GetType() InputField_TextInput_TextInputType {
	if x != nil {
		return x.Type
	}
	return InputField_TextInput_TEXT_INPUT_TYPE_UNSPECIFIED
}

func (x *InputField_TextInput) GetAdditionalInfo() *TextWithTooltip {
	if x != nil {
		return x.AdditionalInfo
	}
	return nil
}

func (x *InputField_TextInput) GetFormatInfo() string {
	if x != nil && x.FormatInfo != nil {
		return *x.FormatInfo
	}
	return ""
}

func (x *InputField_TextInput) GetAriaLabel() string {
	if x != nil && x.AriaLabel != nil {
		return *x.AriaLabel
	}
	return ""
}

// Choice input allows the business to select one of the offered choices. Some
// choices may be linked to additional input fields that should be displayed
// under or next to the choice option. The value for the additional input
// field needs to be provided only when the specific choice is selected by the
// the business. For example, additional input field can be hidden or disabled
// until the business selects the specific choice.
type InputField_ChoiceInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of choices. Only one option can be selected.
	Options []*InputField_ChoiceInput_ChoiceInputOption `protobuf:"bytes,1,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *InputField_ChoiceInput) Reset() {
	*x = InputField_ChoiceInput{}
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InputField_ChoiceInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputField_ChoiceInput) ProtoMessage() {}

func (x *InputField_ChoiceInput) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputField_ChoiceInput.ProtoReflect.Descriptor instead.
func (*InputField_ChoiceInput) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_rawDescGZIP(), []int{12, 1}
}

func (x *InputField_ChoiceInput) GetOptions() []*InputField_ChoiceInput_ChoiceInputOption {
	if x != nil {
		return x.Options
	}
	return nil
}

// Checkbox input allows the business to provide a boolean value. Corresponds
// to the [html input
// type=checkbox](https://www.w3.org/TR/2012/WD-html-markup-20121025/input.checkbox.html#input.checkbox).
//
// If the business checks the box, the input value for the field is `true`,
// otherwise it is `false`.
//
// This type of input is often used as a confirmation that the business
// completed required steps before they are allowed to start the action. In
// such a case, the input field is marked as
// [required][google.shopping.merchant.issueresolution.v1beta.InputField.required]
// and the button to trigger the action should stay disabled until the
// business checks the box.
type InputField_CheckboxInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InputField_CheckboxInput) Reset() {
	*x = InputField_CheckboxInput{}
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InputField_CheckboxInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputField_CheckboxInput) ProtoMessage() {}

func (x *InputField_CheckboxInput) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputField_CheckboxInput.ProtoReflect.Descriptor instead.
func (*InputField_CheckboxInput) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_rawDescGZIP(), []int{12, 2}
}

// A choice that the business can select.
type InputField_ChoiceInput_ChoiceInputOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Not for display but need to be sent back for the selected choice
	// option.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Short description of the choice option. There may be more information
	// to be shown as a tooltip.
	Label *TextWithTooltip `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	// Input that should be displayed when this option is selected.
	// The additional input will not contain a `ChoiceInput`.
	AdditionalInput *InputField `protobuf:"bytes,3,opt,name=additional_input,json=additionalInput,proto3,oneof" json:"additional_input,omitempty"`
}

func (x *InputField_ChoiceInput_ChoiceInputOption) Reset() {
	*x = InputField_ChoiceInput_ChoiceInputOption{}
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InputField_ChoiceInput_ChoiceInputOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputField_ChoiceInput_ChoiceInputOption) ProtoMessage() {}

func (x *InputField_ChoiceInput_ChoiceInputOption) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputField_ChoiceInput_ChoiceInputOption.ProtoReflect.Descriptor instead.
func (*InputField_ChoiceInput_ChoiceInputOption) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_rawDescGZIP(), []int{12, 1, 0}
}

func (x *InputField_ChoiceInput_ChoiceInputOption) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InputField_ChoiceInput_ChoiceInputOption) GetLabel() *TextWithTooltip {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *InputField_ChoiceInput_ChoiceInputOption) GetAdditionalInput() *InputField {
	if x != nil {
		return x.AdditionalInput
	}
	return nil
}

// Value for [text
// input][google.shopping.merchant.issueresolution.v1beta.InputField.TextInput]
// field.
type InputValue_TextInputValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Text provided by the business.
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *InputValue_TextInputValue) Reset() {
	*x = InputValue_TextInputValue{}
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InputValue_TextInputValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputValue_TextInputValue) ProtoMessage() {}

func (x *InputValue_TextInputValue) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputValue_TextInputValue.ProtoReflect.Descriptor instead.
func (*InputValue_TextInputValue) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_rawDescGZIP(), []int{20, 0}
}

func (x *InputValue_TextInputValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Value for [choice
// input][google.shopping.merchant.issueresolution.v1beta.InputField.ChoiceInput]
// field.
type InputValue_ChoiceInputValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. [Id][InputField.ChoiceInput.id] of the option that was selected
	// by the business.
	ChoiceInputOptionId string `protobuf:"bytes,1,opt,name=choice_input_option_id,json=choiceInputOptionId,proto3" json:"choice_input_option_id,omitempty"`
}

func (x *InputValue_ChoiceInputValue) Reset() {
	*x = InputValue_ChoiceInputValue{}
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InputValue_ChoiceInputValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputValue_ChoiceInputValue) ProtoMessage() {}

func (x *InputValue_ChoiceInputValue) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputValue_ChoiceInputValue.ProtoReflect.Descriptor instead.
func (*InputValue_ChoiceInputValue) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_rawDescGZIP(), []int{20, 1}
}

func (x *InputValue_ChoiceInputValue) GetChoiceInputOptionId() string {
	if x != nil {
		return x.ChoiceInputOptionId
	}
	return ""
}

// Value for [checkbox
// input][google.shopping.merchant.issueresolution.v1beta.InputField.CheckboxInput]
// field.
type InputValue_CheckboxInputValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. True if the business checked the box field. False otherwise.
	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *InputValue_CheckboxInputValue) Reset() {
	*x = InputValue_CheckboxInputValue{}
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InputValue_CheckboxInputValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputValue_CheckboxInputValue) ProtoMessage() {}

func (x *InputValue_CheckboxInputValue) ProtoReflect() protoreflect.Message {
	mi := &file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputValue_CheckboxInputValue.ProtoReflect.Descriptor instead.
func (*InputValue_CheckboxInputValue) Descriptor() ([]byte, []int) {
	return file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_rawDescGZIP(), []int{20, 2}
}

func (x *InputValue_CheckboxInputValue) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

var File_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto protoreflect.FileDescriptor

var file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_rawDesc = []byte{
	0x0a, 0x45, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x2f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x86, 0x01, 0x0a, 0x1b,
	0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x0f, 0x72,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68,
	0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x64, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x64, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x73, 0x22, 0x94, 0x02, 0x0a, 0x1a, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2a, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x24, 0x0a, 0x22, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12,
	0x6a, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x4b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xd2, 0x02, 0x0a, 0x1a,
	0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x6f, 0x0a, 0x0e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x92, 0x01, 0x0a, 0x18,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x48, 0x01, 0x52, 0x15, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x86, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x67, 0x0a, 0x0f, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x22, 0x94, 0x02, 0x0a, 0x1a, 0x52, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x24, 0x0a, 0x22,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65,
	0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x6a, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73,
	0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x22, 0x89, 0x03, 0x0a, 0x0d, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x64, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x12, 0x31, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x12, 0x70, 0x72, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x5d, 0x0a, 0x2b, 0x70, 0x72, 0x65, 0x72, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x6f, 0x75, 0x72,
	0x74, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x26, 0x70, 0x72,
	0x65, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x43, 0x6f,
	0x75, 0x72, 0x74, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x69, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x49, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x52, 0x06, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x51, 0x0a, 0x07, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x09,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x21, 0x0a, 0x1f, 0x6f, 0x75, 0x74,
	0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x6f, 0x75, 0x72, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74,
	0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xda, 0x01, 0x0a,
	0x06, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x55, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x5a, 0x0a,
	0x0a, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x2e, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0a, 0x62,
	0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x22, 0xb4, 0x01, 0x0a, 0x09, 0x42, 0x72,
	0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x5b, 0x0a, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x42, 0x72, 0x65, 0x61, 0x6b,
	0x64, 0x6f, 0x77, 0x6e, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0x30,
	0x0a, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xd4, 0x05, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7a, 0x0a, 0x15, 0x62,
	0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x42, 0x75, 0x69,
	0x6c, 0x74, 0x49, 0x6e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x13, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6a, 0x0a, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x84, 0x01, 0x0a, 0x19, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x49,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x16, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x73, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x58, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x52, 0x07, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x1a, 0xb0, 0x01, 0x0a, 0x06, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1b, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x59, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x01, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd4, 0x05, 0x0a, 0x13, 0x42, 0x75, 0x69, 0x6c,
	0x74, 0x49, 0x6e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x70, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x42, 0x75, 0x69, 0x6c, 0x74, 0x49, 0x6e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x49, 0x6e, 0x53, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x2a, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x8a, 0x01,
	0x0a, 0x12, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x42, 0x75, 0x69,
	0x6c, 0x74, 0x49, 0x6e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x48, 0x01, 0x52, 0x11, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x49, 0x0a, 0x11, 0x41, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x73, 0x22, 0x9c, 0x02, 0x0a, 0x17, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x49,
	0x6e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2b, 0x0a, 0x27, 0x42, 0x55, 0x49, 0x4c, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x53, 0x49,
	0x4d, 0x50, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10,
	0x0a, 0x0c, 0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x10, 0x01,
	0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x5f, 0x57, 0x45, 0x42, 0x53, 0x49, 0x54,
	0x45, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x44, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55,
	0x43, 0x54, 0x53, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x44, 0x44, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x41, 0x43, 0x54, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x4c,
	0x49, 0x4e, 0x4b, 0x5f, 0x41, 0x44, 0x53, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10,
	0x05, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x44, 0x44, 0x5f, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53,
	0x53, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e,
	0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x44, 0x49, 0x54, 0x5f,
	0x49, 0x54, 0x45, 0x4d, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x10, 0x07,
	0x12, 0x15, 0x0a, 0x11, 0x46, 0x49, 0x58, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x49, 0x53, 0x53, 0x55, 0x45, 0x10, 0x08, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x48, 0x4f, 0x57, 0x5f,
	0x41, 0x44, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45,
	0x4e, 0x54, 0x10, 0x09, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x92,
	0x01, 0x0a, 0x16, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x51, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x05, 0x66, 0x6c,
	0x6f, 0x77, 0x73, 0x22, 0xd4, 0x03, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c,
	0x6f, 0x77, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x53, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x6c, 0x0a, 0x0e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x57,
	0x69, 0x74, 0x68, 0x54, 0x6f, 0x6f, 0x6c, 0x74, 0x69, 0x70, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x64,
	0x0a, 0x0e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x75, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x6f, 0x75, 0x74,
	0x48, 0x01, 0x52, 0x0d, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x43, 0x61, 0x6c, 0x6c, 0x6f, 0x75,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x62,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x22, 0xc4, 0x0a, 0x0a, 0x0a, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x66, 0x0a, 0x0a, 0x74, 0x65, 0x78,
	0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x09, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x6c, 0x0a, 0x0c, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x48, 0x00, 0x52, 0x0b, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x72, 0x0a, 0x0e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x62, 0x6f, 0x78, 0x5f, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x62, 0x6f, 0x78, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x62, 0x6f, 0x78, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x56, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x57, 0x69, 0x74, 0x68, 0x54, 0x6f, 0x6f,
	0x6c, 0x74, 0x69, 0x70, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x1a, 0xc2, 0x03, 0x0a, 0x09, 0x54, 0x65, 0x78, 0x74,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x67, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x53, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x2e, 0x54, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x6e,
	0x0a, 0x0f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x57, 0x69,
	0x74, 0x68, 0x54, 0x6f, 0x6f, 0x6c, 0x74, 0x69, 0x70, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x72, 0x69, 0x61, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x61, 0x72, 0x69, 0x61,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x22, 0x5f, 0x0a, 0x0d, 0x54, 0x65, 0x78, 0x74,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x45, 0x58,
	0x54, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x45,
	0x4e, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x45, 0x58, 0x54,
	0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x4c, 0x4f,
	0x4e, 0x47, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x02, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x61, 0x72, 0x69, 0x61, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x1a, 0x82, 0x03, 0x0a,
	0x0b, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x73, 0x0a, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x59, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0xfd, 0x01, 0x0a, 0x11, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x56, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x57, 0x69, 0x74,
	0x68, 0x54, 0x6f, 0x6f, 0x6c, 0x74, 0x69, 0x70, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x6b, 0x0a, 0x10, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x1a, 0x0f, 0x0a, 0x0d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x62, 0x6f, 0x78, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x22, 0xd5, 0x02, 0x0a, 0x0f, 0x54, 0x65, 0x78, 0x74, 0x57, 0x69, 0x74, 0x68, 0x54, 0x6f,
	0x6f, 0x6c, 0x74, 0x69, 0x70, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x74, 0x69, 0x70, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x12, 0x73, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x54, 0x6f, 0x6f, 0x6c, 0x74, 0x69, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x7f,
	0x0a, 0x12, 0x74, 0x6f, 0x6f, 0x6c, 0x74, 0x69, 0x70, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x51, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x65, 0x78,
	0x74, 0x57, 0x69, 0x74, 0x68, 0x54, 0x6f, 0x6f, 0x6c, 0x74, 0x69, 0x70, 0x2e, 0x54, 0x6f, 0x6f,
	0x6c, 0x74, 0x69, 0x70, 0x49, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x10, 0x74,
	0x6f, 0x6f, 0x6c, 0x74, 0x69, 0x70, 0x49, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x22,
	0x4e, 0x0a, 0x10, 0x54, 0x6f, 0x6f, 0x6c, 0x74, 0x69, 0x70, 0x49, 0x63, 0x6f, 0x6e, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x4f, 0x4f, 0x4c, 0x54, 0x49, 0x50, 0x5f, 0x49,
	0x43, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x46, 0x4f, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x42,
	0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x74, 0x6f, 0x6f, 0x6c,
	0x74, 0x69, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb2, 0x02, 0x0a, 0x07, 0x43, 0x61,
	0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x12, 0x68, 0x0a, 0x0a, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x68,
	0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x49, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x43, 0x61, 0x6c, 0x6c,
	0x6f, 0x75, 0x74, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x48, 0x69, 0x6e, 0x74, 0x52, 0x09, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x48, 0x69, 0x6e, 0x74, 0x12,
	0x63, 0x0a, 0x0c, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73,
	0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x57, 0x69, 0x74, 0x68,
	0x54, 0x6f, 0x6f, 0x6c, 0x74, 0x69, 0x70, 0x52, 0x0b, 0x66, 0x75, 0x6c, 0x6c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x58, 0x0a, 0x10, 0x43, 0x61, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x41, 0x4c, 0x4c,
	0x4f, 0x55, 0x54, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x48, 0x49, 0x4e, 0x54, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x41, 0x52, 0x4e, 0x49,
	0x4e, 0x47, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x03, 0x22, 0xea,
	0x02, 0x0a, 0x0e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x66, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x52, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x22, 0xdd, 0x01, 0x0a, 0x12,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x45, 0x56, 0x49,
	0x45, 0x57, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45,
	0x5f, 0x49, 0x4e, 0x5f, 0x4d, 0x45, 0x52, 0x43, 0x48, 0x41, 0x4e, 0x54, 0x5f, 0x43, 0x45, 0x4e,
	0x54, 0x45, 0x52, 0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x5f,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x5f, 0x49, 0x4e,
	0x5f, 0x4d, 0x45, 0x52, 0x43, 0x48, 0x41, 0x4e, 0x54, 0x5f, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52,
	0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x4c, 0x45, 0x47, 0x41, 0x4c, 0x5f, 0x41, 0x50, 0x50, 0x45,
	0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x5f, 0x48, 0x45, 0x4c, 0x50, 0x5f, 0x43, 0x45, 0x4e, 0x54, 0x45,
	0x52, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x5f, 0x49, 0x44,
	0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4e, 0x5f, 0x4d, 0x45, 0x52, 0x43, 0x48, 0x41,
	0x4e, 0x54, 0x5f, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x04, 0x22, 0xe6, 0x01, 0x0a, 0x14,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2a, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x24, 0x0a, 0x22, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x64, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73,
	0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x28, 0x0a, 0x0d, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x14, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2a, 0x0a,
	0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x64, 0x0a, 0x0c, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x22,
	0x31, 0x0a, 0x15, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x0b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x29, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x63, 0x0a,
	0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x22, 0xe7, 0x04, 0x0a, 0x0a, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x76, 0x0a, 0x10, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x65, 0x78, 0x74, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x7c, 0x0a, 0x12, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73,
	0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x10, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x14, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x62, 0x6f, 0x78, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x62, 0x6f, 0x78, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x12, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x62,
	0x6f, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x29, 0x0a, 0x0e,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x1a, 0x2b, 0x0a, 0x0e, 0x54, 0x65, 0x78, 0x74, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x1a, 0x4c, 0x0a, 0x10, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x16, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x13, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x1a, 0x2f, 0x0a, 0x12, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x62, 0x6f, 0x78, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2a, 0x46, 0x0a, 0x08,
	0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e,
	0x46, 0x4f, 0x10, 0x03, 0x2a, 0x46, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54,
	0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x4e,
	0x44, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x48, 0x54, 0x4d, 0x4c, 0x10, 0x01, 0x2a, 0x96, 0x01, 0x0a,
	0x1e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x32, 0x0a, 0x2e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4f,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f,
	0x54, 0x4f, 0x5f, 0x4d, 0x45, 0x52, 0x43, 0x48, 0x41, 0x4e, 0x54, 0x5f, 0x43, 0x45, 0x4e, 0x54,
	0x45, 0x52, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x55, 0x49, 0x4c, 0x54, 0x5f, 0x49, 0x4e,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x53, 0x10, 0x02, 0x32, 0xf2, 0x06, 0x0a, 0x16, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x87, 0x02, 0x0a, 0x13, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x12, 0x4b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73,
	0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x55, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x48, 0x3a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x3d, 0x2f, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x12, 0x92, 0x02, 0x0a, 0x13, 0x52,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x73, 0x12, 0x4b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x4c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x60, 0xda,
	0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x53, 0x3a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x48, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x72, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x12,
	0xef, 0x01, 0x0a, 0x0d, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x45, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x46, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x4f, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x42, 0x3a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x37, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x2f, 0x2a, 0x7d, 0x3a, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x47, 0xca, 0x41, 0x1a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x61, 0x70,
	0x69, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0xd2, 0x41, 0x27, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0xd5, 0x03, 0xea, 0x41, 0x38,
	0x0a, 0x22, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x7d, 0xea, 0x41, 0x4b, 0x0a, 0x22, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12,
	0x25, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x7d, 0x0a, 0x33, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x42, 0x14, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x63, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x2f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x3b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0xaa, 0x02, 0x2f, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x31, 0x42, 0x65, 0x74, 0x61, 0xca, 0x02, 0x2f, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x5c, 0x53, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5c, 0x4d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x5c, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0xea, 0x02, 0x33, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a, 0x53, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x3a,
	0x3a, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x3a, 0x3a, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_rawDescOnce sync.Once
	file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_rawDescData = file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_rawDesc
)

func file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_rawDescGZIP() []byte {
	file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_rawDescOnce.Do(func() {
		file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_rawDescData)
	})
	return file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_rawDescData
}

var file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_goTypes = []any{
	(Severity)(0),                                    // 0: google.shopping.merchant.issueresolution.v1beta.Severity
	(ContentOption)(0),                               // 1: google.shopping.merchant.issueresolution.v1beta.ContentOption
	(UserInputActionRenderingOption)(0),              // 2: google.shopping.merchant.issueresolution.v1beta.UserInputActionRenderingOption
	(BuiltInSimpleAction_BuiltInSimpleActionType)(0), // 3: google.shopping.merchant.issueresolution.v1beta.BuiltInSimpleAction.BuiltInSimpleActionType
	(InputField_TextInput_TextInputType)(0),          // 4: google.shopping.merchant.issueresolution.v1beta.InputField.TextInput.TextInputType
	(TextWithTooltip_TooltipIconStyle)(0),            // 5: google.shopping.merchant.issueresolution.v1beta.TextWithTooltip.TooltipIconStyle
	(Callout_CalloutStyleHint)(0),                    // 6: google.shopping.merchant.issueresolution.v1beta.Callout.CalloutStyleHint
	(ExternalAction_ExternalActionType)(0),           // 7: google.shopping.merchant.issueresolution.v1beta.ExternalAction.ExternalActionType
	(*RenderAccountIssuesResponse)(nil),              // 8: google.shopping.merchant.issueresolution.v1beta.RenderAccountIssuesResponse
	(*RenderAccountIssuesRequest)(nil),               // 9: google.shopping.merchant.issueresolution.v1beta.RenderAccountIssuesRequest
	(*RenderIssuesRequestPayload)(nil),               // 10: google.shopping.merchant.issueresolution.v1beta.RenderIssuesRequestPayload
	(*RenderProductIssuesResponse)(nil),              // 11: google.shopping.merchant.issueresolution.v1beta.RenderProductIssuesResponse
	(*RenderProductIssuesRequest)(nil),               // 12: google.shopping.merchant.issueresolution.v1beta.RenderProductIssuesRequest
	(*RenderedIssue)(nil),                            // 13: google.shopping.merchant.issueresolution.v1beta.RenderedIssue
	(*Impact)(nil),                                   // 14: google.shopping.merchant.issueresolution.v1beta.Impact
	(*Breakdown)(nil),                                // 15: google.shopping.merchant.issueresolution.v1beta.Breakdown
	(*Action)(nil),                                   // 16: google.shopping.merchant.issueresolution.v1beta.Action
	(*BuiltInSimpleAction)(nil),                      // 17: google.shopping.merchant.issueresolution.v1beta.BuiltInSimpleAction
	(*BuiltInUserInputAction)(nil),                   // 18: google.shopping.merchant.issueresolution.v1beta.BuiltInUserInputAction
	(*ActionFlow)(nil),                               // 19: google.shopping.merchant.issueresolution.v1beta.ActionFlow
	(*InputField)(nil),                               // 20: google.shopping.merchant.issueresolution.v1beta.InputField
	(*TextWithTooltip)(nil),                          // 21: google.shopping.merchant.issueresolution.v1beta.TextWithTooltip
	(*Callout)(nil),                                  // 22: google.shopping.merchant.issueresolution.v1beta.Callout
	(*ExternalAction)(nil),                           // 23: google.shopping.merchant.issueresolution.v1beta.ExternalAction
	(*TriggerActionRequest)(nil),                     // 24: google.shopping.merchant.issueresolution.v1beta.TriggerActionRequest
	(*TriggerActionPayload)(nil),                     // 25: google.shopping.merchant.issueresolution.v1beta.TriggerActionPayload
	(*TriggerActionResponse)(nil),                    // 26: google.shopping.merchant.issueresolution.v1beta.TriggerActionResponse
	(*ActionInput)(nil),                              // 27: google.shopping.merchant.issueresolution.v1beta.ActionInput
	(*InputValue)(nil),                               // 28: google.shopping.merchant.issueresolution.v1beta.InputValue
	(*Breakdown_Region)(nil),                         // 29: google.shopping.merchant.issueresolution.v1beta.Breakdown.Region
	(*Action_Reason)(nil),                            // 30: google.shopping.merchant.issueresolution.v1beta.Action.Reason
	(*BuiltInSimpleAction_AdditionalContent)(nil),    // 31: google.shopping.merchant.issueresolution.v1beta.BuiltInSimpleAction.AdditionalContent
	(*InputField_TextInput)(nil),                     // 32: google.shopping.merchant.issueresolution.v1beta.InputField.TextInput
	(*InputField_ChoiceInput)(nil),                   // 33: google.shopping.merchant.issueresolution.v1beta.InputField.ChoiceInput
	(*InputField_CheckboxInput)(nil),                 // 34: google.shopping.merchant.issueresolution.v1beta.InputField.CheckboxInput
	(*InputField_ChoiceInput_ChoiceInputOption)(nil), // 35: google.shopping.merchant.issueresolution.v1beta.InputField.ChoiceInput.ChoiceInputOption
	(*InputValue_TextInputValue)(nil),                // 36: google.shopping.merchant.issueresolution.v1beta.InputValue.TextInputValue
	(*InputValue_ChoiceInputValue)(nil),              // 37: google.shopping.merchant.issueresolution.v1beta.InputValue.ChoiceInputValue
	(*InputValue_CheckboxInputValue)(nil),            // 38: google.shopping.merchant.issueresolution.v1beta.InputValue.CheckboxInputValue
}
var file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_depIdxs = []int32{
	13, // 0: google.shopping.merchant.issueresolution.v1beta.RenderAccountIssuesResponse.rendered_issues:type_name -> google.shopping.merchant.issueresolution.v1beta.RenderedIssue
	10, // 1: google.shopping.merchant.issueresolution.v1beta.RenderAccountIssuesRequest.payload:type_name -> google.shopping.merchant.issueresolution.v1beta.RenderIssuesRequestPayload
	1,  // 2: google.shopping.merchant.issueresolution.v1beta.RenderIssuesRequestPayload.content_option:type_name -> google.shopping.merchant.issueresolution.v1beta.ContentOption
	2,  // 3: google.shopping.merchant.issueresolution.v1beta.RenderIssuesRequestPayload.user_input_action_option:type_name -> google.shopping.merchant.issueresolution.v1beta.UserInputActionRenderingOption
	13, // 4: google.shopping.merchant.issueresolution.v1beta.RenderProductIssuesResponse.rendered_issues:type_name -> google.shopping.merchant.issueresolution.v1beta.RenderedIssue
	10, // 5: google.shopping.merchant.issueresolution.v1beta.RenderProductIssuesRequest.payload:type_name -> google.shopping.merchant.issueresolution.v1beta.RenderIssuesRequestPayload
	14, // 6: google.shopping.merchant.issueresolution.v1beta.RenderedIssue.impact:type_name -> google.shopping.merchant.issueresolution.v1beta.Impact
	16, // 7: google.shopping.merchant.issueresolution.v1beta.RenderedIssue.actions:type_name -> google.shopping.merchant.issueresolution.v1beta.Action
	0,  // 8: google.shopping.merchant.issueresolution.v1beta.Impact.severity:type_name -> google.shopping.merchant.issueresolution.v1beta.Severity
	15, // 9: google.shopping.merchant.issueresolution.v1beta.Impact.breakdowns:type_name -> google.shopping.merchant.issueresolution.v1beta.Breakdown
	29, // 10: google.shopping.merchant.issueresolution.v1beta.Breakdown.regions:type_name -> google.shopping.merchant.issueresolution.v1beta.Breakdown.Region
	17, // 11: google.shopping.merchant.issueresolution.v1beta.Action.builtin_simple_action:type_name -> google.shopping.merchant.issueresolution.v1beta.BuiltInSimpleAction
	23, // 12: google.shopping.merchant.issueresolution.v1beta.Action.external_action:type_name -> google.shopping.merchant.issueresolution.v1beta.ExternalAction
	18, // 13: google.shopping.merchant.issueresolution.v1beta.Action.builtin_user_input_action:type_name -> google.shopping.merchant.issueresolution.v1beta.BuiltInUserInputAction
	30, // 14: google.shopping.merchant.issueresolution.v1beta.Action.reasons:type_name -> google.shopping.merchant.issueresolution.v1beta.Action.Reason
	3,  // 15: google.shopping.merchant.issueresolution.v1beta.BuiltInSimpleAction.type:type_name -> google.shopping.merchant.issueresolution.v1beta.BuiltInSimpleAction.BuiltInSimpleActionType
	31, // 16: google.shopping.merchant.issueresolution.v1beta.BuiltInSimpleAction.additional_content:type_name -> google.shopping.merchant.issueresolution.v1beta.BuiltInSimpleAction.AdditionalContent
	19, // 17: google.shopping.merchant.issueresolution.v1beta.BuiltInUserInputAction.flows:type_name -> google.shopping.merchant.issueresolution.v1beta.ActionFlow
	20, // 18: google.shopping.merchant.issueresolution.v1beta.ActionFlow.inputs:type_name -> google.shopping.merchant.issueresolution.v1beta.InputField
	21, // 19: google.shopping.merchant.issueresolution.v1beta.ActionFlow.dialog_message:type_name -> google.shopping.merchant.issueresolution.v1beta.TextWithTooltip
	22, // 20: google.shopping.merchant.issueresolution.v1beta.ActionFlow.dialog_callout:type_name -> google.shopping.merchant.issueresolution.v1beta.Callout
	32, // 21: google.shopping.merchant.issueresolution.v1beta.InputField.text_input:type_name -> google.shopping.merchant.issueresolution.v1beta.InputField.TextInput
	33, // 22: google.shopping.merchant.issueresolution.v1beta.InputField.choice_input:type_name -> google.shopping.merchant.issueresolution.v1beta.InputField.ChoiceInput
	34, // 23: google.shopping.merchant.issueresolution.v1beta.InputField.checkbox_input:type_name -> google.shopping.merchant.issueresolution.v1beta.InputField.CheckboxInput
	21, // 24: google.shopping.merchant.issueresolution.v1beta.InputField.label:type_name -> google.shopping.merchant.issueresolution.v1beta.TextWithTooltip
	5,  // 25: google.shopping.merchant.issueresolution.v1beta.TextWithTooltip.tooltip_icon_style:type_name -> google.shopping.merchant.issueresolution.v1beta.TextWithTooltip.TooltipIconStyle
	6,  // 26: google.shopping.merchant.issueresolution.v1beta.Callout.style_hint:type_name -> google.shopping.merchant.issueresolution.v1beta.Callout.CalloutStyleHint
	21, // 27: google.shopping.merchant.issueresolution.v1beta.Callout.full_message:type_name -> google.shopping.merchant.issueresolution.v1beta.TextWithTooltip
	7,  // 28: google.shopping.merchant.issueresolution.v1beta.ExternalAction.type:type_name -> google.shopping.merchant.issueresolution.v1beta.ExternalAction.ExternalActionType
	25, // 29: google.shopping.merchant.issueresolution.v1beta.TriggerActionRequest.payload:type_name -> google.shopping.merchant.issueresolution.v1beta.TriggerActionPayload
	27, // 30: google.shopping.merchant.issueresolution.v1beta.TriggerActionPayload.action_input:type_name -> google.shopping.merchant.issueresolution.v1beta.ActionInput
	28, // 31: google.shopping.merchant.issueresolution.v1beta.ActionInput.input_values:type_name -> google.shopping.merchant.issueresolution.v1beta.InputValue
	36, // 32: google.shopping.merchant.issueresolution.v1beta.InputValue.text_input_value:type_name -> google.shopping.merchant.issueresolution.v1beta.InputValue.TextInputValue
	37, // 33: google.shopping.merchant.issueresolution.v1beta.InputValue.choice_input_value:type_name -> google.shopping.merchant.issueresolution.v1beta.InputValue.ChoiceInputValue
	38, // 34: google.shopping.merchant.issueresolution.v1beta.InputValue.checkbox_input_value:type_name -> google.shopping.merchant.issueresolution.v1beta.InputValue.CheckboxInputValue
	16, // 35: google.shopping.merchant.issueresolution.v1beta.Action.Reason.action:type_name -> google.shopping.merchant.issueresolution.v1beta.Action
	4,  // 36: google.shopping.merchant.issueresolution.v1beta.InputField.TextInput.type:type_name -> google.shopping.merchant.issueresolution.v1beta.InputField.TextInput.TextInputType
	21, // 37: google.shopping.merchant.issueresolution.v1beta.InputField.TextInput.additional_info:type_name -> google.shopping.merchant.issueresolution.v1beta.TextWithTooltip
	35, // 38: google.shopping.merchant.issueresolution.v1beta.InputField.ChoiceInput.options:type_name -> google.shopping.merchant.issueresolution.v1beta.InputField.ChoiceInput.ChoiceInputOption
	21, // 39: google.shopping.merchant.issueresolution.v1beta.InputField.ChoiceInput.ChoiceInputOption.label:type_name -> google.shopping.merchant.issueresolution.v1beta.TextWithTooltip
	20, // 40: google.shopping.merchant.issueresolution.v1beta.InputField.ChoiceInput.ChoiceInputOption.additional_input:type_name -> google.shopping.merchant.issueresolution.v1beta.InputField
	9,  // 41: google.shopping.merchant.issueresolution.v1beta.IssueResolutionService.RenderAccountIssues:input_type -> google.shopping.merchant.issueresolution.v1beta.RenderAccountIssuesRequest
	12, // 42: google.shopping.merchant.issueresolution.v1beta.IssueResolutionService.RenderProductIssues:input_type -> google.shopping.merchant.issueresolution.v1beta.RenderProductIssuesRequest
	24, // 43: google.shopping.merchant.issueresolution.v1beta.IssueResolutionService.TriggerAction:input_type -> google.shopping.merchant.issueresolution.v1beta.TriggerActionRequest
	8,  // 44: google.shopping.merchant.issueresolution.v1beta.IssueResolutionService.RenderAccountIssues:output_type -> google.shopping.merchant.issueresolution.v1beta.RenderAccountIssuesResponse
	11, // 45: google.shopping.merchant.issueresolution.v1beta.IssueResolutionService.RenderProductIssues:output_type -> google.shopping.merchant.issueresolution.v1beta.RenderProductIssuesResponse
	26, // 46: google.shopping.merchant.issueresolution.v1beta.IssueResolutionService.TriggerAction:output_type -> google.shopping.merchant.issueresolution.v1beta.TriggerActionResponse
	44, // [44:47] is the sub-list for method output_type
	41, // [41:44] is the sub-list for method input_type
	41, // [41:41] is the sub-list for extension type_name
	41, // [41:41] is the sub-list for extension extendee
	0,  // [0:41] is the sub-list for field type_name
}

func init() { file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_init() }
func file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_init() {
	if File_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto != nil {
		return
	}
	file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[2].OneofWrappers = []any{}
	file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[5].OneofWrappers = []any{
		(*RenderedIssue_PrerenderedContent)(nil),
		(*RenderedIssue_PrerenderedOutOfCourtDisputeSettlement)(nil),
	}
	file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[8].OneofWrappers = []any{
		(*Action_BuiltinSimpleAction)(nil),
		(*Action_ExternalAction)(nil),
		(*Action_BuiltinUserInputAction)(nil),
	}
	file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[9].OneofWrappers = []any{}
	file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[11].OneofWrappers = []any{}
	file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[12].OneofWrappers = []any{
		(*InputField_TextInput_)(nil),
		(*InputField_ChoiceInput_)(nil),
		(*InputField_CheckboxInput_)(nil),
	}
	file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[13].OneofWrappers = []any{
		(*TextWithTooltip_SimpleValue)(nil),
		(*TextWithTooltip_SimpleTooltipValue)(nil),
	}
	file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[20].OneofWrappers = []any{
		(*InputValue_TextInputValue_)(nil),
		(*InputValue_ChoiceInputValue_)(nil),
		(*InputValue_CheckboxInputValue_)(nil),
	}
	file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[22].OneofWrappers = []any{}
	file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[24].OneofWrappers = []any{}
	file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes[27].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_goTypes,
		DependencyIndexes: file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_depIdxs,
		EnumInfos:         file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_enumTypes,
		MessageInfos:      file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_msgTypes,
	}.Build()
	File_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto = out.File
	file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_rawDesc = nil
	file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_goTypes = nil
	file_google_shopping_merchant_issueresolution_v1beta_issueresolution_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// IssueResolutionServiceClient is the client API for IssueResolutionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IssueResolutionServiceClient interface {
	// Provide a list of business's account issues with an issue resolution
	// content and available actions. This content and actions are meant to be
	// rendered and shown in third-party applications.
	RenderAccountIssues(ctx context.Context, in *RenderAccountIssuesRequest, opts ...grpc.CallOption) (*RenderAccountIssuesResponse, error)
	// Provide a list of issues for business's product with an issue resolution
	// content and available actions. This content and actions are meant to be
	// rendered and shown in third-party applications.
	RenderProductIssues(ctx context.Context, in *RenderProductIssuesRequest, opts ...grpc.CallOption) (*RenderProductIssuesResponse, error)
	// Start an action. The action can be requested by a business in
	// third-party application. Before the business can request the action, the
	// third-party application needs to show them action specific content and
	// display a user input form.
	//
	// The action can be successfully started only once all `required` inputs are
	// provided. If any `required` input is missing, or invalid value was
	// provided, the service will return 400 error. Validation errors will contain
	// [Ids][google.shopping.merchant.issueresolution.v1beta.InputField.id] for
	// all problematic field together with translated, human readable error
	// messages that can be shown to the user.
	TriggerAction(ctx context.Context, in *TriggerActionRequest, opts ...grpc.CallOption) (*TriggerActionResponse, error)
}

type issueResolutionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIssueResolutionServiceClient(cc grpc.ClientConnInterface) IssueResolutionServiceClient {
	return &issueResolutionServiceClient{cc}
}

func (c *issueResolutionServiceClient) RenderAccountIssues(ctx context.Context, in *RenderAccountIssuesRequest, opts ...grpc.CallOption) (*RenderAccountIssuesResponse, error) {
	out := new(RenderAccountIssuesResponse)
	err := c.cc.Invoke(ctx, "/google.shopping.merchant.issueresolution.v1beta.IssueResolutionService/RenderAccountIssues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueResolutionServiceClient) RenderProductIssues(ctx context.Context, in *RenderProductIssuesRequest, opts ...grpc.CallOption) (*RenderProductIssuesResponse, error) {
	out := new(RenderProductIssuesResponse)
	err := c.cc.Invoke(ctx, "/google.shopping.merchant.issueresolution.v1beta.IssueResolutionService/RenderProductIssues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueResolutionServiceClient) TriggerAction(ctx context.Context, in *TriggerActionRequest, opts ...grpc.CallOption) (*TriggerActionResponse, error) {
	out := new(TriggerActionResponse)
	err := c.cc.Invoke(ctx, "/google.shopping.merchant.issueresolution.v1beta.IssueResolutionService/TriggerAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IssueResolutionServiceServer is the server API for IssueResolutionService service.
type IssueResolutionServiceServer interface {
	// Provide a list of business's account issues with an issue resolution
	// content and available actions. This content and actions are meant to be
	// rendered and shown in third-party applications.
	RenderAccountIssues(context.Context, *RenderAccountIssuesRequest) (*RenderAccountIssuesResponse, error)
	// Provide a list of issues for business's product with an issue resolution
	// content and available actions. This content and actions are meant to be
	// rendered and shown in third-party applications.
	RenderProductIssues(context.Context, *RenderProductIssuesRequest) (*RenderProductIssuesResponse, error)
	// Start an action. The action can be requested by a business in
	// third-party application. Before the business can request the action, the
	// third-party application needs to show them action specific content and
	// display a user input form.
	//
	// The action can be successfully started only once all `required` inputs are
	// provided. If any `required` input is missing, or invalid value was
	// provided, the service will return 400 error. Validation errors will contain
	// [Ids][google.shopping.merchant.issueresolution.v1beta.InputField.id] for
	// all problematic field together with translated, human readable error
	// messages that can be shown to the user.
	TriggerAction(context.Context, *TriggerActionRequest) (*TriggerActionResponse, error)
}

// UnimplementedIssueResolutionServiceServer can be embedded to have forward compatible implementations.
type UnimplementedIssueResolutionServiceServer struct {
}

func (*UnimplementedIssueResolutionServiceServer) RenderAccountIssues(context.Context, *RenderAccountIssuesRequest) (*RenderAccountIssuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderAccountIssues not implemented")
}
func (*UnimplementedIssueResolutionServiceServer) RenderProductIssues(context.Context, *RenderProductIssuesRequest) (*RenderProductIssuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderProductIssues not implemented")
}
func (*UnimplementedIssueResolutionServiceServer) TriggerAction(context.Context, *TriggerActionRequest) (*TriggerActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerAction not implemented")
}

func RegisterIssueResolutionServiceServer(s *grpc.Server, srv IssueResolutionServiceServer) {
	s.RegisterService(&_IssueResolutionService_serviceDesc, srv)
}

func _IssueResolutionService_RenderAccountIssues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderAccountIssuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueResolutionServiceServer).RenderAccountIssues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.shopping.merchant.issueresolution.v1beta.IssueResolutionService/RenderAccountIssues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueResolutionServiceServer).RenderAccountIssues(ctx, req.(*RenderAccountIssuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueResolutionService_RenderProductIssues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderProductIssuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueResolutionServiceServer).RenderProductIssues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.shopping.merchant.issueresolution.v1beta.IssueResolutionService/RenderProductIssues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueResolutionServiceServer).RenderProductIssues(ctx, req.(*RenderProductIssuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueResolutionService_TriggerAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueResolutionServiceServer).TriggerAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.shopping.merchant.issueresolution.v1beta.IssueResolutionService/TriggerAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueResolutionServiceServer).TriggerAction(ctx, req.(*TriggerActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IssueResolutionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.shopping.merchant.issueresolution.v1beta.IssueResolutionService",
	HandlerType: (*IssueResolutionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RenderAccountIssues",
			Handler:    _IssueResolutionService_RenderAccountIssues_Handler,
		},
		{
			MethodName: "RenderProductIssues",
			Handler:    _IssueResolutionService_RenderProductIssues_Handler,
		},
		{
			MethodName: "TriggerAction",
			Handler:    _IssueResolutionService_TriggerAction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/shopping/merchant/issueresolution/v1beta/issueresolution.proto",
}
