// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/shopping/css/v1/accounts.proto

package csspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AccountsService_ListChildAccounts_FullMethodName = "/google.shopping.css.v1.AccountsService/ListChildAccounts"
	AccountsService_GetAccount_FullMethodName        = "/google.shopping.css.v1.AccountsService/GetAccount"
	AccountsService_UpdateLabels_FullMethodName      = "/google.shopping.css.v1.AccountsService/UpdateLabels"
)

// AccountsServiceClient is the client API for AccountsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountsServiceClient interface {
	// Lists all the accounts under the specified CSS account ID, and
	// optionally filters by label ID and account name.
	ListChildAccounts(ctx context.Context, in *ListChildAccountsRequest, opts ...grpc.CallOption) (*ListChildAccountsResponse, error)
	// Retrieves a single CSS/MC account by ID.
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*Account, error)
	// Updates labels assigned to CSS/MC accounts by a CSS domain.
	UpdateLabels(ctx context.Context, in *UpdateAccountLabelsRequest, opts ...grpc.CallOption) (*Account, error)
}

type accountsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountsServiceClient(cc grpc.ClientConnInterface) AccountsServiceClient {
	return &accountsServiceClient{cc}
}

func (c *accountsServiceClient) ListChildAccounts(ctx context.Context, in *ListChildAccountsRequest, opts ...grpc.CallOption) (*ListChildAccountsResponse, error) {
	out := new(ListChildAccountsResponse)
	err := c.cc.Invoke(ctx, AccountsService_ListChildAccounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsServiceClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, AccountsService_GetAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsServiceClient) UpdateLabels(ctx context.Context, in *UpdateAccountLabelsRequest, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, AccountsService_UpdateLabels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountsServiceServer is the server API for AccountsService service.
// All implementations should embed UnimplementedAccountsServiceServer
// for forward compatibility
type AccountsServiceServer interface {
	// Lists all the accounts under the specified CSS account ID, and
	// optionally filters by label ID and account name.
	ListChildAccounts(context.Context, *ListChildAccountsRequest) (*ListChildAccountsResponse, error)
	// Retrieves a single CSS/MC account by ID.
	GetAccount(context.Context, *GetAccountRequest) (*Account, error)
	// Updates labels assigned to CSS/MC accounts by a CSS domain.
	UpdateLabels(context.Context, *UpdateAccountLabelsRequest) (*Account, error)
}

// UnimplementedAccountsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAccountsServiceServer struct {
}

func (UnimplementedAccountsServiceServer) ListChildAccounts(context.Context, *ListChildAccountsRequest) (*ListChildAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChildAccounts not implemented")
}
func (UnimplementedAccountsServiceServer) GetAccount(context.Context, *GetAccountRequest) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedAccountsServiceServer) UpdateLabels(context.Context, *UpdateAccountLabelsRequest) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLabels not implemented")
}

// UnsafeAccountsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountsServiceServer will
// result in compilation errors.
type UnsafeAccountsServiceServer interface {
	mustEmbedUnimplementedAccountsServiceServer()
}

func RegisterAccountsServiceServer(s grpc.ServiceRegistrar, srv AccountsServiceServer) {
	s.RegisterService(&AccountsService_ServiceDesc, srv)
}

func _AccountsService_ListChildAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChildAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServiceServer).ListChildAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountsService_ListChildAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServiceServer).ListChildAccounts(ctx, req.(*ListChildAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountsService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountsService_GetAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServiceServer).GetAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountsService_UpdateLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServiceServer).UpdateLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountsService_UpdateLabels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServiceServer).UpdateLabels(ctx, req.(*UpdateAccountLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountsService_ServiceDesc is the grpc.ServiceDesc for AccountsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.shopping.css.v1.AccountsService",
	HandlerType: (*AccountsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListChildAccounts",
			Handler:    _AccountsService_ListChildAccounts_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _AccountsService_GetAccount_Handler,
		},
		{
			MethodName: "UpdateLabels",
			Handler:    _AccountsService_UpdateLabels_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/shopping/css/v1/accounts.proto",
}
