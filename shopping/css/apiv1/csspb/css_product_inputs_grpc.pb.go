// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/shopping/css/v1/css_product_inputs.proto

package csspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CssProductInputsService_InsertCssProductInput_FullMethodName = "/google.shopping.css.v1.CssProductInputsService/InsertCssProductInput"
	CssProductInputsService_UpdateCssProductInput_FullMethodName = "/google.shopping.css.v1.CssProductInputsService/UpdateCssProductInput"
	CssProductInputsService_DeleteCssProductInput_FullMethodName = "/google.shopping.css.v1.CssProductInputsService/DeleteCssProductInput"
)

// CssProductInputsServiceClient is the client API for CssProductInputsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CssProductInputsServiceClient interface {
	// Uploads a CssProductInput to your CSS Center account. If an
	// input with the same contentLanguage, identity, feedLabel and feedId already
	// exists, this method replaces that entry.
	//
	// After inserting, updating, or deleting a CSS Product input, it may
	// take several minutes before the processed CSS Product can be retrieved.
	InsertCssProductInput(ctx context.Context, in *InsertCssProductInputRequest, opts ...grpc.CallOption) (*CssProductInput, error)
	// Updates the existing Css Product input in your CSS Center account.
	//
	// After inserting, updating, or deleting a CSS Product input, it may take
	// several minutes before the processed Css Product can be retrieved.
	UpdateCssProductInput(ctx context.Context, in *UpdateCssProductInputRequest, opts ...grpc.CallOption) (*CssProductInput, error)
	// Deletes a CSS Product input from your CSS Center account.
	//
	// After a delete it may take several minutes until the input is no longer
	// available.
	DeleteCssProductInput(ctx context.Context, in *DeleteCssProductInputRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type cssProductInputsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCssProductInputsServiceClient(cc grpc.ClientConnInterface) CssProductInputsServiceClient {
	return &cssProductInputsServiceClient{cc}
}

func (c *cssProductInputsServiceClient) InsertCssProductInput(ctx context.Context, in *InsertCssProductInputRequest, opts ...grpc.CallOption) (*CssProductInput, error) {
	out := new(CssProductInput)
	err := c.cc.Invoke(ctx, CssProductInputsService_InsertCssProductInput_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cssProductInputsServiceClient) UpdateCssProductInput(ctx context.Context, in *UpdateCssProductInputRequest, opts ...grpc.CallOption) (*CssProductInput, error) {
	out := new(CssProductInput)
	err := c.cc.Invoke(ctx, CssProductInputsService_UpdateCssProductInput_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cssProductInputsServiceClient) DeleteCssProductInput(ctx context.Context, in *DeleteCssProductInputRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CssProductInputsService_DeleteCssProductInput_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CssProductInputsServiceServer is the server API for CssProductInputsService service.
// All implementations should embed UnimplementedCssProductInputsServiceServer
// for forward compatibility
type CssProductInputsServiceServer interface {
	// Uploads a CssProductInput to your CSS Center account. If an
	// input with the same contentLanguage, identity, feedLabel and feedId already
	// exists, this method replaces that entry.
	//
	// After inserting, updating, or deleting a CSS Product input, it may
	// take several minutes before the processed CSS Product can be retrieved.
	InsertCssProductInput(context.Context, *InsertCssProductInputRequest) (*CssProductInput, error)
	// Updates the existing Css Product input in your CSS Center account.
	//
	// After inserting, updating, or deleting a CSS Product input, it may take
	// several minutes before the processed Css Product can be retrieved.
	UpdateCssProductInput(context.Context, *UpdateCssProductInputRequest) (*CssProductInput, error)
	// Deletes a CSS Product input from your CSS Center account.
	//
	// After a delete it may take several minutes until the input is no longer
	// available.
	DeleteCssProductInput(context.Context, *DeleteCssProductInputRequest) (*emptypb.Empty, error)
}

// UnimplementedCssProductInputsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCssProductInputsServiceServer struct {
}

func (UnimplementedCssProductInputsServiceServer) InsertCssProductInput(context.Context, *InsertCssProductInputRequest) (*CssProductInput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertCssProductInput not implemented")
}
func (UnimplementedCssProductInputsServiceServer) UpdateCssProductInput(context.Context, *UpdateCssProductInputRequest) (*CssProductInput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCssProductInput not implemented")
}
func (UnimplementedCssProductInputsServiceServer) DeleteCssProductInput(context.Context, *DeleteCssProductInputRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCssProductInput not implemented")
}

// UnsafeCssProductInputsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CssProductInputsServiceServer will
// result in compilation errors.
type UnsafeCssProductInputsServiceServer interface {
	mustEmbedUnimplementedCssProductInputsServiceServer()
}

func RegisterCssProductInputsServiceServer(s grpc.ServiceRegistrar, srv CssProductInputsServiceServer) {
	s.RegisterService(&CssProductInputsService_ServiceDesc, srv)
}

func _CssProductInputsService_InsertCssProductInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertCssProductInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CssProductInputsServiceServer).InsertCssProductInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CssProductInputsService_InsertCssProductInput_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CssProductInputsServiceServer).InsertCssProductInput(ctx, req.(*InsertCssProductInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CssProductInputsService_UpdateCssProductInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCssProductInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CssProductInputsServiceServer).UpdateCssProductInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CssProductInputsService_UpdateCssProductInput_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CssProductInputsServiceServer).UpdateCssProductInput(ctx, req.(*UpdateCssProductInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CssProductInputsService_DeleteCssProductInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCssProductInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CssProductInputsServiceServer).DeleteCssProductInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CssProductInputsService_DeleteCssProductInput_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CssProductInputsServiceServer).DeleteCssProductInput(ctx, req.(*DeleteCssProductInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CssProductInputsService_ServiceDesc is the grpc.ServiceDesc for CssProductInputsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CssProductInputsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.shopping.css.v1.CssProductInputsService",
	HandlerType: (*CssProductInputsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertCssProductInput",
			Handler:    _CssProductInputsService_InsertCssProductInput_Handler,
		},
		{
			MethodName: "UpdateCssProductInput",
			Handler:    _CssProductInputsService_UpdateCssProductInput_Handler,
		},
		{
			MethodName: "DeleteCssProductInput",
			Handler:    _CssProductInputsService_DeleteCssProductInput_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/shopping/css/v1/css_product_inputs.proto",
}
