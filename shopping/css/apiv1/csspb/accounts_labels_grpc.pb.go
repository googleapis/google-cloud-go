// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/shopping/css/v1/accounts_labels.proto

package csspb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AccountLabelsService_ListAccountLabels_FullMethodName  = "/google.shopping.css.v1.AccountLabelsService/ListAccountLabels"
	AccountLabelsService_CreateAccountLabel_FullMethodName = "/google.shopping.css.v1.AccountLabelsService/CreateAccountLabel"
	AccountLabelsService_UpdateAccountLabel_FullMethodName = "/google.shopping.css.v1.AccountLabelsService/UpdateAccountLabel"
	AccountLabelsService_DeleteAccountLabel_FullMethodName = "/google.shopping.css.v1.AccountLabelsService/DeleteAccountLabel"
)

// AccountLabelsServiceClient is the client API for AccountLabelsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountLabelsServiceClient interface {
	// Lists the labels owned by an account.
	ListAccountLabels(ctx context.Context, in *ListAccountLabelsRequest, opts ...grpc.CallOption) (*ListAccountLabelsResponse, error)
	// Creates a new label, not assigned to any account.
	CreateAccountLabel(ctx context.Context, in *CreateAccountLabelRequest, opts ...grpc.CallOption) (*AccountLabel, error)
	// Updates a label.
	UpdateAccountLabel(ctx context.Context, in *UpdateAccountLabelRequest, opts ...grpc.CallOption) (*AccountLabel, error)
	// Deletes a label and removes it from all accounts to which it was assigned.
	DeleteAccountLabel(ctx context.Context, in *DeleteAccountLabelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type accountLabelsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountLabelsServiceClient(cc grpc.ClientConnInterface) AccountLabelsServiceClient {
	return &accountLabelsServiceClient{cc}
}

func (c *accountLabelsServiceClient) ListAccountLabels(ctx context.Context, in *ListAccountLabelsRequest, opts ...grpc.CallOption) (*ListAccountLabelsResponse, error) {
	out := new(ListAccountLabelsResponse)
	err := c.cc.Invoke(ctx, AccountLabelsService_ListAccountLabels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountLabelsServiceClient) CreateAccountLabel(ctx context.Context, in *CreateAccountLabelRequest, opts ...grpc.CallOption) (*AccountLabel, error) {
	out := new(AccountLabel)
	err := c.cc.Invoke(ctx, AccountLabelsService_CreateAccountLabel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountLabelsServiceClient) UpdateAccountLabel(ctx context.Context, in *UpdateAccountLabelRequest, opts ...grpc.CallOption) (*AccountLabel, error) {
	out := new(AccountLabel)
	err := c.cc.Invoke(ctx, AccountLabelsService_UpdateAccountLabel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountLabelsServiceClient) DeleteAccountLabel(ctx context.Context, in *DeleteAccountLabelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AccountLabelsService_DeleteAccountLabel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountLabelsServiceServer is the server API for AccountLabelsService service.
// All implementations should embed UnimplementedAccountLabelsServiceServer
// for forward compatibility
type AccountLabelsServiceServer interface {
	// Lists the labels owned by an account.
	ListAccountLabels(context.Context, *ListAccountLabelsRequest) (*ListAccountLabelsResponse, error)
	// Creates a new label, not assigned to any account.
	CreateAccountLabel(context.Context, *CreateAccountLabelRequest) (*AccountLabel, error)
	// Updates a label.
	UpdateAccountLabel(context.Context, *UpdateAccountLabelRequest) (*AccountLabel, error)
	// Deletes a label and removes it from all accounts to which it was assigned.
	DeleteAccountLabel(context.Context, *DeleteAccountLabelRequest) (*emptypb.Empty, error)
}

// UnimplementedAccountLabelsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAccountLabelsServiceServer struct {
}

func (UnimplementedAccountLabelsServiceServer) ListAccountLabels(context.Context, *ListAccountLabelsRequest) (*ListAccountLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccountLabels not implemented")
}
func (UnimplementedAccountLabelsServiceServer) CreateAccountLabel(context.Context, *CreateAccountLabelRequest) (*AccountLabel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccountLabel not implemented")
}
func (UnimplementedAccountLabelsServiceServer) UpdateAccountLabel(context.Context, *UpdateAccountLabelRequest) (*AccountLabel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccountLabel not implemented")
}
func (UnimplementedAccountLabelsServiceServer) DeleteAccountLabel(context.Context, *DeleteAccountLabelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccountLabel not implemented")
}

// UnsafeAccountLabelsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountLabelsServiceServer will
// result in compilation errors.
type UnsafeAccountLabelsServiceServer interface {
	mustEmbedUnimplementedAccountLabelsServiceServer()
}

func RegisterAccountLabelsServiceServer(s grpc.ServiceRegistrar, srv AccountLabelsServiceServer) {
	s.RegisterService(&AccountLabelsService_ServiceDesc, srv)
}

func _AccountLabelsService_ListAccountLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccountLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountLabelsServiceServer).ListAccountLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountLabelsService_ListAccountLabels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountLabelsServiceServer).ListAccountLabels(ctx, req.(*ListAccountLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountLabelsService_CreateAccountLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountLabelsServiceServer).CreateAccountLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountLabelsService_CreateAccountLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountLabelsServiceServer).CreateAccountLabel(ctx, req.(*CreateAccountLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountLabelsService_UpdateAccountLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountLabelsServiceServer).UpdateAccountLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountLabelsService_UpdateAccountLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountLabelsServiceServer).UpdateAccountLabel(ctx, req.(*UpdateAccountLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountLabelsService_DeleteAccountLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountLabelsServiceServer).DeleteAccountLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountLabelsService_DeleteAccountLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountLabelsServiceServer).DeleteAccountLabel(ctx, req.(*DeleteAccountLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountLabelsService_ServiceDesc is the grpc.ServiceDesc for AccountLabelsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountLabelsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.shopping.css.v1.AccountLabelsService",
	HandlerType: (*AccountLabelsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAccountLabels",
			Handler:    _AccountLabelsService_ListAccountLabels_Handler,
		},
		{
			MethodName: "CreateAccountLabel",
			Handler:    _AccountLabelsService_CreateAccountLabel_Handler,
		},
		{
			MethodName: "UpdateAccountLabel",
			Handler:    _AccountLabelsService_UpdateAccountLabel_Handler,
		},
		{
			MethodName: "DeleteAccountLabel",
			Handler:    _AccountLabelsService_DeleteAccountLabel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/shopping/css/v1/accounts_labels.proto",
}
