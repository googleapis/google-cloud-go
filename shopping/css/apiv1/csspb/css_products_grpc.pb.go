// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/shopping/css/v1/css_products.proto

package csspb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CssProductsService_GetCssProduct_FullMethodName   = "/google.shopping.css.v1.CssProductsService/GetCssProduct"
	CssProductsService_ListCssProducts_FullMethodName = "/google.shopping.css.v1.CssProductsService/ListCssProducts"
)

// CssProductsServiceClient is the client API for CssProductsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CssProductsServiceClient interface {
	// Retrieves the processed CSS Product from your CSS Center account. After
	// inserting, updating, or deleting a product input, it may take several
	// minutes before the updated final product can be retrieved.
	GetCssProduct(ctx context.Context, in *GetCssProductRequest, opts ...grpc.CallOption) (*CssProduct, error)
	// Lists the processed CSS Products in your CSS Center account. The response
	// might contain fewer items than specified by pageSize. Rely on pageToken to
	// determine if there are more items to be requested.
	//
	// After inserting, updating, or deleting a CSS product input, it may
	// take several minutes before the updated processed CSS product can be
	// retrieved.
	ListCssProducts(ctx context.Context, in *ListCssProductsRequest, opts ...grpc.CallOption) (*ListCssProductsResponse, error)
}

type cssProductsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCssProductsServiceClient(cc grpc.ClientConnInterface) CssProductsServiceClient {
	return &cssProductsServiceClient{cc}
}

func (c *cssProductsServiceClient) GetCssProduct(ctx context.Context, in *GetCssProductRequest, opts ...grpc.CallOption) (*CssProduct, error) {
	out := new(CssProduct)
	err := c.cc.Invoke(ctx, CssProductsService_GetCssProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cssProductsServiceClient) ListCssProducts(ctx context.Context, in *ListCssProductsRequest, opts ...grpc.CallOption) (*ListCssProductsResponse, error) {
	out := new(ListCssProductsResponse)
	err := c.cc.Invoke(ctx, CssProductsService_ListCssProducts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CssProductsServiceServer is the server API for CssProductsService service.
// All implementations should embed UnimplementedCssProductsServiceServer
// for forward compatibility
type CssProductsServiceServer interface {
	// Retrieves the processed CSS Product from your CSS Center account. After
	// inserting, updating, or deleting a product input, it may take several
	// minutes before the updated final product can be retrieved.
	GetCssProduct(context.Context, *GetCssProductRequest) (*CssProduct, error)
	// Lists the processed CSS Products in your CSS Center account. The response
	// might contain fewer items than specified by pageSize. Rely on pageToken to
	// determine if there are more items to be requested.
	//
	// After inserting, updating, or deleting a CSS product input, it may
	// take several minutes before the updated processed CSS product can be
	// retrieved.
	ListCssProducts(context.Context, *ListCssProductsRequest) (*ListCssProductsResponse, error)
}

// UnimplementedCssProductsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCssProductsServiceServer struct {
}

func (UnimplementedCssProductsServiceServer) GetCssProduct(context.Context, *GetCssProductRequest) (*CssProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCssProduct not implemented")
}
func (UnimplementedCssProductsServiceServer) ListCssProducts(context.Context, *ListCssProductsRequest) (*ListCssProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCssProducts not implemented")
}

// UnsafeCssProductsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CssProductsServiceServer will
// result in compilation errors.
type UnsafeCssProductsServiceServer interface {
	mustEmbedUnimplementedCssProductsServiceServer()
}

func RegisterCssProductsServiceServer(s grpc.ServiceRegistrar, srv CssProductsServiceServer) {
	s.RegisterService(&CssProductsService_ServiceDesc, srv)
}

func _CssProductsService_GetCssProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCssProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CssProductsServiceServer).GetCssProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CssProductsService_GetCssProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CssProductsServiceServer).GetCssProduct(ctx, req.(*GetCssProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CssProductsService_ListCssProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCssProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CssProductsServiceServer).ListCssProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CssProductsService_ListCssProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CssProductsServiceServer).ListCssProducts(ctx, req.(*ListCssProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CssProductsService_ServiceDesc is the grpc.ServiceDesc for CssProductsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CssProductsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.shopping.css.v1.CssProductsService",
	HandlerType: (*CssProductsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCssProduct",
			Handler:    _CssProductsService_GetCssProduct_Handler,
		},
		{
			MethodName: "ListCssProducts",
			Handler:    _CssProductsService_ListCssProducts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/shopping/css/v1/css_products.proto",
}
