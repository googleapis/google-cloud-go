// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/maintenance/api/v1beta/maintenance_service.proto

package apipb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Maintenance_SummarizeMaintenances_FullMethodName    = "/google.cloud.maintenance.api.v1beta.Maintenance/SummarizeMaintenances"
	Maintenance_ListResourceMaintenances_FullMethodName = "/google.cloud.maintenance.api.v1beta.Maintenance/ListResourceMaintenances"
	Maintenance_GetResourceMaintenance_FullMethodName   = "/google.cloud.maintenance.api.v1beta.Maintenance/GetResourceMaintenance"
)

// MaintenanceClient is the client API for Maintenance service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MaintenanceClient interface {
	// Retrieves the statistics of a specific maintenance.
	SummarizeMaintenances(ctx context.Context, in *SummarizeMaintenancesRequest, opts ...grpc.CallOption) (*SummarizeMaintenancesResponse, error)
	// Retrieve a collection of resource maintenances.
	ListResourceMaintenances(ctx context.Context, in *ListResourceMaintenancesRequest, opts ...grpc.CallOption) (*ListResourceMaintenancesResponse, error)
	// Retrieve a single resource maintenance.
	GetResourceMaintenance(ctx context.Context, in *GetResourceMaintenanceRequest, opts ...grpc.CallOption) (*ResourceMaintenance, error)
}

type maintenanceClient struct {
	cc grpc.ClientConnInterface
}

func NewMaintenanceClient(cc grpc.ClientConnInterface) MaintenanceClient {
	return &maintenanceClient{cc}
}

func (c *maintenanceClient) SummarizeMaintenances(ctx context.Context, in *SummarizeMaintenancesRequest, opts ...grpc.CallOption) (*SummarizeMaintenancesResponse, error) {
	out := new(SummarizeMaintenancesResponse)
	err := c.cc.Invoke(ctx, Maintenance_SummarizeMaintenances_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maintenanceClient) ListResourceMaintenances(ctx context.Context, in *ListResourceMaintenancesRequest, opts ...grpc.CallOption) (*ListResourceMaintenancesResponse, error) {
	out := new(ListResourceMaintenancesResponse)
	err := c.cc.Invoke(ctx, Maintenance_ListResourceMaintenances_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maintenanceClient) GetResourceMaintenance(ctx context.Context, in *GetResourceMaintenanceRequest, opts ...grpc.CallOption) (*ResourceMaintenance, error) {
	out := new(ResourceMaintenance)
	err := c.cc.Invoke(ctx, Maintenance_GetResourceMaintenance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MaintenanceServer is the server API for Maintenance service.
// All implementations should embed UnimplementedMaintenanceServer
// for forward compatibility
type MaintenanceServer interface {
	// Retrieves the statistics of a specific maintenance.
	SummarizeMaintenances(context.Context, *SummarizeMaintenancesRequest) (*SummarizeMaintenancesResponse, error)
	// Retrieve a collection of resource maintenances.
	ListResourceMaintenances(context.Context, *ListResourceMaintenancesRequest) (*ListResourceMaintenancesResponse, error)
	// Retrieve a single resource maintenance.
	GetResourceMaintenance(context.Context, *GetResourceMaintenanceRequest) (*ResourceMaintenance, error)
}

// UnimplementedMaintenanceServer should be embedded to have forward compatible implementations.
type UnimplementedMaintenanceServer struct {
}

func (UnimplementedMaintenanceServer) SummarizeMaintenances(context.Context, *SummarizeMaintenancesRequest) (*SummarizeMaintenancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SummarizeMaintenances not implemented")
}
func (UnimplementedMaintenanceServer) ListResourceMaintenances(context.Context, *ListResourceMaintenancesRequest) (*ListResourceMaintenancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResourceMaintenances not implemented")
}
func (UnimplementedMaintenanceServer) GetResourceMaintenance(context.Context, *GetResourceMaintenanceRequest) (*ResourceMaintenance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceMaintenance not implemented")
}

// UnsafeMaintenanceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MaintenanceServer will
// result in compilation errors.
type UnsafeMaintenanceServer interface {
	mustEmbedUnimplementedMaintenanceServer()
}

func RegisterMaintenanceServer(s grpc.ServiceRegistrar, srv MaintenanceServer) {
	s.RegisterService(&Maintenance_ServiceDesc, srv)
}

func _Maintenance_SummarizeMaintenances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SummarizeMaintenancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaintenanceServer).SummarizeMaintenances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Maintenance_SummarizeMaintenances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaintenanceServer).SummarizeMaintenances(ctx, req.(*SummarizeMaintenancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Maintenance_ListResourceMaintenances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResourceMaintenancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaintenanceServer).ListResourceMaintenances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Maintenance_ListResourceMaintenances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaintenanceServer).ListResourceMaintenances(ctx, req.(*ListResourceMaintenancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Maintenance_GetResourceMaintenance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceMaintenanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaintenanceServer).GetResourceMaintenance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Maintenance_GetResourceMaintenance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaintenanceServer).GetResourceMaintenance(ctx, req.(*GetResourceMaintenanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Maintenance_ServiceDesc is the grpc.ServiceDesc for Maintenance service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Maintenance_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.maintenance.api.v1beta.Maintenance",
	HandlerType: (*MaintenanceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SummarizeMaintenances",
			Handler:    _Maintenance_SummarizeMaintenances_Handler,
		},
		{
			MethodName: "ListResourceMaintenances",
			Handler:    _Maintenance_ListResourceMaintenances_Handler,
		},
		{
			MethodName: "GetResourceMaintenance",
			Handler:    _Maintenance_GetResourceMaintenance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/maintenance/api/v1beta/maintenance_service.proto",
}
