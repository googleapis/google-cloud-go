// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/support/v2/case_service.proto

package supportpb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CaseService_GetCase_FullMethodName                   = "/google.cloud.support.v2.CaseService/GetCase"
	CaseService_ListCases_FullMethodName                 = "/google.cloud.support.v2.CaseService/ListCases"
	CaseService_SearchCases_FullMethodName               = "/google.cloud.support.v2.CaseService/SearchCases"
	CaseService_CreateCase_FullMethodName                = "/google.cloud.support.v2.CaseService/CreateCase"
	CaseService_UpdateCase_FullMethodName                = "/google.cloud.support.v2.CaseService/UpdateCase"
	CaseService_EscalateCase_FullMethodName              = "/google.cloud.support.v2.CaseService/EscalateCase"
	CaseService_CloseCase_FullMethodName                 = "/google.cloud.support.v2.CaseService/CloseCase"
	CaseService_SearchCaseClassifications_FullMethodName = "/google.cloud.support.v2.CaseService/SearchCaseClassifications"
)

// CaseServiceClient is the client API for CaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CaseServiceClient interface {
	// Retrieve a case.
	GetCase(ctx context.Context, in *GetCaseRequest, opts ...grpc.CallOption) (*Case, error)
	// Retrieve all cases under a parent, but not its children.
	//
	// For example, listing cases under an organization only returns the cases
	// that are directly parented by that organization. To retrieve cases
	// under an organization and its projects, use `cases.search`.
	ListCases(ctx context.Context, in *ListCasesRequest, opts ...grpc.CallOption) (*ListCasesResponse, error)
	// Search for cases using a query.
	SearchCases(ctx context.Context, in *SearchCasesRequest, opts ...grpc.CallOption) (*SearchCasesResponse, error)
	// Create a new case and associate it with a parent.
	//
	// It must have the following fields set: `display_name`, `description`,
	// `classification`, and `priority`. If you're just testing the API and don't
	// want to route your case to an agent, set `testCase=true`.
	CreateCase(ctx context.Context, in *CreateCaseRequest, opts ...grpc.CallOption) (*Case, error)
	// Update a case. Only some fields can be updated.
	UpdateCase(ctx context.Context, in *UpdateCaseRequest, opts ...grpc.CallOption) (*Case, error)
	// Escalate a case, starting the Google Cloud Support escalation management
	// process.
	//
	// This operation is only available for some support services. Go to
	// https://cloud.google.com/support and look for 'Technical support
	// escalations' in the feature list to find out which ones let you
	// do that.
	EscalateCase(ctx context.Context, in *EscalateCaseRequest, opts ...grpc.CallOption) (*Case, error)
	// Close a case.
	CloseCase(ctx context.Context, in *CloseCaseRequest, opts ...grpc.CallOption) (*Case, error)
	// Retrieve valid classifications to use when creating a support case.
	//
	// Classifications are hierarchical. Each classification is a string
	// containing all levels of the hierarchy separated by `" > "`. For example,
	// `"Technical Issue > Compute > Compute Engine"`.
	//
	// Classification IDs returned by this endpoint are valid for at least six
	// months. When a classification is deactivated, this endpoint immediately
	// stops returning it. After six months, `case.create` requests using the
	// classification will fail.
	SearchCaseClassifications(ctx context.Context, in *SearchCaseClassificationsRequest, opts ...grpc.CallOption) (*SearchCaseClassificationsResponse, error)
}

type caseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCaseServiceClient(cc grpc.ClientConnInterface) CaseServiceClient {
	return &caseServiceClient{cc}
}

func (c *caseServiceClient) GetCase(ctx context.Context, in *GetCaseRequest, opts ...grpc.CallOption) (*Case, error) {
	out := new(Case)
	err := c.cc.Invoke(ctx, CaseService_GetCase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *caseServiceClient) ListCases(ctx context.Context, in *ListCasesRequest, opts ...grpc.CallOption) (*ListCasesResponse, error) {
	out := new(ListCasesResponse)
	err := c.cc.Invoke(ctx, CaseService_ListCases_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *caseServiceClient) SearchCases(ctx context.Context, in *SearchCasesRequest, opts ...grpc.CallOption) (*SearchCasesResponse, error) {
	out := new(SearchCasesResponse)
	err := c.cc.Invoke(ctx, CaseService_SearchCases_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *caseServiceClient) CreateCase(ctx context.Context, in *CreateCaseRequest, opts ...grpc.CallOption) (*Case, error) {
	out := new(Case)
	err := c.cc.Invoke(ctx, CaseService_CreateCase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *caseServiceClient) UpdateCase(ctx context.Context, in *UpdateCaseRequest, opts ...grpc.CallOption) (*Case, error) {
	out := new(Case)
	err := c.cc.Invoke(ctx, CaseService_UpdateCase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *caseServiceClient) EscalateCase(ctx context.Context, in *EscalateCaseRequest, opts ...grpc.CallOption) (*Case, error) {
	out := new(Case)
	err := c.cc.Invoke(ctx, CaseService_EscalateCase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *caseServiceClient) CloseCase(ctx context.Context, in *CloseCaseRequest, opts ...grpc.CallOption) (*Case, error) {
	out := new(Case)
	err := c.cc.Invoke(ctx, CaseService_CloseCase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *caseServiceClient) SearchCaseClassifications(ctx context.Context, in *SearchCaseClassificationsRequest, opts ...grpc.CallOption) (*SearchCaseClassificationsResponse, error) {
	out := new(SearchCaseClassificationsResponse)
	err := c.cc.Invoke(ctx, CaseService_SearchCaseClassifications_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CaseServiceServer is the server API for CaseService service.
// All implementations should embed UnimplementedCaseServiceServer
// for forward compatibility
type CaseServiceServer interface {
	// Retrieve a case.
	GetCase(context.Context, *GetCaseRequest) (*Case, error)
	// Retrieve all cases under a parent, but not its children.
	//
	// For example, listing cases under an organization only returns the cases
	// that are directly parented by that organization. To retrieve cases
	// under an organization and its projects, use `cases.search`.
	ListCases(context.Context, *ListCasesRequest) (*ListCasesResponse, error)
	// Search for cases using a query.
	SearchCases(context.Context, *SearchCasesRequest) (*SearchCasesResponse, error)
	// Create a new case and associate it with a parent.
	//
	// It must have the following fields set: `display_name`, `description`,
	// `classification`, and `priority`. If you're just testing the API and don't
	// want to route your case to an agent, set `testCase=true`.
	CreateCase(context.Context, *CreateCaseRequest) (*Case, error)
	// Update a case. Only some fields can be updated.
	UpdateCase(context.Context, *UpdateCaseRequest) (*Case, error)
	// Escalate a case, starting the Google Cloud Support escalation management
	// process.
	//
	// This operation is only available for some support services. Go to
	// https://cloud.google.com/support and look for 'Technical support
	// escalations' in the feature list to find out which ones let you
	// do that.
	EscalateCase(context.Context, *EscalateCaseRequest) (*Case, error)
	// Close a case.
	CloseCase(context.Context, *CloseCaseRequest) (*Case, error)
	// Retrieve valid classifications to use when creating a support case.
	//
	// Classifications are hierarchical. Each classification is a string
	// containing all levels of the hierarchy separated by `" > "`. For example,
	// `"Technical Issue > Compute > Compute Engine"`.
	//
	// Classification IDs returned by this endpoint are valid for at least six
	// months. When a classification is deactivated, this endpoint immediately
	// stops returning it. After six months, `case.create` requests using the
	// classification will fail.
	SearchCaseClassifications(context.Context, *SearchCaseClassificationsRequest) (*SearchCaseClassificationsResponse, error)
}

// UnimplementedCaseServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCaseServiceServer struct {
}

func (UnimplementedCaseServiceServer) GetCase(context.Context, *GetCaseRequest) (*Case, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCase not implemented")
}
func (UnimplementedCaseServiceServer) ListCases(context.Context, *ListCasesRequest) (*ListCasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCases not implemented")
}
func (UnimplementedCaseServiceServer) SearchCases(context.Context, *SearchCasesRequest) (*SearchCasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchCases not implemented")
}
func (UnimplementedCaseServiceServer) CreateCase(context.Context, *CreateCaseRequest) (*Case, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCase not implemented")
}
func (UnimplementedCaseServiceServer) UpdateCase(context.Context, *UpdateCaseRequest) (*Case, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCase not implemented")
}
func (UnimplementedCaseServiceServer) EscalateCase(context.Context, *EscalateCaseRequest) (*Case, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EscalateCase not implemented")
}
func (UnimplementedCaseServiceServer) CloseCase(context.Context, *CloseCaseRequest) (*Case, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseCase not implemented")
}
func (UnimplementedCaseServiceServer) SearchCaseClassifications(context.Context, *SearchCaseClassificationsRequest) (*SearchCaseClassificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchCaseClassifications not implemented")
}

// UnsafeCaseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CaseServiceServer will
// result in compilation errors.
type UnsafeCaseServiceServer interface {
	mustEmbedUnimplementedCaseServiceServer()
}

func RegisterCaseServiceServer(s grpc.ServiceRegistrar, srv CaseServiceServer) {
	s.RegisterService(&CaseService_ServiceDesc, srv)
}

func _CaseService_GetCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaseServiceServer).GetCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaseService_GetCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaseServiceServer).GetCase(ctx, req.(*GetCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaseService_ListCases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaseServiceServer).ListCases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaseService_ListCases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaseServiceServer).ListCases(ctx, req.(*ListCasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaseService_SearchCases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchCasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaseServiceServer).SearchCases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaseService_SearchCases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaseServiceServer).SearchCases(ctx, req.(*SearchCasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaseService_CreateCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaseServiceServer).CreateCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaseService_CreateCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaseServiceServer).CreateCase(ctx, req.(*CreateCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaseService_UpdateCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaseServiceServer).UpdateCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaseService_UpdateCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaseServiceServer).UpdateCase(ctx, req.(*UpdateCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaseService_EscalateCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EscalateCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaseServiceServer).EscalateCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaseService_EscalateCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaseServiceServer).EscalateCase(ctx, req.(*EscalateCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaseService_CloseCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaseServiceServer).CloseCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaseService_CloseCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaseServiceServer).CloseCase(ctx, req.(*CloseCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaseService_SearchCaseClassifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchCaseClassificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaseServiceServer).SearchCaseClassifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaseService_SearchCaseClassifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaseServiceServer).SearchCaseClassifications(ctx, req.(*SearchCaseClassificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CaseService_ServiceDesc is the grpc.ServiceDesc for CaseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CaseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.support.v2.CaseService",
	HandlerType: (*CaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCase",
			Handler:    _CaseService_GetCase_Handler,
		},
		{
			MethodName: "ListCases",
			Handler:    _CaseService_ListCases_Handler,
		},
		{
			MethodName: "SearchCases",
			Handler:    _CaseService_SearchCases_Handler,
		},
		{
			MethodName: "CreateCase",
			Handler:    _CaseService_CreateCase_Handler,
		},
		{
			MethodName: "UpdateCase",
			Handler:    _CaseService_UpdateCase_Handler,
		},
		{
			MethodName: "EscalateCase",
			Handler:    _CaseService_EscalateCase_Handler,
		},
		{
			MethodName: "CloseCase",
			Handler:    _CaseService_CloseCase_Handler,
		},
		{
			MethodName: "SearchCaseClassifications",
			Handler:    _CaseService_SearchCaseClassifications_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/support/v2/case_service.proto",
}
