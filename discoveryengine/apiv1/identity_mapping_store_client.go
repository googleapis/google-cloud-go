// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package discoveryengine

import (
	"bytes"
	"context"
	"fmt"
	"log/slog"
	"math"
	"net/http"
	"net/url"
	"time"

	discoveryenginepb "cloud.google.com/go/discoveryengine/apiv1/discoveryenginepb"
	"cloud.google.com/go/longrunning"
	lroauto "cloud.google.com/go/longrunning/autogen"
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	gax "github.com/googleapis/gax-go/v2"
	"google.golang.org/api/iterator"
	"google.golang.org/api/option"
	"google.golang.org/api/option/internaloption"
	gtransport "google.golang.org/api/transport/grpc"
	httptransport "google.golang.org/api/transport/http"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
)

var newIdentityMappingStoreClientHook clientHook

// IdentityMappingStoreCallOptions contains the retry settings for each method of IdentityMappingStoreClient.
type IdentityMappingStoreCallOptions struct {
	CreateIdentityMappingStore []gax.CallOption
	GetIdentityMappingStore    []gax.CallOption
	DeleteIdentityMappingStore []gax.CallOption
	ImportIdentityMappings     []gax.CallOption
	PurgeIdentityMappings      []gax.CallOption
	ListIdentityMappings       []gax.CallOption
	ListIdentityMappingStores  []gax.CallOption
	CancelOperation            []gax.CallOption
	GetOperation               []gax.CallOption
	ListOperations             []gax.CallOption
}

func defaultIdentityMappingStoreGRPCClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("discoveryengine.googleapis.com:443"),
		internaloption.WithDefaultEndpointTemplate("discoveryengine.UNIVERSE_DOMAIN:443"),
		internaloption.WithDefaultMTLSEndpoint("discoveryengine.mtls.googleapis.com:443"),
		internaloption.WithDefaultUniverseDomain("googleapis.com"),
		internaloption.WithDefaultAudience("https://discoveryengine.googleapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableJwtWithScope(),
		internaloption.EnableNewAuthLibrary(),
		option.WithGRPCDialOption(grpc.WithDefaultCallOptions(
			grpc.MaxCallRecvMsgSize(math.MaxInt32))),
	}
}

func defaultIdentityMappingStoreCallOptions() *IdentityMappingStoreCallOptions {
	return &IdentityMappingStoreCallOptions{
		CreateIdentityMappingStore: []gax.CallOption{},
		GetIdentityMappingStore:    []gax.CallOption{},
		DeleteIdentityMappingStore: []gax.CallOption{},
		ImportIdentityMappings:     []gax.CallOption{},
		PurgeIdentityMappings:      []gax.CallOption{},
		ListIdentityMappings:       []gax.CallOption{},
		ListIdentityMappingStores:  []gax.CallOption{},
		CancelOperation: []gax.CallOption{
			gax.WithTimeout(30000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		GetOperation: []gax.CallOption{
			gax.WithTimeout(30000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		ListOperations: []gax.CallOption{
			gax.WithTimeout(300000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        30000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
	}
}

func defaultIdentityMappingStoreRESTCallOptions() *IdentityMappingStoreCallOptions {
	return &IdentityMappingStoreCallOptions{
		CreateIdentityMappingStore: []gax.CallOption{},
		GetIdentityMappingStore:    []gax.CallOption{},
		DeleteIdentityMappingStore: []gax.CallOption{},
		ImportIdentityMappings:     []gax.CallOption{},
		PurgeIdentityMappings:      []gax.CallOption{},
		ListIdentityMappings:       []gax.CallOption{},
		ListIdentityMappingStores:  []gax.CallOption{},
		CancelOperation: []gax.CallOption{
			gax.WithTimeout(30000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnHTTPCodes(gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				},
					http.StatusServiceUnavailable)
			}),
		},
		GetOperation: []gax.CallOption{
			gax.WithTimeout(30000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnHTTPCodes(gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				},
					http.StatusServiceUnavailable)
			}),
		},
		ListOperations: []gax.CallOption{
			gax.WithTimeout(300000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnHTTPCodes(gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        30000 * time.Millisecond,
					Multiplier: 1.30,
				},
					http.StatusServiceUnavailable)
			}),
		},
	}
}

// internalIdentityMappingStoreClient is an interface that defines the methods available from Discovery Engine API.
type internalIdentityMappingStoreClient interface {
	Close() error
	setGoogleClientInfo(...string)
	Connection() *grpc.ClientConn
	CreateIdentityMappingStore(context.Context, *discoveryenginepb.CreateIdentityMappingStoreRequest, ...gax.CallOption) (*discoveryenginepb.IdentityMappingStore, error)
	GetIdentityMappingStore(context.Context, *discoveryenginepb.GetIdentityMappingStoreRequest, ...gax.CallOption) (*discoveryenginepb.IdentityMappingStore, error)
	DeleteIdentityMappingStore(context.Context, *discoveryenginepb.DeleteIdentityMappingStoreRequest, ...gax.CallOption) (*DeleteIdentityMappingStoreOperation, error)
	DeleteIdentityMappingStoreOperation(name string) *DeleteIdentityMappingStoreOperation
	ImportIdentityMappings(context.Context, *discoveryenginepb.ImportIdentityMappingsRequest, ...gax.CallOption) (*ImportIdentityMappingsOperation, error)
	ImportIdentityMappingsOperation(name string) *ImportIdentityMappingsOperation
	PurgeIdentityMappings(context.Context, *discoveryenginepb.PurgeIdentityMappingsRequest, ...gax.CallOption) (*PurgeIdentityMappingsOperation, error)
	PurgeIdentityMappingsOperation(name string) *PurgeIdentityMappingsOperation
	ListIdentityMappings(context.Context, *discoveryenginepb.ListIdentityMappingsRequest, ...gax.CallOption) *IdentityMappingEntryIterator
	ListIdentityMappingStores(context.Context, *discoveryenginepb.ListIdentityMappingStoresRequest, ...gax.CallOption) *IdentityMappingStoreIterator
	CancelOperation(context.Context, *longrunningpb.CancelOperationRequest, ...gax.CallOption) error
	GetOperation(context.Context, *longrunningpb.GetOperationRequest, ...gax.CallOption) (*longrunningpb.Operation, error)
	ListOperations(context.Context, *longrunningpb.ListOperationsRequest, ...gax.CallOption) *OperationIterator
}

// IdentityMappingStoreClient is a client for interacting with Discovery Engine API.
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
//
// Service for managing Identity Mapping Stores.
type IdentityMappingStoreClient struct {
	// The internal transport-dependent client.
	internalClient internalIdentityMappingStoreClient

	// The call options for this service.
	CallOptions *IdentityMappingStoreCallOptions

	// LROClient is used internally to handle long-running operations.
	// It is exposed so that its CallOptions can be modified if required.
	// Users should not Close this client.
	LROClient *lroauto.OperationsClient
}

// Wrapper methods routed to the internal client.

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *IdentityMappingStoreClient) Close() error {
	return c.internalClient.Close()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *IdentityMappingStoreClient) setGoogleClientInfo(keyval ...string) {
	c.internalClient.setGoogleClientInfo(keyval...)
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *IdentityMappingStoreClient) Connection() *grpc.ClientConn {
	return c.internalClient.Connection()
}

// CreateIdentityMappingStore creates a new Identity Mapping Store.
func (c *IdentityMappingStoreClient) CreateIdentityMappingStore(ctx context.Context, req *discoveryenginepb.CreateIdentityMappingStoreRequest, opts ...gax.CallOption) (*discoveryenginepb.IdentityMappingStore, error) {
	return c.internalClient.CreateIdentityMappingStore(ctx, req, opts...)
}

// GetIdentityMappingStore gets the Identity Mapping Store.
func (c *IdentityMappingStoreClient) GetIdentityMappingStore(ctx context.Context, req *discoveryenginepb.GetIdentityMappingStoreRequest, opts ...gax.CallOption) (*discoveryenginepb.IdentityMappingStore, error) {
	return c.internalClient.GetIdentityMappingStore(ctx, req, opts...)
}

// DeleteIdentityMappingStore deletes the Identity Mapping Store.
func (c *IdentityMappingStoreClient) DeleteIdentityMappingStore(ctx context.Context, req *discoveryenginepb.DeleteIdentityMappingStoreRequest, opts ...gax.CallOption) (*DeleteIdentityMappingStoreOperation, error) {
	return c.internalClient.DeleteIdentityMappingStore(ctx, req, opts...)
}

// DeleteIdentityMappingStoreOperation returns a new DeleteIdentityMappingStoreOperation from a given name.
// The name must be that of a previously created DeleteIdentityMappingStoreOperation, possibly from a different process.
func (c *IdentityMappingStoreClient) DeleteIdentityMappingStoreOperation(name string) *DeleteIdentityMappingStoreOperation {
	return c.internalClient.DeleteIdentityMappingStoreOperation(name)
}

// ImportIdentityMappings imports a list of Identity Mapping Entries to an Identity Mapping Store.
func (c *IdentityMappingStoreClient) ImportIdentityMappings(ctx context.Context, req *discoveryenginepb.ImportIdentityMappingsRequest, opts ...gax.CallOption) (*ImportIdentityMappingsOperation, error) {
	return c.internalClient.ImportIdentityMappings(ctx, req, opts...)
}

// ImportIdentityMappingsOperation returns a new ImportIdentityMappingsOperation from a given name.
// The name must be that of a previously created ImportIdentityMappingsOperation, possibly from a different process.
func (c *IdentityMappingStoreClient) ImportIdentityMappingsOperation(name string) *ImportIdentityMappingsOperation {
	return c.internalClient.ImportIdentityMappingsOperation(name)
}

// PurgeIdentityMappings purges specified or all Identity Mapping Entries from an Identity Mapping
// Store.
func (c *IdentityMappingStoreClient) PurgeIdentityMappings(ctx context.Context, req *discoveryenginepb.PurgeIdentityMappingsRequest, opts ...gax.CallOption) (*PurgeIdentityMappingsOperation, error) {
	return c.internalClient.PurgeIdentityMappings(ctx, req, opts...)
}

// PurgeIdentityMappingsOperation returns a new PurgeIdentityMappingsOperation from a given name.
// The name must be that of a previously created PurgeIdentityMappingsOperation, possibly from a different process.
func (c *IdentityMappingStoreClient) PurgeIdentityMappingsOperation(name string) *PurgeIdentityMappingsOperation {
	return c.internalClient.PurgeIdentityMappingsOperation(name)
}

// ListIdentityMappings lists Identity Mappings in an Identity Mapping Store.
func (c *IdentityMappingStoreClient) ListIdentityMappings(ctx context.Context, req *discoveryenginepb.ListIdentityMappingsRequest, opts ...gax.CallOption) *IdentityMappingEntryIterator {
	return c.internalClient.ListIdentityMappings(ctx, req, opts...)
}

// ListIdentityMappingStores lists all Identity Mapping Stores.
func (c *IdentityMappingStoreClient) ListIdentityMappingStores(ctx context.Context, req *discoveryenginepb.ListIdentityMappingStoresRequest, opts ...gax.CallOption) *IdentityMappingStoreIterator {
	return c.internalClient.ListIdentityMappingStores(ctx, req, opts...)
}

// CancelOperation is a utility method from google.longrunning.Operations.
func (c *IdentityMappingStoreClient) CancelOperation(ctx context.Context, req *longrunningpb.CancelOperationRequest, opts ...gax.CallOption) error {
	return c.internalClient.CancelOperation(ctx, req, opts...)
}

// GetOperation is a utility method from google.longrunning.Operations.
func (c *IdentityMappingStoreClient) GetOperation(ctx context.Context, req *longrunningpb.GetOperationRequest, opts ...gax.CallOption) (*longrunningpb.Operation, error) {
	return c.internalClient.GetOperation(ctx, req, opts...)
}

// ListOperations is a utility method from google.longrunning.Operations.
func (c *IdentityMappingStoreClient) ListOperations(ctx context.Context, req *longrunningpb.ListOperationsRequest, opts ...gax.CallOption) *OperationIterator {
	return c.internalClient.ListOperations(ctx, req, opts...)
}

// identityMappingStoreGRPCClient is a client for interacting with Discovery Engine API over gRPC transport.
//
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type identityMappingStoreGRPCClient struct {
	// Connection pool of gRPC connections to the service.
	connPool gtransport.ConnPool

	// Points back to the CallOptions field of the containing IdentityMappingStoreClient
	CallOptions **IdentityMappingStoreCallOptions

	// The gRPC API client.
	identityMappingStoreClient discoveryenginepb.IdentityMappingStoreServiceClient

	// LROClient is used internally to handle long-running operations.
	// It is exposed so that its CallOptions can be modified if required.
	// Users should not Close this client.
	LROClient **lroauto.OperationsClient

	operationsClient longrunningpb.OperationsClient

	// The x-goog-* metadata to be sent with each request.
	xGoogHeaders []string

	logger *slog.Logger
}

// NewIdentityMappingStoreClient creates a new identity mapping store service client based on gRPC.
// The returned client must be Closed when it is done being used to clean up its underlying connections.
//
// Service for managing Identity Mapping Stores.
func NewIdentityMappingStoreClient(ctx context.Context, opts ...option.ClientOption) (*IdentityMappingStoreClient, error) {
	clientOpts := defaultIdentityMappingStoreGRPCClientOptions()
	if newIdentityMappingStoreClientHook != nil {
		hookOpts, err := newIdentityMappingStoreClientHook(ctx, clientHookParams{})
		if err != nil {
			return nil, err
		}
		clientOpts = append(clientOpts, hookOpts...)
	}

	connPool, err := gtransport.DialPool(ctx, append(clientOpts, opts...)...)
	if err != nil {
		return nil, err
	}
	client := IdentityMappingStoreClient{CallOptions: defaultIdentityMappingStoreCallOptions()}

	c := &identityMappingStoreGRPCClient{
		connPool:                   connPool,
		identityMappingStoreClient: discoveryenginepb.NewIdentityMappingStoreServiceClient(connPool),
		CallOptions:                &client.CallOptions,
		logger:                     internaloption.GetLogger(opts),
		operationsClient:           longrunningpb.NewOperationsClient(connPool),
	}
	c.setGoogleClientInfo()

	client.internalClient = c

	client.LROClient, err = lroauto.NewOperationsClient(ctx, gtransport.WithConnPool(connPool))
	if err != nil {
		// This error "should not happen", since we are just reusing old connection pool
		// and never actually need to dial.
		// If this does happen, we could leak connp. However, we cannot close conn:
		// If the user invoked the constructor with option.WithGRPCConn,
		// we would close a connection that's still in use.
		// TODO: investigate error conditions.
		return nil, err
	}
	c.LROClient = &client.LROClient
	return &client, nil
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *identityMappingStoreGRPCClient) Connection() *grpc.ClientConn {
	return c.connPool.Conn()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *identityMappingStoreGRPCClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", gax.GoVersion}, keyval...)
	kv = append(kv, "gapic", getVersionClient(), "gax", gax.Version, "grpc", grpc.Version, "pb", protoVersion)
	c.xGoogHeaders = []string{
		"x-goog-api-client", gax.XGoogHeader(kv...),
	}
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *identityMappingStoreGRPCClient) Close() error {
	return c.connPool.Close()
}

// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type identityMappingStoreRESTClient struct {
	// The http endpoint to connect to.
	endpoint string

	// The http client.
	httpClient *http.Client

	// LROClient is used internally to handle long-running operations.
	// It is exposed so that its CallOptions can be modified if required.
	// Users should not Close this client.
	LROClient **lroauto.OperationsClient

	// The x-goog-* headers to be sent with each request.
	xGoogHeaders []string

	// Points back to the CallOptions field of the containing IdentityMappingStoreClient
	CallOptions **IdentityMappingStoreCallOptions

	logger *slog.Logger
}

// NewIdentityMappingStoreRESTClient creates a new identity mapping store service rest client.
//
// Service for managing Identity Mapping Stores.
func NewIdentityMappingStoreRESTClient(ctx context.Context, opts ...option.ClientOption) (*IdentityMappingStoreClient, error) {
	clientOpts := append(defaultIdentityMappingStoreRESTClientOptions(), opts...)
	httpClient, endpoint, err := httptransport.NewClient(ctx, clientOpts...)
	if err != nil {
		return nil, err
	}

	callOpts := defaultIdentityMappingStoreRESTCallOptions()
	c := &identityMappingStoreRESTClient{
		endpoint:    endpoint,
		httpClient:  httpClient,
		CallOptions: &callOpts,
		logger:      internaloption.GetLogger(opts),
	}
	c.setGoogleClientInfo()

	lroOpts := []option.ClientOption{
		option.WithHTTPClient(httpClient),
		option.WithEndpoint(endpoint),
	}
	opClient, err := lroauto.NewOperationsRESTClient(ctx, lroOpts...)
	if err != nil {
		return nil, err
	}
	c.LROClient = &opClient

	return &IdentityMappingStoreClient{internalClient: c, CallOptions: callOpts}, nil
}

func defaultIdentityMappingStoreRESTClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("https://discoveryengine.googleapis.com"),
		internaloption.WithDefaultEndpointTemplate("https://discoveryengine.UNIVERSE_DOMAIN"),
		internaloption.WithDefaultMTLSEndpoint("https://discoveryengine.mtls.googleapis.com"),
		internaloption.WithDefaultUniverseDomain("googleapis.com"),
		internaloption.WithDefaultAudience("https://discoveryengine.googleapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableNewAuthLibrary(),
	}
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *identityMappingStoreRESTClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", gax.GoVersion}, keyval...)
	kv = append(kv, "gapic", getVersionClient(), "gax", gax.Version, "rest", "UNKNOWN", "pb", protoVersion)
	c.xGoogHeaders = []string{
		"x-goog-api-client", gax.XGoogHeader(kv...),
	}
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *identityMappingStoreRESTClient) Close() error {
	// Replace httpClient with nil to force cleanup.
	c.httpClient = nil
	return nil
}

// Connection returns a connection to the API service.
//
// Deprecated: This method always returns nil.
func (c *identityMappingStoreRESTClient) Connection() *grpc.ClientConn {
	return nil
}
func (c *identityMappingStoreGRPCClient) CreateIdentityMappingStore(ctx context.Context, req *discoveryenginepb.CreateIdentityMappingStoreRequest, opts ...gax.CallOption) (*discoveryenginepb.IdentityMappingStore, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).CreateIdentityMappingStore[0:len((*c.CallOptions).CreateIdentityMappingStore):len((*c.CallOptions).CreateIdentityMappingStore)], opts...)
	var resp *discoveryenginepb.IdentityMappingStore
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = executeRPC(ctx, c.identityMappingStoreClient.CreateIdentityMappingStore, req, settings.GRPC, c.logger, "CreateIdentityMappingStore")
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *identityMappingStoreGRPCClient) GetIdentityMappingStore(ctx context.Context, req *discoveryenginepb.GetIdentityMappingStoreRequest, opts ...gax.CallOption) (*discoveryenginepb.IdentityMappingStore, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).GetIdentityMappingStore[0:len((*c.CallOptions).GetIdentityMappingStore):len((*c.CallOptions).GetIdentityMappingStore)], opts...)
	var resp *discoveryenginepb.IdentityMappingStore
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = executeRPC(ctx, c.identityMappingStoreClient.GetIdentityMappingStore, req, settings.GRPC, c.logger, "GetIdentityMappingStore")
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *identityMappingStoreGRPCClient) DeleteIdentityMappingStore(ctx context.Context, req *discoveryenginepb.DeleteIdentityMappingStoreRequest, opts ...gax.CallOption) (*DeleteIdentityMappingStoreOperation, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).DeleteIdentityMappingStore[0:len((*c.CallOptions).DeleteIdentityMappingStore):len((*c.CallOptions).DeleteIdentityMappingStore)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = executeRPC(ctx, c.identityMappingStoreClient.DeleteIdentityMappingStore, req, settings.GRPC, c.logger, "DeleteIdentityMappingStore")
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &DeleteIdentityMappingStoreOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *identityMappingStoreGRPCClient) ImportIdentityMappings(ctx context.Context, req *discoveryenginepb.ImportIdentityMappingsRequest, opts ...gax.CallOption) (*ImportIdentityMappingsOperation, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "identity_mapping_store", url.QueryEscape(req.GetIdentityMappingStore()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ImportIdentityMappings[0:len((*c.CallOptions).ImportIdentityMappings):len((*c.CallOptions).ImportIdentityMappings)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = executeRPC(ctx, c.identityMappingStoreClient.ImportIdentityMappings, req, settings.GRPC, c.logger, "ImportIdentityMappings")
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &ImportIdentityMappingsOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *identityMappingStoreGRPCClient) PurgeIdentityMappings(ctx context.Context, req *discoveryenginepb.PurgeIdentityMappingsRequest, opts ...gax.CallOption) (*PurgeIdentityMappingsOperation, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "identity_mapping_store", url.QueryEscape(req.GetIdentityMappingStore()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).PurgeIdentityMappings[0:len((*c.CallOptions).PurgeIdentityMappings):len((*c.CallOptions).PurgeIdentityMappings)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = executeRPC(ctx, c.identityMappingStoreClient.PurgeIdentityMappings, req, settings.GRPC, c.logger, "PurgeIdentityMappings")
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &PurgeIdentityMappingsOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *identityMappingStoreGRPCClient) ListIdentityMappings(ctx context.Context, req *discoveryenginepb.ListIdentityMappingsRequest, opts ...gax.CallOption) *IdentityMappingEntryIterator {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "identity_mapping_store", url.QueryEscape(req.GetIdentityMappingStore()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ListIdentityMappings[0:len((*c.CallOptions).ListIdentityMappings):len((*c.CallOptions).ListIdentityMappings)], opts...)
	it := &IdentityMappingEntryIterator{}
	req = proto.Clone(req).(*discoveryenginepb.ListIdentityMappingsRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*discoveryenginepb.IdentityMappingEntry, string, error) {
		resp := &discoveryenginepb.ListIdentityMappingsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = executeRPC(ctx, c.identityMappingStoreClient.ListIdentityMappings, req, settings.GRPC, c.logger, "ListIdentityMappings")
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetIdentityMappingEntries(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

func (c *identityMappingStoreGRPCClient) ListIdentityMappingStores(ctx context.Context, req *discoveryenginepb.ListIdentityMappingStoresRequest, opts ...gax.CallOption) *IdentityMappingStoreIterator {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ListIdentityMappingStores[0:len((*c.CallOptions).ListIdentityMappingStores):len((*c.CallOptions).ListIdentityMappingStores)], opts...)
	it := &IdentityMappingStoreIterator{}
	req = proto.Clone(req).(*discoveryenginepb.ListIdentityMappingStoresRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*discoveryenginepb.IdentityMappingStore, string, error) {
		resp := &discoveryenginepb.ListIdentityMappingStoresResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = executeRPC(ctx, c.identityMappingStoreClient.ListIdentityMappingStores, req, settings.GRPC, c.logger, "ListIdentityMappingStores")
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetIdentityMappingStores(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

func (c *identityMappingStoreGRPCClient) CancelOperation(ctx context.Context, req *longrunningpb.CancelOperationRequest, opts ...gax.CallOption) error {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).CancelOperation[0:len((*c.CallOptions).CancelOperation):len((*c.CallOptions).CancelOperation)], opts...)
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		_, err = executeRPC(ctx, c.operationsClient.CancelOperation, req, settings.GRPC, c.logger, "CancelOperation")
		return err
	}, opts...)
	return err
}

func (c *identityMappingStoreGRPCClient) GetOperation(ctx context.Context, req *longrunningpb.GetOperationRequest, opts ...gax.CallOption) (*longrunningpb.Operation, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).GetOperation[0:len((*c.CallOptions).GetOperation):len((*c.CallOptions).GetOperation)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = executeRPC(ctx, c.operationsClient.GetOperation, req, settings.GRPC, c.logger, "GetOperation")
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *identityMappingStoreGRPCClient) ListOperations(ctx context.Context, req *longrunningpb.ListOperationsRequest, opts ...gax.CallOption) *OperationIterator {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ListOperations[0:len((*c.CallOptions).ListOperations):len((*c.CallOptions).ListOperations)], opts...)
	it := &OperationIterator{}
	req = proto.Clone(req).(*longrunningpb.ListOperationsRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*longrunningpb.Operation, string, error) {
		resp := &longrunningpb.ListOperationsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = executeRPC(ctx, c.operationsClient.ListOperations, req, settings.GRPC, c.logger, "ListOperations")
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetOperations(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

// CreateIdentityMappingStore creates a new Identity Mapping Store.
func (c *identityMappingStoreRESTClient) CreateIdentityMappingStore(ctx context.Context, req *discoveryenginepb.CreateIdentityMappingStoreRequest, opts ...gax.CallOption) (*discoveryenginepb.IdentityMappingStore, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	body := req.GetIdentityMappingStore()
	jsonReq, err := m.Marshal(body)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1/%v/identityMappingStores", req.GetParent())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")
	if req.GetCmekConfigName() != "" {
		params.Add("cmekConfigName", fmt.Sprintf("%v", req.GetCmekConfigName()))
	}
	if req.GetDisableCmek() {
		params.Add("disableCmek", fmt.Sprintf("%v", req.GetDisableCmek()))
	}
	params.Add("identityMappingStoreId", fmt.Sprintf("%v", req.GetIdentityMappingStoreId()))

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).CreateIdentityMappingStore[0:len((*c.CallOptions).CreateIdentityMappingStore):len((*c.CallOptions).CreateIdentityMappingStore)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &discoveryenginepb.IdentityMappingStore{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		buf, err := executeHTTPRequest(ctx, c.httpClient, httpReq, c.logger, jsonReq, "CreateIdentityMappingStore")
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// GetIdentityMappingStore gets the Identity Mapping Store.
func (c *identityMappingStoreRESTClient) GetIdentityMappingStore(ctx context.Context, req *discoveryenginepb.GetIdentityMappingStoreRequest, opts ...gax.CallOption) (*discoveryenginepb.IdentityMappingStore, error) {
	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1/%v", req.GetName())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).GetIdentityMappingStore[0:len((*c.CallOptions).GetIdentityMappingStore):len((*c.CallOptions).GetIdentityMappingStore)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &discoveryenginepb.IdentityMappingStore{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		buf, err := executeHTTPRequest(ctx, c.httpClient, httpReq, c.logger, nil, "GetIdentityMappingStore")
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// DeleteIdentityMappingStore deletes the Identity Mapping Store.
func (c *identityMappingStoreRESTClient) DeleteIdentityMappingStore(ctx context.Context, req *discoveryenginepb.DeleteIdentityMappingStoreRequest, opts ...gax.CallOption) (*DeleteIdentityMappingStoreOperation, error) {
	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1/%v", req.GetName())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &longrunningpb.Operation{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("DELETE", baseUrl.String(), nil)
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		buf, err := executeHTTPRequest(ctx, c.httpClient, httpReq, c.logger, nil, "DeleteIdentityMappingStore")
		if err != nil {
			return err
		}
		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}

	override := fmt.Sprintf("/v1/%s", resp.GetName())
	return &DeleteIdentityMappingStoreOperation{
		lro:      longrunning.InternalNewOperation(*c.LROClient, resp),
		pollPath: override,
	}, nil
}

// ImportIdentityMappings imports a list of Identity Mapping Entries to an Identity Mapping Store.
func (c *identityMappingStoreRESTClient) ImportIdentityMappings(ctx context.Context, req *discoveryenginepb.ImportIdentityMappingsRequest, opts ...gax.CallOption) (*ImportIdentityMappingsOperation, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	jsonReq, err := m.Marshal(req)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1/%v:importIdentityMappings", req.GetIdentityMappingStore())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "identity_mapping_store", url.QueryEscape(req.GetIdentityMappingStore()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &longrunningpb.Operation{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		buf, err := executeHTTPRequest(ctx, c.httpClient, httpReq, c.logger, jsonReq, "ImportIdentityMappings")
		if err != nil {
			return err
		}
		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}

	override := fmt.Sprintf("/v1/%s", resp.GetName())
	return &ImportIdentityMappingsOperation{
		lro:      longrunning.InternalNewOperation(*c.LROClient, resp),
		pollPath: override,
	}, nil
}

// PurgeIdentityMappings purges specified or all Identity Mapping Entries from an Identity Mapping
// Store.
func (c *identityMappingStoreRESTClient) PurgeIdentityMappings(ctx context.Context, req *discoveryenginepb.PurgeIdentityMappingsRequest, opts ...gax.CallOption) (*PurgeIdentityMappingsOperation, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	jsonReq, err := m.Marshal(req)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1/%v:purgeIdentityMappings", req.GetIdentityMappingStore())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "identity_mapping_store", url.QueryEscape(req.GetIdentityMappingStore()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &longrunningpb.Operation{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		buf, err := executeHTTPRequest(ctx, c.httpClient, httpReq, c.logger, jsonReq, "PurgeIdentityMappings")
		if err != nil {
			return err
		}
		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}

	override := fmt.Sprintf("/v1/%s", resp.GetName())
	return &PurgeIdentityMappingsOperation{
		lro:      longrunning.InternalNewOperation(*c.LROClient, resp),
		pollPath: override,
	}, nil
}

// ListIdentityMappings lists Identity Mappings in an Identity Mapping Store.
func (c *identityMappingStoreRESTClient) ListIdentityMappings(ctx context.Context, req *discoveryenginepb.ListIdentityMappingsRequest, opts ...gax.CallOption) *IdentityMappingEntryIterator {
	it := &IdentityMappingEntryIterator{}
	req = proto.Clone(req).(*discoveryenginepb.ListIdentityMappingsRequest)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	it.InternalFetch = func(pageSize int, pageToken string) ([]*discoveryenginepb.IdentityMappingEntry, string, error) {
		resp := &discoveryenginepb.ListIdentityMappingsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		baseUrl, err := url.Parse(c.endpoint)
		if err != nil {
			return nil, "", err
		}
		baseUrl.Path += fmt.Sprintf("/v1/%v:listIdentityMappings", req.GetIdentityMappingStore())

		params := url.Values{}
		params.Add("$alt", "json;enum-encoding=int")
		if req.GetPageSize() != 0 {
			params.Add("pageSize", fmt.Sprintf("%v", req.GetPageSize()))
		}
		if req.GetPageToken() != "" {
			params.Add("pageToken", fmt.Sprintf("%v", req.GetPageToken()))
		}

		baseUrl.RawQuery = params.Encode()

		// Build HTTP headers from client and context metadata.
		hds := append(c.xGoogHeaders, "Content-Type", "application/json")
		headers := gax.BuildHeaders(ctx, hds...)
		e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			if settings.Path != "" {
				baseUrl.Path = settings.Path
			}
			httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
			if err != nil {
				return err
			}
			httpReq.Header = headers

			buf, err := executeHTTPRequest(ctx, c.httpClient, httpReq, c.logger, nil, "ListIdentityMappings")
			if err != nil {
				return err
			}
			if err := unm.Unmarshal(buf, resp); err != nil {
				return err
			}

			return nil
		}, opts...)
		if e != nil {
			return nil, "", e
		}
		it.Response = resp
		return resp.GetIdentityMappingEntries(), resp.GetNextPageToken(), nil
	}

	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

// ListIdentityMappingStores lists all Identity Mapping Stores.
func (c *identityMappingStoreRESTClient) ListIdentityMappingStores(ctx context.Context, req *discoveryenginepb.ListIdentityMappingStoresRequest, opts ...gax.CallOption) *IdentityMappingStoreIterator {
	it := &IdentityMappingStoreIterator{}
	req = proto.Clone(req).(*discoveryenginepb.ListIdentityMappingStoresRequest)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	it.InternalFetch = func(pageSize int, pageToken string) ([]*discoveryenginepb.IdentityMappingStore, string, error) {
		resp := &discoveryenginepb.ListIdentityMappingStoresResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		baseUrl, err := url.Parse(c.endpoint)
		if err != nil {
			return nil, "", err
		}
		baseUrl.Path += fmt.Sprintf("/v1/%v/identityMappingStores", req.GetParent())

		params := url.Values{}
		params.Add("$alt", "json;enum-encoding=int")
		if req.GetPageSize() != 0 {
			params.Add("pageSize", fmt.Sprintf("%v", req.GetPageSize()))
		}
		if req.GetPageToken() != "" {
			params.Add("pageToken", fmt.Sprintf("%v", req.GetPageToken()))
		}

		baseUrl.RawQuery = params.Encode()

		// Build HTTP headers from client and context metadata.
		hds := append(c.xGoogHeaders, "Content-Type", "application/json")
		headers := gax.BuildHeaders(ctx, hds...)
		e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			if settings.Path != "" {
				baseUrl.Path = settings.Path
			}
			httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
			if err != nil {
				return err
			}
			httpReq.Header = headers

			buf, err := executeHTTPRequest(ctx, c.httpClient, httpReq, c.logger, nil, "ListIdentityMappingStores")
			if err != nil {
				return err
			}
			if err := unm.Unmarshal(buf, resp); err != nil {
				return err
			}

			return nil
		}, opts...)
		if e != nil {
			return nil, "", e
		}
		it.Response = resp
		return resp.GetIdentityMappingStores(), resp.GetNextPageToken(), nil
	}

	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

// CancelOperation is a utility method from google.longrunning.Operations.
func (c *identityMappingStoreRESTClient) CancelOperation(ctx context.Context, req *longrunningpb.CancelOperationRequest, opts ...gax.CallOption) error {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	jsonReq, err := m.Marshal(req)
	if err != nil {
		return err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return err
	}
	baseUrl.Path += fmt.Sprintf("/v1/%v:cancel", req.GetName())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	return gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		_, err = executeHTTPRequest(ctx, c.httpClient, httpReq, c.logger, jsonReq, "CancelOperation")
		return err
	}, opts...)
}

// GetOperation is a utility method from google.longrunning.Operations.
func (c *identityMappingStoreRESTClient) GetOperation(ctx context.Context, req *longrunningpb.GetOperationRequest, opts ...gax.CallOption) (*longrunningpb.Operation, error) {
	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1/%v", req.GetName())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).GetOperation[0:len((*c.CallOptions).GetOperation):len((*c.CallOptions).GetOperation)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &longrunningpb.Operation{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		buf, err := executeHTTPRequest(ctx, c.httpClient, httpReq, c.logger, nil, "GetOperation")
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// ListOperations is a utility method from google.longrunning.Operations.
func (c *identityMappingStoreRESTClient) ListOperations(ctx context.Context, req *longrunningpb.ListOperationsRequest, opts ...gax.CallOption) *OperationIterator {
	it := &OperationIterator{}
	req = proto.Clone(req).(*longrunningpb.ListOperationsRequest)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	it.InternalFetch = func(pageSize int, pageToken string) ([]*longrunningpb.Operation, string, error) {
		resp := &longrunningpb.ListOperationsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		baseUrl, err := url.Parse(c.endpoint)
		if err != nil {
			return nil, "", err
		}
		baseUrl.Path += fmt.Sprintf("/v1/%v/operations", req.GetName())

		params := url.Values{}
		params.Add("$alt", "json;enum-encoding=int")
		if req.GetFilter() != "" {
			params.Add("filter", fmt.Sprintf("%v", req.GetFilter()))
		}
		if req.GetPageSize() != 0 {
			params.Add("pageSize", fmt.Sprintf("%v", req.GetPageSize()))
		}
		if req.GetPageToken() != "" {
			params.Add("pageToken", fmt.Sprintf("%v", req.GetPageToken()))
		}

		baseUrl.RawQuery = params.Encode()

		// Build HTTP headers from client and context metadata.
		hds := append(c.xGoogHeaders, "Content-Type", "application/json")
		headers := gax.BuildHeaders(ctx, hds...)
		e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			if settings.Path != "" {
				baseUrl.Path = settings.Path
			}
			httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
			if err != nil {
				return err
			}
			httpReq.Header = headers

			buf, err := executeHTTPRequest(ctx, c.httpClient, httpReq, c.logger, nil, "ListOperations")
			if err != nil {
				return err
			}
			if err := unm.Unmarshal(buf, resp); err != nil {
				return err
			}

			return nil
		}, opts...)
		if e != nil {
			return nil, "", e
		}
		it.Response = resp
		return resp.GetOperations(), resp.GetNextPageToken(), nil
	}

	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

// DeleteIdentityMappingStoreOperation returns a new DeleteIdentityMappingStoreOperation from a given name.
// The name must be that of a previously created DeleteIdentityMappingStoreOperation, possibly from a different process.
func (c *identityMappingStoreGRPCClient) DeleteIdentityMappingStoreOperation(name string) *DeleteIdentityMappingStoreOperation {
	return &DeleteIdentityMappingStoreOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// DeleteIdentityMappingStoreOperation returns a new DeleteIdentityMappingStoreOperation from a given name.
// The name must be that of a previously created DeleteIdentityMappingStoreOperation, possibly from a different process.
func (c *identityMappingStoreRESTClient) DeleteIdentityMappingStoreOperation(name string) *DeleteIdentityMappingStoreOperation {
	override := fmt.Sprintf("/v1/%s", name)
	return &DeleteIdentityMappingStoreOperation{
		lro:      longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
		pollPath: override,
	}
}

// ImportIdentityMappingsOperation returns a new ImportIdentityMappingsOperation from a given name.
// The name must be that of a previously created ImportIdentityMappingsOperation, possibly from a different process.
func (c *identityMappingStoreGRPCClient) ImportIdentityMappingsOperation(name string) *ImportIdentityMappingsOperation {
	return &ImportIdentityMappingsOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// ImportIdentityMappingsOperation returns a new ImportIdentityMappingsOperation from a given name.
// The name must be that of a previously created ImportIdentityMappingsOperation, possibly from a different process.
func (c *identityMappingStoreRESTClient) ImportIdentityMappingsOperation(name string) *ImportIdentityMappingsOperation {
	override := fmt.Sprintf("/v1/%s", name)
	return &ImportIdentityMappingsOperation{
		lro:      longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
		pollPath: override,
	}
}

// PurgeIdentityMappingsOperation returns a new PurgeIdentityMappingsOperation from a given name.
// The name must be that of a previously created PurgeIdentityMappingsOperation, possibly from a different process.
func (c *identityMappingStoreGRPCClient) PurgeIdentityMappingsOperation(name string) *PurgeIdentityMappingsOperation {
	return &PurgeIdentityMappingsOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// PurgeIdentityMappingsOperation returns a new PurgeIdentityMappingsOperation from a given name.
// The name must be that of a previously created PurgeIdentityMappingsOperation, possibly from a different process.
func (c *identityMappingStoreRESTClient) PurgeIdentityMappingsOperation(name string) *PurgeIdentityMappingsOperation {
	override := fmt.Sprintf("/v1/%s", name)
	return &PurgeIdentityMappingsOperation{
		lro:      longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
		pollPath: override,
	}
}
