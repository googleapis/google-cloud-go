// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.7
// source: google/cloud/discoveryengine/v1/assistant_service.proto

package discoveryenginepb

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// User metadata of the request.
type AssistUserMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. IANA time zone, e.g. Europe/Budapest.
	TimeZone string `protobuf:"bytes,1,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
	// Optional. Preferred language to be used for answering if language detection
	// fails. Also used as the language of error messages created by actions,
	// regardless of language detection results.
	PreferredLanguageCode string `protobuf:"bytes,2,opt,name=preferred_language_code,json=preferredLanguageCode,proto3" json:"preferred_language_code,omitempty"`
}

func (x *AssistUserMetadata) Reset() {
	*x = AssistUserMetadata{}
	mi := &file_google_cloud_discoveryengine_v1_assistant_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssistUserMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssistUserMetadata) ProtoMessage() {}

func (x *AssistUserMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_discoveryengine_v1_assistant_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssistUserMetadata.ProtoReflect.Descriptor instead.
func (*AssistUserMetadata) Descriptor() ([]byte, []int) {
	return file_google_cloud_discoveryengine_v1_assistant_service_proto_rawDescGZIP(), []int{0}
}

func (x *AssistUserMetadata) GetTimeZone() string {
	if x != nil {
		return x.TimeZone
	}
	return ""
}

func (x *AssistUserMetadata) GetPreferredLanguageCode() string {
	if x != nil {
		return x.PreferredLanguageCode
	}
	return ""
}

// Request for the
// [AssistantService.StreamAssist][google.cloud.discoveryengine.v1.AssistantService.StreamAssist]
// method.
type StreamAssistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The resource name of the
	// [Assistant][google.cloud.discoveryengine.v1.Assistant]. Format:
	// `projects/{project}/locations/{location}/collections/{collection}/engines/{engine}/assistants/{assistant}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. Current user query.
	//
	// Empty query is only supported if `file_ids` are provided. In this case, the
	// answer will be generated based on those context files.
	Query *Query `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	// Optional. The session to use for the request. If specified, the assistant
	// has access to the session history, and the query and the answer are stored
	// there.
	//
	// If `-` is specified as the session ID, or it is left empty, then a new
	// session is created with an automatically generated ID.
	//
	// Format:
	// `projects/{project}/locations/{location}/collections/{collection}/engines/{engine}/sessions/{session}`
	Session string `protobuf:"bytes,3,opt,name=session,proto3" json:"session,omitempty"`
	// Optional. Information about the user initiating the query.
	UserMetadata *AssistUserMetadata `protobuf:"bytes,6,opt,name=user_metadata,json=userMetadata,proto3" json:"user_metadata,omitempty"`
	// Optional. Specification of tools that are used to serve the request.
	ToolsSpec *StreamAssistRequest_ToolsSpec `protobuf:"bytes,18,opt,name=tools_spec,json=toolsSpec,proto3" json:"tools_spec,omitempty"`
	// Optional. Specification of the generation configuration for the request.
	GenerationSpec *StreamAssistRequest_GenerationSpec `protobuf:"bytes,19,opt,name=generation_spec,json=generationSpec,proto3" json:"generation_spec,omitempty"`
}

func (x *StreamAssistRequest) Reset() {
	*x = StreamAssistRequest{}
	mi := &file_google_cloud_discoveryengine_v1_assistant_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamAssistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamAssistRequest) ProtoMessage() {}

func (x *StreamAssistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_discoveryengine_v1_assistant_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamAssistRequest.ProtoReflect.Descriptor instead.
func (*StreamAssistRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_discoveryengine_v1_assistant_service_proto_rawDescGZIP(), []int{1}
}

func (x *StreamAssistRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StreamAssistRequest) GetQuery() *Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *StreamAssistRequest) GetSession() string {
	if x != nil {
		return x.Session
	}
	return ""
}

func (x *StreamAssistRequest) GetUserMetadata() *AssistUserMetadata {
	if x != nil {
		return x.UserMetadata
	}
	return nil
}

func (x *StreamAssistRequest) GetToolsSpec() *StreamAssistRequest_ToolsSpec {
	if x != nil {
		return x.ToolsSpec
	}
	return nil
}

func (x *StreamAssistRequest) GetGenerationSpec() *StreamAssistRequest_GenerationSpec {
	if x != nil {
		return x.GenerationSpec
	}
	return nil
}

// Response for the
// [AssistantService.StreamAssist][google.cloud.discoveryengine.v1.AssistantService.StreamAssist]
// method.
type StreamAssistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Assist answer resource object containing parts of the assistant's final
	// answer for the user's query.
	//
	// Not present if the current response doesn't add anything to previously
	// sent
	// [AssistAnswer.replies][google.cloud.discoveryengine.v1.AssistAnswer.replies].
	//
	// Observe
	// [AssistAnswer.state][google.cloud.discoveryengine.v1.AssistAnswer.state] to
	// see if more parts are to be expected. While the state is `IN_PROGRESS`, the
	// [AssistAnswer.replies][google.cloud.discoveryengine.v1.AssistAnswer.replies]
	// field in each response will contain replies (reply fragments) to be
	// appended to the ones received in previous responses. [AssistAnswer.name][]
	// won't be filled.
	//
	// If the state is `SUCCEEDED`, `FAILED` or `SKIPPED`, the response
	// is the last response and [AssistAnswer.name][] will have a value.
	Answer *AssistAnswer `protobuf:"bytes,1,opt,name=answer,proto3" json:"answer,omitempty"`
	// Session information.
	SessionInfo *StreamAssistResponse_SessionInfo `protobuf:"bytes,2,opt,name=session_info,json=sessionInfo,proto3" json:"session_info,omitempty"`
	// A global unique ID that identifies the current pair of request and stream
	// of responses. Used for feedback and support.
	AssistToken string `protobuf:"bytes,4,opt,name=assist_token,json=assistToken,proto3" json:"assist_token,omitempty"`
}

func (x *StreamAssistResponse) Reset() {
	*x = StreamAssistResponse{}
	mi := &file_google_cloud_discoveryengine_v1_assistant_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamAssistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamAssistResponse) ProtoMessage() {}

func (x *StreamAssistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_discoveryengine_v1_assistant_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamAssistResponse.ProtoReflect.Descriptor instead.
func (*StreamAssistResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_discoveryengine_v1_assistant_service_proto_rawDescGZIP(), []int{2}
}

func (x *StreamAssistResponse) GetAnswer() *AssistAnswer {
	if x != nil {
		return x.Answer
	}
	return nil
}

func (x *StreamAssistResponse) GetSessionInfo() *StreamAssistResponse_SessionInfo {
	if x != nil {
		return x.SessionInfo
	}
	return nil
}

func (x *StreamAssistResponse) GetAssistToken() string {
	if x != nil {
		return x.AssistToken
	}
	return ""
}

// Specification of tools that are used to serve the request.
type StreamAssistRequest_ToolsSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Specification of the Vertex AI Search tool.
	VertexAiSearchSpec *StreamAssistRequest_ToolsSpec_VertexAiSearchSpec `protobuf:"bytes,1,opt,name=vertex_ai_search_spec,json=vertexAiSearchSpec,proto3" json:"vertex_ai_search_spec,omitempty"`
	// Optional. Specification of the web grounding tool.
	// If field is present, enables grounding with web search. Works only if
	// [Assistant.web_grounding_type][google.cloud.discoveryengine.v1.Assistant.web_grounding_type]
	// is [WEB_GROUNDING_TYPE_GOOGLE_SEARCH][] or
	// [WEB_GROUNDING_TYPE_ENTERPRISE_WEB_SEARCH][].
	WebGroundingSpec *StreamAssistRequest_ToolsSpec_WebGroundingSpec `protobuf:"bytes,2,opt,name=web_grounding_spec,json=webGroundingSpec,proto3" json:"web_grounding_spec,omitempty"`
	// Optional. Specification of the image generation tool.
	ImageGenerationSpec *StreamAssistRequest_ToolsSpec_ImageGenerationSpec `protobuf:"bytes,3,opt,name=image_generation_spec,json=imageGenerationSpec,proto3" json:"image_generation_spec,omitempty"`
	// Optional. Specification of the video generation tool.
	VideoGenerationSpec *StreamAssistRequest_ToolsSpec_VideoGenerationSpec `protobuf:"bytes,4,opt,name=video_generation_spec,json=videoGenerationSpec,proto3" json:"video_generation_spec,omitempty"`
}

func (x *StreamAssistRequest_ToolsSpec) Reset() {
	*x = StreamAssistRequest_ToolsSpec{}
	mi := &file_google_cloud_discoveryengine_v1_assistant_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamAssistRequest_ToolsSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamAssistRequest_ToolsSpec) ProtoMessage() {}

func (x *StreamAssistRequest_ToolsSpec) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_discoveryengine_v1_assistant_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamAssistRequest_ToolsSpec.ProtoReflect.Descriptor instead.
func (*StreamAssistRequest_ToolsSpec) Descriptor() ([]byte, []int) {
	return file_google_cloud_discoveryengine_v1_assistant_service_proto_rawDescGZIP(), []int{1, 0}
}

func (x *StreamAssistRequest_ToolsSpec) GetVertexAiSearchSpec() *StreamAssistRequest_ToolsSpec_VertexAiSearchSpec {
	if x != nil {
		return x.VertexAiSearchSpec
	}
	return nil
}

func (x *StreamAssistRequest_ToolsSpec) GetWebGroundingSpec() *StreamAssistRequest_ToolsSpec_WebGroundingSpec {
	if x != nil {
		return x.WebGroundingSpec
	}
	return nil
}

func (x *StreamAssistRequest_ToolsSpec) GetImageGenerationSpec() *StreamAssistRequest_ToolsSpec_ImageGenerationSpec {
	if x != nil {
		return x.ImageGenerationSpec
	}
	return nil
}

func (x *StreamAssistRequest_ToolsSpec) GetVideoGenerationSpec() *StreamAssistRequest_ToolsSpec_VideoGenerationSpec {
	if x != nil {
		return x.VideoGenerationSpec
	}
	return nil
}

// Assistant generation specification for the request.
// This allows to override the default generation configuration at the engine
// level.
type StreamAssistRequest_GenerationSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The Vertex AI model_id used for the generative model. If not
	// set, the default Assistant model will be used.
	ModelId string `protobuf:"bytes,1,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
}

func (x *StreamAssistRequest_GenerationSpec) Reset() {
	*x = StreamAssistRequest_GenerationSpec{}
	mi := &file_google_cloud_discoveryengine_v1_assistant_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamAssistRequest_GenerationSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamAssistRequest_GenerationSpec) ProtoMessage() {}

func (x *StreamAssistRequest_GenerationSpec) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_discoveryengine_v1_assistant_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamAssistRequest_GenerationSpec.ProtoReflect.Descriptor instead.
func (*StreamAssistRequest_GenerationSpec) Descriptor() ([]byte, []int) {
	return file_google_cloud_discoveryengine_v1_assistant_service_proto_rawDescGZIP(), []int{1, 1}
}

func (x *StreamAssistRequest_GenerationSpec) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

// Specification of the Vertex AI Search tool.
type StreamAssistRequest_ToolsSpec_VertexAiSearchSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Specs defining
	// [DataStore][google.cloud.discoveryengine.v1.DataStore]s to filter on in
	// a search call and configurations for those data stores. This is only
	// considered for [Engine][google.cloud.discoveryengine.v1.Engine]s with
	// multiple data stores.
	DataStoreSpecs []*SearchRequest_DataStoreSpec `protobuf:"bytes,2,rep,name=data_store_specs,json=dataStoreSpecs,proto3" json:"data_store_specs,omitempty"`
	// Optional. The filter syntax consists of an expression language for
	// constructing a predicate from one or more fields of the documents being
	// filtered. Filter expression is case-sensitive.
	//
	// If this field is unrecognizable, an  `INVALID_ARGUMENT`  is returned.
	//
	// Filtering in Vertex AI Search is done by mapping the LHS filter key to
	// a key property defined in the Vertex AI Search backend -- this mapping
	// is defined by the customer in their schema. For example a media
	// customer might have a field 'name' in their schema. In this case the
	// filter would look like this: filter --> name:'ANY("king kong")'
	//
	// For more information about filtering including syntax and filter
	// operators, see
	// [Filter](https://cloud.google.com/generative-ai-app-builder/docs/filter-search-metadata)
	Filter string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *StreamAssistRequest_ToolsSpec_VertexAiSearchSpec) Reset() {
	*x = StreamAssistRequest_ToolsSpec_VertexAiSearchSpec{}
	mi := &file_google_cloud_discoveryengine_v1_assistant_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamAssistRequest_ToolsSpec_VertexAiSearchSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamAssistRequest_ToolsSpec_VertexAiSearchSpec) ProtoMessage() {}

func (x *StreamAssistRequest_ToolsSpec_VertexAiSearchSpec) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_discoveryengine_v1_assistant_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamAssistRequest_ToolsSpec_VertexAiSearchSpec.ProtoReflect.Descriptor instead.
func (*StreamAssistRequest_ToolsSpec_VertexAiSearchSpec) Descriptor() ([]byte, []int) {
	return file_google_cloud_discoveryengine_v1_assistant_service_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (x *StreamAssistRequest_ToolsSpec_VertexAiSearchSpec) GetDataStoreSpecs() []*SearchRequest_DataStoreSpec {
	if x != nil {
		return x.DataStoreSpecs
	}
	return nil
}

func (x *StreamAssistRequest_ToolsSpec_VertexAiSearchSpec) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// Specification of the web grounding tool.
type StreamAssistRequest_ToolsSpec_WebGroundingSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StreamAssistRequest_ToolsSpec_WebGroundingSpec) Reset() {
	*x = StreamAssistRequest_ToolsSpec_WebGroundingSpec{}
	mi := &file_google_cloud_discoveryengine_v1_assistant_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamAssistRequest_ToolsSpec_WebGroundingSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamAssistRequest_ToolsSpec_WebGroundingSpec) ProtoMessage() {}

func (x *StreamAssistRequest_ToolsSpec_WebGroundingSpec) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_discoveryengine_v1_assistant_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamAssistRequest_ToolsSpec_WebGroundingSpec.ProtoReflect.Descriptor instead.
func (*StreamAssistRequest_ToolsSpec_WebGroundingSpec) Descriptor() ([]byte, []int) {
	return file_google_cloud_discoveryengine_v1_assistant_service_proto_rawDescGZIP(), []int{1, 0, 1}
}

// Specification of the image generation tool.
type StreamAssistRequest_ToolsSpec_ImageGenerationSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StreamAssistRequest_ToolsSpec_ImageGenerationSpec) Reset() {
	*x = StreamAssistRequest_ToolsSpec_ImageGenerationSpec{}
	mi := &file_google_cloud_discoveryengine_v1_assistant_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamAssistRequest_ToolsSpec_ImageGenerationSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamAssistRequest_ToolsSpec_ImageGenerationSpec) ProtoMessage() {}

func (x *StreamAssistRequest_ToolsSpec_ImageGenerationSpec) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_discoveryengine_v1_assistant_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamAssistRequest_ToolsSpec_ImageGenerationSpec.ProtoReflect.Descriptor instead.
func (*StreamAssistRequest_ToolsSpec_ImageGenerationSpec) Descriptor() ([]byte, []int) {
	return file_google_cloud_discoveryengine_v1_assistant_service_proto_rawDescGZIP(), []int{1, 0, 2}
}

// Specification of the video generation tool.
type StreamAssistRequest_ToolsSpec_VideoGenerationSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StreamAssistRequest_ToolsSpec_VideoGenerationSpec) Reset() {
	*x = StreamAssistRequest_ToolsSpec_VideoGenerationSpec{}
	mi := &file_google_cloud_discoveryengine_v1_assistant_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamAssistRequest_ToolsSpec_VideoGenerationSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamAssistRequest_ToolsSpec_VideoGenerationSpec) ProtoMessage() {}

func (x *StreamAssistRequest_ToolsSpec_VideoGenerationSpec) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_discoveryengine_v1_assistant_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamAssistRequest_ToolsSpec_VideoGenerationSpec.ProtoReflect.Descriptor instead.
func (*StreamAssistRequest_ToolsSpec_VideoGenerationSpec) Descriptor() ([]byte, []int) {
	return file_google_cloud_discoveryengine_v1_assistant_service_proto_rawDescGZIP(), []int{1, 0, 3}
}

// Information about the session.
type StreamAssistResponse_SessionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the newly generated or continued session.
	//
	// Format:
	// `projects/{project}/locations/{location}/collections/{collection}/engines/{engine}/sessions/{session}`.
	Session string `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
}

func (x *StreamAssistResponse_SessionInfo) Reset() {
	*x = StreamAssistResponse_SessionInfo{}
	mi := &file_google_cloud_discoveryengine_v1_assistant_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamAssistResponse_SessionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamAssistResponse_SessionInfo) ProtoMessage() {}

func (x *StreamAssistResponse_SessionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_discoveryengine_v1_assistant_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamAssistResponse_SessionInfo.ProtoReflect.Descriptor instead.
func (*StreamAssistResponse_SessionInfo) Descriptor() ([]byte, []int) {
	return file_google_cloud_discoveryengine_v1_assistant_service_proto_rawDescGZIP(), []int{2, 0}
}

func (x *StreamAssistResponse_SessionInfo) GetSession() string {
	if x != nil {
		return x.Session
	}
	return ""
}

var File_google_cloud_discoveryengine_v1_assistant_service_proto protoreflect.FileDescriptor

var file_google_cloud_discoveryengine_v1_assistant_service_proto_rawDesc = []byte{
	0x0a, 0x37, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x34, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x73, 0x0a, 0x12, 0x41, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12,
	0x3b, 0x0a, 0x17, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x15, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xee, 0x0a, 0x0a,
	0x13, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x30, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2a, 0x0a, 0x28, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x48, 0x0a,
	0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e,
	0xe0, 0x41, 0x01, 0xfa, 0x41, 0x28, 0x0a, 0x26, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x62, 0x0a, 0x0a, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x53, 0x70, 0x65, 0x63, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x09, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x71, 0x0a, 0x0f, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x1a, 0x9b, 0x06,
	0x0a, 0x09, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x89, 0x01, 0x0a, 0x15,
	0x76, 0x65, 0x72, 0x74, 0x65, 0x78, 0x5f, 0x61, 0x69, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x56, 0x65, 0x72, 0x74,
	0x65, 0x78, 0x41, 0x69, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x70, 0x65, 0x63, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x12, 0x76, 0x65, 0x72, 0x74, 0x65, 0x78, 0x41, 0x69, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x53, 0x70, 0x65, 0x63, 0x12, 0x82, 0x01, 0x0a, 0x12, 0x77, 0x65, 0x62, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x73,
	0x53, 0x70, 0x65, 0x63, 0x2e, 0x57, 0x65, 0x62, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x53, 0x70, 0x65, 0x63, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x10, 0x77, 0x65, 0x62, 0x47,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x63, 0x12, 0x8b, 0x01, 0x0a,
	0x15, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x13, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x12, 0x8b, 0x01, 0x0a, 0x15, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x13, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x1a, 0x9e, 0x01, 0x0a, 0x12, 0x56, 0x65, 0x72,
	0x74, 0x65, 0x78, 0x41, 0x69, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x6b, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x53, 0x70, 0x65, 0x63, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x64, 0x61,
	0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x70, 0x65, 0x63, 0x73, 0x12, 0x1b, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x12, 0x0a, 0x10, 0x57, 0x65, 0x62,
	0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x63, 0x1a, 0x15, 0x0a,
	0x13, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x70, 0x65, 0x63, 0x1a, 0x15, 0x0a, 0x13, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x1a, 0x30, 0x0a, 0x0e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1e, 0x0a,
	0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x22, 0xbc, 0x02,
	0x0a, 0x14, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x64, 0x0a,
	0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x54, 0x0a, 0x0b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x45, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xfa, 0x41, 0x28, 0x0a, 0x26, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0xc6, 0x02, 0x0a,
	0x10, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0xdd, 0x01, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x12, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x5e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x58, 0x3a, 0x01, 0x2a, 0x22, 0x53, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a,
	0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2f,
	0x2a, 0x7d, 0x3a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x30,
	0x01, 0x1a, 0x52, 0xca, 0x41, 0x1e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77,
	0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x88, 0x02, 0x0a, 0x23, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x15, 0x41,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x70, 0x62, 0x3b, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x70, 0x62, 0xa2, 0x02, 0x0f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52,
	0x59, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0xaa, 0x02, 0x1f, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x1f, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x5c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5c, 0x56, 0x31, 0xea, 0x02, 0x22, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x3a, 0x3a, 0x56, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_discoveryengine_v1_assistant_service_proto_rawDescOnce sync.Once
	file_google_cloud_discoveryengine_v1_assistant_service_proto_rawDescData = file_google_cloud_discoveryengine_v1_assistant_service_proto_rawDesc
)

func file_google_cloud_discoveryengine_v1_assistant_service_proto_rawDescGZIP() []byte {
	file_google_cloud_discoveryengine_v1_assistant_service_proto_rawDescOnce.Do(func() {
		file_google_cloud_discoveryengine_v1_assistant_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_discoveryengine_v1_assistant_service_proto_rawDescData)
	})
	return file_google_cloud_discoveryengine_v1_assistant_service_proto_rawDescData
}

var file_google_cloud_discoveryengine_v1_assistant_service_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_google_cloud_discoveryengine_v1_assistant_service_proto_goTypes = []any{
	(*AssistUserMetadata)(nil),                                // 0: google.cloud.discoveryengine.v1.AssistUserMetadata
	(*StreamAssistRequest)(nil),                               // 1: google.cloud.discoveryengine.v1.StreamAssistRequest
	(*StreamAssistResponse)(nil),                              // 2: google.cloud.discoveryengine.v1.StreamAssistResponse
	(*StreamAssistRequest_ToolsSpec)(nil),                     // 3: google.cloud.discoveryengine.v1.StreamAssistRequest.ToolsSpec
	(*StreamAssistRequest_GenerationSpec)(nil),                // 4: google.cloud.discoveryengine.v1.StreamAssistRequest.GenerationSpec
	(*StreamAssistRequest_ToolsSpec_VertexAiSearchSpec)(nil),  // 5: google.cloud.discoveryengine.v1.StreamAssistRequest.ToolsSpec.VertexAiSearchSpec
	(*StreamAssistRequest_ToolsSpec_WebGroundingSpec)(nil),    // 6: google.cloud.discoveryengine.v1.StreamAssistRequest.ToolsSpec.WebGroundingSpec
	(*StreamAssistRequest_ToolsSpec_ImageGenerationSpec)(nil), // 7: google.cloud.discoveryengine.v1.StreamAssistRequest.ToolsSpec.ImageGenerationSpec
	(*StreamAssistRequest_ToolsSpec_VideoGenerationSpec)(nil), // 8: google.cloud.discoveryengine.v1.StreamAssistRequest.ToolsSpec.VideoGenerationSpec
	(*StreamAssistResponse_SessionInfo)(nil),                  // 9: google.cloud.discoveryengine.v1.StreamAssistResponse.SessionInfo
	(*Query)(nil),                                             // 10: google.cloud.discoveryengine.v1.Query
	(*AssistAnswer)(nil),                                      // 11: google.cloud.discoveryengine.v1.AssistAnswer
	(*SearchRequest_DataStoreSpec)(nil),                       // 12: google.cloud.discoveryengine.v1.SearchRequest.DataStoreSpec
}
var file_google_cloud_discoveryengine_v1_assistant_service_proto_depIdxs = []int32{
	10, // 0: google.cloud.discoveryengine.v1.StreamAssistRequest.query:type_name -> google.cloud.discoveryengine.v1.Query
	0,  // 1: google.cloud.discoveryengine.v1.StreamAssistRequest.user_metadata:type_name -> google.cloud.discoveryengine.v1.AssistUserMetadata
	3,  // 2: google.cloud.discoveryengine.v1.StreamAssistRequest.tools_spec:type_name -> google.cloud.discoveryengine.v1.StreamAssistRequest.ToolsSpec
	4,  // 3: google.cloud.discoveryengine.v1.StreamAssistRequest.generation_spec:type_name -> google.cloud.discoveryengine.v1.StreamAssistRequest.GenerationSpec
	11, // 4: google.cloud.discoveryengine.v1.StreamAssistResponse.answer:type_name -> google.cloud.discoveryengine.v1.AssistAnswer
	9,  // 5: google.cloud.discoveryengine.v1.StreamAssistResponse.session_info:type_name -> google.cloud.discoveryengine.v1.StreamAssistResponse.SessionInfo
	5,  // 6: google.cloud.discoveryengine.v1.StreamAssistRequest.ToolsSpec.vertex_ai_search_spec:type_name -> google.cloud.discoveryengine.v1.StreamAssistRequest.ToolsSpec.VertexAiSearchSpec
	6,  // 7: google.cloud.discoveryengine.v1.StreamAssistRequest.ToolsSpec.web_grounding_spec:type_name -> google.cloud.discoveryengine.v1.StreamAssistRequest.ToolsSpec.WebGroundingSpec
	7,  // 8: google.cloud.discoveryengine.v1.StreamAssistRequest.ToolsSpec.image_generation_spec:type_name -> google.cloud.discoveryengine.v1.StreamAssistRequest.ToolsSpec.ImageGenerationSpec
	8,  // 9: google.cloud.discoveryengine.v1.StreamAssistRequest.ToolsSpec.video_generation_spec:type_name -> google.cloud.discoveryengine.v1.StreamAssistRequest.ToolsSpec.VideoGenerationSpec
	12, // 10: google.cloud.discoveryengine.v1.StreamAssistRequest.ToolsSpec.VertexAiSearchSpec.data_store_specs:type_name -> google.cloud.discoveryengine.v1.SearchRequest.DataStoreSpec
	1,  // 11: google.cloud.discoveryengine.v1.AssistantService.StreamAssist:input_type -> google.cloud.discoveryengine.v1.StreamAssistRequest
	2,  // 12: google.cloud.discoveryengine.v1.AssistantService.StreamAssist:output_type -> google.cloud.discoveryengine.v1.StreamAssistResponse
	12, // [12:13] is the sub-list for method output_type
	11, // [11:12] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_google_cloud_discoveryengine_v1_assistant_service_proto_init() }
func file_google_cloud_discoveryengine_v1_assistant_service_proto_init() {
	if File_google_cloud_discoveryengine_v1_assistant_service_proto != nil {
		return
	}
	file_google_cloud_discoveryengine_v1_assist_answer_proto_init()
	file_google_cloud_discoveryengine_v1_search_service_proto_init()
	file_google_cloud_discoveryengine_v1_session_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_discoveryengine_v1_assistant_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_google_cloud_discoveryengine_v1_assistant_service_proto_goTypes,
		DependencyIndexes: file_google_cloud_discoveryengine_v1_assistant_service_proto_depIdxs,
		MessageInfos:      file_google_cloud_discoveryengine_v1_assistant_service_proto_msgTypes,
	}.Build()
	File_google_cloud_discoveryengine_v1_assistant_service_proto = out.File
	file_google_cloud_discoveryengine_v1_assistant_service_proto_rawDesc = nil
	file_google_cloud_discoveryengine_v1_assistant_service_proto_goTypes = nil
	file_google_cloud_discoveryengine_v1_assistant_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AssistantServiceClient is the client API for AssistantService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AssistantServiceClient interface {
	// Assists the user with a query in a streaming fashion.
	StreamAssist(ctx context.Context, in *StreamAssistRequest, opts ...grpc.CallOption) (AssistantService_StreamAssistClient, error)
}

type assistantServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAssistantServiceClient(cc grpc.ClientConnInterface) AssistantServiceClient {
	return &assistantServiceClient{cc}
}

func (c *assistantServiceClient) StreamAssist(ctx context.Context, in *StreamAssistRequest, opts ...grpc.CallOption) (AssistantService_StreamAssistClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AssistantService_serviceDesc.Streams[0], "/google.cloud.discoveryengine.v1.AssistantService/StreamAssist", opts...)
	if err != nil {
		return nil, err
	}
	x := &assistantServiceStreamAssistClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AssistantService_StreamAssistClient interface {
	Recv() (*StreamAssistResponse, error)
	grpc.ClientStream
}

type assistantServiceStreamAssistClient struct {
	grpc.ClientStream
}

func (x *assistantServiceStreamAssistClient) Recv() (*StreamAssistResponse, error) {
	m := new(StreamAssistResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AssistantServiceServer is the server API for AssistantService service.
type AssistantServiceServer interface {
	// Assists the user with a query in a streaming fashion.
	StreamAssist(*StreamAssistRequest, AssistantService_StreamAssistServer) error
}

// UnimplementedAssistantServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAssistantServiceServer struct {
}

func (*UnimplementedAssistantServiceServer) StreamAssist(*StreamAssistRequest, AssistantService_StreamAssistServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamAssist not implemented")
}

func RegisterAssistantServiceServer(s *grpc.Server, srv AssistantServiceServer) {
	s.RegisterService(&_AssistantService_serviceDesc, srv)
}

func _AssistantService_StreamAssist_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamAssistRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AssistantServiceServer).StreamAssist(m, &assistantServiceStreamAssistServer{stream})
}

type AssistantService_StreamAssistServer interface {
	Send(*StreamAssistResponse) error
	grpc.ServerStream
}

type assistantServiceStreamAssistServer struct {
	grpc.ServerStream
}

func (x *assistantServiceStreamAssistServer) Send(m *StreamAssistResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _AssistantService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.discoveryengine.v1.AssistantService",
	HandlerType: (*AssistantServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamAssist",
			Handler:       _AssistantService_StreamAssist_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "google/cloud/discoveryengine/v1/assistant_service.proto",
}
