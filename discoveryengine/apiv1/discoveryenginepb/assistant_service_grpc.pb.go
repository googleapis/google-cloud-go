// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/discoveryengine/v1/assistant_service.proto

package discoveryenginepb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AssistantService_StreamAssist_FullMethodName = "/google.cloud.discoveryengine.v1.AssistantService/StreamAssist"
)

// AssistantServiceClient is the client API for AssistantService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssistantServiceClient interface {
	// Assists the user with a query in a streaming fashion.
	StreamAssist(ctx context.Context, in *StreamAssistRequest, opts ...grpc.CallOption) (AssistantService_StreamAssistClient, error)
}

type assistantServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAssistantServiceClient(cc grpc.ClientConnInterface) AssistantServiceClient {
	return &assistantServiceClient{cc}
}

func (c *assistantServiceClient) StreamAssist(ctx context.Context, in *StreamAssistRequest, opts ...grpc.CallOption) (AssistantService_StreamAssistClient, error) {
	stream, err := c.cc.NewStream(ctx, &AssistantService_ServiceDesc.Streams[0], AssistantService_StreamAssist_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &assistantServiceStreamAssistClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AssistantService_StreamAssistClient interface {
	Recv() (*StreamAssistResponse, error)
	grpc.ClientStream
}

type assistantServiceStreamAssistClient struct {
	grpc.ClientStream
}

func (x *assistantServiceStreamAssistClient) Recv() (*StreamAssistResponse, error) {
	m := new(StreamAssistResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AssistantServiceServer is the server API for AssistantService service.
// All implementations should embed UnimplementedAssistantServiceServer
// for forward compatibility
type AssistantServiceServer interface {
	// Assists the user with a query in a streaming fashion.
	StreamAssist(*StreamAssistRequest, AssistantService_StreamAssistServer) error
}

// UnimplementedAssistantServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAssistantServiceServer struct {
}

func (UnimplementedAssistantServiceServer) StreamAssist(*StreamAssistRequest, AssistantService_StreamAssistServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamAssist not implemented")
}

// UnsafeAssistantServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssistantServiceServer will
// result in compilation errors.
type UnsafeAssistantServiceServer interface {
	mustEmbedUnimplementedAssistantServiceServer()
}

func RegisterAssistantServiceServer(s grpc.ServiceRegistrar, srv AssistantServiceServer) {
	s.RegisterService(&AssistantService_ServiceDesc, srv)
}

func _AssistantService_StreamAssist_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamAssistRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AssistantServiceServer).StreamAssist(m, &assistantServiceStreamAssistServer{stream})
}

type AssistantService_StreamAssistServer interface {
	Send(*StreamAssistResponse) error
	grpc.ServerStream
}

type assistantServiceStreamAssistServer struct {
	grpc.ServerStream
}

func (x *assistantServiceStreamAssistServer) Send(m *StreamAssistResponse) error {
	return x.ServerStream.SendMsg(m)
}

// AssistantService_ServiceDesc is the grpc.ServiceDesc for AssistantService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AssistantService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.discoveryengine.v1.AssistantService",
	HandlerType: (*AssistantServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamAssist",
			Handler:       _AssistantService_StreamAssist_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "google/cloud/discoveryengine/v1/assistant_service.proto",
}
