// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/discoveryengine/v1/cmek_config_service.proto

package discoveryenginepb

import (
	context "context"

	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CmekConfigService_UpdateCmekConfig_FullMethodName = "/google.cloud.discoveryengine.v1.CmekConfigService/UpdateCmekConfig"
	CmekConfigService_GetCmekConfig_FullMethodName    = "/google.cloud.discoveryengine.v1.CmekConfigService/GetCmekConfig"
	CmekConfigService_ListCmekConfigs_FullMethodName  = "/google.cloud.discoveryengine.v1.CmekConfigService/ListCmekConfigs"
	CmekConfigService_DeleteCmekConfig_FullMethodName = "/google.cloud.discoveryengine.v1.CmekConfigService/DeleteCmekConfig"
)

// CmekConfigServiceClient is the client API for CmekConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CmekConfigServiceClient interface {
	// Provisions a CMEK key for use in a location of a customer's project.
	// This method will also conduct location validation on the provided
	// cmekConfig to make sure the key is valid and can be used in the
	// selected location.
	UpdateCmekConfig(ctx context.Context, in *UpdateCmekConfigRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets the [CmekConfig][google.cloud.discoveryengine.v1.CmekConfig].
	GetCmekConfig(ctx context.Context, in *GetCmekConfigRequest, opts ...grpc.CallOption) (*CmekConfig, error)
	// Lists all the [CmekConfig][google.cloud.discoveryengine.v1.CmekConfig]s
	// with the project.
	ListCmekConfigs(ctx context.Context, in *ListCmekConfigsRequest, opts ...grpc.CallOption) (*ListCmekConfigsResponse, error)
	// De-provisions a CmekConfig.
	DeleteCmekConfig(ctx context.Context, in *DeleteCmekConfigRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type cmekConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCmekConfigServiceClient(cc grpc.ClientConnInterface) CmekConfigServiceClient {
	return &cmekConfigServiceClient{cc}
}

func (c *cmekConfigServiceClient) UpdateCmekConfig(ctx context.Context, in *UpdateCmekConfigRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, CmekConfigService_UpdateCmekConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmekConfigServiceClient) GetCmekConfig(ctx context.Context, in *GetCmekConfigRequest, opts ...grpc.CallOption) (*CmekConfig, error) {
	out := new(CmekConfig)
	err := c.cc.Invoke(ctx, CmekConfigService_GetCmekConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmekConfigServiceClient) ListCmekConfigs(ctx context.Context, in *ListCmekConfigsRequest, opts ...grpc.CallOption) (*ListCmekConfigsResponse, error) {
	out := new(ListCmekConfigsResponse)
	err := c.cc.Invoke(ctx, CmekConfigService_ListCmekConfigs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmekConfigServiceClient) DeleteCmekConfig(ctx context.Context, in *DeleteCmekConfigRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, CmekConfigService_DeleteCmekConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CmekConfigServiceServer is the server API for CmekConfigService service.
// All implementations should embed UnimplementedCmekConfigServiceServer
// for forward compatibility
type CmekConfigServiceServer interface {
	// Provisions a CMEK key for use in a location of a customer's project.
	// This method will also conduct location validation on the provided
	// cmekConfig to make sure the key is valid and can be used in the
	// selected location.
	UpdateCmekConfig(context.Context, *UpdateCmekConfigRequest) (*longrunningpb.Operation, error)
	// Gets the [CmekConfig][google.cloud.discoveryengine.v1.CmekConfig].
	GetCmekConfig(context.Context, *GetCmekConfigRequest) (*CmekConfig, error)
	// Lists all the [CmekConfig][google.cloud.discoveryengine.v1.CmekConfig]s
	// with the project.
	ListCmekConfigs(context.Context, *ListCmekConfigsRequest) (*ListCmekConfigsResponse, error)
	// De-provisions a CmekConfig.
	DeleteCmekConfig(context.Context, *DeleteCmekConfigRequest) (*longrunningpb.Operation, error)
}

// UnimplementedCmekConfigServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCmekConfigServiceServer struct {
}

func (UnimplementedCmekConfigServiceServer) UpdateCmekConfig(context.Context, *UpdateCmekConfigRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCmekConfig not implemented")
}
func (UnimplementedCmekConfigServiceServer) GetCmekConfig(context.Context, *GetCmekConfigRequest) (*CmekConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCmekConfig not implemented")
}
func (UnimplementedCmekConfigServiceServer) ListCmekConfigs(context.Context, *ListCmekConfigsRequest) (*ListCmekConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCmekConfigs not implemented")
}
func (UnimplementedCmekConfigServiceServer) DeleteCmekConfig(context.Context, *DeleteCmekConfigRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCmekConfig not implemented")
}

// UnsafeCmekConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CmekConfigServiceServer will
// result in compilation errors.
type UnsafeCmekConfigServiceServer interface {
	mustEmbedUnimplementedCmekConfigServiceServer()
}

func RegisterCmekConfigServiceServer(s grpc.ServiceRegistrar, srv CmekConfigServiceServer) {
	s.RegisterService(&CmekConfigService_ServiceDesc, srv)
}

func _CmekConfigService_UpdateCmekConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCmekConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmekConfigServiceServer).UpdateCmekConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CmekConfigService_UpdateCmekConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmekConfigServiceServer).UpdateCmekConfig(ctx, req.(*UpdateCmekConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmekConfigService_GetCmekConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCmekConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmekConfigServiceServer).GetCmekConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CmekConfigService_GetCmekConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmekConfigServiceServer).GetCmekConfig(ctx, req.(*GetCmekConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmekConfigService_ListCmekConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCmekConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmekConfigServiceServer).ListCmekConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CmekConfigService_ListCmekConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmekConfigServiceServer).ListCmekConfigs(ctx, req.(*ListCmekConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmekConfigService_DeleteCmekConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCmekConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmekConfigServiceServer).DeleteCmekConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CmekConfigService_DeleteCmekConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmekConfigServiceServer).DeleteCmekConfig(ctx, req.(*DeleteCmekConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CmekConfigService_ServiceDesc is the grpc.ServiceDesc for CmekConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CmekConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.discoveryengine.v1.CmekConfigService",
	HandlerType: (*CmekConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateCmekConfig",
			Handler:    _CmekConfigService_UpdateCmekConfig_Handler,
		},
		{
			MethodName: "GetCmekConfig",
			Handler:    _CmekConfigService_GetCmekConfig_Handler,
		},
		{
			MethodName: "ListCmekConfigs",
			Handler:    _CmekConfigService_ListCmekConfigs_Handler,
		},
		{
			MethodName: "DeleteCmekConfig",
			Handler:    _CmekConfigService_DeleteCmekConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/discoveryengine/v1/cmek_config_service.proto",
}
