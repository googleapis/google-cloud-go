// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.7
// source: google/cloud/discoveryengine/v1/identity_mapping_store_service.proto

package discoveryenginepb

import (
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	status "google.golang.org/genproto/googleapis/rpc/status"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status1 "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for
// [IdentityMappingStoreService.CreateIdentityMappingStore][google.cloud.discoveryengine.v1.IdentityMappingStoreService.CreateIdentityMappingStore]
type CreateIdentityMappingStoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CMEK options for the Identity Mapping Store. Setting this field will
	// override the default CmekConfig if one is set for the project.
	//
	// Types that are assignable to CmekOptions:
	//
	//	*CreateIdentityMappingStoreRequest_CmekConfigName
	//	*CreateIdentityMappingStoreRequest_DisableCmek
	CmekOptions isCreateIdentityMappingStoreRequest_CmekOptions `protobuf_oneof:"cmek_options"`
	// Required. The parent collection resource name, such as
	// `projects/{project}/locations/{location}`.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Required. The ID of the Identity Mapping Store to create.
	//
	// The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores
	// (_), and hyphens (-). The maximum length is 63 characters.
	IdentityMappingStoreId string `protobuf:"bytes,2,opt,name=identity_mapping_store_id,json=identityMappingStoreId,proto3" json:"identity_mapping_store_id,omitempty"`
	// Required. The Identity Mapping Store to create.
	IdentityMappingStore *IdentityMappingStore `protobuf:"bytes,3,opt,name=identity_mapping_store,json=identityMappingStore,proto3" json:"identity_mapping_store,omitempty"`
}

func (x *CreateIdentityMappingStoreRequest) Reset() {
	*x = CreateIdentityMappingStoreRequest{}
	mi := &file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateIdentityMappingStoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIdentityMappingStoreRequest) ProtoMessage() {}

func (x *CreateIdentityMappingStoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIdentityMappingStoreRequest.ProtoReflect.Descriptor instead.
func (*CreateIdentityMappingStoreRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_rawDescGZIP(), []int{0}
}

func (m *CreateIdentityMappingStoreRequest) GetCmekOptions() isCreateIdentityMappingStoreRequest_CmekOptions {
	if m != nil {
		return m.CmekOptions
	}
	return nil
}

func (x *CreateIdentityMappingStoreRequest) GetCmekConfigName() string {
	if x, ok := x.GetCmekOptions().(*CreateIdentityMappingStoreRequest_CmekConfigName); ok {
		return x.CmekConfigName
	}
	return ""
}

func (x *CreateIdentityMappingStoreRequest) GetDisableCmek() bool {
	if x, ok := x.GetCmekOptions().(*CreateIdentityMappingStoreRequest_DisableCmek); ok {
		return x.DisableCmek
	}
	return false
}

func (x *CreateIdentityMappingStoreRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateIdentityMappingStoreRequest) GetIdentityMappingStoreId() string {
	if x != nil {
		return x.IdentityMappingStoreId
	}
	return ""
}

func (x *CreateIdentityMappingStoreRequest) GetIdentityMappingStore() *IdentityMappingStore {
	if x != nil {
		return x.IdentityMappingStore
	}
	return nil
}

type isCreateIdentityMappingStoreRequest_CmekOptions interface {
	isCreateIdentityMappingStoreRequest_CmekOptions()
}

type CreateIdentityMappingStoreRequest_CmekConfigName struct {
	// Resource name of the CmekConfig to use for protecting this Identity
	// Mapping Store.
	CmekConfigName string `protobuf:"bytes,5,opt,name=cmek_config_name,json=cmekConfigName,proto3,oneof"`
}

type CreateIdentityMappingStoreRequest_DisableCmek struct {
	// Identity Mapping Store without CMEK protections. If a default CmekConfig
	// is set for the project, setting this field will override the default
	// CmekConfig as well.
	DisableCmek bool `protobuf:"varint,6,opt,name=disable_cmek,json=disableCmek,proto3,oneof"`
}

func (*CreateIdentityMappingStoreRequest_CmekConfigName) isCreateIdentityMappingStoreRequest_CmekOptions() {
}

func (*CreateIdentityMappingStoreRequest_DisableCmek) isCreateIdentityMappingStoreRequest_CmekOptions() {
}

// Request message for
// [IdentityMappingStoreService.GetIdentityMappingStore][google.cloud.discoveryengine.v1.IdentityMappingStoreService.GetIdentityMappingStore]
type GetIdentityMappingStoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the Identity Mapping Store to get.
	// Format:
	// `projects/{project}/locations/{location}/identityMappingStores/{identityMappingStore}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetIdentityMappingStoreRequest) Reset() {
	*x = GetIdentityMappingStoreRequest{}
	mi := &file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetIdentityMappingStoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIdentityMappingStoreRequest) ProtoMessage() {}

func (x *GetIdentityMappingStoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIdentityMappingStoreRequest.ProtoReflect.Descriptor instead.
func (*GetIdentityMappingStoreRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetIdentityMappingStoreRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Request message for
// [IdentityMappingStoreService.DeleteIdentityMappingStore][google.cloud.discoveryengine.v1.IdentityMappingStoreService.DeleteIdentityMappingStore]
type DeleteIdentityMappingStoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the Identity Mapping Store to delete.
	// Format:
	// `projects/{project}/locations/{location}/identityMappingStores/{identityMappingStore}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteIdentityMappingStoreRequest) Reset() {
	*x = DeleteIdentityMappingStoreRequest{}
	mi := &file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteIdentityMappingStoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIdentityMappingStoreRequest) ProtoMessage() {}

func (x *DeleteIdentityMappingStoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIdentityMappingStoreRequest.ProtoReflect.Descriptor instead.
func (*DeleteIdentityMappingStoreRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteIdentityMappingStoreRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Request message for
// [IdentityMappingStoreService.ImportIdentityMappings][google.cloud.discoveryengine.v1.IdentityMappingStoreService.ImportIdentityMappings]
type ImportIdentityMappingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The source of the input.
	//
	// Types that are assignable to Source:
	//
	//	*ImportIdentityMappingsRequest_InlineSource_
	Source isImportIdentityMappingsRequest_Source `protobuf_oneof:"source"`
	// Required. The name of the Identity Mapping Store to import Identity Mapping
	// Entries to. Format:
	// `projects/{project}/locations/{location}/identityMappingStores/{identityMappingStore}`
	IdentityMappingStore string `protobuf:"bytes,1,opt,name=identity_mapping_store,json=identityMappingStore,proto3" json:"identity_mapping_store,omitempty"`
}

func (x *ImportIdentityMappingsRequest) Reset() {
	*x = ImportIdentityMappingsRequest{}
	mi := &file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportIdentityMappingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportIdentityMappingsRequest) ProtoMessage() {}

func (x *ImportIdentityMappingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportIdentityMappingsRequest.ProtoReflect.Descriptor instead.
func (*ImportIdentityMappingsRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_rawDescGZIP(), []int{3}
}

func (m *ImportIdentityMappingsRequest) GetSource() isImportIdentityMappingsRequest_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *ImportIdentityMappingsRequest) GetInlineSource() *ImportIdentityMappingsRequest_InlineSource {
	if x, ok := x.GetSource().(*ImportIdentityMappingsRequest_InlineSource_); ok {
		return x.InlineSource
	}
	return nil
}

func (x *ImportIdentityMappingsRequest) GetIdentityMappingStore() string {
	if x != nil {
		return x.IdentityMappingStore
	}
	return ""
}

type isImportIdentityMappingsRequest_Source interface {
	isImportIdentityMappingsRequest_Source()
}

type ImportIdentityMappingsRequest_InlineSource_ struct {
	// The inline source to import identity mapping entries from.
	InlineSource *ImportIdentityMappingsRequest_InlineSource `protobuf:"bytes,2,opt,name=inline_source,json=inlineSource,proto3,oneof"`
}

func (*ImportIdentityMappingsRequest_InlineSource_) isImportIdentityMappingsRequest_Source() {}

// Response message for
// [IdentityMappingStoreService.ImportIdentityMappings][google.cloud.discoveryengine.v1.IdentityMappingStoreService.ImportIdentityMappings]
type ImportIdentityMappingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A sample of errors encountered while processing the request.
	ErrorSamples []*status.Status `protobuf:"bytes,1,rep,name=error_samples,json=errorSamples,proto3" json:"error_samples,omitempty"`
}

func (x *ImportIdentityMappingsResponse) Reset() {
	*x = ImportIdentityMappingsResponse{}
	mi := &file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportIdentityMappingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportIdentityMappingsResponse) ProtoMessage() {}

func (x *ImportIdentityMappingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportIdentityMappingsResponse.ProtoReflect.Descriptor instead.
func (*ImportIdentityMappingsResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_rawDescGZIP(), []int{4}
}

func (x *ImportIdentityMappingsResponse) GetErrorSamples() []*status.Status {
	if x != nil {
		return x.ErrorSamples
	}
	return nil
}

// Request message for
// [IdentityMappingStoreService.PurgeIdentityMappings][google.cloud.discoveryengine.v1.IdentityMappingStoreService.PurgeIdentityMappings]
type PurgeIdentityMappingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The source of the input.
	//
	// Types that are assignable to Source:
	//
	//	*PurgeIdentityMappingsRequest_InlineSource_
	Source isPurgeIdentityMappingsRequest_Source `protobuf_oneof:"source"`
	// Required. The name of the Identity Mapping Store to purge Identity Mapping
	// Entries from. Format:
	// `projects/{project}/locations/{location}/identityMappingStores/{identityMappingStore}`
	IdentityMappingStore string `protobuf:"bytes,1,opt,name=identity_mapping_store,json=identityMappingStore,proto3" json:"identity_mapping_store,omitempty"`
	// Filter matching identity mappings to purge.
	// The eligible field for filtering is:
	// * `update_time`: in ISO 8601 "zulu" format.
	// * `external_id`
	//
	// Examples:
	//
	//   - Deleting all identity mappings updated in a time range:
	//     `update_time > "2012-04-23T18:25:43.511Z" AND update_time <
	//     "2012-04-23T18:30:43.511Z"`
	//   - Deleting all identity mappings for a given external_id:
	//
	// `external_id = "id1"`
	//   - Deleting all identity mappings inside an identity mapping store:
	//     `*`
	//
	// The filtering fields are assumed to have an implicit AND.
	// Should not be used with source. An error will be thrown, if both are
	// provided.
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	// Actually performs the purge. If `force` is set to false, return the
	// expected purge count without deleting any identity mappings. This field is
	// only supported for purge with filter. For input source this field is
	// ignored and data will be purged regardless of the value of this field.
	Force *bool `protobuf:"varint,4,opt,name=force,proto3,oneof" json:"force,omitempty"`
}

func (x *PurgeIdentityMappingsRequest) Reset() {
	*x = PurgeIdentityMappingsRequest{}
	mi := &file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PurgeIdentityMappingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurgeIdentityMappingsRequest) ProtoMessage() {}

func (x *PurgeIdentityMappingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurgeIdentityMappingsRequest.ProtoReflect.Descriptor instead.
func (*PurgeIdentityMappingsRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_rawDescGZIP(), []int{5}
}

func (m *PurgeIdentityMappingsRequest) GetSource() isPurgeIdentityMappingsRequest_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *PurgeIdentityMappingsRequest) GetInlineSource() *PurgeIdentityMappingsRequest_InlineSource {
	if x, ok := x.GetSource().(*PurgeIdentityMappingsRequest_InlineSource_); ok {
		return x.InlineSource
	}
	return nil
}

func (x *PurgeIdentityMappingsRequest) GetIdentityMappingStore() string {
	if x != nil {
		return x.IdentityMappingStore
	}
	return ""
}

func (x *PurgeIdentityMappingsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *PurgeIdentityMappingsRequest) GetForce() bool {
	if x != nil && x.Force != nil {
		return *x.Force
	}
	return false
}

type isPurgeIdentityMappingsRequest_Source interface {
	isPurgeIdentityMappingsRequest_Source()
}

type PurgeIdentityMappingsRequest_InlineSource_ struct {
	// The inline source to purge identity mapping entries from.
	InlineSource *PurgeIdentityMappingsRequest_InlineSource `protobuf:"bytes,2,opt,name=inline_source,json=inlineSource,proto3,oneof"`
}

func (*PurgeIdentityMappingsRequest_InlineSource_) isPurgeIdentityMappingsRequest_Source() {}

// Request message for
// [IdentityMappingStoreService.ListIdentityMappings][google.cloud.discoveryengine.v1.IdentityMappingStoreService.ListIdentityMappings]
type ListIdentityMappingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the Identity Mapping Store to list Identity Mapping
	// Entries in. Format:
	// `projects/{project}/locations/{location}/identityMappingStores/{identityMappingStore}`
	IdentityMappingStore string `protobuf:"bytes,1,opt,name=identity_mapping_store,json=identityMappingStore,proto3" json:"identity_mapping_store,omitempty"`
	// Maximum number of IdentityMappings to return. If unspecified, defaults
	// to 2000. The maximum allowed value is 10000. Values above 10000 will be
	// coerced to 10000.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListIdentityMappings` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to
	// `ListIdentityMappings` must match the call that provided the page
	// token.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListIdentityMappingsRequest) Reset() {
	*x = ListIdentityMappingsRequest{}
	mi := &file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListIdentityMappingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIdentityMappingsRequest) ProtoMessage() {}

func (x *ListIdentityMappingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIdentityMappingsRequest.ProtoReflect.Descriptor instead.
func (*ListIdentityMappingsRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_rawDescGZIP(), []int{6}
}

func (x *ListIdentityMappingsRequest) GetIdentityMappingStore() string {
	if x != nil {
		return x.IdentityMappingStore
	}
	return ""
}

func (x *ListIdentityMappingsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListIdentityMappingsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// Response message for
// [IdentityMappingStoreService.ListIdentityMappings][google.cloud.discoveryengine.v1.IdentityMappingStoreService.ListIdentityMappings]
type ListIdentityMappingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Identity Mapping Entries.
	IdentityMappingEntries []*IdentityMappingEntry `protobuf:"bytes,1,rep,name=identity_mapping_entries,json=identityMappingEntries,proto3" json:"identity_mapping_entries,omitempty"`
	// A token that can be sent as `page_token` to retrieve the next page. If this
	// field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListIdentityMappingsResponse) Reset() {
	*x = ListIdentityMappingsResponse{}
	mi := &file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListIdentityMappingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIdentityMappingsResponse) ProtoMessage() {}

func (x *ListIdentityMappingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIdentityMappingsResponse.ProtoReflect.Descriptor instead.
func (*ListIdentityMappingsResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_rawDescGZIP(), []int{7}
}

func (x *ListIdentityMappingsResponse) GetIdentityMappingEntries() []*IdentityMappingEntry {
	if x != nil {
		return x.IdentityMappingEntries
	}
	return nil
}

func (x *ListIdentityMappingsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Request message for
// [IdentityMappingStoreService.ListIdentityMappingStores][google.cloud.discoveryengine.v1.IdentityMappingStoreService.ListIdentityMappingStores]
type ListIdentityMappingStoresRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent of the Identity Mapping Stores to list.
	// Format:
	// `projects/{project}/locations/{location}`.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Maximum number of IdentityMappingStores to return. If unspecified, defaults
	// to 100. The maximum allowed value is 1000. Values above 1000 will be
	// coerced to 1000.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListIdentityMappingStores` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to
	// `ListIdentityMappingStores` must match the call that provided the page
	// token.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListIdentityMappingStoresRequest) Reset() {
	*x = ListIdentityMappingStoresRequest{}
	mi := &file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListIdentityMappingStoresRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIdentityMappingStoresRequest) ProtoMessage() {}

func (x *ListIdentityMappingStoresRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIdentityMappingStoresRequest.ProtoReflect.Descriptor instead.
func (*ListIdentityMappingStoresRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_rawDescGZIP(), []int{8}
}

func (x *ListIdentityMappingStoresRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListIdentityMappingStoresRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListIdentityMappingStoresRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// Response message for
// [IdentityMappingStoreService.ListIdentityMappingStores][google.cloud.discoveryengine.v1.IdentityMappingStoreService.ListIdentityMappingStores]
type ListIdentityMappingStoresResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Identity Mapping Stores.
	IdentityMappingStores []*IdentityMappingStore `protobuf:"bytes,1,rep,name=identity_mapping_stores,json=identityMappingStores,proto3" json:"identity_mapping_stores,omitempty"`
	// A token that can be sent as `page_token` to retrieve the next page. If this
	// field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListIdentityMappingStoresResponse) Reset() {
	*x = ListIdentityMappingStoresResponse{}
	mi := &file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListIdentityMappingStoresResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIdentityMappingStoresResponse) ProtoMessage() {}

func (x *ListIdentityMappingStoresResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIdentityMappingStoresResponse.ProtoReflect.Descriptor instead.
func (*ListIdentityMappingStoresResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_rawDescGZIP(), []int{9}
}

func (x *ListIdentityMappingStoresResponse) GetIdentityMappingStores() []*IdentityMappingStore {
	if x != nil {
		return x.IdentityMappingStores
	}
	return nil
}

func (x *ListIdentityMappingStoresResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// IdentityMappingEntry LongRunningOperation metadata for
// [IdentityMappingStoreService.ImportIdentityMappings][google.cloud.discoveryengine.v1.IdentityMappingStoreService.ImportIdentityMappings]
// and
// [IdentityMappingStoreService.PurgeIdentityMappings][google.cloud.discoveryengine.v1.IdentityMappingStoreService.PurgeIdentityMappings]
type IdentityMappingEntryOperationMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of IdentityMappingEntries that were successfully processed.
	SuccessCount int64 `protobuf:"varint,1,opt,name=success_count,json=successCount,proto3" json:"success_count,omitempty"`
	// The number of IdentityMappingEntries that failed to be processed.
	FailureCount int64 `protobuf:"varint,2,opt,name=failure_count,json=failureCount,proto3" json:"failure_count,omitempty"`
	// The total number of IdentityMappingEntries that were processed.
	TotalCount int64 `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *IdentityMappingEntryOperationMetadata) Reset() {
	*x = IdentityMappingEntryOperationMetadata{}
	mi := &file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IdentityMappingEntryOperationMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityMappingEntryOperationMetadata) ProtoMessage() {}

func (x *IdentityMappingEntryOperationMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityMappingEntryOperationMetadata.ProtoReflect.Descriptor instead.
func (*IdentityMappingEntryOperationMetadata) Descriptor() ([]byte, []int) {
	return file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_rawDescGZIP(), []int{10}
}

func (x *IdentityMappingEntryOperationMetadata) GetSuccessCount() int64 {
	if x != nil {
		return x.SuccessCount
	}
	return 0
}

func (x *IdentityMappingEntryOperationMetadata) GetFailureCount() int64 {
	if x != nil {
		return x.FailureCount
	}
	return 0
}

func (x *IdentityMappingEntryOperationMetadata) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

// Metadata related to the progress of the
// [IdentityMappingStoreService.DeleteIdentityMappingStore][google.cloud.discoveryengine.v1.IdentityMappingStoreService.DeleteIdentityMappingStore]
// operation. This will be returned by the google.longrunning.Operation.metadata
// field.
type DeleteIdentityMappingStoreMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Operation create time.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Operation last update time. If the operation is done, this is also the
	// finish time.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *DeleteIdentityMappingStoreMetadata) Reset() {
	*x = DeleteIdentityMappingStoreMetadata{}
	mi := &file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteIdentityMappingStoreMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIdentityMappingStoreMetadata) ProtoMessage() {}

func (x *DeleteIdentityMappingStoreMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIdentityMappingStoreMetadata.ProtoReflect.Descriptor instead.
func (*DeleteIdentityMappingStoreMetadata) Descriptor() ([]byte, []int) {
	return file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteIdentityMappingStoreMetadata) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *DeleteIdentityMappingStoreMetadata) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// The inline source to import identity mapping entries from.
type ImportIdentityMappingsRequest_InlineSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A maximum of 10000 entries can be imported at one time
	IdentityMappingEntries []*IdentityMappingEntry `protobuf:"bytes,1,rep,name=identity_mapping_entries,json=identityMappingEntries,proto3" json:"identity_mapping_entries,omitempty"`
}

func (x *ImportIdentityMappingsRequest_InlineSource) Reset() {
	*x = ImportIdentityMappingsRequest_InlineSource{}
	mi := &file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportIdentityMappingsRequest_InlineSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportIdentityMappingsRequest_InlineSource) ProtoMessage() {}

func (x *ImportIdentityMappingsRequest_InlineSource) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportIdentityMappingsRequest_InlineSource.ProtoReflect.Descriptor instead.
func (*ImportIdentityMappingsRequest_InlineSource) Descriptor() ([]byte, []int) {
	return file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_rawDescGZIP(), []int{3, 0}
}

func (x *ImportIdentityMappingsRequest_InlineSource) GetIdentityMappingEntries() []*IdentityMappingEntry {
	if x != nil {
		return x.IdentityMappingEntries
	}
	return nil
}

// The inline source to purge identity mapping entries from.
type PurgeIdentityMappingsRequest_InlineSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A maximum of 10000 entries can be purged at one time
	IdentityMappingEntries []*IdentityMappingEntry `protobuf:"bytes,1,rep,name=identity_mapping_entries,json=identityMappingEntries,proto3" json:"identity_mapping_entries,omitempty"`
}

func (x *PurgeIdentityMappingsRequest_InlineSource) Reset() {
	*x = PurgeIdentityMappingsRequest_InlineSource{}
	mi := &file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PurgeIdentityMappingsRequest_InlineSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurgeIdentityMappingsRequest_InlineSource) ProtoMessage() {}

func (x *PurgeIdentityMappingsRequest_InlineSource) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurgeIdentityMappingsRequest_InlineSource.ProtoReflect.Descriptor instead.
func (*PurgeIdentityMappingsRequest_InlineSource) Descriptor() ([]byte, []int) {
	return file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_rawDescGZIP(), []int{5, 0}
}

func (x *PurgeIdentityMappingsRequest_InlineSource) GetIdentityMappingEntries() []*IdentityMappingEntry {
	if x != nil {
		return x.IdentityMappingEntries
	}
	return nil
}

var File_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto protoreflect.FileDescriptor

var file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_rawDesc = []byte{
	0x0a, 0x44, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xaf, 0x03, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x10, 0x63, 0x6d,
	0x65, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xfa, 0x41, 0x2b, 0x0a, 0x29, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x6d, 0x65, 0x6b, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x6d, 0x65, 0x6b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x63, 0x6d, 0x65, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6d, 0x65, 0x6b, 0x12, 0x47, 0x0a, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xe0, 0x41, 0x02,
	0xfa, 0x41, 0x29, 0x0a, 0x27, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x19, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x16, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x49, 0x64, 0x12, 0x70, 0x0a, 0x16, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x14, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x63, 0x6d, 0x65, 0x6b, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x71, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x35, 0x0a, 0x33,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x74, 0x0a, 0x21, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0xe0, 0x41,
	0x02, 0xfa, 0x41, 0x35, 0x0a, 0x33, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x91, 0x03, 0x0a, 0x1d, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x72, 0x0a, 0x0d, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x71, 0x0a, 0x16, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x35, 0x0a, 0x33, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x52, 0x14, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x1a, 0x7f, 0x0a, 0x0c, 0x49, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x6f, 0x0a, 0x18, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x16, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x22, 0x59, 0x0a, 0x1e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x22, 0xcc,
	0x03, 0x0a, 0x1c, 0x50, 0x75, 0x72, 0x67, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x71, 0x0a, 0x0d, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x72, 0x67, 0x65, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x71, 0x0a, 0x16, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x3b, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x35, 0x0a, 0x33, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52,
	0x14, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a,
	0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x05,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x7f, 0x0a, 0x0c, 0x49, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x6f, 0x0a, 0x18, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x16, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0xcc, 0x01,
	0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x71, 0x0a,
	0x16, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0xe0,
	0x41, 0x02, 0xfa, 0x41, 0x35, 0x0a, 0x33, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x14, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xb7, 0x01, 0x0a,
	0x1c, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a,
	0x18, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x16, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xa7, 0x01, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xe0, 0x41, 0x02,
	0xfa, 0x41, 0x29, 0x0a, 0x27, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0xba, 0x01, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x17, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x15,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x92, 0x01,
	0x0a, 0x25, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x9e, 0x01, 0x0a, 0x22, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x32, 0xd8, 0x10, 0x0a, 0x1b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0xad, 0x02, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x12, 0x42, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x22, 0x93, 0x01,
	0xda, 0x41, 0x37, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x2c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x53,
	0x3a, 0x16, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x22, 0x39, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a,
	0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x73, 0x12, 0xdb, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12,
	0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x22, 0x48, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x12, 0x39, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x2f, 0x2a,
	0x7d, 0x12, 0xa8, 0x02, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x12, 0x42, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f,
	0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xa6, 0x01, 0xca, 0x41, 0x5b, 0x0a, 0x15, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x42, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x3b, 0x2a, 0x39, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x2a, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xf2, 0x02, 0x0a,
	0x16, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf8, 0x01, 0xca, 0x41, 0x87, 0x01, 0x0a, 0x3e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x67, 0x3a, 0x01, 0x2a, 0x22, 0x62, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x2a, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0xc5, 0x02, 0x0a, 0x15, 0x50, 0x75, 0x72, 0x67, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75,
	0x72, 0x67, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xcd, 0x01, 0xca, 0x41, 0x5e, 0x0a,
	0x15, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x45, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x66, 0x3a, 0x01, 0x2a, 0x22, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73,
	0x2f, 0x2a, 0x7d, 0x3a, 0x70, 0x75, 0x72, 0x67, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0xfd, 0x01, 0x0a, 0x14, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x68, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x62, 0x12, 0x60, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0xee, 0x01, 0x0a, 0x19, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a,
	0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x12,
	0x39, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x1a, 0x52, 0xca, 0x41, 0x1e, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x2e,
	0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x93,
	0x02, 0x0a, 0x23, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x20, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4d, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x70, 0x62, 0x3b, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x70, 0x62, 0xa2, 0x02, 0x0f, 0x44, 0x49, 0x53, 0x43,
	0x4f, 0x56, 0x45, 0x52, 0x59, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0xaa, 0x02, 0x1f, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x1f,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5c, 0x56, 0x31, 0xea,
	0x02, 0x22, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a,
	0x3a, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_rawDescOnce sync.Once
	file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_rawDescData = file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_rawDesc
)

func file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_rawDescGZIP() []byte {
	file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_rawDescOnce.Do(func() {
		file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_rawDescData)
	})
	return file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_rawDescData
}

var file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_goTypes = []any{
	(*CreateIdentityMappingStoreRequest)(nil),          // 0: google.cloud.discoveryengine.v1.CreateIdentityMappingStoreRequest
	(*GetIdentityMappingStoreRequest)(nil),             // 1: google.cloud.discoveryengine.v1.GetIdentityMappingStoreRequest
	(*DeleteIdentityMappingStoreRequest)(nil),          // 2: google.cloud.discoveryengine.v1.DeleteIdentityMappingStoreRequest
	(*ImportIdentityMappingsRequest)(nil),              // 3: google.cloud.discoveryengine.v1.ImportIdentityMappingsRequest
	(*ImportIdentityMappingsResponse)(nil),             // 4: google.cloud.discoveryengine.v1.ImportIdentityMappingsResponse
	(*PurgeIdentityMappingsRequest)(nil),               // 5: google.cloud.discoveryengine.v1.PurgeIdentityMappingsRequest
	(*ListIdentityMappingsRequest)(nil),                // 6: google.cloud.discoveryengine.v1.ListIdentityMappingsRequest
	(*ListIdentityMappingsResponse)(nil),               // 7: google.cloud.discoveryengine.v1.ListIdentityMappingsResponse
	(*ListIdentityMappingStoresRequest)(nil),           // 8: google.cloud.discoveryengine.v1.ListIdentityMappingStoresRequest
	(*ListIdentityMappingStoresResponse)(nil),          // 9: google.cloud.discoveryengine.v1.ListIdentityMappingStoresResponse
	(*IdentityMappingEntryOperationMetadata)(nil),      // 10: google.cloud.discoveryengine.v1.IdentityMappingEntryOperationMetadata
	(*DeleteIdentityMappingStoreMetadata)(nil),         // 11: google.cloud.discoveryengine.v1.DeleteIdentityMappingStoreMetadata
	(*ImportIdentityMappingsRequest_InlineSource)(nil), // 12: google.cloud.discoveryengine.v1.ImportIdentityMappingsRequest.InlineSource
	(*PurgeIdentityMappingsRequest_InlineSource)(nil),  // 13: google.cloud.discoveryengine.v1.PurgeIdentityMappingsRequest.InlineSource
	(*IdentityMappingStore)(nil),                       // 14: google.cloud.discoveryengine.v1.IdentityMappingStore
	(*status.Status)(nil),                              // 15: google.rpc.Status
	(*IdentityMappingEntry)(nil),                       // 16: google.cloud.discoveryengine.v1.IdentityMappingEntry
	(*timestamppb.Timestamp)(nil),                      // 17: google.protobuf.Timestamp
	(*longrunningpb.Operation)(nil),                    // 18: google.longrunning.Operation
}
var file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_depIdxs = []int32{
	14, // 0: google.cloud.discoveryengine.v1.CreateIdentityMappingStoreRequest.identity_mapping_store:type_name -> google.cloud.discoveryengine.v1.IdentityMappingStore
	12, // 1: google.cloud.discoveryengine.v1.ImportIdentityMappingsRequest.inline_source:type_name -> google.cloud.discoveryengine.v1.ImportIdentityMappingsRequest.InlineSource
	15, // 2: google.cloud.discoveryengine.v1.ImportIdentityMappingsResponse.error_samples:type_name -> google.rpc.Status
	13, // 3: google.cloud.discoveryengine.v1.PurgeIdentityMappingsRequest.inline_source:type_name -> google.cloud.discoveryengine.v1.PurgeIdentityMappingsRequest.InlineSource
	16, // 4: google.cloud.discoveryengine.v1.ListIdentityMappingsResponse.identity_mapping_entries:type_name -> google.cloud.discoveryengine.v1.IdentityMappingEntry
	14, // 5: google.cloud.discoveryengine.v1.ListIdentityMappingStoresResponse.identity_mapping_stores:type_name -> google.cloud.discoveryengine.v1.IdentityMappingStore
	17, // 6: google.cloud.discoveryengine.v1.DeleteIdentityMappingStoreMetadata.create_time:type_name -> google.protobuf.Timestamp
	17, // 7: google.cloud.discoveryengine.v1.DeleteIdentityMappingStoreMetadata.update_time:type_name -> google.protobuf.Timestamp
	16, // 8: google.cloud.discoveryengine.v1.ImportIdentityMappingsRequest.InlineSource.identity_mapping_entries:type_name -> google.cloud.discoveryengine.v1.IdentityMappingEntry
	16, // 9: google.cloud.discoveryengine.v1.PurgeIdentityMappingsRequest.InlineSource.identity_mapping_entries:type_name -> google.cloud.discoveryengine.v1.IdentityMappingEntry
	0,  // 10: google.cloud.discoveryengine.v1.IdentityMappingStoreService.CreateIdentityMappingStore:input_type -> google.cloud.discoveryengine.v1.CreateIdentityMappingStoreRequest
	1,  // 11: google.cloud.discoveryengine.v1.IdentityMappingStoreService.GetIdentityMappingStore:input_type -> google.cloud.discoveryengine.v1.GetIdentityMappingStoreRequest
	2,  // 12: google.cloud.discoveryengine.v1.IdentityMappingStoreService.DeleteIdentityMappingStore:input_type -> google.cloud.discoveryengine.v1.DeleteIdentityMappingStoreRequest
	3,  // 13: google.cloud.discoveryengine.v1.IdentityMappingStoreService.ImportIdentityMappings:input_type -> google.cloud.discoveryengine.v1.ImportIdentityMappingsRequest
	5,  // 14: google.cloud.discoveryengine.v1.IdentityMappingStoreService.PurgeIdentityMappings:input_type -> google.cloud.discoveryengine.v1.PurgeIdentityMappingsRequest
	6,  // 15: google.cloud.discoveryengine.v1.IdentityMappingStoreService.ListIdentityMappings:input_type -> google.cloud.discoveryengine.v1.ListIdentityMappingsRequest
	8,  // 16: google.cloud.discoveryengine.v1.IdentityMappingStoreService.ListIdentityMappingStores:input_type -> google.cloud.discoveryengine.v1.ListIdentityMappingStoresRequest
	14, // 17: google.cloud.discoveryengine.v1.IdentityMappingStoreService.CreateIdentityMappingStore:output_type -> google.cloud.discoveryengine.v1.IdentityMappingStore
	14, // 18: google.cloud.discoveryengine.v1.IdentityMappingStoreService.GetIdentityMappingStore:output_type -> google.cloud.discoveryengine.v1.IdentityMappingStore
	18, // 19: google.cloud.discoveryengine.v1.IdentityMappingStoreService.DeleteIdentityMappingStore:output_type -> google.longrunning.Operation
	18, // 20: google.cloud.discoveryengine.v1.IdentityMappingStoreService.ImportIdentityMappings:output_type -> google.longrunning.Operation
	18, // 21: google.cloud.discoveryengine.v1.IdentityMappingStoreService.PurgeIdentityMappings:output_type -> google.longrunning.Operation
	7,  // 22: google.cloud.discoveryengine.v1.IdentityMappingStoreService.ListIdentityMappings:output_type -> google.cloud.discoveryengine.v1.ListIdentityMappingsResponse
	9,  // 23: google.cloud.discoveryengine.v1.IdentityMappingStoreService.ListIdentityMappingStores:output_type -> google.cloud.discoveryengine.v1.ListIdentityMappingStoresResponse
	17, // [17:24] is the sub-list for method output_type
	10, // [10:17] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_init() }
func file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_init() {
	if File_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto != nil {
		return
	}
	file_google_cloud_discoveryengine_v1_identity_mapping_store_proto_init()
	file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_msgTypes[0].OneofWrappers = []any{
		(*CreateIdentityMappingStoreRequest_CmekConfigName)(nil),
		(*CreateIdentityMappingStoreRequest_DisableCmek)(nil),
	}
	file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_msgTypes[3].OneofWrappers = []any{
		(*ImportIdentityMappingsRequest_InlineSource_)(nil),
	}
	file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_msgTypes[5].OneofWrappers = []any{
		(*PurgeIdentityMappingsRequest_InlineSource_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_goTypes,
		DependencyIndexes: file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_depIdxs,
		MessageInfos:      file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_msgTypes,
	}.Build()
	File_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto = out.File
	file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_rawDesc = nil
	file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_goTypes = nil
	file_google_cloud_discoveryengine_v1_identity_mapping_store_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// IdentityMappingStoreServiceClient is the client API for IdentityMappingStoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IdentityMappingStoreServiceClient interface {
	// Creates a new Identity Mapping Store.
	CreateIdentityMappingStore(ctx context.Context, in *CreateIdentityMappingStoreRequest, opts ...grpc.CallOption) (*IdentityMappingStore, error)
	// Gets the Identity Mapping Store.
	GetIdentityMappingStore(ctx context.Context, in *GetIdentityMappingStoreRequest, opts ...grpc.CallOption) (*IdentityMappingStore, error)
	// Deletes the Identity Mapping Store.
	DeleteIdentityMappingStore(ctx context.Context, in *DeleteIdentityMappingStoreRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Imports a list of Identity Mapping Entries to an Identity Mapping Store.
	ImportIdentityMappings(ctx context.Context, in *ImportIdentityMappingsRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Purges specified or all Identity Mapping Entries from an Identity Mapping
	// Store.
	PurgeIdentityMappings(ctx context.Context, in *PurgeIdentityMappingsRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists Identity Mappings in an Identity Mapping Store.
	ListIdentityMappings(ctx context.Context, in *ListIdentityMappingsRequest, opts ...grpc.CallOption) (*ListIdentityMappingsResponse, error)
	// Lists all Identity Mapping Stores.
	ListIdentityMappingStores(ctx context.Context, in *ListIdentityMappingStoresRequest, opts ...grpc.CallOption) (*ListIdentityMappingStoresResponse, error)
}

type identityMappingStoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIdentityMappingStoreServiceClient(cc grpc.ClientConnInterface) IdentityMappingStoreServiceClient {
	return &identityMappingStoreServiceClient{cc}
}

func (c *identityMappingStoreServiceClient) CreateIdentityMappingStore(ctx context.Context, in *CreateIdentityMappingStoreRequest, opts ...grpc.CallOption) (*IdentityMappingStore, error) {
	out := new(IdentityMappingStore)
	err := c.cc.Invoke(ctx, "/google.cloud.discoveryengine.v1.IdentityMappingStoreService/CreateIdentityMappingStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityMappingStoreServiceClient) GetIdentityMappingStore(ctx context.Context, in *GetIdentityMappingStoreRequest, opts ...grpc.CallOption) (*IdentityMappingStore, error) {
	out := new(IdentityMappingStore)
	err := c.cc.Invoke(ctx, "/google.cloud.discoveryengine.v1.IdentityMappingStoreService/GetIdentityMappingStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityMappingStoreServiceClient) DeleteIdentityMappingStore(ctx context.Context, in *DeleteIdentityMappingStoreRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.discoveryengine.v1.IdentityMappingStoreService/DeleteIdentityMappingStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityMappingStoreServiceClient) ImportIdentityMappings(ctx context.Context, in *ImportIdentityMappingsRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.discoveryengine.v1.IdentityMappingStoreService/ImportIdentityMappings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityMappingStoreServiceClient) PurgeIdentityMappings(ctx context.Context, in *PurgeIdentityMappingsRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.discoveryengine.v1.IdentityMappingStoreService/PurgeIdentityMappings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityMappingStoreServiceClient) ListIdentityMappings(ctx context.Context, in *ListIdentityMappingsRequest, opts ...grpc.CallOption) (*ListIdentityMappingsResponse, error) {
	out := new(ListIdentityMappingsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.discoveryengine.v1.IdentityMappingStoreService/ListIdentityMappings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityMappingStoreServiceClient) ListIdentityMappingStores(ctx context.Context, in *ListIdentityMappingStoresRequest, opts ...grpc.CallOption) (*ListIdentityMappingStoresResponse, error) {
	out := new(ListIdentityMappingStoresResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.discoveryengine.v1.IdentityMappingStoreService/ListIdentityMappingStores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdentityMappingStoreServiceServer is the server API for IdentityMappingStoreService service.
type IdentityMappingStoreServiceServer interface {
	// Creates a new Identity Mapping Store.
	CreateIdentityMappingStore(context.Context, *CreateIdentityMappingStoreRequest) (*IdentityMappingStore, error)
	// Gets the Identity Mapping Store.
	GetIdentityMappingStore(context.Context, *GetIdentityMappingStoreRequest) (*IdentityMappingStore, error)
	// Deletes the Identity Mapping Store.
	DeleteIdentityMappingStore(context.Context, *DeleteIdentityMappingStoreRequest) (*longrunningpb.Operation, error)
	// Imports a list of Identity Mapping Entries to an Identity Mapping Store.
	ImportIdentityMappings(context.Context, *ImportIdentityMappingsRequest) (*longrunningpb.Operation, error)
	// Purges specified or all Identity Mapping Entries from an Identity Mapping
	// Store.
	PurgeIdentityMappings(context.Context, *PurgeIdentityMappingsRequest) (*longrunningpb.Operation, error)
	// Lists Identity Mappings in an Identity Mapping Store.
	ListIdentityMappings(context.Context, *ListIdentityMappingsRequest) (*ListIdentityMappingsResponse, error)
	// Lists all Identity Mapping Stores.
	ListIdentityMappingStores(context.Context, *ListIdentityMappingStoresRequest) (*ListIdentityMappingStoresResponse, error)
}

// UnimplementedIdentityMappingStoreServiceServer can be embedded to have forward compatible implementations.
type UnimplementedIdentityMappingStoreServiceServer struct {
}

func (*UnimplementedIdentityMappingStoreServiceServer) CreateIdentityMappingStore(context.Context, *CreateIdentityMappingStoreRequest) (*IdentityMappingStore, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateIdentityMappingStore not implemented")
}
func (*UnimplementedIdentityMappingStoreServiceServer) GetIdentityMappingStore(context.Context, *GetIdentityMappingStoreRequest) (*IdentityMappingStore, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetIdentityMappingStore not implemented")
}
func (*UnimplementedIdentityMappingStoreServiceServer) DeleteIdentityMappingStore(context.Context, *DeleteIdentityMappingStoreRequest) (*longrunningpb.Operation, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteIdentityMappingStore not implemented")
}
func (*UnimplementedIdentityMappingStoreServiceServer) ImportIdentityMappings(context.Context, *ImportIdentityMappingsRequest) (*longrunningpb.Operation, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ImportIdentityMappings not implemented")
}
func (*UnimplementedIdentityMappingStoreServiceServer) PurgeIdentityMappings(context.Context, *PurgeIdentityMappingsRequest) (*longrunningpb.Operation, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PurgeIdentityMappings not implemented")
}
func (*UnimplementedIdentityMappingStoreServiceServer) ListIdentityMappings(context.Context, *ListIdentityMappingsRequest) (*ListIdentityMappingsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListIdentityMappings not implemented")
}
func (*UnimplementedIdentityMappingStoreServiceServer) ListIdentityMappingStores(context.Context, *ListIdentityMappingStoresRequest) (*ListIdentityMappingStoresResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListIdentityMappingStores not implemented")
}

func RegisterIdentityMappingStoreServiceServer(s *grpc.Server, srv IdentityMappingStoreServiceServer) {
	s.RegisterService(&_IdentityMappingStoreService_serviceDesc, srv)
}

func _IdentityMappingStoreService_CreateIdentityMappingStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIdentityMappingStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityMappingStoreServiceServer).CreateIdentityMappingStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.discoveryengine.v1.IdentityMappingStoreService/CreateIdentityMappingStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityMappingStoreServiceServer).CreateIdentityMappingStore(ctx, req.(*CreateIdentityMappingStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityMappingStoreService_GetIdentityMappingStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIdentityMappingStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityMappingStoreServiceServer).GetIdentityMappingStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.discoveryengine.v1.IdentityMappingStoreService/GetIdentityMappingStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityMappingStoreServiceServer).GetIdentityMappingStore(ctx, req.(*GetIdentityMappingStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityMappingStoreService_DeleteIdentityMappingStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIdentityMappingStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityMappingStoreServiceServer).DeleteIdentityMappingStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.discoveryengine.v1.IdentityMappingStoreService/DeleteIdentityMappingStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityMappingStoreServiceServer).DeleteIdentityMappingStore(ctx, req.(*DeleteIdentityMappingStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityMappingStoreService_ImportIdentityMappings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportIdentityMappingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityMappingStoreServiceServer).ImportIdentityMappings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.discoveryengine.v1.IdentityMappingStoreService/ImportIdentityMappings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityMappingStoreServiceServer).ImportIdentityMappings(ctx, req.(*ImportIdentityMappingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityMappingStoreService_PurgeIdentityMappings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgeIdentityMappingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityMappingStoreServiceServer).PurgeIdentityMappings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.discoveryengine.v1.IdentityMappingStoreService/PurgeIdentityMappings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityMappingStoreServiceServer).PurgeIdentityMappings(ctx, req.(*PurgeIdentityMappingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityMappingStoreService_ListIdentityMappings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIdentityMappingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityMappingStoreServiceServer).ListIdentityMappings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.discoveryengine.v1.IdentityMappingStoreService/ListIdentityMappings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityMappingStoreServiceServer).ListIdentityMappings(ctx, req.(*ListIdentityMappingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityMappingStoreService_ListIdentityMappingStores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIdentityMappingStoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityMappingStoreServiceServer).ListIdentityMappingStores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.discoveryengine.v1.IdentityMappingStoreService/ListIdentityMappingStores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityMappingStoreServiceServer).ListIdentityMappingStores(ctx, req.(*ListIdentityMappingStoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IdentityMappingStoreService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.discoveryengine.v1.IdentityMappingStoreService",
	HandlerType: (*IdentityMappingStoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIdentityMappingStore",
			Handler:    _IdentityMappingStoreService_CreateIdentityMappingStore_Handler,
		},
		{
			MethodName: "GetIdentityMappingStore",
			Handler:    _IdentityMappingStoreService_GetIdentityMappingStore_Handler,
		},
		{
			MethodName: "DeleteIdentityMappingStore",
			Handler:    _IdentityMappingStoreService_DeleteIdentityMappingStore_Handler,
		},
		{
			MethodName: "ImportIdentityMappings",
			Handler:    _IdentityMappingStoreService_ImportIdentityMappings_Handler,
		},
		{
			MethodName: "PurgeIdentityMappings",
			Handler:    _IdentityMappingStoreService_PurgeIdentityMappings_Handler,
		},
		{
			MethodName: "ListIdentityMappings",
			Handler:    _IdentityMappingStoreService_ListIdentityMappings_Handler,
		},
		{
			MethodName: "ListIdentityMappingStores",
			Handler:    _IdentityMappingStoreService_ListIdentityMappingStores_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/discoveryengine/v1/identity_mapping_store_service.proto",
}
