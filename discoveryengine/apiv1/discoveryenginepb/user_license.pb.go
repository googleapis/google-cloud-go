// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.7
// source: google/cloud/discoveryengine/v1/user_license.proto

package discoveryenginepb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// License assignment state enumeration.
type UserLicense_LicenseAssignmentState int32

const (
	// Default value.
	UserLicense_LICENSE_ASSIGNMENT_STATE_UNSPECIFIED UserLicense_LicenseAssignmentState = 0
	// License assigned to the user.
	UserLicense_ASSIGNED UserLicense_LicenseAssignmentState = 1
	// No license assigned to the user.
	// Deprecated, translated to NO_LICENSE.
	UserLicense_UNASSIGNED UserLicense_LicenseAssignmentState = 2
	// No license assigned to the user.
	UserLicense_NO_LICENSE UserLicense_LicenseAssignmentState = 3
	// User attempted to login but no license assigned to the user.
	// This state is only used for no user first time login attempt but cannot
	// get license assigned.
	// Users already logged in but cannot get license assigned will be assigned
	// NO_LICENSE state(License could be unassigned by admin).
	UserLicense_NO_LICENSE_ATTEMPTED_LOGIN UserLicense_LicenseAssignmentState = 4
)

// Enum value maps for UserLicense_LicenseAssignmentState.
var (
	UserLicense_LicenseAssignmentState_name = map[int32]string{
		0: "LICENSE_ASSIGNMENT_STATE_UNSPECIFIED",
		1: "ASSIGNED",
		2: "UNASSIGNED",
		3: "NO_LICENSE",
		4: "NO_LICENSE_ATTEMPTED_LOGIN",
	}
	UserLicense_LicenseAssignmentState_value = map[string]int32{
		"LICENSE_ASSIGNMENT_STATE_UNSPECIFIED": 0,
		"ASSIGNED":                             1,
		"UNASSIGNED":                           2,
		"NO_LICENSE":                           3,
		"NO_LICENSE_ATTEMPTED_LOGIN":           4,
	}
)

func (x UserLicense_LicenseAssignmentState) Enum() *UserLicense_LicenseAssignmentState {
	p := new(UserLicense_LicenseAssignmentState)
	*p = x
	return p
}

func (x UserLicense_LicenseAssignmentState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserLicense_LicenseAssignmentState) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_discoveryengine_v1_user_license_proto_enumTypes[0].Descriptor()
}

func (UserLicense_LicenseAssignmentState) Type() protoreflect.EnumType {
	return &file_google_cloud_discoveryengine_v1_user_license_proto_enumTypes[0]
}

func (x UserLicense_LicenseAssignmentState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserLicense_LicenseAssignmentState.Descriptor instead.
func (UserLicense_LicenseAssignmentState) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_discoveryengine_v1_user_license_proto_rawDescGZIP(), []int{0, 0}
}

// User License information assigned by the admin.
type UserLicense struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Immutable. The user principal of the User, could be email address
	// or other prinical identifier. This field is immutable. Admin assign
	// licenses based on the user principal.
	UserPrincipal string `protobuf:"bytes,1,opt,name=user_principal,json=userPrincipal,proto3" json:"user_principal,omitempty"`
	// Optional. The user profile.
	// We user user full name(First name + Last name) as user profile.
	UserProfile string `protobuf:"bytes,3,opt,name=user_profile,json=userProfile,proto3" json:"user_profile,omitempty"`
	// Output only. License assignment state of the user.
	// If the user is assigned with a license config, the user loggin will be
	// assigned with the license;
	// If the user's license assignment state is unassigned or unspecified, no
	// license config will be associated to the user;
	LicenseAssignmentState UserLicense_LicenseAssignmentState `protobuf:"varint,4,opt,name=license_assignment_state,json=licenseAssignmentState,proto3,enum=google.cloud.discoveryengine.v1.UserLicense_LicenseAssignmentState" json:"license_assignment_state,omitempty"`
	// Optional. The full resource name of the Subscription(LicenseConfig)
	// assigned to the user.
	LicenseConfig string `protobuf:"bytes,5,opt,name=license_config,json=licenseConfig,proto3" json:"license_config,omitempty"`
	// Output only. User created timestamp.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. User update timestamp.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. User last logged in time.
	// If the user has not logged in yet, this field will be empty.
	LastLoginTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=last_login_time,json=lastLoginTime,proto3" json:"last_login_time,omitempty"`
}

func (x *UserLicense) Reset() {
	*x = UserLicense{}
	mi := &file_google_cloud_discoveryengine_v1_user_license_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserLicense) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLicense) ProtoMessage() {}

func (x *UserLicense) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_discoveryengine_v1_user_license_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLicense.ProtoReflect.Descriptor instead.
func (*UserLicense) Descriptor() ([]byte, []int) {
	return file_google_cloud_discoveryengine_v1_user_license_proto_rawDescGZIP(), []int{0}
}

func (x *UserLicense) GetUserPrincipal() string {
	if x != nil {
		return x.UserPrincipal
	}
	return ""
}

func (x *UserLicense) GetUserProfile() string {
	if x != nil {
		return x.UserProfile
	}
	return ""
}

func (x *UserLicense) GetLicenseAssignmentState() UserLicense_LicenseAssignmentState {
	if x != nil {
		return x.LicenseAssignmentState
	}
	return UserLicense_LICENSE_ASSIGNMENT_STATE_UNSPECIFIED
}

func (x *UserLicense) GetLicenseConfig() string {
	if x != nil {
		return x.LicenseConfig
	}
	return ""
}

func (x *UserLicense) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *UserLicense) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *UserLicense) GetLastLoginTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastLoginTime
	}
	return nil
}

var File_google_cloud_discoveryengine_v1_user_license_proto protoreflect.FileDescriptor

var file_google_cloud_discoveryengine_v1_user_license_proto_rawDesc = []byte{
	0x0a, 0x32, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xa6, 0x05, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x12, 0x2d, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63,
	0x69, 0x70, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe0, 0x41, 0x05, 0xe0,
	0x41, 0x02, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61,
	0x6c, 0x12, 0x26, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x18, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x16, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x5b,
	0x0a, 0x0e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0xe0, 0x41, 0x01, 0xfa, 0x41, 0x2e, 0x0a, 0x2c,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x40, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x47, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x24, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x41,
	0x53, 0x53, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x55,
	0x4e, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x4e,
	0x4f, 0x5f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x4e,
	0x4f, 0x5f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x4d, 0x50,
	0x54, 0x45, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x04, 0x42, 0x83, 0x02, 0x0a, 0x23,
	0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x42, 0x10, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x70, 0x62, 0x3b, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x70, 0x62, 0xa2, 0x02, 0x0f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45,
	0x52, 0x59, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0xaa, 0x02, 0x1f, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x1f, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x5c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5c, 0x56, 0x31, 0xea, 0x02, 0x22, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x3a, 0x3a, 0x56,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_discoveryengine_v1_user_license_proto_rawDescOnce sync.Once
	file_google_cloud_discoveryengine_v1_user_license_proto_rawDescData = file_google_cloud_discoveryengine_v1_user_license_proto_rawDesc
)

func file_google_cloud_discoveryengine_v1_user_license_proto_rawDescGZIP() []byte {
	file_google_cloud_discoveryengine_v1_user_license_proto_rawDescOnce.Do(func() {
		file_google_cloud_discoveryengine_v1_user_license_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_discoveryengine_v1_user_license_proto_rawDescData)
	})
	return file_google_cloud_discoveryengine_v1_user_license_proto_rawDescData
}

var file_google_cloud_discoveryengine_v1_user_license_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_google_cloud_discoveryengine_v1_user_license_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_google_cloud_discoveryengine_v1_user_license_proto_goTypes = []any{
	(UserLicense_LicenseAssignmentState)(0), // 0: google.cloud.discoveryengine.v1.UserLicense.LicenseAssignmentState
	(*UserLicense)(nil),                     // 1: google.cloud.discoveryengine.v1.UserLicense
	(*timestamppb.Timestamp)(nil),           // 2: google.protobuf.Timestamp
}
var file_google_cloud_discoveryengine_v1_user_license_proto_depIdxs = []int32{
	0, // 0: google.cloud.discoveryengine.v1.UserLicense.license_assignment_state:type_name -> google.cloud.discoveryengine.v1.UserLicense.LicenseAssignmentState
	2, // 1: google.cloud.discoveryengine.v1.UserLicense.create_time:type_name -> google.protobuf.Timestamp
	2, // 2: google.cloud.discoveryengine.v1.UserLicense.update_time:type_name -> google.protobuf.Timestamp
	2, // 3: google.cloud.discoveryengine.v1.UserLicense.last_login_time:type_name -> google.protobuf.Timestamp
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_google_cloud_discoveryengine_v1_user_license_proto_init() }
func file_google_cloud_discoveryengine_v1_user_license_proto_init() {
	if File_google_cloud_discoveryengine_v1_user_license_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_discoveryengine_v1_user_license_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_cloud_discoveryengine_v1_user_license_proto_goTypes,
		DependencyIndexes: file_google_cloud_discoveryengine_v1_user_license_proto_depIdxs,
		EnumInfos:         file_google_cloud_discoveryengine_v1_user_license_proto_enumTypes,
		MessageInfos:      file_google_cloud_discoveryengine_v1_user_license_proto_msgTypes,
	}.Build()
	File_google_cloud_discoveryengine_v1_user_license_proto = out.File
	file_google_cloud_discoveryengine_v1_user_license_proto_rawDesc = nil
	file_google_cloud_discoveryengine_v1_user_license_proto_goTypes = nil
	file_google_cloud_discoveryengine_v1_user_license_proto_depIdxs = nil
}
