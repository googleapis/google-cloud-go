// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/discoveryengine/v1/identity_mapping_store_service.proto

package discoveryenginepb

import (
	context "context"

	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	IdentityMappingStoreService_CreateIdentityMappingStore_FullMethodName = "/google.cloud.discoveryengine.v1.IdentityMappingStoreService/CreateIdentityMappingStore"
	IdentityMappingStoreService_GetIdentityMappingStore_FullMethodName    = "/google.cloud.discoveryengine.v1.IdentityMappingStoreService/GetIdentityMappingStore"
	IdentityMappingStoreService_DeleteIdentityMappingStore_FullMethodName = "/google.cloud.discoveryengine.v1.IdentityMappingStoreService/DeleteIdentityMappingStore"
	IdentityMappingStoreService_ImportIdentityMappings_FullMethodName     = "/google.cloud.discoveryengine.v1.IdentityMappingStoreService/ImportIdentityMappings"
	IdentityMappingStoreService_PurgeIdentityMappings_FullMethodName      = "/google.cloud.discoveryengine.v1.IdentityMappingStoreService/PurgeIdentityMappings"
	IdentityMappingStoreService_ListIdentityMappings_FullMethodName       = "/google.cloud.discoveryengine.v1.IdentityMappingStoreService/ListIdentityMappings"
	IdentityMappingStoreService_ListIdentityMappingStores_FullMethodName  = "/google.cloud.discoveryengine.v1.IdentityMappingStoreService/ListIdentityMappingStores"
)

// IdentityMappingStoreServiceClient is the client API for IdentityMappingStoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IdentityMappingStoreServiceClient interface {
	// Creates a new Identity Mapping Store.
	CreateIdentityMappingStore(ctx context.Context, in *CreateIdentityMappingStoreRequest, opts ...grpc.CallOption) (*IdentityMappingStore, error)
	// Gets the Identity Mapping Store.
	GetIdentityMappingStore(ctx context.Context, in *GetIdentityMappingStoreRequest, opts ...grpc.CallOption) (*IdentityMappingStore, error)
	// Deletes the Identity Mapping Store.
	DeleteIdentityMappingStore(ctx context.Context, in *DeleteIdentityMappingStoreRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Imports a list of Identity Mapping Entries to an Identity Mapping Store.
	ImportIdentityMappings(ctx context.Context, in *ImportIdentityMappingsRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Purges specified or all Identity Mapping Entries from an Identity Mapping
	// Store.
	PurgeIdentityMappings(ctx context.Context, in *PurgeIdentityMappingsRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists Identity Mappings in an Identity Mapping Store.
	ListIdentityMappings(ctx context.Context, in *ListIdentityMappingsRequest, opts ...grpc.CallOption) (*ListIdentityMappingsResponse, error)
	// Lists all Identity Mapping Stores.
	ListIdentityMappingStores(ctx context.Context, in *ListIdentityMappingStoresRequest, opts ...grpc.CallOption) (*ListIdentityMappingStoresResponse, error)
}

type identityMappingStoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIdentityMappingStoreServiceClient(cc grpc.ClientConnInterface) IdentityMappingStoreServiceClient {
	return &identityMappingStoreServiceClient{cc}
}

func (c *identityMappingStoreServiceClient) CreateIdentityMappingStore(ctx context.Context, in *CreateIdentityMappingStoreRequest, opts ...grpc.CallOption) (*IdentityMappingStore, error) {
	out := new(IdentityMappingStore)
	err := c.cc.Invoke(ctx, IdentityMappingStoreService_CreateIdentityMappingStore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityMappingStoreServiceClient) GetIdentityMappingStore(ctx context.Context, in *GetIdentityMappingStoreRequest, opts ...grpc.CallOption) (*IdentityMappingStore, error) {
	out := new(IdentityMappingStore)
	err := c.cc.Invoke(ctx, IdentityMappingStoreService_GetIdentityMappingStore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityMappingStoreServiceClient) DeleteIdentityMappingStore(ctx context.Context, in *DeleteIdentityMappingStoreRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, IdentityMappingStoreService_DeleteIdentityMappingStore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityMappingStoreServiceClient) ImportIdentityMappings(ctx context.Context, in *ImportIdentityMappingsRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, IdentityMappingStoreService_ImportIdentityMappings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityMappingStoreServiceClient) PurgeIdentityMappings(ctx context.Context, in *PurgeIdentityMappingsRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, IdentityMappingStoreService_PurgeIdentityMappings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityMappingStoreServiceClient) ListIdentityMappings(ctx context.Context, in *ListIdentityMappingsRequest, opts ...grpc.CallOption) (*ListIdentityMappingsResponse, error) {
	out := new(ListIdentityMappingsResponse)
	err := c.cc.Invoke(ctx, IdentityMappingStoreService_ListIdentityMappings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityMappingStoreServiceClient) ListIdentityMappingStores(ctx context.Context, in *ListIdentityMappingStoresRequest, opts ...grpc.CallOption) (*ListIdentityMappingStoresResponse, error) {
	out := new(ListIdentityMappingStoresResponse)
	err := c.cc.Invoke(ctx, IdentityMappingStoreService_ListIdentityMappingStores_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdentityMappingStoreServiceServer is the server API for IdentityMappingStoreService service.
// All implementations should embed UnimplementedIdentityMappingStoreServiceServer
// for forward compatibility
type IdentityMappingStoreServiceServer interface {
	// Creates a new Identity Mapping Store.
	CreateIdentityMappingStore(context.Context, *CreateIdentityMappingStoreRequest) (*IdentityMappingStore, error)
	// Gets the Identity Mapping Store.
	GetIdentityMappingStore(context.Context, *GetIdentityMappingStoreRequest) (*IdentityMappingStore, error)
	// Deletes the Identity Mapping Store.
	DeleteIdentityMappingStore(context.Context, *DeleteIdentityMappingStoreRequest) (*longrunningpb.Operation, error)
	// Imports a list of Identity Mapping Entries to an Identity Mapping Store.
	ImportIdentityMappings(context.Context, *ImportIdentityMappingsRequest) (*longrunningpb.Operation, error)
	// Purges specified or all Identity Mapping Entries from an Identity Mapping
	// Store.
	PurgeIdentityMappings(context.Context, *PurgeIdentityMappingsRequest) (*longrunningpb.Operation, error)
	// Lists Identity Mappings in an Identity Mapping Store.
	ListIdentityMappings(context.Context, *ListIdentityMappingsRequest) (*ListIdentityMappingsResponse, error)
	// Lists all Identity Mapping Stores.
	ListIdentityMappingStores(context.Context, *ListIdentityMappingStoresRequest) (*ListIdentityMappingStoresResponse, error)
}

// UnimplementedIdentityMappingStoreServiceServer should be embedded to have forward compatible implementations.
type UnimplementedIdentityMappingStoreServiceServer struct {
}

func (UnimplementedIdentityMappingStoreServiceServer) CreateIdentityMappingStore(context.Context, *CreateIdentityMappingStoreRequest) (*IdentityMappingStore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIdentityMappingStore not implemented")
}
func (UnimplementedIdentityMappingStoreServiceServer) GetIdentityMappingStore(context.Context, *GetIdentityMappingStoreRequest) (*IdentityMappingStore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdentityMappingStore not implemented")
}
func (UnimplementedIdentityMappingStoreServiceServer) DeleteIdentityMappingStore(context.Context, *DeleteIdentityMappingStoreRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIdentityMappingStore not implemented")
}
func (UnimplementedIdentityMappingStoreServiceServer) ImportIdentityMappings(context.Context, *ImportIdentityMappingsRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportIdentityMappings not implemented")
}
func (UnimplementedIdentityMappingStoreServiceServer) PurgeIdentityMappings(context.Context, *PurgeIdentityMappingsRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurgeIdentityMappings not implemented")
}
func (UnimplementedIdentityMappingStoreServiceServer) ListIdentityMappings(context.Context, *ListIdentityMappingsRequest) (*ListIdentityMappingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIdentityMappings not implemented")
}
func (UnimplementedIdentityMappingStoreServiceServer) ListIdentityMappingStores(context.Context, *ListIdentityMappingStoresRequest) (*ListIdentityMappingStoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIdentityMappingStores not implemented")
}

// UnsafeIdentityMappingStoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IdentityMappingStoreServiceServer will
// result in compilation errors.
type UnsafeIdentityMappingStoreServiceServer interface {
	mustEmbedUnimplementedIdentityMappingStoreServiceServer()
}

func RegisterIdentityMappingStoreServiceServer(s grpc.ServiceRegistrar, srv IdentityMappingStoreServiceServer) {
	s.RegisterService(&IdentityMappingStoreService_ServiceDesc, srv)
}

func _IdentityMappingStoreService_CreateIdentityMappingStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIdentityMappingStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityMappingStoreServiceServer).CreateIdentityMappingStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityMappingStoreService_CreateIdentityMappingStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityMappingStoreServiceServer).CreateIdentityMappingStore(ctx, req.(*CreateIdentityMappingStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityMappingStoreService_GetIdentityMappingStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIdentityMappingStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityMappingStoreServiceServer).GetIdentityMappingStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityMappingStoreService_GetIdentityMappingStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityMappingStoreServiceServer).GetIdentityMappingStore(ctx, req.(*GetIdentityMappingStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityMappingStoreService_DeleteIdentityMappingStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIdentityMappingStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityMappingStoreServiceServer).DeleteIdentityMappingStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityMappingStoreService_DeleteIdentityMappingStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityMappingStoreServiceServer).DeleteIdentityMappingStore(ctx, req.(*DeleteIdentityMappingStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityMappingStoreService_ImportIdentityMappings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportIdentityMappingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityMappingStoreServiceServer).ImportIdentityMappings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityMappingStoreService_ImportIdentityMappings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityMappingStoreServiceServer).ImportIdentityMappings(ctx, req.(*ImportIdentityMappingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityMappingStoreService_PurgeIdentityMappings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgeIdentityMappingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityMappingStoreServiceServer).PurgeIdentityMappings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityMappingStoreService_PurgeIdentityMappings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityMappingStoreServiceServer).PurgeIdentityMappings(ctx, req.(*PurgeIdentityMappingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityMappingStoreService_ListIdentityMappings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIdentityMappingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityMappingStoreServiceServer).ListIdentityMappings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityMappingStoreService_ListIdentityMappings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityMappingStoreServiceServer).ListIdentityMappings(ctx, req.(*ListIdentityMappingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityMappingStoreService_ListIdentityMappingStores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIdentityMappingStoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityMappingStoreServiceServer).ListIdentityMappingStores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityMappingStoreService_ListIdentityMappingStores_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityMappingStoreServiceServer).ListIdentityMappingStores(ctx, req.(*ListIdentityMappingStoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IdentityMappingStoreService_ServiceDesc is the grpc.ServiceDesc for IdentityMappingStoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IdentityMappingStoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.discoveryengine.v1.IdentityMappingStoreService",
	HandlerType: (*IdentityMappingStoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIdentityMappingStore",
			Handler:    _IdentityMappingStoreService_CreateIdentityMappingStore_Handler,
		},
		{
			MethodName: "GetIdentityMappingStore",
			Handler:    _IdentityMappingStoreService_GetIdentityMappingStore_Handler,
		},
		{
			MethodName: "DeleteIdentityMappingStore",
			Handler:    _IdentityMappingStoreService_DeleteIdentityMappingStore_Handler,
		},
		{
			MethodName: "ImportIdentityMappings",
			Handler:    _IdentityMappingStoreService_ImportIdentityMappings_Handler,
		},
		{
			MethodName: "PurgeIdentityMappings",
			Handler:    _IdentityMappingStoreService_PurgeIdentityMappings_Handler,
		},
		{
			MethodName: "ListIdentityMappings",
			Handler:    _IdentityMappingStoreService_ListIdentityMappings_Handler,
		},
		{
			MethodName: "ListIdentityMappingStores",
			Handler:    _IdentityMappingStoreService_ListIdentityMappingStores_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/discoveryengine/v1/identity_mapping_store_service.proto",
}
