// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/discoveryengine/v1/user_license_service.proto

package discoveryenginepb

import (
	context "context"

	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserLicenseService_ListUserLicenses_FullMethodName        = "/google.cloud.discoveryengine.v1.UserLicenseService/ListUserLicenses"
	UserLicenseService_BatchUpdateUserLicenses_FullMethodName = "/google.cloud.discoveryengine.v1.UserLicenseService/BatchUpdateUserLicenses"
)

// UserLicenseServiceClient is the client API for UserLicenseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserLicenseServiceClient interface {
	// Lists the User Licenses.
	ListUserLicenses(ctx context.Context, in *ListUserLicensesRequest, opts ...grpc.CallOption) (*ListUserLicensesResponse, error)
	// Updates the User License.
	// This method is used for batch assign/unassign licenses to users.
	BatchUpdateUserLicenses(ctx context.Context, in *BatchUpdateUserLicensesRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type userLicenseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserLicenseServiceClient(cc grpc.ClientConnInterface) UserLicenseServiceClient {
	return &userLicenseServiceClient{cc}
}

func (c *userLicenseServiceClient) ListUserLicenses(ctx context.Context, in *ListUserLicensesRequest, opts ...grpc.CallOption) (*ListUserLicensesResponse, error) {
	out := new(ListUserLicensesResponse)
	err := c.cc.Invoke(ctx, UserLicenseService_ListUserLicenses_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userLicenseServiceClient) BatchUpdateUserLicenses(ctx context.Context, in *BatchUpdateUserLicensesRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, UserLicenseService_BatchUpdateUserLicenses_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserLicenseServiceServer is the server API for UserLicenseService service.
// All implementations should embed UnimplementedUserLicenseServiceServer
// for forward compatibility
type UserLicenseServiceServer interface {
	// Lists the User Licenses.
	ListUserLicenses(context.Context, *ListUserLicensesRequest) (*ListUserLicensesResponse, error)
	// Updates the User License.
	// This method is used for batch assign/unassign licenses to users.
	BatchUpdateUserLicenses(context.Context, *BatchUpdateUserLicensesRequest) (*longrunningpb.Operation, error)
}

// UnimplementedUserLicenseServiceServer should be embedded to have forward compatible implementations.
type UnimplementedUserLicenseServiceServer struct {
}

func (UnimplementedUserLicenseServiceServer) ListUserLicenses(context.Context, *ListUserLicensesRequest) (*ListUserLicensesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserLicenses not implemented")
}
func (UnimplementedUserLicenseServiceServer) BatchUpdateUserLicenses(context.Context, *BatchUpdateUserLicensesRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpdateUserLicenses not implemented")
}

// UnsafeUserLicenseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserLicenseServiceServer will
// result in compilation errors.
type UnsafeUserLicenseServiceServer interface {
	mustEmbedUnimplementedUserLicenseServiceServer()
}

func RegisterUserLicenseServiceServer(s grpc.ServiceRegistrar, srv UserLicenseServiceServer) {
	s.RegisterService(&UserLicenseService_ServiceDesc, srv)
}

func _UserLicenseService_ListUserLicenses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserLicensesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserLicenseServiceServer).ListUserLicenses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserLicenseService_ListUserLicenses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserLicenseServiceServer).ListUserLicenses(ctx, req.(*ListUserLicensesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserLicenseService_BatchUpdateUserLicenses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpdateUserLicensesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserLicenseServiceServer).BatchUpdateUserLicenses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserLicenseService_BatchUpdateUserLicenses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserLicenseServiceServer).BatchUpdateUserLicenses(ctx, req.(*BatchUpdateUserLicensesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserLicenseService_ServiceDesc is the grpc.ServiceDesc for UserLicenseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserLicenseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.discoveryengine.v1.UserLicenseService",
	HandlerType: (*UserLicenseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListUserLicenses",
			Handler:    _UserLicenseService_ListUserLicenses_Handler,
		},
		{
			MethodName: "BatchUpdateUserLicenses",
			Handler:    _UserLicenseService_BatchUpdateUserLicenses_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/discoveryengine/v1/user_license_service.proto",
}
