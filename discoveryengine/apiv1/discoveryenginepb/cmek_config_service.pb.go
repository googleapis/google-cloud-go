// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.7
// source: google/cloud/discoveryengine/v1/cmek_config_service.proto

package discoveryenginepb

import (
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// States of the CmekConfig.
type CmekConfig_State int32

const (
	// The CmekConfig state is unknown.
	CmekConfig_STATE_UNSPECIFIED CmekConfig_State = 0
	// The CmekConfig is creating.
	CmekConfig_CREATING CmekConfig_State = 1
	// The CmekConfig can be used with DataStores.
	CmekConfig_ACTIVE CmekConfig_State = 2
	// The CmekConfig is unavailable, most likely due to the KMS Key being
	// revoked.
	CmekConfig_KEY_ISSUE CmekConfig_State = 3
	// The CmekConfig is deleting.
	CmekConfig_DELETING CmekConfig_State = 4
	// The CmekConfig deletion process failed.
	CmekConfig_DELETE_FAILED CmekConfig_State = 7
	// The CmekConfig is not usable, most likely due to some internal issue.
	CmekConfig_UNUSABLE CmekConfig_State = 5
	// The KMS key version is being rotated.
	CmekConfig_ACTIVE_ROTATING CmekConfig_State = 6
	// The KMS key is soft deleted. Some cleanup policy will eventually be
	// applied.
	CmekConfig_DELETED CmekConfig_State = 8
)

// Enum value maps for CmekConfig_State.
var (
	CmekConfig_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "CREATING",
		2: "ACTIVE",
		3: "KEY_ISSUE",
		4: "DELETING",
		7: "DELETE_FAILED",
		5: "UNUSABLE",
		6: "ACTIVE_ROTATING",
		8: "DELETED",
	}
	CmekConfig_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"CREATING":          1,
		"ACTIVE":            2,
		"KEY_ISSUE":         3,
		"DELETING":          4,
		"DELETE_FAILED":     7,
		"UNUSABLE":          5,
		"ACTIVE_ROTATING":   6,
		"DELETED":           8,
	}
)

func (x CmekConfig_State) Enum() *CmekConfig_State {
	p := new(CmekConfig_State)
	*p = x
	return p
}

func (x CmekConfig_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CmekConfig_State) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_discoveryengine_v1_cmek_config_service_proto_enumTypes[0].Descriptor()
}

func (CmekConfig_State) Type() protoreflect.EnumType {
	return &file_google_cloud_discoveryengine_v1_cmek_config_service_proto_enumTypes[0]
}

func (x CmekConfig_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CmekConfig_State.Descriptor instead.
func (CmekConfig_State) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_discoveryengine_v1_cmek_config_service_proto_rawDescGZIP(), []int{3, 0}
}

// States of NotebookLM.
type CmekConfig_NotebookLMState int32

const (
	// The NotebookLM state is unknown.
	CmekConfig_NOTEBOOK_LM_STATE_UNSPECIFIED CmekConfig_NotebookLMState = 0
	// The NotebookLM is not ready.
	CmekConfig_NOTEBOOK_LM_NOT_READY CmekConfig_NotebookLMState = 1
	// The NotebookLM is ready to be used.
	CmekConfig_NOTEBOOK_LM_READY CmekConfig_NotebookLMState = 2
	// The NotebookLM is not enabled.
	CmekConfig_NOTEBOOK_LM_NOT_ENABLED CmekConfig_NotebookLMState = 3
)

// Enum value maps for CmekConfig_NotebookLMState.
var (
	CmekConfig_NotebookLMState_name = map[int32]string{
		0: "NOTEBOOK_LM_STATE_UNSPECIFIED",
		1: "NOTEBOOK_LM_NOT_READY",
		2: "NOTEBOOK_LM_READY",
		3: "NOTEBOOK_LM_NOT_ENABLED",
	}
	CmekConfig_NotebookLMState_value = map[string]int32{
		"NOTEBOOK_LM_STATE_UNSPECIFIED": 0,
		"NOTEBOOK_LM_NOT_READY":         1,
		"NOTEBOOK_LM_READY":             2,
		"NOTEBOOK_LM_NOT_ENABLED":       3,
	}
)

func (x CmekConfig_NotebookLMState) Enum() *CmekConfig_NotebookLMState {
	p := new(CmekConfig_NotebookLMState)
	*p = x
	return p
}

func (x CmekConfig_NotebookLMState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CmekConfig_NotebookLMState) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_discoveryengine_v1_cmek_config_service_proto_enumTypes[1].Descriptor()
}

func (CmekConfig_NotebookLMState) Type() protoreflect.EnumType {
	return &file_google_cloud_discoveryengine_v1_cmek_config_service_proto_enumTypes[1]
}

func (x CmekConfig_NotebookLMState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CmekConfig_NotebookLMState.Descriptor instead.
func (CmekConfig_NotebookLMState) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_discoveryengine_v1_cmek_config_service_proto_rawDescGZIP(), []int{3, 1}
}

// Request message for UpdateCmekConfig method.
// rpc.
type UpdateCmekConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The CmekConfig resource.
	Config *CmekConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Set the following CmekConfig as the default to be used for child
	// resources if one is not specified.
	SetDefault bool `protobuf:"varint,2,opt,name=set_default,json=setDefault,proto3" json:"set_default,omitempty"`
}

func (x *UpdateCmekConfigRequest) Reset() {
	*x = UpdateCmekConfigRequest{}
	mi := &file_google_cloud_discoveryengine_v1_cmek_config_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCmekConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCmekConfigRequest) ProtoMessage() {}

func (x *UpdateCmekConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_discoveryengine_v1_cmek_config_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCmekConfigRequest.ProtoReflect.Descriptor instead.
func (*UpdateCmekConfigRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_discoveryengine_v1_cmek_config_service_proto_rawDescGZIP(), []int{0}
}

func (x *UpdateCmekConfigRequest) GetConfig() *CmekConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *UpdateCmekConfigRequest) GetSetDefault() bool {
	if x != nil {
		return x.SetDefault
	}
	return false
}

// Request message for GetCmekConfigRequest method.
type GetCmekConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Resource name of
	// [CmekConfig][google.cloud.discoveryengine.v1.CmekConfig], such as
	// `projects/*/locations/*/cmekConfig` or
	// `projects/*/locations/*/cmekConfigs/*`.
	//
	// If the caller does not have permission to access the
	// [CmekConfig][google.cloud.discoveryengine.v1.CmekConfig], regardless of
	// whether or not it exists, a PERMISSION_DENIED error is returned.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetCmekConfigRequest) Reset() {
	*x = GetCmekConfigRequest{}
	mi := &file_google_cloud_discoveryengine_v1_cmek_config_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCmekConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCmekConfigRequest) ProtoMessage() {}

func (x *GetCmekConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_discoveryengine_v1_cmek_config_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCmekConfigRequest.ProtoReflect.Descriptor instead.
func (*GetCmekConfigRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_discoveryengine_v1_cmek_config_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetCmekConfigRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Metadata for single-regional CMEKs.
type SingleRegionKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Single-regional kms key resource name which will be used to
	// encrypt resources
	// `projects/{project}/locations/{location}/keyRings/{keyRing}/cryptoKeys/{keyId}`.
	KmsKey string `protobuf:"bytes,1,opt,name=kms_key,json=kmsKey,proto3" json:"kms_key,omitempty"`
}

func (x *SingleRegionKey) Reset() {
	*x = SingleRegionKey{}
	mi := &file_google_cloud_discoveryengine_v1_cmek_config_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SingleRegionKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleRegionKey) ProtoMessage() {}

func (x *SingleRegionKey) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_discoveryengine_v1_cmek_config_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleRegionKey.ProtoReflect.Descriptor instead.
func (*SingleRegionKey) Descriptor() ([]byte, []int) {
	return file_google_cloud_discoveryengine_v1_cmek_config_service_proto_rawDescGZIP(), []int{2}
}

func (x *SingleRegionKey) GetKmsKey() string {
	if x != nil {
		return x.KmsKey
	}
	return ""
}

// Configurations used to enable CMEK data encryption with Cloud KMS keys.
type CmekConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the CmekConfig of the form
	// `projects/{project}/locations/{location}/cmekConfig` or
	// `projects/{project}/locations/{location}/cmekConfigs/{cmek_config}`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// KMS key resource name which will be used to encrypt resources
	// `projects/{project}/locations/{location}/keyRings/{keyRing}/cryptoKeys/{keyId}`.
	KmsKey string `protobuf:"bytes,2,opt,name=kms_key,json=kmsKey,proto3" json:"kms_key,omitempty"`
	// KMS key version resource name which will be used to encrypt resources
	// `<kms_key>/cryptoKeyVersions/{keyVersion}`.
	KmsKeyVersion string `protobuf:"bytes,6,opt,name=kms_key_version,json=kmsKeyVersion,proto3" json:"kms_key_version,omitempty"`
	// Output only. The states of the CmekConfig.
	State CmekConfig_State `protobuf:"varint,3,opt,name=state,proto3,enum=google.cloud.discoveryengine.v1.CmekConfig_State" json:"state,omitempty"`
	// Output only. The default CmekConfig for the Customer.
	IsDefault bool `protobuf:"varint,4,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
	// Output only. The timestamp of the last key rotation.
	LastRotationTimestampMicros int64 `protobuf:"varint,5,opt,name=last_rotation_timestamp_micros,json=lastRotationTimestampMicros,proto3" json:"last_rotation_timestamp_micros,omitempty"`
	// Optional. Single-regional CMEKs that are required for some VAIS features.
	SingleRegionKeys []*SingleRegionKey `protobuf:"bytes,7,rep,name=single_region_keys,json=singleRegionKeys,proto3" json:"single_region_keys,omitempty"`
	// Output only. Whether the NotebookLM Corpus is ready to be used.
	NotebooklmState CmekConfig_NotebookLMState `protobuf:"varint,8,opt,name=notebooklm_state,json=notebooklmState,proto3,enum=google.cloud.discoveryengine.v1.CmekConfig_NotebookLMState" json:"notebooklm_state,omitempty"`
}

func (x *CmekConfig) Reset() {
	*x = CmekConfig{}
	mi := &file_google_cloud_discoveryengine_v1_cmek_config_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CmekConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmekConfig) ProtoMessage() {}

func (x *CmekConfig) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_discoveryengine_v1_cmek_config_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmekConfig.ProtoReflect.Descriptor instead.
func (*CmekConfig) Descriptor() ([]byte, []int) {
	return file_google_cloud_discoveryengine_v1_cmek_config_service_proto_rawDescGZIP(), []int{3}
}

func (x *CmekConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CmekConfig) GetKmsKey() string {
	if x != nil {
		return x.KmsKey
	}
	return ""
}

func (x *CmekConfig) GetKmsKeyVersion() string {
	if x != nil {
		return x.KmsKeyVersion
	}
	return ""
}

func (x *CmekConfig) GetState() CmekConfig_State {
	if x != nil {
		return x.State
	}
	return CmekConfig_STATE_UNSPECIFIED
}

func (x *CmekConfig) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

func (x *CmekConfig) GetLastRotationTimestampMicros() int64 {
	if x != nil {
		return x.LastRotationTimestampMicros
	}
	return 0
}

func (x *CmekConfig) GetSingleRegionKeys() []*SingleRegionKey {
	if x != nil {
		return x.SingleRegionKeys
	}
	return nil
}

func (x *CmekConfig) GetNotebooklmState() CmekConfig_NotebookLMState {
	if x != nil {
		return x.NotebooklmState
	}
	return CmekConfig_NOTEBOOK_LM_STATE_UNSPECIFIED
}

// Metadata related to the progress of the
// [CmekConfigService.UpdateCmekConfig][google.cloud.discoveryengine.v1.CmekConfigService.UpdateCmekConfig]
// operation. This will be returned by the google.longrunning.Operation.metadata
// field.
type UpdateCmekConfigMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Operation create time.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Operation last update time. If the operation is done, this is also the
	// finish time.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *UpdateCmekConfigMetadata) Reset() {
	*x = UpdateCmekConfigMetadata{}
	mi := &file_google_cloud_discoveryengine_v1_cmek_config_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCmekConfigMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCmekConfigMetadata) ProtoMessage() {}

func (x *UpdateCmekConfigMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_discoveryengine_v1_cmek_config_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCmekConfigMetadata.ProtoReflect.Descriptor instead.
func (*UpdateCmekConfigMetadata) Descriptor() ([]byte, []int) {
	return file_google_cloud_discoveryengine_v1_cmek_config_service_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateCmekConfigMetadata) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *UpdateCmekConfigMetadata) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// Request message for
// [CmekConfigService.ListCmekConfigs][google.cloud.discoveryengine.v1.CmekConfigService.ListCmekConfigs]
// method.
type ListCmekConfigsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent location resource name, such as
	// `projects/{project}/locations/{location}`.
	//
	// If the caller does not have permission to list
	// [CmekConfig][google.cloud.discoveryengine.v1.CmekConfig]s under this
	// location, regardless of whether or not a CmekConfig exists, a
	// PERMISSION_DENIED error is returned.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *ListCmekConfigsRequest) Reset() {
	*x = ListCmekConfigsRequest{}
	mi := &file_google_cloud_discoveryengine_v1_cmek_config_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCmekConfigsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCmekConfigsRequest) ProtoMessage() {}

func (x *ListCmekConfigsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_discoveryengine_v1_cmek_config_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCmekConfigsRequest.ProtoReflect.Descriptor instead.
func (*ListCmekConfigsRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_discoveryengine_v1_cmek_config_service_proto_rawDescGZIP(), []int{5}
}

func (x *ListCmekConfigsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

// Response message for
// [CmekConfigService.ListCmekConfigs][google.cloud.discoveryengine.v1.CmekConfigService.ListCmekConfigs]
// method.
type ListCmekConfigsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All the customer's
	// [CmekConfig][google.cloud.discoveryengine.v1.CmekConfig]s.
	CmekConfigs []*CmekConfig `protobuf:"bytes,1,rep,name=cmek_configs,json=cmekConfigs,proto3" json:"cmek_configs,omitempty"`
}

func (x *ListCmekConfigsResponse) Reset() {
	*x = ListCmekConfigsResponse{}
	mi := &file_google_cloud_discoveryengine_v1_cmek_config_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCmekConfigsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCmekConfigsResponse) ProtoMessage() {}

func (x *ListCmekConfigsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_discoveryengine_v1_cmek_config_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCmekConfigsResponse.ProtoReflect.Descriptor instead.
func (*ListCmekConfigsResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_discoveryengine_v1_cmek_config_service_proto_rawDescGZIP(), []int{6}
}

func (x *ListCmekConfigsResponse) GetCmekConfigs() []*CmekConfig {
	if x != nil {
		return x.CmekConfigs
	}
	return nil
}

// Request message for
// [CmekConfigService.DeleteCmekConfig][google.cloud.discoveryengine.v1.CmekConfigService.DeleteCmekConfig]
// method.
type DeleteCmekConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The resource name of the
	// [CmekConfig][google.cloud.discoveryengine.v1.CmekConfig] to delete, such as
	// `projects/{project}/locations/{location}/cmekConfigs/{cmek_config}`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteCmekConfigRequest) Reset() {
	*x = DeleteCmekConfigRequest{}
	mi := &file_google_cloud_discoveryengine_v1_cmek_config_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCmekConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCmekConfigRequest) ProtoMessage() {}

func (x *DeleteCmekConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_discoveryengine_v1_cmek_config_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCmekConfigRequest.ProtoReflect.Descriptor instead.
func (*DeleteCmekConfigRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_discoveryengine_v1_cmek_config_service_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteCmekConfigRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Metadata related to the progress of the
// [CmekConfigService.DeleteCmekConfig][google.cloud.discoveryengine.v1.CmekConfigService.DeleteCmekConfig]
// operation. This will be returned by the google.longrunning.Operation.metadata
// field.
type DeleteCmekConfigMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Operation create time.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Operation last update time. If the operation is done, this is also the
	// finish time.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *DeleteCmekConfigMetadata) Reset() {
	*x = DeleteCmekConfigMetadata{}
	mi := &file_google_cloud_discoveryengine_v1_cmek_config_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCmekConfigMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCmekConfigMetadata) ProtoMessage() {}

func (x *DeleteCmekConfigMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_discoveryengine_v1_cmek_config_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCmekConfigMetadata.ProtoReflect.Descriptor instead.
func (*DeleteCmekConfigMetadata) Descriptor() ([]byte, []int) {
	return file_google_cloud_discoveryengine_v1_cmek_config_service_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteCmekConfigMetadata) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *DeleteCmekConfigMetadata) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

var File_google_cloud_discoveryengine_v1_cmek_config_service_proto protoreflect.FileDescriptor

var file_google_cloud_discoveryengine_v1_cmek_config_service_proto_rawDesc = []byte{
	0x0a, 0x39, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6d, 0x65, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x23, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x84, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6d, 0x65,
	0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6d, 0x65, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x5f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73,
	0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x5d, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x43, 0x6d, 0x65, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x45, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x31, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2b, 0x0a, 0x29, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x6d, 0x65, 0x6b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x56, 0x0a, 0x0f, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x43, 0x0a, 0x07, 0x6b,
	0x6d, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0xe0, 0x41,
	0x02, 0xfa, 0x41, 0x24, 0x0a, 0x22, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x6b, 0x6d, 0x73, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x06, 0x6b, 0x6d, 0x73, 0x4b, 0x65, 0x79,
	0x22, 0xb0, 0x08, 0x0a, 0x0a, 0x43, 0x6d, 0x65, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x6b, 0x6d, 0x73, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xfa, 0x41, 0x24, 0x0a, 0x22,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x6b, 0x6d, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x4b, 0x65,
	0x79, 0x73, 0x52, 0x06, 0x6b, 0x6d, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x56, 0x0a, 0x0f, 0x6b, 0x6d,
	0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2e, 0xfa, 0x41, 0x2b, 0x0a, 0x29, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x6b,
	0x6d, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x4b, 0x65, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x6b, 0x6d, 0x73, 0x4b, 0x65, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6d, 0x65, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x22, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x12, 0x48, 0x0a, 0x1e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x1b, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x12, 0x63,
	0x0a, 0x12, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x10, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x79, 0x73, 0x12, 0x6b, 0x0a, 0x10, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c,
	0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6d, 0x65, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x62,
	0x6f, 0x6f, 0x6b, 0x4c, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x0f, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x22, 0x98, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4b,
	0x45, 0x59, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x55,
	0x4e, 0x55, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x5f, 0x52, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x0b,
	0x0a, 0x07, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x08, 0x22, 0x83, 0x01, 0x0a, 0x0f,
	0x4e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x4c, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x21, 0x0a, 0x1d, 0x4e, 0x4f, 0x54, 0x45, 0x42, 0x4f, 0x4f, 0x4b, 0x5f, 0x4c, 0x4d, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x4f, 0x54, 0x45, 0x42, 0x4f, 0x4f, 0x4b, 0x5f, 0x4c,
	0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x01, 0x12, 0x15, 0x0a,
	0x11, 0x4e, 0x4f, 0x54, 0x45, 0x42, 0x4f, 0x4f, 0x4b, 0x5f, 0x4c, 0x4d, 0x5f, 0x52, 0x45, 0x41,
	0x44, 0x59, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x4f, 0x54, 0x45, 0x42, 0x4f, 0x4f, 0x4b,
	0x5f, 0x4c, 0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10,
	0x03, 0x3a, 0xbf, 0x01, 0xea, 0x41, 0xbb, 0x01, 0x0a, 0x29, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x6d, 0x65, 0x6b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x32, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x63, 0x6d, 0x65,
	0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x41, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d,
	0x2f, 0x63, 0x6d, 0x65, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2f, 0x7b, 0x63, 0x6d,
	0x65, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x7d, 0x2a, 0x0b, 0x63, 0x6d, 0x65, 0x6b,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x32, 0x0a, 0x63, 0x6d, 0x65, 0x6b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x22, 0x94, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6d,
	0x65, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x61, 0x0a, 0x16, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6d, 0x65, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x29, 0x0a, 0x27, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x69, 0x0a,
	0x17, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6d, 0x65, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0c, 0x63, 0x6d, 0x65, 0x6b,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6d, 0x65, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x63, 0x6d, 0x65,
	0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x22, 0x60, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6d, 0x65, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x31, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2b, 0x0a, 0x29, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x6d, 0x65, 0x6b, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x18, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6d, 0x65, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x32, 0x81, 0x09, 0x0a, 0x11, 0x43, 0x6d, 0x65, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xe5, 0x02, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6d, 0x65, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x38, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6d, 0x65, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf7, 0x01, 0xca, 0x41, 0x66, 0x0a, 0x2a, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6d, 0x65,
	0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x38, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6d, 0x65, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xda, 0x41, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x7f,
	0x3a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5a, 0x40, 0x3a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x32, 0x36, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x63, 0x6d, 0x65, 0x6b,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2f, 0x2a, 0x7d, 0x32, 0x33, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x2a, 0x2f, 0x63, 0x6d, 0x65, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x7d, 0x12,
	0xe3, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x6d, 0x65, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6d, 0x65, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6d, 0x65, 0x6b, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x6e, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x61, 0x5a, 0x31, 0x12, 0x2f, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x63, 0x6d, 0x65, 0x6b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x2c, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x63, 0x6d, 0x65, 0x6b, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x7d, 0x12, 0xc6, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6d,
	0x65, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6d, 0x65, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6d, 0x65, 0x6b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40, 0xda, 0x41,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x12, 0x2f, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x2a, 0x7d, 0x2f, 0x63, 0x6d, 0x65, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x80,
	0x02, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6d, 0x65, 0x6b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6d, 0x65, 0x6b,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x92, 0x01, 0xca,
	0x41, 0x51, 0x0a, 0x15, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x38, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6d, 0x65, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31,
	0x2a, 0x2f, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x2a, 0x2f, 0x63, 0x6d, 0x65, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2f, 0x2a,
	0x7d, 0x1a, 0x52, 0xca, 0x41, 0x1e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77,
	0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x89, 0x02, 0x0a, 0x23, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x16, 0x43,
	0x6d, 0x65, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x70, 0x62, 0x3b, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x70, 0x62, 0xa2, 0x02, 0x0f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45,
	0x52, 0x59, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0xaa, 0x02, 0x1f, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x1f, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x5c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5c, 0x56, 0x31, 0xea, 0x02, 0x22, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x3a, 0x3a, 0x56,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_discoveryengine_v1_cmek_config_service_proto_rawDescOnce sync.Once
	file_google_cloud_discoveryengine_v1_cmek_config_service_proto_rawDescData = file_google_cloud_discoveryengine_v1_cmek_config_service_proto_rawDesc
)

func file_google_cloud_discoveryengine_v1_cmek_config_service_proto_rawDescGZIP() []byte {
	file_google_cloud_discoveryengine_v1_cmek_config_service_proto_rawDescOnce.Do(func() {
		file_google_cloud_discoveryengine_v1_cmek_config_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_discoveryengine_v1_cmek_config_service_proto_rawDescData)
	})
	return file_google_cloud_discoveryengine_v1_cmek_config_service_proto_rawDescData
}

var file_google_cloud_discoveryengine_v1_cmek_config_service_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_google_cloud_discoveryengine_v1_cmek_config_service_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_google_cloud_discoveryengine_v1_cmek_config_service_proto_goTypes = []any{
	(CmekConfig_State)(0),            // 0: google.cloud.discoveryengine.v1.CmekConfig.State
	(CmekConfig_NotebookLMState)(0),  // 1: google.cloud.discoveryengine.v1.CmekConfig.NotebookLMState
	(*UpdateCmekConfigRequest)(nil),  // 2: google.cloud.discoveryengine.v1.UpdateCmekConfigRequest
	(*GetCmekConfigRequest)(nil),     // 3: google.cloud.discoveryengine.v1.GetCmekConfigRequest
	(*SingleRegionKey)(nil),          // 4: google.cloud.discoveryengine.v1.SingleRegionKey
	(*CmekConfig)(nil),               // 5: google.cloud.discoveryengine.v1.CmekConfig
	(*UpdateCmekConfigMetadata)(nil), // 6: google.cloud.discoveryengine.v1.UpdateCmekConfigMetadata
	(*ListCmekConfigsRequest)(nil),   // 7: google.cloud.discoveryengine.v1.ListCmekConfigsRequest
	(*ListCmekConfigsResponse)(nil),  // 8: google.cloud.discoveryengine.v1.ListCmekConfigsResponse
	(*DeleteCmekConfigRequest)(nil),  // 9: google.cloud.discoveryengine.v1.DeleteCmekConfigRequest
	(*DeleteCmekConfigMetadata)(nil), // 10: google.cloud.discoveryengine.v1.DeleteCmekConfigMetadata
	(*timestamppb.Timestamp)(nil),    // 11: google.protobuf.Timestamp
	(*longrunningpb.Operation)(nil),  // 12: google.longrunning.Operation
}
var file_google_cloud_discoveryengine_v1_cmek_config_service_proto_depIdxs = []int32{
	5,  // 0: google.cloud.discoveryengine.v1.UpdateCmekConfigRequest.config:type_name -> google.cloud.discoveryengine.v1.CmekConfig
	0,  // 1: google.cloud.discoveryengine.v1.CmekConfig.state:type_name -> google.cloud.discoveryengine.v1.CmekConfig.State
	4,  // 2: google.cloud.discoveryengine.v1.CmekConfig.single_region_keys:type_name -> google.cloud.discoveryengine.v1.SingleRegionKey
	1,  // 3: google.cloud.discoveryengine.v1.CmekConfig.notebooklm_state:type_name -> google.cloud.discoveryengine.v1.CmekConfig.NotebookLMState
	11, // 4: google.cloud.discoveryengine.v1.UpdateCmekConfigMetadata.create_time:type_name -> google.protobuf.Timestamp
	11, // 5: google.cloud.discoveryengine.v1.UpdateCmekConfigMetadata.update_time:type_name -> google.protobuf.Timestamp
	5,  // 6: google.cloud.discoveryengine.v1.ListCmekConfigsResponse.cmek_configs:type_name -> google.cloud.discoveryengine.v1.CmekConfig
	11, // 7: google.cloud.discoveryengine.v1.DeleteCmekConfigMetadata.create_time:type_name -> google.protobuf.Timestamp
	11, // 8: google.cloud.discoveryengine.v1.DeleteCmekConfigMetadata.update_time:type_name -> google.protobuf.Timestamp
	2,  // 9: google.cloud.discoveryengine.v1.CmekConfigService.UpdateCmekConfig:input_type -> google.cloud.discoveryengine.v1.UpdateCmekConfigRequest
	3,  // 10: google.cloud.discoveryengine.v1.CmekConfigService.GetCmekConfig:input_type -> google.cloud.discoveryengine.v1.GetCmekConfigRequest
	7,  // 11: google.cloud.discoveryengine.v1.CmekConfigService.ListCmekConfigs:input_type -> google.cloud.discoveryengine.v1.ListCmekConfigsRequest
	9,  // 12: google.cloud.discoveryengine.v1.CmekConfigService.DeleteCmekConfig:input_type -> google.cloud.discoveryengine.v1.DeleteCmekConfigRequest
	12, // 13: google.cloud.discoveryengine.v1.CmekConfigService.UpdateCmekConfig:output_type -> google.longrunning.Operation
	5,  // 14: google.cloud.discoveryengine.v1.CmekConfigService.GetCmekConfig:output_type -> google.cloud.discoveryengine.v1.CmekConfig
	8,  // 15: google.cloud.discoveryengine.v1.CmekConfigService.ListCmekConfigs:output_type -> google.cloud.discoveryengine.v1.ListCmekConfigsResponse
	12, // 16: google.cloud.discoveryengine.v1.CmekConfigService.DeleteCmekConfig:output_type -> google.longrunning.Operation
	13, // [13:17] is the sub-list for method output_type
	9,  // [9:13] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_google_cloud_discoveryengine_v1_cmek_config_service_proto_init() }
func file_google_cloud_discoveryengine_v1_cmek_config_service_proto_init() {
	if File_google_cloud_discoveryengine_v1_cmek_config_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_discoveryengine_v1_cmek_config_service_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_google_cloud_discoveryengine_v1_cmek_config_service_proto_goTypes,
		DependencyIndexes: file_google_cloud_discoveryengine_v1_cmek_config_service_proto_depIdxs,
		EnumInfos:         file_google_cloud_discoveryengine_v1_cmek_config_service_proto_enumTypes,
		MessageInfos:      file_google_cloud_discoveryengine_v1_cmek_config_service_proto_msgTypes,
	}.Build()
	File_google_cloud_discoveryengine_v1_cmek_config_service_proto = out.File
	file_google_cloud_discoveryengine_v1_cmek_config_service_proto_rawDesc = nil
	file_google_cloud_discoveryengine_v1_cmek_config_service_proto_goTypes = nil
	file_google_cloud_discoveryengine_v1_cmek_config_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CmekConfigServiceClient is the client API for CmekConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CmekConfigServiceClient interface {
	// Provisions a CMEK key for use in a location of a customer's project.
	// This method will also conduct location validation on the provided
	// cmekConfig to make sure the key is valid and can be used in the
	// selected location.
	UpdateCmekConfig(ctx context.Context, in *UpdateCmekConfigRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets the [CmekConfig][google.cloud.discoveryengine.v1.CmekConfig].
	GetCmekConfig(ctx context.Context, in *GetCmekConfigRequest, opts ...grpc.CallOption) (*CmekConfig, error)
	// Lists all the [CmekConfig][google.cloud.discoveryengine.v1.CmekConfig]s
	// with the project.
	ListCmekConfigs(ctx context.Context, in *ListCmekConfigsRequest, opts ...grpc.CallOption) (*ListCmekConfigsResponse, error)
	// De-provisions a CmekConfig.
	DeleteCmekConfig(ctx context.Context, in *DeleteCmekConfigRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type cmekConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCmekConfigServiceClient(cc grpc.ClientConnInterface) CmekConfigServiceClient {
	return &cmekConfigServiceClient{cc}
}

func (c *cmekConfigServiceClient) UpdateCmekConfig(ctx context.Context, in *UpdateCmekConfigRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.discoveryengine.v1.CmekConfigService/UpdateCmekConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmekConfigServiceClient) GetCmekConfig(ctx context.Context, in *GetCmekConfigRequest, opts ...grpc.CallOption) (*CmekConfig, error) {
	out := new(CmekConfig)
	err := c.cc.Invoke(ctx, "/google.cloud.discoveryengine.v1.CmekConfigService/GetCmekConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmekConfigServiceClient) ListCmekConfigs(ctx context.Context, in *ListCmekConfigsRequest, opts ...grpc.CallOption) (*ListCmekConfigsResponse, error) {
	out := new(ListCmekConfigsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.discoveryengine.v1.CmekConfigService/ListCmekConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmekConfigServiceClient) DeleteCmekConfig(ctx context.Context, in *DeleteCmekConfigRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.discoveryengine.v1.CmekConfigService/DeleteCmekConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CmekConfigServiceServer is the server API for CmekConfigService service.
type CmekConfigServiceServer interface {
	// Provisions a CMEK key for use in a location of a customer's project.
	// This method will also conduct location validation on the provided
	// cmekConfig to make sure the key is valid and can be used in the
	// selected location.
	UpdateCmekConfig(context.Context, *UpdateCmekConfigRequest) (*longrunningpb.Operation, error)
	// Gets the [CmekConfig][google.cloud.discoveryengine.v1.CmekConfig].
	GetCmekConfig(context.Context, *GetCmekConfigRequest) (*CmekConfig, error)
	// Lists all the [CmekConfig][google.cloud.discoveryengine.v1.CmekConfig]s
	// with the project.
	ListCmekConfigs(context.Context, *ListCmekConfigsRequest) (*ListCmekConfigsResponse, error)
	// De-provisions a CmekConfig.
	DeleteCmekConfig(context.Context, *DeleteCmekConfigRequest) (*longrunningpb.Operation, error)
}

// UnimplementedCmekConfigServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCmekConfigServiceServer struct {
}

func (*UnimplementedCmekConfigServiceServer) UpdateCmekConfig(context.Context, *UpdateCmekConfigRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCmekConfig not implemented")
}
func (*UnimplementedCmekConfigServiceServer) GetCmekConfig(context.Context, *GetCmekConfigRequest) (*CmekConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCmekConfig not implemented")
}
func (*UnimplementedCmekConfigServiceServer) ListCmekConfigs(context.Context, *ListCmekConfigsRequest) (*ListCmekConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCmekConfigs not implemented")
}
func (*UnimplementedCmekConfigServiceServer) DeleteCmekConfig(context.Context, *DeleteCmekConfigRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCmekConfig not implemented")
}

func RegisterCmekConfigServiceServer(s *grpc.Server, srv CmekConfigServiceServer) {
	s.RegisterService(&_CmekConfigService_serviceDesc, srv)
}

func _CmekConfigService_UpdateCmekConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCmekConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmekConfigServiceServer).UpdateCmekConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.discoveryengine.v1.CmekConfigService/UpdateCmekConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmekConfigServiceServer).UpdateCmekConfig(ctx, req.(*UpdateCmekConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmekConfigService_GetCmekConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCmekConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmekConfigServiceServer).GetCmekConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.discoveryengine.v1.CmekConfigService/GetCmekConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmekConfigServiceServer).GetCmekConfig(ctx, req.(*GetCmekConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmekConfigService_ListCmekConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCmekConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmekConfigServiceServer).ListCmekConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.discoveryengine.v1.CmekConfigService/ListCmekConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmekConfigServiceServer).ListCmekConfigs(ctx, req.(*ListCmekConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmekConfigService_DeleteCmekConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCmekConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmekConfigServiceServer).DeleteCmekConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.discoveryengine.v1.CmekConfigService/DeleteCmekConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmekConfigServiceServer).DeleteCmekConfig(ctx, req.(*DeleteCmekConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CmekConfigService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.discoveryengine.v1.CmekConfigService",
	HandlerType: (*CmekConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateCmekConfig",
			Handler:    _CmekConfigService_UpdateCmekConfig_Handler,
		},
		{
			MethodName: "GetCmekConfig",
			Handler:    _CmekConfigService_GetCmekConfig_Handler,
		},
		{
			MethodName: "ListCmekConfigs",
			Handler:    _CmekConfigService_ListCmekConfigs_Handler,
		},
		{
			MethodName: "DeleteCmekConfig",
			Handler:    _CmekConfigService_DeleteCmekConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/discoveryengine/v1/cmek_config_service.proto",
}
