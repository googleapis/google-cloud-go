// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/discoveryengine/v1beta/grounded_generation_service.proto

package discoveryenginepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GroundedGenerationService_StreamGenerateGroundedContent_FullMethodName = "/google.cloud.discoveryengine.v1beta.GroundedGenerationService/StreamGenerateGroundedContent"
	GroundedGenerationService_GenerateGroundedContent_FullMethodName       = "/google.cloud.discoveryengine.v1beta.GroundedGenerationService/GenerateGroundedContent"
	GroundedGenerationService_CheckGrounding_FullMethodName                = "/google.cloud.discoveryengine.v1beta.GroundedGenerationService/CheckGrounding"
)

// GroundedGenerationServiceClient is the client API for GroundedGenerationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroundedGenerationServiceClient interface {
	// Generates grounded content in a streaming fashion.
	StreamGenerateGroundedContent(ctx context.Context, opts ...grpc.CallOption) (GroundedGenerationService_StreamGenerateGroundedContentClient, error)
	// Generates grounded content.
	GenerateGroundedContent(ctx context.Context, in *GenerateGroundedContentRequest, opts ...grpc.CallOption) (*GenerateGroundedContentResponse, error)
	// Performs a grounding check.
	CheckGrounding(ctx context.Context, in *CheckGroundingRequest, opts ...grpc.CallOption) (*CheckGroundingResponse, error)
}

type groundedGenerationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGroundedGenerationServiceClient(cc grpc.ClientConnInterface) GroundedGenerationServiceClient {
	return &groundedGenerationServiceClient{cc}
}

func (c *groundedGenerationServiceClient) StreamGenerateGroundedContent(ctx context.Context, opts ...grpc.CallOption) (GroundedGenerationService_StreamGenerateGroundedContentClient, error) {
	stream, err := c.cc.NewStream(ctx, &GroundedGenerationService_ServiceDesc.Streams[0], GroundedGenerationService_StreamGenerateGroundedContent_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &groundedGenerationServiceStreamGenerateGroundedContentClient{stream}
	return x, nil
}

type GroundedGenerationService_StreamGenerateGroundedContentClient interface {
	Send(*GenerateGroundedContentRequest) error
	Recv() (*GenerateGroundedContentResponse, error)
	grpc.ClientStream
}

type groundedGenerationServiceStreamGenerateGroundedContentClient struct {
	grpc.ClientStream
}

func (x *groundedGenerationServiceStreamGenerateGroundedContentClient) Send(m *GenerateGroundedContentRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *groundedGenerationServiceStreamGenerateGroundedContentClient) Recv() (*GenerateGroundedContentResponse, error) {
	m := new(GenerateGroundedContentResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *groundedGenerationServiceClient) GenerateGroundedContent(ctx context.Context, in *GenerateGroundedContentRequest, opts ...grpc.CallOption) (*GenerateGroundedContentResponse, error) {
	out := new(GenerateGroundedContentResponse)
	err := c.cc.Invoke(ctx, GroundedGenerationService_GenerateGroundedContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groundedGenerationServiceClient) CheckGrounding(ctx context.Context, in *CheckGroundingRequest, opts ...grpc.CallOption) (*CheckGroundingResponse, error) {
	out := new(CheckGroundingResponse)
	err := c.cc.Invoke(ctx, GroundedGenerationService_CheckGrounding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroundedGenerationServiceServer is the server API for GroundedGenerationService service.
// All implementations should embed UnimplementedGroundedGenerationServiceServer
// for forward compatibility
type GroundedGenerationServiceServer interface {
	// Generates grounded content in a streaming fashion.
	StreamGenerateGroundedContent(GroundedGenerationService_StreamGenerateGroundedContentServer) error
	// Generates grounded content.
	GenerateGroundedContent(context.Context, *GenerateGroundedContentRequest) (*GenerateGroundedContentResponse, error)
	// Performs a grounding check.
	CheckGrounding(context.Context, *CheckGroundingRequest) (*CheckGroundingResponse, error)
}

// UnimplementedGroundedGenerationServiceServer should be embedded to have forward compatible implementations.
type UnimplementedGroundedGenerationServiceServer struct {
}

func (UnimplementedGroundedGenerationServiceServer) StreamGenerateGroundedContent(GroundedGenerationService_StreamGenerateGroundedContentServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamGenerateGroundedContent not implemented")
}
func (UnimplementedGroundedGenerationServiceServer) GenerateGroundedContent(context.Context, *GenerateGroundedContentRequest) (*GenerateGroundedContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateGroundedContent not implemented")
}
func (UnimplementedGroundedGenerationServiceServer) CheckGrounding(context.Context, *CheckGroundingRequest) (*CheckGroundingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckGrounding not implemented")
}

// UnsafeGroundedGenerationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroundedGenerationServiceServer will
// result in compilation errors.
type UnsafeGroundedGenerationServiceServer interface {
	mustEmbedUnimplementedGroundedGenerationServiceServer()
}

func RegisterGroundedGenerationServiceServer(s grpc.ServiceRegistrar, srv GroundedGenerationServiceServer) {
	s.RegisterService(&GroundedGenerationService_ServiceDesc, srv)
}

func _GroundedGenerationService_StreamGenerateGroundedContent_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GroundedGenerationServiceServer).StreamGenerateGroundedContent(&groundedGenerationServiceStreamGenerateGroundedContentServer{stream})
}

type GroundedGenerationService_StreamGenerateGroundedContentServer interface {
	Send(*GenerateGroundedContentResponse) error
	Recv() (*GenerateGroundedContentRequest, error)
	grpc.ServerStream
}

type groundedGenerationServiceStreamGenerateGroundedContentServer struct {
	grpc.ServerStream
}

func (x *groundedGenerationServiceStreamGenerateGroundedContentServer) Send(m *GenerateGroundedContentResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *groundedGenerationServiceStreamGenerateGroundedContentServer) Recv() (*GenerateGroundedContentRequest, error) {
	m := new(GenerateGroundedContentRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GroundedGenerationService_GenerateGroundedContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateGroundedContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroundedGenerationServiceServer).GenerateGroundedContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroundedGenerationService_GenerateGroundedContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroundedGenerationServiceServer).GenerateGroundedContent(ctx, req.(*GenerateGroundedContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroundedGenerationService_CheckGrounding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckGroundingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroundedGenerationServiceServer).CheckGrounding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroundedGenerationService_CheckGrounding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroundedGenerationServiceServer).CheckGrounding(ctx, req.(*CheckGroundingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GroundedGenerationService_ServiceDesc is the grpc.ServiceDesc for GroundedGenerationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroundedGenerationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.discoveryengine.v1beta.GroundedGenerationService",
	HandlerType: (*GroundedGenerationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateGroundedContent",
			Handler:    _GroundedGenerationService_GenerateGroundedContent_Handler,
		},
		{
			MethodName: "CheckGrounding",
			Handler:    _GroundedGenerationService_CheckGrounding_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamGenerateGroundedContent",
			Handler:       _GroundedGenerationService_StreamGenerateGroundedContent_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "google/cloud/discoveryengine/v1beta/grounded_generation_service.proto",
}
