// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: google/cloud/discoveryengine/v1alpha/sample_query_service.proto

package discoveryenginepb

import (
	context "context"

	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SampleQueryService_GetSampleQuery_FullMethodName      = "/google.cloud.discoveryengine.v1alpha.SampleQueryService/GetSampleQuery"
	SampleQueryService_ListSampleQueries_FullMethodName   = "/google.cloud.discoveryengine.v1alpha.SampleQueryService/ListSampleQueries"
	SampleQueryService_CreateSampleQuery_FullMethodName   = "/google.cloud.discoveryengine.v1alpha.SampleQueryService/CreateSampleQuery"
	SampleQueryService_UpdateSampleQuery_FullMethodName   = "/google.cloud.discoveryengine.v1alpha.SampleQueryService/UpdateSampleQuery"
	SampleQueryService_DeleteSampleQuery_FullMethodName   = "/google.cloud.discoveryengine.v1alpha.SampleQueryService/DeleteSampleQuery"
	SampleQueryService_ImportSampleQueries_FullMethodName = "/google.cloud.discoveryengine.v1alpha.SampleQueryService/ImportSampleQueries"
)

// SampleQueryServiceClient is the client API for SampleQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SampleQueryServiceClient interface {
	// Gets a [SampleQuery][google.cloud.discoveryengine.v1alpha.SampleQuery].
	GetSampleQuery(ctx context.Context, in *GetSampleQueryRequest, opts ...grpc.CallOption) (*SampleQuery, error)
	// Gets a list of
	// [SampleQuery][google.cloud.discoveryengine.v1alpha.SampleQuery]s.
	ListSampleQueries(ctx context.Context, in *ListSampleQueriesRequest, opts ...grpc.CallOption) (*ListSampleQueriesResponse, error)
	// Creates a [SampleQuery][google.cloud.discoveryengine.v1alpha.SampleQuery]
	CreateSampleQuery(ctx context.Context, in *CreateSampleQueryRequest, opts ...grpc.CallOption) (*SampleQuery, error)
	// Updates a [SampleQuery][google.cloud.discoveryengine.v1alpha.SampleQuery].
	UpdateSampleQuery(ctx context.Context, in *UpdateSampleQueryRequest, opts ...grpc.CallOption) (*SampleQuery, error)
	// Deletes a [SampleQuery][google.cloud.discoveryengine.v1alpha.SampleQuery].
	DeleteSampleQuery(ctx context.Context, in *DeleteSampleQueryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Bulk import of multiple
	// [SampleQuery][google.cloud.discoveryengine.v1alpha.SampleQuery]s. Sample
	// queries that already exist may be deleted.
	//
	// Note: It is possible for a subset of the
	// [SampleQuery][google.cloud.discoveryengine.v1alpha.SampleQuery]s to be
	// successfully imported.
	ImportSampleQueries(ctx context.Context, in *ImportSampleQueriesRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type sampleQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSampleQueryServiceClient(cc grpc.ClientConnInterface) SampleQueryServiceClient {
	return &sampleQueryServiceClient{cc}
}

func (c *sampleQueryServiceClient) GetSampleQuery(ctx context.Context, in *GetSampleQueryRequest, opts ...grpc.CallOption) (*SampleQuery, error) {
	out := new(SampleQuery)
	err := c.cc.Invoke(ctx, SampleQueryService_GetSampleQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleQueryServiceClient) ListSampleQueries(ctx context.Context, in *ListSampleQueriesRequest, opts ...grpc.CallOption) (*ListSampleQueriesResponse, error) {
	out := new(ListSampleQueriesResponse)
	err := c.cc.Invoke(ctx, SampleQueryService_ListSampleQueries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleQueryServiceClient) CreateSampleQuery(ctx context.Context, in *CreateSampleQueryRequest, opts ...grpc.CallOption) (*SampleQuery, error) {
	out := new(SampleQuery)
	err := c.cc.Invoke(ctx, SampleQueryService_CreateSampleQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleQueryServiceClient) UpdateSampleQuery(ctx context.Context, in *UpdateSampleQueryRequest, opts ...grpc.CallOption) (*SampleQuery, error) {
	out := new(SampleQuery)
	err := c.cc.Invoke(ctx, SampleQueryService_UpdateSampleQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleQueryServiceClient) DeleteSampleQuery(ctx context.Context, in *DeleteSampleQueryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SampleQueryService_DeleteSampleQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleQueryServiceClient) ImportSampleQueries(ctx context.Context, in *ImportSampleQueriesRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, SampleQueryService_ImportSampleQueries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SampleQueryServiceServer is the server API for SampleQueryService service.
// All implementations should embed UnimplementedSampleQueryServiceServer
// for forward compatibility
type SampleQueryServiceServer interface {
	// Gets a [SampleQuery][google.cloud.discoveryengine.v1alpha.SampleQuery].
	GetSampleQuery(context.Context, *GetSampleQueryRequest) (*SampleQuery, error)
	// Gets a list of
	// [SampleQuery][google.cloud.discoveryengine.v1alpha.SampleQuery]s.
	ListSampleQueries(context.Context, *ListSampleQueriesRequest) (*ListSampleQueriesResponse, error)
	// Creates a [SampleQuery][google.cloud.discoveryengine.v1alpha.SampleQuery]
	CreateSampleQuery(context.Context, *CreateSampleQueryRequest) (*SampleQuery, error)
	// Updates a [SampleQuery][google.cloud.discoveryengine.v1alpha.SampleQuery].
	UpdateSampleQuery(context.Context, *UpdateSampleQueryRequest) (*SampleQuery, error)
	// Deletes a [SampleQuery][google.cloud.discoveryengine.v1alpha.SampleQuery].
	DeleteSampleQuery(context.Context, *DeleteSampleQueryRequest) (*emptypb.Empty, error)
	// Bulk import of multiple
	// [SampleQuery][google.cloud.discoveryengine.v1alpha.SampleQuery]s. Sample
	// queries that already exist may be deleted.
	//
	// Note: It is possible for a subset of the
	// [SampleQuery][google.cloud.discoveryengine.v1alpha.SampleQuery]s to be
	// successfully imported.
	ImportSampleQueries(context.Context, *ImportSampleQueriesRequest) (*longrunningpb.Operation, error)
}

// UnimplementedSampleQueryServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSampleQueryServiceServer struct {
}

func (UnimplementedSampleQueryServiceServer) GetSampleQuery(context.Context, *GetSampleQueryRequest) (*SampleQuery, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSampleQuery not implemented")
}
func (UnimplementedSampleQueryServiceServer) ListSampleQueries(context.Context, *ListSampleQueriesRequest) (*ListSampleQueriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSampleQueries not implemented")
}
func (UnimplementedSampleQueryServiceServer) CreateSampleQuery(context.Context, *CreateSampleQueryRequest) (*SampleQuery, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSampleQuery not implemented")
}
func (UnimplementedSampleQueryServiceServer) UpdateSampleQuery(context.Context, *UpdateSampleQueryRequest) (*SampleQuery, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSampleQuery not implemented")
}
func (UnimplementedSampleQueryServiceServer) DeleteSampleQuery(context.Context, *DeleteSampleQueryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSampleQuery not implemented")
}
func (UnimplementedSampleQueryServiceServer) ImportSampleQueries(context.Context, *ImportSampleQueriesRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportSampleQueries not implemented")
}

// UnsafeSampleQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SampleQueryServiceServer will
// result in compilation errors.
type UnsafeSampleQueryServiceServer interface {
	mustEmbedUnimplementedSampleQueryServiceServer()
}

func RegisterSampleQueryServiceServer(s grpc.ServiceRegistrar, srv SampleQueryServiceServer) {
	s.RegisterService(&SampleQueryService_ServiceDesc, srv)
}

func _SampleQueryService_GetSampleQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSampleQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleQueryServiceServer).GetSampleQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SampleQueryService_GetSampleQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleQueryServiceServer).GetSampleQuery(ctx, req.(*GetSampleQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleQueryService_ListSampleQueries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSampleQueriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleQueryServiceServer).ListSampleQueries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SampleQueryService_ListSampleQueries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleQueryServiceServer).ListSampleQueries(ctx, req.(*ListSampleQueriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleQueryService_CreateSampleQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSampleQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleQueryServiceServer).CreateSampleQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SampleQueryService_CreateSampleQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleQueryServiceServer).CreateSampleQuery(ctx, req.(*CreateSampleQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleQueryService_UpdateSampleQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSampleQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleQueryServiceServer).UpdateSampleQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SampleQueryService_UpdateSampleQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleQueryServiceServer).UpdateSampleQuery(ctx, req.(*UpdateSampleQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleQueryService_DeleteSampleQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSampleQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleQueryServiceServer).DeleteSampleQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SampleQueryService_DeleteSampleQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleQueryServiceServer).DeleteSampleQuery(ctx, req.(*DeleteSampleQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleQueryService_ImportSampleQueries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportSampleQueriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleQueryServiceServer).ImportSampleQueries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SampleQueryService_ImportSampleQueries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleQueryServiceServer).ImportSampleQueries(ctx, req.(*ImportSampleQueriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SampleQueryService_ServiceDesc is the grpc.ServiceDesc for SampleQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SampleQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.discoveryengine.v1alpha.SampleQueryService",
	HandlerType: (*SampleQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSampleQuery",
			Handler:    _SampleQueryService_GetSampleQuery_Handler,
		},
		{
			MethodName: "ListSampleQueries",
			Handler:    _SampleQueryService_ListSampleQueries_Handler,
		},
		{
			MethodName: "CreateSampleQuery",
			Handler:    _SampleQueryService_CreateSampleQuery_Handler,
		},
		{
			MethodName: "UpdateSampleQuery",
			Handler:    _SampleQueryService_UpdateSampleQuery_Handler,
		},
		{
			MethodName: "DeleteSampleQuery",
			Handler:    _SampleQueryService_DeleteSampleQuery_Handler,
		},
		{
			MethodName: "ImportSampleQueries",
			Handler:    _SampleQueryService_ImportSampleQueries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/discoveryengine/v1alpha/sample_query_service.proto",
}
