// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: google/cloud/discoveryengine/v1alpha/conversational_search_service.proto

package discoveryenginepb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ConversationalSearchService_ConverseConversation_FullMethodName = "/google.cloud.discoveryengine.v1alpha.ConversationalSearchService/ConverseConversation"
	ConversationalSearchService_CreateConversation_FullMethodName   = "/google.cloud.discoveryengine.v1alpha.ConversationalSearchService/CreateConversation"
	ConversationalSearchService_DeleteConversation_FullMethodName   = "/google.cloud.discoveryengine.v1alpha.ConversationalSearchService/DeleteConversation"
	ConversationalSearchService_UpdateConversation_FullMethodName   = "/google.cloud.discoveryengine.v1alpha.ConversationalSearchService/UpdateConversation"
	ConversationalSearchService_GetConversation_FullMethodName      = "/google.cloud.discoveryengine.v1alpha.ConversationalSearchService/GetConversation"
	ConversationalSearchService_ListConversations_FullMethodName    = "/google.cloud.discoveryengine.v1alpha.ConversationalSearchService/ListConversations"
	ConversationalSearchService_AnswerQuery_FullMethodName          = "/google.cloud.discoveryengine.v1alpha.ConversationalSearchService/AnswerQuery"
	ConversationalSearchService_GetAnswer_FullMethodName            = "/google.cloud.discoveryengine.v1alpha.ConversationalSearchService/GetAnswer"
	ConversationalSearchService_CreateSession_FullMethodName        = "/google.cloud.discoveryengine.v1alpha.ConversationalSearchService/CreateSession"
	ConversationalSearchService_DeleteSession_FullMethodName        = "/google.cloud.discoveryengine.v1alpha.ConversationalSearchService/DeleteSession"
	ConversationalSearchService_UpdateSession_FullMethodName        = "/google.cloud.discoveryengine.v1alpha.ConversationalSearchService/UpdateSession"
	ConversationalSearchService_GetSession_FullMethodName           = "/google.cloud.discoveryengine.v1alpha.ConversationalSearchService/GetSession"
	ConversationalSearchService_ListSessions_FullMethodName         = "/google.cloud.discoveryengine.v1alpha.ConversationalSearchService/ListSessions"
)

// ConversationalSearchServiceClient is the client API for ConversationalSearchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConversationalSearchServiceClient interface {
	// Converses a conversation.
	ConverseConversation(ctx context.Context, in *ConverseConversationRequest, opts ...grpc.CallOption) (*ConverseConversationResponse, error)
	// Creates a Conversation.
	//
	// If the [Conversation][google.cloud.discoveryengine.v1alpha.Conversation] to
	// create already exists, an ALREADY_EXISTS error is returned.
	CreateConversation(ctx context.Context, in *CreateConversationRequest, opts ...grpc.CallOption) (*Conversation, error)
	// Deletes a Conversation.
	//
	// If the [Conversation][google.cloud.discoveryengine.v1alpha.Conversation] to
	// delete does not exist, a NOT_FOUND error is returned.
	DeleteConversation(ctx context.Context, in *DeleteConversationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Updates a Conversation.
	//
	// [Conversation][google.cloud.discoveryengine.v1alpha.Conversation] action
	// type cannot be changed. If the
	// [Conversation][google.cloud.discoveryengine.v1alpha.Conversation] to update
	// does not exist, a NOT_FOUND error is returned.
	UpdateConversation(ctx context.Context, in *UpdateConversationRequest, opts ...grpc.CallOption) (*Conversation, error)
	// Gets a Conversation.
	GetConversation(ctx context.Context, in *GetConversationRequest, opts ...grpc.CallOption) (*Conversation, error)
	// Lists all Conversations by their parent
	// [DataStore][google.cloud.discoveryengine.v1alpha.DataStore].
	ListConversations(ctx context.Context, in *ListConversationsRequest, opts ...grpc.CallOption) (*ListConversationsResponse, error)
	// Answer query method.
	AnswerQuery(ctx context.Context, in *AnswerQueryRequest, opts ...grpc.CallOption) (*AnswerQueryResponse, error)
	// Gets a Answer.
	GetAnswer(ctx context.Context, in *GetAnswerRequest, opts ...grpc.CallOption) (*Answer, error)
	// Creates a Session.
	//
	// If the [Session][google.cloud.discoveryengine.v1alpha.Session] to create
	// already exists, an ALREADY_EXISTS error is returned.
	CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*Session, error)
	// Deletes a Session.
	//
	// If the [Session][google.cloud.discoveryengine.v1alpha.Session] to delete
	// does not exist, a NOT_FOUND error is returned.
	DeleteSession(ctx context.Context, in *DeleteSessionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Updates a Session.
	//
	// [Session][google.cloud.discoveryengine.v1alpha.Session] action type cannot
	// be changed. If the [Session][google.cloud.discoveryengine.v1alpha.Session]
	// to update does not exist, a NOT_FOUND error is returned.
	UpdateSession(ctx context.Context, in *UpdateSessionRequest, opts ...grpc.CallOption) (*Session, error)
	// Gets a Session.
	GetSession(ctx context.Context, in *GetSessionRequest, opts ...grpc.CallOption) (*Session, error)
	// Lists all Sessions by their parent
	// [DataStore][google.cloud.discoveryengine.v1alpha.DataStore].
	ListSessions(ctx context.Context, in *ListSessionsRequest, opts ...grpc.CallOption) (*ListSessionsResponse, error)
}

type conversationalSearchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConversationalSearchServiceClient(cc grpc.ClientConnInterface) ConversationalSearchServiceClient {
	return &conversationalSearchServiceClient{cc}
}

func (c *conversationalSearchServiceClient) ConverseConversation(ctx context.Context, in *ConverseConversationRequest, opts ...grpc.CallOption) (*ConverseConversationResponse, error) {
	out := new(ConverseConversationResponse)
	err := c.cc.Invoke(ctx, ConversationalSearchService_ConverseConversation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationalSearchServiceClient) CreateConversation(ctx context.Context, in *CreateConversationRequest, opts ...grpc.CallOption) (*Conversation, error) {
	out := new(Conversation)
	err := c.cc.Invoke(ctx, ConversationalSearchService_CreateConversation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationalSearchServiceClient) DeleteConversation(ctx context.Context, in *DeleteConversationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ConversationalSearchService_DeleteConversation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationalSearchServiceClient) UpdateConversation(ctx context.Context, in *UpdateConversationRequest, opts ...grpc.CallOption) (*Conversation, error) {
	out := new(Conversation)
	err := c.cc.Invoke(ctx, ConversationalSearchService_UpdateConversation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationalSearchServiceClient) GetConversation(ctx context.Context, in *GetConversationRequest, opts ...grpc.CallOption) (*Conversation, error) {
	out := new(Conversation)
	err := c.cc.Invoke(ctx, ConversationalSearchService_GetConversation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationalSearchServiceClient) ListConversations(ctx context.Context, in *ListConversationsRequest, opts ...grpc.CallOption) (*ListConversationsResponse, error) {
	out := new(ListConversationsResponse)
	err := c.cc.Invoke(ctx, ConversationalSearchService_ListConversations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationalSearchServiceClient) AnswerQuery(ctx context.Context, in *AnswerQueryRequest, opts ...grpc.CallOption) (*AnswerQueryResponse, error) {
	out := new(AnswerQueryResponse)
	err := c.cc.Invoke(ctx, ConversationalSearchService_AnswerQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationalSearchServiceClient) GetAnswer(ctx context.Context, in *GetAnswerRequest, opts ...grpc.CallOption) (*Answer, error) {
	out := new(Answer)
	err := c.cc.Invoke(ctx, ConversationalSearchService_GetAnswer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationalSearchServiceClient) CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := c.cc.Invoke(ctx, ConversationalSearchService_CreateSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationalSearchServiceClient) DeleteSession(ctx context.Context, in *DeleteSessionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ConversationalSearchService_DeleteSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationalSearchServiceClient) UpdateSession(ctx context.Context, in *UpdateSessionRequest, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := c.cc.Invoke(ctx, ConversationalSearchService_UpdateSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationalSearchServiceClient) GetSession(ctx context.Context, in *GetSessionRequest, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := c.cc.Invoke(ctx, ConversationalSearchService_GetSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationalSearchServiceClient) ListSessions(ctx context.Context, in *ListSessionsRequest, opts ...grpc.CallOption) (*ListSessionsResponse, error) {
	out := new(ListSessionsResponse)
	err := c.cc.Invoke(ctx, ConversationalSearchService_ListSessions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConversationalSearchServiceServer is the server API for ConversationalSearchService service.
// All implementations should embed UnimplementedConversationalSearchServiceServer
// for forward compatibility
type ConversationalSearchServiceServer interface {
	// Converses a conversation.
	ConverseConversation(context.Context, *ConverseConversationRequest) (*ConverseConversationResponse, error)
	// Creates a Conversation.
	//
	// If the [Conversation][google.cloud.discoveryengine.v1alpha.Conversation] to
	// create already exists, an ALREADY_EXISTS error is returned.
	CreateConversation(context.Context, *CreateConversationRequest) (*Conversation, error)
	// Deletes a Conversation.
	//
	// If the [Conversation][google.cloud.discoveryengine.v1alpha.Conversation] to
	// delete does not exist, a NOT_FOUND error is returned.
	DeleteConversation(context.Context, *DeleteConversationRequest) (*emptypb.Empty, error)
	// Updates a Conversation.
	//
	// [Conversation][google.cloud.discoveryengine.v1alpha.Conversation] action
	// type cannot be changed. If the
	// [Conversation][google.cloud.discoveryengine.v1alpha.Conversation] to update
	// does not exist, a NOT_FOUND error is returned.
	UpdateConversation(context.Context, *UpdateConversationRequest) (*Conversation, error)
	// Gets a Conversation.
	GetConversation(context.Context, *GetConversationRequest) (*Conversation, error)
	// Lists all Conversations by their parent
	// [DataStore][google.cloud.discoveryengine.v1alpha.DataStore].
	ListConversations(context.Context, *ListConversationsRequest) (*ListConversationsResponse, error)
	// Answer query method.
	AnswerQuery(context.Context, *AnswerQueryRequest) (*AnswerQueryResponse, error)
	// Gets a Answer.
	GetAnswer(context.Context, *GetAnswerRequest) (*Answer, error)
	// Creates a Session.
	//
	// If the [Session][google.cloud.discoveryengine.v1alpha.Session] to create
	// already exists, an ALREADY_EXISTS error is returned.
	CreateSession(context.Context, *CreateSessionRequest) (*Session, error)
	// Deletes a Session.
	//
	// If the [Session][google.cloud.discoveryengine.v1alpha.Session] to delete
	// does not exist, a NOT_FOUND error is returned.
	DeleteSession(context.Context, *DeleteSessionRequest) (*emptypb.Empty, error)
	// Updates a Session.
	//
	// [Session][google.cloud.discoveryengine.v1alpha.Session] action type cannot
	// be changed. If the [Session][google.cloud.discoveryengine.v1alpha.Session]
	// to update does not exist, a NOT_FOUND error is returned.
	UpdateSession(context.Context, *UpdateSessionRequest) (*Session, error)
	// Gets a Session.
	GetSession(context.Context, *GetSessionRequest) (*Session, error)
	// Lists all Sessions by their parent
	// [DataStore][google.cloud.discoveryengine.v1alpha.DataStore].
	ListSessions(context.Context, *ListSessionsRequest) (*ListSessionsResponse, error)
}

// UnimplementedConversationalSearchServiceServer should be embedded to have forward compatible implementations.
type UnimplementedConversationalSearchServiceServer struct {
}

func (UnimplementedConversationalSearchServiceServer) ConverseConversation(context.Context, *ConverseConversationRequest) (*ConverseConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConverseConversation not implemented")
}
func (UnimplementedConversationalSearchServiceServer) CreateConversation(context.Context, *CreateConversationRequest) (*Conversation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConversation not implemented")
}
func (UnimplementedConversationalSearchServiceServer) DeleteConversation(context.Context, *DeleteConversationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConversation not implemented")
}
func (UnimplementedConversationalSearchServiceServer) UpdateConversation(context.Context, *UpdateConversationRequest) (*Conversation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConversation not implemented")
}
func (UnimplementedConversationalSearchServiceServer) GetConversation(context.Context, *GetConversationRequest) (*Conversation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConversation not implemented")
}
func (UnimplementedConversationalSearchServiceServer) ListConversations(context.Context, *ListConversationsRequest) (*ListConversationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConversations not implemented")
}
func (UnimplementedConversationalSearchServiceServer) AnswerQuery(context.Context, *AnswerQueryRequest) (*AnswerQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnswerQuery not implemented")
}
func (UnimplementedConversationalSearchServiceServer) GetAnswer(context.Context, *GetAnswerRequest) (*Answer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnswer not implemented")
}
func (UnimplementedConversationalSearchServiceServer) CreateSession(context.Context, *CreateSessionRequest) (*Session, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (UnimplementedConversationalSearchServiceServer) DeleteSession(context.Context, *DeleteSessionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSession not implemented")
}
func (UnimplementedConversationalSearchServiceServer) UpdateSession(context.Context, *UpdateSessionRequest) (*Session, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSession not implemented")
}
func (UnimplementedConversationalSearchServiceServer) GetSession(context.Context, *GetSessionRequest) (*Session, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSession not implemented")
}
func (UnimplementedConversationalSearchServiceServer) ListSessions(context.Context, *ListSessionsRequest) (*ListSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSessions not implemented")
}

// UnsafeConversationalSearchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConversationalSearchServiceServer will
// result in compilation errors.
type UnsafeConversationalSearchServiceServer interface {
	mustEmbedUnimplementedConversationalSearchServiceServer()
}

func RegisterConversationalSearchServiceServer(s grpc.ServiceRegistrar, srv ConversationalSearchServiceServer) {
	s.RegisterService(&ConversationalSearchService_ServiceDesc, srv)
}

func _ConversationalSearchService_ConverseConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConverseConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationalSearchServiceServer).ConverseConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConversationalSearchService_ConverseConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationalSearchServiceServer).ConverseConversation(ctx, req.(*ConverseConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationalSearchService_CreateConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationalSearchServiceServer).CreateConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConversationalSearchService_CreateConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationalSearchServiceServer).CreateConversation(ctx, req.(*CreateConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationalSearchService_DeleteConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationalSearchServiceServer).DeleteConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConversationalSearchService_DeleteConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationalSearchServiceServer).DeleteConversation(ctx, req.(*DeleteConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationalSearchService_UpdateConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationalSearchServiceServer).UpdateConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConversationalSearchService_UpdateConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationalSearchServiceServer).UpdateConversation(ctx, req.(*UpdateConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationalSearchService_GetConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationalSearchServiceServer).GetConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConversationalSearchService_GetConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationalSearchServiceServer).GetConversation(ctx, req.(*GetConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationalSearchService_ListConversations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConversationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationalSearchServiceServer).ListConversations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConversationalSearchService_ListConversations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationalSearchServiceServer).ListConversations(ctx, req.(*ListConversationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationalSearchService_AnswerQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnswerQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationalSearchServiceServer).AnswerQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConversationalSearchService_AnswerQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationalSearchServiceServer).AnswerQuery(ctx, req.(*AnswerQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationalSearchService_GetAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationalSearchServiceServer).GetAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConversationalSearchService_GetAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationalSearchServiceServer).GetAnswer(ctx, req.(*GetAnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationalSearchService_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationalSearchServiceServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConversationalSearchService_CreateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationalSearchServiceServer).CreateSession(ctx, req.(*CreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationalSearchService_DeleteSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationalSearchServiceServer).DeleteSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConversationalSearchService_DeleteSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationalSearchServiceServer).DeleteSession(ctx, req.(*DeleteSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationalSearchService_UpdateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationalSearchServiceServer).UpdateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConversationalSearchService_UpdateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationalSearchServiceServer).UpdateSession(ctx, req.(*UpdateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationalSearchService_GetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationalSearchServiceServer).GetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConversationalSearchService_GetSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationalSearchServiceServer).GetSession(ctx, req.(*GetSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationalSearchService_ListSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationalSearchServiceServer).ListSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConversationalSearchService_ListSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationalSearchServiceServer).ListSessions(ctx, req.(*ListSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConversationalSearchService_ServiceDesc is the grpc.ServiceDesc for ConversationalSearchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConversationalSearchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.discoveryengine.v1alpha.ConversationalSearchService",
	HandlerType: (*ConversationalSearchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConverseConversation",
			Handler:    _ConversationalSearchService_ConverseConversation_Handler,
		},
		{
			MethodName: "CreateConversation",
			Handler:    _ConversationalSearchService_CreateConversation_Handler,
		},
		{
			MethodName: "DeleteConversation",
			Handler:    _ConversationalSearchService_DeleteConversation_Handler,
		},
		{
			MethodName: "UpdateConversation",
			Handler:    _ConversationalSearchService_UpdateConversation_Handler,
		},
		{
			MethodName: "GetConversation",
			Handler:    _ConversationalSearchService_GetConversation_Handler,
		},
		{
			MethodName: "ListConversations",
			Handler:    _ConversationalSearchService_ListConversations_Handler,
		},
		{
			MethodName: "AnswerQuery",
			Handler:    _ConversationalSearchService_AnswerQuery_Handler,
		},
		{
			MethodName: "GetAnswer",
			Handler:    _ConversationalSearchService_GetAnswer_Handler,
		},
		{
			MethodName: "CreateSession",
			Handler:    _ConversationalSearchService_CreateSession_Handler,
		},
		{
			MethodName: "DeleteSession",
			Handler:    _ConversationalSearchService_DeleteSession_Handler,
		},
		{
			MethodName: "UpdateSession",
			Handler:    _ConversationalSearchService_UpdateSession_Handler,
		},
		{
			MethodName: "GetSession",
			Handler:    _ConversationalSearchService_GetSession_Handler,
		},
		{
			MethodName: "ListSessions",
			Handler:    _ConversationalSearchService_ListSessions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/discoveryengine/v1alpha/conversational_search_service.proto",
}
