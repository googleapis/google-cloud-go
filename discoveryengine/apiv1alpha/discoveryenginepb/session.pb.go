// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.7
// source: google/cloud/discoveryengine/v1alpha/session.proto

package discoveryenginepb

import (
	reflect "reflect"
	sync "sync"

	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Original source of the file.
type FileSource int32

const (
	// Default value. Unknown source.
	FileSource_FILE_SOURCE_UNSPECIFIED FileSource = 0
	// The data of the file was provided inline (e.g. pasted from the clipboard).
	FileSource_FILE_SOURCE_INLINE FileSource = 1
	// The file was uploaded from a local file.
	FileSource_FILE_SOURCE_LOCAL FileSource = 2
	// The file was uploaded from Cloud Storage.
	FileSource_FILE_SOURCE_CLOUD_STORAGE FileSource = 3
	// The file was uploaded from Drive.
	FileSource_FILE_SOURCE_CLOUD_DRIVE FileSource = 4
	// The file was retrieved from a URL (e.g. public web).
	FileSource_FILE_SOURCE_URL FileSource = 5
)

// Enum value maps for FileSource.
var (
	FileSource_name = map[int32]string{
		0: "FILE_SOURCE_UNSPECIFIED",
		1: "FILE_SOURCE_INLINE",
		2: "FILE_SOURCE_LOCAL",
		3: "FILE_SOURCE_CLOUD_STORAGE",
		4: "FILE_SOURCE_CLOUD_DRIVE",
		5: "FILE_SOURCE_URL",
	}
	FileSource_value = map[string]int32{
		"FILE_SOURCE_UNSPECIFIED":   0,
		"FILE_SOURCE_INLINE":        1,
		"FILE_SOURCE_LOCAL":         2,
		"FILE_SOURCE_CLOUD_STORAGE": 3,
		"FILE_SOURCE_CLOUD_DRIVE":   4,
		"FILE_SOURCE_URL":           5,
	}
)

func (x FileSource) Enum() *FileSource {
	p := new(FileSource)
	*p = x
	return p
}

func (x FileSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileSource) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_discoveryengine_v1alpha_session_proto_enumTypes[0].Descriptor()
}

func (FileSource) Type() protoreflect.EnumType {
	return &file_google_cloud_discoveryengine_v1alpha_session_proto_enumTypes[0]
}

func (x FileSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileSource.Descriptor instead.
func (FileSource) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_discoveryengine_v1alpha_session_proto_rawDescGZIP(), []int{0}
}

// Enumeration of the state of the session.
type Session_State int32

const (
	// State is unspecified.
	Session_STATE_UNSPECIFIED Session_State = 0
	// The session is currently open.
	Session_IN_PROGRESS Session_State = 1
)

// Enum value maps for Session_State.
var (
	Session_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "IN_PROGRESS",
	}
	Session_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"IN_PROGRESS":       1,
	}
)

func (x Session_State) Enum() *Session_State {
	p := new(Session_State)
	*p = x
	return p
}

func (x Session_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Session_State) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_discoveryengine_v1alpha_session_proto_enumTypes[1].Descriptor()
}

func (Session_State) Type() protoreflect.EnumType {
	return &file_google_cloud_discoveryengine_v1alpha_session_proto_enumTypes[1]
}

func (x Session_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Session_State.Descriptor instead.
func (Session_State) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_discoveryengine_v1alpha_session_proto_rawDescGZIP(), []int{0, 0}
}

// Possible color spaces of an image (e.g., "RGB", "CMYK", "Grayscale").
type ImageCharacteristics_ColorSpace int32

const (
	// Default value. Unknown color space.
	ImageCharacteristics_COLOR_SPACE_UNSPECIFIED ImageCharacteristics_ColorSpace = 0
	// Red, green, blue colorspace.
	ImageCharacteristics_RGB ImageCharacteristics_ColorSpace = 1
	// Cyan, magenta, yellow, and black colorspace.
	ImageCharacteristics_CMYK ImageCharacteristics_ColorSpace = 2
	// Grayscale colorspace.
	ImageCharacteristics_GRAYSCALE ImageCharacteristics_ColorSpace = 3
	// YUV colorspace.
	ImageCharacteristics_YUV ImageCharacteristics_ColorSpace = 4
	// Other colorspace.
	ImageCharacteristics_OTHER_COLOR_SPACE ImageCharacteristics_ColorSpace = 5
)

// Enum value maps for ImageCharacteristics_ColorSpace.
var (
	ImageCharacteristics_ColorSpace_name = map[int32]string{
		0: "COLOR_SPACE_UNSPECIFIED",
		1: "RGB",
		2: "CMYK",
		3: "GRAYSCALE",
		4: "YUV",
		5: "OTHER_COLOR_SPACE",
	}
	ImageCharacteristics_ColorSpace_value = map[string]int32{
		"COLOR_SPACE_UNSPECIFIED": 0,
		"RGB":                     1,
		"CMYK":                    2,
		"GRAYSCALE":               3,
		"YUV":                     4,
		"OTHER_COLOR_SPACE":       5,
	}
)

func (x ImageCharacteristics_ColorSpace) Enum() *ImageCharacteristics_ColorSpace {
	p := new(ImageCharacteristics_ColorSpace)
	*p = x
	return p
}

func (x ImageCharacteristics_ColorSpace) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImageCharacteristics_ColorSpace) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_discoveryengine_v1alpha_session_proto_enumTypes[2].Descriptor()
}

func (ImageCharacteristics_ColorSpace) Type() protoreflect.EnumType {
	return &file_google_cloud_discoveryengine_v1alpha_session_proto_enumTypes[2]
}

func (x ImageCharacteristics_ColorSpace) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImageCharacteristics_ColorSpace.Descriptor instead.
func (ImageCharacteristics_ColorSpace) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_discoveryengine_v1alpha_session_proto_rawDescGZIP(), []int{2, 0}
}

// External session proto definition.
type Session struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Immutable. Fully qualified name
	// `projects/{project}/locations/global/collections/{collection}/engines/{engine}/sessions/*`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. The display name of the session.
	//
	// This field is used to identify the session in the UI.
	// By default, the display name is the first turn query text in the session.
	DisplayName string `protobuf:"bytes,7,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// The state of the session.
	State Session_State `protobuf:"varint,2,opt,name=state,proto3,enum=google.cloud.discoveryengine.v1alpha.Session_State" json:"state,omitempty"`
	// A unique identifier for tracking users.
	UserPseudoId string `protobuf:"bytes,3,opt,name=user_pseudo_id,json=userPseudoId,proto3" json:"user_pseudo_id,omitempty"`
	// Turns.
	Turns []*Session_Turn `protobuf:"bytes,4,rep,name=turns,proto3" json:"turns,omitempty"`
	// Output only. The time the session started.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Output only. The time the session finished.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Optional. Whether the session is pinned, pinned session will be displayed
	// on the top of the session list.
	IsPinned bool `protobuf:"varint,8,opt,name=is_pinned,json=isPinned,proto3" json:"is_pinned,omitempty"`
}

func (x *Session) Reset() {
	*x = Session{}
	mi := &file_google_cloud_discoveryengine_v1alpha_session_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session) ProtoMessage() {}

func (x *Session) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_discoveryengine_v1alpha_session_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session.ProtoReflect.Descriptor instead.
func (*Session) Descriptor() ([]byte, []int) {
	return file_google_cloud_discoveryengine_v1alpha_session_proto_rawDescGZIP(), []int{0}
}

func (x *Session) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Session) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Session) GetState() Session_State {
	if x != nil {
		return x.State
	}
	return Session_STATE_UNSPECIFIED
}

func (x *Session) GetUserPseudoId() string {
	if x != nil {
		return x.UserPseudoId
	}
	return ""
}

func (x *Session) GetTurns() []*Session_Turn {
	if x != nil {
		return x.Turns
	}
	return nil
}

func (x *Session) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *Session) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *Session) GetIsPinned() bool {
	if x != nil {
		return x.IsPinned
	}
	return false
}

// Defines a user inputed query.
type Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Query content.
	//
	// Types that are assignable to Content:
	//
	//	*Query_Text
	Content isQuery_Content `protobuf_oneof:"content"`
	// Output only. Unique Id for the query.
	QueryId string `protobuf:"bytes,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
}

func (x *Query) Reset() {
	*x = Query{}
	mi := &file_google_cloud_discoveryengine_v1alpha_session_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_discoveryengine_v1alpha_session_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_google_cloud_discoveryengine_v1alpha_session_proto_rawDescGZIP(), []int{1}
}

func (m *Query) GetContent() isQuery_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *Query) GetText() string {
	if x, ok := x.GetContent().(*Query_Text); ok {
		return x.Text
	}
	return ""
}

func (x *Query) GetQueryId() string {
	if x != nil {
		return x.QueryId
	}
	return ""
}

type isQuery_Content interface {
	isQuery_Content()
}

type Query_Text struct {
	// Plain text.
	Text string `protobuf:"bytes,2,opt,name=text,proto3,oneof"`
}

func (*Query_Text) isQuery_Content() {}

// Standard characteristics of an image media view.
type ImageCharacteristics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Image width in pixels.
	Width int32 `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
	// Output only. Image height in pixels.
	Height int32 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	// Output only. Color space of the image (e.g., "RGB", "CMYK", "Grayscale").
	ColorSpace ImageCharacteristics_ColorSpace `protobuf:"varint,3,opt,name=color_space,json=colorSpace,proto3,enum=google.cloud.discoveryengine.v1alpha.ImageCharacteristics_ColorSpace" json:"color_space,omitempty"`
	// Output only. Bit depth of the image (e.g., 8-bit, 16-bit).
	BitDepth int32 `protobuf:"varint,4,opt,name=bit_depth,json=bitDepth,proto3" json:"bit_depth,omitempty"`
}

func (x *ImageCharacteristics) Reset() {
	*x = ImageCharacteristics{}
	mi := &file_google_cloud_discoveryengine_v1alpha_session_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImageCharacteristics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageCharacteristics) ProtoMessage() {}

func (x *ImageCharacteristics) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_discoveryengine_v1alpha_session_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageCharacteristics.ProtoReflect.Descriptor instead.
func (*ImageCharacteristics) Descriptor() ([]byte, []int) {
	return file_google_cloud_discoveryengine_v1alpha_session_proto_rawDescGZIP(), []int{2}
}

func (x *ImageCharacteristics) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *ImageCharacteristics) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *ImageCharacteristics) GetColorSpace() ImageCharacteristics_ColorSpace {
	if x != nil {
		return x.ColorSpace
	}
	return ImageCharacteristics_COLOR_SPACE_UNSPECIFIED
}

func (x *ImageCharacteristics) GetBitDepth() int32 {
	if x != nil {
		return x.BitDepth
	}
	return 0
}

// Standard characteristics of a video media view.
type VideoCharacteristics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Video width in pixels.
	Width int32 `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
	// Output only. Video height in pixels.
	Height int32 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	// Output only. Video duration.
	Duration *durationpb.Duration `protobuf:"bytes,3,opt,name=duration,proto3" json:"duration,omitempty"`
	// Output only. Frame rate (frames per second).
	FrameRate float64 `protobuf:"fixed64,4,opt,name=frame_rate,json=frameRate,proto3" json:"frame_rate,omitempty"`
	// Output only. Audio codecs used in the video.
	AudioCodecs []string `protobuf:"bytes,5,rep,name=audio_codecs,json=audioCodecs,proto3" json:"audio_codecs,omitempty"`
	// Output only. Video codecs used in the video.
	VideoCodecs []string `protobuf:"bytes,6,rep,name=video_codecs,json=videoCodecs,proto3" json:"video_codecs,omitempty"`
	// Output only. Bitrate of the video in kbps.
	VideoBitrateKbps int32 `protobuf:"varint,7,opt,name=video_bitrate_kbps,json=videoBitrateKbps,proto3" json:"video_bitrate_kbps,omitempty"`
	// Output only. Bitrate of the audio in kbps.
	AudioBitrateKbps int32 `protobuf:"varint,8,opt,name=audio_bitrate_kbps,json=audioBitrateKbps,proto3" json:"audio_bitrate_kbps,omitempty"`
}

func (x *VideoCharacteristics) Reset() {
	*x = VideoCharacteristics{}
	mi := &file_google_cloud_discoveryengine_v1alpha_session_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VideoCharacteristics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoCharacteristics) ProtoMessage() {}

func (x *VideoCharacteristics) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_discoveryengine_v1alpha_session_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoCharacteristics.ProtoReflect.Descriptor instead.
func (*VideoCharacteristics) Descriptor() ([]byte, []int) {
	return file_google_cloud_discoveryengine_v1alpha_session_proto_rawDescGZIP(), []int{3}
}

func (x *VideoCharacteristics) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *VideoCharacteristics) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *VideoCharacteristics) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *VideoCharacteristics) GetFrameRate() float64 {
	if x != nil {
		return x.FrameRate
	}
	return 0
}

func (x *VideoCharacteristics) GetAudioCodecs() []string {
	if x != nil {
		return x.AudioCodecs
	}
	return nil
}

func (x *VideoCharacteristics) GetVideoCodecs() []string {
	if x != nil {
		return x.VideoCodecs
	}
	return nil
}

func (x *VideoCharacteristics) GetVideoBitrateKbps() int32 {
	if x != nil {
		return x.VideoBitrateKbps
	}
	return 0
}

func (x *VideoCharacteristics) GetAudioBitrateKbps() int32 {
	if x != nil {
		return x.AudioBitrateKbps
	}
	return 0
}

// Caracteristics of other file types.
type FileCharacteristics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Generic map of characteristics.
	Characteristics map[string]string `protobuf:"bytes,6,rep,name=characteristics,proto3" json:"characteristics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FileCharacteristics) Reset() {
	*x = FileCharacteristics{}
	mi := &file_google_cloud_discoveryengine_v1alpha_session_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileCharacteristics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileCharacteristics) ProtoMessage() {}

func (x *FileCharacteristics) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_discoveryengine_v1alpha_session_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileCharacteristics.ProtoReflect.Descriptor instead.
func (*FileCharacteristics) Descriptor() ([]byte, []int) {
	return file_google_cloud_discoveryengine_v1alpha_session_proto_rawDescGZIP(), []int{4}
}

func (x *FileCharacteristics) GetCharacteristics() map[string]string {
	if x != nil {
		return x.Characteristics
	}
	return nil
}

// Represents a specific alternate version or "view" of a file object,
// such as a summary, a thumbnail, a translated version, etc.
type FileView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Characteristics of the media view, allowing for flexible extensions.
	// Metadata is always internally generated by the process creating
	// the view.
	//
	// Types that are assignable to Characteristics:
	//
	//	*FileView_ImageCharacteristics
	//	*FileView_VideoCharacteristics
	//	*FileView_FileCharacteristics
	Characteristics isFileView_Characteristics `protobuf_oneof:"characteristics"`
	// Output only. Globally Unique id for this specific view.
	ViewId string `protobuf:"bytes,1,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
	// Output only. The URI to access this media view.
	Uri string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	// Output only. MIME type (e.g., "image/jpeg", "image/png", "text/plain",
	// "video/mp4")
	MimeType string `protobuf:"bytes,3,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	// Output only. The size of the view in bytes.
	ByteSize int64 `protobuf:"varint,4,opt,name=byte_size,json=byteSize,proto3" json:"byte_size,omitempty"`
	// Output only. The time the view was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *FileView) Reset() {
	*x = FileView{}
	mi := &file_google_cloud_discoveryengine_v1alpha_session_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileView) ProtoMessage() {}

func (x *FileView) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_discoveryengine_v1alpha_session_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileView.ProtoReflect.Descriptor instead.
func (*FileView) Descriptor() ([]byte, []int) {
	return file_google_cloud_discoveryengine_v1alpha_session_proto_rawDescGZIP(), []int{5}
}

func (m *FileView) GetCharacteristics() isFileView_Characteristics {
	if m != nil {
		return m.Characteristics
	}
	return nil
}

func (x *FileView) GetImageCharacteristics() *ImageCharacteristics {
	if x, ok := x.GetCharacteristics().(*FileView_ImageCharacteristics); ok {
		return x.ImageCharacteristics
	}
	return nil
}

func (x *FileView) GetVideoCharacteristics() *VideoCharacteristics {
	if x, ok := x.GetCharacteristics().(*FileView_VideoCharacteristics); ok {
		return x.VideoCharacteristics
	}
	return nil
}

func (x *FileView) GetFileCharacteristics() *FileCharacteristics {
	if x, ok := x.GetCharacteristics().(*FileView_FileCharacteristics); ok {
		return x.FileCharacteristics
	}
	return nil
}

func (x *FileView) GetViewId() string {
	if x != nil {
		return x.ViewId
	}
	return ""
}

func (x *FileView) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *FileView) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *FileView) GetByteSize() int64 {
	if x != nil {
		return x.ByteSize
	}
	return 0
}

func (x *FileView) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

type isFileView_Characteristics interface {
	isFileView_Characteristics()
}

type FileView_ImageCharacteristics struct {
	// Output only. Characteristics of an image media view.
	ImageCharacteristics *ImageCharacteristics `protobuf:"bytes,6,opt,name=image_characteristics,json=imageCharacteristics,proto3,oneof"`
}

type FileView_VideoCharacteristics struct {
	// Output only. Characteristics of a video media view.
	VideoCharacteristics *VideoCharacteristics `protobuf:"bytes,7,opt,name=video_characteristics,json=videoCharacteristics,proto3,oneof"`
}

type FileView_FileCharacteristics struct {
	// Output only. Characteristics of other file types.
	FileCharacteristics *FileCharacteristics `protobuf:"bytes,8,opt,name=file_characteristics,json=fileCharacteristics,proto3,oneof"`
}

func (*FileView_ImageCharacteristics) isFileView_Characteristics() {}

func (*FileView_VideoCharacteristics) isFileView_Characteristics() {}

func (*FileView_FileCharacteristics) isFileView_Characteristics() {}

// Represents a file attached to a session (context file)
type FileMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The ID of the file.
	FileId string `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	// Output only. The name of the file uploaded.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The content type of the file, see
	// https://www.iana.org/assignments/media-types/media-types.xhtml.
	MimeType string `protobuf:"bytes,3,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	// Output only. The size of the context file in bytes.
	ByteSize int64 `protobuf:"varint,4,opt,name=byte_size,json=byteSize,proto3" json:"byte_size,omitempty"`
	// Optional. The original location of the file. It may be a local file path,
	// or any other URI that allows accessing the file in an external system.
	// There are two scenarios in which this url may be empty:
	// 1. If the file was sent as inline data (e.g. pasted from the clipboard).
	// 2. If the original location is not available.
	//
	// Note that there's no guarantee that the URI will be pointing to a valid
	// or actually existing file. For example, a file might have been uploaded
	// to the session, and then deleted from the original source.
	OriginalUri string `protobuf:"bytes,9,opt,name=original_uri,json=originalUri,proto3" json:"original_uri,omitempty"`
	// Optional. The type of the original source of the file.
	OriginalSourceType FileSource `protobuf:"varint,10,opt,name=original_source_type,json=originalSourceType,proto3,enum=google.cloud.discoveryengine.v1alpha.FileSource" json:"original_source_type,omitempty"`
	// Output only. The time the file was uploaded (If this is a file
	// generated by an internal process and then made available to the session,
	// this indicates the moment it happened).
	UploadTime *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=upload_time,json=uploadTime,proto3" json:"upload_time,omitempty"`
	// Output only. The time the file was added to the session. Note that if a
	// file was added, then modified externally, then added again, the add time
	// will be updated.
	LastAddTime *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=last_add_time,json=lastAddTime,proto3" json:"last_add_time,omitempty"`
	// Optional. Represents metadata related to the file that can suit particular
	// use cases. The prefix "google." is reserved for the key for use by
	// Google, but other prefixes can be freely used.
	Metadata map[string]string `protobuf:"bytes,18,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Output only. The
	// [AssistantService.DownloadSessionFile][google.cloud.discoveryengine.v1alpha.AssistantService.DownloadSessionFile]
	// URL to download the file. This URL will need the same credentials as
	// [AssistantService.ListSessionFileMetadata][google.cloud.discoveryengine.v1alpha.AssistantService.ListSessionFileMetadata]
	// method and will provide the resource.
	DownloadUri string `protobuf:"bytes,20,opt,name=download_uri,json=downloadUri,proto3" json:"download_uri,omitempty"`
	// Optional. The origin of the file.
	FileOriginType FileOriginType `protobuf:"varint,21,opt,name=file_origin_type,json=fileOriginType,proto3,enum=google.cloud.discoveryengine.v1alpha.FileOriginType" json:"file_origin_type,omitempty"`
	// Output only. Alternate views of this file object. Each file view is
	// attached to a specific role. Possible example keys:
	//   - "thumbnail"
	//   - "mobile_thumbnail"
	//   - "clip"
	//   - "summary"
	//   - "translation"
	Views map[string]*FileView `protobuf:"bytes,22,rep,name=views,proto3" json:"views,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FileMetadata) Reset() {
	*x = FileMetadata{}
	mi := &file_google_cloud_discoveryengine_v1alpha_session_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileMetadata) ProtoMessage() {}

func (x *FileMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_discoveryengine_v1alpha_session_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileMetadata.ProtoReflect.Descriptor instead.
func (*FileMetadata) Descriptor() ([]byte, []int) {
	return file_google_cloud_discoveryengine_v1alpha_session_proto_rawDescGZIP(), []int{6}
}

func (x *FileMetadata) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *FileMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FileMetadata) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *FileMetadata) GetByteSize() int64 {
	if x != nil {
		return x.ByteSize
	}
	return 0
}

func (x *FileMetadata) GetOriginalUri() string {
	if x != nil {
		return x.OriginalUri
	}
	return ""
}

func (x *FileMetadata) GetOriginalSourceType() FileSource {
	if x != nil {
		return x.OriginalSourceType
	}
	return FileSource_FILE_SOURCE_UNSPECIFIED
}

func (x *FileMetadata) GetUploadTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UploadTime
	}
	return nil
}

func (x *FileMetadata) GetLastAddTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastAddTime
	}
	return nil
}

func (x *FileMetadata) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *FileMetadata) GetDownloadUri() string {
	if x != nil {
		return x.DownloadUri
	}
	return ""
}

func (x *FileMetadata) GetFileOriginType() FileOriginType {
	if x != nil {
		return x.FileOriginType
	}
	return FileOriginType_FILE_ORIGIN_TYPE_UNSPECIFIED
}

func (x *FileMetadata) GetViews() map[string]*FileView {
	if x != nil {
		return x.Views
	}
	return nil
}

// Represents a turn, including a query from the user and a
// answer from service.
type Session_Turn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The user query. May not be set if this turn is merely
	// regenerating an answer to a different turn
	Query *Query `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// Optional. The resource name of the answer to the user query.
	//
	// Only set if the answer generation (/answer API call) happened in this
	// turn.
	Answer string `protobuf:"bytes,2,opt,name=answer,proto3" json:"answer,omitempty"`
	// Output only. In
	// [ConversationalSearchService.GetSession][google.cloud.discoveryengine.v1alpha.ConversationalSearchService.GetSession]
	// API, if
	// [GetSessionRequest.include_answer_details][google.cloud.discoveryengine.v1alpha.GetSessionRequest.include_answer_details]
	// is set to true, this field will be populated when getting answer query
	// session.
	DetailedAnswer *Answer `protobuf:"bytes,7,opt,name=detailed_answer,json=detailedAnswer,proto3" json:"detailed_answer,omitempty"`
	// Optional. Represents metadata related to the query config, for example
	// LLM model and version used, model parameters (temperature, grounding
	// parameters, etc.). The prefix "google." is reserved for Google-developed
	// functionality.
	QueryConfig map[string]string `protobuf:"bytes,16,rep,name=query_config,json=queryConfig,proto3" json:"query_config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Session_Turn) Reset() {
	*x = Session_Turn{}
	mi := &file_google_cloud_discoveryengine_v1alpha_session_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Session_Turn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session_Turn) ProtoMessage() {}

func (x *Session_Turn) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_discoveryengine_v1alpha_session_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session_Turn.ProtoReflect.Descriptor instead.
func (*Session_Turn) Descriptor() ([]byte, []int) {
	return file_google_cloud_discoveryengine_v1alpha_session_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Session_Turn) GetQuery() *Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *Session_Turn) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

func (x *Session_Turn) GetDetailedAnswer() *Answer {
	if x != nil {
		return x.DetailedAnswer
	}
	return nil
}

func (x *Session_Turn) GetQueryConfig() map[string]string {
	if x != nil {
		return x.QueryConfig
	}
	return nil
}

var File_google_cloud_discoveryengine_v1alpha_session_proto protoreflect.FileDescriptor

var file_google_cloud_discoveryengine_v1alpha_session_proto_rawDesc = []byte{
	0x0a, 0x32, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xde, 0x09,
	0x0a, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x05, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x73,
	0x65, 0x75, 0x64, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75,
	0x73, 0x65, 0x72, 0x50, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x05, 0x74,
	0x75, 0x72, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x75, 0x72, 0x6e, 0x52, 0x05,
	0x74, 0x75, 0x72, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x69, 0x73, 0x50, 0x69, 0x6e,
	0x6e, 0x65, 0x64, 0x1a, 0x9e, 0x03, 0x0a, 0x04, 0x54, 0x75, 0x72, 0x6e, 0x12, 0x46, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xe0, 0x41, 0x01, 0xfa, 0x41, 0x27, 0x0a, 0x25, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x5a, 0x0a, 0x0f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0e, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x6b, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x75, 0x72,
	0x6e, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x1a, 0x3e, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x2f, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a,
	0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52,
	0x45, 0x53, 0x53, 0x10, 0x01, 0x3a, 0xe6, 0x02, 0xea, 0x41, 0xe2, 0x02, 0x0a, 0x26, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x7d, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x12, 0x6b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x7d, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x7d, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x12, 0x64, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x73, 0x2f,
	0x7b, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x7d, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x7b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x2a, 0x08, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x48,
	0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a,
	0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x42, 0x09, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xca, 0x02, 0x0a, 0x14, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x12, 0x19, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x6b, 0x0a, 0x0b, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x62, 0x69, 0x74, 0x5f, 0x64, 0x65,
	0x70, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x08,
	0x62, 0x69, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x22, 0x6b, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f,
	0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x47, 0x42, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x43, 0x4d, 0x59, 0x4b, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x52, 0x41, 0x59, 0x53, 0x43,
	0x41, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x59, 0x55, 0x56, 0x10, 0x04, 0x12, 0x15,
	0x0a, 0x11, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x53, 0x50,
	0x41, 0x43, 0x45, 0x10, 0x05, 0x22, 0xe4, 0x02, 0x0a, 0x14, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x19,
	0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x63, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x73, 0x12, 0x26,
	0x0a, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x43, 0x6f, 0x64, 0x65, 0x63, 0x73, 0x12, 0x31, 0x0a, 0x12, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f,
	0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x62, 0x70, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x10, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x42, 0x69,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x4b, 0x62, 0x70, 0x73, 0x12, 0x31, 0x0a, 0x12, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x5f, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x62, 0x70, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x10, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x4b, 0x62, 0x70, 0x73, 0x22, 0xd8, 0x01, 0x0a,
	0x13, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x12, 0x7d, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x1a, 0x42, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbd, 0x04, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65,
	0x56, 0x69, 0x65, 0x77, 0x12, 0x76, 0x0a, 0x15, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x48, 0x00, 0x52, 0x14, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x76, 0x0a, 0x15,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x00, 0x52, 0x14,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x12, 0x73, 0x0a, 0x14, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x48, 0x00, 0x52, 0x13, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x1c, 0x0a, 0x07, 0x76, 0x69, 0x65,
	0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x06, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x20,
	0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x09, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x62, 0x79, 0x74, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0x8d, 0x07, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x09,
	0x62, 0x79, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x62, 0x79, 0x74, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26,
	0x0a, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x55, 0x72, 0x69, 0x12, 0x67, 0x0a, 0x14, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x12, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x40, 0x0a, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x43, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x41,
	0x64, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x61, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72,
	0x69, 0x12, 0x63, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x58, 0x0a, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18,
	0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73,
	0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x68, 0x0a,
	0x0a, 0x56, 0x69, 0x65, 0x77, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x44, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x69, 0x65, 0x77, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0xa9, 0x01, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x49, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c,
	0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x10,
	0x03, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x44, 0x52, 0x49, 0x56, 0x45, 0x10, 0x04, 0x12, 0x13,
	0x0a, 0x0f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x52,
	0x4c, 0x10, 0x05, 0x42, 0x98, 0x02, 0x0a, 0x28, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x42, 0x0c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x52, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x70, 0x62, 0x3b, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x70, 0x62, 0xa2, 0x02, 0x0f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59,
	0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0xaa, 0x02, 0x24, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x45,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0xca, 0x02, 0x24,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5c, 0x56, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0xea, 0x02, 0x27, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x45,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_discoveryengine_v1alpha_session_proto_rawDescOnce sync.Once
	file_google_cloud_discoveryengine_v1alpha_session_proto_rawDescData = file_google_cloud_discoveryengine_v1alpha_session_proto_rawDesc
)

func file_google_cloud_discoveryengine_v1alpha_session_proto_rawDescGZIP() []byte {
	file_google_cloud_discoveryengine_v1alpha_session_proto_rawDescOnce.Do(func() {
		file_google_cloud_discoveryengine_v1alpha_session_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_discoveryengine_v1alpha_session_proto_rawDescData)
	})
	return file_google_cloud_discoveryengine_v1alpha_session_proto_rawDescData
}

var file_google_cloud_discoveryengine_v1alpha_session_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_google_cloud_discoveryengine_v1alpha_session_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_google_cloud_discoveryengine_v1alpha_session_proto_goTypes = []any{
	(FileSource)(0),                      // 0: google.cloud.discoveryengine.v1alpha.FileSource
	(Session_State)(0),                   // 1: google.cloud.discoveryengine.v1alpha.Session.State
	(ImageCharacteristics_ColorSpace)(0), // 2: google.cloud.discoveryengine.v1alpha.ImageCharacteristics.ColorSpace
	(*Session)(nil),                      // 3: google.cloud.discoveryengine.v1alpha.Session
	(*Query)(nil),                        // 4: google.cloud.discoveryengine.v1alpha.Query
	(*ImageCharacteristics)(nil),         // 5: google.cloud.discoveryengine.v1alpha.ImageCharacteristics
	(*VideoCharacteristics)(nil),         // 6: google.cloud.discoveryengine.v1alpha.VideoCharacteristics
	(*FileCharacteristics)(nil),          // 7: google.cloud.discoveryengine.v1alpha.FileCharacteristics
	(*FileView)(nil),                     // 8: google.cloud.discoveryengine.v1alpha.FileView
	(*FileMetadata)(nil),                 // 9: google.cloud.discoveryengine.v1alpha.FileMetadata
	(*Session_Turn)(nil),                 // 10: google.cloud.discoveryengine.v1alpha.Session.Turn
	nil,                                  // 11: google.cloud.discoveryengine.v1alpha.Session.Turn.QueryConfigEntry
	nil,                                  // 12: google.cloud.discoveryengine.v1alpha.FileCharacteristics.CharacteristicsEntry
	nil,                                  // 13: google.cloud.discoveryengine.v1alpha.FileMetadata.MetadataEntry
	nil,                                  // 14: google.cloud.discoveryengine.v1alpha.FileMetadata.ViewsEntry
	(*timestamppb.Timestamp)(nil),        // 15: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),          // 16: google.protobuf.Duration
	(FileOriginType)(0),                  // 17: google.cloud.discoveryengine.v1alpha.FileOriginType
	(*Answer)(nil),                       // 18: google.cloud.discoveryengine.v1alpha.Answer
}
var file_google_cloud_discoveryengine_v1alpha_session_proto_depIdxs = []int32{
	1,  // 0: google.cloud.discoveryengine.v1alpha.Session.state:type_name -> google.cloud.discoveryengine.v1alpha.Session.State
	10, // 1: google.cloud.discoveryengine.v1alpha.Session.turns:type_name -> google.cloud.discoveryengine.v1alpha.Session.Turn
	15, // 2: google.cloud.discoveryengine.v1alpha.Session.start_time:type_name -> google.protobuf.Timestamp
	15, // 3: google.cloud.discoveryengine.v1alpha.Session.end_time:type_name -> google.protobuf.Timestamp
	2,  // 4: google.cloud.discoveryengine.v1alpha.ImageCharacteristics.color_space:type_name -> google.cloud.discoveryengine.v1alpha.ImageCharacteristics.ColorSpace
	16, // 5: google.cloud.discoveryengine.v1alpha.VideoCharacteristics.duration:type_name -> google.protobuf.Duration
	12, // 6: google.cloud.discoveryengine.v1alpha.FileCharacteristics.characteristics:type_name -> google.cloud.discoveryengine.v1alpha.FileCharacteristics.CharacteristicsEntry
	5,  // 7: google.cloud.discoveryengine.v1alpha.FileView.image_characteristics:type_name -> google.cloud.discoveryengine.v1alpha.ImageCharacteristics
	6,  // 8: google.cloud.discoveryengine.v1alpha.FileView.video_characteristics:type_name -> google.cloud.discoveryengine.v1alpha.VideoCharacteristics
	7,  // 9: google.cloud.discoveryengine.v1alpha.FileView.file_characteristics:type_name -> google.cloud.discoveryengine.v1alpha.FileCharacteristics
	15, // 10: google.cloud.discoveryengine.v1alpha.FileView.create_time:type_name -> google.protobuf.Timestamp
	0,  // 11: google.cloud.discoveryengine.v1alpha.FileMetadata.original_source_type:type_name -> google.cloud.discoveryengine.v1alpha.FileSource
	15, // 12: google.cloud.discoveryengine.v1alpha.FileMetadata.upload_time:type_name -> google.protobuf.Timestamp
	15, // 13: google.cloud.discoveryengine.v1alpha.FileMetadata.last_add_time:type_name -> google.protobuf.Timestamp
	13, // 14: google.cloud.discoveryengine.v1alpha.FileMetadata.metadata:type_name -> google.cloud.discoveryengine.v1alpha.FileMetadata.MetadataEntry
	17, // 15: google.cloud.discoveryengine.v1alpha.FileMetadata.file_origin_type:type_name -> google.cloud.discoveryengine.v1alpha.FileOriginType
	14, // 16: google.cloud.discoveryengine.v1alpha.FileMetadata.views:type_name -> google.cloud.discoveryengine.v1alpha.FileMetadata.ViewsEntry
	4,  // 17: google.cloud.discoveryengine.v1alpha.Session.Turn.query:type_name -> google.cloud.discoveryengine.v1alpha.Query
	18, // 18: google.cloud.discoveryengine.v1alpha.Session.Turn.detailed_answer:type_name -> google.cloud.discoveryengine.v1alpha.Answer
	11, // 19: google.cloud.discoveryengine.v1alpha.Session.Turn.query_config:type_name -> google.cloud.discoveryengine.v1alpha.Session.Turn.QueryConfigEntry
	8,  // 20: google.cloud.discoveryengine.v1alpha.FileMetadata.ViewsEntry.value:type_name -> google.cloud.discoveryengine.v1alpha.FileView
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_google_cloud_discoveryengine_v1alpha_session_proto_init() }
func file_google_cloud_discoveryengine_v1alpha_session_proto_init() {
	if File_google_cloud_discoveryengine_v1alpha_session_proto != nil {
		return
	}
	file_google_cloud_discoveryengine_v1alpha_answer_proto_init()
	file_google_cloud_discoveryengine_v1alpha_common_proto_init()
	file_google_cloud_discoveryengine_v1alpha_session_proto_msgTypes[1].OneofWrappers = []any{
		(*Query_Text)(nil),
	}
	file_google_cloud_discoveryengine_v1alpha_session_proto_msgTypes[5].OneofWrappers = []any{
		(*FileView_ImageCharacteristics)(nil),
		(*FileView_VideoCharacteristics)(nil),
		(*FileView_FileCharacteristics)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_discoveryengine_v1alpha_session_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_cloud_discoveryengine_v1alpha_session_proto_goTypes,
		DependencyIndexes: file_google_cloud_discoveryengine_v1alpha_session_proto_depIdxs,
		EnumInfos:         file_google_cloud_discoveryengine_v1alpha_session_proto_enumTypes,
		MessageInfos:      file_google_cloud_discoveryengine_v1alpha_session_proto_msgTypes,
	}.Build()
	File_google_cloud_discoveryengine_v1alpha_session_proto = out.File
	file_google_cloud_discoveryengine_v1alpha_session_proto_rawDesc = nil
	file_google_cloud_discoveryengine_v1alpha_session_proto_goTypes = nil
	file_google_cloud_discoveryengine_v1alpha_session_proto_depIdxs = nil
}
