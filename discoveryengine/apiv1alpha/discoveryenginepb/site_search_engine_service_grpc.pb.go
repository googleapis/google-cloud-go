// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: google/cloud/discoveryengine/v1alpha/site_search_engine_service.proto

package discoveryenginepb

import (
	context "context"

	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SiteSearchEngineService_GetSiteSearchEngine_FullMethodName           = "/google.cloud.discoveryengine.v1alpha.SiteSearchEngineService/GetSiteSearchEngine"
	SiteSearchEngineService_CreateTargetSite_FullMethodName              = "/google.cloud.discoveryengine.v1alpha.SiteSearchEngineService/CreateTargetSite"
	SiteSearchEngineService_BatchCreateTargetSites_FullMethodName        = "/google.cloud.discoveryengine.v1alpha.SiteSearchEngineService/BatchCreateTargetSites"
	SiteSearchEngineService_GetTargetSite_FullMethodName                 = "/google.cloud.discoveryengine.v1alpha.SiteSearchEngineService/GetTargetSite"
	SiteSearchEngineService_UpdateTargetSite_FullMethodName              = "/google.cloud.discoveryengine.v1alpha.SiteSearchEngineService/UpdateTargetSite"
	SiteSearchEngineService_DeleteTargetSite_FullMethodName              = "/google.cloud.discoveryengine.v1alpha.SiteSearchEngineService/DeleteTargetSite"
	SiteSearchEngineService_ListTargetSites_FullMethodName               = "/google.cloud.discoveryengine.v1alpha.SiteSearchEngineService/ListTargetSites"
	SiteSearchEngineService_EnableAdvancedSiteSearch_FullMethodName      = "/google.cloud.discoveryengine.v1alpha.SiteSearchEngineService/EnableAdvancedSiteSearch"
	SiteSearchEngineService_DisableAdvancedSiteSearch_FullMethodName     = "/google.cloud.discoveryengine.v1alpha.SiteSearchEngineService/DisableAdvancedSiteSearch"
	SiteSearchEngineService_RecrawlUris_FullMethodName                   = "/google.cloud.discoveryengine.v1alpha.SiteSearchEngineService/RecrawlUris"
	SiteSearchEngineService_BatchVerifyTargetSites_FullMethodName        = "/google.cloud.discoveryengine.v1alpha.SiteSearchEngineService/BatchVerifyTargetSites"
	SiteSearchEngineService_FetchDomainVerificationStatus_FullMethodName = "/google.cloud.discoveryengine.v1alpha.SiteSearchEngineService/FetchDomainVerificationStatus"
	SiteSearchEngineService_SetUriPatternDocumentData_FullMethodName     = "/google.cloud.discoveryengine.v1alpha.SiteSearchEngineService/SetUriPatternDocumentData"
	SiteSearchEngineService_GetUriPatternDocumentData_FullMethodName     = "/google.cloud.discoveryengine.v1alpha.SiteSearchEngineService/GetUriPatternDocumentData"
)

// SiteSearchEngineServiceClient is the client API for SiteSearchEngineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SiteSearchEngineServiceClient interface {
	// Gets the
	// [SiteSearchEngine][google.cloud.discoveryengine.v1alpha.SiteSearchEngine].
	GetSiteSearchEngine(ctx context.Context, in *GetSiteSearchEngineRequest, opts ...grpc.CallOption) (*SiteSearchEngine, error)
	// Creates a [TargetSite][google.cloud.discoveryengine.v1alpha.TargetSite].
	CreateTargetSite(ctx context.Context, in *CreateTargetSiteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Creates [TargetSite][google.cloud.discoveryengine.v1alpha.TargetSite] in a
	// batch.
	BatchCreateTargetSites(ctx context.Context, in *BatchCreateTargetSitesRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets a [TargetSite][google.cloud.discoveryengine.v1alpha.TargetSite].
	GetTargetSite(ctx context.Context, in *GetTargetSiteRequest, opts ...grpc.CallOption) (*TargetSite, error)
	// Updates a [TargetSite][google.cloud.discoveryengine.v1alpha.TargetSite].
	UpdateTargetSite(ctx context.Context, in *UpdateTargetSiteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a [TargetSite][google.cloud.discoveryengine.v1alpha.TargetSite].
	DeleteTargetSite(ctx context.Context, in *DeleteTargetSiteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets a list of
	// [TargetSite][google.cloud.discoveryengine.v1alpha.TargetSite]s.
	ListTargetSites(ctx context.Context, in *ListTargetSitesRequest, opts ...grpc.CallOption) (*ListTargetSitesResponse, error)
	// Upgrade from basic site search to advanced site search.
	EnableAdvancedSiteSearch(ctx context.Context, in *EnableAdvancedSiteSearchRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Downgrade from advanced site search to basic site search.
	DisableAdvancedSiteSearch(ctx context.Context, in *DisableAdvancedSiteSearchRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Request on-demand recrawl for a list of URIs.
	RecrawlUris(ctx context.Context, in *RecrawlUrisRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Verify target sites' ownership and validity.
	// This API sends all the target sites under site search engine for
	// verification.
	BatchVerifyTargetSites(ctx context.Context, in *BatchVerifyTargetSitesRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Returns list of target sites with its domain verification status.
	// This method can only be called under data store with BASIC_SITE_SEARCH
	// state at the moment.
	FetchDomainVerificationStatus(ctx context.Context, in *FetchDomainVerificationStatusRequest, opts ...grpc.CallOption) (*FetchDomainVerificationStatusResponse, error)
	// Sets the URI Pattern to Document data mapping for an Advanced Site Search
	// DataStore.
	SetUriPatternDocumentData(ctx context.Context, in *SetUriPatternDocumentDataRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets the URI Pattern to Document data mapping for an Advanced Site Search
	// DataStore.
	GetUriPatternDocumentData(ctx context.Context, in *GetUriPatternDocumentDataRequest, opts ...grpc.CallOption) (*GetUriPatternDocumentDataResponse, error)
}

type siteSearchEngineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSiteSearchEngineServiceClient(cc grpc.ClientConnInterface) SiteSearchEngineServiceClient {
	return &siteSearchEngineServiceClient{cc}
}

func (c *siteSearchEngineServiceClient) GetSiteSearchEngine(ctx context.Context, in *GetSiteSearchEngineRequest, opts ...grpc.CallOption) (*SiteSearchEngine, error) {
	out := new(SiteSearchEngine)
	err := c.cc.Invoke(ctx, SiteSearchEngineService_GetSiteSearchEngine_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteSearchEngineServiceClient) CreateTargetSite(ctx context.Context, in *CreateTargetSiteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, SiteSearchEngineService_CreateTargetSite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteSearchEngineServiceClient) BatchCreateTargetSites(ctx context.Context, in *BatchCreateTargetSitesRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, SiteSearchEngineService_BatchCreateTargetSites_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteSearchEngineServiceClient) GetTargetSite(ctx context.Context, in *GetTargetSiteRequest, opts ...grpc.CallOption) (*TargetSite, error) {
	out := new(TargetSite)
	err := c.cc.Invoke(ctx, SiteSearchEngineService_GetTargetSite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteSearchEngineServiceClient) UpdateTargetSite(ctx context.Context, in *UpdateTargetSiteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, SiteSearchEngineService_UpdateTargetSite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteSearchEngineServiceClient) DeleteTargetSite(ctx context.Context, in *DeleteTargetSiteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, SiteSearchEngineService_DeleteTargetSite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteSearchEngineServiceClient) ListTargetSites(ctx context.Context, in *ListTargetSitesRequest, opts ...grpc.CallOption) (*ListTargetSitesResponse, error) {
	out := new(ListTargetSitesResponse)
	err := c.cc.Invoke(ctx, SiteSearchEngineService_ListTargetSites_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteSearchEngineServiceClient) EnableAdvancedSiteSearch(ctx context.Context, in *EnableAdvancedSiteSearchRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, SiteSearchEngineService_EnableAdvancedSiteSearch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteSearchEngineServiceClient) DisableAdvancedSiteSearch(ctx context.Context, in *DisableAdvancedSiteSearchRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, SiteSearchEngineService_DisableAdvancedSiteSearch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteSearchEngineServiceClient) RecrawlUris(ctx context.Context, in *RecrawlUrisRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, SiteSearchEngineService_RecrawlUris_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteSearchEngineServiceClient) BatchVerifyTargetSites(ctx context.Context, in *BatchVerifyTargetSitesRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, SiteSearchEngineService_BatchVerifyTargetSites_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteSearchEngineServiceClient) FetchDomainVerificationStatus(ctx context.Context, in *FetchDomainVerificationStatusRequest, opts ...grpc.CallOption) (*FetchDomainVerificationStatusResponse, error) {
	out := new(FetchDomainVerificationStatusResponse)
	err := c.cc.Invoke(ctx, SiteSearchEngineService_FetchDomainVerificationStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteSearchEngineServiceClient) SetUriPatternDocumentData(ctx context.Context, in *SetUriPatternDocumentDataRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, SiteSearchEngineService_SetUriPatternDocumentData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteSearchEngineServiceClient) GetUriPatternDocumentData(ctx context.Context, in *GetUriPatternDocumentDataRequest, opts ...grpc.CallOption) (*GetUriPatternDocumentDataResponse, error) {
	out := new(GetUriPatternDocumentDataResponse)
	err := c.cc.Invoke(ctx, SiteSearchEngineService_GetUriPatternDocumentData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SiteSearchEngineServiceServer is the server API for SiteSearchEngineService service.
// All implementations should embed UnimplementedSiteSearchEngineServiceServer
// for forward compatibility
type SiteSearchEngineServiceServer interface {
	// Gets the
	// [SiteSearchEngine][google.cloud.discoveryengine.v1alpha.SiteSearchEngine].
	GetSiteSearchEngine(context.Context, *GetSiteSearchEngineRequest) (*SiteSearchEngine, error)
	// Creates a [TargetSite][google.cloud.discoveryengine.v1alpha.TargetSite].
	CreateTargetSite(context.Context, *CreateTargetSiteRequest) (*longrunningpb.Operation, error)
	// Creates [TargetSite][google.cloud.discoveryengine.v1alpha.TargetSite] in a
	// batch.
	BatchCreateTargetSites(context.Context, *BatchCreateTargetSitesRequest) (*longrunningpb.Operation, error)
	// Gets a [TargetSite][google.cloud.discoveryengine.v1alpha.TargetSite].
	GetTargetSite(context.Context, *GetTargetSiteRequest) (*TargetSite, error)
	// Updates a [TargetSite][google.cloud.discoveryengine.v1alpha.TargetSite].
	UpdateTargetSite(context.Context, *UpdateTargetSiteRequest) (*longrunningpb.Operation, error)
	// Deletes a [TargetSite][google.cloud.discoveryengine.v1alpha.TargetSite].
	DeleteTargetSite(context.Context, *DeleteTargetSiteRequest) (*longrunningpb.Operation, error)
	// Gets a list of
	// [TargetSite][google.cloud.discoveryengine.v1alpha.TargetSite]s.
	ListTargetSites(context.Context, *ListTargetSitesRequest) (*ListTargetSitesResponse, error)
	// Upgrade from basic site search to advanced site search.
	EnableAdvancedSiteSearch(context.Context, *EnableAdvancedSiteSearchRequest) (*longrunningpb.Operation, error)
	// Downgrade from advanced site search to basic site search.
	DisableAdvancedSiteSearch(context.Context, *DisableAdvancedSiteSearchRequest) (*longrunningpb.Operation, error)
	// Request on-demand recrawl for a list of URIs.
	RecrawlUris(context.Context, *RecrawlUrisRequest) (*longrunningpb.Operation, error)
	// Verify target sites' ownership and validity.
	// This API sends all the target sites under site search engine for
	// verification.
	BatchVerifyTargetSites(context.Context, *BatchVerifyTargetSitesRequest) (*longrunningpb.Operation, error)
	// Returns list of target sites with its domain verification status.
	// This method can only be called under data store with BASIC_SITE_SEARCH
	// state at the moment.
	FetchDomainVerificationStatus(context.Context, *FetchDomainVerificationStatusRequest) (*FetchDomainVerificationStatusResponse, error)
	// Sets the URI Pattern to Document data mapping for an Advanced Site Search
	// DataStore.
	SetUriPatternDocumentData(context.Context, *SetUriPatternDocumentDataRequest) (*longrunningpb.Operation, error)
	// Gets the URI Pattern to Document data mapping for an Advanced Site Search
	// DataStore.
	GetUriPatternDocumentData(context.Context, *GetUriPatternDocumentDataRequest) (*GetUriPatternDocumentDataResponse, error)
}

// UnimplementedSiteSearchEngineServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSiteSearchEngineServiceServer struct {
}

func (UnimplementedSiteSearchEngineServiceServer) GetSiteSearchEngine(context.Context, *GetSiteSearchEngineRequest) (*SiteSearchEngine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSiteSearchEngine not implemented")
}
func (UnimplementedSiteSearchEngineServiceServer) CreateTargetSite(context.Context, *CreateTargetSiteRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTargetSite not implemented")
}
func (UnimplementedSiteSearchEngineServiceServer) BatchCreateTargetSites(context.Context, *BatchCreateTargetSitesRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreateTargetSites not implemented")
}
func (UnimplementedSiteSearchEngineServiceServer) GetTargetSite(context.Context, *GetTargetSiteRequest) (*TargetSite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTargetSite not implemented")
}
func (UnimplementedSiteSearchEngineServiceServer) UpdateTargetSite(context.Context, *UpdateTargetSiteRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTargetSite not implemented")
}
func (UnimplementedSiteSearchEngineServiceServer) DeleteTargetSite(context.Context, *DeleteTargetSiteRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTargetSite not implemented")
}
func (UnimplementedSiteSearchEngineServiceServer) ListTargetSites(context.Context, *ListTargetSitesRequest) (*ListTargetSitesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTargetSites not implemented")
}
func (UnimplementedSiteSearchEngineServiceServer) EnableAdvancedSiteSearch(context.Context, *EnableAdvancedSiteSearchRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableAdvancedSiteSearch not implemented")
}
func (UnimplementedSiteSearchEngineServiceServer) DisableAdvancedSiteSearch(context.Context, *DisableAdvancedSiteSearchRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableAdvancedSiteSearch not implemented")
}
func (UnimplementedSiteSearchEngineServiceServer) RecrawlUris(context.Context, *RecrawlUrisRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecrawlUris not implemented")
}
func (UnimplementedSiteSearchEngineServiceServer) BatchVerifyTargetSites(context.Context, *BatchVerifyTargetSitesRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchVerifyTargetSites not implemented")
}
func (UnimplementedSiteSearchEngineServiceServer) FetchDomainVerificationStatus(context.Context, *FetchDomainVerificationStatusRequest) (*FetchDomainVerificationStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchDomainVerificationStatus not implemented")
}
func (UnimplementedSiteSearchEngineServiceServer) SetUriPatternDocumentData(context.Context, *SetUriPatternDocumentDataRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUriPatternDocumentData not implemented")
}
func (UnimplementedSiteSearchEngineServiceServer) GetUriPatternDocumentData(context.Context, *GetUriPatternDocumentDataRequest) (*GetUriPatternDocumentDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUriPatternDocumentData not implemented")
}

// UnsafeSiteSearchEngineServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SiteSearchEngineServiceServer will
// result in compilation errors.
type UnsafeSiteSearchEngineServiceServer interface {
	mustEmbedUnimplementedSiteSearchEngineServiceServer()
}

func RegisterSiteSearchEngineServiceServer(s grpc.ServiceRegistrar, srv SiteSearchEngineServiceServer) {
	s.RegisterService(&SiteSearchEngineService_ServiceDesc, srv)
}

func _SiteSearchEngineService_GetSiteSearchEngine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSiteSearchEngineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteSearchEngineServiceServer).GetSiteSearchEngine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiteSearchEngineService_GetSiteSearchEngine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteSearchEngineServiceServer).GetSiteSearchEngine(ctx, req.(*GetSiteSearchEngineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteSearchEngineService_CreateTargetSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTargetSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteSearchEngineServiceServer).CreateTargetSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiteSearchEngineService_CreateTargetSite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteSearchEngineServiceServer).CreateTargetSite(ctx, req.(*CreateTargetSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteSearchEngineService_BatchCreateTargetSites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateTargetSitesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteSearchEngineServiceServer).BatchCreateTargetSites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiteSearchEngineService_BatchCreateTargetSites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteSearchEngineServiceServer).BatchCreateTargetSites(ctx, req.(*BatchCreateTargetSitesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteSearchEngineService_GetTargetSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTargetSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteSearchEngineServiceServer).GetTargetSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiteSearchEngineService_GetTargetSite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteSearchEngineServiceServer).GetTargetSite(ctx, req.(*GetTargetSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteSearchEngineService_UpdateTargetSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTargetSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteSearchEngineServiceServer).UpdateTargetSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiteSearchEngineService_UpdateTargetSite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteSearchEngineServiceServer).UpdateTargetSite(ctx, req.(*UpdateTargetSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteSearchEngineService_DeleteTargetSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTargetSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteSearchEngineServiceServer).DeleteTargetSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiteSearchEngineService_DeleteTargetSite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteSearchEngineServiceServer).DeleteTargetSite(ctx, req.(*DeleteTargetSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteSearchEngineService_ListTargetSites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTargetSitesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteSearchEngineServiceServer).ListTargetSites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiteSearchEngineService_ListTargetSites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteSearchEngineServiceServer).ListTargetSites(ctx, req.(*ListTargetSitesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteSearchEngineService_EnableAdvancedSiteSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableAdvancedSiteSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteSearchEngineServiceServer).EnableAdvancedSiteSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiteSearchEngineService_EnableAdvancedSiteSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteSearchEngineServiceServer).EnableAdvancedSiteSearch(ctx, req.(*EnableAdvancedSiteSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteSearchEngineService_DisableAdvancedSiteSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableAdvancedSiteSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteSearchEngineServiceServer).DisableAdvancedSiteSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiteSearchEngineService_DisableAdvancedSiteSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteSearchEngineServiceServer).DisableAdvancedSiteSearch(ctx, req.(*DisableAdvancedSiteSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteSearchEngineService_RecrawlUris_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecrawlUrisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteSearchEngineServiceServer).RecrawlUris(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiteSearchEngineService_RecrawlUris_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteSearchEngineServiceServer).RecrawlUris(ctx, req.(*RecrawlUrisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteSearchEngineService_BatchVerifyTargetSites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchVerifyTargetSitesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteSearchEngineServiceServer).BatchVerifyTargetSites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiteSearchEngineService_BatchVerifyTargetSites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteSearchEngineServiceServer).BatchVerifyTargetSites(ctx, req.(*BatchVerifyTargetSitesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteSearchEngineService_FetchDomainVerificationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchDomainVerificationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteSearchEngineServiceServer).FetchDomainVerificationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiteSearchEngineService_FetchDomainVerificationStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteSearchEngineServiceServer).FetchDomainVerificationStatus(ctx, req.(*FetchDomainVerificationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteSearchEngineService_SetUriPatternDocumentData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUriPatternDocumentDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteSearchEngineServiceServer).SetUriPatternDocumentData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiteSearchEngineService_SetUriPatternDocumentData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteSearchEngineServiceServer).SetUriPatternDocumentData(ctx, req.(*SetUriPatternDocumentDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteSearchEngineService_GetUriPatternDocumentData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUriPatternDocumentDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteSearchEngineServiceServer).GetUriPatternDocumentData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiteSearchEngineService_GetUriPatternDocumentData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteSearchEngineServiceServer).GetUriPatternDocumentData(ctx, req.(*GetUriPatternDocumentDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SiteSearchEngineService_ServiceDesc is the grpc.ServiceDesc for SiteSearchEngineService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SiteSearchEngineService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.discoveryengine.v1alpha.SiteSearchEngineService",
	HandlerType: (*SiteSearchEngineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSiteSearchEngine",
			Handler:    _SiteSearchEngineService_GetSiteSearchEngine_Handler,
		},
		{
			MethodName: "CreateTargetSite",
			Handler:    _SiteSearchEngineService_CreateTargetSite_Handler,
		},
		{
			MethodName: "BatchCreateTargetSites",
			Handler:    _SiteSearchEngineService_BatchCreateTargetSites_Handler,
		},
		{
			MethodName: "GetTargetSite",
			Handler:    _SiteSearchEngineService_GetTargetSite_Handler,
		},
		{
			MethodName: "UpdateTargetSite",
			Handler:    _SiteSearchEngineService_UpdateTargetSite_Handler,
		},
		{
			MethodName: "DeleteTargetSite",
			Handler:    _SiteSearchEngineService_DeleteTargetSite_Handler,
		},
		{
			MethodName: "ListTargetSites",
			Handler:    _SiteSearchEngineService_ListTargetSites_Handler,
		},
		{
			MethodName: "EnableAdvancedSiteSearch",
			Handler:    _SiteSearchEngineService_EnableAdvancedSiteSearch_Handler,
		},
		{
			MethodName: "DisableAdvancedSiteSearch",
			Handler:    _SiteSearchEngineService_DisableAdvancedSiteSearch_Handler,
		},
		{
			MethodName: "RecrawlUris",
			Handler:    _SiteSearchEngineService_RecrawlUris_Handler,
		},
		{
			MethodName: "BatchVerifyTargetSites",
			Handler:    _SiteSearchEngineService_BatchVerifyTargetSites_Handler,
		},
		{
			MethodName: "FetchDomainVerificationStatus",
			Handler:    _SiteSearchEngineService_FetchDomainVerificationStatus_Handler,
		},
		{
			MethodName: "SetUriPatternDocumentData",
			Handler:    _SiteSearchEngineService_SetUriPatternDocumentData_Handler,
		},
		{
			MethodName: "GetUriPatternDocumentData",
			Handler:    _SiteSearchEngineService_GetUriPatternDocumentData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/discoveryengine/v1alpha/site_search_engine_service.proto",
}
