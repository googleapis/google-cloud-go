// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: google/cloud/discoveryengine/v1alpha/sample_query_set_service.proto

package discoveryenginepb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SampleQuerySetService_GetSampleQuerySet_FullMethodName    = "/google.cloud.discoveryengine.v1alpha.SampleQuerySetService/GetSampleQuerySet"
	SampleQuerySetService_ListSampleQuerySets_FullMethodName  = "/google.cloud.discoveryengine.v1alpha.SampleQuerySetService/ListSampleQuerySets"
	SampleQuerySetService_CreateSampleQuerySet_FullMethodName = "/google.cloud.discoveryengine.v1alpha.SampleQuerySetService/CreateSampleQuerySet"
	SampleQuerySetService_UpdateSampleQuerySet_FullMethodName = "/google.cloud.discoveryengine.v1alpha.SampleQuerySetService/UpdateSampleQuerySet"
	SampleQuerySetService_DeleteSampleQuerySet_FullMethodName = "/google.cloud.discoveryengine.v1alpha.SampleQuerySetService/DeleteSampleQuerySet"
)

// SampleQuerySetServiceClient is the client API for SampleQuerySetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SampleQuerySetServiceClient interface {
	// Gets a
	// [SampleQuerySet][google.cloud.discoveryengine.v1alpha.SampleQuerySet].
	GetSampleQuerySet(ctx context.Context, in *GetSampleQuerySetRequest, opts ...grpc.CallOption) (*SampleQuerySet, error)
	// Gets a list of
	// [SampleQuerySet][google.cloud.discoveryengine.v1alpha.SampleQuerySet]s.
	ListSampleQuerySets(ctx context.Context, in *ListSampleQuerySetsRequest, opts ...grpc.CallOption) (*ListSampleQuerySetsResponse, error)
	// Creates a
	// [SampleQuerySet][google.cloud.discoveryengine.v1alpha.SampleQuerySet]
	CreateSampleQuerySet(ctx context.Context, in *CreateSampleQuerySetRequest, opts ...grpc.CallOption) (*SampleQuerySet, error)
	// Updates a
	// [SampleQuerySet][google.cloud.discoveryengine.v1alpha.SampleQuerySet].
	UpdateSampleQuerySet(ctx context.Context, in *UpdateSampleQuerySetRequest, opts ...grpc.CallOption) (*SampleQuerySet, error)
	// Deletes a
	// [SampleQuerySet][google.cloud.discoveryengine.v1alpha.SampleQuerySet].
	DeleteSampleQuerySet(ctx context.Context, in *DeleteSampleQuerySetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type sampleQuerySetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSampleQuerySetServiceClient(cc grpc.ClientConnInterface) SampleQuerySetServiceClient {
	return &sampleQuerySetServiceClient{cc}
}

func (c *sampleQuerySetServiceClient) GetSampleQuerySet(ctx context.Context, in *GetSampleQuerySetRequest, opts ...grpc.CallOption) (*SampleQuerySet, error) {
	out := new(SampleQuerySet)
	err := c.cc.Invoke(ctx, SampleQuerySetService_GetSampleQuerySet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleQuerySetServiceClient) ListSampleQuerySets(ctx context.Context, in *ListSampleQuerySetsRequest, opts ...grpc.CallOption) (*ListSampleQuerySetsResponse, error) {
	out := new(ListSampleQuerySetsResponse)
	err := c.cc.Invoke(ctx, SampleQuerySetService_ListSampleQuerySets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleQuerySetServiceClient) CreateSampleQuerySet(ctx context.Context, in *CreateSampleQuerySetRequest, opts ...grpc.CallOption) (*SampleQuerySet, error) {
	out := new(SampleQuerySet)
	err := c.cc.Invoke(ctx, SampleQuerySetService_CreateSampleQuerySet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleQuerySetServiceClient) UpdateSampleQuerySet(ctx context.Context, in *UpdateSampleQuerySetRequest, opts ...grpc.CallOption) (*SampleQuerySet, error) {
	out := new(SampleQuerySet)
	err := c.cc.Invoke(ctx, SampleQuerySetService_UpdateSampleQuerySet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleQuerySetServiceClient) DeleteSampleQuerySet(ctx context.Context, in *DeleteSampleQuerySetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SampleQuerySetService_DeleteSampleQuerySet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SampleQuerySetServiceServer is the server API for SampleQuerySetService service.
// All implementations should embed UnimplementedSampleQuerySetServiceServer
// for forward compatibility
type SampleQuerySetServiceServer interface {
	// Gets a
	// [SampleQuerySet][google.cloud.discoveryengine.v1alpha.SampleQuerySet].
	GetSampleQuerySet(context.Context, *GetSampleQuerySetRequest) (*SampleQuerySet, error)
	// Gets a list of
	// [SampleQuerySet][google.cloud.discoveryengine.v1alpha.SampleQuerySet]s.
	ListSampleQuerySets(context.Context, *ListSampleQuerySetsRequest) (*ListSampleQuerySetsResponse, error)
	// Creates a
	// [SampleQuerySet][google.cloud.discoveryengine.v1alpha.SampleQuerySet]
	CreateSampleQuerySet(context.Context, *CreateSampleQuerySetRequest) (*SampleQuerySet, error)
	// Updates a
	// [SampleQuerySet][google.cloud.discoveryengine.v1alpha.SampleQuerySet].
	UpdateSampleQuerySet(context.Context, *UpdateSampleQuerySetRequest) (*SampleQuerySet, error)
	// Deletes a
	// [SampleQuerySet][google.cloud.discoveryengine.v1alpha.SampleQuerySet].
	DeleteSampleQuerySet(context.Context, *DeleteSampleQuerySetRequest) (*emptypb.Empty, error)
}

// UnimplementedSampleQuerySetServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSampleQuerySetServiceServer struct {
}

func (UnimplementedSampleQuerySetServiceServer) GetSampleQuerySet(context.Context, *GetSampleQuerySetRequest) (*SampleQuerySet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSampleQuerySet not implemented")
}
func (UnimplementedSampleQuerySetServiceServer) ListSampleQuerySets(context.Context, *ListSampleQuerySetsRequest) (*ListSampleQuerySetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSampleQuerySets not implemented")
}
func (UnimplementedSampleQuerySetServiceServer) CreateSampleQuerySet(context.Context, *CreateSampleQuerySetRequest) (*SampleQuerySet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSampleQuerySet not implemented")
}
func (UnimplementedSampleQuerySetServiceServer) UpdateSampleQuerySet(context.Context, *UpdateSampleQuerySetRequest) (*SampleQuerySet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSampleQuerySet not implemented")
}
func (UnimplementedSampleQuerySetServiceServer) DeleteSampleQuerySet(context.Context, *DeleteSampleQuerySetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSampleQuerySet not implemented")
}

// UnsafeSampleQuerySetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SampleQuerySetServiceServer will
// result in compilation errors.
type UnsafeSampleQuerySetServiceServer interface {
	mustEmbedUnimplementedSampleQuerySetServiceServer()
}

func RegisterSampleQuerySetServiceServer(s grpc.ServiceRegistrar, srv SampleQuerySetServiceServer) {
	s.RegisterService(&SampleQuerySetService_ServiceDesc, srv)
}

func _SampleQuerySetService_GetSampleQuerySet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSampleQuerySetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleQuerySetServiceServer).GetSampleQuerySet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SampleQuerySetService_GetSampleQuerySet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleQuerySetServiceServer).GetSampleQuerySet(ctx, req.(*GetSampleQuerySetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleQuerySetService_ListSampleQuerySets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSampleQuerySetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleQuerySetServiceServer).ListSampleQuerySets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SampleQuerySetService_ListSampleQuerySets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleQuerySetServiceServer).ListSampleQuerySets(ctx, req.(*ListSampleQuerySetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleQuerySetService_CreateSampleQuerySet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSampleQuerySetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleQuerySetServiceServer).CreateSampleQuerySet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SampleQuerySetService_CreateSampleQuerySet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleQuerySetServiceServer).CreateSampleQuerySet(ctx, req.(*CreateSampleQuerySetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleQuerySetService_UpdateSampleQuerySet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSampleQuerySetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleQuerySetServiceServer).UpdateSampleQuerySet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SampleQuerySetService_UpdateSampleQuerySet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleQuerySetServiceServer).UpdateSampleQuerySet(ctx, req.(*UpdateSampleQuerySetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleQuerySetService_DeleteSampleQuerySet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSampleQuerySetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleQuerySetServiceServer).DeleteSampleQuerySet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SampleQuerySetService_DeleteSampleQuerySet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleQuerySetServiceServer).DeleteSampleQuerySet(ctx, req.(*DeleteSampleQuerySetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SampleQuerySetService_ServiceDesc is the grpc.ServiceDesc for SampleQuerySetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SampleQuerySetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.discoveryengine.v1alpha.SampleQuerySetService",
	HandlerType: (*SampleQuerySetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSampleQuerySet",
			Handler:    _SampleQuerySetService_GetSampleQuerySet_Handler,
		},
		{
			MethodName: "ListSampleQuerySets",
			Handler:    _SampleQuerySetService_ListSampleQuerySets_Handler,
		},
		{
			MethodName: "CreateSampleQuerySet",
			Handler:    _SampleQuerySetService_CreateSampleQuerySet_Handler,
		},
		{
			MethodName: "UpdateSampleQuerySet",
			Handler:    _SampleQuerySetService_UpdateSampleQuerySet_Handler,
		},
		{
			MethodName: "DeleteSampleQuerySet",
			Handler:    _SampleQuerySetService_DeleteSampleQuerySet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/discoveryengine/v1alpha/sample_query_set_service.proto",
}
