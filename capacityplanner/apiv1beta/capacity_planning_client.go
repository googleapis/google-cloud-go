// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package capacityplanner

import (
	"bytes"
	"context"
	"fmt"
	"log/slog"
	"math"
	"net/http"
	"net/url"
	"time"

	capacityplannerpb "cloud.google.com/go/capacityplanner/apiv1beta/capacityplannerpb"
	gax "github.com/googleapis/gax-go/v2"
	"google.golang.org/api/iterator"
	"google.golang.org/api/option"
	"google.golang.org/api/option/internaloption"
	gtransport "google.golang.org/api/transport/grpc"
	httptransport "google.golang.org/api/transport/http"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
)

var newCapacityPlanningClientHook clientHook

// CapacityPlanningCallOptions contains the retry settings for each method of CapacityPlanningClient.
type CapacityPlanningCallOptions struct {
	GetCapacityPlan           []gax.CallOption
	QueryCapacityPlans        []gax.CallOption
	QueryCapacityPlanInsights []gax.CallOption
}

func defaultCapacityPlanningGRPCClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("capacityplanner.googleapis.com:443"),
		internaloption.WithDefaultEndpointTemplate("capacityplanner.UNIVERSE_DOMAIN:443"),
		internaloption.WithDefaultMTLSEndpoint("capacityplanner.mtls.googleapis.com:443"),
		internaloption.WithDefaultUniverseDomain("googleapis.com"),
		internaloption.WithDefaultAudience("https://capacityplanner.googleapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableJwtWithScope(),
		internaloption.EnableNewAuthLibrary(),
		option.WithGRPCDialOption(grpc.WithDefaultCallOptions(
			grpc.MaxCallRecvMsgSize(math.MaxInt32))),
	}
}

func defaultCapacityPlanningCallOptions() *CapacityPlanningCallOptions {
	return &CapacityPlanningCallOptions{
		GetCapacityPlan: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
					codes.DeadlineExceeded,
					codes.Internal,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		QueryCapacityPlans: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
					codes.DeadlineExceeded,
					codes.Internal,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		QueryCapacityPlanInsights: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
					codes.DeadlineExceeded,
					codes.Internal,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
	}
}

func defaultCapacityPlanningRESTCallOptions() *CapacityPlanningCallOptions {
	return &CapacityPlanningCallOptions{
		GetCapacityPlan: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnHTTPCodes(gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				},
					http.StatusServiceUnavailable,
					http.StatusGatewayTimeout,
					http.StatusInternalServerError)
			}),
		},
		QueryCapacityPlans: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnHTTPCodes(gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				},
					http.StatusServiceUnavailable,
					http.StatusGatewayTimeout,
					http.StatusInternalServerError)
			}),
		},
		QueryCapacityPlanInsights: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnHTTPCodes(gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				},
					http.StatusServiceUnavailable,
					http.StatusGatewayTimeout,
					http.StatusInternalServerError)
			}),
		},
	}
}

// internalCapacityPlanningClient is an interface that defines the methods available from Capacity Planner API.
type internalCapacityPlanningClient interface {
	Close() error
	setGoogleClientInfo(...string)
	Connection() *grpc.ClientConn
	GetCapacityPlan(context.Context, *capacityplannerpb.GetCapacityPlanRequest, ...gax.CallOption) (*capacityplannerpb.CapacityPlan, error)
	QueryCapacityPlans(context.Context, *capacityplannerpb.QueryCapacityPlansRequest, ...gax.CallOption) *CapacityPlanIterator
	QueryCapacityPlanInsights(context.Context, *capacityplannerpb.QueryCapacityPlanInsightsRequest, ...gax.CallOption) (*capacityplannerpb.QueryCapacityPlanInsightsResponse, error)
}

// CapacityPlanningClient is a client for interacting with Capacity Planner API.
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
//
// This API allows users to plan for GCP capacity associated with their
// projects. Users can request additional capacity for GCP resources such as
// VMs, PDs, etc.
type CapacityPlanningClient struct {
	// The internal transport-dependent client.
	internalClient internalCapacityPlanningClient

	// The call options for this service.
	CallOptions *CapacityPlanningCallOptions
}

// Wrapper methods routed to the internal client.

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *CapacityPlanningClient) Close() error {
	return c.internalClient.Close()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *CapacityPlanningClient) setGoogleClientInfo(keyval ...string) {
	c.internalClient.setGoogleClientInfo(keyval...)
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *CapacityPlanningClient) Connection() *grpc.ClientConn {
	return c.internalClient.Connection()
}

// GetCapacityPlan returns information about the capacity plan.
func (c *CapacityPlanningClient) GetCapacityPlan(ctx context.Context, req *capacityplannerpb.GetCapacityPlanRequest, opts ...gax.CallOption) (*capacityplannerpb.CapacityPlan, error) {
	return c.internalClient.GetCapacityPlan(ctx, req, opts...)
}

// QueryCapacityPlans returns a list of the capacity plans that are in the parent parameter and
// match your specified filters.
// (The maximum list length is limited by the pageSize parameter.)
func (c *CapacityPlanningClient) QueryCapacityPlans(ctx context.Context, req *capacityplannerpb.QueryCapacityPlansRequest, opts ...gax.CallOption) *CapacityPlanIterator {
	return c.internalClient.QueryCapacityPlans(ctx, req, opts...)
}

// QueryCapacityPlanInsights query capacity plan insights that are in the parent parameter and match
// your specified filters.
func (c *CapacityPlanningClient) QueryCapacityPlanInsights(ctx context.Context, req *capacityplannerpb.QueryCapacityPlanInsightsRequest, opts ...gax.CallOption) (*capacityplannerpb.QueryCapacityPlanInsightsResponse, error) {
	return c.internalClient.QueryCapacityPlanInsights(ctx, req, opts...)
}

// capacityPlanningGRPCClient is a client for interacting with Capacity Planner API over gRPC transport.
//
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type capacityPlanningGRPCClient struct {
	// Connection pool of gRPC connections to the service.
	connPool gtransport.ConnPool

	// Points back to the CallOptions field of the containing CapacityPlanningClient
	CallOptions **CapacityPlanningCallOptions

	// The gRPC API client.
	capacityPlanningClient capacityplannerpb.CapacityPlanningServiceClient

	// The x-goog-* metadata to be sent with each request.
	xGoogHeaders []string

	logger *slog.Logger
}

// NewCapacityPlanningClient creates a new capacity planning service client based on gRPC.
// The returned client must be Closed when it is done being used to clean up its underlying connections.
//
// This API allows users to plan for GCP capacity associated with their
// projects. Users can request additional capacity for GCP resources such as
// VMs, PDs, etc.
func NewCapacityPlanningClient(ctx context.Context, opts ...option.ClientOption) (*CapacityPlanningClient, error) {
	clientOpts := defaultCapacityPlanningGRPCClientOptions()
	if newCapacityPlanningClientHook != nil {
		hookOpts, err := newCapacityPlanningClientHook(ctx, clientHookParams{})
		if err != nil {
			return nil, err
		}
		clientOpts = append(clientOpts, hookOpts...)
	}

	connPool, err := gtransport.DialPool(ctx, append(clientOpts, opts...)...)
	if err != nil {
		return nil, err
	}
	client := CapacityPlanningClient{CallOptions: defaultCapacityPlanningCallOptions()}

	c := &capacityPlanningGRPCClient{
		connPool:               connPool,
		capacityPlanningClient: capacityplannerpb.NewCapacityPlanningServiceClient(connPool),
		CallOptions:            &client.CallOptions,
		logger:                 internaloption.GetLogger(opts),
	}
	c.setGoogleClientInfo()

	client.internalClient = c

	return &client, nil
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *capacityPlanningGRPCClient) Connection() *grpc.ClientConn {
	return c.connPool.Conn()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *capacityPlanningGRPCClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", gax.GoVersion}, keyval...)
	kv = append(kv, "gapic", getVersionClient(), "gax", gax.Version, "grpc", grpc.Version, "pb", protoVersion)
	c.xGoogHeaders = []string{
		"x-goog-api-client", gax.XGoogHeader(kv...),
	}
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *capacityPlanningGRPCClient) Close() error {
	return c.connPool.Close()
}

// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type capacityPlanningRESTClient struct {
	// The http endpoint to connect to.
	endpoint string

	// The http client.
	httpClient *http.Client

	// The x-goog-* headers to be sent with each request.
	xGoogHeaders []string

	// Points back to the CallOptions field of the containing CapacityPlanningClient
	CallOptions **CapacityPlanningCallOptions

	logger *slog.Logger
}

// NewCapacityPlanningRESTClient creates a new capacity planning service rest client.
//
// This API allows users to plan for GCP capacity associated with their
// projects. Users can request additional capacity for GCP resources such as
// VMs, PDs, etc.
func NewCapacityPlanningRESTClient(ctx context.Context, opts ...option.ClientOption) (*CapacityPlanningClient, error) {
	clientOpts := append(defaultCapacityPlanningRESTClientOptions(), opts...)
	httpClient, endpoint, err := httptransport.NewClient(ctx, clientOpts...)
	if err != nil {
		return nil, err
	}

	callOpts := defaultCapacityPlanningRESTCallOptions()
	c := &capacityPlanningRESTClient{
		endpoint:    endpoint,
		httpClient:  httpClient,
		CallOptions: &callOpts,
		logger:      internaloption.GetLogger(opts),
	}
	c.setGoogleClientInfo()

	return &CapacityPlanningClient{internalClient: c, CallOptions: callOpts}, nil
}

func defaultCapacityPlanningRESTClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("https://capacityplanner.googleapis.com"),
		internaloption.WithDefaultEndpointTemplate("https://capacityplanner.UNIVERSE_DOMAIN"),
		internaloption.WithDefaultMTLSEndpoint("https://capacityplanner.mtls.googleapis.com"),
		internaloption.WithDefaultUniverseDomain("googleapis.com"),
		internaloption.WithDefaultAudience("https://capacityplanner.googleapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableNewAuthLibrary(),
	}
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *capacityPlanningRESTClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", gax.GoVersion}, keyval...)
	kv = append(kv, "gapic", getVersionClient(), "gax", gax.Version, "rest", "UNKNOWN", "pb", protoVersion)
	c.xGoogHeaders = []string{
		"x-goog-api-client", gax.XGoogHeader(kv...),
	}
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *capacityPlanningRESTClient) Close() error {
	// Replace httpClient with nil to force cleanup.
	c.httpClient = nil
	return nil
}

// Connection returns a connection to the API service.
//
// Deprecated: This method always returns nil.
func (c *capacityPlanningRESTClient) Connection() *grpc.ClientConn {
	return nil
}
func (c *capacityPlanningGRPCClient) GetCapacityPlan(ctx context.Context, req *capacityplannerpb.GetCapacityPlanRequest, opts ...gax.CallOption) (*capacityplannerpb.CapacityPlan, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).GetCapacityPlan[0:len((*c.CallOptions).GetCapacityPlan):len((*c.CallOptions).GetCapacityPlan)], opts...)
	var resp *capacityplannerpb.CapacityPlan
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = executeRPC(ctx, c.capacityPlanningClient.GetCapacityPlan, req, settings.GRPC, c.logger, "GetCapacityPlan")
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *capacityPlanningGRPCClient) QueryCapacityPlans(ctx context.Context, req *capacityplannerpb.QueryCapacityPlansRequest, opts ...gax.CallOption) *CapacityPlanIterator {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).QueryCapacityPlans[0:len((*c.CallOptions).QueryCapacityPlans):len((*c.CallOptions).QueryCapacityPlans)], opts...)
	it := &CapacityPlanIterator{}
	req = proto.Clone(req).(*capacityplannerpb.QueryCapacityPlansRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*capacityplannerpb.CapacityPlan, string, error) {
		resp := &capacityplannerpb.QueryCapacityPlansResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = executeRPC(ctx, c.capacityPlanningClient.QueryCapacityPlans, req, settings.GRPC, c.logger, "QueryCapacityPlans")
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetCapacityPlans(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

func (c *capacityPlanningGRPCClient) QueryCapacityPlanInsights(ctx context.Context, req *capacityplannerpb.QueryCapacityPlanInsightsRequest, opts ...gax.CallOption) (*capacityplannerpb.QueryCapacityPlanInsightsResponse, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).QueryCapacityPlanInsights[0:len((*c.CallOptions).QueryCapacityPlanInsights):len((*c.CallOptions).QueryCapacityPlanInsights)], opts...)
	var resp *capacityplannerpb.QueryCapacityPlanInsightsResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = executeRPC(ctx, c.capacityPlanningClient.QueryCapacityPlanInsights, req, settings.GRPC, c.logger, "QueryCapacityPlanInsights")
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// GetCapacityPlan returns information about the capacity plan.
func (c *capacityPlanningRESTClient) GetCapacityPlan(ctx context.Context, req *capacityplannerpb.GetCapacityPlanRequest, opts ...gax.CallOption) (*capacityplannerpb.CapacityPlan, error) {
	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1beta/%v", req.GetName())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).GetCapacityPlan[0:len((*c.CallOptions).GetCapacityPlan):len((*c.CallOptions).GetCapacityPlan)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &capacityplannerpb.CapacityPlan{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		buf, err := executeHTTPRequest(ctx, c.httpClient, httpReq, c.logger, nil, "GetCapacityPlan")
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// QueryCapacityPlans returns a list of the capacity plans that are in the parent parameter and
// match your specified filters.
// (The maximum list length is limited by the pageSize parameter.)
func (c *capacityPlanningRESTClient) QueryCapacityPlans(ctx context.Context, req *capacityplannerpb.QueryCapacityPlansRequest, opts ...gax.CallOption) *CapacityPlanIterator {
	it := &CapacityPlanIterator{}
	req = proto.Clone(req).(*capacityplannerpb.QueryCapacityPlansRequest)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	it.InternalFetch = func(pageSize int, pageToken string) ([]*capacityplannerpb.CapacityPlan, string, error) {
		resp := &capacityplannerpb.QueryCapacityPlansResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		baseUrl, err := url.Parse(c.endpoint)
		if err != nil {
			return nil, "", err
		}
		baseUrl.Path += fmt.Sprintf("/v1beta/%v/capacityPlans:query", req.GetParent())

		params := url.Values{}
		params.Add("$alt", "json;enum-encoding=int")
		if req.GetLocation() != "" {
			params.Add("location", fmt.Sprintf("%v", req.GetLocation()))
		}
		if req.GetPageSize() != 0 {
			params.Add("pageSize", fmt.Sprintf("%v", req.GetPageSize()))
		}
		if req.GetPageToken() != "" {
			params.Add("pageToken", fmt.Sprintf("%v", req.GetPageToken()))
		}

		baseUrl.RawQuery = params.Encode()

		// Build HTTP headers from client and context metadata.
		hds := append(c.xGoogHeaders, "Content-Type", "application/json")
		headers := gax.BuildHeaders(ctx, hds...)
		e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			if settings.Path != "" {
				baseUrl.Path = settings.Path
			}
			httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
			if err != nil {
				return err
			}
			httpReq.Header = headers

			buf, err := executeHTTPRequest(ctx, c.httpClient, httpReq, c.logger, nil, "QueryCapacityPlans")
			if err != nil {
				return err
			}
			if err := unm.Unmarshal(buf, resp); err != nil {
				return err
			}

			return nil
		}, opts...)
		if e != nil {
			return nil, "", e
		}
		it.Response = resp
		return resp.GetCapacityPlans(), resp.GetNextPageToken(), nil
	}

	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

// QueryCapacityPlanInsights query capacity plan insights that are in the parent parameter and match
// your specified filters.
func (c *capacityPlanningRESTClient) QueryCapacityPlanInsights(ctx context.Context, req *capacityplannerpb.QueryCapacityPlanInsightsRequest, opts ...gax.CallOption) (*capacityplannerpb.QueryCapacityPlanInsightsResponse, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	jsonReq, err := m.Marshal(req)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1beta/%v/capacityPlanInsights:query", req.GetParent())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).QueryCapacityPlanInsights[0:len((*c.CallOptions).QueryCapacityPlanInsights):len((*c.CallOptions).QueryCapacityPlanInsights)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &capacityplannerpb.QueryCapacityPlanInsightsResponse{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		buf, err := executeHTTPRequest(ctx, c.httpClient, httpReq, c.logger, jsonReq, "QueryCapacityPlanInsights")
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}
