// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package capacityplanner

import (
	"bytes"
	"context"
	"fmt"
	"log/slog"
	"math"
	"net/http"
	"net/url"
	"time"

	capacityplannerpb "cloud.google.com/go/capacityplanner/apiv1beta/capacityplannerpb"
	"cloud.google.com/go/longrunning"
	lroauto "cloud.google.com/go/longrunning/autogen"
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	gax "github.com/googleapis/gax-go/v2"
	"google.golang.org/api/option"
	"google.golang.org/api/option/internaloption"
	gtransport "google.golang.org/api/transport/grpc"
	httptransport "google.golang.org/api/transport/http"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/protobuf/encoding/protojson"
)

var newUsageClientHook clientHook

// UsageCallOptions contains the retry settings for each method of UsageClient.
type UsageCallOptions struct {
	QueryUsageHistories     []gax.CallOption
	QueryForecasts          []gax.CallOption
	QueryReservations       []gax.CallOption
	ExportUsageHistories    []gax.CallOption
	ExportForecasts         []gax.CallOption
	ExportReservationsUsage []gax.CallOption
}

func defaultUsageGRPCClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("capacityplanner.googleapis.com:443"),
		internaloption.WithDefaultEndpointTemplate("capacityplanner.UNIVERSE_DOMAIN:443"),
		internaloption.WithDefaultMTLSEndpoint("capacityplanner.mtls.googleapis.com:443"),
		internaloption.WithDefaultUniverseDomain("googleapis.com"),
		internaloption.WithDefaultAudience("https://capacityplanner.googleapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableJwtWithScope(),
		internaloption.EnableNewAuthLibrary(),
		option.WithGRPCDialOption(grpc.WithDefaultCallOptions(
			grpc.MaxCallRecvMsgSize(math.MaxInt32))),
	}
}

func defaultUsageCallOptions() *UsageCallOptions {
	return &UsageCallOptions{
		QueryUsageHistories: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
					codes.DeadlineExceeded,
					codes.Internal,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		QueryForecasts: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
					codes.DeadlineExceeded,
					codes.Internal,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		QueryReservations: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
					codes.DeadlineExceeded,
					codes.Internal,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		ExportUsageHistories: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
					codes.DeadlineExceeded,
					codes.Internal,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		ExportForecasts: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
					codes.DeadlineExceeded,
					codes.Internal,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		ExportReservationsUsage: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
					codes.DeadlineExceeded,
					codes.Internal,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
	}
}

func defaultUsageRESTCallOptions() *UsageCallOptions {
	return &UsageCallOptions{
		QueryUsageHistories: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnHTTPCodes(gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				},
					http.StatusServiceUnavailable,
					http.StatusGatewayTimeout,
					http.StatusInternalServerError)
			}),
		},
		QueryForecasts: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnHTTPCodes(gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				},
					http.StatusServiceUnavailable,
					http.StatusGatewayTimeout,
					http.StatusInternalServerError)
			}),
		},
		QueryReservations: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnHTTPCodes(gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				},
					http.StatusServiceUnavailable,
					http.StatusGatewayTimeout,
					http.StatusInternalServerError)
			}),
		},
		ExportUsageHistories: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnHTTPCodes(gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				},
					http.StatusServiceUnavailable,
					http.StatusGatewayTimeout,
					http.StatusInternalServerError)
			}),
		},
		ExportForecasts: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnHTTPCodes(gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				},
					http.StatusServiceUnavailable,
					http.StatusGatewayTimeout,
					http.StatusInternalServerError)
			}),
		},
		ExportReservationsUsage: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnHTTPCodes(gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				},
					http.StatusServiceUnavailable,
					http.StatusGatewayTimeout,
					http.StatusInternalServerError)
			}),
		},
	}
}

// internalUsageClient is an interface that defines the methods available from Capacity Planner API.
type internalUsageClient interface {
	Close() error
	setGoogleClientInfo(...string)
	Connection() *grpc.ClientConn
	QueryUsageHistories(context.Context, *capacityplannerpb.QueryUsageHistoriesRequest, ...gax.CallOption) (*capacityplannerpb.QueryUsageHistoriesResponse, error)
	QueryForecasts(context.Context, *capacityplannerpb.QueryForecastsRequest, ...gax.CallOption) (*capacityplannerpb.QueryForecastsResponse, error)
	QueryReservations(context.Context, *capacityplannerpb.QueryReservationsRequest, ...gax.CallOption) (*capacityplannerpb.QueryReservationsResponse, error)
	ExportUsageHistories(context.Context, *capacityplannerpb.ExportUsageHistoriesRequest, ...gax.CallOption) (*ExportUsageHistoriesOperation, error)
	ExportUsageHistoriesOperation(name string) *ExportUsageHistoriesOperation
	ExportForecasts(context.Context, *capacityplannerpb.ExportForecastsRequest, ...gax.CallOption) (*ExportForecastsOperation, error)
	ExportForecastsOperation(name string) *ExportForecastsOperation
	ExportReservationsUsage(context.Context, *capacityplannerpb.ExportReservationsUsageRequest, ...gax.CallOption) (*ExportReservationsUsageOperation, error)
	ExportReservationsUsageOperation(name string) *ExportReservationsUsageOperation
}

// UsageClient is a client for interacting with Capacity Planner API.
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
//
// Provides access to historical and forecasted usage data.
type UsageClient struct {
	// The internal transport-dependent client.
	internalClient internalUsageClient

	// The call options for this service.
	CallOptions *UsageCallOptions

	// LROClient is used internally to handle long-running operations.
	// It is exposed so that its CallOptions can be modified if required.
	// Users should not Close this client.
	LROClient *lroauto.OperationsClient
}

// Wrapper methods routed to the internal client.

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *UsageClient) Close() error {
	return c.internalClient.Close()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *UsageClient) setGoogleClientInfo(keyval ...string) {
	c.internalClient.setGoogleClientInfo(keyval...)
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *UsageClient) Connection() *grpc.ClientConn {
	return c.internalClient.Connection()
}

// QueryUsageHistories returns a list of the usage histories that are in the parent parameter
// and match your specified filters.
func (c *UsageClient) QueryUsageHistories(ctx context.Context, req *capacityplannerpb.QueryUsageHistoriesRequest, opts ...gax.CallOption) (*capacityplannerpb.QueryUsageHistoriesResponse, error) {
	return c.internalClient.QueryUsageHistories(ctx, req, opts...)
}

// QueryForecasts returns a list of the forecasts that are in the parent parameter
// and match your specified filters.
func (c *UsageClient) QueryForecasts(ctx context.Context, req *capacityplannerpb.QueryForecastsRequest, opts ...gax.CallOption) (*capacityplannerpb.QueryForecastsResponse, error) {
	return c.internalClient.QueryForecasts(ctx, req, opts...)
}

// QueryReservations returns a list of the reservations that are in the parent parameter
// and match your specified filters.
func (c *UsageClient) QueryReservations(ctx context.Context, req *capacityplannerpb.QueryReservationsRequest, opts ...gax.CallOption) (*capacityplannerpb.QueryReservationsResponse, error) {
	return c.internalClient.QueryReservations(ctx, req, opts...)
}

// ExportUsageHistories exports historical usage data requested by user into either an existing
// Cloud Storage bucket or a BigQuery table.
func (c *UsageClient) ExportUsageHistories(ctx context.Context, req *capacityplannerpb.ExportUsageHistoriesRequest, opts ...gax.CallOption) (*ExportUsageHistoriesOperation, error) {
	return c.internalClient.ExportUsageHistories(ctx, req, opts...)
}

// ExportUsageHistoriesOperation returns a new ExportUsageHistoriesOperation from a given name.
// The name must be that of a previously created ExportUsageHistoriesOperation, possibly from a different process.
func (c *UsageClient) ExportUsageHistoriesOperation(name string) *ExportUsageHistoriesOperation {
	return c.internalClient.ExportUsageHistoriesOperation(name)
}

// ExportForecasts exports forecasted usage data requested by user into either an existing
// Cloud Storage bucket or a BigQuery table.
func (c *UsageClient) ExportForecasts(ctx context.Context, req *capacityplannerpb.ExportForecastsRequest, opts ...gax.CallOption) (*ExportForecastsOperation, error) {
	return c.internalClient.ExportForecasts(ctx, req, opts...)
}

// ExportForecastsOperation returns a new ExportForecastsOperation from a given name.
// The name must be that of a previously created ExportForecastsOperation, possibly from a different process.
func (c *UsageClient) ExportForecastsOperation(name string) *ExportForecastsOperation {
	return c.internalClient.ExportForecastsOperation(name)
}

// ExportReservationsUsage exports reservations usage data requested by user into either an existing
// Cloud Storage bucket or a new/existing BigQuery table.
func (c *UsageClient) ExportReservationsUsage(ctx context.Context, req *capacityplannerpb.ExportReservationsUsageRequest, opts ...gax.CallOption) (*ExportReservationsUsageOperation, error) {
	return c.internalClient.ExportReservationsUsage(ctx, req, opts...)
}

// ExportReservationsUsageOperation returns a new ExportReservationsUsageOperation from a given name.
// The name must be that of a previously created ExportReservationsUsageOperation, possibly from a different process.
func (c *UsageClient) ExportReservationsUsageOperation(name string) *ExportReservationsUsageOperation {
	return c.internalClient.ExportReservationsUsageOperation(name)
}

// usageGRPCClient is a client for interacting with Capacity Planner API over gRPC transport.
//
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type usageGRPCClient struct {
	// Connection pool of gRPC connections to the service.
	connPool gtransport.ConnPool

	// Points back to the CallOptions field of the containing UsageClient
	CallOptions **UsageCallOptions

	// The gRPC API client.
	usageClient capacityplannerpb.UsageServiceClient

	// LROClient is used internally to handle long-running operations.
	// It is exposed so that its CallOptions can be modified if required.
	// Users should not Close this client.
	LROClient **lroauto.OperationsClient

	// The x-goog-* metadata to be sent with each request.
	xGoogHeaders []string

	logger *slog.Logger
}

// NewUsageClient creates a new usage service client based on gRPC.
// The returned client must be Closed when it is done being used to clean up its underlying connections.
//
// Provides access to historical and forecasted usage data.
func NewUsageClient(ctx context.Context, opts ...option.ClientOption) (*UsageClient, error) {
	clientOpts := defaultUsageGRPCClientOptions()
	if newUsageClientHook != nil {
		hookOpts, err := newUsageClientHook(ctx, clientHookParams{})
		if err != nil {
			return nil, err
		}
		clientOpts = append(clientOpts, hookOpts...)
	}

	connPool, err := gtransport.DialPool(ctx, append(clientOpts, opts...)...)
	if err != nil {
		return nil, err
	}
	client := UsageClient{CallOptions: defaultUsageCallOptions()}

	c := &usageGRPCClient{
		connPool:    connPool,
		usageClient: capacityplannerpb.NewUsageServiceClient(connPool),
		CallOptions: &client.CallOptions,
		logger:      internaloption.GetLogger(opts),
	}
	c.setGoogleClientInfo()

	client.internalClient = c

	client.LROClient, err = lroauto.NewOperationsClient(ctx, gtransport.WithConnPool(connPool))
	if err != nil {
		// This error "should not happen", since we are just reusing old connection pool
		// and never actually need to dial.
		// If this does happen, we could leak connp. However, we cannot close conn:
		// If the user invoked the constructor with option.WithGRPCConn,
		// we would close a connection that's still in use.
		// TODO: investigate error conditions.
		return nil, err
	}
	c.LROClient = &client.LROClient
	return &client, nil
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *usageGRPCClient) Connection() *grpc.ClientConn {
	return c.connPool.Conn()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *usageGRPCClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", gax.GoVersion}, keyval...)
	kv = append(kv, "gapic", getVersionClient(), "gax", gax.Version, "grpc", grpc.Version, "pb", protoVersion)
	c.xGoogHeaders = []string{
		"x-goog-api-client", gax.XGoogHeader(kv...),
	}
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *usageGRPCClient) Close() error {
	return c.connPool.Close()
}

// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type usageRESTClient struct {
	// The http endpoint to connect to.
	endpoint string

	// The http client.
	httpClient *http.Client

	// LROClient is used internally to handle long-running operations.
	// It is exposed so that its CallOptions can be modified if required.
	// Users should not Close this client.
	LROClient **lroauto.OperationsClient

	// The x-goog-* headers to be sent with each request.
	xGoogHeaders []string

	// Points back to the CallOptions field of the containing UsageClient
	CallOptions **UsageCallOptions

	logger *slog.Logger
}

// NewUsageRESTClient creates a new usage service rest client.
//
// Provides access to historical and forecasted usage data.
func NewUsageRESTClient(ctx context.Context, opts ...option.ClientOption) (*UsageClient, error) {
	clientOpts := append(defaultUsageRESTClientOptions(), opts...)
	httpClient, endpoint, err := httptransport.NewClient(ctx, clientOpts...)
	if err != nil {
		return nil, err
	}

	callOpts := defaultUsageRESTCallOptions()
	c := &usageRESTClient{
		endpoint:    endpoint,
		httpClient:  httpClient,
		CallOptions: &callOpts,
		logger:      internaloption.GetLogger(opts),
	}
	c.setGoogleClientInfo()

	lroOpts := []option.ClientOption{
		option.WithHTTPClient(httpClient),
		option.WithEndpoint(endpoint),
	}
	opClient, err := lroauto.NewOperationsRESTClient(ctx, lroOpts...)
	if err != nil {
		return nil, err
	}
	c.LROClient = &opClient

	return &UsageClient{internalClient: c, CallOptions: callOpts}, nil
}

func defaultUsageRESTClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("https://capacityplanner.googleapis.com"),
		internaloption.WithDefaultEndpointTemplate("https://capacityplanner.UNIVERSE_DOMAIN"),
		internaloption.WithDefaultMTLSEndpoint("https://capacityplanner.mtls.googleapis.com"),
		internaloption.WithDefaultUniverseDomain("googleapis.com"),
		internaloption.WithDefaultAudience("https://capacityplanner.googleapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableNewAuthLibrary(),
	}
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *usageRESTClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", gax.GoVersion}, keyval...)
	kv = append(kv, "gapic", getVersionClient(), "gax", gax.Version, "rest", "UNKNOWN", "pb", protoVersion)
	c.xGoogHeaders = []string{
		"x-goog-api-client", gax.XGoogHeader(kv...),
	}
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *usageRESTClient) Close() error {
	// Replace httpClient with nil to force cleanup.
	c.httpClient = nil
	return nil
}

// Connection returns a connection to the API service.
//
// Deprecated: This method always returns nil.
func (c *usageRESTClient) Connection() *grpc.ClientConn {
	return nil
}
func (c *usageGRPCClient) QueryUsageHistories(ctx context.Context, req *capacityplannerpb.QueryUsageHistoriesRequest, opts ...gax.CallOption) (*capacityplannerpb.QueryUsageHistoriesResponse, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).QueryUsageHistories[0:len((*c.CallOptions).QueryUsageHistories):len((*c.CallOptions).QueryUsageHistories)], opts...)
	var resp *capacityplannerpb.QueryUsageHistoriesResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = executeRPC(ctx, c.usageClient.QueryUsageHistories, req, settings.GRPC, c.logger, "QueryUsageHistories")
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *usageGRPCClient) QueryForecasts(ctx context.Context, req *capacityplannerpb.QueryForecastsRequest, opts ...gax.CallOption) (*capacityplannerpb.QueryForecastsResponse, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).QueryForecasts[0:len((*c.CallOptions).QueryForecasts):len((*c.CallOptions).QueryForecasts)], opts...)
	var resp *capacityplannerpb.QueryForecastsResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = executeRPC(ctx, c.usageClient.QueryForecasts, req, settings.GRPC, c.logger, "QueryForecasts")
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *usageGRPCClient) QueryReservations(ctx context.Context, req *capacityplannerpb.QueryReservationsRequest, opts ...gax.CallOption) (*capacityplannerpb.QueryReservationsResponse, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).QueryReservations[0:len((*c.CallOptions).QueryReservations):len((*c.CallOptions).QueryReservations)], opts...)
	var resp *capacityplannerpb.QueryReservationsResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = executeRPC(ctx, c.usageClient.QueryReservations, req, settings.GRPC, c.logger, "QueryReservations")
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *usageGRPCClient) ExportUsageHistories(ctx context.Context, req *capacityplannerpb.ExportUsageHistoriesRequest, opts ...gax.CallOption) (*ExportUsageHistoriesOperation, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ExportUsageHistories[0:len((*c.CallOptions).ExportUsageHistories):len((*c.CallOptions).ExportUsageHistories)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = executeRPC(ctx, c.usageClient.ExportUsageHistories, req, settings.GRPC, c.logger, "ExportUsageHistories")
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &ExportUsageHistoriesOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *usageGRPCClient) ExportForecasts(ctx context.Context, req *capacityplannerpb.ExportForecastsRequest, opts ...gax.CallOption) (*ExportForecastsOperation, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ExportForecasts[0:len((*c.CallOptions).ExportForecasts):len((*c.CallOptions).ExportForecasts)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = executeRPC(ctx, c.usageClient.ExportForecasts, req, settings.GRPC, c.logger, "ExportForecasts")
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &ExportForecastsOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *usageGRPCClient) ExportReservationsUsage(ctx context.Context, req *capacityplannerpb.ExportReservationsUsageRequest, opts ...gax.CallOption) (*ExportReservationsUsageOperation, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ExportReservationsUsage[0:len((*c.CallOptions).ExportReservationsUsage):len((*c.CallOptions).ExportReservationsUsage)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = executeRPC(ctx, c.usageClient.ExportReservationsUsage, req, settings.GRPC, c.logger, "ExportReservationsUsage")
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &ExportReservationsUsageOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

// QueryUsageHistories returns a list of the usage histories that are in the parent parameter
// and match your specified filters.
func (c *usageRESTClient) QueryUsageHistories(ctx context.Context, req *capacityplannerpb.QueryUsageHistoriesRequest, opts ...gax.CallOption) (*capacityplannerpb.QueryUsageHistoriesResponse, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	jsonReq, err := m.Marshal(req)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1beta/%v/usageHistories:query", req.GetParent())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).QueryUsageHistories[0:len((*c.CallOptions).QueryUsageHistories):len((*c.CallOptions).QueryUsageHistories)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &capacityplannerpb.QueryUsageHistoriesResponse{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		buf, err := executeHTTPRequest(ctx, c.httpClient, httpReq, c.logger, jsonReq, "QueryUsageHistories")
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// QueryForecasts returns a list of the forecasts that are in the parent parameter
// and match your specified filters.
func (c *usageRESTClient) QueryForecasts(ctx context.Context, req *capacityplannerpb.QueryForecastsRequest, opts ...gax.CallOption) (*capacityplannerpb.QueryForecastsResponse, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	jsonReq, err := m.Marshal(req)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1beta/%v/forecasts:query", req.GetParent())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).QueryForecasts[0:len((*c.CallOptions).QueryForecasts):len((*c.CallOptions).QueryForecasts)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &capacityplannerpb.QueryForecastsResponse{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		buf, err := executeHTTPRequest(ctx, c.httpClient, httpReq, c.logger, jsonReq, "QueryForecasts")
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// QueryReservations returns a list of the reservations that are in the parent parameter
// and match your specified filters.
func (c *usageRESTClient) QueryReservations(ctx context.Context, req *capacityplannerpb.QueryReservationsRequest, opts ...gax.CallOption) (*capacityplannerpb.QueryReservationsResponse, error) {
	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1beta/%v/reservations:query", req.GetParent())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")
	if req.GetAggregationMethod() != 0 {
		params.Add("aggregationMethod", fmt.Sprintf("%v", req.GetAggregationMethod()))
	}
	if req.GetCloudResourceType() != "" {
		params.Add("cloudResourceType", fmt.Sprintf("%v", req.GetCloudResourceType()))
	}
	if req.GetEndDate().GetDay() != 0 {
		params.Add("endDate.day", fmt.Sprintf("%v", req.GetEndDate().GetDay()))
	}
	if req.GetEndDate().GetMonth() != 0 {
		params.Add("endDate.month", fmt.Sprintf("%v", req.GetEndDate().GetMonth()))
	}
	if req.GetEndDate().GetYear() != 0 {
		params.Add("endDate.year", fmt.Sprintf("%v", req.GetEndDate().GetYear()))
	}
	if req.GetGpuType() != "" {
		params.Add("gpuType", fmt.Sprintf("%v", req.GetGpuType()))
	}
	if req.GetIncludeUnapprovedReservations() {
		params.Add("includeUnapprovedReservations", fmt.Sprintf("%v", req.GetIncludeUnapprovedReservations()))
	}
	if req.GetLocationLevel() != 0 {
		params.Add("locationLevel", fmt.Sprintf("%v", req.GetLocationLevel()))
	}
	if req.GetMachineFamily() != "" {
		params.Add("machineFamily", fmt.Sprintf("%v", req.GetMachineFamily()))
	}
	if req.GetMachineShape().GetCpuCores() != 0 {
		params.Add("machineShape.cpuCores", fmt.Sprintf("%v", req.GetMachineShape().GetCpuCores()))
	}
	if req.GetMachineShape().GetGpuComputeType() != "" {
		params.Add("machineShape.gpuComputeType", fmt.Sprintf("%v", req.GetMachineShape().GetGpuComputeType()))
	}
	if req.GetMachineShape().GetGpuCores() != 0 {
		params.Add("machineShape.gpuCores", fmt.Sprintf("%v", req.GetMachineShape().GetGpuCores()))
	}
	if req.GetMachineShape().GetGpuType() != "" {
		params.Add("machineShape.gpuType", fmt.Sprintf("%v", req.GetMachineShape().GetGpuType()))
	}
	if req.GetMachineShape().GetLocalSsdGb() != 0 {
		params.Add("machineShape.localSsdGb", fmt.Sprintf("%v", req.GetMachineShape().GetLocalSsdGb()))
	}
	if req.GetMachineShape().GetLocalSsdInterface() != "" {
		params.Add("machineShape.localSsdInterface", fmt.Sprintf("%v", req.GetMachineShape().GetLocalSsdInterface()))
	}
	if req.GetMachineShape().GetLocalSsdPartitions() != 0 {
		params.Add("machineShape.localSsdPartitions", fmt.Sprintf("%v", req.GetMachineShape().GetLocalSsdPartitions()))
	}
	if req.GetMachineShape().GetMachineFamily() != "" {
		params.Add("machineShape.machineFamily", fmt.Sprintf("%v", req.GetMachineShape().GetMachineFamily()))
	}
	if req.GetMachineShape().GetMachineShape() != "" {
		params.Add("machineShape.machineShape", fmt.Sprintf("%v", req.GetMachineShape().GetMachineShape()))
	}
	if req.GetMachineShape().GetMachineType() != "" {
		params.Add("machineShape.machineType", fmt.Sprintf("%v", req.GetMachineShape().GetMachineType()))
	}
	if req.GetMachineShape().GetMemoryGb() != 0 {
		params.Add("machineShape.memoryGb", fmt.Sprintf("%v", req.GetMachineShape().GetMemoryGb()))
	}
	if req.GetMachineShape().GetMinCpuPlatform() != "" {
		params.Add("machineShape.minCpuPlatform", fmt.Sprintf("%v", req.GetMachineShape().GetMinCpuPlatform()))
	}
	if req.GetOwnershipType() != 0 {
		params.Add("ownershipType", fmt.Sprintf("%v", req.GetOwnershipType()))
	}
	if req.GetReservationDataLevel() != 0 {
		params.Add("reservationDataLevel", fmt.Sprintf("%v", req.GetReservationDataLevel()))
	}
	if req.GetReservationType() != 0 {
		params.Add("reservationType", fmt.Sprintf("%v", req.GetReservationType()))
	}
	if req.GetShareType() != 0 {
		params.Add("shareType", fmt.Sprintf("%v", req.GetShareType()))
	}
	if req.GetStartDate().GetDay() != 0 {
		params.Add("startDate.day", fmt.Sprintf("%v", req.GetStartDate().GetDay()))
	}
	if req.GetStartDate().GetMonth() != 0 {
		params.Add("startDate.month", fmt.Sprintf("%v", req.GetStartDate().GetMonth()))
	}
	if req.GetStartDate().GetYear() != 0 {
		params.Add("startDate.year", fmt.Sprintf("%v", req.GetStartDate().GetYear()))
	}

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).QueryReservations[0:len((*c.CallOptions).QueryReservations):len((*c.CallOptions).QueryReservations)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &capacityplannerpb.QueryReservationsResponse{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		buf, err := executeHTTPRequest(ctx, c.httpClient, httpReq, c.logger, nil, "QueryReservations")
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// ExportUsageHistories exports historical usage data requested by user into either an existing
// Cloud Storage bucket or a BigQuery table.
func (c *usageRESTClient) ExportUsageHistories(ctx context.Context, req *capacityplannerpb.ExportUsageHistoriesRequest, opts ...gax.CallOption) (*ExportUsageHistoriesOperation, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	jsonReq, err := m.Marshal(req)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1beta/%v/usageHistories:export", req.GetParent())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &longrunningpb.Operation{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		buf, err := executeHTTPRequest(ctx, c.httpClient, httpReq, c.logger, jsonReq, "ExportUsageHistories")
		if err != nil {
			return err
		}
		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}

	override := fmt.Sprintf("/v1beta/%s", resp.GetName())
	return &ExportUsageHistoriesOperation{
		lro:      longrunning.InternalNewOperation(*c.LROClient, resp),
		pollPath: override,
	}, nil
}

// ExportForecasts exports forecasted usage data requested by user into either an existing
// Cloud Storage bucket or a BigQuery table.
func (c *usageRESTClient) ExportForecasts(ctx context.Context, req *capacityplannerpb.ExportForecastsRequest, opts ...gax.CallOption) (*ExportForecastsOperation, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	jsonReq, err := m.Marshal(req)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1beta/%v/forecasts:export", req.GetParent())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &longrunningpb.Operation{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		buf, err := executeHTTPRequest(ctx, c.httpClient, httpReq, c.logger, jsonReq, "ExportForecasts")
		if err != nil {
			return err
		}
		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}

	override := fmt.Sprintf("/v1beta/%s", resp.GetName())
	return &ExportForecastsOperation{
		lro:      longrunning.InternalNewOperation(*c.LROClient, resp),
		pollPath: override,
	}, nil
}

// ExportReservationsUsage exports reservations usage data requested by user into either an existing
// Cloud Storage bucket or a new/existing BigQuery table.
func (c *usageRESTClient) ExportReservationsUsage(ctx context.Context, req *capacityplannerpb.ExportReservationsUsageRequest, opts ...gax.CallOption) (*ExportReservationsUsageOperation, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	jsonReq, err := m.Marshal(req)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1beta/%v/reservationsUsage:export", req.GetParent())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &longrunningpb.Operation{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		buf, err := executeHTTPRequest(ctx, c.httpClient, httpReq, c.logger, jsonReq, "ExportReservationsUsage")
		if err != nil {
			return err
		}
		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}

	override := fmt.Sprintf("/v1beta/%s", resp.GetName())
	return &ExportReservationsUsageOperation{
		lro:      longrunning.InternalNewOperation(*c.LROClient, resp),
		pollPath: override,
	}, nil
}

// ExportForecastsOperation returns a new ExportForecastsOperation from a given name.
// The name must be that of a previously created ExportForecastsOperation, possibly from a different process.
func (c *usageGRPCClient) ExportForecastsOperation(name string) *ExportForecastsOperation {
	return &ExportForecastsOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// ExportForecastsOperation returns a new ExportForecastsOperation from a given name.
// The name must be that of a previously created ExportForecastsOperation, possibly from a different process.
func (c *usageRESTClient) ExportForecastsOperation(name string) *ExportForecastsOperation {
	override := fmt.Sprintf("/v1beta/%s", name)
	return &ExportForecastsOperation{
		lro:      longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
		pollPath: override,
	}
}

// ExportReservationsUsageOperation returns a new ExportReservationsUsageOperation from a given name.
// The name must be that of a previously created ExportReservationsUsageOperation, possibly from a different process.
func (c *usageGRPCClient) ExportReservationsUsageOperation(name string) *ExportReservationsUsageOperation {
	return &ExportReservationsUsageOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// ExportReservationsUsageOperation returns a new ExportReservationsUsageOperation from a given name.
// The name must be that of a previously created ExportReservationsUsageOperation, possibly from a different process.
func (c *usageRESTClient) ExportReservationsUsageOperation(name string) *ExportReservationsUsageOperation {
	override := fmt.Sprintf("/v1beta/%s", name)
	return &ExportReservationsUsageOperation{
		lro:      longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
		pollPath: override,
	}
}

// ExportUsageHistoriesOperation returns a new ExportUsageHistoriesOperation from a given name.
// The name must be that of a previously created ExportUsageHistoriesOperation, possibly from a different process.
func (c *usageGRPCClient) ExportUsageHistoriesOperation(name string) *ExportUsageHistoriesOperation {
	return &ExportUsageHistoriesOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// ExportUsageHistoriesOperation returns a new ExportUsageHistoriesOperation from a given name.
// The name must be that of a previously created ExportUsageHistoriesOperation, possibly from a different process.
func (c *usageRESTClient) ExportUsageHistoriesOperation(name string) *ExportUsageHistoriesOperation {
	override := fmt.Sprintf("/v1beta/%s", name)
	return &ExportUsageHistoriesOperation{
		lro:      longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
		pollPath: override,
	}
}
