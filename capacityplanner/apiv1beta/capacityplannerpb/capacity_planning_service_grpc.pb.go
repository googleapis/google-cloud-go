// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/capacityplanner/v1beta/capacity_planning_service.proto

package capacityplannerpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CapacityPlanningService_GetCapacityPlan_FullMethodName           = "/google.cloud.capacityplanner.v1beta.CapacityPlanningService/GetCapacityPlan"
	CapacityPlanningService_QueryCapacityPlans_FullMethodName        = "/google.cloud.capacityplanner.v1beta.CapacityPlanningService/QueryCapacityPlans"
	CapacityPlanningService_QueryCapacityPlanInsights_FullMethodName = "/google.cloud.capacityplanner.v1beta.CapacityPlanningService/QueryCapacityPlanInsights"
)

// CapacityPlanningServiceClient is the client API for CapacityPlanningService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CapacityPlanningServiceClient interface {
	// Returns information about the capacity plan.
	GetCapacityPlan(ctx context.Context, in *GetCapacityPlanRequest, opts ...grpc.CallOption) (*CapacityPlan, error)
	// Returns a list of the capacity plans that are in the parent parameter and
	// match your specified filters.
	// (The maximum list length is limited by the pageSize parameter.)
	QueryCapacityPlans(ctx context.Context, in *QueryCapacityPlansRequest, opts ...grpc.CallOption) (*QueryCapacityPlansResponse, error)
	// Query capacity plan insights that are in the parent parameter and match
	// your specified filters.
	QueryCapacityPlanInsights(ctx context.Context, in *QueryCapacityPlanInsightsRequest, opts ...grpc.CallOption) (*QueryCapacityPlanInsightsResponse, error)
}

type capacityPlanningServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCapacityPlanningServiceClient(cc grpc.ClientConnInterface) CapacityPlanningServiceClient {
	return &capacityPlanningServiceClient{cc}
}

func (c *capacityPlanningServiceClient) GetCapacityPlan(ctx context.Context, in *GetCapacityPlanRequest, opts ...grpc.CallOption) (*CapacityPlan, error) {
	out := new(CapacityPlan)
	err := c.cc.Invoke(ctx, CapacityPlanningService_GetCapacityPlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *capacityPlanningServiceClient) QueryCapacityPlans(ctx context.Context, in *QueryCapacityPlansRequest, opts ...grpc.CallOption) (*QueryCapacityPlansResponse, error) {
	out := new(QueryCapacityPlansResponse)
	err := c.cc.Invoke(ctx, CapacityPlanningService_QueryCapacityPlans_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *capacityPlanningServiceClient) QueryCapacityPlanInsights(ctx context.Context, in *QueryCapacityPlanInsightsRequest, opts ...grpc.CallOption) (*QueryCapacityPlanInsightsResponse, error) {
	out := new(QueryCapacityPlanInsightsResponse)
	err := c.cc.Invoke(ctx, CapacityPlanningService_QueryCapacityPlanInsights_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CapacityPlanningServiceServer is the server API for CapacityPlanningService service.
// All implementations should embed UnimplementedCapacityPlanningServiceServer
// for forward compatibility
type CapacityPlanningServiceServer interface {
	// Returns information about the capacity plan.
	GetCapacityPlan(context.Context, *GetCapacityPlanRequest) (*CapacityPlan, error)
	// Returns a list of the capacity plans that are in the parent parameter and
	// match your specified filters.
	// (The maximum list length is limited by the pageSize parameter.)
	QueryCapacityPlans(context.Context, *QueryCapacityPlansRequest) (*QueryCapacityPlansResponse, error)
	// Query capacity plan insights that are in the parent parameter and match
	// your specified filters.
	QueryCapacityPlanInsights(context.Context, *QueryCapacityPlanInsightsRequest) (*QueryCapacityPlanInsightsResponse, error)
}

// UnimplementedCapacityPlanningServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCapacityPlanningServiceServer struct {
}

func (UnimplementedCapacityPlanningServiceServer) GetCapacityPlan(context.Context, *GetCapacityPlanRequest) (*CapacityPlan, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCapacityPlan not implemented")
}
func (UnimplementedCapacityPlanningServiceServer) QueryCapacityPlans(context.Context, *QueryCapacityPlansRequest) (*QueryCapacityPlansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCapacityPlans not implemented")
}
func (UnimplementedCapacityPlanningServiceServer) QueryCapacityPlanInsights(context.Context, *QueryCapacityPlanInsightsRequest) (*QueryCapacityPlanInsightsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCapacityPlanInsights not implemented")
}

// UnsafeCapacityPlanningServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CapacityPlanningServiceServer will
// result in compilation errors.
type UnsafeCapacityPlanningServiceServer interface {
	mustEmbedUnimplementedCapacityPlanningServiceServer()
}

func RegisterCapacityPlanningServiceServer(s grpc.ServiceRegistrar, srv CapacityPlanningServiceServer) {
	s.RegisterService(&CapacityPlanningService_ServiceDesc, srv)
}

func _CapacityPlanningService_GetCapacityPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCapacityPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CapacityPlanningServiceServer).GetCapacityPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CapacityPlanningService_GetCapacityPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CapacityPlanningServiceServer).GetCapacityPlan(ctx, req.(*GetCapacityPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CapacityPlanningService_QueryCapacityPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCapacityPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CapacityPlanningServiceServer).QueryCapacityPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CapacityPlanningService_QueryCapacityPlans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CapacityPlanningServiceServer).QueryCapacityPlans(ctx, req.(*QueryCapacityPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CapacityPlanningService_QueryCapacityPlanInsights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCapacityPlanInsightsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CapacityPlanningServiceServer).QueryCapacityPlanInsights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CapacityPlanningService_QueryCapacityPlanInsights_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CapacityPlanningServiceServer).QueryCapacityPlanInsights(ctx, req.(*QueryCapacityPlanInsightsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CapacityPlanningService_ServiceDesc is the grpc.ServiceDesc for CapacityPlanningService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CapacityPlanningService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.capacityplanner.v1beta.CapacityPlanningService",
	HandlerType: (*CapacityPlanningServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCapacityPlan",
			Handler:    _CapacityPlanningService_GetCapacityPlan_Handler,
		},
		{
			MethodName: "QueryCapacityPlans",
			Handler:    _CapacityPlanningService_QueryCapacityPlans_Handler,
		},
		{
			MethodName: "QueryCapacityPlanInsights",
			Handler:    _CapacityPlanningService_QueryCapacityPlanInsights_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/capacityplanner/v1beta/capacity_planning_service.proto",
}
