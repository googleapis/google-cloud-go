// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.7
// source: google/cloud/capacityplanner/v1beta/usage_service.proto

package capacityplannerpb

import (
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	date "google.golang.org/genproto/googleapis/type/date"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Type of the reservation
type QueryReservationsRequest_ReservationType int32

const (
	// No reservation type specified.
	QueryReservationsRequest_RESERVATION_TYPE_UNSPECIFIED QueryReservationsRequest_ReservationType = 0
	// Allocation refers to realized reservation either auto created or created
	// by the users on demand.
	QueryReservationsRequest_RESERVATION_TYPE_ALLOCATION QueryReservationsRequest_ReservationType = 1
	// Future Reservation requests created by users.
	QueryReservationsRequest_RESERVATION_TYPE_FUTURE_RESERVATION QueryReservationsRequest_ReservationType = 2
	// All reservations.
	QueryReservationsRequest_RESERVATION_TYPE_ALL QueryReservationsRequest_ReservationType = 3
)

// Enum value maps for QueryReservationsRequest_ReservationType.
var (
	QueryReservationsRequest_ReservationType_name = map[int32]string{
		0: "RESERVATION_TYPE_UNSPECIFIED",
		1: "RESERVATION_TYPE_ALLOCATION",
		2: "RESERVATION_TYPE_FUTURE_RESERVATION",
		3: "RESERVATION_TYPE_ALL",
	}
	QueryReservationsRequest_ReservationType_value = map[string]int32{
		"RESERVATION_TYPE_UNSPECIFIED":        0,
		"RESERVATION_TYPE_ALLOCATION":         1,
		"RESERVATION_TYPE_FUTURE_RESERVATION": 2,
		"RESERVATION_TYPE_ALL":                3,
	}
)

func (x QueryReservationsRequest_ReservationType) Enum() *QueryReservationsRequest_ReservationType {
	p := new(QueryReservationsRequest_ReservationType)
	*p = x
	return p
}

func (x QueryReservationsRequest_ReservationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryReservationsRequest_ReservationType) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_capacityplanner_v1beta_usage_service_proto_enumTypes[0].Descriptor()
}

func (QueryReservationsRequest_ReservationType) Type() protoreflect.EnumType {
	return &file_google_cloud_capacityplanner_v1beta_usage_service_proto_enumTypes[0]
}

func (x QueryReservationsRequest_ReservationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryReservationsRequest_ReservationType.Descriptor instead.
func (QueryReservationsRequest_ReservationType) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_usage_service_proto_rawDescGZIP(), []int{4, 0}
}

// Possible scope in which the reservation can be shared.
type QueryReservationsRequest_ShareType int32

const (
	// No share type specified.
	QueryReservationsRequest_SHARE_TYPE_UNSPECIFIED QueryReservationsRequest_ShareType = 0
	// Default value, for which reservation is open to only owner project.
	QueryReservationsRequest_SHARE_TYPE_LOCAL QueryReservationsRequest_ShareType = 1
	// Shared-reservation is open to specific projects.
	QueryReservationsRequest_SHARE_TYPE_SPECIFIC_PROJECTS QueryReservationsRequest_ShareType = 2
)

// Enum value maps for QueryReservationsRequest_ShareType.
var (
	QueryReservationsRequest_ShareType_name = map[int32]string{
		0: "SHARE_TYPE_UNSPECIFIED",
		1: "SHARE_TYPE_LOCAL",
		2: "SHARE_TYPE_SPECIFIC_PROJECTS",
	}
	QueryReservationsRequest_ShareType_value = map[string]int32{
		"SHARE_TYPE_UNSPECIFIED":       0,
		"SHARE_TYPE_LOCAL":             1,
		"SHARE_TYPE_SPECIFIC_PROJECTS": 2,
	}
)

func (x QueryReservationsRequest_ShareType) Enum() *QueryReservationsRequest_ShareType {
	p := new(QueryReservationsRequest_ShareType)
	*p = x
	return p
}

func (x QueryReservationsRequest_ShareType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryReservationsRequest_ShareType) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_capacityplanner_v1beta_usage_service_proto_enumTypes[1].Descriptor()
}

func (QueryReservationsRequest_ShareType) Type() protoreflect.EnumType {
	return &file_google_cloud_capacityplanner_v1beta_usage_service_proto_enumTypes[1]
}

func (x QueryReservationsRequest_ShareType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryReservationsRequest_ShareType.Descriptor instead.
func (QueryReservationsRequest_ShareType) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_usage_service_proto_rawDescGZIP(), []int{4, 1}
}

// Reservation ownership status to provide distinction for Capacity Planning.
type QueryReservationsRequest_OwnershipType int32

const (
	// No ownership status specified.
	QueryReservationsRequest_OWNERSHIP_TYPE_UNSPECIFIED QueryReservationsRequest_OwnershipType = 0
	// For the reservations owned within selected Google Cloud Platform Resource
	// Container (project/folder/organization).
	QueryReservationsRequest_OWNERSHIP_TYPE_OWNED QueryReservationsRequest_OwnershipType = 1
	// For the reservations consumable within selected Google Cloud Platform
	// Resource Container (project/folder/organization), but not owned by them.
	QueryReservationsRequest_OWNERSHIP_TYPE_SHARED_BY_OTHERS QueryReservationsRequest_OwnershipType = 2
)

// Enum value maps for QueryReservationsRequest_OwnershipType.
var (
	QueryReservationsRequest_OwnershipType_name = map[int32]string{
		0: "OWNERSHIP_TYPE_UNSPECIFIED",
		1: "OWNERSHIP_TYPE_OWNED",
		2: "OWNERSHIP_TYPE_SHARED_BY_OTHERS",
	}
	QueryReservationsRequest_OwnershipType_value = map[string]int32{
		"OWNERSHIP_TYPE_UNSPECIFIED":      0,
		"OWNERSHIP_TYPE_OWNED":            1,
		"OWNERSHIP_TYPE_SHARED_BY_OTHERS": 2,
	}
)

func (x QueryReservationsRequest_OwnershipType) Enum() *QueryReservationsRequest_OwnershipType {
	p := new(QueryReservationsRequest_OwnershipType)
	*p = x
	return p
}

func (x QueryReservationsRequest_OwnershipType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryReservationsRequest_OwnershipType) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_capacityplanner_v1beta_usage_service_proto_enumTypes[2].Descriptor()
}

func (QueryReservationsRequest_OwnershipType) Type() protoreflect.EnumType {
	return &file_google_cloud_capacityplanner_v1beta_usage_service_proto_enumTypes[2]
}

func (x QueryReservationsRequest_OwnershipType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryReservationsRequest_OwnershipType.Descriptor instead.
func (QueryReservationsRequest_OwnershipType) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_usage_service_proto_rawDescGZIP(), []int{4, 2}
}

// The form in which data of reservations should be returned.
// In case of AGGREGATED, timeseries for selected reservations is returned. If
// unspecified, all levels are included.
type QueryReservationsRequest_ReservationDataLevel int32

const (
	// No reservation data level specified.
	QueryReservationsRequest_RESERVATION_DATA_LEVEL_UNSPECIFIED QueryReservationsRequest_ReservationDataLevel = 0
	// aggregated reservations data in a timeseries or aggregation over
	// timeseries.
	QueryReservationsRequest_RESERVATION_DATA_LEVEL_AGGREGATED QueryReservationsRequest_ReservationDataLevel = 1
	// per reservation detail which is equivalent of Arcus Future Reservation or
	// Allocation with only limited fields which are useful for Capacity
	// Planning.
	QueryReservationsRequest_RESERVATION_DATA_LEVEL_PER_RESERVATION QueryReservationsRequest_ReservationDataLevel = 2
)

// Enum value maps for QueryReservationsRequest_ReservationDataLevel.
var (
	QueryReservationsRequest_ReservationDataLevel_name = map[int32]string{
		0: "RESERVATION_DATA_LEVEL_UNSPECIFIED",
		1: "RESERVATION_DATA_LEVEL_AGGREGATED",
		2: "RESERVATION_DATA_LEVEL_PER_RESERVATION",
	}
	QueryReservationsRequest_ReservationDataLevel_value = map[string]int32{
		"RESERVATION_DATA_LEVEL_UNSPECIFIED":     0,
		"RESERVATION_DATA_LEVEL_AGGREGATED":      1,
		"RESERVATION_DATA_LEVEL_PER_RESERVATION": 2,
	}
)

func (x QueryReservationsRequest_ReservationDataLevel) Enum() *QueryReservationsRequest_ReservationDataLevel {
	p := new(QueryReservationsRequest_ReservationDataLevel)
	*p = x
	return p
}

func (x QueryReservationsRequest_ReservationDataLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryReservationsRequest_ReservationDataLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_capacityplanner_v1beta_usage_service_proto_enumTypes[3].Descriptor()
}

func (QueryReservationsRequest_ReservationDataLevel) Type() protoreflect.EnumType {
	return &file_google_cloud_capacityplanner_v1beta_usage_service_proto_enumTypes[3]
}

func (x QueryReservationsRequest_ReservationDataLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryReservationsRequest_ReservationDataLevel.Descriptor instead.
func (QueryReservationsRequest_ReservationDataLevel) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_usage_service_proto_rawDescGZIP(), []int{4, 3}
}

// The type of the forecast. This describes the method that was used to
// produce future time series values from historical time series values.
type Forecast_ForecastType int32

const (
	// No forecast type is specified.
	Forecast_FORECAST_TYPE_UNSPECIFIED Forecast_ForecastType = 0
	// Statistical forecast.
	Forecast_STATISTICAL Forecast_ForecastType = 1
	// Statistical forecast that attempts to predict the seasonal affects of
	// Black Friday and Cyber Monday.
	Forecast_STATISTICAL_WITH_BFCM Forecast_ForecastType = 2
	// Yearly Seasonality model provides generic seasonality beyond BFCM.
	Forecast_YEARLY_SEASONALITY Forecast_ForecastType = 3
)

// Enum value maps for Forecast_ForecastType.
var (
	Forecast_ForecastType_name = map[int32]string{
		0: "FORECAST_TYPE_UNSPECIFIED",
		1: "STATISTICAL",
		2: "STATISTICAL_WITH_BFCM",
		3: "YEARLY_SEASONALITY",
	}
	Forecast_ForecastType_value = map[string]int32{
		"FORECAST_TYPE_UNSPECIFIED": 0,
		"STATISTICAL":               1,
		"STATISTICAL_WITH_BFCM":     2,
		"YEARLY_SEASONALITY":        3,
	}
)

func (x Forecast_ForecastType) Enum() *Forecast_ForecastType {
	p := new(Forecast_ForecastType)
	*p = x
	return p
}

func (x Forecast_ForecastType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Forecast_ForecastType) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_capacityplanner_v1beta_usage_service_proto_enumTypes[4].Descriptor()
}

func (Forecast_ForecastType) Type() protoreflect.EnumType {
	return &file_google_cloud_capacityplanner_v1beta_usage_service_proto_enumTypes[4]
}

func (x Forecast_ForecastType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Forecast_ForecastType.Descriptor instead.
func (Forecast_ForecastType) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_usage_service_proto_rawDescGZIP(), []int{7, 0}
}

// The bounds of the forecast time series.
type Forecast_Bounds int32

const (
	// No bounds is specified.
	Forecast_BOUNDS_UNSPECIFIED Forecast_Bounds = 0
	// The time series represents the upper bound of the forecast.
	Forecast_LOWER_BOUND Forecast_Bounds = 1
	// The time series represents the median expected forecast value.
	Forecast_MEDIAN Forecast_Bounds = 2
	// The time series represents the lower bound of the forecast.
	Forecast_UPPER_BOUND Forecast_Bounds = 3
)

// Enum value maps for Forecast_Bounds.
var (
	Forecast_Bounds_name = map[int32]string{
		0: "BOUNDS_UNSPECIFIED",
		1: "LOWER_BOUND",
		2: "MEDIAN",
		3: "UPPER_BOUND",
	}
	Forecast_Bounds_value = map[string]int32{
		"BOUNDS_UNSPECIFIED": 0,
		"LOWER_BOUND":        1,
		"MEDIAN":             2,
		"UPPER_BOUND":        3,
	}
)

func (x Forecast_Bounds) Enum() *Forecast_Bounds {
	p := new(Forecast_Bounds)
	*p = x
	return p
}

func (x Forecast_Bounds) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Forecast_Bounds) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_capacityplanner_v1beta_usage_service_proto_enumTypes[5].Descriptor()
}

func (Forecast_Bounds) Type() protoreflect.EnumType {
	return &file_google_cloud_capacityplanner_v1beta_usage_service_proto_enumTypes[5]
}

func (x Forecast_Bounds) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Forecast_Bounds.Descriptor instead.
func (Forecast_Bounds) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_usage_service_proto_rawDescGZIP(), []int{7, 1}
}

// The prediction interval represented by a forecast.
type Forecast_PredictionInterval int32

const (
	// No prediction interval is specified.
	Forecast_PREDICTION_INTERVAL_UNSPECIFIED Forecast_PredictionInterval = 0
	// This represents a prediction interval that has 90% confidence. For
	// example, for a symmetric prediction interval, a `PredictionInterval`
	// of `PREDICTION_INTERVAL_90` means that the `UPPER_BOUND` will represent
	// the 95th precentile.
	Forecast_PREDICTION_INTERVAL_90 Forecast_PredictionInterval = 1
	// This represents a prediction interval that has 50% confidence. For
	// example, for a symmetric prediction interval, a `PredictionInterval`
	// of `PREDICTION_INTERVAL_50` means that the `UPPER_BOUND` will represent
	// the 75th precentile.
	Forecast_PREDICTION_INTERVAL_50 Forecast_PredictionInterval = 2
)

// Enum value maps for Forecast_PredictionInterval.
var (
	Forecast_PredictionInterval_name = map[int32]string{
		0: "PREDICTION_INTERVAL_UNSPECIFIED",
		1: "PREDICTION_INTERVAL_90",
		2: "PREDICTION_INTERVAL_50",
	}
	Forecast_PredictionInterval_value = map[string]int32{
		"PREDICTION_INTERVAL_UNSPECIFIED": 0,
		"PREDICTION_INTERVAL_90":          1,
		"PREDICTION_INTERVAL_50":          2,
	}
)

func (x Forecast_PredictionInterval) Enum() *Forecast_PredictionInterval {
	p := new(Forecast_PredictionInterval)
	*p = x
	return p
}

func (x Forecast_PredictionInterval) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Forecast_PredictionInterval) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_capacityplanner_v1beta_usage_service_proto_enumTypes[6].Descriptor()
}

func (Forecast_PredictionInterval) Type() protoreflect.EnumType {
	return &file_google_cloud_capacityplanner_v1beta_usage_service_proto_enumTypes[6]
}

func (x Forecast_PredictionInterval) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Forecast_PredictionInterval.Descriptor instead.
func (Forecast_PredictionInterval) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_usage_service_proto_rawDescGZIP(), []int{7, 2}
}

// Methods for converting sampled data to time series values.
type UsageHistory_AggregationMethod int32

const (
	// No aggregation method is specified.
	UsageHistory_AGGREGATION_METHOD_UNSPECIFIED UsageHistory_AggregationMethod = 0
	UsageHistory_MEDIAN                         UsageHistory_AggregationMethod = 1
	// Time series values represent the 99th percentile of the sampled values.
	UsageHistory_PEAK UsageHistory_AggregationMethod = 2
	// Time series values represent the 50th(median) percentile of the sampled
	// values.
	UsageHistory_P50 UsageHistory_AggregationMethod = 3
	// Time series values represent the 75th percentile of the sampled values.
	UsageHistory_P75 UsageHistory_AggregationMethod = 4
	// Time series values represent the 99th percentile of the sampled values.
	UsageHistory_P99 UsageHistory_AggregationMethod = 5
)

// Enum value maps for UsageHistory_AggregationMethod.
var (
	UsageHistory_AggregationMethod_name = map[int32]string{
		0: "AGGREGATION_METHOD_UNSPECIFIED",
		1: "MEDIAN",
		2: "PEAK",
		3: "P50",
		4: "P75",
		5: "P99",
	}
	UsageHistory_AggregationMethod_value = map[string]int32{
		"AGGREGATION_METHOD_UNSPECIFIED": 0,
		"MEDIAN":                         1,
		"PEAK":                           2,
		"P50":                            3,
		"P75":                            4,
		"P99":                            5,
	}
)

func (x UsageHistory_AggregationMethod) Enum() *UsageHistory_AggregationMethod {
	p := new(UsageHistory_AggregationMethod)
	*p = x
	return p
}

func (x UsageHistory_AggregationMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UsageHistory_AggregationMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_capacityplanner_v1beta_usage_service_proto_enumTypes[7].Descriptor()
}

func (UsageHistory_AggregationMethod) Type() protoreflect.EnumType {
	return &file_google_cloud_capacityplanner_v1beta_usage_service_proto_enumTypes[7]
}

func (x UsageHistory_AggregationMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UsageHistory_AggregationMethod.Descriptor instead.
func (UsageHistory_AggregationMethod) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_usage_service_proto_rawDescGZIP(), []int{8, 0}
}

// The type of location that the time series is summarizing.
type TimeSeries_LocationType int32

const (
	// No location type was specified.
	TimeSeries_LOCATION_TYPE_UNSPECIFIED TimeSeries_LocationType = 0
	// Time series values represent usage aggregated at the region level.
	TimeSeries_REGIONAL TimeSeries_LocationType = 1
	// Time series values represent usage aggregated at the zone level.
	TimeSeries_ZONAL TimeSeries_LocationType = 2
)

// Enum value maps for TimeSeries_LocationType.
var (
	TimeSeries_LocationType_name = map[int32]string{
		0: "LOCATION_TYPE_UNSPECIFIED",
		1: "REGIONAL",
		2: "ZONAL",
	}
	TimeSeries_LocationType_value = map[string]int32{
		"LOCATION_TYPE_UNSPECIFIED": 0,
		"REGIONAL":                  1,
		"ZONAL":                     2,
	}
)

func (x TimeSeries_LocationType) Enum() *TimeSeries_LocationType {
	p := new(TimeSeries_LocationType)
	*p = x
	return p
}

func (x TimeSeries_LocationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeSeries_LocationType) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_capacityplanner_v1beta_usage_service_proto_enumTypes[8].Descriptor()
}

func (TimeSeries_LocationType) Type() protoreflect.EnumType {
	return &file_google_cloud_capacityplanner_v1beta_usage_service_proto_enumTypes[8]
}

func (x TimeSeries_LocationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimeSeries_LocationType.Descriptor instead.
func (TimeSeries_LocationType) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_usage_service_proto_rawDescGZIP(), []int{9, 0}
}

// Possible scope in which the reservation can be shared.
type ExportReservationsUsageRequest_ShareType int32

const (
	// No share type specified.
	ExportReservationsUsageRequest_SHARE_TYPE_UNSPECIFIED ExportReservationsUsageRequest_ShareType = 0
	// Default value, for which reservation is open to only owner project.
	ExportReservationsUsageRequest_SHARE_TYPE_LOCAL ExportReservationsUsageRequest_ShareType = 1
	// Shared-reservation is open to specific projects.
	ExportReservationsUsageRequest_SHARE_TYPE_SPECIFIC_PROJECTS ExportReservationsUsageRequest_ShareType = 2
)

// Enum value maps for ExportReservationsUsageRequest_ShareType.
var (
	ExportReservationsUsageRequest_ShareType_name = map[int32]string{
		0: "SHARE_TYPE_UNSPECIFIED",
		1: "SHARE_TYPE_LOCAL",
		2: "SHARE_TYPE_SPECIFIC_PROJECTS",
	}
	ExportReservationsUsageRequest_ShareType_value = map[string]int32{
		"SHARE_TYPE_UNSPECIFIED":       0,
		"SHARE_TYPE_LOCAL":             1,
		"SHARE_TYPE_SPECIFIC_PROJECTS": 2,
	}
)

func (x ExportReservationsUsageRequest_ShareType) Enum() *ExportReservationsUsageRequest_ShareType {
	p := new(ExportReservationsUsageRequest_ShareType)
	*p = x
	return p
}

func (x ExportReservationsUsageRequest_ShareType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExportReservationsUsageRequest_ShareType) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_capacityplanner_v1beta_usage_service_proto_enumTypes[9].Descriptor()
}

func (ExportReservationsUsageRequest_ShareType) Type() protoreflect.EnumType {
	return &file_google_cloud_capacityplanner_v1beta_usage_service_proto_enumTypes[9]
}

func (x ExportReservationsUsageRequest_ShareType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExportReservationsUsageRequest_ShareType.Descriptor instead.
func (ExportReservationsUsageRequest_ShareType) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_usage_service_proto_rawDescGZIP(), []int{14, 0}
}

// This enum determines the partition key column for the BigQuery tables.
// Partitioning can improve query performance and reduce query cost by
// filtering partitions. Refer to
// https://cloud.google.com/bigquery/docs/partitioned-tables for details.
type BigQueryDestination_PartitionKey int32

const (
	// Unspecified partition key. Tables won't be partitioned using this
	// option.
	BigQueryDestination_PARTITION_KEY_UNSPECIFIED BigQueryDestination_PartitionKey = 0
	// The time when the request is received. If specified as partition key,
	// the result table(s) is partitioned by the RequestTime column, an
	// additional timestamp column representing when the request was received.
	BigQueryDestination_REQUEST_TIME BigQueryDestination_PartitionKey = 1
)

// Enum value maps for BigQueryDestination_PartitionKey.
var (
	BigQueryDestination_PartitionKey_name = map[int32]string{
		0: "PARTITION_KEY_UNSPECIFIED",
		1: "REQUEST_TIME",
	}
	BigQueryDestination_PartitionKey_value = map[string]int32{
		"PARTITION_KEY_UNSPECIFIED": 0,
		"REQUEST_TIME":              1,
	}
)

func (x BigQueryDestination_PartitionKey) Enum() *BigQueryDestination_PartitionKey {
	p := new(BigQueryDestination_PartitionKey)
	*p = x
	return p
}

func (x BigQueryDestination_PartitionKey) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BigQueryDestination_PartitionKey) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_capacityplanner_v1beta_usage_service_proto_enumTypes[10].Descriptor()
}

func (BigQueryDestination_PartitionKey) Type() protoreflect.EnumType {
	return &file_google_cloud_capacityplanner_v1beta_usage_service_proto_enumTypes[10]
}

func (x BigQueryDestination_PartitionKey) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BigQueryDestination_PartitionKey.Descriptor instead.
func (BigQueryDestination_PartitionKey) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_usage_service_proto_rawDescGZIP(), []int{17, 0}
}

// Specifies the action that occurs if the destination table or partition
// already exists. By default, the data will be appended to the existing
// table.
type BigQueryDestination_WriteDisposition int32

const (
	// Unspecified write disposition.
	BigQueryDestination_WRITE_DISPOSITION_UNSPECIFIED BigQueryDestination_WriteDisposition = 0
	// If the table or partition already exists, BigQuery appends the data to
	// the table or the latest partition.
	BigQueryDestination_WRITE_APPEND BigQueryDestination_WriteDisposition = 1
	// If the table or partition already exists, BigQuery overwrites the entire
	// table or all the partitions data.
	BigQueryDestination_WRITE_TRUNCATE BigQueryDestination_WriteDisposition = 2
	// If the table already exists and contains data, an error is returned.
	BigQueryDestination_WRITE_EMPTY BigQueryDestination_WriteDisposition = 3
)

// Enum value maps for BigQueryDestination_WriteDisposition.
var (
	BigQueryDestination_WriteDisposition_name = map[int32]string{
		0: "WRITE_DISPOSITION_UNSPECIFIED",
		1: "WRITE_APPEND",
		2: "WRITE_TRUNCATE",
		3: "WRITE_EMPTY",
	}
	BigQueryDestination_WriteDisposition_value = map[string]int32{
		"WRITE_DISPOSITION_UNSPECIFIED": 0,
		"WRITE_APPEND":                  1,
		"WRITE_TRUNCATE":                2,
		"WRITE_EMPTY":                   3,
	}
)

func (x BigQueryDestination_WriteDisposition) Enum() *BigQueryDestination_WriteDisposition {
	p := new(BigQueryDestination_WriteDisposition)
	*p = x
	return p
}

func (x BigQueryDestination_WriteDisposition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BigQueryDestination_WriteDisposition) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_capacityplanner_v1beta_usage_service_proto_enumTypes[11].Descriptor()
}

func (BigQueryDestination_WriteDisposition) Type() protoreflect.EnumType {
	return &file_google_cloud_capacityplanner_v1beta_usage_service_proto_enumTypes[11]
}

func (x BigQueryDestination_WriteDisposition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BigQueryDestination_WriteDisposition.Descriptor instead.
func (BigQueryDestination_WriteDisposition) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_usage_service_proto_rawDescGZIP(), []int{17, 1}
}

// Specifies the action that occurs if the destination table does not exist.
// By default, a new table will be created.
type BigQueryDestination_CreateDisposition int32

const (
	// Unspecified create disposition.
	BigQueryDestination_CREATE_DISPOSITION_UNSPECIFIED BigQueryDestination_CreateDisposition = 0
	// If the table does not exist, BigQuery creates the table.
	BigQueryDestination_CREATE_IF_NEEDED BigQueryDestination_CreateDisposition = 1
	// If the table does not exist, an error will be returned.
	BigQueryDestination_CREATE_NEVER BigQueryDestination_CreateDisposition = 2
)

// Enum value maps for BigQueryDestination_CreateDisposition.
var (
	BigQueryDestination_CreateDisposition_name = map[int32]string{
		0: "CREATE_DISPOSITION_UNSPECIFIED",
		1: "CREATE_IF_NEEDED",
		2: "CREATE_NEVER",
	}
	BigQueryDestination_CreateDisposition_value = map[string]int32{
		"CREATE_DISPOSITION_UNSPECIFIED": 0,
		"CREATE_IF_NEEDED":               1,
		"CREATE_NEVER":                   2,
	}
)

func (x BigQueryDestination_CreateDisposition) Enum() *BigQueryDestination_CreateDisposition {
	p := new(BigQueryDestination_CreateDisposition)
	*p = x
	return p
}

func (x BigQueryDestination_CreateDisposition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BigQueryDestination_CreateDisposition) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_capacityplanner_v1beta_usage_service_proto_enumTypes[12].Descriptor()
}

func (BigQueryDestination_CreateDisposition) Type() protoreflect.EnumType {
	return &file_google_cloud_capacityplanner_v1beta_usage_service_proto_enumTypes[12]
}

func (x BigQueryDestination_CreateDisposition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BigQueryDestination_CreateDisposition.Descriptor instead.
func (BigQueryDestination_CreateDisposition) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_usage_service_proto_rawDescGZIP(), []int{17, 2}
}

// The `QueryUsageHistories` request.
// Next : 16
type QueryUsageHistoriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The compute engine resource and location for the time series
	// values to return. The format is:
	//
	//	projects/{project}/locations/{location} or
	//	organizations/{organization}/locations/{location} or
	//	folders/{folder}/locations/{location}
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Optional. The location level of the reservations usage timeseries.
	LocationLevel TimeSeries_LocationType `protobuf:"varint,11,opt,name=location_level,json=locationLevel,proto3,enum=google.cloud.capacityplanner.v1beta.TimeSeries_LocationType" json:"location_level,omitempty"`
	// Optional. The is_spot flag is used to fetch the usage data for preemptible
	// Resources.
	IsSpot bool `protobuf:"varint,14,opt,name=is_spot,json=isSpot,proto3" json:"is_spot,omitempty"`
	// The machine family for the `UsageHistory` values to return. Possible values
	// include "n1", and "n2d". See
	// https://cloud.google.com/compute/docs/machine-types for more examples.
	// Empty machine_family will return results matching all machine families.
	MachineFamily string `protobuf:"bytes,2,opt,name=machine_family,json=machineFamily,proto3" json:"machine_family,omitempty"`
	// Optional. The machine shape for the `UsageHistory` values to return.
	MachineShape *MachineShape `protobuf:"bytes,13,opt,name=machine_shape,json=machineShape,proto3" json:"machine_shape,omitempty"`
	// Optional. The disk_type for the `UsageHistory` values to return request
	// with persistent-disk cloud_resource_type. Empty disk_type will return
	// results matching all disk types.
	DiskType string `protobuf:"bytes,7,opt,name=disk_type,json=diskType,proto3" json:"disk_type,omitempty"`
	// Optional. Whether the persistent disk is in confidential mode.
	ConfidentialMode bool `protobuf:"varint,15,opt,name=confidential_mode,json=confidentialMode,proto3" json:"confidential_mode,omitempty"`
	// Optional. The GPU type for the `UsageHistory` values to return. Sample
	// values are "nvidia-tesla-t4", and "nvidia-tesla-a100". See
	// https://cloud.google.com/compute/docs/gpus for a list. Empty gpu_type
	// will return results matching all GPUs.
	GpuType string `protobuf:"bytes,8,opt,name=gpu_type,json=gpuType,proto3" json:"gpu_type,omitempty"`
	// Optional. The TPU type for the `UsageHistory` values to return. Empty
	// tpu_type will return results matching all TPUs.
	TpuType string `protobuf:"bytes,12,opt,name=tpu_type,json=tpuType,proto3" json:"tpu_type,omitempty"`
	// The resource for the `UsageHistory` values to return. Possible values
	// include "gce-vcpus", "gce-ram", "gce-local-ssd", "gce-persistent-disk",
	// "gce-gpu" and "gce-tpu".
	// Empty cloud_resource_type will return results matching all resources.
	CloudResourceType string `protobuf:"bytes,3,opt,name=cloud_resource_type,json=cloudResourceType,proto3" json:"cloud_resource_type,omitempty"`
	// The method that should be used to convert sampled usage data to daily
	// usage values.
	// AGGREGATION_METHOD_UNSPECIFIED will return results matching all the
	// aggregation methods.
	UsageAggregationMethod UsageHistory_AggregationMethod `protobuf:"varint,4,opt,name=usage_aggregation_method,json=usageAggregationMethod,proto3,enum=google.cloud.capacityplanner.v1beta.UsageHistory_AggregationMethod" json:"usage_aggregation_method,omitempty"`
	// Optional. The start date of reservations usage.
	StartDate *date.Date `protobuf:"bytes,9,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// Optional. The end date of reservations usage.
	EndDate *date.Date `protobuf:"bytes,10,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
}

func (x *QueryUsageHistoriesRequest) Reset() {
	*x = QueryUsageHistoriesRequest{}
	mi := &file_google_cloud_capacityplanner_v1beta_usage_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryUsageHistoriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryUsageHistoriesRequest) ProtoMessage() {}

func (x *QueryUsageHistoriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_capacityplanner_v1beta_usage_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryUsageHistoriesRequest.ProtoReflect.Descriptor instead.
func (*QueryUsageHistoriesRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_usage_service_proto_rawDescGZIP(), []int{0}
}

func (x *QueryUsageHistoriesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *QueryUsageHistoriesRequest) GetLocationLevel() TimeSeries_LocationType {
	if x != nil {
		return x.LocationLevel
	}
	return TimeSeries_LOCATION_TYPE_UNSPECIFIED
}

func (x *QueryUsageHistoriesRequest) GetIsSpot() bool {
	if x != nil {
		return x.IsSpot
	}
	return false
}

func (x *QueryUsageHistoriesRequest) GetMachineFamily() string {
	if x != nil {
		return x.MachineFamily
	}
	return ""
}

func (x *QueryUsageHistoriesRequest) GetMachineShape() *MachineShape {
	if x != nil {
		return x.MachineShape
	}
	return nil
}

func (x *QueryUsageHistoriesRequest) GetDiskType() string {
	if x != nil {
		return x.DiskType
	}
	return ""
}

func (x *QueryUsageHistoriesRequest) GetConfidentialMode() bool {
	if x != nil {
		return x.ConfidentialMode
	}
	return false
}

func (x *QueryUsageHistoriesRequest) GetGpuType() string {
	if x != nil {
		return x.GpuType
	}
	return ""
}

func (x *QueryUsageHistoriesRequest) GetTpuType() string {
	if x != nil {
		return x.TpuType
	}
	return ""
}

func (x *QueryUsageHistoriesRequest) GetCloudResourceType() string {
	if x != nil {
		return x.CloudResourceType
	}
	return ""
}

func (x *QueryUsageHistoriesRequest) GetUsageAggregationMethod() UsageHistory_AggregationMethod {
	if x != nil {
		return x.UsageAggregationMethod
	}
	return UsageHistory_AGGREGATION_METHOD_UNSPECIFIED
}

func (x *QueryUsageHistoriesRequest) GetStartDate() *date.Date {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *QueryUsageHistoriesRequest) GetEndDate() *date.Date {
	if x != nil {
		return x.EndDate
	}
	return nil
}

// The `QueryUsageHistories` response.
type QueryUsageHistoriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The usage histories that match the request.
	UsageHistories []*UsageHistory `protobuf:"bytes,1,rep,name=usage_histories,json=usageHistories,proto3" json:"usage_histories,omitempty"`
}

func (x *QueryUsageHistoriesResponse) Reset() {
	*x = QueryUsageHistoriesResponse{}
	mi := &file_google_cloud_capacityplanner_v1beta_usage_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryUsageHistoriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryUsageHistoriesResponse) ProtoMessage() {}

func (x *QueryUsageHistoriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_capacityplanner_v1beta_usage_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryUsageHistoriesResponse.ProtoReflect.Descriptor instead.
func (*QueryUsageHistoriesResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_usage_service_proto_rawDescGZIP(), []int{1}
}

func (x *QueryUsageHistoriesResponse) GetUsageHistories() []*UsageHistory {
	if x != nil {
		return x.UsageHistories
	}
	return nil
}

// The `QueryForecasts` request.
// Next : 14
type QueryForecastsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The compute engine resource and location for the time series
	// values to return. The format is:
	//
	// projects/{project}/locations/{location} or
	// organizations/{organization}/locations/{location} or
	// folders/{folder}/locations/{location}
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The machine family to use to select the `Forecast` values to return.
	// Possible values include "n1", and "n2d".
	// Empty machine_family will return results matching all machine families.
	MachineFamily string `protobuf:"bytes,2,opt,name=machine_family,json=machineFamily,proto3" json:"machine_family,omitempty"`
	// Optional. The machine shape for the time series values to return.
	MachineShape *MachineShape `protobuf:"bytes,12,opt,name=machine_shape,json=machineShape,proto3" json:"machine_shape,omitempty"`
	// Optional. The disk_type for the `Forecast` values to return with request
	// persistent-disk cloud_resource_type.
	// Empty disk_type will return results matching all disk types.
	DiskType string `protobuf:"bytes,9,opt,name=disk_type,json=diskType,proto3" json:"disk_type,omitempty"`
	// Optional. Whether the persistent disk is in confidential mode.
	ConfidentialMode bool `protobuf:"varint,13,opt,name=confidential_mode,json=confidentialMode,proto3" json:"confidential_mode,omitempty"`
	// Optional. The GPU type for the `Forecast` values to return. Sample values
	// are "nvidia-tesla-t4", and "nvidia-tesla-a100". See
	// https://cloud.google.com/compute/docs/gpus for a list. Empty gpu_type
	// will return results matching all GPUs.
	GpuType string `protobuf:"bytes,10,opt,name=gpu_type,json=gpuType,proto3" json:"gpu_type,omitempty"`
	// Optional. The TPU type for the `Forecast` values to return. Empty tpu_type
	// will return results matching all TPUs.
	TpuType string `protobuf:"bytes,11,opt,name=tpu_type,json=tpuType,proto3" json:"tpu_type,omitempty"`
	// The resource for the `Forecast` values to return. Possible values include
	// "gce-vcpus", "gce-ram", "gce-local-ssd", "gce-persistent-disk", "gce-gpu"
	// and "gce-tpu".
	// Empty cloud_resource_type will return results matching all resources.
	CloudResourceType string `protobuf:"bytes,3,opt,name=cloud_resource_type,json=cloudResourceType,proto3" json:"cloud_resource_type,omitempty"`
	// The type of forecast to use to select the `Forecast` values to return.
	// FORECAST_TYPE_UNSPECIFIED will return results matching all the forecast
	// types.
	ForecastType Forecast_ForecastType `protobuf:"varint,4,opt,name=forecast_type,json=forecastType,proto3,enum=google.cloud.capacityplanner.v1beta.Forecast_ForecastType" json:"forecast_type,omitempty"`
	// The prediction interval to use to select the `Forecast` values to return.
	// PREDICTION_INTERVAL_UNSPECIFIED will return results matching all prediction
	// intervals.
	PredictionInterval Forecast_PredictionInterval `protobuf:"varint,5,opt,name=prediction_interval,json=predictionInterval,proto3,enum=google.cloud.capacityplanner.v1beta.Forecast_PredictionInterval" json:"prediction_interval,omitempty"`
	// Aggregation Method of the historical usage for which the forecast is
	// generated
	AggregationMethod UsageHistory_AggregationMethod `protobuf:"varint,8,opt,name=aggregation_method,json=aggregationMethod,proto3,enum=google.cloud.capacityplanner.v1beta.UsageHistory_AggregationMethod" json:"aggregation_method,omitempty"`
}

func (x *QueryForecastsRequest) Reset() {
	*x = QueryForecastsRequest{}
	mi := &file_google_cloud_capacityplanner_v1beta_usage_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryForecastsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryForecastsRequest) ProtoMessage() {}

func (x *QueryForecastsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_capacityplanner_v1beta_usage_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryForecastsRequest.ProtoReflect.Descriptor instead.
func (*QueryForecastsRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_usage_service_proto_rawDescGZIP(), []int{2}
}

func (x *QueryForecastsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *QueryForecastsRequest) GetMachineFamily() string {
	if x != nil {
		return x.MachineFamily
	}
	return ""
}

func (x *QueryForecastsRequest) GetMachineShape() *MachineShape {
	if x != nil {
		return x.MachineShape
	}
	return nil
}

func (x *QueryForecastsRequest) GetDiskType() string {
	if x != nil {
		return x.DiskType
	}
	return ""
}

func (x *QueryForecastsRequest) GetConfidentialMode() bool {
	if x != nil {
		return x.ConfidentialMode
	}
	return false
}

func (x *QueryForecastsRequest) GetGpuType() string {
	if x != nil {
		return x.GpuType
	}
	return ""
}

func (x *QueryForecastsRequest) GetTpuType() string {
	if x != nil {
		return x.TpuType
	}
	return ""
}

func (x *QueryForecastsRequest) GetCloudResourceType() string {
	if x != nil {
		return x.CloudResourceType
	}
	return ""
}

func (x *QueryForecastsRequest) GetForecastType() Forecast_ForecastType {
	if x != nil {
		return x.ForecastType
	}
	return Forecast_FORECAST_TYPE_UNSPECIFIED
}

func (x *QueryForecastsRequest) GetPredictionInterval() Forecast_PredictionInterval {
	if x != nil {
		return x.PredictionInterval
	}
	return Forecast_PREDICTION_INTERVAL_UNSPECIFIED
}

func (x *QueryForecastsRequest) GetAggregationMethod() UsageHistory_AggregationMethod {
	if x != nil {
		return x.AggregationMethod
	}
	return UsageHistory_AGGREGATION_METHOD_UNSPECIFIED
}

// The `QueryForecasts` response.
type QueryForecastsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The forecasts that match the request.
	Forecasts []*Forecast `protobuf:"bytes,1,rep,name=forecasts,proto3" json:"forecasts,omitempty"`
}

func (x *QueryForecastsResponse) Reset() {
	*x = QueryForecastsResponse{}
	mi := &file_google_cloud_capacityplanner_v1beta_usage_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryForecastsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryForecastsResponse) ProtoMessage() {}

func (x *QueryForecastsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_capacityplanner_v1beta_usage_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryForecastsResponse.ProtoReflect.Descriptor instead.
func (*QueryForecastsResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_usage_service_proto_rawDescGZIP(), []int{3}
}

func (x *QueryForecastsResponse) GetForecasts() []*Forecast {
	if x != nil {
		return x.Forecasts
	}
	return nil
}

// The `QueryReservations` request.
type QueryReservationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The compute engine resource and location for the time series
	// values to return. The format is:
	//
	// projects/{project}/locations/{location} or
	// organizations/{organization}/locations/{location} or
	// folders/{folder}/locations/{location}
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Optional. The location level of the reservations usage timeseries.
	LocationLevel TimeSeries_LocationType `protobuf:"varint,16,opt,name=location_level,json=locationLevel,proto3,enum=google.cloud.capacityplanner.v1beta.TimeSeries_LocationType" json:"location_level,omitempty"`
	// Optional. The machine family to use to select the aggregate reserved values
	// to return. Possible values include "n1", and "n2d" etc. Empty
	// machine_family will return results matching all machine families.
	MachineFamily string `protobuf:"bytes,2,opt,name=machine_family,json=machineFamily,proto3" json:"machine_family,omitempty"`
	// Optional. The machine_shape as a filter to select matching reservations.
	MachineShape *MachineShape `protobuf:"bytes,11,opt,name=machine_shape,json=machineShape,proto3" json:"machine_shape,omitempty"`
	// Optional. The GPU type for the reserved values to return. Sample values
	// are "nvidia-tesla-t4", and "nvidia-tesla-a100". See
	// https://cloud.google.com/compute/docs/gpus for a list. Empty gpu_type
	// will return results matching all GPUs.
	GpuType string `protobuf:"bytes,3,opt,name=gpu_type,json=gpuType,proto3" json:"gpu_type,omitempty"`
	// Optional. The resource for the reserved values to return. Possible values
	// include "gce-vcpus", "gce-ram", "gce-local-ssd", "gce-gpu" and "gce-vm".
	CloudResourceType string `protobuf:"bytes,4,opt,name=cloud_resource_type,json=cloudResourceType,proto3" json:"cloud_resource_type,omitempty"`
	// Optional. The Reservation type for example, future reservation request and
	// allocation. If unspecified, all types are
	// included.
	ReservationType QueryReservationsRequest_ReservationType `protobuf:"varint,5,opt,name=reservation_type,json=reservationType,proto3,enum=google.cloud.capacityplanner.v1beta.QueryReservationsRequest_ReservationType" json:"reservation_type,omitempty"`
	// Optional. Types of share settings to filter reservations in response. If
	// unspecified, all types are included.
	ShareType QueryReservationsRequest_ShareType `protobuf:"varint,6,opt,name=share_type,json=shareType,proto3,enum=google.cloud.capacityplanner.v1beta.QueryReservationsRequest_ShareType" json:"share_type,omitempty"`
	// Optional. Types of ownerships to filter reservations based on.
	// In case of OWNED, it filters reservations which are owned by selected
	// parent project/folder/organization. If unspecified, all types are
	// included.
	OwnershipType QueryReservationsRequest_OwnershipType `protobuf:"varint,7,opt,name=ownership_type,json=ownershipType,proto3,enum=google.cloud.capacityplanner.v1beta.QueryReservationsRequest_OwnershipType" json:"ownership_type,omitempty"`
	// Optional. Reservations output data format.
	ReservationDataLevel QueryReservationsRequest_ReservationDataLevel `protobuf:"varint,8,opt,name=reservation_data_level,json=reservationDataLevel,proto3,enum=google.cloud.capacityplanner.v1beta.QueryReservationsRequest_ReservationDataLevel" json:"reservation_data_level,omitempty"`
	// Optional. Whether to include pending for approval reservations in the
	// response. This field is only applicable for future reservations.
	IncludeUnapprovedReservations bool `protobuf:"varint,12,opt,name=include_unapproved_reservations,json=includeUnapprovedReservations,proto3" json:"include_unapproved_reservations,omitempty"`
	// Optional. Aggregation Method of the historical reservation usage
	AggregationMethod UsageHistory_AggregationMethod `protobuf:"varint,13,opt,name=aggregation_method,json=aggregationMethod,proto3,enum=google.cloud.capacityplanner.v1beta.UsageHistory_AggregationMethod" json:"aggregation_method,omitempty"`
	// Optional. The start date of reservations usage.
	StartDate *date.Date `protobuf:"bytes,14,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// Optional. The end date of reservations usage.
	EndDate *date.Date `protobuf:"bytes,15,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
}

func (x *QueryReservationsRequest) Reset() {
	*x = QueryReservationsRequest{}
	mi := &file_google_cloud_capacityplanner_v1beta_usage_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryReservationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryReservationsRequest) ProtoMessage() {}

func (x *QueryReservationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_capacityplanner_v1beta_usage_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryReservationsRequest.ProtoReflect.Descriptor instead.
func (*QueryReservationsRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_usage_service_proto_rawDescGZIP(), []int{4}
}

func (x *QueryReservationsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *QueryReservationsRequest) GetLocationLevel() TimeSeries_LocationType {
	if x != nil {
		return x.LocationLevel
	}
	return TimeSeries_LOCATION_TYPE_UNSPECIFIED
}

func (x *QueryReservationsRequest) GetMachineFamily() string {
	if x != nil {
		return x.MachineFamily
	}
	return ""
}

func (x *QueryReservationsRequest) GetMachineShape() *MachineShape {
	if x != nil {
		return x.MachineShape
	}
	return nil
}

func (x *QueryReservationsRequest) GetGpuType() string {
	if x != nil {
		return x.GpuType
	}
	return ""
}

func (x *QueryReservationsRequest) GetCloudResourceType() string {
	if x != nil {
		return x.CloudResourceType
	}
	return ""
}

func (x *QueryReservationsRequest) GetReservationType() QueryReservationsRequest_ReservationType {
	if x != nil {
		return x.ReservationType
	}
	return QueryReservationsRequest_RESERVATION_TYPE_UNSPECIFIED
}

func (x *QueryReservationsRequest) GetShareType() QueryReservationsRequest_ShareType {
	if x != nil {
		return x.ShareType
	}
	return QueryReservationsRequest_SHARE_TYPE_UNSPECIFIED
}

func (x *QueryReservationsRequest) GetOwnershipType() QueryReservationsRequest_OwnershipType {
	if x != nil {
		return x.OwnershipType
	}
	return QueryReservationsRequest_OWNERSHIP_TYPE_UNSPECIFIED
}

func (x *QueryReservationsRequest) GetReservationDataLevel() QueryReservationsRequest_ReservationDataLevel {
	if x != nil {
		return x.ReservationDataLevel
	}
	return QueryReservationsRequest_RESERVATION_DATA_LEVEL_UNSPECIFIED
}

func (x *QueryReservationsRequest) GetIncludeUnapprovedReservations() bool {
	if x != nil {
		return x.IncludeUnapprovedReservations
	}
	return false
}

func (x *QueryReservationsRequest) GetAggregationMethod() UsageHistory_AggregationMethod {
	if x != nil {
		return x.AggregationMethod
	}
	return UsageHistory_AGGREGATION_METHOD_UNSPECIFIED
}

func (x *QueryReservationsRequest) GetStartDate() *date.Date {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *QueryReservationsRequest) GetEndDate() *date.Date {
	if x != nil {
		return x.EndDate
	}
	return nil
}

// The `QueryReservations` response.
type QueryReservationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The reservations data that match the request.
	Reservations []*ReservationData `protobuf:"bytes,1,rep,name=reservations,proto3" json:"reservations,omitempty"`
}

func (x *QueryReservationsResponse) Reset() {
	*x = QueryReservationsResponse{}
	mi := &file_google_cloud_capacityplanner_v1beta_usage_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryReservationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryReservationsResponse) ProtoMessage() {}

func (x *QueryReservationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_capacityplanner_v1beta_usage_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryReservationsResponse.ProtoReflect.Descriptor instead.
func (*QueryReservationsResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_usage_service_proto_rawDescGZIP(), []int{5}
}

func (x *QueryReservationsResponse) GetReservations() []*ReservationData {
	if x != nil {
		return x.Reservations
	}
	return nil
}

// A single data point in a time series.
type Point struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The time which the data point applies.
	EventTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`
	// The value of the data point.
	Value float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Point) Reset() {
	*x = Point{}
	mi := &file_google_cloud_capacityplanner_v1beta_usage_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Point) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Point) ProtoMessage() {}

func (x *Point) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_capacityplanner_v1beta_usage_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Point.ProtoReflect.Descriptor instead.
func (*Point) Descriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_usage_service_proto_rawDescGZIP(), []int{6}
}

func (x *Point) GetEventTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EventTime
	}
	return nil
}

func (x *Point) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// A collection of data points that describes the predicted time-varying values
// of a resource.
type Forecast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the connection in the form of:
	// `projects/{project_id}/locations/{location_id}/forecasts/{forecast_id}` or
	// `organizations/{organization_id}/locations/{location_id}/forecasts/{forecast_id}`
	// or `folders/{folder_id}/locations/{location_id}/forecasts/{forecast_id}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The collection of data points that represent the predicted values. Note
	// that some of these values may be in the past (if, for example, the forecast
	// was created in the past and predicted values for the present day).
	TimeSeries *TimeSeries `protobuf:"bytes,2,opt,name=time_series,json=timeSeries,proto3" json:"time_series,omitempty"`
	// The type of forecast.
	ForecastType Forecast_ForecastType `protobuf:"varint,3,opt,name=forecast_type,json=forecastType,proto3,enum=google.cloud.capacityplanner.v1beta.Forecast_ForecastType" json:"forecast_type,omitempty"`
	// The bounds represented by this forecast time series.
	Bounds Forecast_Bounds `protobuf:"varint,4,opt,name=bounds,proto3,enum=google.cloud.capacityplanner.v1beta.Forecast_Bounds" json:"bounds,omitempty"`
	// The prediction interval represented by the time series.
	PredictionInterval Forecast_PredictionInterval `protobuf:"varint,5,opt,name=prediction_interval,json=predictionInterval,proto3,enum=google.cloud.capacityplanner.v1beta.Forecast_PredictionInterval" json:"prediction_interval,omitempty"`
	// Aggregation Method of the historical usage for which the forecast is
	// generated
	AggregationMethod UsageHistory_AggregationMethod `protobuf:"varint,6,opt,name=aggregation_method,json=aggregationMethod,proto3,enum=google.cloud.capacityplanner.v1beta.UsageHistory_AggregationMethod" json:"aggregation_method,omitempty"`
}

func (x *Forecast) Reset() {
	*x = Forecast{}
	mi := &file_google_cloud_capacityplanner_v1beta_usage_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Forecast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Forecast) ProtoMessage() {}

func (x *Forecast) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_capacityplanner_v1beta_usage_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Forecast.ProtoReflect.Descriptor instead.
func (*Forecast) Descriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_usage_service_proto_rawDescGZIP(), []int{7}
}

func (x *Forecast) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Forecast) GetTimeSeries() *TimeSeries {
	if x != nil {
		return x.TimeSeries
	}
	return nil
}

func (x *Forecast) GetForecastType() Forecast_ForecastType {
	if x != nil {
		return x.ForecastType
	}
	return Forecast_FORECAST_TYPE_UNSPECIFIED
}

func (x *Forecast) GetBounds() Forecast_Bounds {
	if x != nil {
		return x.Bounds
	}
	return Forecast_BOUNDS_UNSPECIFIED
}

func (x *Forecast) GetPredictionInterval() Forecast_PredictionInterval {
	if x != nil {
		return x.PredictionInterval
	}
	return Forecast_PREDICTION_INTERVAL_UNSPECIFIED
}

func (x *Forecast) GetAggregationMethod() UsageHistory_AggregationMethod {
	if x != nil {
		return x.AggregationMethod
	}
	return UsageHistory_AGGREGATION_METHOD_UNSPECIFIED
}

// A collection of data points that describes the historical time-varying values
// of a resource.
type UsageHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The collection of data points that represent the historical values.
	TimeSeries *TimeSeries `protobuf:"bytes,1,opt,name=time_series,json=timeSeries,proto3" json:"time_series,omitempty"`
	// Method used to convert sampled usage data to time series values.
	AggregationMethod UsageHistory_AggregationMethod `protobuf:"varint,2,opt,name=aggregation_method,json=aggregationMethod,proto3,enum=google.cloud.capacityplanner.v1beta.UsageHistory_AggregationMethod" json:"aggregation_method,omitempty"`
}

func (x *UsageHistory) Reset() {
	*x = UsageHistory{}
	mi := &file_google_cloud_capacityplanner_v1beta_usage_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UsageHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageHistory) ProtoMessage() {}

func (x *UsageHistory) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_capacityplanner_v1beta_usage_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageHistory.ProtoReflect.Descriptor instead.
func (*UsageHistory) Descriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_usage_service_proto_rawDescGZIP(), []int{8}
}

func (x *UsageHistory) GetTimeSeries() *TimeSeries {
	if x != nil {
		return x.TimeSeries
	}
	return nil
}

func (x *UsageHistory) GetAggregationMethod() UsageHistory_AggregationMethod {
	if x != nil {
		return x.AggregationMethod
	}
	return UsageHistory_AGGREGATION_METHOD_UNSPECIFIED
}

// A collection of data points that describes the time-varying values of a
// resource. A time series is identified by its ID.
// Next : 13
type TimeSeries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The type of location that the time series is summarizing.
	LocationType TimeSeries_LocationType `protobuf:"varint,1,opt,name=location_type,json=locationType,proto3,enum=google.cloud.capacityplanner.v1beta.TimeSeries_LocationType" json:"location_type,omitempty"`
	// Optional. The location of the usage data in time series.
	Location string `protobuf:"bytes,9,opt,name=location,proto3" json:"location,omitempty"`
	// Optional. The location of the usage data in time series.
	IsSpot bool `protobuf:"varint,11,opt,name=is_spot,json=isSpot,proto3" json:"is_spot,omitempty"`
	// The machine family for the time series values to return. Possible values
	// include "n1" and "n2d".
	MachineFamily string `protobuf:"bytes,2,opt,name=machine_family,json=machineFamily,proto3" json:"machine_family,omitempty"`
	// The disk type for the time series values to return.
	DiskType string `protobuf:"bytes,6,opt,name=disk_type,json=diskType,proto3" json:"disk_type,omitempty"`
	// Optional. The confidential mode for disk.
	ConfidentialMode bool `protobuf:"varint,12,opt,name=confidential_mode,json=confidentialMode,proto3" json:"confidential_mode,omitempty"`
	// The GPU type of the time series.
	GpuType string `protobuf:"bytes,7,opt,name=gpu_type,json=gpuType,proto3" json:"gpu_type,omitempty"`
	// The TPU type of the time series.
	TpuType string `protobuf:"bytes,10,opt,name=tpu_type,json=tpuType,proto3" json:"tpu_type,omitempty"`
	// The machine shape of the time series.
	MachineShape *MachineShape `protobuf:"bytes,8,opt,name=machine_shape,json=machineShape,proto3" json:"machine_shape,omitempty"`
	// The resource for the time series values to return. Possible values include
	// "gce-vcpus", "gce-ram", "gce-local-ssd", "gce-persistent-disk", "gce-gpu",
	// "gce-tpu" and "gce-vm".
	CloudResourceType string `protobuf:"bytes,3,opt,name=cloud_resource_type,json=cloudResourceType,proto3" json:"cloud_resource_type,omitempty"`
	// The data points of this time series. When listing time series, points are
	// returned in chronological order.
	Points []*Point `protobuf:"bytes,4,rep,name=points,proto3" json:"points,omitempty"`
	// The units in which the values are reported.
	Unit string `protobuf:"bytes,5,opt,name=unit,proto3" json:"unit,omitempty"`
}

func (x *TimeSeries) Reset() {
	*x = TimeSeries{}
	mi := &file_google_cloud_capacityplanner_v1beta_usage_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimeSeries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeSeries) ProtoMessage() {}

func (x *TimeSeries) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_capacityplanner_v1beta_usage_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeSeries.ProtoReflect.Descriptor instead.
func (*TimeSeries) Descriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_usage_service_proto_rawDescGZIP(), []int{9}
}

func (x *TimeSeries) GetLocationType() TimeSeries_LocationType {
	if x != nil {
		return x.LocationType
	}
	return TimeSeries_LOCATION_TYPE_UNSPECIFIED
}

func (x *TimeSeries) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *TimeSeries) GetIsSpot() bool {
	if x != nil {
		return x.IsSpot
	}
	return false
}

func (x *TimeSeries) GetMachineFamily() string {
	if x != nil {
		return x.MachineFamily
	}
	return ""
}

func (x *TimeSeries) GetDiskType() string {
	if x != nil {
		return x.DiskType
	}
	return ""
}

func (x *TimeSeries) GetConfidentialMode() bool {
	if x != nil {
		return x.ConfidentialMode
	}
	return false
}

func (x *TimeSeries) GetGpuType() string {
	if x != nil {
		return x.GpuType
	}
	return ""
}

func (x *TimeSeries) GetTpuType() string {
	if x != nil {
		return x.TpuType
	}
	return ""
}

func (x *TimeSeries) GetMachineShape() *MachineShape {
	if x != nil {
		return x.MachineShape
	}
	return nil
}

func (x *TimeSeries) GetCloudResourceType() string {
	if x != nil {
		return x.CloudResourceType
	}
	return ""
}

func (x *TimeSeries) GetPoints() []*Point {
	if x != nil {
		return x.Points
	}
	return nil
}

func (x *TimeSeries) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

// Response entity for reservations data.
type ReservationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier. The resource name of the connection in the form of:
	// `projects/{project_id}/locations/{location_id}/reservations/{reservation_id}`
	// or
	// `organizations/{organization_id}/locations/{location_id}/reservations/{reservation_id}`
	// or
	// `folders/{folder_id}/locations/{location_id}/reservations/{reservation_id}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The collection of data points that represent the aggregated reserved value
	// for reservations filtered by the criteria.
	TimeSeries *TimeSeries `protobuf:"bytes,2,opt,name=time_series,json=timeSeries,proto3" json:"time_series,omitempty"`
	// The collection of data points that represent the aggregated used value for
	// reservations filtered by the criteria.
	UsedReservationValues *TimeSeries `protobuf:"bytes,5,opt,name=used_reservation_values,json=usedReservationValues,proto3" json:"used_reservation_values,omitempty"`
	// Future reservations filtered by the criteria.
	FutureReservations []*FutureReservation `protobuf:"bytes,3,rep,name=future_reservations,json=futureReservations,proto3" json:"future_reservations,omitempty"`
	// Allocations filtered by the criteria.
	Allocations []*Allocation `protobuf:"bytes,4,rep,name=allocations,proto3" json:"allocations,omitempty"`
}

func (x *ReservationData) Reset() {
	*x = ReservationData{}
	mi := &file_google_cloud_capacityplanner_v1beta_usage_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReservationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReservationData) ProtoMessage() {}

func (x *ReservationData) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_capacityplanner_v1beta_usage_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReservationData.ProtoReflect.Descriptor instead.
func (*ReservationData) Descriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_usage_service_proto_rawDescGZIP(), []int{10}
}

func (x *ReservationData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReservationData) GetTimeSeries() *TimeSeries {
	if x != nil {
		return x.TimeSeries
	}
	return nil
}

func (x *ReservationData) GetUsedReservationValues() *TimeSeries {
	if x != nil {
		return x.UsedReservationValues
	}
	return nil
}

func (x *ReservationData) GetFutureReservations() []*FutureReservation {
	if x != nil {
		return x.FutureReservations
	}
	return nil
}

func (x *ReservationData) GetAllocations() []*Allocation {
	if x != nil {
		return x.Allocations
	}
	return nil
}

// Machine shape details
// Next : 13
type MachineShape struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The VM family.
	MachineFamily string `protobuf:"bytes,1,opt,name=machine_family,json=machineFamily,proto3" json:"machine_family,omitempty"`
	// Optional. The characteristics of the sampled VM expressed as a string.
	MachineType string `protobuf:"bytes,2,opt,name=machine_type,json=machineType,proto3" json:"machine_type,omitempty"`
	// Optional. The customer visible string representing the type of VM.
	MachineShape string `protobuf:"bytes,3,opt,name=machine_shape,json=machineShape,proto3" json:"machine_shape,omitempty"`
	// Optional. Number of CPU cores per VM.
	CpuCores float64 `protobuf:"fixed64,4,opt,name=cpu_cores,json=cpuCores,proto3" json:"cpu_cores,omitempty"`
	// Optional. The type of GPU with the VM.
	GpuType string `protobuf:"bytes,5,opt,name=gpu_type,json=gpuType,proto3" json:"gpu_type,omitempty"`
	// Optional. The GPU name recognized by Compute Engine APIs.
	GpuComputeType string `protobuf:"bytes,10,opt,name=gpu_compute_type,json=gpuComputeType,proto3" json:"gpu_compute_type,omitempty"`
	// Optional. The number of GPU cores per VM.
	GpuCores int64 `protobuf:"varint,6,opt,name=gpu_cores,json=gpuCores,proto3" json:"gpu_cores,omitempty"`
	// Optional. The number of local SSD partitions per VM.
	LocalSsdPartitions int64 `protobuf:"varint,7,opt,name=local_ssd_partitions,json=localSsdPartitions,proto3" json:"local_ssd_partitions,omitempty"`
	// Optional. Total amount of local SSD storage.
	LocalSsdGb float64 `protobuf:"fixed64,8,opt,name=local_ssd_gb,json=localSsdGb,proto3" json:"local_ssd_gb,omitempty"`
	// Optional. Total amount of memory with the VM.
	MemoryGb float64 `protobuf:"fixed64,9,opt,name=memory_gb,json=memoryGb,proto3" json:"memory_gb,omitempty"`
	// Optional. The local SSD interface used such as nvme or scsi
	LocalSsdInterface string `protobuf:"bytes,11,opt,name=local_ssd_interface,json=localSsdInterface,proto3" json:"local_ssd_interface,omitempty"`
	// Optional. The Min-cpu platform used such as icelake
	MinCpuPlatform string `protobuf:"bytes,12,opt,name=min_cpu_platform,json=minCpuPlatform,proto3" json:"min_cpu_platform,omitempty"`
}

func (x *MachineShape) Reset() {
	*x = MachineShape{}
	mi := &file_google_cloud_capacityplanner_v1beta_usage_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MachineShape) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineShape) ProtoMessage() {}

func (x *MachineShape) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_capacityplanner_v1beta_usage_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineShape.ProtoReflect.Descriptor instead.
func (*MachineShape) Descriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_usage_service_proto_rawDescGZIP(), []int{11}
}

func (x *MachineShape) GetMachineFamily() string {
	if x != nil {
		return x.MachineFamily
	}
	return ""
}

func (x *MachineShape) GetMachineType() string {
	if x != nil {
		return x.MachineType
	}
	return ""
}

func (x *MachineShape) GetMachineShape() string {
	if x != nil {
		return x.MachineShape
	}
	return ""
}

func (x *MachineShape) GetCpuCores() float64 {
	if x != nil {
		return x.CpuCores
	}
	return 0
}

func (x *MachineShape) GetGpuType() string {
	if x != nil {
		return x.GpuType
	}
	return ""
}

func (x *MachineShape) GetGpuComputeType() string {
	if x != nil {
		return x.GpuComputeType
	}
	return ""
}

func (x *MachineShape) GetGpuCores() int64 {
	if x != nil {
		return x.GpuCores
	}
	return 0
}

func (x *MachineShape) GetLocalSsdPartitions() int64 {
	if x != nil {
		return x.LocalSsdPartitions
	}
	return 0
}

func (x *MachineShape) GetLocalSsdGb() float64 {
	if x != nil {
		return x.LocalSsdGb
	}
	return 0
}

func (x *MachineShape) GetMemoryGb() float64 {
	if x != nil {
		return x.MemoryGb
	}
	return 0
}

func (x *MachineShape) GetLocalSsdInterface() string {
	if x != nil {
		return x.LocalSsdInterface
	}
	return ""
}

func (x *MachineShape) GetMinCpuPlatform() string {
	if x != nil {
		return x.MinCpuPlatform
	}
	return ""
}

// The `ExportUsageHistories` request
// Next : 12
type ExportUsageHistoriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The compute engine resource and location for the time series
	// values to return. The format is:
	//
	//	projects/{project}/locations/{location} or
	//	organizations/{organization}/locations/{location} or
	//	folders/{folder}/locations/{location}
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Optional. Set true to export usage for spot resources.
	IsSpot bool `protobuf:"varint,11,opt,name=is_spot,json=isSpot,proto3" json:"is_spot,omitempty"`
	// Optional. The machine family for the `UsageHistory` values to return.
	// Possible values include "n1", and "n2d". See
	// https://cloud.google.com/compute/docs/machine-types for more examples.
	MachineFamily string `protobuf:"bytes,2,opt,name=machine_family,json=machineFamily,proto3" json:"machine_family,omitempty"`
	// Optional. The machine shape for the time series values to export.
	MachineShape *MachineShape `protobuf:"bytes,13,opt,name=machine_shape,json=machineShape,proto3" json:"machine_shape,omitempty"`
	// Optional. The disk_type for the `UsageHistory` values to return request
	// with persistent-disk resource_type. Possible values include "pd-ssd",
	// "pd-standard", "pd-balanced", and "pd-extreme".
	DiskType string `protobuf:"bytes,3,opt,name=disk_type,json=diskType,proto3" json:"disk_type,omitempty"`
	// Optional. The GPU type for the `UsageHistory` values to return. Sample
	// values are "nvidia-tesla-t4", and "nvidia-tesla-a100". See
	// https://cloud.google.com/compute/docs/gpus for a list. Empty gpu_type
	// will return results matching all GPUs.
	GpuType string `protobuf:"bytes,9,opt,name=gpu_type,json=gpuType,proto3" json:"gpu_type,omitempty"`
	// Optional. The TPU type for the `UsageHistory` values to return. Empty
	// tpu_type will return results matching all TPUs.
	TpuType string `protobuf:"bytes,10,opt,name=tpu_type,json=tpuType,proto3" json:"tpu_type,omitempty"`
	// Required. The resource for the `UsageHistory` values to return. Possible
	// values include "gce-vcpus", "gce-ram", "gce-local-ssd",
	// "gce-persistent-disk", "gce-gpu" and "gce-tpu".
	ResourceType string `protobuf:"bytes,4,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	// Optional. The method that should be used to convert sampled usage data to
	// daily usage values. AGGREGATION_METHOD_UNSPECIFIED will return results
	// matching all the aggregation methods.
	UsageAggregationMethod UsageHistory_AggregationMethod `protobuf:"varint,5,opt,name=usage_aggregation_method,json=usageAggregationMethod,proto3,enum=google.cloud.capacityplanner.v1beta.UsageHistory_AggregationMethod" json:"usage_aggregation_method,omitempty"`
	// Optional. The start date of usage.
	StartDate *date.Date `protobuf:"bytes,6,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// Optional. The end date of usage.
	EndDate *date.Date `protobuf:"bytes,7,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	// Required. Output configuration indicating where the results will be output
	// to.
	OutputConfig *OutputConfig `protobuf:"bytes,8,opt,name=output_config,json=outputConfig,proto3" json:"output_config,omitempty"`
}

func (x *ExportUsageHistoriesRequest) Reset() {
	*x = ExportUsageHistoriesRequest{}
	mi := &file_google_cloud_capacityplanner_v1beta_usage_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportUsageHistoriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportUsageHistoriesRequest) ProtoMessage() {}

func (x *ExportUsageHistoriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_capacityplanner_v1beta_usage_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportUsageHistoriesRequest.ProtoReflect.Descriptor instead.
func (*ExportUsageHistoriesRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_usage_service_proto_rawDescGZIP(), []int{12}
}

func (x *ExportUsageHistoriesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ExportUsageHistoriesRequest) GetIsSpot() bool {
	if x != nil {
		return x.IsSpot
	}
	return false
}

func (x *ExportUsageHistoriesRequest) GetMachineFamily() string {
	if x != nil {
		return x.MachineFamily
	}
	return ""
}

func (x *ExportUsageHistoriesRequest) GetMachineShape() *MachineShape {
	if x != nil {
		return x.MachineShape
	}
	return nil
}

func (x *ExportUsageHistoriesRequest) GetDiskType() string {
	if x != nil {
		return x.DiskType
	}
	return ""
}

func (x *ExportUsageHistoriesRequest) GetGpuType() string {
	if x != nil {
		return x.GpuType
	}
	return ""
}

func (x *ExportUsageHistoriesRequest) GetTpuType() string {
	if x != nil {
		return x.TpuType
	}
	return ""
}

func (x *ExportUsageHistoriesRequest) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *ExportUsageHistoriesRequest) GetUsageAggregationMethod() UsageHistory_AggregationMethod {
	if x != nil {
		return x.UsageAggregationMethod
	}
	return UsageHistory_AGGREGATION_METHOD_UNSPECIFIED
}

func (x *ExportUsageHistoriesRequest) GetStartDate() *date.Date {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *ExportUsageHistoriesRequest) GetEndDate() *date.Date {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *ExportUsageHistoriesRequest) GetOutputConfig() *OutputConfig {
	if x != nil {
		return x.OutputConfig
	}
	return nil
}

// The `ExportForecasts` request
// Next : 13
type ExportForecastsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The compute engine resource and location for the time series
	// values to return. The format is:
	//
	//	projects/{project}/locations/{location} or
	//	organizations/{organization}/locations/{location} or
	//	folders/{folder}/locations/{location}
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Optional. The machine family to use to select the `Forecast` values to
	// return. Possible values include "n1", and "n2d".
	MachineFamily string `protobuf:"bytes,2,opt,name=machine_family,json=machineFamily,proto3" json:"machine_family,omitempty"`
	// Optional. The machine shape for the time series values to export.
	MachineShape *MachineShape `protobuf:"bytes,12,opt,name=machine_shape,json=machineShape,proto3" json:"machine_shape,omitempty"`
	// Optional. The disk_type for the `Forecast` values to return with request
	// persistent-disk resource_type.
	DiskType string `protobuf:"bytes,3,opt,name=disk_type,json=diskType,proto3" json:"disk_type,omitempty"`
	// Optional. The GPU type for the `Forecast` values to return. Sample values
	// are "nvidia-tesla-t4", and "nvidia-tesla-a100". See
	// https://cloud.google.com/compute/docs/gpus for a list. Empty gpu_type
	// will return results matching all GPUs.
	GpuType string `protobuf:"bytes,10,opt,name=gpu_type,json=gpuType,proto3" json:"gpu_type,omitempty"`
	// Optional. The TPU type for the `Forecast` values to return. Empty tpu_type
	// will return results matching all TPUs.
	TpuType string `protobuf:"bytes,11,opt,name=tpu_type,json=tpuType,proto3" json:"tpu_type,omitempty"`
	// Required. The resource for the `Forecast` values to return. Possible values
	// include "gce-vcpus", "gce-ram", "gce-local-ssd", "gce-persistent-disk",
	// "gce-gpu" and "gce-tpu".
	ResourceType string `protobuf:"bytes,4,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	// Optional. The prediction interval to use to select the `Forecast` values to
	// return. PREDICTION_INTERVAL_UNSPECIFIED will return results matching all
	// prediction intervals.
	PredictionInterval Forecast_PredictionInterval `protobuf:"varint,5,opt,name=prediction_interval,json=predictionInterval,proto3,enum=google.cloud.capacityplanner.v1beta.Forecast_PredictionInterval" json:"prediction_interval,omitempty"`
	// Optional. Aggregation Method of the historical usage for which the forecast
	// is generated.
	AggregationMethod UsageHistory_AggregationMethod `protobuf:"varint,6,opt,name=aggregation_method,json=aggregationMethod,proto3,enum=google.cloud.capacityplanner.v1beta.UsageHistory_AggregationMethod" json:"aggregation_method,omitempty"`
	// Optional. The start date of forecasts.
	StartDate *date.Date `protobuf:"bytes,7,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// Optional. The end date of forecasts.
	EndDate *date.Date `protobuf:"bytes,8,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	// Required. Output configuration indicating where the results will be output
	// to.
	OutputConfig *OutputConfig `protobuf:"bytes,9,opt,name=output_config,json=outputConfig,proto3" json:"output_config,omitempty"`
}

func (x *ExportForecastsRequest) Reset() {
	*x = ExportForecastsRequest{}
	mi := &file_google_cloud_capacityplanner_v1beta_usage_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportForecastsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportForecastsRequest) ProtoMessage() {}

func (x *ExportForecastsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_capacityplanner_v1beta_usage_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportForecastsRequest.ProtoReflect.Descriptor instead.
func (*ExportForecastsRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_usage_service_proto_rawDescGZIP(), []int{13}
}

func (x *ExportForecastsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ExportForecastsRequest) GetMachineFamily() string {
	if x != nil {
		return x.MachineFamily
	}
	return ""
}

func (x *ExportForecastsRequest) GetMachineShape() *MachineShape {
	if x != nil {
		return x.MachineShape
	}
	return nil
}

func (x *ExportForecastsRequest) GetDiskType() string {
	if x != nil {
		return x.DiskType
	}
	return ""
}

func (x *ExportForecastsRequest) GetGpuType() string {
	if x != nil {
		return x.GpuType
	}
	return ""
}

func (x *ExportForecastsRequest) GetTpuType() string {
	if x != nil {
		return x.TpuType
	}
	return ""
}

func (x *ExportForecastsRequest) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *ExportForecastsRequest) GetPredictionInterval() Forecast_PredictionInterval {
	if x != nil {
		return x.PredictionInterval
	}
	return Forecast_PREDICTION_INTERVAL_UNSPECIFIED
}

func (x *ExportForecastsRequest) GetAggregationMethod() UsageHistory_AggregationMethod {
	if x != nil {
		return x.AggregationMethod
	}
	return UsageHistory_AGGREGATION_METHOD_UNSPECIFIED
}

func (x *ExportForecastsRequest) GetStartDate() *date.Date {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *ExportForecastsRequest) GetEndDate() *date.Date {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *ExportForecastsRequest) GetOutputConfig() *OutputConfig {
	if x != nil {
		return x.OutputConfig
	}
	return nil
}

// The `ExportReservationsUsage` request
type ExportReservationsUsageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// resource to query reservations and usage by.
	//
	// Types that are assignable to Resource:
	//
	//	*ExportReservationsUsageRequest_MachineFamily
	//	*ExportReservationsUsageRequest_MachineShape
	//	*ExportReservationsUsageRequest_GpuType
	Resource isExportReservationsUsageRequest_Resource `protobuf_oneof:"resource"`
	// Required. The compute engine resource and location of the
	// reservationsusage. The format is:
	//
	//	projects/{project}/locations/{location} or
	//	organizations/{organization}/locations/{location} or
	//	folders/{folder}/locations/{location}
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Optional. The location level of the reservations usage timeseries.
	LocationLevel TimeSeries_LocationType `protobuf:"varint,11,opt,name=location_level,json=locationLevel,proto3,enum=google.cloud.capacityplanner.v1beta.TimeSeries_LocationType" json:"location_level,omitempty"`
	// Required. The resource for the `ReservationsUsage` values to return.
	// Possible values include "gce-vcpus", "gce-ram", "gce-local-ssd", and
	// "gce-gpu".
	CloudResourceType string `protobuf:"bytes,5,opt,name=cloud_resource_type,json=cloudResourceType,proto3" json:"cloud_resource_type,omitempty"`
	// Required. The method that should be used to convert sampled reservations
	// data to daily usage values.
	UsageAggregationMethod UsageHistory_AggregationMethod `protobuf:"varint,6,opt,name=usage_aggregation_method,json=usageAggregationMethod,proto3,enum=google.cloud.capacityplanner.v1beta.UsageHistory_AggregationMethod" json:"usage_aggregation_method,omitempty"`
	// Optional. Type of share settings to filter reservations in response. If
	// unspecified, all types are included.
	ShareType ExportReservationsUsageRequest_ShareType `protobuf:"varint,7,opt,name=share_type,json=shareType,proto3,enum=google.cloud.capacityplanner.v1beta.ExportReservationsUsageRequest_ShareType" json:"share_type,omitempty"`
	// Optional. The start date of reservations usage.
	StartDate *date.Date `protobuf:"bytes,8,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// Optional. The end date of reservations usage.
	EndDate *date.Date `protobuf:"bytes,9,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	// Required. Output configuration indicating where the results will be output
	// to.
	OutputConfig *OutputConfig `protobuf:"bytes,10,opt,name=output_config,json=outputConfig,proto3" json:"output_config,omitempty"`
}

func (x *ExportReservationsUsageRequest) Reset() {
	*x = ExportReservationsUsageRequest{}
	mi := &file_google_cloud_capacityplanner_v1beta_usage_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportReservationsUsageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportReservationsUsageRequest) ProtoMessage() {}

func (x *ExportReservationsUsageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_capacityplanner_v1beta_usage_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportReservationsUsageRequest.ProtoReflect.Descriptor instead.
func (*ExportReservationsUsageRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_usage_service_proto_rawDescGZIP(), []int{14}
}

func (m *ExportReservationsUsageRequest) GetResource() isExportReservationsUsageRequest_Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (x *ExportReservationsUsageRequest) GetMachineFamily() string {
	if x, ok := x.GetResource().(*ExportReservationsUsageRequest_MachineFamily); ok {
		return x.MachineFamily
	}
	return ""
}

func (x *ExportReservationsUsageRequest) GetMachineShape() *MachineShape {
	if x, ok := x.GetResource().(*ExportReservationsUsageRequest_MachineShape); ok {
		return x.MachineShape
	}
	return nil
}

func (x *ExportReservationsUsageRequest) GetGpuType() string {
	if x, ok := x.GetResource().(*ExportReservationsUsageRequest_GpuType); ok {
		return x.GpuType
	}
	return ""
}

func (x *ExportReservationsUsageRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ExportReservationsUsageRequest) GetLocationLevel() TimeSeries_LocationType {
	if x != nil {
		return x.LocationLevel
	}
	return TimeSeries_LOCATION_TYPE_UNSPECIFIED
}

func (x *ExportReservationsUsageRequest) GetCloudResourceType() string {
	if x != nil {
		return x.CloudResourceType
	}
	return ""
}

func (x *ExportReservationsUsageRequest) GetUsageAggregationMethod() UsageHistory_AggregationMethod {
	if x != nil {
		return x.UsageAggregationMethod
	}
	return UsageHistory_AGGREGATION_METHOD_UNSPECIFIED
}

func (x *ExportReservationsUsageRequest) GetShareType() ExportReservationsUsageRequest_ShareType {
	if x != nil {
		return x.ShareType
	}
	return ExportReservationsUsageRequest_SHARE_TYPE_UNSPECIFIED
}

func (x *ExportReservationsUsageRequest) GetStartDate() *date.Date {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *ExportReservationsUsageRequest) GetEndDate() *date.Date {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *ExportReservationsUsageRequest) GetOutputConfig() *OutputConfig {
	if x != nil {
		return x.OutputConfig
	}
	return nil
}

type isExportReservationsUsageRequest_Resource interface {
	isExportReservationsUsageRequest_Resource()
}

type ExportReservationsUsageRequest_MachineFamily struct {
	// Optional. The machine family to query reservations and usage by. For
	// example: n1, n2d.
	MachineFamily string `protobuf:"bytes,2,opt,name=machine_family,json=machineFamily,proto3,oneof"`
}

type ExportReservationsUsageRequest_MachineShape struct {
	// Optional. The machine_shape as a filter to select matching reservations
	// and its usage.
	MachineShape *MachineShape `protobuf:"bytes,3,opt,name=machine_shape,json=machineShape,proto3,oneof"`
}

type ExportReservationsUsageRequest_GpuType struct {
	// Optional. The GPU type to query reservations and usage  by. For example:
	// NVIDIA T4.
	GpuType string `protobuf:"bytes,4,opt,name=gpu_type,json=gpuType,proto3,oneof"`
}

func (*ExportReservationsUsageRequest_MachineFamily) isExportReservationsUsageRequest_Resource() {}

func (*ExportReservationsUsageRequest_MachineShape) isExportReservationsUsageRequest_Resource() {}

func (*ExportReservationsUsageRequest_GpuType) isExportReservationsUsageRequest_Resource() {}

// Output configuration for export destination.
type OutputConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Export destination.
	//
	// Types that are assignable to Destination:
	//
	//	*OutputConfig_GcsDestination
	//	*OutputConfig_BigqueryDestination
	Destination isOutputConfig_Destination `protobuf_oneof:"destination"`
}

func (x *OutputConfig) Reset() {
	*x = OutputConfig{}
	mi := &file_google_cloud_capacityplanner_v1beta_usage_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OutputConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputConfig) ProtoMessage() {}

func (x *OutputConfig) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_capacityplanner_v1beta_usage_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputConfig.ProtoReflect.Descriptor instead.
func (*OutputConfig) Descriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_usage_service_proto_rawDescGZIP(), []int{15}
}

func (m *OutputConfig) GetDestination() isOutputConfig_Destination {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (x *OutputConfig) GetGcsDestination() *GcsDestination {
	if x, ok := x.GetDestination().(*OutputConfig_GcsDestination); ok {
		return x.GcsDestination
	}
	return nil
}

func (x *OutputConfig) GetBigqueryDestination() *BigQueryDestination {
	if x, ok := x.GetDestination().(*OutputConfig_BigqueryDestination); ok {
		return x.BigqueryDestination
	}
	return nil
}

type isOutputConfig_Destination interface {
	isOutputConfig_Destination()
}

type OutputConfig_GcsDestination struct {
	// Destination on Cloud Storage.
	GcsDestination *GcsDestination `protobuf:"bytes,1,opt,name=gcs_destination,json=gcsDestination,proto3,oneof"`
}

type OutputConfig_BigqueryDestination struct {
	// Destination on BigQuery.
	BigqueryDestination *BigQueryDestination `protobuf:"bytes,2,opt,name=bigquery_destination,json=bigqueryDestination,proto3,oneof"`
}

func (*OutputConfig_GcsDestination) isOutputConfig_Destination() {}

func (*OutputConfig_BigqueryDestination) isOutputConfig_Destination() {}

// A Cloud Storage location.
type GcsDestination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The path to the file in Cloud Storage where the export will be
	// stored. The URI is in the form `gs://bucketName/fileName`. If the file
	// already exists, the request succeeds, but the operation fails.
	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	// Required. The bucket name to which the export will be stored.
	Bucket string `protobuf:"bytes,3,opt,name=bucket,proto3" json:"bucket,omitempty"`
	// Required. The object name to which the export will be stored.
	Object string `protobuf:"bytes,4,opt,name=object,proto3" json:"object,omitempty"`
	// Optional. Flag to indicate overwrite in case file already exists.
	Force bool `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *GcsDestination) Reset() {
	*x = GcsDestination{}
	mi := &file_google_cloud_capacityplanner_v1beta_usage_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GcsDestination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcsDestination) ProtoMessage() {}

func (x *GcsDestination) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_capacityplanner_v1beta_usage_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcsDestination.ProtoReflect.Descriptor instead.
func (*GcsDestination) Descriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_usage_service_proto_rawDescGZIP(), []int{16}
}

func (x *GcsDestination) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *GcsDestination) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *GcsDestination) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *GcsDestination) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

// A BigQuery destination for exporting assets to.
type BigQueryDestination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The BigQuery dataset in format
	// "projects/{projectId}/datasets/{datasetId}", to which the snapshot result
	// should be exported. If this dataset does not exist, the export call returns
	// an INVALID_ARGUMENT error.
	Dataset string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	// Required. The BigQuery table to which the snapshot result should be
	// written.
	Table string `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	// Optional. The partition key for BigQuery partitioned table.
	PartitionKey BigQueryDestination_PartitionKey `protobuf:"varint,3,opt,name=partition_key,json=partitionKey,proto3,enum=google.cloud.capacityplanner.v1beta.BigQueryDestination_PartitionKey" json:"partition_key,omitempty"`
	// Optional. Specifies the action that occurs if the destination table or
	// partition already exists.
	WriteDisposition BigQueryDestination_WriteDisposition `protobuf:"varint,4,opt,name=write_disposition,json=writeDisposition,proto3,enum=google.cloud.capacityplanner.v1beta.BigQueryDestination_WriteDisposition" json:"write_disposition,omitempty"`
	// Optional. Specifies the action that occurs if the destination table does
	// not exist
	CreateDisposition BigQueryDestination_CreateDisposition `protobuf:"varint,5,opt,name=create_disposition,json=createDisposition,proto3,enum=google.cloud.capacityplanner.v1beta.BigQueryDestination_CreateDisposition" json:"create_disposition,omitempty"`
	// Optional. Specifies the Cloud Storage location.
	// Users can choose to provide a location for Cloud Storage bucket to store
	// the exported data. (as it is possible that some locations are restricted
	// via org policy for that project) Temporary Cloud Storage bucket creation is
	// an interim step for BigQuery upload. If no value is provided, the default
	// location used will be 'US'.
	GcsLocation string `protobuf:"bytes,6,opt,name=gcs_location,json=gcsLocation,proto3" json:"gcs_location,omitempty"`
}

func (x *BigQueryDestination) Reset() {
	*x = BigQueryDestination{}
	mi := &file_google_cloud_capacityplanner_v1beta_usage_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BigQueryDestination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BigQueryDestination) ProtoMessage() {}

func (x *BigQueryDestination) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_capacityplanner_v1beta_usage_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BigQueryDestination.ProtoReflect.Descriptor instead.
func (*BigQueryDestination) Descriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_usage_service_proto_rawDescGZIP(), []int{17}
}

func (x *BigQueryDestination) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *BigQueryDestination) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *BigQueryDestination) GetPartitionKey() BigQueryDestination_PartitionKey {
	if x != nil {
		return x.PartitionKey
	}
	return BigQueryDestination_PARTITION_KEY_UNSPECIFIED
}

func (x *BigQueryDestination) GetWriteDisposition() BigQueryDestination_WriteDisposition {
	if x != nil {
		return x.WriteDisposition
	}
	return BigQueryDestination_WRITE_DISPOSITION_UNSPECIFIED
}

func (x *BigQueryDestination) GetCreateDisposition() BigQueryDestination_CreateDisposition {
	if x != nil {
		return x.CreateDisposition
	}
	return BigQueryDestination_CREATE_DISPOSITION_UNSPECIFIED
}

func (x *BigQueryDestination) GetGcsLocation() string {
	if x != nil {
		return x.GcsLocation
	}
	return ""
}

// Represents the metadata of a long-running operation.
type OperationMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The time the operation was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The time the operation finished running.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *OperationMetadata) Reset() {
	*x = OperationMetadata{}
	mi := &file_google_cloud_capacityplanner_v1beta_usage_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperationMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationMetadata) ProtoMessage() {}

func (x *OperationMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_capacityplanner_v1beta_usage_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationMetadata.ProtoReflect.Descriptor instead.
func (*OperationMetadata) Descriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_usage_service_proto_rawDescGZIP(), []int{18}
}

func (x *OperationMetadata) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *OperationMetadata) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

// A response message for [UsageService.ExportUsageHistories].
type ExportUsageHistoriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response message for the usage history export. In case of bigquery,
	// it will also contain job id.
	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *ExportUsageHistoriesResponse) Reset() {
	*x = ExportUsageHistoriesResponse{}
	mi := &file_google_cloud_capacityplanner_v1beta_usage_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportUsageHistoriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportUsageHistoriesResponse) ProtoMessage() {}

func (x *ExportUsageHistoriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_capacityplanner_v1beta_usage_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportUsageHistoriesResponse.ProtoReflect.Descriptor instead.
func (*ExportUsageHistoriesResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_usage_service_proto_rawDescGZIP(), []int{19}
}

func (x *ExportUsageHistoriesResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

// A response message for [UsageService.ExportForecasts].
type ExportForecastsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response message for the forecast export. In case of bigquery,
	// it will also contain job id.
	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *ExportForecastsResponse) Reset() {
	*x = ExportForecastsResponse{}
	mi := &file_google_cloud_capacityplanner_v1beta_usage_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportForecastsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportForecastsResponse) ProtoMessage() {}

func (x *ExportForecastsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_capacityplanner_v1beta_usage_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportForecastsResponse.ProtoReflect.Descriptor instead.
func (*ExportForecastsResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_usage_service_proto_rawDescGZIP(), []int{20}
}

func (x *ExportForecastsResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

// A response message for [UsageService.ExportReservationsUsage].
type ExportReservationsUsageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response message for the reservations usage export. In case of
	// bigquery, it will also contain job id.
	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *ExportReservationsUsageResponse) Reset() {
	*x = ExportReservationsUsageResponse{}
	mi := &file_google_cloud_capacityplanner_v1beta_usage_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportReservationsUsageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportReservationsUsageResponse) ProtoMessage() {}

func (x *ExportReservationsUsageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_capacityplanner_v1beta_usage_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportReservationsUsageResponse.ProtoReflect.Descriptor instead.
func (*ExportReservationsUsageResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_usage_service_proto_rawDescGZIP(), []int{21}
}

func (x *ExportReservationsUsageResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

var File_google_cloud_capacityplanner_v1beta_usage_service_proto protoreflect.FileDescriptor

var file_google_cloud_capacityplanner_v1beta_usage_service_proto_rawDesc = []byte{
	0x0a, 0x37, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x23, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x34, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x66, 0x75, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x6c, 0x6f,
	0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x98, 0x06, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x41, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x29, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x23, 0x0a, 0x21, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x68, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x1c, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x69, 0x73, 0x53, 0x70, 0x6f, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x12, 0x5b, 0x0a, 0x0d, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f,
	0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x68, 0x61, 0x70, 0x65, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x68, 0x61, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x70, 0x75, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x67, 0x70,
	0x75, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x70, 0x75, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x74, 0x70,
	0x75, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x7d, 0x0a, 0x18, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70,
	0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x16, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x35, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0x79,
	0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a,
	0x0f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0e, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0xea, 0x05, 0x0a, 0x15, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x29, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x23, 0x0a, 0x21, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x5b, 0x0a,
	0x0d, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x53, 0x68, 0x61, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x68, 0x61, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x64, 0x69,
	0x73, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x11,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x10, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1e,
	0x0a, 0x08, 0x67, 0x70, 0x75, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x67, 0x70, 0x75, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x0a, 0x08, 0x74, 0x70, 0x75, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x74, 0x70, 0x75, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5f,
	0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x46, 0x6f, 0x72, 0x65,
	0x63, 0x61, 0x73, 0x74, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x71, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x12,
	0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x72, 0x0a, 0x12, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x52, 0x11, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x65, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46,
	0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4b, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61,
	0x73, 0x74, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x22, 0xc9, 0x0d,
	0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xe0, 0x41, 0x02, 0xfa,
	0x41, 0x23, 0x0a, 0x21, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x68, 0x0a,
	0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2a, 0x0a, 0x0e, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x0d, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x46, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x12, 0x5b, 0x0a, 0x0d, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x73,
	0x68, 0x61, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x68, 0x61, 0x70, 0x65, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x68, 0x61, 0x70, 0x65,
	0x12, 0x1e, 0x0a, 0x08, 0x67, 0x70, 0x75, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x67, 0x70, 0x75, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x33, 0x0a, 0x13, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x11, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x7d, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x4d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x6b, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x47, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x77, 0x0a, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0d, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x16, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x52, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x14, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x4b, 0x0a, 0x1f, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x75, 0x6e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64,
	0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x1d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x55, 0x6e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x77, 0x0a, 0x12, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x11, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x35, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x0f, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x1c, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x01, 0x12, 0x27, 0x0a, 0x23, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x55, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x53,
	0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45,
	0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x4c, 0x4c, 0x10, 0x03, 0x22, 0x5f, 0x0a, 0x09, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41,
	0x4c, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45,
	0x43, 0x54, 0x53, 0x10, 0x02, 0x22, 0x6e, 0x0a, 0x0d, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x53,
	0x48, 0x49, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x53,
	0x48, 0x49, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x23, 0x0a, 0x1f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x53, 0x10, 0x02, 0x22, 0x91, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x26,
	0x0a, 0x22, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x2a, 0x0a,
	0x26, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x45,
	0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x22, 0x75, 0x0a, 0x19, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x58, 0x0a, 0x05, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc3, 0x08, 0x0a, 0x08, 0x46,
	0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x5f, 0x0a,
	0x0d, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63,
	0x61, 0x73, 0x74, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0c, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4c,
	0x0a, 0x06, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x73, 0x52, 0x06, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x71, 0x0a, 0x13,
	0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x12, 0x70, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x72, 0x0a, 0x12, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x52, 0x11, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x22, 0x71, 0x0a, 0x0c, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x4f, 0x52, 0x45, 0x43, 0x41, 0x53, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x54, 0x49, 0x53, 0x54, 0x49, 0x43, 0x41,
	0x4c, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x49, 0x53, 0x54, 0x49, 0x43,
	0x41, 0x4c, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x42, 0x46, 0x43, 0x4d, 0x10, 0x02, 0x12, 0x16,
	0x0a, 0x12, 0x59, 0x45, 0x41, 0x52, 0x4c, 0x59, 0x5f, 0x53, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x41,
	0x4c, 0x49, 0x54, 0x59, 0x10, 0x03, 0x22, 0x4e, 0x0a, 0x06, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73,
	0x12, 0x16, 0x0a, 0x12, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x4f, 0x57, 0x45,
	0x52, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x44,
	0x49, 0x41, 0x4e, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x50, 0x50, 0x45, 0x52, 0x5f, 0x42,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x22, 0x71, 0x0a, 0x12, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x1f,
	0x50, 0x52, 0x45, 0x44, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x56, 0x41, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x45, 0x44, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x39, 0x30, 0x10, 0x01, 0x12, 0x1a, 0x0a,
	0x16, 0x50, 0x52, 0x45, 0x44, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x56, 0x41, 0x4c, 0x5f, 0x35, 0x30, 0x10, 0x02, 0x3a, 0x84, 0x02, 0xea, 0x41, 0x80, 0x02,
	0x0a, 0x27, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x12, 0x3c, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x7d, 0x2f, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x66, 0x6f,
	0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x7d, 0x12, 0x46, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x66, 0x6f, 0x72, 0x65, 0x63,
	0x61, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x7d, 0x12,
	0x3a, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73,
	0x2f, 0x7b, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x7d, 0x2a, 0x09, 0x66, 0x6f, 0x72,
	0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x32, 0x08, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74,
	0x22, 0xbe, 0x02, 0x0a, 0x0c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x50, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x72, 0x0a, 0x12, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x43, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x52, 0x11, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x68, 0x0a, 0x11, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x22, 0x0a, 0x1e,
	0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x48,
	0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x4e, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x50, 0x45, 0x41, 0x4b, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x35, 0x30, 0x10, 0x03, 0x12,
	0x07, 0x0a, 0x03, 0x50, 0x37, 0x35, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x39, 0x39, 0x10,
	0x05, 0x22, 0x87, 0x05, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x66, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70,
	0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x07, 0x69, 0x73, 0x5f,
	0x73, 0x70, 0x6f, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x06, 0x69, 0x73, 0x53, 0x70, 0x6f, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x11, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x10, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x70, 0x75, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x67, 0x70, 0x75, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x70, 0x75, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x70, 0x75, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x56, 0x0a, 0x0d, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x73,
	0x68, 0x61, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x68, 0x61, 0x70, 0x65, 0x52, 0x0c, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x68, 0x61, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x6e, 0x69, 0x74, 0x22, 0x46, 0x0a, 0x0c, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x5a, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x22, 0xc3, 0x05, 0x0a, 0x0f,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x08, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x0a,
	0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x67, 0x0a, 0x17, 0x75, 0x73,
	0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x15, 0x75, 0x73,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x67, 0x0a, 0x13, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x51, 0x0a, 0x0b,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a,
	0x9f, 0x02, 0xea, 0x41, 0x9b, 0x02, 0x0a, 0x2a, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x42, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x12, 0x4c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x7d, 0x12, 0x40, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x66,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2a, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x32, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x83, 0x04, 0x0a, 0x0c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x68, 0x61,
	0x70, 0x65, 0x12, 0x2a, 0x0a, 0x0e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x66, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x0d, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x26,
	0x0a, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x68, 0x61, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x63, 0x70, 0x75, 0x43, 0x6f, 0x72,
	0x65, 0x73, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x70, 0x75, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x67, 0x70, 0x75, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2d, 0x0a, 0x10, 0x67, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x0e, 0x67, 0x70, 0x75, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x09, 0x67, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x67, 0x70, 0x75, 0x43, 0x6f,
	0x72, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x73, 0x64,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x73, 0x64,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0c, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x5f, 0x73, 0x73, 0x64, 0x5f, 0x67, 0x62, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x73, 0x64, 0x47,
	0x62, 0x12, 0x20, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x67, 0x62, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x47, 0x62, 0x12, 0x33, 0x0a, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x73, 0x64,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x73, 0x64, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x5f,
	0x63, 0x70, 0x75, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x43, 0x70, 0x75, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0xdf, 0x05, 0x0a, 0x1b, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x23, 0x0a,
	0x21, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x07, 0x69, 0x73,
	0x5f, 0x73, 0x70, 0x6f, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x06, 0x69, 0x73, 0x53, 0x70, 0x6f, 0x74, 0x12, 0x2a, 0x0a, 0x0e, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0d, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x12, 0x5b, 0x0a, 0x0d, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f,
	0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x68, 0x61, 0x70, 0x65, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x68, 0x61, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x70, 0x75, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x67, 0x70, 0x75, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x70, 0x75, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x74, 0x70, 0x75, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x82, 0x01,
	0x0a, 0x18, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x43, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x16, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x35, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x5b, 0x0a, 0x0d,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xa8, 0x06, 0x0a, 0x16, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x23, 0x0a, 0x21, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x0e, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x0d, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x46, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x12, 0x5b, 0x0a, 0x0d, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x73,
	0x68, 0x61, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x68, 0x61, 0x70, 0x65, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x68, 0x61, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x70, 0x75, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x67, 0x70, 0x75, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x70, 0x75, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x74, 0x70, 0x75, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x76, 0x0a, 0x13,
	0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x12, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x77, 0x0a, 0x12, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x43, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x11, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x35, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x5b, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0xdd, 0x07, 0x0a, 0x1e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x0e, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x0d, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x46,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x5d, 0x0a, 0x0d, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x68, 0x61, 0x70, 0x65, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53,
	0x68, 0x61, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x08, 0x67, 0x70, 0x75, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x07, 0x67,
	0x70, 0x75, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x23, 0x0a, 0x21,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x68, 0x0a, 0x0e, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x33, 0x0a, 0x13, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x11, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x18, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x16, 0x75, 0x73, 0x61, 0x67, 0x65, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x71, 0x0a,
	0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x4d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x35, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x5b, 0x0a, 0x0d, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x5f, 0x0a, 0x09, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c,
	0x4f, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x5f, 0x50, 0x52,
	0x4f, 0x4a, 0x45, 0x43, 0x54, 0x53, 0x10, 0x02, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x22, 0xec, 0x01, 0x0a, 0x0c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5e, 0x0a, 0x0f, 0x67, 0x63, 0x73, 0x5f, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x2e, 0x47, 0x63, 0x73, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x67, 0x63, 0x73, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6d, 0x0a, 0x14, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x13, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x7c, 0x0a, 0x0e, 0x47, 0x63, 0x73, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x1b, 0x0a, 0x06,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x22, 0xf5, 0x05, 0x0a, 0x13, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x07, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x6f, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65,
	0x79, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4b, 0x65, 0x79, 0x12, 0x7b, 0x0a, 0x11, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x64, 0x69,
	0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x49, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x44,
	0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x10, 0x77, 0x72, 0x69, 0x74, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x7e, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x2e, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69,
	0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x11,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x26, 0x0a, 0x0c, 0x67, 0x63, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x67, 0x63,
	0x73, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3f, 0x0a, 0x0c, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x41, 0x52,
	0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x01, 0x22, 0x6c, 0x0a, 0x10, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x0a, 0x1d, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x10, 0x0a, 0x0c, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x45, 0x4e,
	0x44, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x54, 0x52, 0x55,
	0x4e, 0x43, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x57, 0x52, 0x49, 0x54, 0x45,
	0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x03, 0x22, 0x5f, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a,
	0x1e, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x46, 0x5f, 0x4e,
	0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x5f, 0x4e, 0x45, 0x56, 0x45, 0x52, 0x10, 0x02, 0x22, 0x91, 0x01, 0x0a, 0x11, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x3a, 0x0a,
	0x1c, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x0a, 0x17, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x3d, 0x0a, 0x1f, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32,
	0xc7, 0x12, 0x0a, 0x0c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0xed, 0x02, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd2, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0xcb, 0x01, 0x3a, 0x01, 0x2a, 0x5a, 0x46, 0x3a, 0x01, 0x2a, 0x22, 0x41, 0x2f,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x3a, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5a, 0x40, 0x3a, 0x01, 0x2a, 0x22, 0x3b, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x7b,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x2a,
	0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x3a, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x22, 0x3c, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x7b, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x3a, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x12, 0xcf, 0x02, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61,
	0x73, 0x74, 0x73, 0x12, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46,
	0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x6f, 0x72, 0x65, 0x63,
	0x61, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc3, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0xbc, 0x01, 0x3a, 0x01, 0x2a, 0x5a, 0x41, 0x3a, 0x01, 0x2a, 0x22, 0x3c,
	0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x66, 0x6f, 0x72,
	0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x3a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5a, 0x3b, 0x3a, 0x01,
	0x2a, 0x22, 0x36, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x3d, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61,
	0x73, 0x74, 0x73, 0x3a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x37, 0x2f, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x2a, 0x7d, 0x2f, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x3a, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x12, 0xe1, 0x02, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70,
	0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xcc, 0x01, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xbc, 0x01, 0x5a, 0x41, 0x12, 0x3f, 0x2f, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5a, 0x3b, 0x12,
	0x39, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x3d, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3a, 0x2f, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x2a, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x3a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x83, 0x03, 0x0a, 0x14, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72,
	0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x89, 0x02, 0xca, 0x41, 0x31, 0x0a, 0x1c, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x11, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xce, 0x01, 0x3a, 0x01,
	0x2a, 0x5a, 0x47, 0x3a, 0x01, 0x2a, 0x22, 0x42, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f,
	0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x3a, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5a, 0x41, 0x3a, 0x01, 0x2a, 0x22,
	0x3c, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x3d, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x3a, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x3d, 0x2f,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x3a, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0xe5, 0x02, 0x0a,
	0x0f, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73,
	0x12, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72,
	0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf5, 0x01, 0xca,
	0x41, 0x2c, 0x0a, 0x17, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61,
	0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x11, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0xbf, 0x01, 0x3a, 0x01, 0x2a, 0x5a, 0x42, 0x3a, 0x01, 0x2a, 0x22, 0x3d, 0x2f,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x66, 0x6f, 0x72, 0x65,
	0x63, 0x61, 0x73, 0x74, 0x73, 0x3a, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5a, 0x3c, 0x3a, 0x01,
	0x2a, 0x22, 0x37, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x3d, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61,
	0x73, 0x74, 0x73, 0x3a, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x38, 0x2f, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x2a, 0x7d, 0x2f, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x73, 0x3a, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x95, 0x03, 0x0a, 0x17, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x43, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c,
	0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x95, 0x02, 0xca, 0x41, 0x34, 0x0a, 0x1f, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x11, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0xd7, 0x01, 0x3a, 0x01, 0x2a, 0x5a, 0x4a, 0x3a, 0x01, 0x2a, 0x22, 0x45, 0x2f,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x73, 0x61, 0x67, 0x65, 0x3a, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x5a, 0x44, 0x3a, 0x01, 0x2a, 0x22, 0x3f, 0x2f, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x66, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a,
	0x7d, 0x2f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x3a, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x40, 0x2f, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x2a, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x3a, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x8a, 0x01, 0xca,
	0x41, 0x1e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0xd2, 0x41, 0x66, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74,
	0x68, 0x2f, 0x64, 0x65, 0x76, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x66, 0x75, 0x6c,
	0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x86, 0x02, 0x0a, 0x27, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x42, 0x11, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x51, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f,
	0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2f,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x70, 0x62, 0x3b, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x70, 0x62, 0xaa, 0x02, 0x23,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x43, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x56, 0x31, 0x42,
	0x65, 0x74, 0x61, 0xca, 0x02, 0x23, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5c, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x5c, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0xea, 0x02, 0x26, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x3a, 0x3a, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x43, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_capacityplanner_v1beta_usage_service_proto_rawDescOnce sync.Once
	file_google_cloud_capacityplanner_v1beta_usage_service_proto_rawDescData = file_google_cloud_capacityplanner_v1beta_usage_service_proto_rawDesc
)

func file_google_cloud_capacityplanner_v1beta_usage_service_proto_rawDescGZIP() []byte {
	file_google_cloud_capacityplanner_v1beta_usage_service_proto_rawDescOnce.Do(func() {
		file_google_cloud_capacityplanner_v1beta_usage_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_capacityplanner_v1beta_usage_service_proto_rawDescData)
	})
	return file_google_cloud_capacityplanner_v1beta_usage_service_proto_rawDescData
}

var file_google_cloud_capacityplanner_v1beta_usage_service_proto_enumTypes = make([]protoimpl.EnumInfo, 13)
var file_google_cloud_capacityplanner_v1beta_usage_service_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_google_cloud_capacityplanner_v1beta_usage_service_proto_goTypes = []any{
	(QueryReservationsRequest_ReservationType)(0),      // 0: google.cloud.capacityplanner.v1beta.QueryReservationsRequest.ReservationType
	(QueryReservationsRequest_ShareType)(0),            // 1: google.cloud.capacityplanner.v1beta.QueryReservationsRequest.ShareType
	(QueryReservationsRequest_OwnershipType)(0),        // 2: google.cloud.capacityplanner.v1beta.QueryReservationsRequest.OwnershipType
	(QueryReservationsRequest_ReservationDataLevel)(0), // 3: google.cloud.capacityplanner.v1beta.QueryReservationsRequest.ReservationDataLevel
	(Forecast_ForecastType)(0),                         // 4: google.cloud.capacityplanner.v1beta.Forecast.ForecastType
	(Forecast_Bounds)(0),                               // 5: google.cloud.capacityplanner.v1beta.Forecast.Bounds
	(Forecast_PredictionInterval)(0),                   // 6: google.cloud.capacityplanner.v1beta.Forecast.PredictionInterval
	(UsageHistory_AggregationMethod)(0),                // 7: google.cloud.capacityplanner.v1beta.UsageHistory.AggregationMethod
	(TimeSeries_LocationType)(0),                       // 8: google.cloud.capacityplanner.v1beta.TimeSeries.LocationType
	(ExportReservationsUsageRequest_ShareType)(0),      // 9: google.cloud.capacityplanner.v1beta.ExportReservationsUsageRequest.ShareType
	(BigQueryDestination_PartitionKey)(0),              // 10: google.cloud.capacityplanner.v1beta.BigQueryDestination.PartitionKey
	(BigQueryDestination_WriteDisposition)(0),          // 11: google.cloud.capacityplanner.v1beta.BigQueryDestination.WriteDisposition
	(BigQueryDestination_CreateDisposition)(0),         // 12: google.cloud.capacityplanner.v1beta.BigQueryDestination.CreateDisposition
	(*QueryUsageHistoriesRequest)(nil),                 // 13: google.cloud.capacityplanner.v1beta.QueryUsageHistoriesRequest
	(*QueryUsageHistoriesResponse)(nil),                // 14: google.cloud.capacityplanner.v1beta.QueryUsageHistoriesResponse
	(*QueryForecastsRequest)(nil),                      // 15: google.cloud.capacityplanner.v1beta.QueryForecastsRequest
	(*QueryForecastsResponse)(nil),                     // 16: google.cloud.capacityplanner.v1beta.QueryForecastsResponse
	(*QueryReservationsRequest)(nil),                   // 17: google.cloud.capacityplanner.v1beta.QueryReservationsRequest
	(*QueryReservationsResponse)(nil),                  // 18: google.cloud.capacityplanner.v1beta.QueryReservationsResponse
	(*Point)(nil),                                      // 19: google.cloud.capacityplanner.v1beta.Point
	(*Forecast)(nil),                                   // 20: google.cloud.capacityplanner.v1beta.Forecast
	(*UsageHistory)(nil),                               // 21: google.cloud.capacityplanner.v1beta.UsageHistory
	(*TimeSeries)(nil),                                 // 22: google.cloud.capacityplanner.v1beta.TimeSeries
	(*ReservationData)(nil),                            // 23: google.cloud.capacityplanner.v1beta.ReservationData
	(*MachineShape)(nil),                               // 24: google.cloud.capacityplanner.v1beta.MachineShape
	(*ExportUsageHistoriesRequest)(nil),                // 25: google.cloud.capacityplanner.v1beta.ExportUsageHistoriesRequest
	(*ExportForecastsRequest)(nil),                     // 26: google.cloud.capacityplanner.v1beta.ExportForecastsRequest
	(*ExportReservationsUsageRequest)(nil),             // 27: google.cloud.capacityplanner.v1beta.ExportReservationsUsageRequest
	(*OutputConfig)(nil),                               // 28: google.cloud.capacityplanner.v1beta.OutputConfig
	(*GcsDestination)(nil),                             // 29: google.cloud.capacityplanner.v1beta.GcsDestination
	(*BigQueryDestination)(nil),                        // 30: google.cloud.capacityplanner.v1beta.BigQueryDestination
	(*OperationMetadata)(nil),                          // 31: google.cloud.capacityplanner.v1beta.OperationMetadata
	(*ExportUsageHistoriesResponse)(nil),               // 32: google.cloud.capacityplanner.v1beta.ExportUsageHistoriesResponse
	(*ExportForecastsResponse)(nil),                    // 33: google.cloud.capacityplanner.v1beta.ExportForecastsResponse
	(*ExportReservationsUsageResponse)(nil),            // 34: google.cloud.capacityplanner.v1beta.ExportReservationsUsageResponse
	(*date.Date)(nil),                                  // 35: google.type.Date
	(*timestamppb.Timestamp)(nil),                      // 36: google.protobuf.Timestamp
	(*FutureReservation)(nil),                          // 37: google.cloud.capacityplanner.v1beta.FutureReservation
	(*Allocation)(nil),                                 // 38: google.cloud.capacityplanner.v1beta.Allocation
	(*longrunningpb.Operation)(nil),                    // 39: google.longrunning.Operation
}
var file_google_cloud_capacityplanner_v1beta_usage_service_proto_depIdxs = []int32{
	8,  // 0: google.cloud.capacityplanner.v1beta.QueryUsageHistoriesRequest.location_level:type_name -> google.cloud.capacityplanner.v1beta.TimeSeries.LocationType
	24, // 1: google.cloud.capacityplanner.v1beta.QueryUsageHistoriesRequest.machine_shape:type_name -> google.cloud.capacityplanner.v1beta.MachineShape
	7,  // 2: google.cloud.capacityplanner.v1beta.QueryUsageHistoriesRequest.usage_aggregation_method:type_name -> google.cloud.capacityplanner.v1beta.UsageHistory.AggregationMethod
	35, // 3: google.cloud.capacityplanner.v1beta.QueryUsageHistoriesRequest.start_date:type_name -> google.type.Date
	35, // 4: google.cloud.capacityplanner.v1beta.QueryUsageHistoriesRequest.end_date:type_name -> google.type.Date
	21, // 5: google.cloud.capacityplanner.v1beta.QueryUsageHistoriesResponse.usage_histories:type_name -> google.cloud.capacityplanner.v1beta.UsageHistory
	24, // 6: google.cloud.capacityplanner.v1beta.QueryForecastsRequest.machine_shape:type_name -> google.cloud.capacityplanner.v1beta.MachineShape
	4,  // 7: google.cloud.capacityplanner.v1beta.QueryForecastsRequest.forecast_type:type_name -> google.cloud.capacityplanner.v1beta.Forecast.ForecastType
	6,  // 8: google.cloud.capacityplanner.v1beta.QueryForecastsRequest.prediction_interval:type_name -> google.cloud.capacityplanner.v1beta.Forecast.PredictionInterval
	7,  // 9: google.cloud.capacityplanner.v1beta.QueryForecastsRequest.aggregation_method:type_name -> google.cloud.capacityplanner.v1beta.UsageHistory.AggregationMethod
	20, // 10: google.cloud.capacityplanner.v1beta.QueryForecastsResponse.forecasts:type_name -> google.cloud.capacityplanner.v1beta.Forecast
	8,  // 11: google.cloud.capacityplanner.v1beta.QueryReservationsRequest.location_level:type_name -> google.cloud.capacityplanner.v1beta.TimeSeries.LocationType
	24, // 12: google.cloud.capacityplanner.v1beta.QueryReservationsRequest.machine_shape:type_name -> google.cloud.capacityplanner.v1beta.MachineShape
	0,  // 13: google.cloud.capacityplanner.v1beta.QueryReservationsRequest.reservation_type:type_name -> google.cloud.capacityplanner.v1beta.QueryReservationsRequest.ReservationType
	1,  // 14: google.cloud.capacityplanner.v1beta.QueryReservationsRequest.share_type:type_name -> google.cloud.capacityplanner.v1beta.QueryReservationsRequest.ShareType
	2,  // 15: google.cloud.capacityplanner.v1beta.QueryReservationsRequest.ownership_type:type_name -> google.cloud.capacityplanner.v1beta.QueryReservationsRequest.OwnershipType
	3,  // 16: google.cloud.capacityplanner.v1beta.QueryReservationsRequest.reservation_data_level:type_name -> google.cloud.capacityplanner.v1beta.QueryReservationsRequest.ReservationDataLevel
	7,  // 17: google.cloud.capacityplanner.v1beta.QueryReservationsRequest.aggregation_method:type_name -> google.cloud.capacityplanner.v1beta.UsageHistory.AggregationMethod
	35, // 18: google.cloud.capacityplanner.v1beta.QueryReservationsRequest.start_date:type_name -> google.type.Date
	35, // 19: google.cloud.capacityplanner.v1beta.QueryReservationsRequest.end_date:type_name -> google.type.Date
	23, // 20: google.cloud.capacityplanner.v1beta.QueryReservationsResponse.reservations:type_name -> google.cloud.capacityplanner.v1beta.ReservationData
	36, // 21: google.cloud.capacityplanner.v1beta.Point.event_time:type_name -> google.protobuf.Timestamp
	22, // 22: google.cloud.capacityplanner.v1beta.Forecast.time_series:type_name -> google.cloud.capacityplanner.v1beta.TimeSeries
	4,  // 23: google.cloud.capacityplanner.v1beta.Forecast.forecast_type:type_name -> google.cloud.capacityplanner.v1beta.Forecast.ForecastType
	5,  // 24: google.cloud.capacityplanner.v1beta.Forecast.bounds:type_name -> google.cloud.capacityplanner.v1beta.Forecast.Bounds
	6,  // 25: google.cloud.capacityplanner.v1beta.Forecast.prediction_interval:type_name -> google.cloud.capacityplanner.v1beta.Forecast.PredictionInterval
	7,  // 26: google.cloud.capacityplanner.v1beta.Forecast.aggregation_method:type_name -> google.cloud.capacityplanner.v1beta.UsageHistory.AggregationMethod
	22, // 27: google.cloud.capacityplanner.v1beta.UsageHistory.time_series:type_name -> google.cloud.capacityplanner.v1beta.TimeSeries
	7,  // 28: google.cloud.capacityplanner.v1beta.UsageHistory.aggregation_method:type_name -> google.cloud.capacityplanner.v1beta.UsageHistory.AggregationMethod
	8,  // 29: google.cloud.capacityplanner.v1beta.TimeSeries.location_type:type_name -> google.cloud.capacityplanner.v1beta.TimeSeries.LocationType
	24, // 30: google.cloud.capacityplanner.v1beta.TimeSeries.machine_shape:type_name -> google.cloud.capacityplanner.v1beta.MachineShape
	19, // 31: google.cloud.capacityplanner.v1beta.TimeSeries.points:type_name -> google.cloud.capacityplanner.v1beta.Point
	22, // 32: google.cloud.capacityplanner.v1beta.ReservationData.time_series:type_name -> google.cloud.capacityplanner.v1beta.TimeSeries
	22, // 33: google.cloud.capacityplanner.v1beta.ReservationData.used_reservation_values:type_name -> google.cloud.capacityplanner.v1beta.TimeSeries
	37, // 34: google.cloud.capacityplanner.v1beta.ReservationData.future_reservations:type_name -> google.cloud.capacityplanner.v1beta.FutureReservation
	38, // 35: google.cloud.capacityplanner.v1beta.ReservationData.allocations:type_name -> google.cloud.capacityplanner.v1beta.Allocation
	24, // 36: google.cloud.capacityplanner.v1beta.ExportUsageHistoriesRequest.machine_shape:type_name -> google.cloud.capacityplanner.v1beta.MachineShape
	7,  // 37: google.cloud.capacityplanner.v1beta.ExportUsageHistoriesRequest.usage_aggregation_method:type_name -> google.cloud.capacityplanner.v1beta.UsageHistory.AggregationMethod
	35, // 38: google.cloud.capacityplanner.v1beta.ExportUsageHistoriesRequest.start_date:type_name -> google.type.Date
	35, // 39: google.cloud.capacityplanner.v1beta.ExportUsageHistoriesRequest.end_date:type_name -> google.type.Date
	28, // 40: google.cloud.capacityplanner.v1beta.ExportUsageHistoriesRequest.output_config:type_name -> google.cloud.capacityplanner.v1beta.OutputConfig
	24, // 41: google.cloud.capacityplanner.v1beta.ExportForecastsRequest.machine_shape:type_name -> google.cloud.capacityplanner.v1beta.MachineShape
	6,  // 42: google.cloud.capacityplanner.v1beta.ExportForecastsRequest.prediction_interval:type_name -> google.cloud.capacityplanner.v1beta.Forecast.PredictionInterval
	7,  // 43: google.cloud.capacityplanner.v1beta.ExportForecastsRequest.aggregation_method:type_name -> google.cloud.capacityplanner.v1beta.UsageHistory.AggregationMethod
	35, // 44: google.cloud.capacityplanner.v1beta.ExportForecastsRequest.start_date:type_name -> google.type.Date
	35, // 45: google.cloud.capacityplanner.v1beta.ExportForecastsRequest.end_date:type_name -> google.type.Date
	28, // 46: google.cloud.capacityplanner.v1beta.ExportForecastsRequest.output_config:type_name -> google.cloud.capacityplanner.v1beta.OutputConfig
	24, // 47: google.cloud.capacityplanner.v1beta.ExportReservationsUsageRequest.machine_shape:type_name -> google.cloud.capacityplanner.v1beta.MachineShape
	8,  // 48: google.cloud.capacityplanner.v1beta.ExportReservationsUsageRequest.location_level:type_name -> google.cloud.capacityplanner.v1beta.TimeSeries.LocationType
	7,  // 49: google.cloud.capacityplanner.v1beta.ExportReservationsUsageRequest.usage_aggregation_method:type_name -> google.cloud.capacityplanner.v1beta.UsageHistory.AggregationMethod
	9,  // 50: google.cloud.capacityplanner.v1beta.ExportReservationsUsageRequest.share_type:type_name -> google.cloud.capacityplanner.v1beta.ExportReservationsUsageRequest.ShareType
	35, // 51: google.cloud.capacityplanner.v1beta.ExportReservationsUsageRequest.start_date:type_name -> google.type.Date
	35, // 52: google.cloud.capacityplanner.v1beta.ExportReservationsUsageRequest.end_date:type_name -> google.type.Date
	28, // 53: google.cloud.capacityplanner.v1beta.ExportReservationsUsageRequest.output_config:type_name -> google.cloud.capacityplanner.v1beta.OutputConfig
	29, // 54: google.cloud.capacityplanner.v1beta.OutputConfig.gcs_destination:type_name -> google.cloud.capacityplanner.v1beta.GcsDestination
	30, // 55: google.cloud.capacityplanner.v1beta.OutputConfig.bigquery_destination:type_name -> google.cloud.capacityplanner.v1beta.BigQueryDestination
	10, // 56: google.cloud.capacityplanner.v1beta.BigQueryDestination.partition_key:type_name -> google.cloud.capacityplanner.v1beta.BigQueryDestination.PartitionKey
	11, // 57: google.cloud.capacityplanner.v1beta.BigQueryDestination.write_disposition:type_name -> google.cloud.capacityplanner.v1beta.BigQueryDestination.WriteDisposition
	12, // 58: google.cloud.capacityplanner.v1beta.BigQueryDestination.create_disposition:type_name -> google.cloud.capacityplanner.v1beta.BigQueryDestination.CreateDisposition
	36, // 59: google.cloud.capacityplanner.v1beta.OperationMetadata.create_time:type_name -> google.protobuf.Timestamp
	36, // 60: google.cloud.capacityplanner.v1beta.OperationMetadata.end_time:type_name -> google.protobuf.Timestamp
	13, // 61: google.cloud.capacityplanner.v1beta.UsageService.QueryUsageHistories:input_type -> google.cloud.capacityplanner.v1beta.QueryUsageHistoriesRequest
	15, // 62: google.cloud.capacityplanner.v1beta.UsageService.QueryForecasts:input_type -> google.cloud.capacityplanner.v1beta.QueryForecastsRequest
	17, // 63: google.cloud.capacityplanner.v1beta.UsageService.QueryReservations:input_type -> google.cloud.capacityplanner.v1beta.QueryReservationsRequest
	25, // 64: google.cloud.capacityplanner.v1beta.UsageService.ExportUsageHistories:input_type -> google.cloud.capacityplanner.v1beta.ExportUsageHistoriesRequest
	26, // 65: google.cloud.capacityplanner.v1beta.UsageService.ExportForecasts:input_type -> google.cloud.capacityplanner.v1beta.ExportForecastsRequest
	27, // 66: google.cloud.capacityplanner.v1beta.UsageService.ExportReservationsUsage:input_type -> google.cloud.capacityplanner.v1beta.ExportReservationsUsageRequest
	14, // 67: google.cloud.capacityplanner.v1beta.UsageService.QueryUsageHistories:output_type -> google.cloud.capacityplanner.v1beta.QueryUsageHistoriesResponse
	16, // 68: google.cloud.capacityplanner.v1beta.UsageService.QueryForecasts:output_type -> google.cloud.capacityplanner.v1beta.QueryForecastsResponse
	18, // 69: google.cloud.capacityplanner.v1beta.UsageService.QueryReservations:output_type -> google.cloud.capacityplanner.v1beta.QueryReservationsResponse
	39, // 70: google.cloud.capacityplanner.v1beta.UsageService.ExportUsageHistories:output_type -> google.longrunning.Operation
	39, // 71: google.cloud.capacityplanner.v1beta.UsageService.ExportForecasts:output_type -> google.longrunning.Operation
	39, // 72: google.cloud.capacityplanner.v1beta.UsageService.ExportReservationsUsage:output_type -> google.longrunning.Operation
	67, // [67:73] is the sub-list for method output_type
	61, // [61:67] is the sub-list for method input_type
	61, // [61:61] is the sub-list for extension type_name
	61, // [61:61] is the sub-list for extension extendee
	0,  // [0:61] is the sub-list for field type_name
}

func init() { file_google_cloud_capacityplanner_v1beta_usage_service_proto_init() }
func file_google_cloud_capacityplanner_v1beta_usage_service_proto_init() {
	if File_google_cloud_capacityplanner_v1beta_usage_service_proto != nil {
		return
	}
	file_google_cloud_capacityplanner_v1beta_allocation_proto_init()
	file_google_cloud_capacityplanner_v1beta_future_reservation_proto_init()
	file_google_cloud_capacityplanner_v1beta_usage_service_proto_msgTypes[14].OneofWrappers = []any{
		(*ExportReservationsUsageRequest_MachineFamily)(nil),
		(*ExportReservationsUsageRequest_MachineShape)(nil),
		(*ExportReservationsUsageRequest_GpuType)(nil),
	}
	file_google_cloud_capacityplanner_v1beta_usage_service_proto_msgTypes[15].OneofWrappers = []any{
		(*OutputConfig_GcsDestination)(nil),
		(*OutputConfig_BigqueryDestination)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_capacityplanner_v1beta_usage_service_proto_rawDesc,
			NumEnums:      13,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_google_cloud_capacityplanner_v1beta_usage_service_proto_goTypes,
		DependencyIndexes: file_google_cloud_capacityplanner_v1beta_usage_service_proto_depIdxs,
		EnumInfos:         file_google_cloud_capacityplanner_v1beta_usage_service_proto_enumTypes,
		MessageInfos:      file_google_cloud_capacityplanner_v1beta_usage_service_proto_msgTypes,
	}.Build()
	File_google_cloud_capacityplanner_v1beta_usage_service_proto = out.File
	file_google_cloud_capacityplanner_v1beta_usage_service_proto_rawDesc = nil
	file_google_cloud_capacityplanner_v1beta_usage_service_proto_goTypes = nil
	file_google_cloud_capacityplanner_v1beta_usage_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UsageServiceClient is the client API for UsageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UsageServiceClient interface {
	// Returns a list of the usage histories that are in the parent parameter
	// and match your specified filters.
	QueryUsageHistories(ctx context.Context, in *QueryUsageHistoriesRequest, opts ...grpc.CallOption) (*QueryUsageHistoriesResponse, error)
	// Returns a list of the forecasts that are in the parent parameter
	// and match your specified filters.
	QueryForecasts(ctx context.Context, in *QueryForecastsRequest, opts ...grpc.CallOption) (*QueryForecastsResponse, error)
	// Returns a list of the reservations that are in the parent parameter
	// and match your specified filters.
	QueryReservations(ctx context.Context, in *QueryReservationsRequest, opts ...grpc.CallOption) (*QueryReservationsResponse, error)
	// Exports historical usage data requested by user into either an existing
	// Cloud Storage bucket or a BigQuery table.
	ExportUsageHistories(ctx context.Context, in *ExportUsageHistoriesRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Exports forecasted usage data requested by user into either an existing
	// Cloud Storage bucket or a BigQuery table.
	ExportForecasts(ctx context.Context, in *ExportForecastsRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Exports reservations usage data requested by user into either an existing
	// Cloud Storage bucket or a new/existing BigQuery table.
	ExportReservationsUsage(ctx context.Context, in *ExportReservationsUsageRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type usageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUsageServiceClient(cc grpc.ClientConnInterface) UsageServiceClient {
	return &usageServiceClient{cc}
}

func (c *usageServiceClient) QueryUsageHistories(ctx context.Context, in *QueryUsageHistoriesRequest, opts ...grpc.CallOption) (*QueryUsageHistoriesResponse, error) {
	out := new(QueryUsageHistoriesResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.capacityplanner.v1beta.UsageService/QueryUsageHistories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usageServiceClient) QueryForecasts(ctx context.Context, in *QueryForecastsRequest, opts ...grpc.CallOption) (*QueryForecastsResponse, error) {
	out := new(QueryForecastsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.capacityplanner.v1beta.UsageService/QueryForecasts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usageServiceClient) QueryReservations(ctx context.Context, in *QueryReservationsRequest, opts ...grpc.CallOption) (*QueryReservationsResponse, error) {
	out := new(QueryReservationsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.capacityplanner.v1beta.UsageService/QueryReservations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usageServiceClient) ExportUsageHistories(ctx context.Context, in *ExportUsageHistoriesRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.capacityplanner.v1beta.UsageService/ExportUsageHistories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usageServiceClient) ExportForecasts(ctx context.Context, in *ExportForecastsRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.capacityplanner.v1beta.UsageService/ExportForecasts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usageServiceClient) ExportReservationsUsage(ctx context.Context, in *ExportReservationsUsageRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.capacityplanner.v1beta.UsageService/ExportReservationsUsage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsageServiceServer is the server API for UsageService service.
type UsageServiceServer interface {
	// Returns a list of the usage histories that are in the parent parameter
	// and match your specified filters.
	QueryUsageHistories(context.Context, *QueryUsageHistoriesRequest) (*QueryUsageHistoriesResponse, error)
	// Returns a list of the forecasts that are in the parent parameter
	// and match your specified filters.
	QueryForecasts(context.Context, *QueryForecastsRequest) (*QueryForecastsResponse, error)
	// Returns a list of the reservations that are in the parent parameter
	// and match your specified filters.
	QueryReservations(context.Context, *QueryReservationsRequest) (*QueryReservationsResponse, error)
	// Exports historical usage data requested by user into either an existing
	// Cloud Storage bucket or a BigQuery table.
	ExportUsageHistories(context.Context, *ExportUsageHistoriesRequest) (*longrunningpb.Operation, error)
	// Exports forecasted usage data requested by user into either an existing
	// Cloud Storage bucket or a BigQuery table.
	ExportForecasts(context.Context, *ExportForecastsRequest) (*longrunningpb.Operation, error)
	// Exports reservations usage data requested by user into either an existing
	// Cloud Storage bucket or a new/existing BigQuery table.
	ExportReservationsUsage(context.Context, *ExportReservationsUsageRequest) (*longrunningpb.Operation, error)
}

// UnimplementedUsageServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUsageServiceServer struct {
}

func (*UnimplementedUsageServiceServer) QueryUsageHistories(context.Context, *QueryUsageHistoriesRequest) (*QueryUsageHistoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUsageHistories not implemented")
}
func (*UnimplementedUsageServiceServer) QueryForecasts(context.Context, *QueryForecastsRequest) (*QueryForecastsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryForecasts not implemented")
}
func (*UnimplementedUsageServiceServer) QueryReservations(context.Context, *QueryReservationsRequest) (*QueryReservationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryReservations not implemented")
}
func (*UnimplementedUsageServiceServer) ExportUsageHistories(context.Context, *ExportUsageHistoriesRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportUsageHistories not implemented")
}
func (*UnimplementedUsageServiceServer) ExportForecasts(context.Context, *ExportForecastsRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportForecasts not implemented")
}
func (*UnimplementedUsageServiceServer) ExportReservationsUsage(context.Context, *ExportReservationsUsageRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportReservationsUsage not implemented")
}

func RegisterUsageServiceServer(s *grpc.Server, srv UsageServiceServer) {
	s.RegisterService(&_UsageService_serviceDesc, srv)
}

func _UsageService_QueryUsageHistories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUsageHistoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsageServiceServer).QueryUsageHistories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.capacityplanner.v1beta.UsageService/QueryUsageHistories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsageServiceServer).QueryUsageHistories(ctx, req.(*QueryUsageHistoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsageService_QueryForecasts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryForecastsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsageServiceServer).QueryForecasts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.capacityplanner.v1beta.UsageService/QueryForecasts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsageServiceServer).QueryForecasts(ctx, req.(*QueryForecastsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsageService_QueryReservations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReservationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsageServiceServer).QueryReservations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.capacityplanner.v1beta.UsageService/QueryReservations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsageServiceServer).QueryReservations(ctx, req.(*QueryReservationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsageService_ExportUsageHistories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportUsageHistoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsageServiceServer).ExportUsageHistories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.capacityplanner.v1beta.UsageService/ExportUsageHistories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsageServiceServer).ExportUsageHistories(ctx, req.(*ExportUsageHistoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsageService_ExportForecasts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportForecastsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsageServiceServer).ExportForecasts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.capacityplanner.v1beta.UsageService/ExportForecasts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsageServiceServer).ExportForecasts(ctx, req.(*ExportForecastsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsageService_ExportReservationsUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportReservationsUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsageServiceServer).ExportReservationsUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.capacityplanner.v1beta.UsageService/ExportReservationsUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsageServiceServer).ExportReservationsUsage(ctx, req.(*ExportReservationsUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UsageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.capacityplanner.v1beta.UsageService",
	HandlerType: (*UsageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryUsageHistories",
			Handler:    _UsageService_QueryUsageHistories_Handler,
		},
		{
			MethodName: "QueryForecasts",
			Handler:    _UsageService_QueryForecasts_Handler,
		},
		{
			MethodName: "QueryReservations",
			Handler:    _UsageService_QueryReservations_Handler,
		},
		{
			MethodName: "ExportUsageHistories",
			Handler:    _UsageService_ExportUsageHistories_Handler,
		},
		{
			MethodName: "ExportForecasts",
			Handler:    _UsageService_ExportForecasts_Handler,
		},
		{
			MethodName: "ExportReservationsUsage",
			Handler:    _UsageService_ExportReservationsUsage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/capacityplanner/v1beta/usage_service.proto",
}
