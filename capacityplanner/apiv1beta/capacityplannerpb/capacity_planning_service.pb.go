// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.7
// source: google/cloud/capacityplanner/v1beta/capacity_planning_service.proto

package capacityplannerpb

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The state of a capacity demand.
type State int32

const (
	// The state is unspecified.
	State_STATE_UNSPECIFIED State = 0
	// The demand is pending review.
	State_PENDING_REVIEW State = 1
	// The demand is in review.
	State_IN_REVIEW State = 3
	// The demand is provisionally approved.
	State_APPROVED_PROVISIONAL State = 8
	// The demand is obsolete.
	State_OBSOLETE State = 5
	// The demand cannot be fulfilled.
	State_CANNOT_BE_FULFILLED State = 7
	// The demand is on hold, contact sales.
	State_ON_HOLD_CONTACT_SALES State = 9
	// The demand is in fulfillment.
	State_IN_FULFILLMENT State = 10
)

// Enum value maps for State.
var (
	State_name = map[int32]string{
		0:  "STATE_UNSPECIFIED",
		1:  "PENDING_REVIEW",
		3:  "IN_REVIEW",
		8:  "APPROVED_PROVISIONAL",
		5:  "OBSOLETE",
		7:  "CANNOT_BE_FULFILLED",
		9:  "ON_HOLD_CONTACT_SALES",
		10: "IN_FULFILLMENT",
	}
	State_value = map[string]int32{
		"STATE_UNSPECIFIED":     0,
		"PENDING_REVIEW":        1,
		"IN_REVIEW":             3,
		"APPROVED_PROVISIONAL":  8,
		"OBSOLETE":              5,
		"CANNOT_BE_FULFILLED":   7,
		"ON_HOLD_CONTACT_SALES": 9,
		"IN_FULFILLMENT":        10,
	}
)

func (x State) Enum() *State {
	p := new(State)
	*p = x
	return p
}

func (x State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (State) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_enumTypes[0].Descriptor()
}

func (State) Type() protoreflect.EnumType {
	return &file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_enumTypes[0]
}

func (x State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use State.Descriptor instead.
func (State) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_rawDescGZIP(), []int{0}
}

// CapacityType is the type of the capacity plan.
type CapacityType int32

const (
	// Default value.
	CapacityType_CAPACITY_TYPE_UNKNOWN CapacityType = 0
	// Latest inorganic data stored in horizon DB that is in draft state.
	CapacityType_CAPACITY_TYPE_INORGANIC_DRAFT CapacityType = 1
	// Latest inorganic data stored in horizon DB that are pending i.e. submitted
	// or assessment.
	CapacityType_CAPACITY_TYPE_INORGANIC_PENDING CapacityType = 2
	// Latest inorganic data stored in horizon DB that has been approved.
	CapacityType_CAPACITY_TYPE_INORGANIC_APPROVED CapacityType = 3
)

// Enum value maps for CapacityType.
var (
	CapacityType_name = map[int32]string{
		0: "CAPACITY_TYPE_UNKNOWN",
		1: "CAPACITY_TYPE_INORGANIC_DRAFT",
		2: "CAPACITY_TYPE_INORGANIC_PENDING",
		3: "CAPACITY_TYPE_INORGANIC_APPROVED",
	}
	CapacityType_value = map[string]int32{
		"CAPACITY_TYPE_UNKNOWN":            0,
		"CAPACITY_TYPE_INORGANIC_DRAFT":    1,
		"CAPACITY_TYPE_INORGANIC_PENDING":  2,
		"CAPACITY_TYPE_INORGANIC_APPROVED": 3,
	}
)

func (x CapacityType) Enum() *CapacityType {
	p := new(CapacityType)
	*p = x
	return p
}

func (x CapacityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CapacityType) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_enumTypes[1].Descriptor()
}

func (CapacityType) Type() protoreflect.EnumType {
	return &file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_enumTypes[1]
}

func (x CapacityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CapacityType.Descriptor instead.
func (CapacityType) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_rawDescGZIP(), []int{1}
}

// Request for getting a capacity plan.
type GetCapacityPlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the capacity plan to retrieve.
	// Format: projects/{project}/capacityPlans/{capacity_plan}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetCapacityPlanRequest) Reset() {
	*x = GetCapacityPlanRequest{}
	mi := &file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCapacityPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCapacityPlanRequest) ProtoMessage() {}

func (x *GetCapacityPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCapacityPlanRequest.ProtoReflect.Descriptor instead.
func (*GetCapacityPlanRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetCapacityPlanRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Request for querying capacity plans.
type QueryCapacityPlansRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent resource container.
	// Format:
	//
	//	projects/{project} or
	//	folders/{folder} or
	//	organizations/{organization}
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Optional. The maximum number of plans to return per page. The service may
	// return fewer than this value. If unspecified, the server will use a
	// sensible default. The maximum value is 1000; values above 1000 will be
	// coerced to 1000.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Optional. A page token, received from a previous `QueryCapacityPlans` call.
	// Provide this to retrieve the subsequent page.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Optional. The Google Cloud Platform location of capacity plans. If
	// unspecified, all locations will be included.
	Location string `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *QueryCapacityPlansRequest) Reset() {
	*x = QueryCapacityPlansRequest{}
	mi := &file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryCapacityPlansRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCapacityPlansRequest) ProtoMessage() {}

func (x *QueryCapacityPlansRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCapacityPlansRequest.ProtoReflect.Descriptor instead.
func (*QueryCapacityPlansRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_rawDescGZIP(), []int{1}
}

func (x *QueryCapacityPlansRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *QueryCapacityPlansRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryCapacityPlansRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *QueryCapacityPlansRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

// Response of querying capacity plans.
type QueryCapacityPlansResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of capacity plans.
	CapacityPlans []*CapacityPlan `protobuf:"bytes,1,rep,name=capacity_plans,json=capacityPlans,proto3" json:"capacity_plans,omitempty"`
	// Token to retrieve the next page of results. This will be empty if there are
	// no more pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *QueryCapacityPlansResponse) Reset() {
	*x = QueryCapacityPlansResponse{}
	mi := &file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryCapacityPlansResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCapacityPlansResponse) ProtoMessage() {}

func (x *QueryCapacityPlansResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCapacityPlansResponse.ProtoReflect.Descriptor instead.
func (*QueryCapacityPlansResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_rawDescGZIP(), []int{2}
}

func (x *QueryCapacityPlansResponse) GetCapacityPlans() []*CapacityPlan {
	if x != nil {
		return x.CapacityPlans
	}
	return nil
}

func (x *QueryCapacityPlansResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Request for capacity plan insights.
type QueryCapacityPlanInsightsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent resource container.
	// Format: projects/{project}
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Required. The filters to apply to the capacity plan.
	CapacityPlanFilters *CapacityPlanFilters `protobuf:"bytes,2,opt,name=capacity_plan_filters,json=capacityPlanFilters,proto3" json:"capacity_plan_filters,omitempty"`
}

func (x *QueryCapacityPlanInsightsRequest) Reset() {
	*x = QueryCapacityPlanInsightsRequest{}
	mi := &file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryCapacityPlanInsightsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCapacityPlanInsightsRequest) ProtoMessage() {}

func (x *QueryCapacityPlanInsightsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCapacityPlanInsightsRequest.ProtoReflect.Descriptor instead.
func (*QueryCapacityPlanInsightsRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_rawDescGZIP(), []int{3}
}

func (x *QueryCapacityPlanInsightsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *QueryCapacityPlanInsightsRequest) GetCapacityPlanFilters() *CapacityPlanFilters {
	if x != nil {
		return x.CapacityPlanFilters
	}
	return nil
}

// Response for capacity plan insights.
type QueryCapacityPlanInsightsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The aggregated capacity plan view. This is the aggregated view of
	// all the capacity plans that match the filters.
	AggregatedCapacityPlanView *CapacityPlanView `protobuf:"bytes,1,opt,name=aggregated_capacity_plan_view,json=aggregatedCapacityPlanView,proto3" json:"aggregated_capacity_plan_view,omitempty"`
}

func (x *QueryCapacityPlanInsightsResponse) Reset() {
	*x = QueryCapacityPlanInsightsResponse{}
	mi := &file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryCapacityPlanInsightsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCapacityPlanInsightsResponse) ProtoMessage() {}

func (x *QueryCapacityPlanInsightsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCapacityPlanInsightsResponse.ProtoReflect.Descriptor instead.
func (*QueryCapacityPlanInsightsResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_rawDescGZIP(), []int{4}
}

func (x *QueryCapacityPlanInsightsResponse) GetAggregatedCapacityPlanView() *CapacityPlanView {
	if x != nil {
		return x.AggregatedCapacityPlanView
	}
	return nil
}

// CapacityPlanFilters is a set of filters to apply to the capacity plan.
type CapacityPlanFilters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The capacity plan keys to include in the response.
	Keys []*CapacityPlanKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	// Required. The capacity types to include in the response.
	CapacityTypes []CapacityType `protobuf:"varint,2,rep,packed,name=capacity_types,json=capacityTypes,proto3,enum=google.cloud.capacityplanner.v1beta.CapacityType" json:"capacity_types,omitempty"`
	// Optional. Optional capacity plan id. Should be populated for request page
	// to lock based on the same capacity plan.
	CapacityPlanId string `protobuf:"bytes,3,opt,name=capacity_plan_id,json=capacityPlanId,proto3" json:"capacity_plan_id,omitempty"`
}

func (x *CapacityPlanFilters) Reset() {
	*x = CapacityPlanFilters{}
	mi := &file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CapacityPlanFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapacityPlanFilters) ProtoMessage() {}

func (x *CapacityPlanFilters) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapacityPlanFilters.ProtoReflect.Descriptor instead.
func (*CapacityPlanFilters) Descriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_rawDescGZIP(), []int{5}
}

func (x *CapacityPlanFilters) GetKeys() []*CapacityPlanKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *CapacityPlanFilters) GetCapacityTypes() []CapacityType {
	if x != nil {
		return x.CapacityTypes
	}
	return nil
}

func (x *CapacityPlanFilters) GetCapacityPlanId() string {
	if x != nil {
		return x.CapacityPlanId
	}
	return ""
}

// CapacityPlanKey is a the unique identifier for each Capacity Plan.
type CapacityPlanKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The resource container associated with the capacity plan.
	ResourceContainer *ResourceContainer `protobuf:"bytes,1,opt,name=resource_container,json=resourceContainer,proto3" json:"resource_container,omitempty"`
	// Required. The resource id key associated with the capacity plan.
	ResourceIdKey *ResourceIdKey `protobuf:"bytes,2,opt,name=resource_id_key,json=resourceIdKey,proto3" json:"resource_id_key,omitempty"`
	// Required. Identifier of location.
	LocationId *LocationIdentifier `protobuf:"bytes,3,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
}

func (x *CapacityPlanKey) Reset() {
	*x = CapacityPlanKey{}
	mi := &file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CapacityPlanKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapacityPlanKey) ProtoMessage() {}

func (x *CapacityPlanKey) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapacityPlanKey.ProtoReflect.Descriptor instead.
func (*CapacityPlanKey) Descriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_rawDescGZIP(), []int{6}
}

func (x *CapacityPlanKey) GetResourceContainer() *ResourceContainer {
	if x != nil {
		return x.ResourceContainer
	}
	return nil
}

func (x *CapacityPlanKey) GetResourceIdKey() *ResourceIdKey {
	if x != nil {
		return x.ResourceIdKey
	}
	return nil
}

func (x *CapacityPlanKey) GetLocationId() *LocationIdentifier {
	if x != nil {
		return x.LocationId
	}
	return nil
}

// CapacityPlanView contains the capacity plan key and the time series views.
type CapacityPlanView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The capacity plan key associated with the capacity plan view.
	Key *CapacityPlanKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Required. The time series views associated with the capacity plan view.
	TimeSeriesViews []*TimeSeriesView `protobuf:"bytes,2,rep,name=time_series_views,json=timeSeriesViews,proto3" json:"time_series_views,omitempty"`
}

func (x *CapacityPlanView) Reset() {
	*x = CapacityPlanView{}
	mi := &file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CapacityPlanView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapacityPlanView) ProtoMessage() {}

func (x *CapacityPlanView) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapacityPlanView.ProtoReflect.Descriptor instead.
func (*CapacityPlanView) Descriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_rawDescGZIP(), []int{7}
}

func (x *CapacityPlanView) GetKey() *CapacityPlanKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *CapacityPlanView) GetTimeSeriesViews() []*TimeSeriesView {
	if x != nil {
		return x.TimeSeriesViews
	}
	return nil
}

// TimeSeriesView contains capacity_value which has the timeseries for a given
// type. Each type as a single timeseries associated with it.
type TimeSeriesView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The capacity type associated with the time series view.
	Type CapacityType `protobuf:"varint,1,opt,name=type,proto3,enum=google.cloud.capacityplanner.v1beta.CapacityType" json:"type,omitempty"`
	// Required. The capacity value associated with the time series view.
	CapacityValue *DemandValue `protobuf:"bytes,2,opt,name=capacity_value,json=capacityValue,proto3" json:"capacity_value,omitempty"`
}

func (x *TimeSeriesView) Reset() {
	*x = TimeSeriesView{}
	mi := &file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimeSeriesView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeSeriesView) ProtoMessage() {}

func (x *TimeSeriesView) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeSeriesView.ProtoReflect.Descriptor instead.
func (*TimeSeriesView) Descriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_rawDescGZIP(), []int{8}
}

func (x *TimeSeriesView) GetType() CapacityType {
	if x != nil {
		return x.Type
	}
	return CapacityType_CAPACITY_TYPE_UNKNOWN
}

func (x *TimeSeriesView) GetCapacityValue() *DemandValue {
	if x != nil {
		return x.CapacityValue
	}
	return nil
}

// A plan for additional capacity needed by a Google Cloud Platform project.
// This is synonymous with CapacityDemand, CapacityRequest, and
// CapacityDemandRequest.
type CapacityPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier. The  name of the capacity plan.
	//
	// Format:
	//
	//	projects/{project}/capacityPlans/{capacity_plan_id}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. The metadata associated with a capacity demand.
	CapacityDemandMetadata *DemandMetadata `protobuf:"bytes,2,opt,name=capacity_demand_metadata,json=capacityDemandMetadata,proto3" json:"capacity_demand_metadata,omitempty"`
	// Required. The capacity demand associated with a service.
	ServiceDemands []*ServiceDemand `protobuf:"bytes,3,rep,name=service_demands,json=serviceDemands,proto3" json:"service_demands,omitempty"`
	// Output only. User who created the capacity plan.
	Reporter *User `protobuf:"bytes,4,opt,name=reporter,proto3" json:"reporter,omitempty"`
	// Output only. State of the plan.
	State State `protobuf:"varint,5,opt,name=state,proto3,enum=google.cloud.capacityplanner.v1beta.State" json:"state,omitempty"`
	// Output only. Timestamp when the plan was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. Timestamp when the plan was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Optional. Description of the plan.
	Description string `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	// Optional. Title of the plan.
	Title string `protobuf:"bytes,9,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *CapacityPlan) Reset() {
	*x = CapacityPlan{}
	mi := &file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CapacityPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapacityPlan) ProtoMessage() {}

func (x *CapacityPlan) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapacityPlan.ProtoReflect.Descriptor instead.
func (*CapacityPlan) Descriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_rawDescGZIP(), []int{9}
}

func (x *CapacityPlan) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CapacityPlan) GetCapacityDemandMetadata() *DemandMetadata {
	if x != nil {
		return x.CapacityDemandMetadata
	}
	return nil
}

func (x *CapacityPlan) GetServiceDemands() []*ServiceDemand {
	if x != nil {
		return x.ServiceDemands
	}
	return nil
}

func (x *CapacityPlan) GetReporter() *User {
	if x != nil {
		return x.Reporter
	}
	return nil
}

func (x *CapacityPlan) GetState() State {
	if x != nil {
		return x.State
	}
	return State_STATE_UNSPECIFIED
}

func (x *CapacityPlan) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *CapacityPlan) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *CapacityPlan) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CapacityPlan) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

// The metadata associated with a capacity demand.
type DemandMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The preferences associated with a capacity demand.
	DemandPreferences []*DemandPreference `protobuf:"bytes,1,rep,name=demand_preferences,json=demandPreferences,proto3" json:"demand_preferences,omitempty"`
}

func (x *DemandMetadata) Reset() {
	*x = DemandMetadata{}
	mi := &file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DemandMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DemandMetadata) ProtoMessage() {}

func (x *DemandMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DemandMetadata.ProtoReflect.Descriptor instead.
func (*DemandMetadata) Descriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_rawDescGZIP(), []int{10}
}

func (x *DemandMetadata) GetDemandPreferences() []*DemandPreference {
	if x != nil {
		return x.DemandPreferences
	}
	return nil
}

// Preference associated with a request, such as flexibility with alternate
// resource type.
type DemandPreference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The preference id.
	PreferenceId string `protobuf:"bytes,1,opt,name=preference_id,json=preferenceId,proto3" json:"preference_id,omitempty"`
	// Required. The value of demand preference.
	Value *Value `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DemandPreference) Reset() {
	*x = DemandPreference{}
	mi := &file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DemandPreference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DemandPreference) ProtoMessage() {}

func (x *DemandPreference) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DemandPreference.ProtoReflect.Descriptor instead.
func (*DemandPreference) Descriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_rawDescGZIP(), []int{11}
}

func (x *DemandPreference) GetPreferenceId() string {
	if x != nil {
		return x.PreferenceId
	}
	return ""
}

func (x *DemandPreference) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

// Capacity demand for a service.
type ServiceDemand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Name of the service.
	Service string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	// Optional. The metadata associated with a service demand.
	DemandMetadata *DemandMetadata `protobuf:"bytes,2,opt,name=demand_metadata,json=demandMetadata,proto3" json:"demand_metadata,omitempty"`
	// Required. The demand associated with the resources.
	ResourceDemands []*ResourceDemand `protobuf:"bytes,3,rep,name=resource_demands,json=resourceDemands,proto3" json:"resource_demands,omitempty"`
}

func (x *ServiceDemand) Reset() {
	*x = ServiceDemand{}
	mi := &file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceDemand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceDemand) ProtoMessage() {}

func (x *ServiceDemand) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceDemand.ProtoReflect.Descriptor instead.
func (*ServiceDemand) Descriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_rawDescGZIP(), []int{12}
}

func (x *ServiceDemand) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *ServiceDemand) GetDemandMetadata() *DemandMetadata {
	if x != nil {
		return x.DemandMetadata
	}
	return nil
}

func (x *ServiceDemand) GetResourceDemands() []*ResourceDemand {
	if x != nil {
		return x.ResourceDemands
	}
	return nil
}

// Capacity demand for a resource.
type ResourceDemand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Identifier of resource demand.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Required. The resource container associated with the demand.
	ResourceContainer *ResourceContainer `protobuf:"bytes,2,opt,name=resource_container,json=resourceContainer,proto3" json:"resource_container,omitempty"`
	// Required. Identifier of resource.
	ResourceId *ResourceIdentifier `protobuf:"bytes,3,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// Required. Identifier of location.
	LocationId *LocationIdentifier `protobuf:"bytes,4,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	// Output only. State of the resource demand.
	State State `protobuf:"varint,5,opt,name=state,proto3,enum=google.cloud.capacityplanner.v1beta.State" json:"state,omitempty"`
	// Output only. User who reported the demand.
	Reporter *User `protobuf:"bytes,6,opt,name=reporter,proto3" json:"reporter,omitempty"`
	// Output only. Timestamp when the demand was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. Timestamp when the demand was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Required. The demand values associated with the resource.
	DemandValues *DemandValues `protobuf:"bytes,9,opt,name=demand_values,json=demandValues,proto3" json:"demand_values,omitempty"`
	// Optional. The metadata associated with the demand.
	DemandMetadata *DemandMetadata `protobuf:"bytes,10,opt,name=demand_metadata,json=demandMetadata,proto3" json:"demand_metadata,omitempty"`
	// Optional. The child resource demands associated with the resource.
	ChildResourceDemands []*ChildResourceDemand `protobuf:"bytes,11,rep,name=child_resource_demands,json=childResourceDemands,proto3" json:"child_resource_demands,omitempty"`
}

func (x *ResourceDemand) Reset() {
	*x = ResourceDemand{}
	mi := &file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceDemand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceDemand) ProtoMessage() {}

func (x *ResourceDemand) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceDemand.ProtoReflect.Descriptor instead.
func (*ResourceDemand) Descriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_rawDescGZIP(), []int{13}
}

func (x *ResourceDemand) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ResourceDemand) GetResourceContainer() *ResourceContainer {
	if x != nil {
		return x.ResourceContainer
	}
	return nil
}

func (x *ResourceDemand) GetResourceId() *ResourceIdentifier {
	if x != nil {
		return x.ResourceId
	}
	return nil
}

func (x *ResourceDemand) GetLocationId() *LocationIdentifier {
	if x != nil {
		return x.LocationId
	}
	return nil
}

func (x *ResourceDemand) GetState() State {
	if x != nil {
		return x.State
	}
	return State_STATE_UNSPECIFIED
}

func (x *ResourceDemand) GetReporter() *User {
	if x != nil {
		return x.Reporter
	}
	return nil
}

func (x *ResourceDemand) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ResourceDemand) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *ResourceDemand) GetDemandValues() *DemandValues {
	if x != nil {
		return x.DemandValues
	}
	return nil
}

func (x *ResourceDemand) GetDemandMetadata() *DemandMetadata {
	if x != nil {
		return x.DemandMetadata
	}
	return nil
}

func (x *ResourceDemand) GetChildResourceDemands() []*ChildResourceDemand {
	if x != nil {
		return x.ChildResourceDemands
	}
	return nil
}

// A user who created or updated a capacity demand.
type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Email of the user.
	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	mi := &file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_rawDescGZIP(), []int{14}
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

// The capacity demand values for a resource.
type DemandValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The demand values.
	Values []*DemandValue `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *DemandValues) Reset() {
	*x = DemandValues{}
	mi := &file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DemandValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DemandValues) ProtoMessage() {}

func (x *DemandValues) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DemandValues.ProtoReflect.Descriptor instead.
func (*DemandValues) Descriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_rawDescGZIP(), []int{15}
}

func (x *DemandValues) GetValues() []*DemandValue {
	if x != nil {
		return x.Values
	}
	return nil
}

// Capacity demand value for a single resource attribute such as CPU count,
// vertex AI peak QPM, etc.
type DemandValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the demand value such as CPU count.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Required. The demand values at different time points.
	TimeValues []*TimeValue `protobuf:"bytes,2,rep,name=time_values,json=timeValues,proto3" json:"time_values,omitempty"`
	// Required. Unit of measurement.
	Unit Unit `protobuf:"varint,3,opt,name=unit,proto3,enum=google.cloud.capacityplanner.v1beta.Unit" json:"unit,omitempty"`
}

func (x *DemandValue) Reset() {
	*x = DemandValue{}
	mi := &file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DemandValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DemandValue) ProtoMessage() {}

func (x *DemandValue) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DemandValue.ProtoReflect.Descriptor instead.
func (*DemandValue) Descriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_rawDescGZIP(), []int{16}
}

func (x *DemandValue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DemandValue) GetTimeValues() []*TimeValue {
	if x != nil {
		return x.TimeValues
	}
	return nil
}

func (x *DemandValue) GetUnit() Unit {
	if x != nil {
		return x.Unit
	}
	return Unit_UNIT_UNSPECIFIED
}

// Capacity demand value for a single time point.
type TimeValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The time point. If this demand value is non-temporal, set time to
	// -1.
	Time *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	// Required. The demand value at the time point.
	Value *float64 `protobuf:"fixed64,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *TimeValue) Reset() {
	*x = TimeValue{}
	mi := &file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimeValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeValue) ProtoMessage() {}

func (x *TimeValue) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeValue.ProtoReflect.Descriptor instead.
func (*TimeValue) Descriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_rawDescGZIP(), []int{17}
}

func (x *TimeValue) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *TimeValue) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

// Capacity demand for a child resource such as shapes.
type ChildResourceDemand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Identifier of resource.
	ResourceId *ResourceIdentifier `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// Required. The demand values associated with the child resource.
	DemandValues *DemandValues `protobuf:"bytes,2,opt,name=demand_values,json=demandValues,proto3" json:"demand_values,omitempty"`
	// Optional. The metadata associated with the child resource demand.
	DemandMetadata *DemandMetadata `protobuf:"bytes,3,opt,name=demand_metadata,json=demandMetadata,proto3" json:"demand_metadata,omitempty"`
}

func (x *ChildResourceDemand) Reset() {
	*x = ChildResourceDemand{}
	mi := &file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChildResourceDemand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChildResourceDemand) ProtoMessage() {}

func (x *ChildResourceDemand) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChildResourceDemand.ProtoReflect.Descriptor instead.
func (*ChildResourceDemand) Descriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_rawDescGZIP(), []int{18}
}

func (x *ChildResourceDemand) GetResourceId() *ResourceIdentifier {
	if x != nil {
		return x.ResourceId
	}
	return nil
}

func (x *ChildResourceDemand) GetDemandValues() *DemandValues {
	if x != nil {
		return x.DemandValues
	}
	return nil
}

func (x *ChildResourceDemand) GetDemandMetadata() *DemandMetadata {
	if x != nil {
		return x.DemandMetadata
	}
	return nil
}

var File_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto protoreflect.FileDescriptor

var file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_rawDesc = []byte{
	0x0a, 0x43, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70,
	0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x23, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x32, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x61, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x47, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33,
	0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2d, 0x0a, 0x2b, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xcf, 0x01, 0x0a, 0x19, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2d, 0x12,
	0x2b, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9e, 0x01, 0x0a, 0x1a,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x50, 0x6c, 0x61,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0e, 0x63, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x0d, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x50,
	0x6c, 0x61, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e,
	0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xb2, 0x01, 0x0a,
	0x20, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x50, 0x6c,
	0x61, 0x6e, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x71,
	0x0a, 0x15, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x13, 0x63, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x22, 0xa2, 0x01, 0x0a, 0x21, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7d, 0x0a, 0x1d, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70,
	0x6c, 0x61, 0x6e, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x50, 0x6c, 0x61,
	0x6e, 0x56, 0x69, 0x65, 0x77, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x1a, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x50, 0x6c,
	0x61, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x22, 0xf2, 0x01, 0x0a, 0x13, 0x43, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x4d,
	0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x4b,
	0x65, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x5d, 0x0a,
	0x0e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x43, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x63,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x10,
	0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x63, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x22, 0xbd, 0x02, 0x0a, 0x0f,
	0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x4b, 0x65, 0x79, 0x12,
	0x6a, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x5f, 0x0a, 0x0f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x64, 0x4b, 0x65, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x5d, 0x0a, 0x0b,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xc5, 0x01, 0x0a, 0x10,
	0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x56, 0x69, 0x65, 0x77,
	0x12, 0x4b, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e,
	0x4b, 0x65, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x64, 0x0a,
	0x11, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x76, 0x69, 0x65,
	0x77, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x56, 0x69, 0x65, 0x77, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x56, 0x69,
	0x65, 0x77, 0x73, 0x22, 0xba, 0x01, 0x0a, 0x0e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x56, 0x69, 0x65, 0x77, 0x12, 0x4a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x5c, 0x0a, 0x0e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0d, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xd7, 0x05, 0x0a, 0x0c, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x50, 0x6c, 0x61,
	0x6e, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x08, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x72, 0x0a, 0x18, 0x63, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x2e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x16, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x60,
	0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70,
	0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x73,
	0x12, 0x4a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x3a, 0x7f, 0xea, 0x41, 0x7c, 0x0a, 0x2b,
	0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x30, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f,
	0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x2f, 0x7b, 0x63,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x7d, 0x2a, 0x0d, 0x63,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x32, 0x0c, 0x63, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x22, 0x7b, 0x0a, 0x0e, 0x44, 0x65,
	0x6d, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x69, 0x0a, 0x12,
	0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x44,
	0x65, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x11, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6d, 0x61,
	0x6e, 0x64, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0d,
	0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xf6, 0x01,
	0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x12,
	0x1d, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x61,
	0x0a, 0x0f, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70,
	0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x44, 0x65,
	0x6d, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x0e, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x63, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x65,
	0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44,
	0x65, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x22, 0x9b, 0x07, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x6a,
	0x0a, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x5d, 0x0a, 0x0b, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x5d, 0x0a, 0x0b, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70,
	0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x4a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x5b, 0x0a, 0x0d, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x6d,
	0x61, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c,
	0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x61, 0x0a, 0x0f,
	0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x6d, 0x61,
	0x6e, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x0e, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x73, 0x0a, 0x16, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x14,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x6d,
	0x61, 0x6e, 0x64, 0x73, 0x22, 0x21, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x5d, 0x0a, 0x0c, 0x44, 0x65, 0x6d, 0x61, 0x6e,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70,
	0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x44, 0x65,
	0x6d, 0x61, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xc0, 0x01, 0x0a, 0x0b, 0x44, 0x65, 0x6d, 0x61, 0x6e,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x54, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x6a, 0x0a, 0x09, 0x54, 0x69, 0x6d,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x48,
	0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb4, 0x02, 0x0a, 0x13, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x5d, 0x0a,
	0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x5b, 0x0a, 0x0d,
	0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x64, 0x65, 0x6d,
	0x61, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x61, 0x0a, 0x0f, 0x64, 0x65, 0x6d,
	0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x64, 0x65,
	0x6d, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2a, 0xb1, 0x01, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x10, 0x03,
	0x12, 0x18, 0x0a, 0x14, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x4f,
	0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x42,
	0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x41, 0x4e, 0x4e,
	0x4f, 0x54, 0x5f, 0x42, 0x45, 0x5f, 0x46, 0x55, 0x4c, 0x46, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x10,
	0x07, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x41, 0x43, 0x54, 0x5f, 0x53, 0x41, 0x4c, 0x45, 0x53, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e,
	0x49, 0x4e, 0x5f, 0x46, 0x55, 0x4c, 0x46, 0x49, 0x4c, 0x4c, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x0a,
	0x2a, 0x97, 0x01, 0x0a, 0x0c, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x41, 0x50, 0x41, 0x43, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d,
	0x43, 0x41, 0x50, 0x41, 0x43, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e,
	0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x43, 0x5f, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x01, 0x12,
	0x23, 0x0a, 0x1f, 0x43, 0x41, 0x50, 0x41, 0x43, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x4e, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x43, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x41, 0x50, 0x41, 0x43, 0x49, 0x54, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x43, 0x5f,
	0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x03, 0x32, 0xb9, 0x07, 0x0a, 0x17, 0x43,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xbb, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x3b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70,
	0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x43, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x22, 0x38, 0xda, 0x41, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29, 0x2f, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x2a, 0x2f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e,
	0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xc3, 0x02, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x3e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x50,
	0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x50,
	0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xab, 0x01, 0xda,
	0x41, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x9b, 0x01, 0x5a,
	0x30, 0x12, 0x2e, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x3d, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x63, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x3a, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x5a, 0x31, 0x12, 0x2f, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x7b, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x7d,
	0x2f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x3a, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x34, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x7b, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x50,
	0x6c, 0x61, 0x6e, 0x73, 0x3a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x8c, 0x02, 0x0a, 0x19, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e,
	0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x45, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e,
	0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x46, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x60, 0xda, 0x41, 0x1c, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x2c, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x3a, 0x01,
	0x2a, 0x22, 0x36, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x63,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x73, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x3a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x8a, 0x01, 0xca, 0x41, 0x1e, 0x63,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x66,
	0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2c, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x64,
	0x65, 0x76, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x91, 0x02, 0x0a, 0x27, 0x63, 0x6f, 0x6d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x42, 0x1c, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x51, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x2f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x70, 0x62, 0x3b, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x70, 0x62, 0xaa, 0x02, 0x23, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x50, 0x6c, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x56, 0x31, 0x42, 0x65, 0x74, 0x61, 0xca, 0x02, 0x23, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x5c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x43, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74,
	0x61, 0xea, 0x02, 0x26, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x3a, 0x3a, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_rawDescOnce sync.Once
	file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_rawDescData = file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_rawDesc
)

func file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_rawDescGZIP() []byte {
	file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_rawDescOnce.Do(func() {
		file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_rawDescData)
	})
	return file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_rawDescData
}

var file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_goTypes = []any{
	(State)(0),                                // 0: google.cloud.capacityplanner.v1beta.State
	(CapacityType)(0),                         // 1: google.cloud.capacityplanner.v1beta.CapacityType
	(*GetCapacityPlanRequest)(nil),            // 2: google.cloud.capacityplanner.v1beta.GetCapacityPlanRequest
	(*QueryCapacityPlansRequest)(nil),         // 3: google.cloud.capacityplanner.v1beta.QueryCapacityPlansRequest
	(*QueryCapacityPlansResponse)(nil),        // 4: google.cloud.capacityplanner.v1beta.QueryCapacityPlansResponse
	(*QueryCapacityPlanInsightsRequest)(nil),  // 5: google.cloud.capacityplanner.v1beta.QueryCapacityPlanInsightsRequest
	(*QueryCapacityPlanInsightsResponse)(nil), // 6: google.cloud.capacityplanner.v1beta.QueryCapacityPlanInsightsResponse
	(*CapacityPlanFilters)(nil),               // 7: google.cloud.capacityplanner.v1beta.CapacityPlanFilters
	(*CapacityPlanKey)(nil),                   // 8: google.cloud.capacityplanner.v1beta.CapacityPlanKey
	(*CapacityPlanView)(nil),                  // 9: google.cloud.capacityplanner.v1beta.CapacityPlanView
	(*TimeSeriesView)(nil),                    // 10: google.cloud.capacityplanner.v1beta.TimeSeriesView
	(*CapacityPlan)(nil),                      // 11: google.cloud.capacityplanner.v1beta.CapacityPlan
	(*DemandMetadata)(nil),                    // 12: google.cloud.capacityplanner.v1beta.DemandMetadata
	(*DemandPreference)(nil),                  // 13: google.cloud.capacityplanner.v1beta.DemandPreference
	(*ServiceDemand)(nil),                     // 14: google.cloud.capacityplanner.v1beta.ServiceDemand
	(*ResourceDemand)(nil),                    // 15: google.cloud.capacityplanner.v1beta.ResourceDemand
	(*User)(nil),                              // 16: google.cloud.capacityplanner.v1beta.User
	(*DemandValues)(nil),                      // 17: google.cloud.capacityplanner.v1beta.DemandValues
	(*DemandValue)(nil),                       // 18: google.cloud.capacityplanner.v1beta.DemandValue
	(*TimeValue)(nil),                         // 19: google.cloud.capacityplanner.v1beta.TimeValue
	(*ChildResourceDemand)(nil),               // 20: google.cloud.capacityplanner.v1beta.ChildResourceDemand
	(*ResourceContainer)(nil),                 // 21: google.cloud.capacityplanner.v1beta.ResourceContainer
	(*ResourceIdKey)(nil),                     // 22: google.cloud.capacityplanner.v1beta.ResourceIdKey
	(*LocationIdentifier)(nil),                // 23: google.cloud.capacityplanner.v1beta.LocationIdentifier
	(*timestamppb.Timestamp)(nil),             // 24: google.protobuf.Timestamp
	(*Value)(nil),                             // 25: google.cloud.capacityplanner.v1beta.Value
	(*ResourceIdentifier)(nil),                // 26: google.cloud.capacityplanner.v1beta.ResourceIdentifier
	(Unit)(0),                                 // 27: google.cloud.capacityplanner.v1beta.Unit
}
var file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_depIdxs = []int32{
	11, // 0: google.cloud.capacityplanner.v1beta.QueryCapacityPlansResponse.capacity_plans:type_name -> google.cloud.capacityplanner.v1beta.CapacityPlan
	7,  // 1: google.cloud.capacityplanner.v1beta.QueryCapacityPlanInsightsRequest.capacity_plan_filters:type_name -> google.cloud.capacityplanner.v1beta.CapacityPlanFilters
	9,  // 2: google.cloud.capacityplanner.v1beta.QueryCapacityPlanInsightsResponse.aggregated_capacity_plan_view:type_name -> google.cloud.capacityplanner.v1beta.CapacityPlanView
	8,  // 3: google.cloud.capacityplanner.v1beta.CapacityPlanFilters.keys:type_name -> google.cloud.capacityplanner.v1beta.CapacityPlanKey
	1,  // 4: google.cloud.capacityplanner.v1beta.CapacityPlanFilters.capacity_types:type_name -> google.cloud.capacityplanner.v1beta.CapacityType
	21, // 5: google.cloud.capacityplanner.v1beta.CapacityPlanKey.resource_container:type_name -> google.cloud.capacityplanner.v1beta.ResourceContainer
	22, // 6: google.cloud.capacityplanner.v1beta.CapacityPlanKey.resource_id_key:type_name -> google.cloud.capacityplanner.v1beta.ResourceIdKey
	23, // 7: google.cloud.capacityplanner.v1beta.CapacityPlanKey.location_id:type_name -> google.cloud.capacityplanner.v1beta.LocationIdentifier
	8,  // 8: google.cloud.capacityplanner.v1beta.CapacityPlanView.key:type_name -> google.cloud.capacityplanner.v1beta.CapacityPlanKey
	10, // 9: google.cloud.capacityplanner.v1beta.CapacityPlanView.time_series_views:type_name -> google.cloud.capacityplanner.v1beta.TimeSeriesView
	1,  // 10: google.cloud.capacityplanner.v1beta.TimeSeriesView.type:type_name -> google.cloud.capacityplanner.v1beta.CapacityType
	18, // 11: google.cloud.capacityplanner.v1beta.TimeSeriesView.capacity_value:type_name -> google.cloud.capacityplanner.v1beta.DemandValue
	12, // 12: google.cloud.capacityplanner.v1beta.CapacityPlan.capacity_demand_metadata:type_name -> google.cloud.capacityplanner.v1beta.DemandMetadata
	14, // 13: google.cloud.capacityplanner.v1beta.CapacityPlan.service_demands:type_name -> google.cloud.capacityplanner.v1beta.ServiceDemand
	16, // 14: google.cloud.capacityplanner.v1beta.CapacityPlan.reporter:type_name -> google.cloud.capacityplanner.v1beta.User
	0,  // 15: google.cloud.capacityplanner.v1beta.CapacityPlan.state:type_name -> google.cloud.capacityplanner.v1beta.State
	24, // 16: google.cloud.capacityplanner.v1beta.CapacityPlan.create_time:type_name -> google.protobuf.Timestamp
	24, // 17: google.cloud.capacityplanner.v1beta.CapacityPlan.update_time:type_name -> google.protobuf.Timestamp
	13, // 18: google.cloud.capacityplanner.v1beta.DemandMetadata.demand_preferences:type_name -> google.cloud.capacityplanner.v1beta.DemandPreference
	25, // 19: google.cloud.capacityplanner.v1beta.DemandPreference.value:type_name -> google.cloud.capacityplanner.v1beta.Value
	12, // 20: google.cloud.capacityplanner.v1beta.ServiceDemand.demand_metadata:type_name -> google.cloud.capacityplanner.v1beta.DemandMetadata
	15, // 21: google.cloud.capacityplanner.v1beta.ServiceDemand.resource_demands:type_name -> google.cloud.capacityplanner.v1beta.ResourceDemand
	21, // 22: google.cloud.capacityplanner.v1beta.ResourceDemand.resource_container:type_name -> google.cloud.capacityplanner.v1beta.ResourceContainer
	26, // 23: google.cloud.capacityplanner.v1beta.ResourceDemand.resource_id:type_name -> google.cloud.capacityplanner.v1beta.ResourceIdentifier
	23, // 24: google.cloud.capacityplanner.v1beta.ResourceDemand.location_id:type_name -> google.cloud.capacityplanner.v1beta.LocationIdentifier
	0,  // 25: google.cloud.capacityplanner.v1beta.ResourceDemand.state:type_name -> google.cloud.capacityplanner.v1beta.State
	16, // 26: google.cloud.capacityplanner.v1beta.ResourceDemand.reporter:type_name -> google.cloud.capacityplanner.v1beta.User
	24, // 27: google.cloud.capacityplanner.v1beta.ResourceDemand.create_time:type_name -> google.protobuf.Timestamp
	24, // 28: google.cloud.capacityplanner.v1beta.ResourceDemand.update_time:type_name -> google.protobuf.Timestamp
	17, // 29: google.cloud.capacityplanner.v1beta.ResourceDemand.demand_values:type_name -> google.cloud.capacityplanner.v1beta.DemandValues
	12, // 30: google.cloud.capacityplanner.v1beta.ResourceDemand.demand_metadata:type_name -> google.cloud.capacityplanner.v1beta.DemandMetadata
	20, // 31: google.cloud.capacityplanner.v1beta.ResourceDemand.child_resource_demands:type_name -> google.cloud.capacityplanner.v1beta.ChildResourceDemand
	18, // 32: google.cloud.capacityplanner.v1beta.DemandValues.values:type_name -> google.cloud.capacityplanner.v1beta.DemandValue
	19, // 33: google.cloud.capacityplanner.v1beta.DemandValue.time_values:type_name -> google.cloud.capacityplanner.v1beta.TimeValue
	27, // 34: google.cloud.capacityplanner.v1beta.DemandValue.unit:type_name -> google.cloud.capacityplanner.v1beta.Unit
	24, // 35: google.cloud.capacityplanner.v1beta.TimeValue.time:type_name -> google.protobuf.Timestamp
	26, // 36: google.cloud.capacityplanner.v1beta.ChildResourceDemand.resource_id:type_name -> google.cloud.capacityplanner.v1beta.ResourceIdentifier
	17, // 37: google.cloud.capacityplanner.v1beta.ChildResourceDemand.demand_values:type_name -> google.cloud.capacityplanner.v1beta.DemandValues
	12, // 38: google.cloud.capacityplanner.v1beta.ChildResourceDemand.demand_metadata:type_name -> google.cloud.capacityplanner.v1beta.DemandMetadata
	2,  // 39: google.cloud.capacityplanner.v1beta.CapacityPlanningService.GetCapacityPlan:input_type -> google.cloud.capacityplanner.v1beta.GetCapacityPlanRequest
	3,  // 40: google.cloud.capacityplanner.v1beta.CapacityPlanningService.QueryCapacityPlans:input_type -> google.cloud.capacityplanner.v1beta.QueryCapacityPlansRequest
	5,  // 41: google.cloud.capacityplanner.v1beta.CapacityPlanningService.QueryCapacityPlanInsights:input_type -> google.cloud.capacityplanner.v1beta.QueryCapacityPlanInsightsRequest
	11, // 42: google.cloud.capacityplanner.v1beta.CapacityPlanningService.GetCapacityPlan:output_type -> google.cloud.capacityplanner.v1beta.CapacityPlan
	4,  // 43: google.cloud.capacityplanner.v1beta.CapacityPlanningService.QueryCapacityPlans:output_type -> google.cloud.capacityplanner.v1beta.QueryCapacityPlansResponse
	6,  // 44: google.cloud.capacityplanner.v1beta.CapacityPlanningService.QueryCapacityPlanInsights:output_type -> google.cloud.capacityplanner.v1beta.QueryCapacityPlanInsightsResponse
	42, // [42:45] is the sub-list for method output_type
	39, // [39:42] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_init() }
func file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_init() {
	if File_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto != nil {
		return
	}
	file_google_cloud_capacityplanner_v1beta_location_proto_init()
	file_google_cloud_capacityplanner_v1beta_resource_proto_init()
	file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_msgTypes[17].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_goTypes,
		DependencyIndexes: file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_depIdxs,
		EnumInfos:         file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_enumTypes,
		MessageInfos:      file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_msgTypes,
	}.Build()
	File_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto = out.File
	file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_rawDesc = nil
	file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_goTypes = nil
	file_google_cloud_capacityplanner_v1beta_capacity_planning_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CapacityPlanningServiceClient is the client API for CapacityPlanningService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CapacityPlanningServiceClient interface {
	// Returns information about the capacity plan.
	GetCapacityPlan(ctx context.Context, in *GetCapacityPlanRequest, opts ...grpc.CallOption) (*CapacityPlan, error)
	// Returns a list of the capacity plans that are in the parent parameter and
	// match your specified filters.
	// (The maximum list length is limited by the pageSize parameter.)
	QueryCapacityPlans(ctx context.Context, in *QueryCapacityPlansRequest, opts ...grpc.CallOption) (*QueryCapacityPlansResponse, error)
	// Query capacity plan insights that are in the parent parameter and match
	// your specified filters.
	QueryCapacityPlanInsights(ctx context.Context, in *QueryCapacityPlanInsightsRequest, opts ...grpc.CallOption) (*QueryCapacityPlanInsightsResponse, error)
}

type capacityPlanningServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCapacityPlanningServiceClient(cc grpc.ClientConnInterface) CapacityPlanningServiceClient {
	return &capacityPlanningServiceClient{cc}
}

func (c *capacityPlanningServiceClient) GetCapacityPlan(ctx context.Context, in *GetCapacityPlanRequest, opts ...grpc.CallOption) (*CapacityPlan, error) {
	out := new(CapacityPlan)
	err := c.cc.Invoke(ctx, "/google.cloud.capacityplanner.v1beta.CapacityPlanningService/GetCapacityPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *capacityPlanningServiceClient) QueryCapacityPlans(ctx context.Context, in *QueryCapacityPlansRequest, opts ...grpc.CallOption) (*QueryCapacityPlansResponse, error) {
	out := new(QueryCapacityPlansResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.capacityplanner.v1beta.CapacityPlanningService/QueryCapacityPlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *capacityPlanningServiceClient) QueryCapacityPlanInsights(ctx context.Context, in *QueryCapacityPlanInsightsRequest, opts ...grpc.CallOption) (*QueryCapacityPlanInsightsResponse, error) {
	out := new(QueryCapacityPlanInsightsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.capacityplanner.v1beta.CapacityPlanningService/QueryCapacityPlanInsights", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CapacityPlanningServiceServer is the server API for CapacityPlanningService service.
type CapacityPlanningServiceServer interface {
	// Returns information about the capacity plan.
	GetCapacityPlan(context.Context, *GetCapacityPlanRequest) (*CapacityPlan, error)
	// Returns a list of the capacity plans that are in the parent parameter and
	// match your specified filters.
	// (The maximum list length is limited by the pageSize parameter.)
	QueryCapacityPlans(context.Context, *QueryCapacityPlansRequest) (*QueryCapacityPlansResponse, error)
	// Query capacity plan insights that are in the parent parameter and match
	// your specified filters.
	QueryCapacityPlanInsights(context.Context, *QueryCapacityPlanInsightsRequest) (*QueryCapacityPlanInsightsResponse, error)
}

// UnimplementedCapacityPlanningServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCapacityPlanningServiceServer struct {
}

func (*UnimplementedCapacityPlanningServiceServer) GetCapacityPlan(context.Context, *GetCapacityPlanRequest) (*CapacityPlan, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCapacityPlan not implemented")
}
func (*UnimplementedCapacityPlanningServiceServer) QueryCapacityPlans(context.Context, *QueryCapacityPlansRequest) (*QueryCapacityPlansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCapacityPlans not implemented")
}
func (*UnimplementedCapacityPlanningServiceServer) QueryCapacityPlanInsights(context.Context, *QueryCapacityPlanInsightsRequest) (*QueryCapacityPlanInsightsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCapacityPlanInsights not implemented")
}

func RegisterCapacityPlanningServiceServer(s *grpc.Server, srv CapacityPlanningServiceServer) {
	s.RegisterService(&_CapacityPlanningService_serviceDesc, srv)
}

func _CapacityPlanningService_GetCapacityPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCapacityPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CapacityPlanningServiceServer).GetCapacityPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.capacityplanner.v1beta.CapacityPlanningService/GetCapacityPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CapacityPlanningServiceServer).GetCapacityPlan(ctx, req.(*GetCapacityPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CapacityPlanningService_QueryCapacityPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCapacityPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CapacityPlanningServiceServer).QueryCapacityPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.capacityplanner.v1beta.CapacityPlanningService/QueryCapacityPlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CapacityPlanningServiceServer).QueryCapacityPlans(ctx, req.(*QueryCapacityPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CapacityPlanningService_QueryCapacityPlanInsights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCapacityPlanInsightsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CapacityPlanningServiceServer).QueryCapacityPlanInsights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.capacityplanner.v1beta.CapacityPlanningService/QueryCapacityPlanInsights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CapacityPlanningServiceServer).QueryCapacityPlanInsights(ctx, req.(*QueryCapacityPlanInsightsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CapacityPlanningService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.capacityplanner.v1beta.CapacityPlanningService",
	HandlerType: (*CapacityPlanningServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCapacityPlan",
			Handler:    _CapacityPlanningService_GetCapacityPlan_Handler,
		},
		{
			MethodName: "QueryCapacityPlans",
			Handler:    _CapacityPlanningService_QueryCapacityPlans_Handler,
		},
		{
			MethodName: "QueryCapacityPlanInsights",
			Handler:    _CapacityPlanningService_QueryCapacityPlanInsights_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/capacityplanner/v1beta/capacity_planning_service.proto",
}
