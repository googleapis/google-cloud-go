// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.7
// source: google/cloud/capacityplanner/v1beta/allocation.proto

package capacityplannerpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The status of the reservation.
type Allocation_Status int32

const (
	// Default value. This value is unused.
	Allocation_STATUS_UNSPECIFIED Allocation_Status = 0
	// Invalid Reservation
	Allocation_INVALID Allocation_Status = 1
	// Resources are being allocated for the reservation.
	Allocation_CREATING Allocation_Status = 2
	// Reservation has allocated all its resources.
	Allocation_READY Allocation_Status = 3
	// Reservation is currently being deleted.
	Allocation_DELETING Allocation_Status = 4
	// Reservation is currently being resized.
	Allocation_UPDATING Allocation_Status = 5
)

// Enum value maps for Allocation_Status.
var (
	Allocation_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "INVALID",
		2: "CREATING",
		3: "READY",
		4: "DELETING",
		5: "UPDATING",
	}
	Allocation_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"INVALID":            1,
		"CREATING":           2,
		"READY":              3,
		"DELETING":           4,
		"UPDATING":           5,
	}
)

func (x Allocation_Status) Enum() *Allocation_Status {
	p := new(Allocation_Status)
	*p = x
	return p
}

func (x Allocation_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Allocation_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_capacityplanner_v1beta_allocation_proto_enumTypes[0].Descriptor()
}

func (Allocation_Status) Type() protoreflect.EnumType {
	return &file_google_cloud_capacityplanner_v1beta_allocation_proto_enumTypes[0]
}

func (x Allocation_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Allocation_Status.Descriptor instead.
func (Allocation_Status) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_allocation_proto_rawDescGZIP(), []int{0, 0}
}

// guest device interface options to use for the disk.
type Allocation_SpecificSKUAllocation_AllocatedInstanceProperties_AllocatedDisk_DiskInterface int32

const (
	// Default value. This value is unused.
	Allocation_SpecificSKUAllocation_AllocatedInstanceProperties_AllocatedDisk_DISK_INTERFACE_UNSPECIFIED Allocation_SpecificSKUAllocation_AllocatedInstanceProperties_AllocatedDisk_DiskInterface = 0
	// SCSI disk interface.
	Allocation_SpecificSKUAllocation_AllocatedInstanceProperties_AllocatedDisk_SCSI Allocation_SpecificSKUAllocation_AllocatedInstanceProperties_AllocatedDisk_DiskInterface = 1
	// NVME disk interface.
	Allocation_SpecificSKUAllocation_AllocatedInstanceProperties_AllocatedDisk_NVME Allocation_SpecificSKUAllocation_AllocatedInstanceProperties_AllocatedDisk_DiskInterface = 2
	// NVDIMM disk interface.
	Allocation_SpecificSKUAllocation_AllocatedInstanceProperties_AllocatedDisk_NVDIMM Allocation_SpecificSKUAllocation_AllocatedInstanceProperties_AllocatedDisk_DiskInterface = 3
	// ISCSI disk interface.
	Allocation_SpecificSKUAllocation_AllocatedInstanceProperties_AllocatedDisk_ISCSI Allocation_SpecificSKUAllocation_AllocatedInstanceProperties_AllocatedDisk_DiskInterface = 4
)

// Enum value maps for Allocation_SpecificSKUAllocation_AllocatedInstanceProperties_AllocatedDisk_DiskInterface.
var (
	Allocation_SpecificSKUAllocation_AllocatedInstanceProperties_AllocatedDisk_DiskInterface_name = map[int32]string{
		0: "DISK_INTERFACE_UNSPECIFIED",
		1: "SCSI",
		2: "NVME",
		3: "NVDIMM",
		4: "ISCSI",
	}
	Allocation_SpecificSKUAllocation_AllocatedInstanceProperties_AllocatedDisk_DiskInterface_value = map[string]int32{
		"DISK_INTERFACE_UNSPECIFIED": 0,
		"SCSI":                       1,
		"NVME":                       2,
		"NVDIMM":                     3,
		"ISCSI":                      4,
	}
)

func (x Allocation_SpecificSKUAllocation_AllocatedInstanceProperties_AllocatedDisk_DiskInterface) Enum() *Allocation_SpecificSKUAllocation_AllocatedInstanceProperties_AllocatedDisk_DiskInterface {
	p := new(Allocation_SpecificSKUAllocation_AllocatedInstanceProperties_AllocatedDisk_DiskInterface)
	*p = x
	return p
}

func (x Allocation_SpecificSKUAllocation_AllocatedInstanceProperties_AllocatedDisk_DiskInterface) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Allocation_SpecificSKUAllocation_AllocatedInstanceProperties_AllocatedDisk_DiskInterface) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_capacityplanner_v1beta_allocation_proto_enumTypes[1].Descriptor()
}

func (Allocation_SpecificSKUAllocation_AllocatedInstanceProperties_AllocatedDisk_DiskInterface) Type() protoreflect.EnumType {
	return &file_google_cloud_capacityplanner_v1beta_allocation_proto_enumTypes[1]
}

func (x Allocation_SpecificSKUAllocation_AllocatedInstanceProperties_AllocatedDisk_DiskInterface) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Allocation_SpecificSKUAllocation_AllocatedInstanceProperties_AllocatedDisk_DiskInterface.Descriptor instead.
func (Allocation_SpecificSKUAllocation_AllocatedInstanceProperties_AllocatedDisk_DiskInterface) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_allocation_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0}
}

// Possible scope in which the reservation can be shared. More granularity
// can be added in future.
type Allocation_ShareSettings_ShareType int32

const (
	// Default value. This value is unused.
	Allocation_ShareSettings_SHARE_TYPE_UNSPECIFIED Allocation_ShareSettings_ShareType = 0
	// Shared-reservation is open to entire Organization
	Allocation_ShareSettings_ORGANIZATION Allocation_ShareSettings_ShareType = 1
	// Shared-reservation is open to specific projects
	Allocation_ShareSettings_SPECIFIC_PROJECTS Allocation_ShareSettings_ShareType = 2
	// Default value.
	Allocation_ShareSettings_LOCAL Allocation_ShareSettings_ShareType = 3
	// Shared-reservation is open to direct child projects of specific
	// folders.
	Allocation_ShareSettings_DIRECT_PROJECTS_UNDER_SPECIFIC_FOLDERS Allocation_ShareSettings_ShareType = 4
)

// Enum value maps for Allocation_ShareSettings_ShareType.
var (
	Allocation_ShareSettings_ShareType_name = map[int32]string{
		0: "SHARE_TYPE_UNSPECIFIED",
		1: "ORGANIZATION",
		2: "SPECIFIC_PROJECTS",
		3: "LOCAL",
		4: "DIRECT_PROJECTS_UNDER_SPECIFIC_FOLDERS",
	}
	Allocation_ShareSettings_ShareType_value = map[string]int32{
		"SHARE_TYPE_UNSPECIFIED":                 0,
		"ORGANIZATION":                           1,
		"SPECIFIC_PROJECTS":                      2,
		"LOCAL":                                  3,
		"DIRECT_PROJECTS_UNDER_SPECIFIC_FOLDERS": 4,
	}
)

func (x Allocation_ShareSettings_ShareType) Enum() *Allocation_ShareSettings_ShareType {
	p := new(Allocation_ShareSettings_ShareType)
	*p = x
	return p
}

func (x Allocation_ShareSettings_ShareType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Allocation_ShareSettings_ShareType) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_capacityplanner_v1beta_allocation_proto_enumTypes[2].Descriptor()
}

func (Allocation_ShareSettings_ShareType) Type() protoreflect.EnumType {
	return &file_google_cloud_capacityplanner_v1beta_allocation_proto_enumTypes[2]
}

func (x Allocation_ShareSettings_ShareType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Allocation_ShareSettings_ShareType.Descriptor instead.
func (Allocation_ShareSettings_ShareType) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_allocation_proto_rawDescGZIP(), []int{0, 1, 0}
}

// Repesents Allocation which is part of aggregated
// reservations data response of "QueryReservations".
type Allocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of the reservation which can only be for a specific SKU for now.
	//
	// Types that are assignable to Type:
	//
	//	*Allocation_SpecificAllocation
	Type isAllocation_Type `protobuf_oneof:"type"`
	// The unique identifier for the resource. This identifier is
	// defined by the server.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The creation timestamp for this allocation.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Zone in which the reservation resides.
	Zone string `protobuf:"bytes,3,opt,name=zone,proto3" json:"zone,omitempty"`
	// A description while creating reservation.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// The reservation resource name.
	Allocation     string `protobuf:"bytes,5,opt,name=allocation,proto3" json:"allocation,omitempty"`
	OwnerProjectId string `protobuf:"bytes,10,opt,name=owner_project_id,json=ownerProjectId,proto3" json:"owner_project_id,omitempty"`
	// The status of the reservation.
	Status Allocation_Status `protobuf:"varint,7,opt,name=status,proto3,enum=google.cloud.capacityplanner.v1beta.Allocation_Status" json:"status,omitempty"`
	// Specify share-settings to create a shared reservation.
	ShareSettings *Allocation_ShareSettings `protobuf:"bytes,8,opt,name=share_settings,json=shareSettings,proto3" json:"share_settings,omitempty"`
	// Absolute time in future when the reservation will be
	// auto-deleted by Compute Engine.
	AutoDeleteTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=auto_delete_time,json=autoDeleteTime,proto3" json:"auto_delete_time,omitempty"`
}

func (x *Allocation) Reset() {
	*x = Allocation{}
	mi := &file_google_cloud_capacityplanner_v1beta_allocation_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Allocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Allocation) ProtoMessage() {}

func (x *Allocation) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_capacityplanner_v1beta_allocation_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Allocation.ProtoReflect.Descriptor instead.
func (*Allocation) Descriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_allocation_proto_rawDescGZIP(), []int{0}
}

func (m *Allocation) GetType() isAllocation_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Allocation) GetSpecificAllocation() *Allocation_SpecificSKUAllocation {
	if x, ok := x.GetType().(*Allocation_SpecificAllocation); ok {
		return x.SpecificAllocation
	}
	return nil
}

func (x *Allocation) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Allocation) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Allocation) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *Allocation) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Allocation) GetAllocation() string {
	if x != nil {
		return x.Allocation
	}
	return ""
}

func (x *Allocation) GetOwnerProjectId() string {
	if x != nil {
		return x.OwnerProjectId
	}
	return ""
}

func (x *Allocation) GetStatus() Allocation_Status {
	if x != nil {
		return x.Status
	}
	return Allocation_STATUS_UNSPECIFIED
}

func (x *Allocation) GetShareSettings() *Allocation_ShareSettings {
	if x != nil {
		return x.ShareSettings
	}
	return nil
}

func (x *Allocation) GetAutoDeleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.AutoDeleteTime
	}
	return nil
}

type isAllocation_Type interface {
	isAllocation_Type()
}

type Allocation_SpecificAllocation struct {
	// Reservation for instances with specific machine shapes.
	SpecificAllocation *Allocation_SpecificSKUAllocation `protobuf:"bytes,6,opt,name=specific_allocation,json=specificAllocation,proto3,oneof"`
}

func (*Allocation_SpecificAllocation) isAllocation_Type() {}

// This reservation type allows to pre allocate specific instance
// configuration.
type Allocation_SpecificSKUAllocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The instance properties for the reservation.
	InstanceProperties *Allocation_SpecificSKUAllocation_AllocatedInstanceProperties `protobuf:"bytes,1,opt,name=instance_properties,json=instanceProperties,proto3" json:"instance_properties,omitempty"`
	// Specifies the number of resources that are allocated.
	Count int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	// Indicates how many instances are in use.
	UsedCount int64 `protobuf:"varint,3,opt,name=used_count,json=usedCount,proto3" json:"used_count,omitempty"`
	// Indicates how many instances are actually usable currently.
	AssuredCount int64 `protobuf:"varint,4,opt,name=assured_count,json=assuredCount,proto3" json:"assured_count,omitempty"`
}

func (x *Allocation_SpecificSKUAllocation) Reset() {
	*x = Allocation_SpecificSKUAllocation{}
	mi := &file_google_cloud_capacityplanner_v1beta_allocation_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Allocation_SpecificSKUAllocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Allocation_SpecificSKUAllocation) ProtoMessage() {}

func (x *Allocation_SpecificSKUAllocation) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_capacityplanner_v1beta_allocation_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Allocation_SpecificSKUAllocation.ProtoReflect.Descriptor instead.
func (*Allocation_SpecificSKUAllocation) Descriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_allocation_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Allocation_SpecificSKUAllocation) GetInstanceProperties() *Allocation_SpecificSKUAllocation_AllocatedInstanceProperties {
	if x != nil {
		return x.InstanceProperties
	}
	return nil
}

func (x *Allocation_SpecificSKUAllocation) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Allocation_SpecificSKUAllocation) GetUsedCount() int64 {
	if x != nil {
		return x.UsedCount
	}
	return 0
}

func (x *Allocation_SpecificSKUAllocation) GetAssuredCount() int64 {
	if x != nil {
		return x.AssuredCount
	}
	return 0
}

// The share setting for reservation.
type Allocation_ShareSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of sharing for this shared-reservation
	ShareType Allocation_ShareSettings_ShareType `protobuf:"varint,1,opt,name=share_type,json=shareType,proto3,enum=google.cloud.capacityplanner.v1beta.Allocation_ShareSettings_ShareType" json:"share_type,omitempty"`
	// A List of Project names to specify consumer projects for this
	// shared-reservation. This is only valid when share_type's value is
	// SPECIFIC_PROJECTS.
	Projects []string `protobuf:"bytes,2,rep,name=projects,proto3" json:"projects,omitempty"`
}

func (x *Allocation_ShareSettings) Reset() {
	*x = Allocation_ShareSettings{}
	mi := &file_google_cloud_capacityplanner_v1beta_allocation_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Allocation_ShareSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Allocation_ShareSettings) ProtoMessage() {}

func (x *Allocation_ShareSettings) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_capacityplanner_v1beta_allocation_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Allocation_ShareSettings.ProtoReflect.Descriptor instead.
func (*Allocation_ShareSettings) Descriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_allocation_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Allocation_ShareSettings) GetShareType() Allocation_ShareSettings_ShareType {
	if x != nil {
		return x.ShareType
	}
	return Allocation_ShareSettings_SHARE_TYPE_UNSPECIFIED
}

func (x *Allocation_ShareSettings) GetProjects() []string {
	if x != nil {
		return x.Projects
	}
	return nil
}

// Properties of the SKU instances being reserved.
type Allocation_SpecificSKUAllocation_AllocatedInstanceProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies type of machine (name only) which has fixed number of vCPUs
	// and fixed amount of memory. This also includes specifying custom
	// machine type following custom-NUMBER_OF_CPUS-AMOUNT_OF_MEMORY pattern.
	MachineType string `protobuf:"bytes,1,opt,name=machine_type,json=machineType,proto3" json:"machine_type,omitempty"`
	// Specifies accelerator type and count.
	GuestAccelerator []*Allocation_SpecificSKUAllocation_AllocatedInstanceProperties_AcceleratorConfig `protobuf:"bytes,2,rep,name=guest_accelerator,json=guestAccelerator,proto3" json:"guest_accelerator,omitempty"`
	// Minimum cpu platform the reservation.
	MinCpuPlatform string `protobuf:"bytes,3,opt,name=min_cpu_platform,json=minCpuPlatform,proto3" json:"min_cpu_platform,omitempty"`
	// Specifies amount of local ssd to reserve with each instance. The type
	// of disk is local-ssd.
	LocalSsd []*Allocation_SpecificSKUAllocation_AllocatedInstanceProperties_AllocatedDisk `protobuf:"bytes,4,rep,name=local_ssd,json=localSsd,proto3" json:"local_ssd,omitempty"`
}

func (x *Allocation_SpecificSKUAllocation_AllocatedInstanceProperties) Reset() {
	*x = Allocation_SpecificSKUAllocation_AllocatedInstanceProperties{}
	mi := &file_google_cloud_capacityplanner_v1beta_allocation_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Allocation_SpecificSKUAllocation_AllocatedInstanceProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Allocation_SpecificSKUAllocation_AllocatedInstanceProperties) ProtoMessage() {}

func (x *Allocation_SpecificSKUAllocation_AllocatedInstanceProperties) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_capacityplanner_v1beta_allocation_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Allocation_SpecificSKUAllocation_AllocatedInstanceProperties.ProtoReflect.Descriptor instead.
func (*Allocation_SpecificSKUAllocation_AllocatedInstanceProperties) Descriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_allocation_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Allocation_SpecificSKUAllocation_AllocatedInstanceProperties) GetMachineType() string {
	if x != nil {
		return x.MachineType
	}
	return ""
}

func (x *Allocation_SpecificSKUAllocation_AllocatedInstanceProperties) GetGuestAccelerator() []*Allocation_SpecificSKUAllocation_AllocatedInstanceProperties_AcceleratorConfig {
	if x != nil {
		return x.GuestAccelerator
	}
	return nil
}

func (x *Allocation_SpecificSKUAllocation_AllocatedInstanceProperties) GetMinCpuPlatform() string {
	if x != nil {
		return x.MinCpuPlatform
	}
	return ""
}

func (x *Allocation_SpecificSKUAllocation_AllocatedInstanceProperties) GetLocalSsd() []*Allocation_SpecificSKUAllocation_AllocatedInstanceProperties_AllocatedDisk {
	if x != nil {
		return x.LocalSsd
	}
	return nil
}

// A specification of the type and number of accelerator cards attached to
// the instance.
type Allocation_SpecificSKUAllocation_AllocatedInstanceProperties_AcceleratorConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Accelerator name.
	// See https://cloud.google.com/compute/docs/gpus/#introduction for a
	// full list of accelerator types.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// The number of the guest accelerator cards exposed to this instance.
	Count int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *Allocation_SpecificSKUAllocation_AllocatedInstanceProperties_AcceleratorConfig) Reset() {
	*x = Allocation_SpecificSKUAllocation_AllocatedInstanceProperties_AcceleratorConfig{}
	mi := &file_google_cloud_capacityplanner_v1beta_allocation_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Allocation_SpecificSKUAllocation_AllocatedInstanceProperties_AcceleratorConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Allocation_SpecificSKUAllocation_AllocatedInstanceProperties_AcceleratorConfig) ProtoMessage() {
}

func (x *Allocation_SpecificSKUAllocation_AllocatedInstanceProperties_AcceleratorConfig) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_capacityplanner_v1beta_allocation_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Allocation_SpecificSKUAllocation_AllocatedInstanceProperties_AcceleratorConfig.ProtoReflect.Descriptor instead.
func (*Allocation_SpecificSKUAllocation_AllocatedInstanceProperties_AcceleratorConfig) Descriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_allocation_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *Allocation_SpecificSKUAllocation_AllocatedInstanceProperties_AcceleratorConfig) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Allocation_SpecificSKUAllocation_AllocatedInstanceProperties_AcceleratorConfig) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// A specification of the interface and size of disk attached to
// the instance.
type Allocation_SpecificSKUAllocation_AllocatedInstanceProperties_AllocatedDisk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies the size of the disk in base-2 GB.
	DiskSizeGb int64 `protobuf:"varint,1,opt,name=disk_size_gb,json=diskSizeGb,proto3" json:"disk_size_gb,omitempty"`
	// Specifies the disk interface to use for attaching this disk, which is
	// either SCSI or NVME. The default is SCSI.
	DiskInterface Allocation_SpecificSKUAllocation_AllocatedInstanceProperties_AllocatedDisk_DiskInterface `protobuf:"varint,2,opt,name=disk_interface,json=diskInterface,proto3,enum=google.cloud.capacityplanner.v1beta.Allocation_SpecificSKUAllocation_AllocatedInstanceProperties_AllocatedDisk_DiskInterface" json:"disk_interface,omitempty"`
}

func (x *Allocation_SpecificSKUAllocation_AllocatedInstanceProperties_AllocatedDisk) Reset() {
	*x = Allocation_SpecificSKUAllocation_AllocatedInstanceProperties_AllocatedDisk{}
	mi := &file_google_cloud_capacityplanner_v1beta_allocation_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Allocation_SpecificSKUAllocation_AllocatedInstanceProperties_AllocatedDisk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Allocation_SpecificSKUAllocation_AllocatedInstanceProperties_AllocatedDisk) ProtoMessage() {}

func (x *Allocation_SpecificSKUAllocation_AllocatedInstanceProperties_AllocatedDisk) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_capacityplanner_v1beta_allocation_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Allocation_SpecificSKUAllocation_AllocatedInstanceProperties_AllocatedDisk.ProtoReflect.Descriptor instead.
func (*Allocation_SpecificSKUAllocation_AllocatedInstanceProperties_AllocatedDisk) Descriptor() ([]byte, []int) {
	return file_google_cloud_capacityplanner_v1beta_allocation_proto_rawDescGZIP(), []int{0, 0, 0, 1}
}

func (x *Allocation_SpecificSKUAllocation_AllocatedInstanceProperties_AllocatedDisk) GetDiskSizeGb() int64 {
	if x != nil {
		return x.DiskSizeGb
	}
	return 0
}

func (x *Allocation_SpecificSKUAllocation_AllocatedInstanceProperties_AllocatedDisk) GetDiskInterface() Allocation_SpecificSKUAllocation_AllocatedInstanceProperties_AllocatedDisk_DiskInterface {
	if x != nil {
		return x.DiskInterface
	}
	return Allocation_SpecificSKUAllocation_AllocatedInstanceProperties_AllocatedDisk_DISK_INTERFACE_UNSPECIFIED
}

var File_google_cloud_capacityplanner_v1beta_allocation_proto protoreflect.FileDescriptor

var file_google_cloud_capacityplanner_v1beta_allocation_proto_rawDesc = []byte{
	0x0a, 0x34, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x23, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf9, 0x0f, 0x0a,
	0x0a, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x78, 0x0a, 0x13, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x53, 0x4b, 0x55, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x12, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x4e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x64, 0x0a, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x44, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x6f,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e,
	0x61, 0x75, 0x74, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x9b,
	0x08, 0x0a, 0x15, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x53, 0x4b, 0x55, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x92, 0x01, 0x0a, 0x13, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x61, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x53, 0x4b, 0x55, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x75, 0x72,
	0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x92, 0x06, 0x0a, 0x1b, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0xa0, 0x01, 0x0a, 0x11, 0x67,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x53, 0x4b, 0x55, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x67, 0x75, 0x65,
	0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x28, 0x0a,
	0x10, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x43, 0x70, 0x75, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x8c, 0x01, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x73, 0x73, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x6f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x53, 0x4b, 0x55, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x53, 0x73, 0x64, 0x1a, 0x3d, 0x0a, 0x11, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0xb4, 0x02, 0x0a, 0x0d, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x6b, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x5f, 0x67, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64,
	0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x47, 0x62, 0x12, 0xa4, 0x01, 0x0a, 0x0e, 0x64, 0x69,
	0x73, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x7d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x53, 0x4b, 0x55, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x44,
	0x69, 0x73, 0x6b, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x22, 0x5a, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x43, 0x53, 0x49, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4e,
	0x56, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x56, 0x44, 0x49, 0x4d, 0x4d, 0x10,
	0x03, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x53, 0x43, 0x53, 0x49, 0x10, 0x04, 0x1a, 0x9d, 0x02, 0x0a,
	0x0d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x66,
	0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x47, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x09, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x16, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c,
	0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x15,
	0x0a, 0x11, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45,
	0x43, 0x54, 0x53, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x03,
	0x12, 0x2a, 0x0a, 0x26, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45,
	0x43, 0x54, 0x53, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x43, 0x5f, 0x46, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x53, 0x10, 0x04, 0x22, 0x62, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x41,
	0x44, 0x59, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47,
	0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x50, 0x44, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x05,
	0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x42, 0x84, 0x02, 0x0a, 0x27, 0x63, 0x6f, 0x6d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x42, 0x0f, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x51, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x70,
	0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x70, 0x62, 0x3b, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x70, 0x62, 0xaa, 0x02, 0x23, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x56, 0x31, 0x42, 0x65, 0x74, 0x61,
	0xca, 0x02, 0x23, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c,
	0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5c,
	0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0xea, 0x02, 0x26, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a,
	0x3a, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_capacityplanner_v1beta_allocation_proto_rawDescOnce sync.Once
	file_google_cloud_capacityplanner_v1beta_allocation_proto_rawDescData = file_google_cloud_capacityplanner_v1beta_allocation_proto_rawDesc
)

func file_google_cloud_capacityplanner_v1beta_allocation_proto_rawDescGZIP() []byte {
	file_google_cloud_capacityplanner_v1beta_allocation_proto_rawDescOnce.Do(func() {
		file_google_cloud_capacityplanner_v1beta_allocation_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_capacityplanner_v1beta_allocation_proto_rawDescData)
	})
	return file_google_cloud_capacityplanner_v1beta_allocation_proto_rawDescData
}

var file_google_cloud_capacityplanner_v1beta_allocation_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_google_cloud_capacityplanner_v1beta_allocation_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_google_cloud_capacityplanner_v1beta_allocation_proto_goTypes = []any{
	(Allocation_Status)(0), // 0: google.cloud.capacityplanner.v1beta.Allocation.Status
	(Allocation_SpecificSKUAllocation_AllocatedInstanceProperties_AllocatedDisk_DiskInterface)(0), // 1: google.cloud.capacityplanner.v1beta.Allocation.SpecificSKUAllocation.AllocatedInstanceProperties.AllocatedDisk.DiskInterface
	(Allocation_ShareSettings_ShareType)(0),                                                       // 2: google.cloud.capacityplanner.v1beta.Allocation.ShareSettings.ShareType
	(*Allocation)(nil),                                                                            // 3: google.cloud.capacityplanner.v1beta.Allocation
	(*Allocation_SpecificSKUAllocation)(nil),                                                      // 4: google.cloud.capacityplanner.v1beta.Allocation.SpecificSKUAllocation
	(*Allocation_ShareSettings)(nil),                                                              // 5: google.cloud.capacityplanner.v1beta.Allocation.ShareSettings
	(*Allocation_SpecificSKUAllocation_AllocatedInstanceProperties)(nil),                          // 6: google.cloud.capacityplanner.v1beta.Allocation.SpecificSKUAllocation.AllocatedInstanceProperties
	(*Allocation_SpecificSKUAllocation_AllocatedInstanceProperties_AcceleratorConfig)(nil),        // 7: google.cloud.capacityplanner.v1beta.Allocation.SpecificSKUAllocation.AllocatedInstanceProperties.AcceleratorConfig
	(*Allocation_SpecificSKUAllocation_AllocatedInstanceProperties_AllocatedDisk)(nil),            // 8: google.cloud.capacityplanner.v1beta.Allocation.SpecificSKUAllocation.AllocatedInstanceProperties.AllocatedDisk
	(*timestamppb.Timestamp)(nil),                                                                 // 9: google.protobuf.Timestamp
}
var file_google_cloud_capacityplanner_v1beta_allocation_proto_depIdxs = []int32{
	4,  // 0: google.cloud.capacityplanner.v1beta.Allocation.specific_allocation:type_name -> google.cloud.capacityplanner.v1beta.Allocation.SpecificSKUAllocation
	9,  // 1: google.cloud.capacityplanner.v1beta.Allocation.create_time:type_name -> google.protobuf.Timestamp
	0,  // 2: google.cloud.capacityplanner.v1beta.Allocation.status:type_name -> google.cloud.capacityplanner.v1beta.Allocation.Status
	5,  // 3: google.cloud.capacityplanner.v1beta.Allocation.share_settings:type_name -> google.cloud.capacityplanner.v1beta.Allocation.ShareSettings
	9,  // 4: google.cloud.capacityplanner.v1beta.Allocation.auto_delete_time:type_name -> google.protobuf.Timestamp
	6,  // 5: google.cloud.capacityplanner.v1beta.Allocation.SpecificSKUAllocation.instance_properties:type_name -> google.cloud.capacityplanner.v1beta.Allocation.SpecificSKUAllocation.AllocatedInstanceProperties
	2,  // 6: google.cloud.capacityplanner.v1beta.Allocation.ShareSettings.share_type:type_name -> google.cloud.capacityplanner.v1beta.Allocation.ShareSettings.ShareType
	7,  // 7: google.cloud.capacityplanner.v1beta.Allocation.SpecificSKUAllocation.AllocatedInstanceProperties.guest_accelerator:type_name -> google.cloud.capacityplanner.v1beta.Allocation.SpecificSKUAllocation.AllocatedInstanceProperties.AcceleratorConfig
	8,  // 8: google.cloud.capacityplanner.v1beta.Allocation.SpecificSKUAllocation.AllocatedInstanceProperties.local_ssd:type_name -> google.cloud.capacityplanner.v1beta.Allocation.SpecificSKUAllocation.AllocatedInstanceProperties.AllocatedDisk
	1,  // 9: google.cloud.capacityplanner.v1beta.Allocation.SpecificSKUAllocation.AllocatedInstanceProperties.AllocatedDisk.disk_interface:type_name -> google.cloud.capacityplanner.v1beta.Allocation.SpecificSKUAllocation.AllocatedInstanceProperties.AllocatedDisk.DiskInterface
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_google_cloud_capacityplanner_v1beta_allocation_proto_init() }
func file_google_cloud_capacityplanner_v1beta_allocation_proto_init() {
	if File_google_cloud_capacityplanner_v1beta_allocation_proto != nil {
		return
	}
	file_google_cloud_capacityplanner_v1beta_allocation_proto_msgTypes[0].OneofWrappers = []any{
		(*Allocation_SpecificAllocation)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_capacityplanner_v1beta_allocation_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_cloud_capacityplanner_v1beta_allocation_proto_goTypes,
		DependencyIndexes: file_google_cloud_capacityplanner_v1beta_allocation_proto_depIdxs,
		EnumInfos:         file_google_cloud_capacityplanner_v1beta_allocation_proto_enumTypes,
		MessageInfos:      file_google_cloud_capacityplanner_v1beta_allocation_proto_msgTypes,
	}.Build()
	File_google_cloud_capacityplanner_v1beta_allocation_proto = out.File
	file_google_cloud_capacityplanner_v1beta_allocation_proto_rawDesc = nil
	file_google_cloud_capacityplanner_v1beta_allocation_proto_goTypes = nil
	file_google_cloud_capacityplanner_v1beta_allocation_proto_depIdxs = nil
}
