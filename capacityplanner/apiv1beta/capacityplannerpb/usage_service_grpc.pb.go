// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/capacityplanner/v1beta/usage_service.proto

package capacityplannerpb

import (
	context "context"

	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UsageService_QueryUsageHistories_FullMethodName     = "/google.cloud.capacityplanner.v1beta.UsageService/QueryUsageHistories"
	UsageService_QueryForecasts_FullMethodName          = "/google.cloud.capacityplanner.v1beta.UsageService/QueryForecasts"
	UsageService_QueryReservations_FullMethodName       = "/google.cloud.capacityplanner.v1beta.UsageService/QueryReservations"
	UsageService_ExportUsageHistories_FullMethodName    = "/google.cloud.capacityplanner.v1beta.UsageService/ExportUsageHistories"
	UsageService_ExportForecasts_FullMethodName         = "/google.cloud.capacityplanner.v1beta.UsageService/ExportForecasts"
	UsageService_ExportReservationsUsage_FullMethodName = "/google.cloud.capacityplanner.v1beta.UsageService/ExportReservationsUsage"
)

// UsageServiceClient is the client API for UsageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsageServiceClient interface {
	// Returns a list of the usage histories that are in the parent parameter
	// and match your specified filters.
	QueryUsageHistories(ctx context.Context, in *QueryUsageHistoriesRequest, opts ...grpc.CallOption) (*QueryUsageHistoriesResponse, error)
	// Returns a list of the forecasts that are in the parent parameter
	// and match your specified filters.
	QueryForecasts(ctx context.Context, in *QueryForecastsRequest, opts ...grpc.CallOption) (*QueryForecastsResponse, error)
	// Returns a list of the reservations that are in the parent parameter
	// and match your specified filters.
	QueryReservations(ctx context.Context, in *QueryReservationsRequest, opts ...grpc.CallOption) (*QueryReservationsResponse, error)
	// Exports historical usage data requested by user into either an existing
	// Cloud Storage bucket or a BigQuery table.
	ExportUsageHistories(ctx context.Context, in *ExportUsageHistoriesRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Exports forecasted usage data requested by user into either an existing
	// Cloud Storage bucket or a BigQuery table.
	ExportForecasts(ctx context.Context, in *ExportForecastsRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Exports reservations usage data requested by user into either an existing
	// Cloud Storage bucket or a new/existing BigQuery table.
	ExportReservationsUsage(ctx context.Context, in *ExportReservationsUsageRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type usageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUsageServiceClient(cc grpc.ClientConnInterface) UsageServiceClient {
	return &usageServiceClient{cc}
}

func (c *usageServiceClient) QueryUsageHistories(ctx context.Context, in *QueryUsageHistoriesRequest, opts ...grpc.CallOption) (*QueryUsageHistoriesResponse, error) {
	out := new(QueryUsageHistoriesResponse)
	err := c.cc.Invoke(ctx, UsageService_QueryUsageHistories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usageServiceClient) QueryForecasts(ctx context.Context, in *QueryForecastsRequest, opts ...grpc.CallOption) (*QueryForecastsResponse, error) {
	out := new(QueryForecastsResponse)
	err := c.cc.Invoke(ctx, UsageService_QueryForecasts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usageServiceClient) QueryReservations(ctx context.Context, in *QueryReservationsRequest, opts ...grpc.CallOption) (*QueryReservationsResponse, error) {
	out := new(QueryReservationsResponse)
	err := c.cc.Invoke(ctx, UsageService_QueryReservations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usageServiceClient) ExportUsageHistories(ctx context.Context, in *ExportUsageHistoriesRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, UsageService_ExportUsageHistories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usageServiceClient) ExportForecasts(ctx context.Context, in *ExportForecastsRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, UsageService_ExportForecasts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usageServiceClient) ExportReservationsUsage(ctx context.Context, in *ExportReservationsUsageRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, UsageService_ExportReservationsUsage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsageServiceServer is the server API for UsageService service.
// All implementations should embed UnimplementedUsageServiceServer
// for forward compatibility
type UsageServiceServer interface {
	// Returns a list of the usage histories that are in the parent parameter
	// and match your specified filters.
	QueryUsageHistories(context.Context, *QueryUsageHistoriesRequest) (*QueryUsageHistoriesResponse, error)
	// Returns a list of the forecasts that are in the parent parameter
	// and match your specified filters.
	QueryForecasts(context.Context, *QueryForecastsRequest) (*QueryForecastsResponse, error)
	// Returns a list of the reservations that are in the parent parameter
	// and match your specified filters.
	QueryReservations(context.Context, *QueryReservationsRequest) (*QueryReservationsResponse, error)
	// Exports historical usage data requested by user into either an existing
	// Cloud Storage bucket or a BigQuery table.
	ExportUsageHistories(context.Context, *ExportUsageHistoriesRequest) (*longrunningpb.Operation, error)
	// Exports forecasted usage data requested by user into either an existing
	// Cloud Storage bucket or a BigQuery table.
	ExportForecasts(context.Context, *ExportForecastsRequest) (*longrunningpb.Operation, error)
	// Exports reservations usage data requested by user into either an existing
	// Cloud Storage bucket or a new/existing BigQuery table.
	ExportReservationsUsage(context.Context, *ExportReservationsUsageRequest) (*longrunningpb.Operation, error)
}

// UnimplementedUsageServiceServer should be embedded to have forward compatible implementations.
type UnimplementedUsageServiceServer struct {
}

func (UnimplementedUsageServiceServer) QueryUsageHistories(context.Context, *QueryUsageHistoriesRequest) (*QueryUsageHistoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUsageHistories not implemented")
}
func (UnimplementedUsageServiceServer) QueryForecasts(context.Context, *QueryForecastsRequest) (*QueryForecastsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryForecasts not implemented")
}
func (UnimplementedUsageServiceServer) QueryReservations(context.Context, *QueryReservationsRequest) (*QueryReservationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryReservations not implemented")
}
func (UnimplementedUsageServiceServer) ExportUsageHistories(context.Context, *ExportUsageHistoriesRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportUsageHistories not implemented")
}
func (UnimplementedUsageServiceServer) ExportForecasts(context.Context, *ExportForecastsRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportForecasts not implemented")
}
func (UnimplementedUsageServiceServer) ExportReservationsUsage(context.Context, *ExportReservationsUsageRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportReservationsUsage not implemented")
}

// UnsafeUsageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsageServiceServer will
// result in compilation errors.
type UnsafeUsageServiceServer interface {
	mustEmbedUnimplementedUsageServiceServer()
}

func RegisterUsageServiceServer(s grpc.ServiceRegistrar, srv UsageServiceServer) {
	s.RegisterService(&UsageService_ServiceDesc, srv)
}

func _UsageService_QueryUsageHistories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUsageHistoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsageServiceServer).QueryUsageHistories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsageService_QueryUsageHistories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsageServiceServer).QueryUsageHistories(ctx, req.(*QueryUsageHistoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsageService_QueryForecasts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryForecastsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsageServiceServer).QueryForecasts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsageService_QueryForecasts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsageServiceServer).QueryForecasts(ctx, req.(*QueryForecastsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsageService_QueryReservations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReservationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsageServiceServer).QueryReservations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsageService_QueryReservations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsageServiceServer).QueryReservations(ctx, req.(*QueryReservationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsageService_ExportUsageHistories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportUsageHistoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsageServiceServer).ExportUsageHistories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsageService_ExportUsageHistories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsageServiceServer).ExportUsageHistories(ctx, req.(*ExportUsageHistoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsageService_ExportForecasts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportForecastsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsageServiceServer).ExportForecasts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsageService_ExportForecasts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsageServiceServer).ExportForecasts(ctx, req.(*ExportForecastsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsageService_ExportReservationsUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportReservationsUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsageServiceServer).ExportReservationsUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsageService_ExportReservationsUsage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsageServiceServer).ExportReservationsUsage(ctx, req.(*ExportReservationsUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UsageService_ServiceDesc is the grpc.ServiceDesc for UsageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UsageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.capacityplanner.v1beta.UsageService",
	HandlerType: (*UsageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryUsageHistories",
			Handler:    _UsageService_QueryUsageHistories_Handler,
		},
		{
			MethodName: "QueryForecasts",
			Handler:    _UsageService_QueryForecasts_Handler,
		},
		{
			MethodName: "QueryReservations",
			Handler:    _UsageService_QueryReservations_Handler,
		},
		{
			MethodName: "ExportUsageHistories",
			Handler:    _UsageService_ExportUsageHistories_Handler,
		},
		{
			MethodName: "ExportForecasts",
			Handler:    _UsageService_ExportForecasts_Handler,
		},
		{
			MethodName: "ExportReservationsUsage",
			Handler:    _UsageService_ExportReservationsUsage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/capacityplanner/v1beta/usage_service.proto",
}
