// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.7
// source: google/cloud/geminidataanalytics/v1beta/data_chat_service.proto

package geminidataanalyticspb

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// List of context versions supported by DCS.
// There are two versions of context. This is to maintain versioning for the
// data agent.
type DataAgentContext_ContextVersion int32

const (
	// Unspecified or unrecognized.
	DataAgentContext_CONTEXT_VERSION_UNSPECIFIED DataAgentContext_ContextVersion = 0
	// Using this version, DCS will use the latest staging context for the
	// data agent.
	DataAgentContext_STAGING DataAgentContext_ContextVersion = 1
	// Using this version, DCS will use the latest published context for the
	// data agent.
	DataAgentContext_PUBLISHED DataAgentContext_ContextVersion = 2
)

// Enum value maps for DataAgentContext_ContextVersion.
var (
	DataAgentContext_ContextVersion_name = map[int32]string{
		0: "CONTEXT_VERSION_UNSPECIFIED",
		1: "STAGING",
		2: "PUBLISHED",
	}
	DataAgentContext_ContextVersion_value = map[string]int32{
		"CONTEXT_VERSION_UNSPECIFIED": 0,
		"STAGING":                     1,
		"PUBLISHED":                   2,
	}
)

func (x DataAgentContext_ContextVersion) Enum() *DataAgentContext_ContextVersion {
	p := new(DataAgentContext_ContextVersion)
	*p = x
	return p
}

func (x DataAgentContext_ContextVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataAgentContext_ContextVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_enumTypes[0].Descriptor()
}

func (DataAgentContext_ContextVersion) Type() protoreflect.EnumType {
	return &file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_enumTypes[0]
}

func (x DataAgentContext_ContextVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataAgentContext_ContextVersion.Descriptor instead.
func (DataAgentContext_ContextVersion) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_rawDescGZIP(), []int{4, 0}
}

// Request for listing chat messages based on parent and conversation_id.
type ListMessagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The conversation to list messages under.
	// Format:
	// `projects/{project}/locations/{location}/conversations/{conversation_id}`
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Optional. Requested page size. Server may return fewer items than
	// requested. The max page size is 100. All larger page sizes will be coerced
	// to 100. If unspecified, server will pick 50 as an approperiate default.
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Optional. A token identifying a page of results the server should return.
	PageToken string `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Optional. Filtering results. See [AIP-160](https://google.aip.dev/160) for
	// syntax.
	//
	// ListMessages allows filtering by:
	//   - create_time (e.g., `createTime > "2025-01-28T06:51:56-08:00"`)
	//   - update_time
	Filter string `protobuf:"bytes,5,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListMessagesRequest) Reset() {
	*x = ListMessagesRequest{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMessagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMessagesRequest) ProtoMessage() {}

func (x *ListMessagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMessagesRequest.ProtoReflect.Descriptor instead.
func (*ListMessagesRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_rawDescGZIP(), []int{0}
}

func (x *ListMessagesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListMessagesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListMessagesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListMessagesRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// Response for listing chat messages.
type ListMessagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of chat messages.
	Messages []*StorageMessage `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	// A token identifying a page of results the server should return.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListMessagesResponse) Reset() {
	*x = ListMessagesResponse{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMessagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMessagesResponse) ProtoMessage() {}

func (x *ListMessagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMessagesResponse.ProtoReflect.Descriptor instead.
func (*ListMessagesResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListMessagesResponse) GetMessages() []*StorageMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *ListMessagesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// A stored message containing user message or system message.
type StorageMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique resource name of a chat message.
	MessageId string `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// The message content.
	Message *Message `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *StorageMessage) Reset() {
	*x = StorageMessage{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StorageMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageMessage) ProtoMessage() {}

func (x *StorageMessage) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageMessage.ProtoReflect.Descriptor instead.
func (*StorageMessage) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_rawDescGZIP(), []int{2}
}

func (x *StorageMessage) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *StorageMessage) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

// Request for Chat.
type ChatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Context Provider for the chat request.
	// It can either be -
	// inline_context, which is a context provided inline in the request.
	// data_agent, which is a reference to a data agent resource.
	// conversation_reference, which is a reference to a persisted conversation
	// and context using conversation_id and agent_id.
	//
	// Types that are assignable to ContextProvider:
	//
	//	*ChatRequest_InlineContext
	//	*ChatRequest_ConversationReference
	//	*ChatRequest_DataAgentContext
	ContextProvider isChatRequest_ContextProvider `protobuf_oneof:"context_provider"`
	// Optional. The Google Cloud project to be used for quota and billing.
	//
	// Deprecated: Marked as deprecated in google/cloud/geminidataanalytics/v1beta/data_chat_service.proto.
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// Required. The parent value for chat request.
	// Pattern: `projects/{project}/locations/{location}`
	Parent string `protobuf:"bytes,3,opt,name=parent,proto3" json:"parent,omitempty"`
	// Required. Content of current conversation.
	Messages []*Message `protobuf:"bytes,2,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *ChatRequest) Reset() {
	*x = ChatRequest{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatRequest) ProtoMessage() {}

func (x *ChatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatRequest.ProtoReflect.Descriptor instead.
func (*ChatRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_rawDescGZIP(), []int{3}
}

func (m *ChatRequest) GetContextProvider() isChatRequest_ContextProvider {
	if m != nil {
		return m.ContextProvider
	}
	return nil
}

func (x *ChatRequest) GetInlineContext() *Context {
	if x, ok := x.GetContextProvider().(*ChatRequest_InlineContext); ok {
		return x.InlineContext
	}
	return nil
}

func (x *ChatRequest) GetConversationReference() *ConversationReference {
	if x, ok := x.GetContextProvider().(*ChatRequest_ConversationReference); ok {
		return x.ConversationReference
	}
	return nil
}

func (x *ChatRequest) GetDataAgentContext() *DataAgentContext {
	if x, ok := x.GetContextProvider().(*ChatRequest_DataAgentContext); ok {
		return x.DataAgentContext
	}
	return nil
}

// Deprecated: Marked as deprecated in google/cloud/geminidataanalytics/v1beta/data_chat_service.proto.
func (x *ChatRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *ChatRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ChatRequest) GetMessages() []*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

type isChatRequest_ContextProvider interface {
	isChatRequest_ContextProvider()
}

type ChatRequest_InlineContext struct {
	// Optional. Inline context for the chat request. Use this to chat
	// statelessly (without managed conversation persistence and without an
	// Agent) by passing all context inline.
	InlineContext *Context `protobuf:"bytes,101,opt,name=inline_context,json=inlineContext,proto3,oneof"`
}

type ChatRequest_ConversationReference struct {
	// Optional. Reference to a persisted conversation and agent context.
	// Use this to chat with an Agent using managed conversation persistence.
	ConversationReference *ConversationReference `protobuf:"bytes,103,opt,name=conversation_reference,json=conversationReference,proto3,oneof"`
}

type ChatRequest_DataAgentContext struct {
	// Optional. Context for the chat request. Use this to chat with an Agent
	// statelessly, without managed conversation persistence.
	DataAgentContext *DataAgentContext `protobuf:"bytes,104,opt,name=data_agent_context,json=dataAgentContext,proto3,oneof"`
}

func (*ChatRequest_InlineContext) isChatRequest_ContextProvider() {}

func (*ChatRequest_ConversationReference) isChatRequest_ContextProvider() {}

func (*ChatRequest_DataAgentContext) isChatRequest_ContextProvider() {}

// Context for the chat request using a data agent.
type DataAgentContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the data agent resource.
	DataAgent string `protobuf:"bytes,1,opt,name=data_agent,json=dataAgent,proto3" json:"data_agent,omitempty"`
	// Optional. The credentials to use when calling the Looker data source.
	//
	// Currently supports both OAuth token and API key-based credentials, as
	// described in
	// [Authentication with an
	// SDK](https://cloud.google.com/looker/docs/api-auth#authentication_with_an_sdk).
	Credentials *Credentials `protobuf:"bytes,2,opt,name=credentials,proto3" json:"credentials,omitempty"`
	// Optional. Version of context to be used by DCS (e.g. STAGING, PUBLISHED)
	ContextVersion DataAgentContext_ContextVersion `protobuf:"varint,3,opt,name=context_version,json=contextVersion,proto3,enum=google.cloud.geminidataanalytics.v1beta.DataAgentContext_ContextVersion" json:"context_version,omitempty"`
}

func (x *DataAgentContext) Reset() {
	*x = DataAgentContext{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataAgentContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataAgentContext) ProtoMessage() {}

func (x *DataAgentContext) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataAgentContext.ProtoReflect.Descriptor instead.
func (*DataAgentContext) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_rawDescGZIP(), []int{4}
}

func (x *DataAgentContext) GetDataAgent() string {
	if x != nil {
		return x.DataAgent
	}
	return ""
}

func (x *DataAgentContext) GetCredentials() *Credentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *DataAgentContext) GetContextVersion() DataAgentContext_ContextVersion {
	if x != nil {
		return x.ContextVersion
	}
	return DataAgentContext_CONTEXT_VERSION_UNSPECIFIED
}

// Reference to a persisted conversation and agent context.
type ConversationReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Name of the conversation resource.
	// Format:
	// `projects/{project}/locations/{location}/conversations/{conversation_id}`
	Conversation string `protobuf:"bytes,1,opt,name=conversation,proto3" json:"conversation,omitempty"`
	// Required. Context for the chat request using a data agent.
	DataAgentContext *DataAgentContext `protobuf:"bytes,3,opt,name=data_agent_context,json=dataAgentContext,proto3" json:"data_agent_context,omitempty"`
}

func (x *ConversationReference) Reset() {
	*x = ConversationReference{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConversationReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationReference) ProtoMessage() {}

func (x *ConversationReference) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationReference.ProtoReflect.Descriptor instead.
func (*ConversationReference) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_rawDescGZIP(), []int{5}
}

func (x *ConversationReference) GetConversation() string {
	if x != nil {
		return x.Conversation
	}
	return ""
}

func (x *ConversationReference) GetDataAgentContext() *DataAgentContext {
	if x != nil {
		return x.DataAgentContext
	}
	return nil
}

// A message from an interaction between the user and the system.
type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The kind of message.
	//
	// Types that are assignable to Kind:
	//
	//	*Message_UserMessage
	//	*Message_SystemMessage
	Kind isMessage_Kind `protobuf_oneof:"kind"`
	// Output only. For user messages, this is the time at which the system
	// received the message. For system messages, this is the time at which the
	// system generated the message.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Optional. unique id of the message in the conversation for persistence.
	MessageId string `protobuf:"bytes,4,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_rawDescGZIP(), []int{6}
}

func (m *Message) GetKind() isMessage_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *Message) GetUserMessage() *UserMessage {
	if x, ok := x.GetKind().(*Message_UserMessage); ok {
		return x.UserMessage
	}
	return nil
}

func (x *Message) GetSystemMessage() *SystemMessage {
	if x, ok := x.GetKind().(*Message_SystemMessage); ok {
		return x.SystemMessage
	}
	return nil
}

func (x *Message) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Message) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

type isMessage_Kind interface {
	isMessage_Kind()
}

type Message_UserMessage struct {
	// A message from the user that is interacting with the system.
	UserMessage *UserMessage `protobuf:"bytes,2,opt,name=user_message,json=userMessage,proto3,oneof"`
}

type Message_SystemMessage struct {
	// A message from the system in response to the user.
	SystemMessage *SystemMessage `protobuf:"bytes,3,opt,name=system_message,json=systemMessage,proto3,oneof"`
}

func (*Message_UserMessage) isMessage_Kind() {}

func (*Message_SystemMessage) isMessage_Kind() {}

// A message from the user that is interacting with the system.
type UserMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The kind of content in the user message.
	//
	// Types that are assignable to Kind:
	//
	//	*UserMessage_Text
	Kind isUserMessage_Kind `protobuf_oneof:"kind"`
}

func (x *UserMessage) Reset() {
	*x = UserMessage{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMessage) ProtoMessage() {}

func (x *UserMessage) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMessage.ProtoReflect.Descriptor instead.
func (*UserMessage) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_rawDescGZIP(), []int{7}
}

func (m *UserMessage) GetKind() isUserMessage_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *UserMessage) GetText() string {
	if x, ok := x.GetKind().(*UserMessage_Text); ok {
		return x.Text
	}
	return ""
}

type isUserMessage_Kind interface {
	isUserMessage_Kind()
}

type UserMessage_Text struct {
	// Text should use this field instead of blob.
	Text string `protobuf:"bytes,1,opt,name=text,proto3,oneof"`
}

func (*UserMessage_Text) isUserMessage_Kind() {}

// A message from the system in response to the user. This message can also be a
// message from the user as historical context for multiturn conversations with
// the system.
type SystemMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The kind of content in the system message.
	//
	// Types that are assignable to Kind:
	//
	//	*SystemMessage_Text
	//	*SystemMessage_Schema
	//	*SystemMessage_Data
	//	*SystemMessage_Analysis
	//	*SystemMessage_Chart
	//	*SystemMessage_Error
	Kind isSystemMessage_Kind `protobuf_oneof:"kind"`
	// Identifies the group that the event belongs to. Similar events are deemed
	// to be logically relevant to each other and should be shown together in
	// the UI.
	GroupId *int32 `protobuf:"varint,12,opt,name=group_id,json=groupId,proto3,oneof" json:"group_id,omitempty"`
}

func (x *SystemMessage) Reset() {
	*x = SystemMessage{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SystemMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemMessage) ProtoMessage() {}

func (x *SystemMessage) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemMessage.ProtoReflect.Descriptor instead.
func (*SystemMessage) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_rawDescGZIP(), []int{8}
}

func (m *SystemMessage) GetKind() isSystemMessage_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *SystemMessage) GetText() *TextMessage {
	if x, ok := x.GetKind().(*SystemMessage_Text); ok {
		return x.Text
	}
	return nil
}

func (x *SystemMessage) GetSchema() *SchemaMessage {
	if x, ok := x.GetKind().(*SystemMessage_Schema); ok {
		return x.Schema
	}
	return nil
}

func (x *SystemMessage) GetData() *DataMessage {
	if x, ok := x.GetKind().(*SystemMessage_Data); ok {
		return x.Data
	}
	return nil
}

func (x *SystemMessage) GetAnalysis() *AnalysisMessage {
	if x, ok := x.GetKind().(*SystemMessage_Analysis); ok {
		return x.Analysis
	}
	return nil
}

func (x *SystemMessage) GetChart() *ChartMessage {
	if x, ok := x.GetKind().(*SystemMessage_Chart); ok {
		return x.Chart
	}
	return nil
}

func (x *SystemMessage) GetError() *ErrorMessage {
	if x, ok := x.GetKind().(*SystemMessage_Error); ok {
		return x.Error
	}
	return nil
}

func (x *SystemMessage) GetGroupId() int32 {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return 0
}

type isSystemMessage_Kind interface {
	isSystemMessage_Kind()
}

type SystemMessage_Text struct {
	// A direct natural language response to the user message.
	Text *TextMessage `protobuf:"bytes,1,opt,name=text,proto3,oneof"`
}

type SystemMessage_Schema struct {
	// A message produced during schema resolution.
	Schema *SchemaMessage `protobuf:"bytes,2,opt,name=schema,proto3,oneof"`
}

type SystemMessage_Data struct {
	// A message produced during data retrieval.
	Data *DataMessage `protobuf:"bytes,3,opt,name=data,proto3,oneof"`
}

type SystemMessage_Analysis struct {
	// A message produced during analysis.
	Analysis *AnalysisMessage `protobuf:"bytes,4,opt,name=analysis,proto3,oneof"`
}

type SystemMessage_Chart struct {
	// A message produced during chart generation.
	Chart *ChartMessage `protobuf:"bytes,5,opt,name=chart,proto3,oneof"`
}

type SystemMessage_Error struct {
	// An error message.
	Error *ErrorMessage `protobuf:"bytes,6,opt,name=error,proto3,oneof"`
}

func (*SystemMessage_Text) isSystemMessage_Kind() {}

func (*SystemMessage_Schema) isSystemMessage_Kind() {}

func (*SystemMessage_Data) isSystemMessage_Kind() {}

func (*SystemMessage_Analysis) isSystemMessage_Kind() {}

func (*SystemMessage_Chart) isSystemMessage_Kind() {}

func (*SystemMessage_Error) isSystemMessage_Kind() {}

// A multi-part text message.
type TextMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The parts of the message.
	Parts []string `protobuf:"bytes,1,rep,name=parts,proto3" json:"parts,omitempty"`
}

func (x *TextMessage) Reset() {
	*x = TextMessage{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TextMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextMessage) ProtoMessage() {}

func (x *TextMessage) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextMessage.ProtoReflect.Descriptor instead.
func (*TextMessage) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_rawDescGZIP(), []int{9}
}

func (x *TextMessage) GetParts() []string {
	if x != nil {
		return x.Parts
	}
	return nil
}

// A message produced during schema resolution.
type SchemaMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether this message contains the query or the result of the schema
	// resolution.
	//
	// Types that are assignable to Kind:
	//
	//	*SchemaMessage_Query
	//	*SchemaMessage_Result
	Kind isSchemaMessage_Kind `protobuf_oneof:"kind"`
}

func (x *SchemaMessage) Reset() {
	*x = SchemaMessage{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchemaMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaMessage) ProtoMessage() {}

func (x *SchemaMessage) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaMessage.ProtoReflect.Descriptor instead.
func (*SchemaMessage) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_rawDescGZIP(), []int{10}
}

func (m *SchemaMessage) GetKind() isSchemaMessage_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *SchemaMessage) GetQuery() *SchemaQuery {
	if x, ok := x.GetKind().(*SchemaMessage_Query); ok {
		return x.Query
	}
	return nil
}

func (x *SchemaMessage) GetResult() *SchemaResult {
	if x, ok := x.GetKind().(*SchemaMessage_Result); ok {
		return x.Result
	}
	return nil
}

type isSchemaMessage_Kind interface {
	isSchemaMessage_Kind()
}

type SchemaMessage_Query struct {
	// A schema resolution query.
	Query *SchemaQuery `protobuf:"bytes,1,opt,name=query,proto3,oneof"`
}

type SchemaMessage_Result struct {
	// The result of a schema resolution query.
	Result *SchemaResult `protobuf:"bytes,2,opt,name=result,proto3,oneof"`
}

func (*SchemaMessage_Query) isSchemaMessage_Kind() {}

func (*SchemaMessage_Result) isSchemaMessage_Kind() {}

// A query for resolving the schema relevant to the posed question.
type SchemaQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The question to send to the system for schema resolution.
	Question string `protobuf:"bytes,1,opt,name=question,proto3" json:"question,omitempty"`
}

func (x *SchemaQuery) Reset() {
	*x = SchemaQuery{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchemaQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaQuery) ProtoMessage() {}

func (x *SchemaQuery) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaQuery.ProtoReflect.Descriptor instead.
func (*SchemaQuery) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_rawDescGZIP(), []int{11}
}

func (x *SchemaQuery) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

// The result of schema resolution.
type SchemaResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The datasources used to resolve the schema query.
	Datasources []*Datasource `protobuf:"bytes,1,rep,name=datasources,proto3" json:"datasources,omitempty"`
}

func (x *SchemaResult) Reset() {
	*x = SchemaResult{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchemaResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaResult) ProtoMessage() {}

func (x *SchemaResult) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaResult.ProtoReflect.Descriptor instead.
func (*SchemaResult) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_rawDescGZIP(), []int{12}
}

func (x *SchemaResult) GetDatasources() []*Datasource {
	if x != nil {
		return x.Datasources
	}
	return nil
}

// A message produced during data retrieval.
type DataMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether this message contains the query, the result, or generated SQL for
	// the data retrieval.
	//
	// Types that are assignable to Kind:
	//
	//	*DataMessage_Query
	//	*DataMessage_GeneratedSql
	//	*DataMessage_Result
	//	*DataMessage_GeneratedLookerQuery
	//	*DataMessage_BigQueryJob
	Kind isDataMessage_Kind `protobuf_oneof:"kind"`
}

func (x *DataMessage) Reset() {
	*x = DataMessage{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataMessage) ProtoMessage() {}

func (x *DataMessage) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataMessage.ProtoReflect.Descriptor instead.
func (*DataMessage) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_rawDescGZIP(), []int{13}
}

func (m *DataMessage) GetKind() isDataMessage_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *DataMessage) GetQuery() *DataQuery {
	if x, ok := x.GetKind().(*DataMessage_Query); ok {
		return x.Query
	}
	return nil
}

func (x *DataMessage) GetGeneratedSql() string {
	if x, ok := x.GetKind().(*DataMessage_GeneratedSql); ok {
		return x.GeneratedSql
	}
	return ""
}

func (x *DataMessage) GetResult() *DataResult {
	if x, ok := x.GetKind().(*DataMessage_Result); ok {
		return x.Result
	}
	return nil
}

func (x *DataMessage) GetGeneratedLookerQuery() *LookerQuery {
	if x, ok := x.GetKind().(*DataMessage_GeneratedLookerQuery); ok {
		return x.GeneratedLookerQuery
	}
	return nil
}

func (x *DataMessage) GetBigQueryJob() *BigQueryJob {
	if x, ok := x.GetKind().(*DataMessage_BigQueryJob); ok {
		return x.BigQueryJob
	}
	return nil
}

type isDataMessage_Kind interface {
	isDataMessage_Kind()
}

type DataMessage_Query struct {
	// A data retrieval query.
	Query *DataQuery `protobuf:"bytes,1,opt,name=query,proto3,oneof"`
}

type DataMessage_GeneratedSql struct {
	// SQL generated by the system to retrieve data.
	GeneratedSql string `protobuf:"bytes,2,opt,name=generated_sql,json=generatedSql,proto3,oneof"`
}

type DataMessage_Result struct {
	// Retrieved data.
	Result *DataResult `protobuf:"bytes,3,opt,name=result,proto3,oneof"`
}

type DataMessage_GeneratedLookerQuery struct {
	// Looker Query generated by the system to retrieve data.
	GeneratedLookerQuery *LookerQuery `protobuf:"bytes,4,opt,name=generated_looker_query,json=generatedLookerQuery,proto3,oneof"`
}

type DataMessage_BigQueryJob struct {
	// A BigQuery job executed by the system to retrieve data.
	BigQueryJob *BigQueryJob `protobuf:"bytes,5,opt,name=big_query_job,json=bigQueryJob,proto3,oneof"`
}

func (*DataMessage_Query) isDataMessage_Kind() {}

func (*DataMessage_GeneratedSql) isDataMessage_Kind() {}

func (*DataMessage_Result) isDataMessage_Kind() {}

func (*DataMessage_GeneratedLookerQuery) isDataMessage_Kind() {}

func (*DataMessage_BigQueryJob) isDataMessage_Kind() {}

// A query for retrieving data from a Looker Explore. See
// [Run Inline
// Query](https://cloud.google.com/looker/docs/reference/looker-api/latest/methods/Query/run_inline_query).
type LookerQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The LookML model used to generate the query.
	Model string `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
	// Required. The LookML Explore used to generate the query.
	Explore string `protobuf:"bytes,2,opt,name=explore,proto3" json:"explore,omitempty"`
	// Optional. The fields to retrieve from the Explore.
	Fields []string `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
	// Optional. The filters to apply to the Explore.
	Filters []*LookerQuery_Filter `protobuf:"bytes,4,rep,name=filters,proto3" json:"filters,omitempty"`
	// Optional. The sorts to apply to the Explore.
	Sorts []string `protobuf:"bytes,5,rep,name=sorts,proto3" json:"sorts,omitempty"`
	// Optional. Limit in the query.
	Limit *string `protobuf:"bytes,6,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
}

func (x *LookerQuery) Reset() {
	*x = LookerQuery{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LookerQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookerQuery) ProtoMessage() {}

func (x *LookerQuery) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookerQuery.ProtoReflect.Descriptor instead.
func (*LookerQuery) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_rawDescGZIP(), []int{14}
}

func (x *LookerQuery) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *LookerQuery) GetExplore() string {
	if x != nil {
		return x.Explore
	}
	return ""
}

func (x *LookerQuery) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *LookerQuery) GetFilters() []*LookerQuery_Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *LookerQuery) GetSorts() []string {
	if x != nil {
		return x.Sorts
	}
	return nil
}

func (x *LookerQuery) GetLimit() string {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return ""
}

// A query for retrieving data.
type DataQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. A natural language question to answer.
	Question string `protobuf:"bytes,1,opt,name=question,proto3" json:"question,omitempty"`
	// Optional. A snake-case name for the query that reflects its intent. It is
	// used to name the corresponding data result, so that it can be referenced in
	// later steps.
	//
	// * Example: "total_sales_by_product"
	// * Example: "sales_for_product_12345"
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. The datasources available to answer the question.
	Datasources []*Datasource `protobuf:"bytes,2,rep,name=datasources,proto3" json:"datasources,omitempty"`
}

func (x *DataQuery) Reset() {
	*x = DataQuery{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataQuery) ProtoMessage() {}

func (x *DataQuery) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataQuery.ProtoReflect.Descriptor instead.
func (*DataQuery) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_rawDescGZIP(), []int{15}
}

func (x *DataQuery) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *DataQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DataQuery) GetDatasources() []*Datasource {
	if x != nil {
		return x.Datasources
	}
	return nil
}

// Retrieved data.
type DataResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. A snake-case name for the data result that reflects its contents.
	// The name is used to pass the result around by reference, and serves as a
	// signal about its meaning.
	//
	// * Example: "total_sales_by_product"
	// * Example: "sales_for_product_12345"
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. The schema of the data.
	Schema *Schema `protobuf:"bytes,5,opt,name=schema,proto3" json:"schema,omitempty"`
	// Optional. The content of the data. Each row is a struct that matches the
	// schema. Simple values are represented as strings, while nested structures
	// are represented as lists or structs.
	Data []*structpb.Struct `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *DataResult) Reset() {
	*x = DataResult{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataResult) ProtoMessage() {}

func (x *DataResult) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataResult.ProtoReflect.Descriptor instead.
func (*DataResult) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_rawDescGZIP(), []int{16}
}

func (x *DataResult) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DataResult) GetSchema() *Schema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *DataResult) GetData() []*structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

// A BigQuery job executed by the system.
type BigQueryJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The project that the job belongs to.
	//
	// See
	// [JobReference](https://cloud.google.com/bigquery/docs/reference/rest/v2/JobReference).
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Required. The ID of the job.
	//
	// See
	// [JobReference](https://cloud.google.com/bigquery/docs/reference/rest/v2/JobReference).
	JobId string `protobuf:"bytes,2,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// Optional. The location of the job.
	//
	// See
	// [JobReference](https://cloud.google.com/bigquery/docs/reference/rest/v2/JobReference).
	Location string `protobuf:"bytes,5,opt,name=location,proto3" json:"location,omitempty"`
	// Optional. A reference to the destination table of the job's query results.
	//
	// See
	// [JobConfigurationQuery](https://cloud.google.com/bigquery/docs/reference/rest/v2/Job#jobconfigurationquery).
	DestinationTable *BigQueryTableReference `protobuf:"bytes,3,opt,name=destination_table,json=destinationTable,proto3" json:"destination_table,omitempty"`
	// Optional. The schema of the job's query results.
	//
	// See
	// [JobStatistics2](https://cloud.google.com/bigquery/docs/reference/rest/v2/Job#jobstatistics2).
	Schema *Schema `protobuf:"bytes,7,opt,name=schema,proto3" json:"schema,omitempty"`
}

func (x *BigQueryJob) Reset() {
	*x = BigQueryJob{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BigQueryJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BigQueryJob) ProtoMessage() {}

func (x *BigQueryJob) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BigQueryJob.ProtoReflect.Descriptor instead.
func (*BigQueryJob) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_rawDescGZIP(), []int{17}
}

func (x *BigQueryJob) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *BigQueryJob) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *BigQueryJob) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *BigQueryJob) GetDestinationTable() *BigQueryTableReference {
	if x != nil {
		return x.DestinationTable
	}
	return nil
}

func (x *BigQueryJob) GetSchema() *Schema {
	if x != nil {
		return x.Schema
	}
	return nil
}

// A message produced during analysis.
type AnalysisMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether this message contains the query or one of the events from the
	// analysis.
	//
	// Types that are assignable to Kind:
	//
	//	*AnalysisMessage_Query
	//	*AnalysisMessage_ProgressEvent
	Kind isAnalysisMessage_Kind `protobuf_oneof:"kind"`
}

func (x *AnalysisMessage) Reset() {
	*x = AnalysisMessage{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalysisMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalysisMessage) ProtoMessage() {}

func (x *AnalysisMessage) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalysisMessage.ProtoReflect.Descriptor instead.
func (*AnalysisMessage) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_rawDescGZIP(), []int{18}
}

func (m *AnalysisMessage) GetKind() isAnalysisMessage_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *AnalysisMessage) GetQuery() *AnalysisQuery {
	if x, ok := x.GetKind().(*AnalysisMessage_Query); ok {
		return x.Query
	}
	return nil
}

func (x *AnalysisMessage) GetProgressEvent() *AnalysisEvent {
	if x, ok := x.GetKind().(*AnalysisMessage_ProgressEvent); ok {
		return x.ProgressEvent
	}
	return nil
}

type isAnalysisMessage_Kind interface {
	isAnalysisMessage_Kind()
}

type AnalysisMessage_Query struct {
	// An analysis query.
	Query *AnalysisQuery `protobuf:"bytes,1,opt,name=query,proto3,oneof"`
}

type AnalysisMessage_ProgressEvent struct {
	// An event indicating the progress of the analysis.
	ProgressEvent *AnalysisEvent `protobuf:"bytes,2,opt,name=progress_event,json=progressEvent,proto3,oneof"`
}

func (*AnalysisMessage_Query) isAnalysisMessage_Kind() {}

func (*AnalysisMessage_ProgressEvent) isAnalysisMessage_Kind() {}

// A query for performing an analysis.
type AnalysisQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. An analysis question to help answer the user's original question.
	Question string `protobuf:"bytes,1,opt,name=question,proto3" json:"question,omitempty"`
	// Optional. The names of previously retrieved data results to analyze.
	DataResultNames []string `protobuf:"bytes,2,rep,name=data_result_names,json=dataResultNames,proto3" json:"data_result_names,omitempty"`
}

func (x *AnalysisQuery) Reset() {
	*x = AnalysisQuery{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalysisQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalysisQuery) ProtoMessage() {}

func (x *AnalysisQuery) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalysisQuery.ProtoReflect.Descriptor instead.
func (*AnalysisQuery) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_rawDescGZIP(), []int{19}
}

func (x *AnalysisQuery) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *AnalysisQuery) GetDataResultNames() []string {
	if x != nil {
		return x.DataResultNames
	}
	return nil
}

// An event indicating the progress of an analysis.
type AnalysisEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The kind of event that occurred during the analysis.
	//
	// Types that are assignable to Kind:
	//
	//	*AnalysisEvent_PlannerReasoning
	//	*AnalysisEvent_CoderInstruction
	//	*AnalysisEvent_Code
	//	*AnalysisEvent_ExecutionOutput
	//	*AnalysisEvent_ExecutionError
	//	*AnalysisEvent_ResultVegaChartJson
	//	*AnalysisEvent_ResultNaturalLanguage
	//	*AnalysisEvent_ResultCsvData
	//	*AnalysisEvent_ResultReferenceData
	//	*AnalysisEvent_Error
	Kind isAnalysisEvent_Kind `protobuf_oneof:"kind"`
}

func (x *AnalysisEvent) Reset() {
	*x = AnalysisEvent{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalysisEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalysisEvent) ProtoMessage() {}

func (x *AnalysisEvent) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalysisEvent.ProtoReflect.Descriptor instead.
func (*AnalysisEvent) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_rawDescGZIP(), []int{20}
}

func (m *AnalysisEvent) GetKind() isAnalysisEvent_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *AnalysisEvent) GetPlannerReasoning() string {
	if x, ok := x.GetKind().(*AnalysisEvent_PlannerReasoning); ok {
		return x.PlannerReasoning
	}
	return ""
}

func (x *AnalysisEvent) GetCoderInstruction() string {
	if x, ok := x.GetKind().(*AnalysisEvent_CoderInstruction); ok {
		return x.CoderInstruction
	}
	return ""
}

func (x *AnalysisEvent) GetCode() string {
	if x, ok := x.GetKind().(*AnalysisEvent_Code); ok {
		return x.Code
	}
	return ""
}

func (x *AnalysisEvent) GetExecutionOutput() string {
	if x, ok := x.GetKind().(*AnalysisEvent_ExecutionOutput); ok {
		return x.ExecutionOutput
	}
	return ""
}

func (x *AnalysisEvent) GetExecutionError() string {
	if x, ok := x.GetKind().(*AnalysisEvent_ExecutionError); ok {
		return x.ExecutionError
	}
	return ""
}

func (x *AnalysisEvent) GetResultVegaChartJson() string {
	if x, ok := x.GetKind().(*AnalysisEvent_ResultVegaChartJson); ok {
		return x.ResultVegaChartJson
	}
	return ""
}

func (x *AnalysisEvent) GetResultNaturalLanguage() string {
	if x, ok := x.GetKind().(*AnalysisEvent_ResultNaturalLanguage); ok {
		return x.ResultNaturalLanguage
	}
	return ""
}

func (x *AnalysisEvent) GetResultCsvData() string {
	if x, ok := x.GetKind().(*AnalysisEvent_ResultCsvData); ok {
		return x.ResultCsvData
	}
	return ""
}

func (x *AnalysisEvent) GetResultReferenceData() string {
	if x, ok := x.GetKind().(*AnalysisEvent_ResultReferenceData); ok {
		return x.ResultReferenceData
	}
	return ""
}

func (x *AnalysisEvent) GetError() string {
	if x, ok := x.GetKind().(*AnalysisEvent_Error); ok {
		return x.Error
	}
	return ""
}

type isAnalysisEvent_Kind interface {
	isAnalysisEvent_Kind()
}

type AnalysisEvent_PlannerReasoning struct {
	// Python codegen planner's reasoning.
	PlannerReasoning string `protobuf:"bytes,2,opt,name=planner_reasoning,json=plannerReasoning,proto3,oneof"`
}

type AnalysisEvent_CoderInstruction struct {
	// Instructions issued for code generation.
	CoderInstruction string `protobuf:"bytes,3,opt,name=coder_instruction,json=coderInstruction,proto3,oneof"`
}

type AnalysisEvent_Code struct {
	// Generated code.
	Code string `protobuf:"bytes,4,opt,name=code,proto3,oneof"`
}

type AnalysisEvent_ExecutionOutput struct {
	// Output from code execution.
	ExecutionOutput string `protobuf:"bytes,5,opt,name=execution_output,json=executionOutput,proto3,oneof"`
}

type AnalysisEvent_ExecutionError struct {
	// An error from code execution.
	ExecutionError string `protobuf:"bytes,6,opt,name=execution_error,json=executionError,proto3,oneof"`
}

type AnalysisEvent_ResultVegaChartJson struct {
	// Result as Vega chart JSON string.
	ResultVegaChartJson string `protobuf:"bytes,7,opt,name=result_vega_chart_json,json=resultVegaChartJson,proto3,oneof"`
}

type AnalysisEvent_ResultNaturalLanguage struct {
	// Result as NL string.
	ResultNaturalLanguage string `protobuf:"bytes,8,opt,name=result_natural_language,json=resultNaturalLanguage,proto3,oneof"`
}

type AnalysisEvent_ResultCsvData struct {
	// Result as CSV string.
	ResultCsvData string `protobuf:"bytes,9,opt,name=result_csv_data,json=resultCsvData,proto3,oneof"`
}

type AnalysisEvent_ResultReferenceData struct {
	// Result as a reference to a data source.
	ResultReferenceData string `protobuf:"bytes,10,opt,name=result_reference_data,json=resultReferenceData,proto3,oneof"`
}

type AnalysisEvent_Error struct {
	// A generic error message.
	Error string `protobuf:"bytes,11,opt,name=error,proto3,oneof"`
}

func (*AnalysisEvent_PlannerReasoning) isAnalysisEvent_Kind() {}

func (*AnalysisEvent_CoderInstruction) isAnalysisEvent_Kind() {}

func (*AnalysisEvent_Code) isAnalysisEvent_Kind() {}

func (*AnalysisEvent_ExecutionOutput) isAnalysisEvent_Kind() {}

func (*AnalysisEvent_ExecutionError) isAnalysisEvent_Kind() {}

func (*AnalysisEvent_ResultVegaChartJson) isAnalysisEvent_Kind() {}

func (*AnalysisEvent_ResultNaturalLanguage) isAnalysisEvent_Kind() {}

func (*AnalysisEvent_ResultCsvData) isAnalysisEvent_Kind() {}

func (*AnalysisEvent_ResultReferenceData) isAnalysisEvent_Kind() {}

func (*AnalysisEvent_Error) isAnalysisEvent_Kind() {}

// A message produced during chart generation.
type ChartMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether this message contains the query or the result of the chart
	// generation.
	//
	// Types that are assignable to Kind:
	//
	//	*ChartMessage_Query
	//	*ChartMessage_Result
	Kind isChartMessage_Kind `protobuf_oneof:"kind"`
}

func (x *ChartMessage) Reset() {
	*x = ChartMessage{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChartMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartMessage) ProtoMessage() {}

func (x *ChartMessage) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartMessage.ProtoReflect.Descriptor instead.
func (*ChartMessage) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_rawDescGZIP(), []int{21}
}

func (m *ChartMessage) GetKind() isChartMessage_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *ChartMessage) GetQuery() *ChartQuery {
	if x, ok := x.GetKind().(*ChartMessage_Query); ok {
		return x.Query
	}
	return nil
}

func (x *ChartMessage) GetResult() *ChartResult {
	if x, ok := x.GetKind().(*ChartMessage_Result); ok {
		return x.Result
	}
	return nil
}

type isChartMessage_Kind interface {
	isChartMessage_Kind()
}

type ChartMessage_Query struct {
	// A query for generating a chart.
	Query *ChartQuery `protobuf:"bytes,1,opt,name=query,proto3,oneof"`
}

type ChartMessage_Result struct {
	// The result of a chart generation query.
	Result *ChartResult `protobuf:"bytes,2,opt,name=result,proto3,oneof"`
}

func (*ChartMessage_Query) isChartMessage_Kind() {}

func (*ChartMessage_Result) isChartMessage_Kind() {}

// A query for generating a chart.
type ChartQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Natural language instructions for generating the chart.
	Instructions string `protobuf:"bytes,1,opt,name=instructions,proto3" json:"instructions,omitempty"`
	// Optional. The name of a previously retrieved data result to use in the
	// chart.
	DataResultName string `protobuf:"bytes,2,opt,name=data_result_name,json=dataResultName,proto3" json:"data_result_name,omitempty"`
}

func (x *ChartQuery) Reset() {
	*x = ChartQuery{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChartQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartQuery) ProtoMessage() {}

func (x *ChartQuery) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartQuery.ProtoReflect.Descriptor instead.
func (*ChartQuery) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_rawDescGZIP(), []int{22}
}

func (x *ChartQuery) GetInstructions() string {
	if x != nil {
		return x.Instructions
	}
	return ""
}

func (x *ChartQuery) GetDataResultName() string {
	if x != nil {
		return x.DataResultName
	}
	return ""
}

// The result of a chart generation query.
type ChartResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. A generated Vega chart config.
	// See https://vega.github.io/vega/docs/config/
	VegaConfig *structpb.Struct `protobuf:"bytes,2,opt,name=vega_config,json=vegaConfig,proto3" json:"vega_config,omitempty"`
	// Optional. A rendering of the chart if this was requested in the context.
	Image *Blob `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *ChartResult) Reset() {
	*x = ChartResult{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChartResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartResult) ProtoMessage() {}

func (x *ChartResult) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartResult.ProtoReflect.Descriptor instead.
func (*ChartResult) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_rawDescGZIP(), []int{23}
}

func (x *ChartResult) GetVegaConfig() *structpb.Struct {
	if x != nil {
		return x.VegaConfig
	}
	return nil
}

func (x *ChartResult) GetImage() *Blob {
	if x != nil {
		return x.Image
	}
	return nil
}

// An error message.
type ErrorMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The text of the error.
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *ErrorMessage) Reset() {
	*x = ErrorMessage{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorMessage) ProtoMessage() {}

func (x *ErrorMessage) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorMessage.ProtoReflect.Descriptor instead.
func (*ErrorMessage) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_rawDescGZIP(), []int{24}
}

func (x *ErrorMessage) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// A blob of data with a MIME type.
type Blob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The IANA standard MIME type of the message data.
	MimeType string `protobuf:"bytes,1,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	// Required. The data represented as bytes.
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Blob) Reset() {
	*x = Blob{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Blob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Blob) ProtoMessage() {}

func (x *Blob) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Blob.ProtoReflect.Descriptor instead.
func (*Blob) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_rawDescGZIP(), []int{25}
}

func (x *Blob) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *Blob) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// A Looker query filter.
type LookerQuery_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The field to filter on.
	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	// Required. The value f field to filter on.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *LookerQuery_Filter) Reset() {
	*x = LookerQuery_Filter{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LookerQuery_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookerQuery_Filter) ProtoMessage() {}

func (x *LookerQuery_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookerQuery_Filter.ProtoReflect.Descriptor instead.
func (*LookerQuery_Filter) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_rawDescGZIP(), []int{14, 0}
}

func (x *LookerQuery_Filter) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *LookerQuery_Filter) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto protoreflect.FileDescriptor

var file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_rawDesc = []byte{
	0x0a, 0x3f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67,
	0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x27, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x35, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x65, 0x6d, 0x69,
	0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3a, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x39, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67,
	0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x38, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69,
	0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc9, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0xe0, 0x41,
	0x02, 0xfa, 0x41, 0x31, 0x0a, 0x2f, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x22, 0x93, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x08, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e,
	0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x7b, 0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61,
	0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0xb0, 0x04, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x5e, 0x0a, 0x0e, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e,
	0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x48, 0x00, 0x52, 0x0d, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x7c, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x67, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x6e, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d,
	0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52,
	0x10, 0x64, 0x61, 0x74, 0x61, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x4f, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x35, 0xe0, 0x41, 0x01, 0xfa, 0x41, 0x2d, 0x0a, 0x2b, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x51, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x8b, 0x03, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x53, 0x0a, 0x0a, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x34, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2e, 0x0a, 0x2c, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64,
	0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x61, 0x74, 0x61,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x12, 0x5b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x76, 0x0a,
	0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4d, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4f, 0x4e, 0x54, 0x45,
	0x58, 0x54, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x41, 0x47,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48,
	0x45, 0x44, 0x10, 0x02, 0x22, 0xe2, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5b,
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x31, 0x0a, 0x2f, 0x67, 0x65,
	0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6c, 0x0a, 0x12, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74,
	0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xb0, 0x02, 0x0a, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x59, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e,
	0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x5f, 0x0a, 0x0e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61,
	0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x3d, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x2b, 0x0a, 0x0b,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0xa4, 0x04, 0x0a, 0x0d, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4a, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64,
	0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x50, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74,
	0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x4a, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74,
	0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x56, 0x0a, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74,
	0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12, 0x4d, 0x0a,
	0x05, 0x63, 0x68, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69,
	0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x63, 0x68, 0x61, 0x72, 0x74, 0x12, 0x4d, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e,
	0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x22, 0x28, 0x0a, 0x0b, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x19, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x22, 0xb6, 0x01, 0x0a, 0x0d, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4c, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e,
	0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x48, 0x00, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x4f, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69,
	0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x22, 0x2e, 0x0a, 0x0b, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x1f, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x6a, 0x0a, 0x0c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x5a, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61,
	0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22,
	0xa1, 0x03, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x4a, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65,
	0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x48, 0x00, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x0d, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x71, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x53,
	0x71, 0x6c, 0x12, 0x4d, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x6c, 0x0a, 0x16, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6c,
	0x6f, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b,
	0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x14, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x4c, 0x6f, 0x6f, 0x6b, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x5a, 0x0a, 0x0d, 0x62, 0x69, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x6a, 0x6f, 0x62,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x48, 0x00, 0x52, 0x0b,
	0x62, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x42, 0x06, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x22, 0xc5, 0x02, 0x0a, 0x0b, 0x4c, 0x6f, 0x6f, 0x6b, 0x65, 0x72, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1d,
	0x0a, 0x07, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x12, 0x1b, 0x0a,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x5a, 0x0a, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e,
	0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x6f, 0x72, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x73, 0x6f, 0x72, 0x74,
	0x73, 0x12, 0x1e, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01,
	0x01, 0x1a, 0x3e, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xa1, 0x01, 0x0a, 0x09,
	0x44, 0x61, 0x74, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x08, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x5a, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61,
	0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22,
	0xa5, 0x01, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x17,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74,
	0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xaf, 0x02, 0x0a, 0x0b, 0x42, 0x69, 0x67, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x06, 0x6a,
	0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x71, 0x0a, 0x11, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x42, 0x69,
	0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x4c, 0x0a, 0x06, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e,
	0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0xca, 0x01, 0x0a, 0x0f, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4e, 0x0a,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69,
	0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x5f, 0x0a,
	0x0e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x0d, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x06,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x61, 0x0a, 0x0d, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0xcc, 0x03, 0x0a, 0x0d, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x11, 0x70,
	0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x2d, 0x0a, 0x11, 0x63, 0x6f,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x2b, 0x0a, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x29, 0x0a, 0x0f,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x16, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x76, 0x65, 0x67, 0x61, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f, 0x6a, 0x73, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x13, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x56, 0x65, 0x67, 0x61, 0x43, 0x68, 0x61, 0x72, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x38,
	0x0a, 0x17, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c,
	0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x15, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x5f, 0x63, 0x73, 0x76, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x73, 0x76, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x34, 0x0a, 0x15, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x13, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0xb3, 0x01, 0x0a, 0x0c, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4b, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61,
	0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x4e, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x64,
	0x0a, 0x0a, 0x43, 0x68, 0x61, 0x72, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x0c,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x76, 0x65, 0x67, 0x61, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x76, 0x65, 0x67, 0x61, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x48, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x42, 0x6c, 0x6f,
	0x62, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x27, 0x0a,
	0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x41, 0x0a, 0x04, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x20,
	0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x17, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0xb2, 0x09, 0x0a, 0x0f, 0x44, 0x61,
	0x74, 0x61, 0x43, 0x68, 0x61, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xa9, 0x01,
	0x0a, 0x04, 0x43, 0x68, 0x61, 0x74, 0x12, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69,
	0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x37,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x3a, 0x01, 0x2a, 0x22, 0x2c, 0x2f, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x2a, 0x7d, 0x3a, 0x63, 0x68, 0x61, 0x74, 0x30, 0x01, 0x12, 0x82, 0x02, 0x0a, 0x12, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x42, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x71, 0xda, 0x41, 0x23,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x2c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x45, 0x3a, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x35, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d,
	0x2f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xcf,
	0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x44, 0xda, 0x41, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x12, 0x35, 0x2f, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d,
	0x12, 0xe2, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64,
	0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x46, 0xda,
	0x41, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x12, 0x35,
	0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xde, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x51, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x42, 0x12, 0x40, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x7b, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a,
	0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x56, 0xca, 0x41, 0x22, 0x67, 0x65, 0x6d, 0x69, 0x6e,
	0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x2e,
	0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0xa5,
	0x02, 0x0a, 0x2b, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x42, 0x14,
	0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x5d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6d, 0x69,
	0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69,
	0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x70, 0x62, 0x3b,
	0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x70, 0x62, 0xaa, 0x02, 0x27, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x47, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x44, 0x61, 0x74, 0x61, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x56, 0x31, 0x42, 0x65, 0x74, 0x61, 0xca,
	0x02, 0x27, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x47,
	0x65, 0x6d, 0x69, 0x6e, 0x69, 0x44, 0x61, 0x74, 0x61, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0xea, 0x02, 0x2a, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x3a, 0x3a, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x47, 0x65, 0x6d, 0x69, 0x6e,
	0x69, 0x44, 0x61, 0x74, 0x61, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x3a, 0x3a,
	0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_rawDescOnce sync.Once
	file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_rawDescData = file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_rawDesc
)

func file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_rawDescGZIP() []byte {
	file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_rawDescOnce.Do(func() {
		file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_rawDescData)
	})
	return file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_rawDescData
}

var file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_goTypes = []any{
	(DataAgentContext_ContextVersion)(0), // 0: google.cloud.geminidataanalytics.v1beta.DataAgentContext.ContextVersion
	(*ListMessagesRequest)(nil),          // 1: google.cloud.geminidataanalytics.v1beta.ListMessagesRequest
	(*ListMessagesResponse)(nil),         // 2: google.cloud.geminidataanalytics.v1beta.ListMessagesResponse
	(*StorageMessage)(nil),               // 3: google.cloud.geminidataanalytics.v1beta.StorageMessage
	(*ChatRequest)(nil),                  // 4: google.cloud.geminidataanalytics.v1beta.ChatRequest
	(*DataAgentContext)(nil),             // 5: google.cloud.geminidataanalytics.v1beta.DataAgentContext
	(*ConversationReference)(nil),        // 6: google.cloud.geminidataanalytics.v1beta.ConversationReference
	(*Message)(nil),                      // 7: google.cloud.geminidataanalytics.v1beta.Message
	(*UserMessage)(nil),                  // 8: google.cloud.geminidataanalytics.v1beta.UserMessage
	(*SystemMessage)(nil),                // 9: google.cloud.geminidataanalytics.v1beta.SystemMessage
	(*TextMessage)(nil),                  // 10: google.cloud.geminidataanalytics.v1beta.TextMessage
	(*SchemaMessage)(nil),                // 11: google.cloud.geminidataanalytics.v1beta.SchemaMessage
	(*SchemaQuery)(nil),                  // 12: google.cloud.geminidataanalytics.v1beta.SchemaQuery
	(*SchemaResult)(nil),                 // 13: google.cloud.geminidataanalytics.v1beta.SchemaResult
	(*DataMessage)(nil),                  // 14: google.cloud.geminidataanalytics.v1beta.DataMessage
	(*LookerQuery)(nil),                  // 15: google.cloud.geminidataanalytics.v1beta.LookerQuery
	(*DataQuery)(nil),                    // 16: google.cloud.geminidataanalytics.v1beta.DataQuery
	(*DataResult)(nil),                   // 17: google.cloud.geminidataanalytics.v1beta.DataResult
	(*BigQueryJob)(nil),                  // 18: google.cloud.geminidataanalytics.v1beta.BigQueryJob
	(*AnalysisMessage)(nil),              // 19: google.cloud.geminidataanalytics.v1beta.AnalysisMessage
	(*AnalysisQuery)(nil),                // 20: google.cloud.geminidataanalytics.v1beta.AnalysisQuery
	(*AnalysisEvent)(nil),                // 21: google.cloud.geminidataanalytics.v1beta.AnalysisEvent
	(*ChartMessage)(nil),                 // 22: google.cloud.geminidataanalytics.v1beta.ChartMessage
	(*ChartQuery)(nil),                   // 23: google.cloud.geminidataanalytics.v1beta.ChartQuery
	(*ChartResult)(nil),                  // 24: google.cloud.geminidataanalytics.v1beta.ChartResult
	(*ErrorMessage)(nil),                 // 25: google.cloud.geminidataanalytics.v1beta.ErrorMessage
	(*Blob)(nil),                         // 26: google.cloud.geminidataanalytics.v1beta.Blob
	(*LookerQuery_Filter)(nil),           // 27: google.cloud.geminidataanalytics.v1beta.LookerQuery.Filter
	(*Context)(nil),                      // 28: google.cloud.geminidataanalytics.v1beta.Context
	(*Credentials)(nil),                  // 29: google.cloud.geminidataanalytics.v1beta.Credentials
	(*timestamppb.Timestamp)(nil),        // 30: google.protobuf.Timestamp
	(*Datasource)(nil),                   // 31: google.cloud.geminidataanalytics.v1beta.Datasource
	(*Schema)(nil),                       // 32: google.cloud.geminidataanalytics.v1beta.Schema
	(*structpb.Struct)(nil),              // 33: google.protobuf.Struct
	(*BigQueryTableReference)(nil),       // 34: google.cloud.geminidataanalytics.v1beta.BigQueryTableReference
	(*CreateConversationRequest)(nil),    // 35: google.cloud.geminidataanalytics.v1beta.CreateConversationRequest
	(*GetConversationRequest)(nil),       // 36: google.cloud.geminidataanalytics.v1beta.GetConversationRequest
	(*ListConversationsRequest)(nil),     // 37: google.cloud.geminidataanalytics.v1beta.ListConversationsRequest
	(*Conversation)(nil),                 // 38: google.cloud.geminidataanalytics.v1beta.Conversation
	(*ListConversationsResponse)(nil),    // 39: google.cloud.geminidataanalytics.v1beta.ListConversationsResponse
}
var file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_depIdxs = []int32{
	3,  // 0: google.cloud.geminidataanalytics.v1beta.ListMessagesResponse.messages:type_name -> google.cloud.geminidataanalytics.v1beta.StorageMessage
	7,  // 1: google.cloud.geminidataanalytics.v1beta.StorageMessage.message:type_name -> google.cloud.geminidataanalytics.v1beta.Message
	28, // 2: google.cloud.geminidataanalytics.v1beta.ChatRequest.inline_context:type_name -> google.cloud.geminidataanalytics.v1beta.Context
	6,  // 3: google.cloud.geminidataanalytics.v1beta.ChatRequest.conversation_reference:type_name -> google.cloud.geminidataanalytics.v1beta.ConversationReference
	5,  // 4: google.cloud.geminidataanalytics.v1beta.ChatRequest.data_agent_context:type_name -> google.cloud.geminidataanalytics.v1beta.DataAgentContext
	7,  // 5: google.cloud.geminidataanalytics.v1beta.ChatRequest.messages:type_name -> google.cloud.geminidataanalytics.v1beta.Message
	29, // 6: google.cloud.geminidataanalytics.v1beta.DataAgentContext.credentials:type_name -> google.cloud.geminidataanalytics.v1beta.Credentials
	0,  // 7: google.cloud.geminidataanalytics.v1beta.DataAgentContext.context_version:type_name -> google.cloud.geminidataanalytics.v1beta.DataAgentContext.ContextVersion
	5,  // 8: google.cloud.geminidataanalytics.v1beta.ConversationReference.data_agent_context:type_name -> google.cloud.geminidataanalytics.v1beta.DataAgentContext
	8,  // 9: google.cloud.geminidataanalytics.v1beta.Message.user_message:type_name -> google.cloud.geminidataanalytics.v1beta.UserMessage
	9,  // 10: google.cloud.geminidataanalytics.v1beta.Message.system_message:type_name -> google.cloud.geminidataanalytics.v1beta.SystemMessage
	30, // 11: google.cloud.geminidataanalytics.v1beta.Message.timestamp:type_name -> google.protobuf.Timestamp
	10, // 12: google.cloud.geminidataanalytics.v1beta.SystemMessage.text:type_name -> google.cloud.geminidataanalytics.v1beta.TextMessage
	11, // 13: google.cloud.geminidataanalytics.v1beta.SystemMessage.schema:type_name -> google.cloud.geminidataanalytics.v1beta.SchemaMessage
	14, // 14: google.cloud.geminidataanalytics.v1beta.SystemMessage.data:type_name -> google.cloud.geminidataanalytics.v1beta.DataMessage
	19, // 15: google.cloud.geminidataanalytics.v1beta.SystemMessage.analysis:type_name -> google.cloud.geminidataanalytics.v1beta.AnalysisMessage
	22, // 16: google.cloud.geminidataanalytics.v1beta.SystemMessage.chart:type_name -> google.cloud.geminidataanalytics.v1beta.ChartMessage
	25, // 17: google.cloud.geminidataanalytics.v1beta.SystemMessage.error:type_name -> google.cloud.geminidataanalytics.v1beta.ErrorMessage
	12, // 18: google.cloud.geminidataanalytics.v1beta.SchemaMessage.query:type_name -> google.cloud.geminidataanalytics.v1beta.SchemaQuery
	13, // 19: google.cloud.geminidataanalytics.v1beta.SchemaMessage.result:type_name -> google.cloud.geminidataanalytics.v1beta.SchemaResult
	31, // 20: google.cloud.geminidataanalytics.v1beta.SchemaResult.datasources:type_name -> google.cloud.geminidataanalytics.v1beta.Datasource
	16, // 21: google.cloud.geminidataanalytics.v1beta.DataMessage.query:type_name -> google.cloud.geminidataanalytics.v1beta.DataQuery
	17, // 22: google.cloud.geminidataanalytics.v1beta.DataMessage.result:type_name -> google.cloud.geminidataanalytics.v1beta.DataResult
	15, // 23: google.cloud.geminidataanalytics.v1beta.DataMessage.generated_looker_query:type_name -> google.cloud.geminidataanalytics.v1beta.LookerQuery
	18, // 24: google.cloud.geminidataanalytics.v1beta.DataMessage.big_query_job:type_name -> google.cloud.geminidataanalytics.v1beta.BigQueryJob
	27, // 25: google.cloud.geminidataanalytics.v1beta.LookerQuery.filters:type_name -> google.cloud.geminidataanalytics.v1beta.LookerQuery.Filter
	31, // 26: google.cloud.geminidataanalytics.v1beta.DataQuery.datasources:type_name -> google.cloud.geminidataanalytics.v1beta.Datasource
	32, // 27: google.cloud.geminidataanalytics.v1beta.DataResult.schema:type_name -> google.cloud.geminidataanalytics.v1beta.Schema
	33, // 28: google.cloud.geminidataanalytics.v1beta.DataResult.data:type_name -> google.protobuf.Struct
	34, // 29: google.cloud.geminidataanalytics.v1beta.BigQueryJob.destination_table:type_name -> google.cloud.geminidataanalytics.v1beta.BigQueryTableReference
	32, // 30: google.cloud.geminidataanalytics.v1beta.BigQueryJob.schema:type_name -> google.cloud.geminidataanalytics.v1beta.Schema
	20, // 31: google.cloud.geminidataanalytics.v1beta.AnalysisMessage.query:type_name -> google.cloud.geminidataanalytics.v1beta.AnalysisQuery
	21, // 32: google.cloud.geminidataanalytics.v1beta.AnalysisMessage.progress_event:type_name -> google.cloud.geminidataanalytics.v1beta.AnalysisEvent
	23, // 33: google.cloud.geminidataanalytics.v1beta.ChartMessage.query:type_name -> google.cloud.geminidataanalytics.v1beta.ChartQuery
	24, // 34: google.cloud.geminidataanalytics.v1beta.ChartMessage.result:type_name -> google.cloud.geminidataanalytics.v1beta.ChartResult
	33, // 35: google.cloud.geminidataanalytics.v1beta.ChartResult.vega_config:type_name -> google.protobuf.Struct
	26, // 36: google.cloud.geminidataanalytics.v1beta.ChartResult.image:type_name -> google.cloud.geminidataanalytics.v1beta.Blob
	4,  // 37: google.cloud.geminidataanalytics.v1beta.DataChatService.Chat:input_type -> google.cloud.geminidataanalytics.v1beta.ChatRequest
	35, // 38: google.cloud.geminidataanalytics.v1beta.DataChatService.CreateConversation:input_type -> google.cloud.geminidataanalytics.v1beta.CreateConversationRequest
	36, // 39: google.cloud.geminidataanalytics.v1beta.DataChatService.GetConversation:input_type -> google.cloud.geminidataanalytics.v1beta.GetConversationRequest
	37, // 40: google.cloud.geminidataanalytics.v1beta.DataChatService.ListConversations:input_type -> google.cloud.geminidataanalytics.v1beta.ListConversationsRequest
	1,  // 41: google.cloud.geminidataanalytics.v1beta.DataChatService.ListMessages:input_type -> google.cloud.geminidataanalytics.v1beta.ListMessagesRequest
	7,  // 42: google.cloud.geminidataanalytics.v1beta.DataChatService.Chat:output_type -> google.cloud.geminidataanalytics.v1beta.Message
	38, // 43: google.cloud.geminidataanalytics.v1beta.DataChatService.CreateConversation:output_type -> google.cloud.geminidataanalytics.v1beta.Conversation
	38, // 44: google.cloud.geminidataanalytics.v1beta.DataChatService.GetConversation:output_type -> google.cloud.geminidataanalytics.v1beta.Conversation
	39, // 45: google.cloud.geminidataanalytics.v1beta.DataChatService.ListConversations:output_type -> google.cloud.geminidataanalytics.v1beta.ListConversationsResponse
	2,  // 46: google.cloud.geminidataanalytics.v1beta.DataChatService.ListMessages:output_type -> google.cloud.geminidataanalytics.v1beta.ListMessagesResponse
	42, // [42:47] is the sub-list for method output_type
	37, // [37:42] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_init() }
func file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_init() {
	if File_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto != nil {
		return
	}
	file_google_cloud_geminidataanalytics_v1beta_context_proto_init()
	file_google_cloud_geminidataanalytics_v1beta_conversation_proto_init()
	file_google_cloud_geminidataanalytics_v1beta_credentials_proto_init()
	file_google_cloud_geminidataanalytics_v1beta_datasource_proto_init()
	file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[3].OneofWrappers = []any{
		(*ChatRequest_InlineContext)(nil),
		(*ChatRequest_ConversationReference)(nil),
		(*ChatRequest_DataAgentContext)(nil),
	}
	file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[6].OneofWrappers = []any{
		(*Message_UserMessage)(nil),
		(*Message_SystemMessage)(nil),
	}
	file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[7].OneofWrappers = []any{
		(*UserMessage_Text)(nil),
	}
	file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[8].OneofWrappers = []any{
		(*SystemMessage_Text)(nil),
		(*SystemMessage_Schema)(nil),
		(*SystemMessage_Data)(nil),
		(*SystemMessage_Analysis)(nil),
		(*SystemMessage_Chart)(nil),
		(*SystemMessage_Error)(nil),
	}
	file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[10].OneofWrappers = []any{
		(*SchemaMessage_Query)(nil),
		(*SchemaMessage_Result)(nil),
	}
	file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[13].OneofWrappers = []any{
		(*DataMessage_Query)(nil),
		(*DataMessage_GeneratedSql)(nil),
		(*DataMessage_Result)(nil),
		(*DataMessage_GeneratedLookerQuery)(nil),
		(*DataMessage_BigQueryJob)(nil),
	}
	file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[14].OneofWrappers = []any{}
	file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[18].OneofWrappers = []any{
		(*AnalysisMessage_Query)(nil),
		(*AnalysisMessage_ProgressEvent)(nil),
	}
	file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[20].OneofWrappers = []any{
		(*AnalysisEvent_PlannerReasoning)(nil),
		(*AnalysisEvent_CoderInstruction)(nil),
		(*AnalysisEvent_Code)(nil),
		(*AnalysisEvent_ExecutionOutput)(nil),
		(*AnalysisEvent_ExecutionError)(nil),
		(*AnalysisEvent_ResultVegaChartJson)(nil),
		(*AnalysisEvent_ResultNaturalLanguage)(nil),
		(*AnalysisEvent_ResultCsvData)(nil),
		(*AnalysisEvent_ResultReferenceData)(nil),
		(*AnalysisEvent_Error)(nil),
	}
	file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes[21].OneofWrappers = []any{
		(*ChartMessage_Query)(nil),
		(*ChartMessage_Result)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_goTypes,
		DependencyIndexes: file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_depIdxs,
		EnumInfos:         file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_enumTypes,
		MessageInfos:      file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_msgTypes,
	}.Build()
	File_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto = out.File
	file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_rawDesc = nil
	file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_goTypes = nil
	file_google_cloud_geminidataanalytics_v1beta_data_chat_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DataChatServiceClient is the client API for DataChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DataChatServiceClient interface {
	// Answers a data question by generating a stream of
	// [Message][google.cloud.geminidataanalytics.v1alpha.Message] objects.
	Chat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (DataChatService_ChatClient, error)
	// Creates a new conversation to persist the conversation history. Each
	// conversation will have multiple messages associated with it.
	CreateConversation(ctx context.Context, in *CreateConversationRequest, opts ...grpc.CallOption) (*Conversation, error)
	// Gets details of a single conversation by using conversation id and parent.
	GetConversation(ctx context.Context, in *GetConversationRequest, opts ...grpc.CallOption) (*Conversation, error)
	// Lists all conversations for a given parent.
	ListConversations(ctx context.Context, in *ListConversationsRequest, opts ...grpc.CallOption) (*ListConversationsResponse, error)
	// Lists all messages for a given conversation.
	ListMessages(ctx context.Context, in *ListMessagesRequest, opts ...grpc.CallOption) (*ListMessagesResponse, error)
}

type dataChatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataChatServiceClient(cc grpc.ClientConnInterface) DataChatServiceClient {
	return &dataChatServiceClient{cc}
}

func (c *dataChatServiceClient) Chat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (DataChatService_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DataChatService_serviceDesc.Streams[0], "/google.cloud.geminidataanalytics.v1beta.DataChatService/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataChatServiceChatClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DataChatService_ChatClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type dataChatServiceChatClient struct {
	grpc.ClientStream
}

func (x *dataChatServiceChatClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataChatServiceClient) CreateConversation(ctx context.Context, in *CreateConversationRequest, opts ...grpc.CallOption) (*Conversation, error) {
	out := new(Conversation)
	err := c.cc.Invoke(ctx, "/google.cloud.geminidataanalytics.v1beta.DataChatService/CreateConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataChatServiceClient) GetConversation(ctx context.Context, in *GetConversationRequest, opts ...grpc.CallOption) (*Conversation, error) {
	out := new(Conversation)
	err := c.cc.Invoke(ctx, "/google.cloud.geminidataanalytics.v1beta.DataChatService/GetConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataChatServiceClient) ListConversations(ctx context.Context, in *ListConversationsRequest, opts ...grpc.CallOption) (*ListConversationsResponse, error) {
	out := new(ListConversationsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.geminidataanalytics.v1beta.DataChatService/ListConversations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataChatServiceClient) ListMessages(ctx context.Context, in *ListMessagesRequest, opts ...grpc.CallOption) (*ListMessagesResponse, error) {
	out := new(ListMessagesResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.geminidataanalytics.v1beta.DataChatService/ListMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataChatServiceServer is the server API for DataChatService service.
type DataChatServiceServer interface {
	// Answers a data question by generating a stream of
	// [Message][google.cloud.geminidataanalytics.v1alpha.Message] objects.
	Chat(*ChatRequest, DataChatService_ChatServer) error
	// Creates a new conversation to persist the conversation history. Each
	// conversation will have multiple messages associated with it.
	CreateConversation(context.Context, *CreateConversationRequest) (*Conversation, error)
	// Gets details of a single conversation by using conversation id and parent.
	GetConversation(context.Context, *GetConversationRequest) (*Conversation, error)
	// Lists all conversations for a given parent.
	ListConversations(context.Context, *ListConversationsRequest) (*ListConversationsResponse, error)
	// Lists all messages for a given conversation.
	ListMessages(context.Context, *ListMessagesRequest) (*ListMessagesResponse, error)
}

// UnimplementedDataChatServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDataChatServiceServer struct {
}

func (*UnimplementedDataChatServiceServer) Chat(*ChatRequest, DataChatService_ChatServer) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (*UnimplementedDataChatServiceServer) CreateConversation(context.Context, *CreateConversationRequest) (*Conversation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConversation not implemented")
}
func (*UnimplementedDataChatServiceServer) GetConversation(context.Context, *GetConversationRequest) (*Conversation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConversation not implemented")
}
func (*UnimplementedDataChatServiceServer) ListConversations(context.Context, *ListConversationsRequest) (*ListConversationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConversations not implemented")
}
func (*UnimplementedDataChatServiceServer) ListMessages(context.Context, *ListMessagesRequest) (*ListMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMessages not implemented")
}

func RegisterDataChatServiceServer(s *grpc.Server, srv DataChatServiceServer) {
	s.RegisterService(&_DataChatService_serviceDesc, srv)
}

func _DataChatService_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataChatServiceServer).Chat(m, &dataChatServiceChatServer{stream})
}

type DataChatService_ChatServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type dataChatServiceChatServer struct {
	grpc.ServerStream
}

func (x *dataChatServiceChatServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _DataChatService_CreateConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataChatServiceServer).CreateConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.geminidataanalytics.v1beta.DataChatService/CreateConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataChatServiceServer).CreateConversation(ctx, req.(*CreateConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataChatService_GetConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataChatServiceServer).GetConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.geminidataanalytics.v1beta.DataChatService/GetConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataChatServiceServer).GetConversation(ctx, req.(*GetConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataChatService_ListConversations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConversationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataChatServiceServer).ListConversations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.geminidataanalytics.v1beta.DataChatService/ListConversations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataChatServiceServer).ListConversations(ctx, req.(*ListConversationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataChatService_ListMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataChatServiceServer).ListMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.geminidataanalytics.v1beta.DataChatService/ListMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataChatServiceServer).ListMessages(ctx, req.(*ListMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DataChatService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.geminidataanalytics.v1beta.DataChatService",
	HandlerType: (*DataChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateConversation",
			Handler:    _DataChatService_CreateConversation_Handler,
		},
		{
			MethodName: "GetConversation",
			Handler:    _DataChatService_GetConversation_Handler,
		},
		{
			MethodName: "ListConversations",
			Handler:    _DataChatService_ListConversations_Handler,
		},
		{
			MethodName: "ListMessages",
			Handler:    _DataChatService_ListMessages_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chat",
			Handler:       _DataChatService_Chat_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "google/cloud/geminidataanalytics/v1beta/data_chat_service.proto",
}
