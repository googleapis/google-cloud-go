// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.7
// source: google/cloud/geminidataanalytics/v1beta/context.proto

package geminidataanalyticspb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A collection of context to apply to this conversation
type Context struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The basic entry point for data owners creating domain knowledge
	// for Agent.
	//
	// Why: Business jargon (e.g., YTD revenue is calculated asâ€¦, Retirement Age
	// is 65 in the USA, etc) and system instructions (e.g., answer like a Pirate)
	// can help the model understand the business context around a user question.
	SystemInstruction string `protobuf:"bytes,1,opt,name=system_instruction,json=systemInstruction,proto3" json:"system_instruction,omitempty"`
	// Required. Data sources that are available for answering the question.
	DatasourceReferences *DatasourceReferences `protobuf:"bytes,7,opt,name=datasource_references,json=datasourceReferences,proto3" json:"datasource_references,omitempty"`
	// Optional. Additional options for the conversation.
	Options *ConversationOptions `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`
	// Optional. A list of example queries, providing examples of relevant and
	// commonly used SQL queries and their corresponding natural language queries
	// optionally present.
	ExampleQueries []*ExampleQuery `protobuf:"bytes,5,rep,name=example_queries,json=exampleQueries,proto3" json:"example_queries,omitempty"`
}

func (x *Context) Reset() {
	*x = Context{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_context_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Context) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Context) ProtoMessage() {}

func (x *Context) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_context_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Context.ProtoReflect.Descriptor instead.
func (*Context) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_context_proto_rawDescGZIP(), []int{0}
}

func (x *Context) GetSystemInstruction() string {
	if x != nil {
		return x.SystemInstruction
	}
	return ""
}

func (x *Context) GetDatasourceReferences() *DatasourceReferences {
	if x != nil {
		return x.DatasourceReferences
	}
	return nil
}

func (x *Context) GetOptions() *ConversationOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *Context) GetExampleQueries() []*ExampleQuery {
	if x != nil {
		return x.ExampleQueries
	}
	return nil
}

// Example of relevant and commonly used SQL query and its corresponding natural
// language queries optionally present.
type ExampleQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The SQL or Looker query that should be generated to answer the natural
	// language query.
	//
	// Types that are assignable to Query:
	//
	//	*ExampleQuery_SqlQuery
	Query isExampleQuery_Query `protobuf_oneof:"query"`
	// Optional. A natural language question that a user might ask.
	// For example: "How many orders were placed last month?"
	NaturalLanguageQuestion string `protobuf:"bytes,1,opt,name=natural_language_question,json=naturalLanguageQuestion,proto3" json:"natural_language_question,omitempty"`
}

func (x *ExampleQuery) Reset() {
	*x = ExampleQuery{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_context_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExampleQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExampleQuery) ProtoMessage() {}

func (x *ExampleQuery) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_context_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExampleQuery.ProtoReflect.Descriptor instead.
func (*ExampleQuery) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_context_proto_rawDescGZIP(), []int{1}
}

func (m *ExampleQuery) GetQuery() isExampleQuery_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (x *ExampleQuery) GetSqlQuery() string {
	if x, ok := x.GetQuery().(*ExampleQuery_SqlQuery); ok {
		return x.SqlQuery
	}
	return ""
}

func (x *ExampleQuery) GetNaturalLanguageQuestion() string {
	if x != nil {
		return x.NaturalLanguageQuestion
	}
	return ""
}

type isExampleQuery_Query interface {
	isExampleQuery_Query()
}

type ExampleQuery_SqlQuery struct {
	// Optional. The SQL query that should be generated to answer the natural
	// language question. For example: "SELECT COUNT(*) FROM orders WHERE
	// order_date BETWEEN '2024-01-01' AND '2024-01-31'"
	SqlQuery string `protobuf:"bytes,101,opt,name=sql_query,json=sqlQuery,proto3,oneof"`
}

func (*ExampleQuery_SqlQuery) isExampleQuery_Query() {}

// Options for the conversation.
type ConversationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Options for chart generation.
	Chart *ChartOptions `protobuf:"bytes,1,opt,name=chart,proto3" json:"chart,omitempty"`
	// Optional. Options for analysis.
	Analysis *AnalysisOptions `protobuf:"bytes,2,opt,name=analysis,proto3" json:"analysis,omitempty"`
}

func (x *ConversationOptions) Reset() {
	*x = ConversationOptions{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_context_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConversationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationOptions) ProtoMessage() {}

func (x *ConversationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_context_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationOptions.ProtoReflect.Descriptor instead.
func (*ConversationOptions) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_context_proto_rawDescGZIP(), []int{2}
}

func (x *ConversationOptions) GetChart() *ChartOptions {
	if x != nil {
		return x.Chart
	}
	return nil
}

func (x *ConversationOptions) GetAnalysis() *AnalysisOptions {
	if x != nil {
		return x.Analysis
	}
	return nil
}

// Options for chart generation.
type ChartOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. When specified, the agent will render generated charts using the
	// provided format. Defaults to no image.
	Image *ChartOptions_ImageOptions `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *ChartOptions) Reset() {
	*x = ChartOptions{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_context_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChartOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartOptions) ProtoMessage() {}

func (x *ChartOptions) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_context_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartOptions.ProtoReflect.Descriptor instead.
func (*ChartOptions) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_context_proto_rawDescGZIP(), []int{3}
}

func (x *ChartOptions) GetImage() *ChartOptions_ImageOptions {
	if x != nil {
		return x.Image
	}
	return nil
}

// Options for analysis.
type AnalysisOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Options for Python analysis.
	Python *AnalysisOptions_Python `protobuf:"bytes,1,opt,name=python,proto3" json:"python,omitempty"`
}

func (x *AnalysisOptions) Reset() {
	*x = AnalysisOptions{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_context_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalysisOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalysisOptions) ProtoMessage() {}

func (x *AnalysisOptions) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_context_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalysisOptions.ProtoReflect.Descriptor instead.
func (*AnalysisOptions) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_context_proto_rawDescGZIP(), []int{4}
}

func (x *AnalysisOptions) GetPython() *AnalysisOptions_Python {
	if x != nil {
		return x.Python
	}
	return nil
}

// Options for rendering images of generated charts.
type ChartOptions_ImageOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The kind of image to render.
	//
	// Types that are assignable to Kind:
	//
	//	*ChartOptions_ImageOptions_NoImage_
	//	*ChartOptions_ImageOptions_Svg
	Kind isChartOptions_ImageOptions_Kind `protobuf_oneof:"kind"`
}

func (x *ChartOptions_ImageOptions) Reset() {
	*x = ChartOptions_ImageOptions{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_context_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChartOptions_ImageOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartOptions_ImageOptions) ProtoMessage() {}

func (x *ChartOptions_ImageOptions) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_context_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartOptions_ImageOptions.ProtoReflect.Descriptor instead.
func (*ChartOptions_ImageOptions) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_context_proto_rawDescGZIP(), []int{3, 0}
}

func (m *ChartOptions_ImageOptions) GetKind() isChartOptions_ImageOptions_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *ChartOptions_ImageOptions) GetNoImage() *ChartOptions_ImageOptions_NoImage {
	if x, ok := x.GetKind().(*ChartOptions_ImageOptions_NoImage_); ok {
		return x.NoImage
	}
	return nil
}

func (x *ChartOptions_ImageOptions) GetSvg() *ChartOptions_ImageOptions_SvgOptions {
	if x, ok := x.GetKind().(*ChartOptions_ImageOptions_Svg); ok {
		return x.Svg
	}
	return nil
}

type isChartOptions_ImageOptions_Kind interface {
	isChartOptions_ImageOptions_Kind()
}

type ChartOptions_ImageOptions_NoImage_ struct {
	// No image.
	NoImage *ChartOptions_ImageOptions_NoImage `protobuf:"bytes,1,opt,name=no_image,json=noImage,proto3,oneof"`
}

type ChartOptions_ImageOptions_Svg struct {
	// SVG format.
	Svg *ChartOptions_ImageOptions_SvgOptions `protobuf:"bytes,2,opt,name=svg,proto3,oneof"`
}

func (*ChartOptions_ImageOptions_NoImage_) isChartOptions_ImageOptions_Kind() {}

func (*ChartOptions_ImageOptions_Svg) isChartOptions_ImageOptions_Kind() {}

// No image.
type ChartOptions_ImageOptions_NoImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChartOptions_ImageOptions_NoImage) Reset() {
	*x = ChartOptions_ImageOptions_NoImage{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_context_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChartOptions_ImageOptions_NoImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartOptions_ImageOptions_NoImage) ProtoMessage() {}

func (x *ChartOptions_ImageOptions_NoImage) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_context_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartOptions_ImageOptions_NoImage.ProtoReflect.Descriptor instead.
func (*ChartOptions_ImageOptions_NoImage) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_context_proto_rawDescGZIP(), []int{3, 0, 0}
}

// SVG options.
type ChartOptions_ImageOptions_SvgOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChartOptions_ImageOptions_SvgOptions) Reset() {
	*x = ChartOptions_ImageOptions_SvgOptions{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_context_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChartOptions_ImageOptions_SvgOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartOptions_ImageOptions_SvgOptions) ProtoMessage() {}

func (x *ChartOptions_ImageOptions_SvgOptions) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_context_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartOptions_ImageOptions_SvgOptions.ProtoReflect.Descriptor instead.
func (*ChartOptions_ImageOptions_SvgOptions) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_context_proto_rawDescGZIP(), []int{3, 0, 1}
}

// Options for Python analysis.
type AnalysisOptions_Python struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Whether to enable Python analysis.
	// Defaults to false.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *AnalysisOptions_Python) Reset() {
	*x = AnalysisOptions_Python{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_context_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalysisOptions_Python) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalysisOptions_Python) ProtoMessage() {}

func (x *AnalysisOptions_Python) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_context_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalysisOptions_Python.ProtoReflect.Descriptor instead.
func (*AnalysisOptions_Python) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_context_proto_rawDescGZIP(), []int{4, 0}
}

func (x *AnalysisOptions_Python) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

var File_google_cloud_geminidataanalytics_v1beta_context_proto protoreflect.FileDescriptor

var file_google_cloud_geminidataanalytics_v1beta_context_proto_rawDesc = []byte{
	0x0a, 0x35, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67,
	0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x27, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x38, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf8, 0x02, 0x0a, 0x07,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x12, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x11, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x77, 0x0a, 0x15, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69,
	0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x14,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x12, 0x5b, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x63, 0x0a, 0x0f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69,
	0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22, 0x7c, 0x0a, 0x0c, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x09, 0x73, 0x71, 0x6c, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00,
	0x52, 0x08, 0x73, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3f, 0x0a, 0x19, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x61, 0x6c, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x17, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x22, 0xc2, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x50, 0x0a, 0x05,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e,
	0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x63, 0x68, 0x61, 0x72, 0x74, 0x12, 0x59,
	0x0a, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x22, 0xeb, 0x02, 0x0a, 0x0c, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5d, 0x0a, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64,
	0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x1a, 0xfb, 0x01, 0x0a, 0x0c, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x67, 0x0a, 0x08, 0x6e, 0x6f,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69,
	0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x4e, 0x6f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6e, 0x6f, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x61, 0x0a, 0x03, 0x73, 0x76, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x4d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x76, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48,
	0x00, 0x52, 0x03, 0x73, 0x76, 0x67, 0x1a, 0x09, 0x0a, 0x07, 0x4e, 0x6f, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x1a, 0x0c, 0x0a, 0x0a, 0x53, 0x76, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42,
	0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x98, 0x01, 0x0a, 0x0f, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5c, 0x0a, 0x06, 0x70,
	0x79, 0x74, 0x68, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e,
	0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x06, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x1a, 0x27, 0x0a, 0x06, 0x50, 0x79, 0x74,
	0x68, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x42, 0x9d, 0x02, 0x0a, 0x2b, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61,
	0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x42, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x5d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61,
	0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x70, 0x62, 0x3b, 0x67, 0x65, 0x6d, 0x69,
	0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x70,
	0x62, 0xaa, 0x02, 0x27, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x47, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x44, 0x61, 0x74, 0x61, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x56, 0x31, 0x42, 0x65, 0x74, 0x61, 0xca, 0x02, 0x27, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x5c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x47, 0x65, 0x6d, 0x69, 0x6e,
	0x69, 0x44, 0x61, 0x74, 0x61, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x5c, 0x56,
	0x31, 0x62, 0x65, 0x74, 0x61, 0xea, 0x02, 0x2a, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x47, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x44, 0x61, 0x74,
	0x61, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_geminidataanalytics_v1beta_context_proto_rawDescOnce sync.Once
	file_google_cloud_geminidataanalytics_v1beta_context_proto_rawDescData = file_google_cloud_geminidataanalytics_v1beta_context_proto_rawDesc
)

func file_google_cloud_geminidataanalytics_v1beta_context_proto_rawDescGZIP() []byte {
	file_google_cloud_geminidataanalytics_v1beta_context_proto_rawDescOnce.Do(func() {
		file_google_cloud_geminidataanalytics_v1beta_context_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_geminidataanalytics_v1beta_context_proto_rawDescData)
	})
	return file_google_cloud_geminidataanalytics_v1beta_context_proto_rawDescData
}

var file_google_cloud_geminidataanalytics_v1beta_context_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_google_cloud_geminidataanalytics_v1beta_context_proto_goTypes = []any{
	(*Context)(nil),                              // 0: google.cloud.geminidataanalytics.v1beta.Context
	(*ExampleQuery)(nil),                         // 1: google.cloud.geminidataanalytics.v1beta.ExampleQuery
	(*ConversationOptions)(nil),                  // 2: google.cloud.geminidataanalytics.v1beta.ConversationOptions
	(*ChartOptions)(nil),                         // 3: google.cloud.geminidataanalytics.v1beta.ChartOptions
	(*AnalysisOptions)(nil),                      // 4: google.cloud.geminidataanalytics.v1beta.AnalysisOptions
	(*ChartOptions_ImageOptions)(nil),            // 5: google.cloud.geminidataanalytics.v1beta.ChartOptions.ImageOptions
	(*ChartOptions_ImageOptions_NoImage)(nil),    // 6: google.cloud.geminidataanalytics.v1beta.ChartOptions.ImageOptions.NoImage
	(*ChartOptions_ImageOptions_SvgOptions)(nil), // 7: google.cloud.geminidataanalytics.v1beta.ChartOptions.ImageOptions.SvgOptions
	(*AnalysisOptions_Python)(nil),               // 8: google.cloud.geminidataanalytics.v1beta.AnalysisOptions.Python
	(*DatasourceReferences)(nil),                 // 9: google.cloud.geminidataanalytics.v1beta.DatasourceReferences
}
var file_google_cloud_geminidataanalytics_v1beta_context_proto_depIdxs = []int32{
	9, // 0: google.cloud.geminidataanalytics.v1beta.Context.datasource_references:type_name -> google.cloud.geminidataanalytics.v1beta.DatasourceReferences
	2, // 1: google.cloud.geminidataanalytics.v1beta.Context.options:type_name -> google.cloud.geminidataanalytics.v1beta.ConversationOptions
	1, // 2: google.cloud.geminidataanalytics.v1beta.Context.example_queries:type_name -> google.cloud.geminidataanalytics.v1beta.ExampleQuery
	3, // 3: google.cloud.geminidataanalytics.v1beta.ConversationOptions.chart:type_name -> google.cloud.geminidataanalytics.v1beta.ChartOptions
	4, // 4: google.cloud.geminidataanalytics.v1beta.ConversationOptions.analysis:type_name -> google.cloud.geminidataanalytics.v1beta.AnalysisOptions
	5, // 5: google.cloud.geminidataanalytics.v1beta.ChartOptions.image:type_name -> google.cloud.geminidataanalytics.v1beta.ChartOptions.ImageOptions
	8, // 6: google.cloud.geminidataanalytics.v1beta.AnalysisOptions.python:type_name -> google.cloud.geminidataanalytics.v1beta.AnalysisOptions.Python
	6, // 7: google.cloud.geminidataanalytics.v1beta.ChartOptions.ImageOptions.no_image:type_name -> google.cloud.geminidataanalytics.v1beta.ChartOptions.ImageOptions.NoImage
	7, // 8: google.cloud.geminidataanalytics.v1beta.ChartOptions.ImageOptions.svg:type_name -> google.cloud.geminidataanalytics.v1beta.ChartOptions.ImageOptions.SvgOptions
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_google_cloud_geminidataanalytics_v1beta_context_proto_init() }
func file_google_cloud_geminidataanalytics_v1beta_context_proto_init() {
	if File_google_cloud_geminidataanalytics_v1beta_context_proto != nil {
		return
	}
	file_google_cloud_geminidataanalytics_v1beta_datasource_proto_init()
	file_google_cloud_geminidataanalytics_v1beta_context_proto_msgTypes[1].OneofWrappers = []any{
		(*ExampleQuery_SqlQuery)(nil),
	}
	file_google_cloud_geminidataanalytics_v1beta_context_proto_msgTypes[5].OneofWrappers = []any{
		(*ChartOptions_ImageOptions_NoImage_)(nil),
		(*ChartOptions_ImageOptions_Svg)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_geminidataanalytics_v1beta_context_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_cloud_geminidataanalytics_v1beta_context_proto_goTypes,
		DependencyIndexes: file_google_cloud_geminidataanalytics_v1beta_context_proto_depIdxs,
		MessageInfos:      file_google_cloud_geminidataanalytics_v1beta_context_proto_msgTypes,
	}.Build()
	File_google_cloud_geminidataanalytics_v1beta_context_proto = out.File
	file_google_cloud_geminidataanalytics_v1beta_context_proto_rawDesc = nil
	file_google_cloud_geminidataanalytics_v1beta_context_proto_goTypes = nil
	file_google_cloud_geminidataanalytics_v1beta_context_proto_depIdxs = nil
}
