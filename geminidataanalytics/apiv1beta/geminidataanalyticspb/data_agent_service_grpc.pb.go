// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/geminidataanalytics/v1beta/data_agent_service.proto

package geminidataanalyticspb

import (
	iampb "cloud.google.com/go/iam/apiv1/iampb"
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DataAgentService_ListDataAgents_FullMethodName           = "/google.cloud.geminidataanalytics.v1beta.DataAgentService/ListDataAgents"
	DataAgentService_ListAccessibleDataAgents_FullMethodName = "/google.cloud.geminidataanalytics.v1beta.DataAgentService/ListAccessibleDataAgents"
	DataAgentService_GetDataAgent_FullMethodName             = "/google.cloud.geminidataanalytics.v1beta.DataAgentService/GetDataAgent"
	DataAgentService_CreateDataAgent_FullMethodName          = "/google.cloud.geminidataanalytics.v1beta.DataAgentService/CreateDataAgent"
	DataAgentService_UpdateDataAgent_FullMethodName          = "/google.cloud.geminidataanalytics.v1beta.DataAgentService/UpdateDataAgent"
	DataAgentService_DeleteDataAgent_FullMethodName          = "/google.cloud.geminidataanalytics.v1beta.DataAgentService/DeleteDataAgent"
	DataAgentService_GetIamPolicy_FullMethodName             = "/google.cloud.geminidataanalytics.v1beta.DataAgentService/GetIamPolicy"
	DataAgentService_SetIamPolicy_FullMethodName             = "/google.cloud.geminidataanalytics.v1beta.DataAgentService/SetIamPolicy"
)

// DataAgentServiceClient is the client API for DataAgentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataAgentServiceClient interface {
	// Lists DataAgents in a given project and location.
	ListDataAgents(ctx context.Context, in *ListDataAgentsRequest, opts ...grpc.CallOption) (*ListDataAgentsResponse, error)
	// Lists DataAgents that are accessible to the caller in a given project and
	// location.
	ListAccessibleDataAgents(ctx context.Context, in *ListAccessibleDataAgentsRequest, opts ...grpc.CallOption) (*ListAccessibleDataAgentsResponse, error)
	// Gets details of a single DataAgent.
	GetDataAgent(ctx context.Context, in *GetDataAgentRequest, opts ...grpc.CallOption) (*DataAgent, error)
	// Creates a new DataAgent in a given project and location.
	CreateDataAgent(ctx context.Context, in *CreateDataAgentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates the parameters of a single DataAgent.
	UpdateDataAgent(ctx context.Context, in *UpdateDataAgentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single DataAgent.
	DeleteDataAgent(ctx context.Context, in *DeleteDataAgentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets the IAM policy for DataAgent
	GetIamPolicy(ctx context.Context, in *iampb.GetIamPolicyRequest, opts ...grpc.CallOption) (*iampb.Policy, error)
	// Sets the IAM policy for a DataAgent.
	SetIamPolicy(ctx context.Context, in *iampb.SetIamPolicyRequest, opts ...grpc.CallOption) (*iampb.Policy, error)
}

type dataAgentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataAgentServiceClient(cc grpc.ClientConnInterface) DataAgentServiceClient {
	return &dataAgentServiceClient{cc}
}

func (c *dataAgentServiceClient) ListDataAgents(ctx context.Context, in *ListDataAgentsRequest, opts ...grpc.CallOption) (*ListDataAgentsResponse, error) {
	out := new(ListDataAgentsResponse)
	err := c.cc.Invoke(ctx, DataAgentService_ListDataAgents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataAgentServiceClient) ListAccessibleDataAgents(ctx context.Context, in *ListAccessibleDataAgentsRequest, opts ...grpc.CallOption) (*ListAccessibleDataAgentsResponse, error) {
	out := new(ListAccessibleDataAgentsResponse)
	err := c.cc.Invoke(ctx, DataAgentService_ListAccessibleDataAgents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataAgentServiceClient) GetDataAgent(ctx context.Context, in *GetDataAgentRequest, opts ...grpc.CallOption) (*DataAgent, error) {
	out := new(DataAgent)
	err := c.cc.Invoke(ctx, DataAgentService_GetDataAgent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataAgentServiceClient) CreateDataAgent(ctx context.Context, in *CreateDataAgentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, DataAgentService_CreateDataAgent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataAgentServiceClient) UpdateDataAgent(ctx context.Context, in *UpdateDataAgentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, DataAgentService_UpdateDataAgent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataAgentServiceClient) DeleteDataAgent(ctx context.Context, in *DeleteDataAgentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, DataAgentService_DeleteDataAgent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataAgentServiceClient) GetIamPolicy(ctx context.Context, in *iampb.GetIamPolicyRequest, opts ...grpc.CallOption) (*iampb.Policy, error) {
	out := new(iampb.Policy)
	err := c.cc.Invoke(ctx, DataAgentService_GetIamPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataAgentServiceClient) SetIamPolicy(ctx context.Context, in *iampb.SetIamPolicyRequest, opts ...grpc.CallOption) (*iampb.Policy, error) {
	out := new(iampb.Policy)
	err := c.cc.Invoke(ctx, DataAgentService_SetIamPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataAgentServiceServer is the server API for DataAgentService service.
// All implementations should embed UnimplementedDataAgentServiceServer
// for forward compatibility
type DataAgentServiceServer interface {
	// Lists DataAgents in a given project and location.
	ListDataAgents(context.Context, *ListDataAgentsRequest) (*ListDataAgentsResponse, error)
	// Lists DataAgents that are accessible to the caller in a given project and
	// location.
	ListAccessibleDataAgents(context.Context, *ListAccessibleDataAgentsRequest) (*ListAccessibleDataAgentsResponse, error)
	// Gets details of a single DataAgent.
	GetDataAgent(context.Context, *GetDataAgentRequest) (*DataAgent, error)
	// Creates a new DataAgent in a given project and location.
	CreateDataAgent(context.Context, *CreateDataAgentRequest) (*longrunningpb.Operation, error)
	// Updates the parameters of a single DataAgent.
	UpdateDataAgent(context.Context, *UpdateDataAgentRequest) (*longrunningpb.Operation, error)
	// Deletes a single DataAgent.
	DeleteDataAgent(context.Context, *DeleteDataAgentRequest) (*longrunningpb.Operation, error)
	// Gets the IAM policy for DataAgent
	GetIamPolicy(context.Context, *iampb.GetIamPolicyRequest) (*iampb.Policy, error)
	// Sets the IAM policy for a DataAgent.
	SetIamPolicy(context.Context, *iampb.SetIamPolicyRequest) (*iampb.Policy, error)
}

// UnimplementedDataAgentServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDataAgentServiceServer struct {
}

func (UnimplementedDataAgentServiceServer) ListDataAgents(context.Context, *ListDataAgentsRequest) (*ListDataAgentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDataAgents not implemented")
}
func (UnimplementedDataAgentServiceServer) ListAccessibleDataAgents(context.Context, *ListAccessibleDataAgentsRequest) (*ListAccessibleDataAgentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccessibleDataAgents not implemented")
}
func (UnimplementedDataAgentServiceServer) GetDataAgent(context.Context, *GetDataAgentRequest) (*DataAgent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataAgent not implemented")
}
func (UnimplementedDataAgentServiceServer) CreateDataAgent(context.Context, *CreateDataAgentRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataAgent not implemented")
}
func (UnimplementedDataAgentServiceServer) UpdateDataAgent(context.Context, *UpdateDataAgentRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDataAgent not implemented")
}
func (UnimplementedDataAgentServiceServer) DeleteDataAgent(context.Context, *DeleteDataAgentRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataAgent not implemented")
}
func (UnimplementedDataAgentServiceServer) GetIamPolicy(context.Context, *iampb.GetIamPolicyRequest) (*iampb.Policy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIamPolicy not implemented")
}
func (UnimplementedDataAgentServiceServer) SetIamPolicy(context.Context, *iampb.SetIamPolicyRequest) (*iampb.Policy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetIamPolicy not implemented")
}

// UnsafeDataAgentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataAgentServiceServer will
// result in compilation errors.
type UnsafeDataAgentServiceServer interface {
	mustEmbedUnimplementedDataAgentServiceServer()
}

func RegisterDataAgentServiceServer(s grpc.ServiceRegistrar, srv DataAgentServiceServer) {
	s.RegisterService(&DataAgentService_ServiceDesc, srv)
}

func _DataAgentService_ListDataAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDataAgentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataAgentServiceServer).ListDataAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataAgentService_ListDataAgents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataAgentServiceServer).ListDataAgents(ctx, req.(*ListDataAgentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataAgentService_ListAccessibleDataAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccessibleDataAgentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataAgentServiceServer).ListAccessibleDataAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataAgentService_ListAccessibleDataAgents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataAgentServiceServer).ListAccessibleDataAgents(ctx, req.(*ListAccessibleDataAgentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataAgentService_GetDataAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataAgentServiceServer).GetDataAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataAgentService_GetDataAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataAgentServiceServer).GetDataAgent(ctx, req.(*GetDataAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataAgentService_CreateDataAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDataAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataAgentServiceServer).CreateDataAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataAgentService_CreateDataAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataAgentServiceServer).CreateDataAgent(ctx, req.(*CreateDataAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataAgentService_UpdateDataAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDataAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataAgentServiceServer).UpdateDataAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataAgentService_UpdateDataAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataAgentServiceServer).UpdateDataAgent(ctx, req.(*UpdateDataAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataAgentService_DeleteDataAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDataAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataAgentServiceServer).DeleteDataAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataAgentService_DeleteDataAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataAgentServiceServer).DeleteDataAgent(ctx, req.(*DeleteDataAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataAgentService_GetIamPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iampb.GetIamPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataAgentServiceServer).GetIamPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataAgentService_GetIamPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataAgentServiceServer).GetIamPolicy(ctx, req.(*iampb.GetIamPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataAgentService_SetIamPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iampb.SetIamPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataAgentServiceServer).SetIamPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataAgentService_SetIamPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataAgentServiceServer).SetIamPolicy(ctx, req.(*iampb.SetIamPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataAgentService_ServiceDesc is the grpc.ServiceDesc for DataAgentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataAgentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.geminidataanalytics.v1beta.DataAgentService",
	HandlerType: (*DataAgentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDataAgents",
			Handler:    _DataAgentService_ListDataAgents_Handler,
		},
		{
			MethodName: "ListAccessibleDataAgents",
			Handler:    _DataAgentService_ListAccessibleDataAgents_Handler,
		},
		{
			MethodName: "GetDataAgent",
			Handler:    _DataAgentService_GetDataAgent_Handler,
		},
		{
			MethodName: "CreateDataAgent",
			Handler:    _DataAgentService_CreateDataAgent_Handler,
		},
		{
			MethodName: "UpdateDataAgent",
			Handler:    _DataAgentService_UpdateDataAgent_Handler,
		},
		{
			MethodName: "DeleteDataAgent",
			Handler:    _DataAgentService_DeleteDataAgent_Handler,
		},
		{
			MethodName: "GetIamPolicy",
			Handler:    _DataAgentService_GetIamPolicy_Handler,
		},
		{
			MethodName: "SetIamPolicy",
			Handler:    _DataAgentService_SetIamPolicy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/geminidataanalytics/v1beta/data_agent_service.proto",
}
