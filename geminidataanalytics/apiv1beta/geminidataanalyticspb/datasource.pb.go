// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.7
// source: google/cloud/geminidataanalytics/v1beta/datasource.proto

package geminidataanalyticspb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The type of filter present on a datasource, such as ALWAYS_FILTER.
type DataFilterType int32

const (
	// The filter type was not specified.
	DataFilterType_DATA_FILTER_TYPE_UNSPECIFIED DataFilterType = 0
	// A filter that the user configures, and any queries to the Explore will
	// always apply this filter by default. Currently only used for Looker data
	// sources.
	DataFilterType_ALWAYS_FILTER DataFilterType = 1
)

// Enum value maps for DataFilterType.
var (
	DataFilterType_name = map[int32]string{
		0: "DATA_FILTER_TYPE_UNSPECIFIED",
		1: "ALWAYS_FILTER",
	}
	DataFilterType_value = map[string]int32{
		"DATA_FILTER_TYPE_UNSPECIFIED": 0,
		"ALWAYS_FILTER":                1,
	}
)

func (x DataFilterType) Enum() *DataFilterType {
	p := new(DataFilterType)
	*p = x
	return p
}

func (x DataFilterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataFilterType) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_geminidataanalytics_v1beta_datasource_proto_enumTypes[0].Descriptor()
}

func (DataFilterType) Type() protoreflect.EnumType {
	return &file_google_cloud_geminidataanalytics_v1beta_datasource_proto_enumTypes[0]
}

func (x DataFilterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataFilterType.Descriptor instead.
func (DataFilterType) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_datasource_proto_rawDescGZIP(), []int{0}
}

// A collection of references to datasources.
type DatasourceReferences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The datasources to use.
	//
	// Types that are assignable to References:
	//
	//	*DatasourceReferences_Bq
	//	*DatasourceReferences_Studio
	//	*DatasourceReferences_Looker
	References isDatasourceReferences_References `protobuf_oneof:"references"`
}

func (x *DatasourceReferences) Reset() {
	*x = DatasourceReferences{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_datasource_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatasourceReferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasourceReferences) ProtoMessage() {}

func (x *DatasourceReferences) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_datasource_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasourceReferences.ProtoReflect.Descriptor instead.
func (*DatasourceReferences) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_datasource_proto_rawDescGZIP(), []int{0}
}

func (m *DatasourceReferences) GetReferences() isDatasourceReferences_References {
	if m != nil {
		return m.References
	}
	return nil
}

func (x *DatasourceReferences) GetBq() *BigQueryTableReferences {
	if x, ok := x.GetReferences().(*DatasourceReferences_Bq); ok {
		return x.Bq
	}
	return nil
}

func (x *DatasourceReferences) GetStudio() *StudioDatasourceReferences {
	if x, ok := x.GetReferences().(*DatasourceReferences_Studio); ok {
		return x.Studio
	}
	return nil
}

func (x *DatasourceReferences) GetLooker() *LookerExploreReferences {
	if x, ok := x.GetReferences().(*DatasourceReferences_Looker); ok {
		return x.Looker
	}
	return nil
}

type isDatasourceReferences_References interface {
	isDatasourceReferences_References()
}

type DatasourceReferences_Bq struct {
	// References to BigQuery tables.
	Bq *BigQueryTableReferences `protobuf:"bytes,1,opt,name=bq,proto3,oneof"`
}

type DatasourceReferences_Studio struct {
	// References to Looker Studio datasources.
	Studio *StudioDatasourceReferences `protobuf:"bytes,2,opt,name=studio,proto3,oneof"`
}

type DatasourceReferences_Looker struct {
	// References to Looker Explores.
	Looker *LookerExploreReferences `protobuf:"bytes,3,opt,name=looker,proto3,oneof"`
}

func (*DatasourceReferences_Bq) isDatasourceReferences_References() {}

func (*DatasourceReferences_Studio) isDatasourceReferences_References() {}

func (*DatasourceReferences_Looker) isDatasourceReferences_References() {}

// Message representing references to BigQuery tables.
type BigQueryTableReferences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. References to BigQuery tables.
	TableReferences []*BigQueryTableReference `protobuf:"bytes,1,rep,name=table_references,json=tableReferences,proto3" json:"table_references,omitempty"`
}

func (x *BigQueryTableReferences) Reset() {
	*x = BigQueryTableReferences{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_datasource_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BigQueryTableReferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BigQueryTableReferences) ProtoMessage() {}

func (x *BigQueryTableReferences) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_datasource_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BigQueryTableReferences.ProtoReflect.Descriptor instead.
func (*BigQueryTableReferences) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_datasource_proto_rawDescGZIP(), []int{1}
}

func (x *BigQueryTableReferences) GetTableReferences() []*BigQueryTableReference {
	if x != nil {
		return x.TableReferences
	}
	return nil
}

// Message representing a reference to a single BigQuery table.
type BigQueryTableReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The project that the table belongs to.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Required. The dataset that the table belongs to.
	DatasetId string `protobuf:"bytes,3,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// Required. The table id.
	TableId string `protobuf:"bytes,4,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	// Optional. The schema of the datasource.
	Schema *Schema `protobuf:"bytes,6,opt,name=schema,proto3" json:"schema,omitempty"`
}

func (x *BigQueryTableReference) Reset() {
	*x = BigQueryTableReference{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_datasource_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BigQueryTableReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BigQueryTableReference) ProtoMessage() {}

func (x *BigQueryTableReference) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_datasource_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BigQueryTableReference.ProtoReflect.Descriptor instead.
func (*BigQueryTableReference) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_datasource_proto_rawDescGZIP(), []int{2}
}

func (x *BigQueryTableReference) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *BigQueryTableReference) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *BigQueryTableReference) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

func (x *BigQueryTableReference) GetSchema() *Schema {
	if x != nil {
		return x.Schema
	}
	return nil
}

// Message representing references to Looker Studio datasources.
type StudioDatasourceReferences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The references to the studio datasources.
	StudioReferences []*StudioDatasourceReference `protobuf:"bytes,2,rep,name=studio_references,json=studioReferences,proto3" json:"studio_references,omitempty"`
}

func (x *StudioDatasourceReferences) Reset() {
	*x = StudioDatasourceReferences{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_datasource_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StudioDatasourceReferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioDatasourceReferences) ProtoMessage() {}

func (x *StudioDatasourceReferences) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_datasource_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioDatasourceReferences.ProtoReflect.Descriptor instead.
func (*StudioDatasourceReferences) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_datasource_proto_rawDescGZIP(), []int{3}
}

func (x *StudioDatasourceReferences) GetStudioReferences() []*StudioDatasourceReference {
	if x != nil {
		return x.StudioReferences
	}
	return nil
}

// Message representing a reference to a single Looker Studio datasource.
type StudioDatasourceReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The id of the datasource.
	DatasourceId string `protobuf:"bytes,1,opt,name=datasource_id,json=datasourceId,proto3" json:"datasource_id,omitempty"`
}

func (x *StudioDatasourceReference) Reset() {
	*x = StudioDatasourceReference{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_datasource_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StudioDatasourceReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudioDatasourceReference) ProtoMessage() {}

func (x *StudioDatasourceReference) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_datasource_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudioDatasourceReference.ProtoReflect.Descriptor instead.
func (*StudioDatasourceReference) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_datasource_proto_rawDescGZIP(), []int{4}
}

func (x *StudioDatasourceReference) GetDatasourceId() string {
	if x != nil {
		return x.DatasourceId
	}
	return ""
}

// Message representing references to Looker explores.
type LookerExploreReferences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. References to Looker explores.
	ExploreReferences []*LookerExploreReference `protobuf:"bytes,1,rep,name=explore_references,json=exploreReferences,proto3" json:"explore_references,omitempty"`
	// Optional. The credentials to use when calling the Looker API.
	//
	// Currently supports both OAuth token and API key-based credentials, as
	// described in
	// [Authentication with an
	// SDK](https://cloud.google.com/looker/docs/api-auth#authentication_with_an_sdk).
	Credentials *Credentials `protobuf:"bytes,2,opt,name=credentials,proto3" json:"credentials,omitempty"`
}

func (x *LookerExploreReferences) Reset() {
	*x = LookerExploreReferences{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_datasource_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LookerExploreReferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookerExploreReferences) ProtoMessage() {}

func (x *LookerExploreReferences) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_datasource_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookerExploreReferences.ProtoReflect.Descriptor instead.
func (*LookerExploreReferences) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_datasource_proto_rawDescGZIP(), []int{5}
}

func (x *LookerExploreReferences) GetExploreReferences() []*LookerExploreReference {
	if x != nil {
		return x.ExploreReferences
	}
	return nil
}

func (x *LookerExploreReferences) GetCredentials() *Credentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

// Message representing a reference to a single Looker explore.
type LookerExploreReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The instance of the Looker explore.
	//
	// Types that are assignable to Instance:
	//
	//	*LookerExploreReference_LookerInstanceUri
	//	*LookerExploreReference_PrivateLookerInstanceInfo
	Instance isLookerExploreReference_Instance `protobuf_oneof:"instance"`
	// Required. Looker model, as outlined in
	// [Major LookML
	// structures](https://cloud.google.com/looker/docs/lookml-terms-and-concepts#major_lookml_structures).
	// Name of the LookML model.
	LookmlModel string `protobuf:"bytes,4,opt,name=lookml_model,json=lookmlModel,proto3" json:"lookml_model,omitempty"`
	// Required. Looker Explore, as outlined in
	// [Major LookML
	// structures](https://cloud.google.com/looker/docs/lookml-terms-and-concepts#major_lookml_structures).
	// Name of the LookML Explore.
	Explore string `protobuf:"bytes,5,opt,name=explore,proto3" json:"explore,omitempty"`
	// Optional. The schema of the datasource.
	Schema *Schema `protobuf:"bytes,8,opt,name=schema,proto3" json:"schema,omitempty"`
}

func (x *LookerExploreReference) Reset() {
	*x = LookerExploreReference{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_datasource_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LookerExploreReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookerExploreReference) ProtoMessage() {}

func (x *LookerExploreReference) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_datasource_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookerExploreReference.ProtoReflect.Descriptor instead.
func (*LookerExploreReference) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_datasource_proto_rawDescGZIP(), []int{6}
}

func (m *LookerExploreReference) GetInstance() isLookerExploreReference_Instance {
	if m != nil {
		return m.Instance
	}
	return nil
}

func (x *LookerExploreReference) GetLookerInstanceUri() string {
	if x, ok := x.GetInstance().(*LookerExploreReference_LookerInstanceUri); ok {
		return x.LookerInstanceUri
	}
	return ""
}

func (x *LookerExploreReference) GetPrivateLookerInstanceInfo() *PrivateLookerInstanceInfo {
	if x, ok := x.GetInstance().(*LookerExploreReference_PrivateLookerInstanceInfo); ok {
		return x.PrivateLookerInstanceInfo
	}
	return nil
}

func (x *LookerExploreReference) GetLookmlModel() string {
	if x != nil {
		return x.LookmlModel
	}
	return ""
}

func (x *LookerExploreReference) GetExplore() string {
	if x != nil {
		return x.Explore
	}
	return ""
}

func (x *LookerExploreReference) GetSchema() *Schema {
	if x != nil {
		return x.Schema
	}
	return nil
}

type isLookerExploreReference_Instance interface {
	isLookerExploreReference_Instance()
}

type LookerExploreReference_LookerInstanceUri struct {
	// Required. The base url of the Looker instance.
	LookerInstanceUri string `protobuf:"bytes,9,opt,name=looker_instance_uri,json=lookerInstanceUri,proto3,oneof"`
}

type LookerExploreReference_PrivateLookerInstanceInfo struct {
	// Private Looker instance info.
	PrivateLookerInstanceInfo *PrivateLookerInstanceInfo `protobuf:"bytes,10,opt,name=private_looker_instance_info,json=privateLookerInstanceInfo,proto3,oneof"`
}

func (*LookerExploreReference_LookerInstanceUri) isLookerExploreReference_Instance() {}

func (*LookerExploreReference_PrivateLookerInstanceInfo) isLookerExploreReference_Instance() {}

// Message representing a private Looker instance info required if the Looker
// instance is behind a private network.
type PrivateLookerInstanceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Looker instance id.
	LookerInstanceId string `protobuf:"bytes,1,opt,name=looker_instance_id,json=lookerInstanceId,proto3" json:"looker_instance_id,omitempty"`
	// The service directory name of the Looker instance.
	ServiceDirectoryName string `protobuf:"bytes,2,opt,name=service_directory_name,json=serviceDirectoryName,proto3" json:"service_directory_name,omitempty"`
}

func (x *PrivateLookerInstanceInfo) Reset() {
	*x = PrivateLookerInstanceInfo{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_datasource_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrivateLookerInstanceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateLookerInstanceInfo) ProtoMessage() {}

func (x *PrivateLookerInstanceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_datasource_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateLookerInstanceInfo.ProtoReflect.Descriptor instead.
func (*PrivateLookerInstanceInfo) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_datasource_proto_rawDescGZIP(), []int{7}
}

func (x *PrivateLookerInstanceInfo) GetLookerInstanceId() string {
	if x != nil {
		return x.LookerInstanceId
	}
	return ""
}

func (x *PrivateLookerInstanceInfo) GetServiceDirectoryName() string {
	if x != nil {
		return x.ServiceDirectoryName
	}
	return ""
}

// A datasource that can be used to answer questions.
type Datasource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The reference to the datasource.
	//
	// Types that are assignable to Reference:
	//
	//	*Datasource_BigqueryTableReference
	//	*Datasource_StudioDatasourceId
	//	*Datasource_LookerExploreReference
	Reference isDatasource_Reference `protobuf_oneof:"reference"`
	// Optional. The schema of the datasource.
	Schema *Schema `protobuf:"bytes,7,opt,name=schema,proto3" json:"schema,omitempty"`
}

func (x *Datasource) Reset() {
	*x = Datasource{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_datasource_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Datasource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Datasource) ProtoMessage() {}

func (x *Datasource) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_datasource_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Datasource.ProtoReflect.Descriptor instead.
func (*Datasource) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_datasource_proto_rawDescGZIP(), []int{8}
}

func (m *Datasource) GetReference() isDatasource_Reference {
	if m != nil {
		return m.Reference
	}
	return nil
}

func (x *Datasource) GetBigqueryTableReference() *BigQueryTableReference {
	if x, ok := x.GetReference().(*Datasource_BigqueryTableReference); ok {
		return x.BigqueryTableReference
	}
	return nil
}

func (x *Datasource) GetStudioDatasourceId() string {
	if x, ok := x.GetReference().(*Datasource_StudioDatasourceId); ok {
		return x.StudioDatasourceId
	}
	return ""
}

func (x *Datasource) GetLookerExploreReference() *LookerExploreReference {
	if x, ok := x.GetReference().(*Datasource_LookerExploreReference); ok {
		return x.LookerExploreReference
	}
	return nil
}

func (x *Datasource) GetSchema() *Schema {
	if x != nil {
		return x.Schema
	}
	return nil
}

type isDatasource_Reference interface {
	isDatasource_Reference()
}

type Datasource_BigqueryTableReference struct {
	// A reference to a BigQuery table.
	BigqueryTableReference *BigQueryTableReference `protobuf:"bytes,1,opt,name=bigquery_table_reference,json=bigqueryTableReference,proto3,oneof"`
}

type Datasource_StudioDatasourceId struct {
	// A reference to a Looker Studio datasource.
	StudioDatasourceId string `protobuf:"bytes,2,opt,name=studio_datasource_id,json=studioDatasourceId,proto3,oneof"`
}

type Datasource_LookerExploreReference struct {
	// A reference to a Looker explore.
	LookerExploreReference *LookerExploreReference `protobuf:"bytes,4,opt,name=looker_explore_reference,json=lookerExploreReference,proto3,oneof"`
}

func (*Datasource_BigqueryTableReference) isDatasource_Reference() {}

func (*Datasource_StudioDatasourceId) isDatasource_Reference() {}

func (*Datasource_LookerExploreReference) isDatasource_Reference() {}

// The schema of a Datasource or QueryResult instance.
type Schema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The fields in the schema.
	Fields []*Field `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	// Optional. A textual description of the table's content and purpose.
	// For example: "Contains information about customer orders in our e-commerce
	// store."
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Optional. A list of alternative names or synonyms that can be used to refer
	// to the table. For example: ["sales", "orders", "purchases"]
	Synonyms []string `protobuf:"bytes,3,rep,name=synonyms,proto3" json:"synonyms,omitempty"`
	// Optional. A list of tags or keywords associated with the table, used for
	// categorization. For example: ["transaction", "revenue", "customer_data"]
	Tags []string `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	// Optional. Table display_name (same as label in
	// cloud/data_analytics/anarres/data/looker/proto/model_explore.proto), not
	// required, currently only Looker has this field.
	DisplayName string `protobuf:"bytes,5,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Optional. The filters on the datasource's underlying data. Currently only
	// used for Looker data sources.
	Filters []*DataFilter `protobuf:"bytes,6,rep,name=filters,proto3" json:"filters,omitempty"`
}

func (x *Schema) Reset() {
	*x = Schema{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_datasource_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Schema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema) ProtoMessage() {}

func (x *Schema) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_datasource_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema.ProtoReflect.Descriptor instead.
func (*Schema) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_datasource_proto_rawDescGZIP(), []int{9}
}

func (x *Schema) GetFields() []*Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Schema) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Schema) GetSynonyms() []string {
	if x != nil {
		return x.Synonyms
	}
	return nil
}

func (x *Schema) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Schema) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Schema) GetFilters() []*DataFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

// A field in a schema.
type Field struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The name of the field.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. The type of the field.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Optional. A brief description of the field.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Optional. The mode of the field (e.g., NULLABLE, REPEATED).
	Mode string `protobuf:"bytes,4,opt,name=mode,proto3" json:"mode,omitempty"`
	// Optional. A list of alternative names or synonyms that can be used to refer
	// to this field. For example: ["id", "customerid", "cust_id"]
	Synonyms []string `protobuf:"bytes,6,rep,name=synonyms,proto3" json:"synonyms,omitempty"`
	// Optional. A list of tags or keywords associated with the field, used for
	// categorization. For example: ["identifier", "customer", "pii"]
	Tags []string `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
	// Optional. Field display_name (same as label in
	DisplayName string `protobuf:"bytes,8,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Optional. Recursive property for nested schema structures.
	Subfields []*Field `protobuf:"bytes,9,rep,name=subfields,proto3" json:"subfields,omitempty"`
	// Optional. Field category, not required, currently only useful for Looker.
	// We are using a string to avoid depending on an external package and keep
	// this package self-contained.
	Category string `protobuf:"bytes,10,opt,name=category,proto3" json:"category,omitempty"`
	// Optional. Looker only. Value format of the field.
	// Ref:
	// https://cloud.google.com/looker/docs/reference/param-field-value-format
	ValueFormat string `protobuf:"bytes,11,opt,name=value_format,json=valueFormat,proto3" json:"value_format,omitempty"`
}

func (x *Field) Reset() {
	*x = Field{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_datasource_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Field) ProtoMessage() {}

func (x *Field) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_datasource_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Field.ProtoReflect.Descriptor instead.
func (*Field) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_datasource_proto_rawDescGZIP(), []int{10}
}

func (x *Field) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Field) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Field) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Field) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *Field) GetSynonyms() []string {
	if x != nil {
		return x.Synonyms
	}
	return nil
}

func (x *Field) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Field) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Field) GetSubfields() []*Field {
	if x != nil {
		return x.Subfields
	}
	return nil
}

func (x *Field) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *Field) GetValueFormat() string {
	if x != nil {
		return x.ValueFormat
	}
	return ""
}

// A filter on a datasource's underlying data. Filter syntax documentation:
// https://cloud.google.com/looker/docs/filter-expressions
type DataFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The field to filter on. For example: ["event_date",
	// "customer_id", "product_category"]
	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	// Optional. The default value used for this filter if the filter is not
	// overridden in a query. For example: ["after 2024-01-01", "123", "-fashion"]
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// Optional. The type of filter present on a datasource, such as
	// ALWAYS_FILTER.
	Type DataFilterType `protobuf:"varint,3,opt,name=type,proto3,enum=google.cloud.geminidataanalytics.v1beta.DataFilterType" json:"type,omitempty"`
}

func (x *DataFilter) Reset() {
	*x = DataFilter{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_datasource_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataFilter) ProtoMessage() {}

func (x *DataFilter) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_datasource_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataFilter.ProtoReflect.Descriptor instead.
func (*DataFilter) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_datasource_proto_rawDescGZIP(), []int{11}
}

func (x *DataFilter) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *DataFilter) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *DataFilter) GetType() DataFilterType {
	if x != nil {
		return x.Type
	}
	return DataFilterType_DATA_FILTER_TYPE_UNSPECIFIED
}

var File_google_cloud_geminidataanalytics_v1beta_datasource_proto protoreflect.FileDescriptor

var file_google_cloud_geminidataanalytics_v1beta_datasource_proto_rawDesc = []byte{
	0x0a, 0x38, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67,
	0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x27, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64,
	0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x39, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xb3, 0x02, 0x0a, 0x14, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x02, 0x62, 0x71, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x42,
	0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x48, 0x00, 0x52, 0x02, 0x62, 0x71, 0x12, 0x5d, 0x0a, 0x06,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69,
	0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x5a, 0x0a, 0x06, 0x6c,
	0x6f, 0x6f, 0x6b, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e,
	0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x65, 0x72, 0x45, 0x78, 0x70, 0x6c,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x48, 0x00, 0x52,
	0x06, 0x6c, 0x6f, 0x6f, 0x6b, 0x65, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x17, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x12, 0x6f, 0x0a, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e,
	0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x22, 0xce, 0x01, 0x0a, 0x16, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x22, 0x8d, 0x01, 0x0a, 0x1a, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x12, 0x6f, 0x0a, 0x11, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d,
	0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x10, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x22, 0x45, 0x0a, 0x19, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x28, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0xeb, 0x01, 0x0a, 0x17, 0x4c,
	0x6f, 0x6f, 0x6b, 0x65, 0x72, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x73, 0x0a, 0x12, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72,
	0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4c, 0x6f, 0x6f,
	0x6b, 0x65, 0x72, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x11, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72,
	0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x5b, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x22, 0xf3, 0x02, 0x0a, 0x16, 0x4c, 0x6f, 0x6f,
	0x6b, 0x65, 0x72, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x6c, 0x6f, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x11, 0x6c, 0x6f, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x55, 0x72, 0x69, 0x12, 0x85, 0x01, 0x0a, 0x1c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69,
	0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f,
	0x6f, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x00, 0x52, 0x19, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x65,
	0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a,
	0x0c, 0x6c, 0x6f, 0x6f, 0x6b, 0x6d, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x6c, 0x6f, 0x6f, 0x6b, 0x6d, 0x6c,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x65, 0x78, 0x70,
	0x6c, 0x6f, 0x72, 0x65, 0x12, 0x4c, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x42, 0x0a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x7f,
	0x0a, 0x19, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x65, 0x72, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x12, 0x6c,
	0x6f, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x6f, 0x6f, 0x6b, 0x65, 0x72, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x95, 0x03, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x7b,
	0x0a, 0x18, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x42, 0x69, 0x67, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x48, 0x00, 0x52, 0x16, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x12, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x7b, 0x0a, 0x18, 0x6c, 0x6f, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72,
	0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b,
	0x65, 0x72, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x48, 0x00, 0x52, 0x16, 0x6c, 0x6f, 0x6f, 0x6b, 0x65, 0x72, 0x45, 0x78, 0x70, 0x6c,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x06,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69,
	0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x42, 0x0b, 0x0a, 0x09, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xb2, 0x02, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x12, 0x4b, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12,
	0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79,
	0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x73,
	0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x26, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64,
	0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0xf7, 0x02, 0x0a,
	0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x17, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x79, 0x6e, 0x6f,
	0x6e, 0x79, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x08, 0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x09, 0x73, 0x75,
	0x62, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d,
	0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x09, 0x73, 0x75, 0x62, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1f, 0x0a,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x26,
	0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x94, 0x01, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x50, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64,
	0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x2a, 0x45, 0x0a,
	0x0e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x20, 0x0a, 0x1c, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x4c, 0x57, 0x41, 0x59, 0x53, 0x5f, 0x46, 0x49, 0x4c, 0x54,
	0x45, 0x52, 0x10, 0x01, 0x42, 0xa0, 0x02, 0x0a, 0x2b, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69,
	0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x42, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x5d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6d,
	0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2f, 0x61, 0x70, 0x69, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x67, 0x65, 0x6d, 0x69, 0x6e,
	0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x70, 0x62,
	0x3b, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x70, 0x62, 0xaa, 0x02, 0x27, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x47, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x44, 0x61, 0x74, 0x61,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x56, 0x31, 0x42, 0x65, 0x74, 0x61,
	0xca, 0x02, 0x27, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c,
	0x47, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x44, 0x61, 0x74, 0x61, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0xea, 0x02, 0x2a, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x3a, 0x3a, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x47, 0x65, 0x6d, 0x69,
	0x6e, 0x69, 0x44, 0x61, 0x74, 0x61, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x3a,
	0x3a, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_geminidataanalytics_v1beta_datasource_proto_rawDescOnce sync.Once
	file_google_cloud_geminidataanalytics_v1beta_datasource_proto_rawDescData = file_google_cloud_geminidataanalytics_v1beta_datasource_proto_rawDesc
)

func file_google_cloud_geminidataanalytics_v1beta_datasource_proto_rawDescGZIP() []byte {
	file_google_cloud_geminidataanalytics_v1beta_datasource_proto_rawDescOnce.Do(func() {
		file_google_cloud_geminidataanalytics_v1beta_datasource_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_geminidataanalytics_v1beta_datasource_proto_rawDescData)
	})
	return file_google_cloud_geminidataanalytics_v1beta_datasource_proto_rawDescData
}

var file_google_cloud_geminidataanalytics_v1beta_datasource_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_google_cloud_geminidataanalytics_v1beta_datasource_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_google_cloud_geminidataanalytics_v1beta_datasource_proto_goTypes = []any{
	(DataFilterType)(0),                // 0: google.cloud.geminidataanalytics.v1beta.DataFilterType
	(*DatasourceReferences)(nil),       // 1: google.cloud.geminidataanalytics.v1beta.DatasourceReferences
	(*BigQueryTableReferences)(nil),    // 2: google.cloud.geminidataanalytics.v1beta.BigQueryTableReferences
	(*BigQueryTableReference)(nil),     // 3: google.cloud.geminidataanalytics.v1beta.BigQueryTableReference
	(*StudioDatasourceReferences)(nil), // 4: google.cloud.geminidataanalytics.v1beta.StudioDatasourceReferences
	(*StudioDatasourceReference)(nil),  // 5: google.cloud.geminidataanalytics.v1beta.StudioDatasourceReference
	(*LookerExploreReferences)(nil),    // 6: google.cloud.geminidataanalytics.v1beta.LookerExploreReferences
	(*LookerExploreReference)(nil),     // 7: google.cloud.geminidataanalytics.v1beta.LookerExploreReference
	(*PrivateLookerInstanceInfo)(nil),  // 8: google.cloud.geminidataanalytics.v1beta.PrivateLookerInstanceInfo
	(*Datasource)(nil),                 // 9: google.cloud.geminidataanalytics.v1beta.Datasource
	(*Schema)(nil),                     // 10: google.cloud.geminidataanalytics.v1beta.Schema
	(*Field)(nil),                      // 11: google.cloud.geminidataanalytics.v1beta.Field
	(*DataFilter)(nil),                 // 12: google.cloud.geminidataanalytics.v1beta.DataFilter
	(*Credentials)(nil),                // 13: google.cloud.geminidataanalytics.v1beta.Credentials
}
var file_google_cloud_geminidataanalytics_v1beta_datasource_proto_depIdxs = []int32{
	2,  // 0: google.cloud.geminidataanalytics.v1beta.DatasourceReferences.bq:type_name -> google.cloud.geminidataanalytics.v1beta.BigQueryTableReferences
	4,  // 1: google.cloud.geminidataanalytics.v1beta.DatasourceReferences.studio:type_name -> google.cloud.geminidataanalytics.v1beta.StudioDatasourceReferences
	6,  // 2: google.cloud.geminidataanalytics.v1beta.DatasourceReferences.looker:type_name -> google.cloud.geminidataanalytics.v1beta.LookerExploreReferences
	3,  // 3: google.cloud.geminidataanalytics.v1beta.BigQueryTableReferences.table_references:type_name -> google.cloud.geminidataanalytics.v1beta.BigQueryTableReference
	10, // 4: google.cloud.geminidataanalytics.v1beta.BigQueryTableReference.schema:type_name -> google.cloud.geminidataanalytics.v1beta.Schema
	5,  // 5: google.cloud.geminidataanalytics.v1beta.StudioDatasourceReferences.studio_references:type_name -> google.cloud.geminidataanalytics.v1beta.StudioDatasourceReference
	7,  // 6: google.cloud.geminidataanalytics.v1beta.LookerExploreReferences.explore_references:type_name -> google.cloud.geminidataanalytics.v1beta.LookerExploreReference
	13, // 7: google.cloud.geminidataanalytics.v1beta.LookerExploreReferences.credentials:type_name -> google.cloud.geminidataanalytics.v1beta.Credentials
	8,  // 8: google.cloud.geminidataanalytics.v1beta.LookerExploreReference.private_looker_instance_info:type_name -> google.cloud.geminidataanalytics.v1beta.PrivateLookerInstanceInfo
	10, // 9: google.cloud.geminidataanalytics.v1beta.LookerExploreReference.schema:type_name -> google.cloud.geminidataanalytics.v1beta.Schema
	3,  // 10: google.cloud.geminidataanalytics.v1beta.Datasource.bigquery_table_reference:type_name -> google.cloud.geminidataanalytics.v1beta.BigQueryTableReference
	7,  // 11: google.cloud.geminidataanalytics.v1beta.Datasource.looker_explore_reference:type_name -> google.cloud.geminidataanalytics.v1beta.LookerExploreReference
	10, // 12: google.cloud.geminidataanalytics.v1beta.Datasource.schema:type_name -> google.cloud.geminidataanalytics.v1beta.Schema
	11, // 13: google.cloud.geminidataanalytics.v1beta.Schema.fields:type_name -> google.cloud.geminidataanalytics.v1beta.Field
	12, // 14: google.cloud.geminidataanalytics.v1beta.Schema.filters:type_name -> google.cloud.geminidataanalytics.v1beta.DataFilter
	11, // 15: google.cloud.geminidataanalytics.v1beta.Field.subfields:type_name -> google.cloud.geminidataanalytics.v1beta.Field
	0,  // 16: google.cloud.geminidataanalytics.v1beta.DataFilter.type:type_name -> google.cloud.geminidataanalytics.v1beta.DataFilterType
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_google_cloud_geminidataanalytics_v1beta_datasource_proto_init() }
func file_google_cloud_geminidataanalytics_v1beta_datasource_proto_init() {
	if File_google_cloud_geminidataanalytics_v1beta_datasource_proto != nil {
		return
	}
	file_google_cloud_geminidataanalytics_v1beta_credentials_proto_init()
	file_google_cloud_geminidataanalytics_v1beta_datasource_proto_msgTypes[0].OneofWrappers = []any{
		(*DatasourceReferences_Bq)(nil),
		(*DatasourceReferences_Studio)(nil),
		(*DatasourceReferences_Looker)(nil),
	}
	file_google_cloud_geminidataanalytics_v1beta_datasource_proto_msgTypes[6].OneofWrappers = []any{
		(*LookerExploreReference_LookerInstanceUri)(nil),
		(*LookerExploreReference_PrivateLookerInstanceInfo)(nil),
	}
	file_google_cloud_geminidataanalytics_v1beta_datasource_proto_msgTypes[8].OneofWrappers = []any{
		(*Datasource_BigqueryTableReference)(nil),
		(*Datasource_StudioDatasourceId)(nil),
		(*Datasource_LookerExploreReference)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_geminidataanalytics_v1beta_datasource_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_cloud_geminidataanalytics_v1beta_datasource_proto_goTypes,
		DependencyIndexes: file_google_cloud_geminidataanalytics_v1beta_datasource_proto_depIdxs,
		EnumInfos:         file_google_cloud_geminidataanalytics_v1beta_datasource_proto_enumTypes,
		MessageInfos:      file_google_cloud_geminidataanalytics_v1beta_datasource_proto_msgTypes,
	}.Build()
	File_google_cloud_geminidataanalytics_v1beta_datasource_proto = out.File
	file_google_cloud_geminidataanalytics_v1beta_datasource_proto_rawDesc = nil
	file_google_cloud_geminidataanalytics_v1beta_datasource_proto_goTypes = nil
	file_google_cloud_geminidataanalytics_v1beta_datasource_proto_depIdxs = nil
}
