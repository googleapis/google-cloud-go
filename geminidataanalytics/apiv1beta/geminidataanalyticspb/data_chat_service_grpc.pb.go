// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/geminidataanalytics/v1beta/data_chat_service.proto

package geminidataanalyticspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DataChatService_Chat_FullMethodName               = "/google.cloud.geminidataanalytics.v1beta.DataChatService/Chat"
	DataChatService_CreateConversation_FullMethodName = "/google.cloud.geminidataanalytics.v1beta.DataChatService/CreateConversation"
	DataChatService_GetConversation_FullMethodName    = "/google.cloud.geminidataanalytics.v1beta.DataChatService/GetConversation"
	DataChatService_ListConversations_FullMethodName  = "/google.cloud.geminidataanalytics.v1beta.DataChatService/ListConversations"
	DataChatService_ListMessages_FullMethodName       = "/google.cloud.geminidataanalytics.v1beta.DataChatService/ListMessages"
)

// DataChatServiceClient is the client API for DataChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataChatServiceClient interface {
	// Answers a data question by generating a stream of
	// [Message][google.cloud.geminidataanalytics.v1alpha.Message] objects.
	Chat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (DataChatService_ChatClient, error)
	// Creates a new conversation to persist the conversation history. Each
	// conversation will have multiple messages associated with it.
	CreateConversation(ctx context.Context, in *CreateConversationRequest, opts ...grpc.CallOption) (*Conversation, error)
	// Gets details of a single conversation by using conversation id and parent.
	GetConversation(ctx context.Context, in *GetConversationRequest, opts ...grpc.CallOption) (*Conversation, error)
	// Lists all conversations for a given parent.
	ListConversations(ctx context.Context, in *ListConversationsRequest, opts ...grpc.CallOption) (*ListConversationsResponse, error)
	// Lists all messages for a given conversation.
	ListMessages(ctx context.Context, in *ListMessagesRequest, opts ...grpc.CallOption) (*ListMessagesResponse, error)
}

type dataChatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataChatServiceClient(cc grpc.ClientConnInterface) DataChatServiceClient {
	return &dataChatServiceClient{cc}
}

func (c *dataChatServiceClient) Chat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (DataChatService_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &DataChatService_ServiceDesc.Streams[0], DataChatService_Chat_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &dataChatServiceChatClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DataChatService_ChatClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type dataChatServiceChatClient struct {
	grpc.ClientStream
}

func (x *dataChatServiceChatClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataChatServiceClient) CreateConversation(ctx context.Context, in *CreateConversationRequest, opts ...grpc.CallOption) (*Conversation, error) {
	out := new(Conversation)
	err := c.cc.Invoke(ctx, DataChatService_CreateConversation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataChatServiceClient) GetConversation(ctx context.Context, in *GetConversationRequest, opts ...grpc.CallOption) (*Conversation, error) {
	out := new(Conversation)
	err := c.cc.Invoke(ctx, DataChatService_GetConversation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataChatServiceClient) ListConversations(ctx context.Context, in *ListConversationsRequest, opts ...grpc.CallOption) (*ListConversationsResponse, error) {
	out := new(ListConversationsResponse)
	err := c.cc.Invoke(ctx, DataChatService_ListConversations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataChatServiceClient) ListMessages(ctx context.Context, in *ListMessagesRequest, opts ...grpc.CallOption) (*ListMessagesResponse, error) {
	out := new(ListMessagesResponse)
	err := c.cc.Invoke(ctx, DataChatService_ListMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataChatServiceServer is the server API for DataChatService service.
// All implementations should embed UnimplementedDataChatServiceServer
// for forward compatibility
type DataChatServiceServer interface {
	// Answers a data question by generating a stream of
	// [Message][google.cloud.geminidataanalytics.v1alpha.Message] objects.
	Chat(*ChatRequest, DataChatService_ChatServer) error
	// Creates a new conversation to persist the conversation history. Each
	// conversation will have multiple messages associated with it.
	CreateConversation(context.Context, *CreateConversationRequest) (*Conversation, error)
	// Gets details of a single conversation by using conversation id and parent.
	GetConversation(context.Context, *GetConversationRequest) (*Conversation, error)
	// Lists all conversations for a given parent.
	ListConversations(context.Context, *ListConversationsRequest) (*ListConversationsResponse, error)
	// Lists all messages for a given conversation.
	ListMessages(context.Context, *ListMessagesRequest) (*ListMessagesResponse, error)
}

// UnimplementedDataChatServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDataChatServiceServer struct {
}

func (UnimplementedDataChatServiceServer) Chat(*ChatRequest, DataChatService_ChatServer) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedDataChatServiceServer) CreateConversation(context.Context, *CreateConversationRequest) (*Conversation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConversation not implemented")
}
func (UnimplementedDataChatServiceServer) GetConversation(context.Context, *GetConversationRequest) (*Conversation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConversation not implemented")
}
func (UnimplementedDataChatServiceServer) ListConversations(context.Context, *ListConversationsRequest) (*ListConversationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConversations not implemented")
}
func (UnimplementedDataChatServiceServer) ListMessages(context.Context, *ListMessagesRequest) (*ListMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMessages not implemented")
}

// UnsafeDataChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataChatServiceServer will
// result in compilation errors.
type UnsafeDataChatServiceServer interface {
	mustEmbedUnimplementedDataChatServiceServer()
}

func RegisterDataChatServiceServer(s grpc.ServiceRegistrar, srv DataChatServiceServer) {
	s.RegisterService(&DataChatService_ServiceDesc, srv)
}

func _DataChatService_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataChatServiceServer).Chat(m, &dataChatServiceChatServer{stream})
}

type DataChatService_ChatServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type dataChatServiceChatServer struct {
	grpc.ServerStream
}

func (x *dataChatServiceChatServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _DataChatService_CreateConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataChatServiceServer).CreateConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataChatService_CreateConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataChatServiceServer).CreateConversation(ctx, req.(*CreateConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataChatService_GetConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataChatServiceServer).GetConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataChatService_GetConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataChatServiceServer).GetConversation(ctx, req.(*GetConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataChatService_ListConversations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConversationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataChatServiceServer).ListConversations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataChatService_ListConversations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataChatServiceServer).ListConversations(ctx, req.(*ListConversationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataChatService_ListMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataChatServiceServer).ListMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataChatService_ListMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataChatServiceServer).ListMessages(ctx, req.(*ListMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataChatService_ServiceDesc is the grpc.ServiceDesc for DataChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.geminidataanalytics.v1beta.DataChatService",
	HandlerType: (*DataChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateConversation",
			Handler:    _DataChatService_CreateConversation_Handler,
		},
		{
			MethodName: "GetConversation",
			Handler:    _DataChatService_GetConversation_Handler,
		},
		{
			MethodName: "ListConversations",
			Handler:    _DataChatService_ListConversations_Handler,
		},
		{
			MethodName: "ListMessages",
			Handler:    _DataChatService_ListMessages_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chat",
			Handler:       _DataChatService_Chat_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "google/cloud/geminidataanalytics/v1beta/data_chat_service.proto",
}
