// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.7
// source: google/cloud/geminidataanalytics/v1beta/context_retrieval_service.proto

package geminidataanalyticspb

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request for retrieving BigQuery table contextual data via direct lookup.
type RetrieveBigQueryTableContextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	//
	// Deprecated: Marked as deprecated in google/cloud/geminidataanalytics/v1beta/context_retrieval_service.proto.
	Project string `protobuf:"bytes,5,opt,name=project,proto3" json:"project,omitempty"`
	// Required. Parent value for RetrieveBigQueryTableContextRequest.
	// Pattern: `projects/{project}/locations/{location}`
	// For location, use "global" for now. Regional location value will be
	// supported in the future.
	Parent string `protobuf:"bytes,6,opt,name=parent,proto3" json:"parent,omitempty"`
	// Optional. User query in natural language.
	Query string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	// Optional. A list of direct lookup parameters.
	DirectLookup []*DirectLookup `protobuf:"bytes,3,rep,name=direct_lookup,json=directLookup,proto3" json:"direct_lookup,omitempty"`
}

func (x *RetrieveBigQueryTableContextRequest) Reset() {
	*x = RetrieveBigQueryTableContextRequest{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetrieveBigQueryTableContextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveBigQueryTableContextRequest) ProtoMessage() {}

func (x *RetrieveBigQueryTableContextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveBigQueryTableContextRequest.ProtoReflect.Descriptor instead.
func (*RetrieveBigQueryTableContextRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_rawDescGZIP(), []int{0}
}

// Deprecated: Marked as deprecated in google/cloud/geminidataanalytics/v1beta/context_retrieval_service.proto.
func (x *RetrieveBigQueryTableContextRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *RetrieveBigQueryTableContextRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *RetrieveBigQueryTableContextRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *RetrieveBigQueryTableContextRequest) GetDirectLookup() []*DirectLookup {
	if x != nil {
		return x.DirectLookup
	}
	return nil
}

// Response for retrieving BigQuery table contextual data via direct lookup.
type RetrieveBigQueryTableContextResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of retrieved candidates with their bundled metadata.
	//
	// Deprecated: Marked as deprecated in google/cloud/geminidataanalytics/v1beta/context_retrieval_service.proto.
	Candidates []*RetrieveBigQueryTableContextResponse_Candidate `protobuf:"bytes,1,rep,name=candidates,proto3" json:"candidates,omitempty"`
	// List of retrieved candidates with their bundled metadata.
	TableCandidates []*TableCandidate `protobuf:"bytes,2,rep,name=table_candidates,json=tableCandidates,proto3" json:"table_candidates,omitempty"`
}

func (x *RetrieveBigQueryTableContextResponse) Reset() {
	*x = RetrieveBigQueryTableContextResponse{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetrieveBigQueryTableContextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveBigQueryTableContextResponse) ProtoMessage() {}

func (x *RetrieveBigQueryTableContextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveBigQueryTableContextResponse.ProtoReflect.Descriptor instead.
func (*RetrieveBigQueryTableContextResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_rawDescGZIP(), []int{1}
}

// Deprecated: Marked as deprecated in google/cloud/geminidataanalytics/v1beta/context_retrieval_service.proto.
func (x *RetrieveBigQueryTableContextResponse) GetCandidates() []*RetrieveBigQueryTableContextResponse_Candidate {
	if x != nil {
		return x.Candidates
	}
	return nil
}

func (x *RetrieveBigQueryTableContextResponse) GetTableCandidates() []*TableCandidate {
	if x != nil {
		return x.TableCandidates
	}
	return nil
}

// Request for retrieving BigQuery table contextual data via direct lookup.
type RetrieveBigQueryTableContextsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Parent value for RetrieveBigQueryTableContextRequest.
	// Pattern: `projects/{project}/locations/{location}`
	// For location, use "global" for now. Regional location value will be
	// supported in the future.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Optional. User query in natural language.
	Query string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	// Optional. A list of direct lookup parameters.
	DirectLookups []*DirectLookup `protobuf:"bytes,3,rep,name=direct_lookups,json=directLookups,proto3" json:"direct_lookups,omitempty"`
}

func (x *RetrieveBigQueryTableContextsRequest) Reset() {
	*x = RetrieveBigQueryTableContextsRequest{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetrieveBigQueryTableContextsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveBigQueryTableContextsRequest) ProtoMessage() {}

func (x *RetrieveBigQueryTableContextsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveBigQueryTableContextsRequest.ProtoReflect.Descriptor instead.
func (*RetrieveBigQueryTableContextsRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_rawDescGZIP(), []int{2}
}

func (x *RetrieveBigQueryTableContextsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *RetrieveBigQueryTableContextsRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *RetrieveBigQueryTableContextsRequest) GetDirectLookups() []*DirectLookup {
	if x != nil {
		return x.DirectLookups
	}
	return nil
}

// Response for retrieving BigQuery table contextual data via direct lookup.
type RetrieveBigQueryTableContextsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of retrieved candidates with their bundled metadata.
	TableCandidates []*TableCandidate `protobuf:"bytes,1,rep,name=table_candidates,json=tableCandidates,proto3" json:"table_candidates,omitempty"`
}

func (x *RetrieveBigQueryTableContextsResponse) Reset() {
	*x = RetrieveBigQueryTableContextsResponse{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetrieveBigQueryTableContextsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveBigQueryTableContextsResponse) ProtoMessage() {}

func (x *RetrieveBigQueryTableContextsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveBigQueryTableContextsResponse.ProtoReflect.Descriptor instead.
func (*RetrieveBigQueryTableContextsResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_rawDescGZIP(), []int{3}
}

func (x *RetrieveBigQueryTableContextsResponse) GetTableCandidates() []*TableCandidate {
	if x != nil {
		return x.TableCandidates
	}
	return nil
}

// Request for retrieving BigQuery table contextual data from recently accessed
// tables. Response is sorted by semantic similarity to the query.
type RetrieveBigQueryTableContextsFromRecentTablesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Parent value for
	// RetrieveBigQueryTableContextsFromRecentTablesRequest. Pattern:
	// `projects/{project}/locations/{location}` For location, use "global" for
	// now. Regional location value will be supported in the future.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Optional. User query in natural language.
	Query string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *RetrieveBigQueryTableContextsFromRecentTablesRequest) Reset() {
	*x = RetrieveBigQueryTableContextsFromRecentTablesRequest{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetrieveBigQueryTableContextsFromRecentTablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveBigQueryTableContextsFromRecentTablesRequest) ProtoMessage() {}

func (x *RetrieveBigQueryTableContextsFromRecentTablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveBigQueryTableContextsFromRecentTablesRequest.ProtoReflect.Descriptor instead.
func (*RetrieveBigQueryTableContextsFromRecentTablesRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_rawDescGZIP(), []int{4}
}

func (x *RetrieveBigQueryTableContextsFromRecentTablesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *RetrieveBigQueryTableContextsFromRecentTablesRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

// Response for retrieving BigQuery table contextual data from recently
// accessed tables. Response is sorted by semantic similarity to the query.
type RetrieveBigQueryTableContextsFromRecentTablesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of retrieved candidates with their bundled metadata.
	TableCandidates []*TableCandidate `protobuf:"bytes,1,rep,name=table_candidates,json=tableCandidates,proto3" json:"table_candidates,omitempty"`
}

func (x *RetrieveBigQueryTableContextsFromRecentTablesResponse) Reset() {
	*x = RetrieveBigQueryTableContextsFromRecentTablesResponse{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetrieveBigQueryTableContextsFromRecentTablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveBigQueryTableContextsFromRecentTablesResponse) ProtoMessage() {}

func (x *RetrieveBigQueryTableContextsFromRecentTablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveBigQueryTableContextsFromRecentTablesResponse.ProtoReflect.Descriptor instead.
func (*RetrieveBigQueryTableContextsFromRecentTablesResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_rawDescGZIP(), []int{5}
}

func (x *RetrieveBigQueryTableContextsFromRecentTablesResponse) GetTableCandidates() []*TableCandidate {
	if x != nil {
		return x.TableCandidates
	}
	return nil
}

// Request for retrieving BigQuery table schema with suggested table and column
// descriptions. Columns are sorted by default BigQuery table schema order.
type RetrieveBigQueryTableSuggestedDescriptionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Parent value for
	// RetrieveBigQueryTableSuggestedDescriptionsRequest. Pattern:
	// `projects/{project}/locations/{location}` For location, use "global" for
	// now. Regional location value will be supported in the future.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Optional. A list of direct lookup parameters.
	DirectLookup []*DirectLookup `protobuf:"bytes,2,rep,name=direct_lookup,json=directLookup,proto3" json:"direct_lookup,omitempty"`
}

func (x *RetrieveBigQueryTableSuggestedDescriptionsRequest) Reset() {
	*x = RetrieveBigQueryTableSuggestedDescriptionsRequest{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetrieveBigQueryTableSuggestedDescriptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveBigQueryTableSuggestedDescriptionsRequest) ProtoMessage() {}

func (x *RetrieveBigQueryTableSuggestedDescriptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveBigQueryTableSuggestedDescriptionsRequest.ProtoReflect.Descriptor instead.
func (*RetrieveBigQueryTableSuggestedDescriptionsRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_rawDescGZIP(), []int{6}
}

func (x *RetrieveBigQueryTableSuggestedDescriptionsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *RetrieveBigQueryTableSuggestedDescriptionsRequest) GetDirectLookup() []*DirectLookup {
	if x != nil {
		return x.DirectLookup
	}
	return nil
}

// Response for retrieving BigQuery table schema with suggested table and column
// descriptions. Columns are sorted by default BigQuery table schema order.
type RetrieveBigQueryTableSuggestedDescriptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of retrieved candidates with their bundled metadata.
	TableCandidates []*TableCandidate `protobuf:"bytes,1,rep,name=table_candidates,json=tableCandidates,proto3" json:"table_candidates,omitempty"`
}

func (x *RetrieveBigQueryTableSuggestedDescriptionsResponse) Reset() {
	*x = RetrieveBigQueryTableSuggestedDescriptionsResponse{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetrieveBigQueryTableSuggestedDescriptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveBigQueryTableSuggestedDescriptionsResponse) ProtoMessage() {}

func (x *RetrieveBigQueryTableSuggestedDescriptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveBigQueryTableSuggestedDescriptionsResponse.ProtoReflect.Descriptor instead.
func (*RetrieveBigQueryTableSuggestedDescriptionsResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_rawDescGZIP(), []int{7}
}

func (x *RetrieveBigQueryTableSuggestedDescriptionsResponse) GetTableCandidates() []*TableCandidate {
	if x != nil {
		return x.TableCandidates
	}
	return nil
}

// Request for retrieving BigQuery table schema with suggested NL-SQL examples.
type RetrieveBigQueryTableSuggestedExamplesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Parent value for RetrieveBigQueryTableSuggestedExamplesRequest.
	// Pattern: `projects/{project}/locations/{location}`
	// For location, use "global" for now. Regional location value will be
	// supported in the future.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Optional. A list of direct lookup parameters.
	DirectLookup []*DirectLookup `protobuf:"bytes,2,rep,name=direct_lookup,json=directLookup,proto3" json:"direct_lookup,omitempty"`
}

func (x *RetrieveBigQueryTableSuggestedExamplesRequest) Reset() {
	*x = RetrieveBigQueryTableSuggestedExamplesRequest{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetrieveBigQueryTableSuggestedExamplesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveBigQueryTableSuggestedExamplesRequest) ProtoMessage() {}

func (x *RetrieveBigQueryTableSuggestedExamplesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveBigQueryTableSuggestedExamplesRequest.ProtoReflect.Descriptor instead.
func (*RetrieveBigQueryTableSuggestedExamplesRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_rawDescGZIP(), []int{8}
}

func (x *RetrieveBigQueryTableSuggestedExamplesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *RetrieveBigQueryTableSuggestedExamplesRequest) GetDirectLookup() []*DirectLookup {
	if x != nil {
		return x.DirectLookup
	}
	return nil
}

// Request for retrieving BigQuery table schema with suggested NL-SQL examples.
type RetrieveBigQueryTableSuggestedExamplesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of suggested examples.
	ExampleSuggestions []*RetrieveBigQueryTableSuggestedExamplesResponse_ExampleSuggestion `protobuf:"bytes,2,rep,name=example_suggestions,json=exampleSuggestions,proto3" json:"example_suggestions,omitempty"`
}

func (x *RetrieveBigQueryTableSuggestedExamplesResponse) Reset() {
	*x = RetrieveBigQueryTableSuggestedExamplesResponse{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetrieveBigQueryTableSuggestedExamplesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveBigQueryTableSuggestedExamplesResponse) ProtoMessage() {}

func (x *RetrieveBigQueryTableSuggestedExamplesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveBigQueryTableSuggestedExamplesResponse.ProtoReflect.Descriptor instead.
func (*RetrieveBigQueryTableSuggestedExamplesResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_rawDescGZIP(), []int{9}
}

func (x *RetrieveBigQueryTableSuggestedExamplesResponse) GetExampleSuggestions() []*RetrieveBigQueryTableSuggestedExamplesResponse_ExampleSuggestion {
	if x != nil {
		return x.ExampleSuggestions
	}
	return nil
}

// Request for retrieving BigQuery table references from recently accessed
// tables. Response is sorted by semantic similarity to the query.
type RetrieveBigQueryRecentRelevantTablesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Parent value for RetrieveBigQueryRecentTablesRequest.
	// Pattern: `projects/{project}/locations/{location}`
	// For location, use "global" for now. Regional location value will be
	// supported in the future.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Optional. User query in natural language.
	Query string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *RetrieveBigQueryRecentRelevantTablesRequest) Reset() {
	*x = RetrieveBigQueryRecentRelevantTablesRequest{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetrieveBigQueryRecentRelevantTablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveBigQueryRecentRelevantTablesRequest) ProtoMessage() {}

func (x *RetrieveBigQueryRecentRelevantTablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveBigQueryRecentRelevantTablesRequest.ProtoReflect.Descriptor instead.
func (*RetrieveBigQueryRecentRelevantTablesRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_rawDescGZIP(), []int{10}
}

func (x *RetrieveBigQueryRecentRelevantTablesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *RetrieveBigQueryRecentRelevantTablesRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

// Response for retrieving BigQuery table references from recently accessed
// tables. Response is sorted by semantic similarity to the query.
type RetrieveBigQueryRecentRelevantTablesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of retrieved table ids.
	// The unique identifier for the table. Names are case-sensitive.
	// Example for BigQuery Table: `{project}.{dataset}.{table}`.
	TableIds []string `protobuf:"bytes,1,rep,name=table_ids,json=tableIds,proto3" json:"table_ids,omitempty"`
}

func (x *RetrieveBigQueryRecentRelevantTablesResponse) Reset() {
	*x = RetrieveBigQueryRecentRelevantTablesResponse{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetrieveBigQueryRecentRelevantTablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveBigQueryRecentRelevantTablesResponse) ProtoMessage() {}

func (x *RetrieveBigQueryRecentRelevantTablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveBigQueryRecentRelevantTablesResponse.ProtoReflect.Descriptor instead.
func (*RetrieveBigQueryRecentRelevantTablesResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_rawDescGZIP(), []int{11}
}

func (x *RetrieveBigQueryRecentRelevantTablesResponse) GetTableIds() []string {
	if x != nil {
		return x.TableIds
	}
	return nil
}

// Direct lookup parameters.
type DirectLookup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Table reference that server invokes a direct lookup of table
	// metadata upon. The returned candidate will be TableMetadataResult.
	BigQueryTableReference *BigQueryTableReference `protobuf:"bytes,1,opt,name=big_query_table_reference,json=bigQueryTableReference,proto3" json:"big_query_table_reference,omitempty"`
}

func (x *DirectLookup) Reset() {
	*x = DirectLookup{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DirectLookup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectLookup) ProtoMessage() {}

func (x *DirectLookup) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectLookup.ProtoReflect.Descriptor instead.
func (*DirectLookup) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_rawDescGZIP(), []int{12}
}

func (x *DirectLookup) GetBigQueryTableReference() *BigQueryTableReference {
	if x != nil {
		return x.BigQueryTableReference
	}
	return nil
}

// A retrieved BigQuery table candidate.
type TableCandidate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The fully qualified resource name of the candidate in its source system,
	// if applicable. E.g. for BigQuery tables, the format is:
	// `bigquery.googleapis.com/projects/{project_id}/datasets/{dataset_id}/tables/{table_id}`.
	LinkedResource string `protobuf:"bytes,1,opt,name=linked_resource,json=linkedResource,proto3" json:"linked_resource,omitempty"`
	// In-context-learning string. For example, could be in DDL format.
	IclString string `protobuf:"bytes,2,opt,name=icl_string,json=iclString,proto3" json:"icl_string,omitempty"`
	// Suggested field descriptions for this candidate, if requested.
	FieldSuggestions []*TableCandidate_FieldSuggestion `protobuf:"bytes,3,rep,name=field_suggestions,json=fieldSuggestions,proto3" json:"field_suggestions,omitempty"`
}

func (x *TableCandidate) Reset() {
	*x = TableCandidate{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TableCandidate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableCandidate) ProtoMessage() {}

func (x *TableCandidate) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableCandidate.ProtoReflect.Descriptor instead.
func (*TableCandidate) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_rawDescGZIP(), []int{13}
}

func (x *TableCandidate) GetLinkedResource() string {
	if x != nil {
		return x.LinkedResource
	}
	return ""
}

func (x *TableCandidate) GetIclString() string {
	if x != nil {
		return x.IclString
	}
	return ""
}

func (x *TableCandidate) GetFieldSuggestions() []*TableCandidate_FieldSuggestion {
	if x != nil {
		return x.FieldSuggestions
	}
	return nil
}

// A retrieved candidate.
type RetrieveBigQueryTableContextResponse_Candidate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The fully qualified resource name of the candidate in its source system,
	// if applicable. E.g. for BigQuery tables, the format is:
	// `bigquery.googleapis.com/projects/{project_id}/datasets/{dataset_id}/tables/{table_id}`
	LinkedResource string `protobuf:"bytes,1,opt,name=linked_resource,json=linkedResource,proto3" json:"linked_resource,omitempty"`
	// Content in string format.
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *RetrieveBigQueryTableContextResponse_Candidate) Reset() {
	*x = RetrieveBigQueryTableContextResponse_Candidate{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetrieveBigQueryTableContextResponse_Candidate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveBigQueryTableContextResponse_Candidate) ProtoMessage() {}

func (x *RetrieveBigQueryTableContextResponse_Candidate) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveBigQueryTableContextResponse_Candidate.ProtoReflect.Descriptor instead.
func (*RetrieveBigQueryTableContextResponse_Candidate) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_rawDescGZIP(), []int{1, 0}
}

func (x *RetrieveBigQueryTableContextResponse_Candidate) GetLinkedResource() string {
	if x != nil {
		return x.LinkedResource
	}
	return ""
}

func (x *RetrieveBigQueryTableContextResponse_Candidate) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

// A suggested BigQuery NL-SQL example for the given table.
type RetrieveBigQueryTableSuggestedExamplesResponse_ExampleSuggestion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The natural language query.
	NlQuery string `protobuf:"bytes,1,opt,name=nl_query,json=nlQuery,proto3" json:"nl_query,omitempty"`
	// The SQL answer to the query.
	Sql string `protobuf:"bytes,2,opt,name=sql,proto3" json:"sql,omitempty"`
	// The linked table resources for the suggested example.
	LinkedBigqueryTables []string `protobuf:"bytes,3,rep,name=linked_bigquery_tables,json=linkedBigqueryTables,proto3" json:"linked_bigquery_tables,omitempty"`
}

func (x *RetrieveBigQueryTableSuggestedExamplesResponse_ExampleSuggestion) Reset() {
	*x = RetrieveBigQueryTableSuggestedExamplesResponse_ExampleSuggestion{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetrieveBigQueryTableSuggestedExamplesResponse_ExampleSuggestion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveBigQueryTableSuggestedExamplesResponse_ExampleSuggestion) ProtoMessage() {}

func (x *RetrieveBigQueryTableSuggestedExamplesResponse_ExampleSuggestion) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveBigQueryTableSuggestedExamplesResponse_ExampleSuggestion.ProtoReflect.Descriptor instead.
func (*RetrieveBigQueryTableSuggestedExamplesResponse_ExampleSuggestion) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_rawDescGZIP(), []int{9, 0}
}

func (x *RetrieveBigQueryTableSuggestedExamplesResponse_ExampleSuggestion) GetNlQuery() string {
	if x != nil {
		return x.NlQuery
	}
	return ""
}

func (x *RetrieveBigQueryTableSuggestedExamplesResponse_ExampleSuggestion) GetSql() string {
	if x != nil {
		return x.Sql
	}
	return ""
}

func (x *RetrieveBigQueryTableSuggestedExamplesResponse_ExampleSuggestion) GetLinkedBigqueryTables() []string {
	if x != nil {
		return x.LinkedBigqueryTables
	}
	return nil
}

// A suggested description for a field.
type TableCandidate_FieldSuggestion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The field name.
	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	// The suggested description, if descriptions were requested.
	SuggestedDescription string `protobuf:"bytes,2,opt,name=suggested_description,json=suggestedDescription,proto3" json:"suggested_description,omitempty"`
	// Suggestions for nested fields.
	Nested []*TableCandidate_FieldSuggestion `protobuf:"bytes,3,rep,name=nested,proto3" json:"nested,omitempty"`
}

func (x *TableCandidate_FieldSuggestion) Reset() {
	*x = TableCandidate_FieldSuggestion{}
	mi := &file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TableCandidate_FieldSuggestion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableCandidate_FieldSuggestion) ProtoMessage() {}

func (x *TableCandidate_FieldSuggestion) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableCandidate_FieldSuggestion.ProtoReflect.Descriptor instead.
func (*TableCandidate_FieldSuggestion) Descriptor() ([]byte, []int) {
	return file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_rawDescGZIP(), []int{13, 0}
}

func (x *TableCandidate_FieldSuggestion) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *TableCandidate_FieldSuggestion) GetSuggestedDescription() string {
	if x != nil {
		return x.SuggestedDescription
	}
	return ""
}

func (x *TableCandidate_FieldSuggestion) GetNested() []*TableCandidate_FieldSuggestion {
	if x != nil {
		return x.Nested
	}
	return nil
}

var File_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto protoreflect.FileDescriptor

var file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_rawDesc = []byte{
	0x0a, 0x47, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67,
	0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x27, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61,
	0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x38, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xdf, 0x01, 0x0a, 0x23, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x42, 0x69, 0x67, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0xe0, 0x41, 0x02, 0x18, 0x01, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x5f, 0x0a, 0x0d, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74,
	0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x0c, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x22, 0xd7, 0x02, 0x0a, 0x24, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x42, 0x69,
	0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a, 0x0a, 0x63, 0x61,
	0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x57,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65,
	0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x61,
	0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x63, 0x61, 0x6e,
	0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x62, 0x0a, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x4e, 0x0a, 0x09, 0x43,
	0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x69, 0x6e, 0x6b,
	0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xc1, 0x01, 0x0a, 0x24,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x19, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x61, 0x0a, 0x0e,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x0d, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x73, 0x22,
	0x8b, 0x01, 0x0a, 0x25, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x42, 0x69, 0x67, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x10, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x6e, 0x0a,
	0x34, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x46, 0x72,
	0x6f, 0x6d, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x9b, 0x01,
	0x0a, 0x35, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x46,
	0x72, 0x6f, 0x6d, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0xb1, 0x01, 0x0a, 0x31,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x5f,
	0x0a, 0x0d, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x0c, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x22,
	0x98, 0x01, 0x0a, 0x32, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x42, 0x69, 0x67, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0xad, 0x01, 0x0a, 0x2d, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x5f, 0x0a, 0x0d, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x22, 0xc5, 0x02, 0x0a, 0x2e, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9a, 0x01,
	0x0a, 0x13, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x69, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e,
	0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x42, 0x69,
	0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x75, 0x67, 0x67,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x53,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x76, 0x0a, 0x11, 0x45, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x19, 0x0a, 0x08, 0x6e, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6e, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x71,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x71, 0x6c, 0x12, 0x34, 0x0a, 0x16,
	0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x6c, 0x69,
	0x6e, 0x6b, 0x65, 0x64, 0x42, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x22, 0x65, 0x0a, 0x2b, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x42, 0x69,
	0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x65,
	0x76, 0x61, 0x6e, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x19,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x4b, 0x0a, 0x2c, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x65, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x0c, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x7f, 0x0a, 0x19, 0x62, 0x69, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69,
	0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x2e, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x16, 0x62, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x8e, 0x03, 0x0a, 0x0e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6c,
	0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x63, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x63, 0x6c, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x74, 0x0a, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x73, 0x75, 0x67,
	0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65,
	0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61,
	0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x75, 0x67,
	0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x75,
	0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xbd, 0x01, 0x0a, 0x0f, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x33, 0x0a, 0x15, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x06, 0x6e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61,
	0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x32, 0xc5, 0x0f, 0x0a, 0x17, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8c, 0x02, 0x0a, 0x1c, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x4d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x4f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x49, 0x3a, 0x01, 0x2a, 0x22, 0x44,
	0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x42, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x9a, 0x02, 0x0a, 0x1d, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x12, 0x4d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x54, 0x3a, 0x01, 0x2a,
	0x22, 0x4f, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x61, 0x6c, 0x3a, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x42, 0x69, 0x67, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x73, 0x12, 0xda, 0x02, 0x0a, 0x2d, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x42, 0x69,
	0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x12, 0x5d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x52,
	0x65, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x5e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x65, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65,
	0x63, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x6a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x64, 0x3a, 0x01, 0x2a, 0x22, 0x5f, 0x2f,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c,
	0x3a, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x46, 0x72,
	0x6f, 0x6d, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0xce,
	0x02, 0x0a, 0x2a, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x42, 0x69, 0x67, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d,
	0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x42, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x75, 0x67,
	0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x5b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64,
	0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x42, 0x69, 0x67, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x67, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x61, 0x3a, 0x01,
	0x2a, 0x22, 0x5c, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x72, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x61, 0x6c, 0x3a, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x42, 0x69, 0x67,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0xbe, 0x02, 0x0a, 0x26, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x42, 0x69, 0x67, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x56, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69,
	0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x42, 0x69, 0x67,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x57, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x65, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x63, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x5d, 0x3a, 0x01, 0x2a, 0x22, 0x58, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f,
	0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f,
	0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x3a, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x12, 0xb6, 0x02, 0x0a, 0x24, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x42, 0x69, 0x67,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x76,
	0x61, 0x6e, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x54, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64,
	0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x42, 0x69, 0x67, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61,
	0x6e, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x55, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67,
	0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x61, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5b, 0x3a, 0x01,
	0x2a, 0x22, 0x56, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x72, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x61, 0x6c, 0x3a, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x42, 0x69, 0x67,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x76,
	0x61, 0x6e, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x1a, 0x56, 0xca, 0x41, 0x22, 0x67, 0x65,
	0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0xd2, 0x41, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x42, 0xad, 0x02, 0x0a, 0x2b, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74,
	0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x42, 0x1c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x5d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74,
	0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x2f, 0x67, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x70, 0x62, 0x3b, 0x67, 0x65, 0x6d, 0x69, 0x6e,
	0x69, 0x64, 0x61, 0x74, 0x61, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x70, 0x62,
	0xaa, 0x02, 0x27, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x47, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x44, 0x61, 0x74, 0x61, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x56, 0x31, 0x42, 0x65, 0x74, 0x61, 0xca, 0x02, 0x27, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x5c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x47, 0x65, 0x6d, 0x69, 0x6e, 0x69,
	0x44, 0x61, 0x74, 0x61, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x5c, 0x56, 0x31,
	0x62, 0x65, 0x74, 0x61, 0xea, 0x02, 0x2a, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x47, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x44, 0x61, 0x74, 0x61,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_rawDescOnce sync.Once
	file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_rawDescData = file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_rawDesc
)

func file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_rawDescGZIP() []byte {
	file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_rawDescOnce.Do(func() {
		file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_rawDescData)
	})
	return file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_rawDescData
}

var file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_goTypes = []any{
	(*RetrieveBigQueryTableContextRequest)(nil),                   // 0: google.cloud.geminidataanalytics.v1beta.RetrieveBigQueryTableContextRequest
	(*RetrieveBigQueryTableContextResponse)(nil),                  // 1: google.cloud.geminidataanalytics.v1beta.RetrieveBigQueryTableContextResponse
	(*RetrieveBigQueryTableContextsRequest)(nil),                  // 2: google.cloud.geminidataanalytics.v1beta.RetrieveBigQueryTableContextsRequest
	(*RetrieveBigQueryTableContextsResponse)(nil),                 // 3: google.cloud.geminidataanalytics.v1beta.RetrieveBigQueryTableContextsResponse
	(*RetrieveBigQueryTableContextsFromRecentTablesRequest)(nil),  // 4: google.cloud.geminidataanalytics.v1beta.RetrieveBigQueryTableContextsFromRecentTablesRequest
	(*RetrieveBigQueryTableContextsFromRecentTablesResponse)(nil), // 5: google.cloud.geminidataanalytics.v1beta.RetrieveBigQueryTableContextsFromRecentTablesResponse
	(*RetrieveBigQueryTableSuggestedDescriptionsRequest)(nil),     // 6: google.cloud.geminidataanalytics.v1beta.RetrieveBigQueryTableSuggestedDescriptionsRequest
	(*RetrieveBigQueryTableSuggestedDescriptionsResponse)(nil),    // 7: google.cloud.geminidataanalytics.v1beta.RetrieveBigQueryTableSuggestedDescriptionsResponse
	(*RetrieveBigQueryTableSuggestedExamplesRequest)(nil),         // 8: google.cloud.geminidataanalytics.v1beta.RetrieveBigQueryTableSuggestedExamplesRequest
	(*RetrieveBigQueryTableSuggestedExamplesResponse)(nil),        // 9: google.cloud.geminidataanalytics.v1beta.RetrieveBigQueryTableSuggestedExamplesResponse
	(*RetrieveBigQueryRecentRelevantTablesRequest)(nil),           // 10: google.cloud.geminidataanalytics.v1beta.RetrieveBigQueryRecentRelevantTablesRequest
	(*RetrieveBigQueryRecentRelevantTablesResponse)(nil),          // 11: google.cloud.geminidataanalytics.v1beta.RetrieveBigQueryRecentRelevantTablesResponse
	(*DirectLookup)(nil),   // 12: google.cloud.geminidataanalytics.v1beta.DirectLookup
	(*TableCandidate)(nil), // 13: google.cloud.geminidataanalytics.v1beta.TableCandidate
	(*RetrieveBigQueryTableContextResponse_Candidate)(nil),                   // 14: google.cloud.geminidataanalytics.v1beta.RetrieveBigQueryTableContextResponse.Candidate
	(*RetrieveBigQueryTableSuggestedExamplesResponse_ExampleSuggestion)(nil), // 15: google.cloud.geminidataanalytics.v1beta.RetrieveBigQueryTableSuggestedExamplesResponse.ExampleSuggestion
	(*TableCandidate_FieldSuggestion)(nil),                                   // 16: google.cloud.geminidataanalytics.v1beta.TableCandidate.FieldSuggestion
	(*BigQueryTableReference)(nil),                                           // 17: google.cloud.geminidataanalytics.v1beta.BigQueryTableReference
}
var file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_depIdxs = []int32{
	12, // 0: google.cloud.geminidataanalytics.v1beta.RetrieveBigQueryTableContextRequest.direct_lookup:type_name -> google.cloud.geminidataanalytics.v1beta.DirectLookup
	14, // 1: google.cloud.geminidataanalytics.v1beta.RetrieveBigQueryTableContextResponse.candidates:type_name -> google.cloud.geminidataanalytics.v1beta.RetrieveBigQueryTableContextResponse.Candidate
	13, // 2: google.cloud.geminidataanalytics.v1beta.RetrieveBigQueryTableContextResponse.table_candidates:type_name -> google.cloud.geminidataanalytics.v1beta.TableCandidate
	12, // 3: google.cloud.geminidataanalytics.v1beta.RetrieveBigQueryTableContextsRequest.direct_lookups:type_name -> google.cloud.geminidataanalytics.v1beta.DirectLookup
	13, // 4: google.cloud.geminidataanalytics.v1beta.RetrieveBigQueryTableContextsResponse.table_candidates:type_name -> google.cloud.geminidataanalytics.v1beta.TableCandidate
	13, // 5: google.cloud.geminidataanalytics.v1beta.RetrieveBigQueryTableContextsFromRecentTablesResponse.table_candidates:type_name -> google.cloud.geminidataanalytics.v1beta.TableCandidate
	12, // 6: google.cloud.geminidataanalytics.v1beta.RetrieveBigQueryTableSuggestedDescriptionsRequest.direct_lookup:type_name -> google.cloud.geminidataanalytics.v1beta.DirectLookup
	13, // 7: google.cloud.geminidataanalytics.v1beta.RetrieveBigQueryTableSuggestedDescriptionsResponse.table_candidates:type_name -> google.cloud.geminidataanalytics.v1beta.TableCandidate
	12, // 8: google.cloud.geminidataanalytics.v1beta.RetrieveBigQueryTableSuggestedExamplesRequest.direct_lookup:type_name -> google.cloud.geminidataanalytics.v1beta.DirectLookup
	15, // 9: google.cloud.geminidataanalytics.v1beta.RetrieveBigQueryTableSuggestedExamplesResponse.example_suggestions:type_name -> google.cloud.geminidataanalytics.v1beta.RetrieveBigQueryTableSuggestedExamplesResponse.ExampleSuggestion
	17, // 10: google.cloud.geminidataanalytics.v1beta.DirectLookup.big_query_table_reference:type_name -> google.cloud.geminidataanalytics.v1beta.BigQueryTableReference
	16, // 11: google.cloud.geminidataanalytics.v1beta.TableCandidate.field_suggestions:type_name -> google.cloud.geminidataanalytics.v1beta.TableCandidate.FieldSuggestion
	16, // 12: google.cloud.geminidataanalytics.v1beta.TableCandidate.FieldSuggestion.nested:type_name -> google.cloud.geminidataanalytics.v1beta.TableCandidate.FieldSuggestion
	0,  // 13: google.cloud.geminidataanalytics.v1beta.ContextRetrievalService.RetrieveBigQueryTableContext:input_type -> google.cloud.geminidataanalytics.v1beta.RetrieveBigQueryTableContextRequest
	2,  // 14: google.cloud.geminidataanalytics.v1beta.ContextRetrievalService.RetrieveBigQueryTableContexts:input_type -> google.cloud.geminidataanalytics.v1beta.RetrieveBigQueryTableContextsRequest
	4,  // 15: google.cloud.geminidataanalytics.v1beta.ContextRetrievalService.RetrieveBigQueryTableContextsFromRecentTables:input_type -> google.cloud.geminidataanalytics.v1beta.RetrieveBigQueryTableContextsFromRecentTablesRequest
	6,  // 16: google.cloud.geminidataanalytics.v1beta.ContextRetrievalService.RetrieveBigQueryTableSuggestedDescriptions:input_type -> google.cloud.geminidataanalytics.v1beta.RetrieveBigQueryTableSuggestedDescriptionsRequest
	8,  // 17: google.cloud.geminidataanalytics.v1beta.ContextRetrievalService.RetrieveBigQueryTableSuggestedExamples:input_type -> google.cloud.geminidataanalytics.v1beta.RetrieveBigQueryTableSuggestedExamplesRequest
	10, // 18: google.cloud.geminidataanalytics.v1beta.ContextRetrievalService.RetrieveBigQueryRecentRelevantTables:input_type -> google.cloud.geminidataanalytics.v1beta.RetrieveBigQueryRecentRelevantTablesRequest
	1,  // 19: google.cloud.geminidataanalytics.v1beta.ContextRetrievalService.RetrieveBigQueryTableContext:output_type -> google.cloud.geminidataanalytics.v1beta.RetrieveBigQueryTableContextResponse
	3,  // 20: google.cloud.geminidataanalytics.v1beta.ContextRetrievalService.RetrieveBigQueryTableContexts:output_type -> google.cloud.geminidataanalytics.v1beta.RetrieveBigQueryTableContextsResponse
	5,  // 21: google.cloud.geminidataanalytics.v1beta.ContextRetrievalService.RetrieveBigQueryTableContextsFromRecentTables:output_type -> google.cloud.geminidataanalytics.v1beta.RetrieveBigQueryTableContextsFromRecentTablesResponse
	7,  // 22: google.cloud.geminidataanalytics.v1beta.ContextRetrievalService.RetrieveBigQueryTableSuggestedDescriptions:output_type -> google.cloud.geminidataanalytics.v1beta.RetrieveBigQueryTableSuggestedDescriptionsResponse
	9,  // 23: google.cloud.geminidataanalytics.v1beta.ContextRetrievalService.RetrieveBigQueryTableSuggestedExamples:output_type -> google.cloud.geminidataanalytics.v1beta.RetrieveBigQueryTableSuggestedExamplesResponse
	11, // 24: google.cloud.geminidataanalytics.v1beta.ContextRetrievalService.RetrieveBigQueryRecentRelevantTables:output_type -> google.cloud.geminidataanalytics.v1beta.RetrieveBigQueryRecentRelevantTablesResponse
	19, // [19:25] is the sub-list for method output_type
	13, // [13:19] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_init() }
func file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_init() {
	if File_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto != nil {
		return
	}
	file_google_cloud_geminidataanalytics_v1beta_datasource_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_goTypes,
		DependencyIndexes: file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_depIdxs,
		MessageInfos:      file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_msgTypes,
	}.Build()
	File_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto = out.File
	file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_rawDesc = nil
	file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_goTypes = nil
	file_google_cloud_geminidataanalytics_v1beta_context_retrieval_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ContextRetrievalServiceClient is the client API for ContextRetrievalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ContextRetrievalServiceClient interface {
	// Retrieves BigQuery table contextual data for provided table references.
	// Contextual data includes table schema information as well as sample
	// values.
	RetrieveBigQueryTableContext(ctx context.Context, in *RetrieveBigQueryTableContextRequest, opts ...grpc.CallOption) (*RetrieveBigQueryTableContextResponse, error)
	// Retrieves BigQuery table contextual data for provided table references.
	// Contextual data includes table schema information as well as sample
	// values.
	RetrieveBigQueryTableContexts(ctx context.Context, in *RetrieveBigQueryTableContextsRequest, opts ...grpc.CallOption) (*RetrieveBigQueryTableContextsResponse, error)
	// Retrieves BigQuery table contextual data from recently accessed tables.
	// Contextual data includes table schema information as well as sample
	// values.
	RetrieveBigQueryTableContextsFromRecentTables(ctx context.Context, in *RetrieveBigQueryTableContextsFromRecentTablesRequest, opts ...grpc.CallOption) (*RetrieveBigQueryTableContextsFromRecentTablesResponse, error)
	// Retrieves BigQuery table schema with suggested table and column
	// descriptions.
	RetrieveBigQueryTableSuggestedDescriptions(ctx context.Context, in *RetrieveBigQueryTableSuggestedDescriptionsRequest, opts ...grpc.CallOption) (*RetrieveBigQueryTableSuggestedDescriptionsResponse, error)
	// Retrieves BigQuery table schema with suggested NL-SQL examples.
	RetrieveBigQueryTableSuggestedExamples(ctx context.Context, in *RetrieveBigQueryTableSuggestedExamplesRequest, opts ...grpc.CallOption) (*RetrieveBigQueryTableSuggestedExamplesResponse, error)
	// Retrieves BigQuery table references from recently accessed tables.
	RetrieveBigQueryRecentRelevantTables(ctx context.Context, in *RetrieveBigQueryRecentRelevantTablesRequest, opts ...grpc.CallOption) (*RetrieveBigQueryRecentRelevantTablesResponse, error)
}

type contextRetrievalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContextRetrievalServiceClient(cc grpc.ClientConnInterface) ContextRetrievalServiceClient {
	return &contextRetrievalServiceClient{cc}
}

func (c *contextRetrievalServiceClient) RetrieveBigQueryTableContext(ctx context.Context, in *RetrieveBigQueryTableContextRequest, opts ...grpc.CallOption) (*RetrieveBigQueryTableContextResponse, error) {
	out := new(RetrieveBigQueryTableContextResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.geminidataanalytics.v1beta.ContextRetrievalService/RetrieveBigQueryTableContext", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextRetrievalServiceClient) RetrieveBigQueryTableContexts(ctx context.Context, in *RetrieveBigQueryTableContextsRequest, opts ...grpc.CallOption) (*RetrieveBigQueryTableContextsResponse, error) {
	out := new(RetrieveBigQueryTableContextsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.geminidataanalytics.v1beta.ContextRetrievalService/RetrieveBigQueryTableContexts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextRetrievalServiceClient) RetrieveBigQueryTableContextsFromRecentTables(ctx context.Context, in *RetrieveBigQueryTableContextsFromRecentTablesRequest, opts ...grpc.CallOption) (*RetrieveBigQueryTableContextsFromRecentTablesResponse, error) {
	out := new(RetrieveBigQueryTableContextsFromRecentTablesResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.geminidataanalytics.v1beta.ContextRetrievalService/RetrieveBigQueryTableContextsFromRecentTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextRetrievalServiceClient) RetrieveBigQueryTableSuggestedDescriptions(ctx context.Context, in *RetrieveBigQueryTableSuggestedDescriptionsRequest, opts ...grpc.CallOption) (*RetrieveBigQueryTableSuggestedDescriptionsResponse, error) {
	out := new(RetrieveBigQueryTableSuggestedDescriptionsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.geminidataanalytics.v1beta.ContextRetrievalService/RetrieveBigQueryTableSuggestedDescriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextRetrievalServiceClient) RetrieveBigQueryTableSuggestedExamples(ctx context.Context, in *RetrieveBigQueryTableSuggestedExamplesRequest, opts ...grpc.CallOption) (*RetrieveBigQueryTableSuggestedExamplesResponse, error) {
	out := new(RetrieveBigQueryTableSuggestedExamplesResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.geminidataanalytics.v1beta.ContextRetrievalService/RetrieveBigQueryTableSuggestedExamples", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextRetrievalServiceClient) RetrieveBigQueryRecentRelevantTables(ctx context.Context, in *RetrieveBigQueryRecentRelevantTablesRequest, opts ...grpc.CallOption) (*RetrieveBigQueryRecentRelevantTablesResponse, error) {
	out := new(RetrieveBigQueryRecentRelevantTablesResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.geminidataanalytics.v1beta.ContextRetrievalService/RetrieveBigQueryRecentRelevantTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContextRetrievalServiceServer is the server API for ContextRetrievalService service.
type ContextRetrievalServiceServer interface {
	// Retrieves BigQuery table contextual data for provided table references.
	// Contextual data includes table schema information as well as sample
	// values.
	RetrieveBigQueryTableContext(context.Context, *RetrieveBigQueryTableContextRequest) (*RetrieveBigQueryTableContextResponse, error)
	// Retrieves BigQuery table contextual data for provided table references.
	// Contextual data includes table schema information as well as sample
	// values.
	RetrieveBigQueryTableContexts(context.Context, *RetrieveBigQueryTableContextsRequest) (*RetrieveBigQueryTableContextsResponse, error)
	// Retrieves BigQuery table contextual data from recently accessed tables.
	// Contextual data includes table schema information as well as sample
	// values.
	RetrieveBigQueryTableContextsFromRecentTables(context.Context, *RetrieveBigQueryTableContextsFromRecentTablesRequest) (*RetrieveBigQueryTableContextsFromRecentTablesResponse, error)
	// Retrieves BigQuery table schema with suggested table and column
	// descriptions.
	RetrieveBigQueryTableSuggestedDescriptions(context.Context, *RetrieveBigQueryTableSuggestedDescriptionsRequest) (*RetrieveBigQueryTableSuggestedDescriptionsResponse, error)
	// Retrieves BigQuery table schema with suggested NL-SQL examples.
	RetrieveBigQueryTableSuggestedExamples(context.Context, *RetrieveBigQueryTableSuggestedExamplesRequest) (*RetrieveBigQueryTableSuggestedExamplesResponse, error)
	// Retrieves BigQuery table references from recently accessed tables.
	RetrieveBigQueryRecentRelevantTables(context.Context, *RetrieveBigQueryRecentRelevantTablesRequest) (*RetrieveBigQueryRecentRelevantTablesResponse, error)
}

// UnimplementedContextRetrievalServiceServer can be embedded to have forward compatible implementations.
type UnimplementedContextRetrievalServiceServer struct {
}

func (*UnimplementedContextRetrievalServiceServer) RetrieveBigQueryTableContext(context.Context, *RetrieveBigQueryTableContextRequest) (*RetrieveBigQueryTableContextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveBigQueryTableContext not implemented")
}
func (*UnimplementedContextRetrievalServiceServer) RetrieveBigQueryTableContexts(context.Context, *RetrieveBigQueryTableContextsRequest) (*RetrieveBigQueryTableContextsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveBigQueryTableContexts not implemented")
}
func (*UnimplementedContextRetrievalServiceServer) RetrieveBigQueryTableContextsFromRecentTables(context.Context, *RetrieveBigQueryTableContextsFromRecentTablesRequest) (*RetrieveBigQueryTableContextsFromRecentTablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveBigQueryTableContextsFromRecentTables not implemented")
}
func (*UnimplementedContextRetrievalServiceServer) RetrieveBigQueryTableSuggestedDescriptions(context.Context, *RetrieveBigQueryTableSuggestedDescriptionsRequest) (*RetrieveBigQueryTableSuggestedDescriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveBigQueryTableSuggestedDescriptions not implemented")
}
func (*UnimplementedContextRetrievalServiceServer) RetrieveBigQueryTableSuggestedExamples(context.Context, *RetrieveBigQueryTableSuggestedExamplesRequest) (*RetrieveBigQueryTableSuggestedExamplesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveBigQueryTableSuggestedExamples not implemented")
}
func (*UnimplementedContextRetrievalServiceServer) RetrieveBigQueryRecentRelevantTables(context.Context, *RetrieveBigQueryRecentRelevantTablesRequest) (*RetrieveBigQueryRecentRelevantTablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveBigQueryRecentRelevantTables not implemented")
}

func RegisterContextRetrievalServiceServer(s *grpc.Server, srv ContextRetrievalServiceServer) {
	s.RegisterService(&_ContextRetrievalService_serviceDesc, srv)
}

func _ContextRetrievalService_RetrieveBigQueryTableContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveBigQueryTableContextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextRetrievalServiceServer).RetrieveBigQueryTableContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.geminidataanalytics.v1beta.ContextRetrievalService/RetrieveBigQueryTableContext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextRetrievalServiceServer).RetrieveBigQueryTableContext(ctx, req.(*RetrieveBigQueryTableContextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContextRetrievalService_RetrieveBigQueryTableContexts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveBigQueryTableContextsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextRetrievalServiceServer).RetrieveBigQueryTableContexts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.geminidataanalytics.v1beta.ContextRetrievalService/RetrieveBigQueryTableContexts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextRetrievalServiceServer).RetrieveBigQueryTableContexts(ctx, req.(*RetrieveBigQueryTableContextsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContextRetrievalService_RetrieveBigQueryTableContextsFromRecentTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveBigQueryTableContextsFromRecentTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextRetrievalServiceServer).RetrieveBigQueryTableContextsFromRecentTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.geminidataanalytics.v1beta.ContextRetrievalService/RetrieveBigQueryTableContextsFromRecentTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextRetrievalServiceServer).RetrieveBigQueryTableContextsFromRecentTables(ctx, req.(*RetrieveBigQueryTableContextsFromRecentTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContextRetrievalService_RetrieveBigQueryTableSuggestedDescriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveBigQueryTableSuggestedDescriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextRetrievalServiceServer).RetrieveBigQueryTableSuggestedDescriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.geminidataanalytics.v1beta.ContextRetrievalService/RetrieveBigQueryTableSuggestedDescriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextRetrievalServiceServer).RetrieveBigQueryTableSuggestedDescriptions(ctx, req.(*RetrieveBigQueryTableSuggestedDescriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContextRetrievalService_RetrieveBigQueryTableSuggestedExamples_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveBigQueryTableSuggestedExamplesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextRetrievalServiceServer).RetrieveBigQueryTableSuggestedExamples(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.geminidataanalytics.v1beta.ContextRetrievalService/RetrieveBigQueryTableSuggestedExamples",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextRetrievalServiceServer).RetrieveBigQueryTableSuggestedExamples(ctx, req.(*RetrieveBigQueryTableSuggestedExamplesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContextRetrievalService_RetrieveBigQueryRecentRelevantTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveBigQueryRecentRelevantTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextRetrievalServiceServer).RetrieveBigQueryRecentRelevantTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.geminidataanalytics.v1beta.ContextRetrievalService/RetrieveBigQueryRecentRelevantTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextRetrievalServiceServer).RetrieveBigQueryRecentRelevantTables(ctx, req.(*RetrieveBigQueryRecentRelevantTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ContextRetrievalService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.geminidataanalytics.v1beta.ContextRetrievalService",
	HandlerType: (*ContextRetrievalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RetrieveBigQueryTableContext",
			Handler:    _ContextRetrievalService_RetrieveBigQueryTableContext_Handler,
		},
		{
			MethodName: "RetrieveBigQueryTableContexts",
			Handler:    _ContextRetrievalService_RetrieveBigQueryTableContexts_Handler,
		},
		{
			MethodName: "RetrieveBigQueryTableContextsFromRecentTables",
			Handler:    _ContextRetrievalService_RetrieveBigQueryTableContextsFromRecentTables_Handler,
		},
		{
			MethodName: "RetrieveBigQueryTableSuggestedDescriptions",
			Handler:    _ContextRetrievalService_RetrieveBigQueryTableSuggestedDescriptions_Handler,
		},
		{
			MethodName: "RetrieveBigQueryTableSuggestedExamples",
			Handler:    _ContextRetrievalService_RetrieveBigQueryTableSuggestedExamples_Handler,
		},
		{
			MethodName: "RetrieveBigQueryRecentRelevantTables",
			Handler:    _ContextRetrievalService_RetrieveBigQueryRecentRelevantTables_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/geminidataanalytics/v1beta/context_retrieval_service.proto",
}
