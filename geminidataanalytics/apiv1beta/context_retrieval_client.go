// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package geminidataanalytics

import (
	"bytes"
	"context"
	"fmt"
	"log/slog"
	"math"
	"net/http"
	"net/url"

	geminidataanalyticspb "cloud.google.com/go/geminidataanalytics/apiv1beta/geminidataanalyticspb"
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	gax "github.com/googleapis/gax-go/v2"
	"google.golang.org/api/iterator"
	"google.golang.org/api/option"
	"google.golang.org/api/option/internaloption"
	gtransport "google.golang.org/api/transport/grpc"
	httptransport "google.golang.org/api/transport/http"
	locationpb "google.golang.org/genproto/googleapis/cloud/location"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
)

var newContextRetrievalClientHook clientHook

// ContextRetrievalCallOptions contains the retry settings for each method of ContextRetrievalClient.
type ContextRetrievalCallOptions struct {
	RetrieveBigQueryTableContext                  []gax.CallOption
	RetrieveBigQueryTableContexts                 []gax.CallOption
	RetrieveBigQueryTableContextsFromRecentTables []gax.CallOption
	RetrieveBigQueryTableSuggestedDescriptions    []gax.CallOption
	RetrieveBigQueryTableSuggestedExamples        []gax.CallOption
	RetrieveBigQueryRecentRelevantTables          []gax.CallOption
	GetLocation                                   []gax.CallOption
	ListLocations                                 []gax.CallOption
	CancelOperation                               []gax.CallOption
	DeleteOperation                               []gax.CallOption
	GetOperation                                  []gax.CallOption
	ListOperations                                []gax.CallOption
}

func defaultContextRetrievalGRPCClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("geminidataanalytics.googleapis.com:443"),
		internaloption.WithDefaultEndpointTemplate("geminidataanalytics.UNIVERSE_DOMAIN:443"),
		internaloption.WithDefaultMTLSEndpoint("geminidataanalytics.mtls.googleapis.com:443"),
		internaloption.WithDefaultUniverseDomain("googleapis.com"),
		internaloption.WithDefaultAudience("https://geminidataanalytics.googleapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableJwtWithScope(),
		internaloption.EnableNewAuthLibrary(),
		option.WithGRPCDialOption(grpc.WithDefaultCallOptions(
			grpc.MaxCallRecvMsgSize(math.MaxInt32))),
	}
}

func defaultContextRetrievalCallOptions() *ContextRetrievalCallOptions {
	return &ContextRetrievalCallOptions{
		RetrieveBigQueryTableContext:                  []gax.CallOption{},
		RetrieveBigQueryTableContexts:                 []gax.CallOption{},
		RetrieveBigQueryTableContextsFromRecentTables: []gax.CallOption{},
		RetrieveBigQueryTableSuggestedDescriptions:    []gax.CallOption{},
		RetrieveBigQueryTableSuggestedExamples:        []gax.CallOption{},
		RetrieveBigQueryRecentRelevantTables:          []gax.CallOption{},
		GetLocation:                                   []gax.CallOption{},
		ListLocations:                                 []gax.CallOption{},
		CancelOperation:                               []gax.CallOption{},
		DeleteOperation:                               []gax.CallOption{},
		GetOperation:                                  []gax.CallOption{},
		ListOperations:                                []gax.CallOption{},
	}
}

func defaultContextRetrievalRESTCallOptions() *ContextRetrievalCallOptions {
	return &ContextRetrievalCallOptions{
		RetrieveBigQueryTableContext:                  []gax.CallOption{},
		RetrieveBigQueryTableContexts:                 []gax.CallOption{},
		RetrieveBigQueryTableContextsFromRecentTables: []gax.CallOption{},
		RetrieveBigQueryTableSuggestedDescriptions:    []gax.CallOption{},
		RetrieveBigQueryTableSuggestedExamples:        []gax.CallOption{},
		RetrieveBigQueryRecentRelevantTables:          []gax.CallOption{},
		GetLocation:                                   []gax.CallOption{},
		ListLocations:                                 []gax.CallOption{},
		CancelOperation:                               []gax.CallOption{},
		DeleteOperation:                               []gax.CallOption{},
		GetOperation:                                  []gax.CallOption{},
		ListOperations:                                []gax.CallOption{},
	}
}

// internalContextRetrievalClient is an interface that defines the methods available from Data Analytics API with Gemini.
type internalContextRetrievalClient interface {
	Close() error
	setGoogleClientInfo(...string)
	Connection() *grpc.ClientConn
	RetrieveBigQueryTableContext(context.Context, *geminidataanalyticspb.RetrieveBigQueryTableContextRequest, ...gax.CallOption) (*geminidataanalyticspb.RetrieveBigQueryTableContextResponse, error)
	RetrieveBigQueryTableContexts(context.Context, *geminidataanalyticspb.RetrieveBigQueryTableContextsRequest, ...gax.CallOption) (*geminidataanalyticspb.RetrieveBigQueryTableContextsResponse, error)
	RetrieveBigQueryTableContextsFromRecentTables(context.Context, *geminidataanalyticspb.RetrieveBigQueryTableContextsFromRecentTablesRequest, ...gax.CallOption) (*geminidataanalyticspb.RetrieveBigQueryTableContextsFromRecentTablesResponse, error)
	RetrieveBigQueryTableSuggestedDescriptions(context.Context, *geminidataanalyticspb.RetrieveBigQueryTableSuggestedDescriptionsRequest, ...gax.CallOption) (*geminidataanalyticspb.RetrieveBigQueryTableSuggestedDescriptionsResponse, error)
	RetrieveBigQueryTableSuggestedExamples(context.Context, *geminidataanalyticspb.RetrieveBigQueryTableSuggestedExamplesRequest, ...gax.CallOption) (*geminidataanalyticspb.RetrieveBigQueryTableSuggestedExamplesResponse, error)
	RetrieveBigQueryRecentRelevantTables(context.Context, *geminidataanalyticspb.RetrieveBigQueryRecentRelevantTablesRequest, ...gax.CallOption) (*geminidataanalyticspb.RetrieveBigQueryRecentRelevantTablesResponse, error)
	GetLocation(context.Context, *locationpb.GetLocationRequest, ...gax.CallOption) (*locationpb.Location, error)
	ListLocations(context.Context, *locationpb.ListLocationsRequest, ...gax.CallOption) *LocationIterator
	CancelOperation(context.Context, *longrunningpb.CancelOperationRequest, ...gax.CallOption) error
	DeleteOperation(context.Context, *longrunningpb.DeleteOperationRequest, ...gax.CallOption) error
	GetOperation(context.Context, *longrunningpb.GetOperationRequest, ...gax.CallOption) (*longrunningpb.Operation, error)
	ListOperations(context.Context, *longrunningpb.ListOperationsRequest, ...gax.CallOption) *OperationIterator
}

// ContextRetrievalClient is a client for interacting with Data Analytics API with Gemini.
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
//
// Service to ask a natural language question with a provided project,
// returns BigQuery tables that are relevant to the question within the project
// scope that is accessible to the user, along with contextual data including
// table schema information as well as sample values.
type ContextRetrievalClient struct {
	// The internal transport-dependent client.
	internalClient internalContextRetrievalClient

	// The call options for this service.
	CallOptions *ContextRetrievalCallOptions
}

// Wrapper methods routed to the internal client.

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *ContextRetrievalClient) Close() error {
	return c.internalClient.Close()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *ContextRetrievalClient) setGoogleClientInfo(keyval ...string) {
	c.internalClient.setGoogleClientInfo(keyval...)
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *ContextRetrievalClient) Connection() *grpc.ClientConn {
	return c.internalClient.Connection()
}

// RetrieveBigQueryTableContext retrieves BigQuery table contextual data for provided table references.
// Contextual data includes table schema information as well as sample
// values.
func (c *ContextRetrievalClient) RetrieveBigQueryTableContext(ctx context.Context, req *geminidataanalyticspb.RetrieveBigQueryTableContextRequest, opts ...gax.CallOption) (*geminidataanalyticspb.RetrieveBigQueryTableContextResponse, error) {
	return c.internalClient.RetrieveBigQueryTableContext(ctx, req, opts...)
}

// RetrieveBigQueryTableContexts retrieves BigQuery table contextual data for provided table references.
// Contextual data includes table schema information as well as sample
// values.
func (c *ContextRetrievalClient) RetrieveBigQueryTableContexts(ctx context.Context, req *geminidataanalyticspb.RetrieveBigQueryTableContextsRequest, opts ...gax.CallOption) (*geminidataanalyticspb.RetrieveBigQueryTableContextsResponse, error) {
	return c.internalClient.RetrieveBigQueryTableContexts(ctx, req, opts...)
}

// RetrieveBigQueryTableContextsFromRecentTables retrieves BigQuery table contextual data from recently accessed tables.
// Contextual data includes table schema information as well as sample
// values.
func (c *ContextRetrievalClient) RetrieveBigQueryTableContextsFromRecentTables(ctx context.Context, req *geminidataanalyticspb.RetrieveBigQueryTableContextsFromRecentTablesRequest, opts ...gax.CallOption) (*geminidataanalyticspb.RetrieveBigQueryTableContextsFromRecentTablesResponse, error) {
	return c.internalClient.RetrieveBigQueryTableContextsFromRecentTables(ctx, req, opts...)
}

// RetrieveBigQueryTableSuggestedDescriptions retrieves BigQuery table schema with suggested table and column
// descriptions.
func (c *ContextRetrievalClient) RetrieveBigQueryTableSuggestedDescriptions(ctx context.Context, req *geminidataanalyticspb.RetrieveBigQueryTableSuggestedDescriptionsRequest, opts ...gax.CallOption) (*geminidataanalyticspb.RetrieveBigQueryTableSuggestedDescriptionsResponse, error) {
	return c.internalClient.RetrieveBigQueryTableSuggestedDescriptions(ctx, req, opts...)
}

// RetrieveBigQueryTableSuggestedExamples retrieves BigQuery table schema with suggested NL-SQL examples.
func (c *ContextRetrievalClient) RetrieveBigQueryTableSuggestedExamples(ctx context.Context, req *geminidataanalyticspb.RetrieveBigQueryTableSuggestedExamplesRequest, opts ...gax.CallOption) (*geminidataanalyticspb.RetrieveBigQueryTableSuggestedExamplesResponse, error) {
	return c.internalClient.RetrieveBigQueryTableSuggestedExamples(ctx, req, opts...)
}

// RetrieveBigQueryRecentRelevantTables retrieves BigQuery table references from recently accessed tables.
func (c *ContextRetrievalClient) RetrieveBigQueryRecentRelevantTables(ctx context.Context, req *geminidataanalyticspb.RetrieveBigQueryRecentRelevantTablesRequest, opts ...gax.CallOption) (*geminidataanalyticspb.RetrieveBigQueryRecentRelevantTablesResponse, error) {
	return c.internalClient.RetrieveBigQueryRecentRelevantTables(ctx, req, opts...)
}

// GetLocation gets information about a location.
func (c *ContextRetrievalClient) GetLocation(ctx context.Context, req *locationpb.GetLocationRequest, opts ...gax.CallOption) (*locationpb.Location, error) {
	return c.internalClient.GetLocation(ctx, req, opts...)
}

// ListLocations lists information about the supported locations for this service.
func (c *ContextRetrievalClient) ListLocations(ctx context.Context, req *locationpb.ListLocationsRequest, opts ...gax.CallOption) *LocationIterator {
	return c.internalClient.ListLocations(ctx, req, opts...)
}

// CancelOperation is a utility method from google.longrunning.Operations.
func (c *ContextRetrievalClient) CancelOperation(ctx context.Context, req *longrunningpb.CancelOperationRequest, opts ...gax.CallOption) error {
	return c.internalClient.CancelOperation(ctx, req, opts...)
}

// DeleteOperation is a utility method from google.longrunning.Operations.
func (c *ContextRetrievalClient) DeleteOperation(ctx context.Context, req *longrunningpb.DeleteOperationRequest, opts ...gax.CallOption) error {
	return c.internalClient.DeleteOperation(ctx, req, opts...)
}

// GetOperation is a utility method from google.longrunning.Operations.
func (c *ContextRetrievalClient) GetOperation(ctx context.Context, req *longrunningpb.GetOperationRequest, opts ...gax.CallOption) (*longrunningpb.Operation, error) {
	return c.internalClient.GetOperation(ctx, req, opts...)
}

// ListOperations is a utility method from google.longrunning.Operations.
func (c *ContextRetrievalClient) ListOperations(ctx context.Context, req *longrunningpb.ListOperationsRequest, opts ...gax.CallOption) *OperationIterator {
	return c.internalClient.ListOperations(ctx, req, opts...)
}

// contextRetrievalGRPCClient is a client for interacting with Data Analytics API with Gemini over gRPC transport.
//
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type contextRetrievalGRPCClient struct {
	// Connection pool of gRPC connections to the service.
	connPool gtransport.ConnPool

	// Points back to the CallOptions field of the containing ContextRetrievalClient
	CallOptions **ContextRetrievalCallOptions

	// The gRPC API client.
	contextRetrievalClient geminidataanalyticspb.ContextRetrievalServiceClient

	operationsClient longrunningpb.OperationsClient

	locationsClient locationpb.LocationsClient

	// The x-goog-* metadata to be sent with each request.
	xGoogHeaders []string

	logger *slog.Logger
}

// NewContextRetrievalClient creates a new context retrieval service client based on gRPC.
// The returned client must be Closed when it is done being used to clean up its underlying connections.
//
// Service to ask a natural language question with a provided project,
// returns BigQuery tables that are relevant to the question within the project
// scope that is accessible to the user, along with contextual data including
// table schema information as well as sample values.
func NewContextRetrievalClient(ctx context.Context, opts ...option.ClientOption) (*ContextRetrievalClient, error) {
	clientOpts := defaultContextRetrievalGRPCClientOptions()
	if newContextRetrievalClientHook != nil {
		hookOpts, err := newContextRetrievalClientHook(ctx, clientHookParams{})
		if err != nil {
			return nil, err
		}
		clientOpts = append(clientOpts, hookOpts...)
	}

	connPool, err := gtransport.DialPool(ctx, append(clientOpts, opts...)...)
	if err != nil {
		return nil, err
	}
	client := ContextRetrievalClient{CallOptions: defaultContextRetrievalCallOptions()}

	c := &contextRetrievalGRPCClient{
		connPool:               connPool,
		contextRetrievalClient: geminidataanalyticspb.NewContextRetrievalServiceClient(connPool),
		CallOptions:            &client.CallOptions,
		logger:                 internaloption.GetLogger(opts),
		operationsClient:       longrunningpb.NewOperationsClient(connPool),
		locationsClient:        locationpb.NewLocationsClient(connPool),
	}
	c.setGoogleClientInfo()

	client.internalClient = c

	return &client, nil
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *contextRetrievalGRPCClient) Connection() *grpc.ClientConn {
	return c.connPool.Conn()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *contextRetrievalGRPCClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", gax.GoVersion}, keyval...)
	kv = append(kv, "gapic", getVersionClient(), "gax", gax.Version, "grpc", grpc.Version, "pb", protoVersion)
	c.xGoogHeaders = []string{
		"x-goog-api-client", gax.XGoogHeader(kv...),
	}
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *contextRetrievalGRPCClient) Close() error {
	return c.connPool.Close()
}

// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type contextRetrievalRESTClient struct {
	// The http endpoint to connect to.
	endpoint string

	// The http client.
	httpClient *http.Client

	// The x-goog-* headers to be sent with each request.
	xGoogHeaders []string

	// Points back to the CallOptions field of the containing ContextRetrievalClient
	CallOptions **ContextRetrievalCallOptions

	logger *slog.Logger
}

// NewContextRetrievalRESTClient creates a new context retrieval service rest client.
//
// Service to ask a natural language question with a provided project,
// returns BigQuery tables that are relevant to the question within the project
// scope that is accessible to the user, along with contextual data including
// table schema information as well as sample values.
func NewContextRetrievalRESTClient(ctx context.Context, opts ...option.ClientOption) (*ContextRetrievalClient, error) {
	clientOpts := append(defaultContextRetrievalRESTClientOptions(), opts...)
	httpClient, endpoint, err := httptransport.NewClient(ctx, clientOpts...)
	if err != nil {
		return nil, err
	}

	callOpts := defaultContextRetrievalRESTCallOptions()
	c := &contextRetrievalRESTClient{
		endpoint:    endpoint,
		httpClient:  httpClient,
		CallOptions: &callOpts,
		logger:      internaloption.GetLogger(opts),
	}
	c.setGoogleClientInfo()

	return &ContextRetrievalClient{internalClient: c, CallOptions: callOpts}, nil
}

func defaultContextRetrievalRESTClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("https://geminidataanalytics.googleapis.com"),
		internaloption.WithDefaultEndpointTemplate("https://geminidataanalytics.UNIVERSE_DOMAIN"),
		internaloption.WithDefaultMTLSEndpoint("https://geminidataanalytics.mtls.googleapis.com"),
		internaloption.WithDefaultUniverseDomain("googleapis.com"),
		internaloption.WithDefaultAudience("https://geminidataanalytics.googleapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableNewAuthLibrary(),
	}
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *contextRetrievalRESTClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", gax.GoVersion}, keyval...)
	kv = append(kv, "gapic", getVersionClient(), "gax", gax.Version, "rest", "UNKNOWN", "pb", protoVersion)
	c.xGoogHeaders = []string{
		"x-goog-api-client", gax.XGoogHeader(kv...),
	}
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *contextRetrievalRESTClient) Close() error {
	// Replace httpClient with nil to force cleanup.
	c.httpClient = nil
	return nil
}

// Connection returns a connection to the API service.
//
// Deprecated: This method always returns nil.
func (c *contextRetrievalRESTClient) Connection() *grpc.ClientConn {
	return nil
}
func (c *contextRetrievalGRPCClient) RetrieveBigQueryTableContext(ctx context.Context, req *geminidataanalyticspb.RetrieveBigQueryTableContextRequest, opts ...gax.CallOption) (*geminidataanalyticspb.RetrieveBigQueryTableContextResponse, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).RetrieveBigQueryTableContext[0:len((*c.CallOptions).RetrieveBigQueryTableContext):len((*c.CallOptions).RetrieveBigQueryTableContext)], opts...)
	var resp *geminidataanalyticspb.RetrieveBigQueryTableContextResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = executeRPC(ctx, c.contextRetrievalClient.RetrieveBigQueryTableContext, req, settings.GRPC, c.logger, "RetrieveBigQueryTableContext")
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *contextRetrievalGRPCClient) RetrieveBigQueryTableContexts(ctx context.Context, req *geminidataanalyticspb.RetrieveBigQueryTableContextsRequest, opts ...gax.CallOption) (*geminidataanalyticspb.RetrieveBigQueryTableContextsResponse, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).RetrieveBigQueryTableContexts[0:len((*c.CallOptions).RetrieveBigQueryTableContexts):len((*c.CallOptions).RetrieveBigQueryTableContexts)], opts...)
	var resp *geminidataanalyticspb.RetrieveBigQueryTableContextsResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = executeRPC(ctx, c.contextRetrievalClient.RetrieveBigQueryTableContexts, req, settings.GRPC, c.logger, "RetrieveBigQueryTableContexts")
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *contextRetrievalGRPCClient) RetrieveBigQueryTableContextsFromRecentTables(ctx context.Context, req *geminidataanalyticspb.RetrieveBigQueryTableContextsFromRecentTablesRequest, opts ...gax.CallOption) (*geminidataanalyticspb.RetrieveBigQueryTableContextsFromRecentTablesResponse, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).RetrieveBigQueryTableContextsFromRecentTables[0:len((*c.CallOptions).RetrieveBigQueryTableContextsFromRecentTables):len((*c.CallOptions).RetrieveBigQueryTableContextsFromRecentTables)], opts...)
	var resp *geminidataanalyticspb.RetrieveBigQueryTableContextsFromRecentTablesResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = executeRPC(ctx, c.contextRetrievalClient.RetrieveBigQueryTableContextsFromRecentTables, req, settings.GRPC, c.logger, "RetrieveBigQueryTableContextsFromRecentTables")
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *contextRetrievalGRPCClient) RetrieveBigQueryTableSuggestedDescriptions(ctx context.Context, req *geminidataanalyticspb.RetrieveBigQueryTableSuggestedDescriptionsRequest, opts ...gax.CallOption) (*geminidataanalyticspb.RetrieveBigQueryTableSuggestedDescriptionsResponse, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).RetrieveBigQueryTableSuggestedDescriptions[0:len((*c.CallOptions).RetrieveBigQueryTableSuggestedDescriptions):len((*c.CallOptions).RetrieveBigQueryTableSuggestedDescriptions)], opts...)
	var resp *geminidataanalyticspb.RetrieveBigQueryTableSuggestedDescriptionsResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = executeRPC(ctx, c.contextRetrievalClient.RetrieveBigQueryTableSuggestedDescriptions, req, settings.GRPC, c.logger, "RetrieveBigQueryTableSuggestedDescriptions")
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *contextRetrievalGRPCClient) RetrieveBigQueryTableSuggestedExamples(ctx context.Context, req *geminidataanalyticspb.RetrieveBigQueryTableSuggestedExamplesRequest, opts ...gax.CallOption) (*geminidataanalyticspb.RetrieveBigQueryTableSuggestedExamplesResponse, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).RetrieveBigQueryTableSuggestedExamples[0:len((*c.CallOptions).RetrieveBigQueryTableSuggestedExamples):len((*c.CallOptions).RetrieveBigQueryTableSuggestedExamples)], opts...)
	var resp *geminidataanalyticspb.RetrieveBigQueryTableSuggestedExamplesResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = executeRPC(ctx, c.contextRetrievalClient.RetrieveBigQueryTableSuggestedExamples, req, settings.GRPC, c.logger, "RetrieveBigQueryTableSuggestedExamples")
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *contextRetrievalGRPCClient) RetrieveBigQueryRecentRelevantTables(ctx context.Context, req *geminidataanalyticspb.RetrieveBigQueryRecentRelevantTablesRequest, opts ...gax.CallOption) (*geminidataanalyticspb.RetrieveBigQueryRecentRelevantTablesResponse, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).RetrieveBigQueryRecentRelevantTables[0:len((*c.CallOptions).RetrieveBigQueryRecentRelevantTables):len((*c.CallOptions).RetrieveBigQueryRecentRelevantTables)], opts...)
	var resp *geminidataanalyticspb.RetrieveBigQueryRecentRelevantTablesResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = executeRPC(ctx, c.contextRetrievalClient.RetrieveBigQueryRecentRelevantTables, req, settings.GRPC, c.logger, "RetrieveBigQueryRecentRelevantTables")
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *contextRetrievalGRPCClient) GetLocation(ctx context.Context, req *locationpb.GetLocationRequest, opts ...gax.CallOption) (*locationpb.Location, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).GetLocation[0:len((*c.CallOptions).GetLocation):len((*c.CallOptions).GetLocation)], opts...)
	var resp *locationpb.Location
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = executeRPC(ctx, c.locationsClient.GetLocation, req, settings.GRPC, c.logger, "GetLocation")
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *contextRetrievalGRPCClient) ListLocations(ctx context.Context, req *locationpb.ListLocationsRequest, opts ...gax.CallOption) *LocationIterator {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ListLocations[0:len((*c.CallOptions).ListLocations):len((*c.CallOptions).ListLocations)], opts...)
	it := &LocationIterator{}
	req = proto.Clone(req).(*locationpb.ListLocationsRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*locationpb.Location, string, error) {
		resp := &locationpb.ListLocationsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = executeRPC(ctx, c.locationsClient.ListLocations, req, settings.GRPC, c.logger, "ListLocations")
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetLocations(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

func (c *contextRetrievalGRPCClient) CancelOperation(ctx context.Context, req *longrunningpb.CancelOperationRequest, opts ...gax.CallOption) error {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).CancelOperation[0:len((*c.CallOptions).CancelOperation):len((*c.CallOptions).CancelOperation)], opts...)
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		_, err = executeRPC(ctx, c.operationsClient.CancelOperation, req, settings.GRPC, c.logger, "CancelOperation")
		return err
	}, opts...)
	return err
}

func (c *contextRetrievalGRPCClient) DeleteOperation(ctx context.Context, req *longrunningpb.DeleteOperationRequest, opts ...gax.CallOption) error {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).DeleteOperation[0:len((*c.CallOptions).DeleteOperation):len((*c.CallOptions).DeleteOperation)], opts...)
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		_, err = executeRPC(ctx, c.operationsClient.DeleteOperation, req, settings.GRPC, c.logger, "DeleteOperation")
		return err
	}, opts...)
	return err
}

func (c *contextRetrievalGRPCClient) GetOperation(ctx context.Context, req *longrunningpb.GetOperationRequest, opts ...gax.CallOption) (*longrunningpb.Operation, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).GetOperation[0:len((*c.CallOptions).GetOperation):len((*c.CallOptions).GetOperation)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = executeRPC(ctx, c.operationsClient.GetOperation, req, settings.GRPC, c.logger, "GetOperation")
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *contextRetrievalGRPCClient) ListOperations(ctx context.Context, req *longrunningpb.ListOperationsRequest, opts ...gax.CallOption) *OperationIterator {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ListOperations[0:len((*c.CallOptions).ListOperations):len((*c.CallOptions).ListOperations)], opts...)
	it := &OperationIterator{}
	req = proto.Clone(req).(*longrunningpb.ListOperationsRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*longrunningpb.Operation, string, error) {
		resp := &longrunningpb.ListOperationsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = executeRPC(ctx, c.operationsClient.ListOperations, req, settings.GRPC, c.logger, "ListOperations")
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetOperations(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

// RetrieveBigQueryTableContext retrieves BigQuery table contextual data for provided table references.
// Contextual data includes table schema information as well as sample
// values.
func (c *contextRetrievalRESTClient) RetrieveBigQueryTableContext(ctx context.Context, req *geminidataanalyticspb.RetrieveBigQueryTableContextRequest, opts ...gax.CallOption) (*geminidataanalyticspb.RetrieveBigQueryTableContextResponse, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	jsonReq, err := m.Marshal(req)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1beta/%v:retrieveBigQueryTableContext", req.GetParent())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).RetrieveBigQueryTableContext[0:len((*c.CallOptions).RetrieveBigQueryTableContext):len((*c.CallOptions).RetrieveBigQueryTableContext)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &geminidataanalyticspb.RetrieveBigQueryTableContextResponse{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		buf, err := executeHTTPRequest(ctx, c.httpClient, httpReq, c.logger, jsonReq, "RetrieveBigQueryTableContext")
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// RetrieveBigQueryTableContexts retrieves BigQuery table contextual data for provided table references.
// Contextual data includes table schema information as well as sample
// values.
func (c *contextRetrievalRESTClient) RetrieveBigQueryTableContexts(ctx context.Context, req *geminidataanalyticspb.RetrieveBigQueryTableContextsRequest, opts ...gax.CallOption) (*geminidataanalyticspb.RetrieveBigQueryTableContextsResponse, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	jsonReq, err := m.Marshal(req)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1beta/%v/retrieval:retrieveBigQueryTableContexts", req.GetParent())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).RetrieveBigQueryTableContexts[0:len((*c.CallOptions).RetrieveBigQueryTableContexts):len((*c.CallOptions).RetrieveBigQueryTableContexts)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &geminidataanalyticspb.RetrieveBigQueryTableContextsResponse{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		buf, err := executeHTTPRequest(ctx, c.httpClient, httpReq, c.logger, jsonReq, "RetrieveBigQueryTableContexts")
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// RetrieveBigQueryTableContextsFromRecentTables retrieves BigQuery table contextual data from recently accessed tables.
// Contextual data includes table schema information as well as sample
// values.
func (c *contextRetrievalRESTClient) RetrieveBigQueryTableContextsFromRecentTables(ctx context.Context, req *geminidataanalyticspb.RetrieveBigQueryTableContextsFromRecentTablesRequest, opts ...gax.CallOption) (*geminidataanalyticspb.RetrieveBigQueryTableContextsFromRecentTablesResponse, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	jsonReq, err := m.Marshal(req)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1beta/%v/retrieval:retrieveBigQueryTableContextsFromRecentTables", req.GetParent())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).RetrieveBigQueryTableContextsFromRecentTables[0:len((*c.CallOptions).RetrieveBigQueryTableContextsFromRecentTables):len((*c.CallOptions).RetrieveBigQueryTableContextsFromRecentTables)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &geminidataanalyticspb.RetrieveBigQueryTableContextsFromRecentTablesResponse{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		buf, err := executeHTTPRequest(ctx, c.httpClient, httpReq, c.logger, jsonReq, "RetrieveBigQueryTableContextsFromRecentTables")
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// RetrieveBigQueryTableSuggestedDescriptions retrieves BigQuery table schema with suggested table and column
// descriptions.
func (c *contextRetrievalRESTClient) RetrieveBigQueryTableSuggestedDescriptions(ctx context.Context, req *geminidataanalyticspb.RetrieveBigQueryTableSuggestedDescriptionsRequest, opts ...gax.CallOption) (*geminidataanalyticspb.RetrieveBigQueryTableSuggestedDescriptionsResponse, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	jsonReq, err := m.Marshal(req)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1beta/%v/retrieval:retrieveBigQueryTableSuggestedDescriptions", req.GetParent())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).RetrieveBigQueryTableSuggestedDescriptions[0:len((*c.CallOptions).RetrieveBigQueryTableSuggestedDescriptions):len((*c.CallOptions).RetrieveBigQueryTableSuggestedDescriptions)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &geminidataanalyticspb.RetrieveBigQueryTableSuggestedDescriptionsResponse{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		buf, err := executeHTTPRequest(ctx, c.httpClient, httpReq, c.logger, jsonReq, "RetrieveBigQueryTableSuggestedDescriptions")
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// RetrieveBigQueryTableSuggestedExamples retrieves BigQuery table schema with suggested NL-SQL examples.
func (c *contextRetrievalRESTClient) RetrieveBigQueryTableSuggestedExamples(ctx context.Context, req *geminidataanalyticspb.RetrieveBigQueryTableSuggestedExamplesRequest, opts ...gax.CallOption) (*geminidataanalyticspb.RetrieveBigQueryTableSuggestedExamplesResponse, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	jsonReq, err := m.Marshal(req)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1beta/%v/retrieval:retrieveBigQueryTableSuggestedExamples", req.GetParent())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).RetrieveBigQueryTableSuggestedExamples[0:len((*c.CallOptions).RetrieveBigQueryTableSuggestedExamples):len((*c.CallOptions).RetrieveBigQueryTableSuggestedExamples)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &geminidataanalyticspb.RetrieveBigQueryTableSuggestedExamplesResponse{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		buf, err := executeHTTPRequest(ctx, c.httpClient, httpReq, c.logger, jsonReq, "RetrieveBigQueryTableSuggestedExamples")
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// RetrieveBigQueryRecentRelevantTables retrieves BigQuery table references from recently accessed tables.
func (c *contextRetrievalRESTClient) RetrieveBigQueryRecentRelevantTables(ctx context.Context, req *geminidataanalyticspb.RetrieveBigQueryRecentRelevantTablesRequest, opts ...gax.CallOption) (*geminidataanalyticspb.RetrieveBigQueryRecentRelevantTablesResponse, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	jsonReq, err := m.Marshal(req)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1beta/%v/retrieval:retrieveBigQueryRecentRelevantTables", req.GetParent())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).RetrieveBigQueryRecentRelevantTables[0:len((*c.CallOptions).RetrieveBigQueryRecentRelevantTables):len((*c.CallOptions).RetrieveBigQueryRecentRelevantTables)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &geminidataanalyticspb.RetrieveBigQueryRecentRelevantTablesResponse{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		buf, err := executeHTTPRequest(ctx, c.httpClient, httpReq, c.logger, jsonReq, "RetrieveBigQueryRecentRelevantTables")
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// GetLocation gets information about a location.
func (c *contextRetrievalRESTClient) GetLocation(ctx context.Context, req *locationpb.GetLocationRequest, opts ...gax.CallOption) (*locationpb.Location, error) {
	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1beta/%v", req.GetName())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).GetLocation[0:len((*c.CallOptions).GetLocation):len((*c.CallOptions).GetLocation)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &locationpb.Location{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		buf, err := executeHTTPRequest(ctx, c.httpClient, httpReq, c.logger, nil, "GetLocation")
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// ListLocations lists information about the supported locations for this service.
func (c *contextRetrievalRESTClient) ListLocations(ctx context.Context, req *locationpb.ListLocationsRequest, opts ...gax.CallOption) *LocationIterator {
	it := &LocationIterator{}
	req = proto.Clone(req).(*locationpb.ListLocationsRequest)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	it.InternalFetch = func(pageSize int, pageToken string) ([]*locationpb.Location, string, error) {
		resp := &locationpb.ListLocationsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		baseUrl, err := url.Parse(c.endpoint)
		if err != nil {
			return nil, "", err
		}
		baseUrl.Path += fmt.Sprintf("/v1beta/%v/locations", req.GetName())

		params := url.Values{}
		params.Add("$alt", "json;enum-encoding=int")
		if req.GetFilter() != "" {
			params.Add("filter", fmt.Sprintf("%v", req.GetFilter()))
		}
		if req.GetPageSize() != 0 {
			params.Add("pageSize", fmt.Sprintf("%v", req.GetPageSize()))
		}
		if req.GetPageToken() != "" {
			params.Add("pageToken", fmt.Sprintf("%v", req.GetPageToken()))
		}

		baseUrl.RawQuery = params.Encode()

		// Build HTTP headers from client and context metadata.
		hds := append(c.xGoogHeaders, "Content-Type", "application/json")
		headers := gax.BuildHeaders(ctx, hds...)
		e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			if settings.Path != "" {
				baseUrl.Path = settings.Path
			}
			httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
			if err != nil {
				return err
			}
			httpReq.Header = headers

			buf, err := executeHTTPRequest(ctx, c.httpClient, httpReq, c.logger, nil, "ListLocations")
			if err != nil {
				return err
			}
			if err := unm.Unmarshal(buf, resp); err != nil {
				return err
			}

			return nil
		}, opts...)
		if e != nil {
			return nil, "", e
		}
		it.Response = resp
		return resp.GetLocations(), resp.GetNextPageToken(), nil
	}

	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

// CancelOperation is a utility method from google.longrunning.Operations.
func (c *contextRetrievalRESTClient) CancelOperation(ctx context.Context, req *longrunningpb.CancelOperationRequest, opts ...gax.CallOption) error {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	jsonReq, err := m.Marshal(req)
	if err != nil {
		return err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return err
	}
	baseUrl.Path += fmt.Sprintf("/v1beta/%v:cancel", req.GetName())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	return gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		_, err = executeHTTPRequest(ctx, c.httpClient, httpReq, c.logger, jsonReq, "CancelOperation")
		return err
	}, opts...)
}

// DeleteOperation is a utility method from google.longrunning.Operations.
func (c *contextRetrievalRESTClient) DeleteOperation(ctx context.Context, req *longrunningpb.DeleteOperationRequest, opts ...gax.CallOption) error {
	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return err
	}
	baseUrl.Path += fmt.Sprintf("/v1beta/%v", req.GetName())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	return gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("DELETE", baseUrl.String(), nil)
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		_, err = executeHTTPRequest(ctx, c.httpClient, httpReq, c.logger, nil, "DeleteOperation")
		return err
	}, opts...)
}

// GetOperation is a utility method from google.longrunning.Operations.
func (c *contextRetrievalRESTClient) GetOperation(ctx context.Context, req *longrunningpb.GetOperationRequest, opts ...gax.CallOption) (*longrunningpb.Operation, error) {
	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1beta/%v", req.GetName())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).GetOperation[0:len((*c.CallOptions).GetOperation):len((*c.CallOptions).GetOperation)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &longrunningpb.Operation{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		buf, err := executeHTTPRequest(ctx, c.httpClient, httpReq, c.logger, nil, "GetOperation")
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// ListOperations is a utility method from google.longrunning.Operations.
func (c *contextRetrievalRESTClient) ListOperations(ctx context.Context, req *longrunningpb.ListOperationsRequest, opts ...gax.CallOption) *OperationIterator {
	it := &OperationIterator{}
	req = proto.Clone(req).(*longrunningpb.ListOperationsRequest)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	it.InternalFetch = func(pageSize int, pageToken string) ([]*longrunningpb.Operation, string, error) {
		resp := &longrunningpb.ListOperationsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		baseUrl, err := url.Parse(c.endpoint)
		if err != nil {
			return nil, "", err
		}
		baseUrl.Path += fmt.Sprintf("/v1beta/%v/operations", req.GetName())

		params := url.Values{}
		params.Add("$alt", "json;enum-encoding=int")
		if req.GetFilter() != "" {
			params.Add("filter", fmt.Sprintf("%v", req.GetFilter()))
		}
		if req.GetPageSize() != 0 {
			params.Add("pageSize", fmt.Sprintf("%v", req.GetPageSize()))
		}
		if req.GetPageToken() != "" {
			params.Add("pageToken", fmt.Sprintf("%v", req.GetPageToken()))
		}

		baseUrl.RawQuery = params.Encode()

		// Build HTTP headers from client and context metadata.
		hds := append(c.xGoogHeaders, "Content-Type", "application/json")
		headers := gax.BuildHeaders(ctx, hds...)
		e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			if settings.Path != "" {
				baseUrl.Path = settings.Path
			}
			httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
			if err != nil {
				return err
			}
			httpReq.Header = headers

			buf, err := executeHTTPRequest(ctx, c.httpClient, httpReq, c.logger, nil, "ListOperations")
			if err != nil {
				return err
			}
			if err := unm.Unmarshal(buf, resp); err != nil {
				return err
			}

			return nil
		}, opts...)
		if e != nil {
			return nil, "", e
		}
		it.Response = resp
		return resp.GetOperations(), resp.GetNextPageToken(), nil
	}

	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}
