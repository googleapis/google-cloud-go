// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/chronicle/v1/data_access_control.proto

package chroniclepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DataAccessControlService_CreateDataAccessLabel_FullMethodName = "/google.cloud.chronicle.v1.DataAccessControlService/CreateDataAccessLabel"
	DataAccessControlService_GetDataAccessLabel_FullMethodName    = "/google.cloud.chronicle.v1.DataAccessControlService/GetDataAccessLabel"
	DataAccessControlService_ListDataAccessLabels_FullMethodName  = "/google.cloud.chronicle.v1.DataAccessControlService/ListDataAccessLabels"
	DataAccessControlService_UpdateDataAccessLabel_FullMethodName = "/google.cloud.chronicle.v1.DataAccessControlService/UpdateDataAccessLabel"
	DataAccessControlService_DeleteDataAccessLabel_FullMethodName = "/google.cloud.chronicle.v1.DataAccessControlService/DeleteDataAccessLabel"
	DataAccessControlService_CreateDataAccessScope_FullMethodName = "/google.cloud.chronicle.v1.DataAccessControlService/CreateDataAccessScope"
	DataAccessControlService_GetDataAccessScope_FullMethodName    = "/google.cloud.chronicle.v1.DataAccessControlService/GetDataAccessScope"
	DataAccessControlService_ListDataAccessScopes_FullMethodName  = "/google.cloud.chronicle.v1.DataAccessControlService/ListDataAccessScopes"
	DataAccessControlService_UpdateDataAccessScope_FullMethodName = "/google.cloud.chronicle.v1.DataAccessControlService/UpdateDataAccessScope"
	DataAccessControlService_DeleteDataAccessScope_FullMethodName = "/google.cloud.chronicle.v1.DataAccessControlService/DeleteDataAccessScope"
)

// DataAccessControlServiceClient is the client API for DataAccessControlService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataAccessControlServiceClient interface {
	// Creates a data access label.
	// Data access labels are applied to incoming event data and selected in data
	// access scopes (another resource), and only users with scopes containing the
	// label can see data with that label. Currently, the data access label
	// resource only includes custom labels, which are labels that correspond
	// to UDM queries over event data.
	CreateDataAccessLabel(ctx context.Context, in *CreateDataAccessLabelRequest, opts ...grpc.CallOption) (*DataAccessLabel, error)
	// Gets a data access label.
	GetDataAccessLabel(ctx context.Context, in *GetDataAccessLabelRequest, opts ...grpc.CallOption) (*DataAccessLabel, error)
	// Lists all data access labels for the customer.
	ListDataAccessLabels(ctx context.Context, in *ListDataAccessLabelsRequest, opts ...grpc.CallOption) (*ListDataAccessLabelsResponse, error)
	// Updates a data access label.
	UpdateDataAccessLabel(ctx context.Context, in *UpdateDataAccessLabelRequest, opts ...grpc.CallOption) (*DataAccessLabel, error)
	// Deletes a data access label. When a label is deleted, new
	// data that enters in the system will not receive the label, but the label
	// will not be removed from old data that still refers to it.
	DeleteDataAccessLabel(ctx context.Context, in *DeleteDataAccessLabelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Creates a data access scope.
	// Data access scope is a combination of allowed and denied labels attached
	// to a permission group. If a scope has allowed labels A and B and denied
	// labels C and D, then the group of people attached to the scope
	// will have permissions to see all events labeled with A or B (or both) and
	// not labeled with either C or D.
	CreateDataAccessScope(ctx context.Context, in *CreateDataAccessScopeRequest, opts ...grpc.CallOption) (*DataAccessScope, error)
	// Retrieves an existing data access scope.
	GetDataAccessScope(ctx context.Context, in *GetDataAccessScopeRequest, opts ...grpc.CallOption) (*DataAccessScope, error)
	// Lists all existing data access scopes for the customer.
	ListDataAccessScopes(ctx context.Context, in *ListDataAccessScopesRequest, opts ...grpc.CallOption) (*ListDataAccessScopesResponse, error)
	// Updates a data access scope.
	UpdateDataAccessScope(ctx context.Context, in *UpdateDataAccessScopeRequest, opts ...grpc.CallOption) (*DataAccessScope, error)
	// Deletes a data access scope.
	DeleteDataAccessScope(ctx context.Context, in *DeleteDataAccessScopeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type dataAccessControlServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataAccessControlServiceClient(cc grpc.ClientConnInterface) DataAccessControlServiceClient {
	return &dataAccessControlServiceClient{cc}
}

func (c *dataAccessControlServiceClient) CreateDataAccessLabel(ctx context.Context, in *CreateDataAccessLabelRequest, opts ...grpc.CallOption) (*DataAccessLabel, error) {
	out := new(DataAccessLabel)
	err := c.cc.Invoke(ctx, DataAccessControlService_CreateDataAccessLabel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataAccessControlServiceClient) GetDataAccessLabel(ctx context.Context, in *GetDataAccessLabelRequest, opts ...grpc.CallOption) (*DataAccessLabel, error) {
	out := new(DataAccessLabel)
	err := c.cc.Invoke(ctx, DataAccessControlService_GetDataAccessLabel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataAccessControlServiceClient) ListDataAccessLabels(ctx context.Context, in *ListDataAccessLabelsRequest, opts ...grpc.CallOption) (*ListDataAccessLabelsResponse, error) {
	out := new(ListDataAccessLabelsResponse)
	err := c.cc.Invoke(ctx, DataAccessControlService_ListDataAccessLabels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataAccessControlServiceClient) UpdateDataAccessLabel(ctx context.Context, in *UpdateDataAccessLabelRequest, opts ...grpc.CallOption) (*DataAccessLabel, error) {
	out := new(DataAccessLabel)
	err := c.cc.Invoke(ctx, DataAccessControlService_UpdateDataAccessLabel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataAccessControlServiceClient) DeleteDataAccessLabel(ctx context.Context, in *DeleteDataAccessLabelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DataAccessControlService_DeleteDataAccessLabel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataAccessControlServiceClient) CreateDataAccessScope(ctx context.Context, in *CreateDataAccessScopeRequest, opts ...grpc.CallOption) (*DataAccessScope, error) {
	out := new(DataAccessScope)
	err := c.cc.Invoke(ctx, DataAccessControlService_CreateDataAccessScope_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataAccessControlServiceClient) GetDataAccessScope(ctx context.Context, in *GetDataAccessScopeRequest, opts ...grpc.CallOption) (*DataAccessScope, error) {
	out := new(DataAccessScope)
	err := c.cc.Invoke(ctx, DataAccessControlService_GetDataAccessScope_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataAccessControlServiceClient) ListDataAccessScopes(ctx context.Context, in *ListDataAccessScopesRequest, opts ...grpc.CallOption) (*ListDataAccessScopesResponse, error) {
	out := new(ListDataAccessScopesResponse)
	err := c.cc.Invoke(ctx, DataAccessControlService_ListDataAccessScopes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataAccessControlServiceClient) UpdateDataAccessScope(ctx context.Context, in *UpdateDataAccessScopeRequest, opts ...grpc.CallOption) (*DataAccessScope, error) {
	out := new(DataAccessScope)
	err := c.cc.Invoke(ctx, DataAccessControlService_UpdateDataAccessScope_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataAccessControlServiceClient) DeleteDataAccessScope(ctx context.Context, in *DeleteDataAccessScopeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DataAccessControlService_DeleteDataAccessScope_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataAccessControlServiceServer is the server API for DataAccessControlService service.
// All implementations should embed UnimplementedDataAccessControlServiceServer
// for forward compatibility
type DataAccessControlServiceServer interface {
	// Creates a data access label.
	// Data access labels are applied to incoming event data and selected in data
	// access scopes (another resource), and only users with scopes containing the
	// label can see data with that label. Currently, the data access label
	// resource only includes custom labels, which are labels that correspond
	// to UDM queries over event data.
	CreateDataAccessLabel(context.Context, *CreateDataAccessLabelRequest) (*DataAccessLabel, error)
	// Gets a data access label.
	GetDataAccessLabel(context.Context, *GetDataAccessLabelRequest) (*DataAccessLabel, error)
	// Lists all data access labels for the customer.
	ListDataAccessLabels(context.Context, *ListDataAccessLabelsRequest) (*ListDataAccessLabelsResponse, error)
	// Updates a data access label.
	UpdateDataAccessLabel(context.Context, *UpdateDataAccessLabelRequest) (*DataAccessLabel, error)
	// Deletes a data access label. When a label is deleted, new
	// data that enters in the system will not receive the label, but the label
	// will not be removed from old data that still refers to it.
	DeleteDataAccessLabel(context.Context, *DeleteDataAccessLabelRequest) (*emptypb.Empty, error)
	// Creates a data access scope.
	// Data access scope is a combination of allowed and denied labels attached
	// to a permission group. If a scope has allowed labels A and B and denied
	// labels C and D, then the group of people attached to the scope
	// will have permissions to see all events labeled with A or B (or both) and
	// not labeled with either C or D.
	CreateDataAccessScope(context.Context, *CreateDataAccessScopeRequest) (*DataAccessScope, error)
	// Retrieves an existing data access scope.
	GetDataAccessScope(context.Context, *GetDataAccessScopeRequest) (*DataAccessScope, error)
	// Lists all existing data access scopes for the customer.
	ListDataAccessScopes(context.Context, *ListDataAccessScopesRequest) (*ListDataAccessScopesResponse, error)
	// Updates a data access scope.
	UpdateDataAccessScope(context.Context, *UpdateDataAccessScopeRequest) (*DataAccessScope, error)
	// Deletes a data access scope.
	DeleteDataAccessScope(context.Context, *DeleteDataAccessScopeRequest) (*emptypb.Empty, error)
}

// UnimplementedDataAccessControlServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDataAccessControlServiceServer struct {
}

func (UnimplementedDataAccessControlServiceServer) CreateDataAccessLabel(context.Context, *CreateDataAccessLabelRequest) (*DataAccessLabel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataAccessLabel not implemented")
}
func (UnimplementedDataAccessControlServiceServer) GetDataAccessLabel(context.Context, *GetDataAccessLabelRequest) (*DataAccessLabel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataAccessLabel not implemented")
}
func (UnimplementedDataAccessControlServiceServer) ListDataAccessLabels(context.Context, *ListDataAccessLabelsRequest) (*ListDataAccessLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDataAccessLabels not implemented")
}
func (UnimplementedDataAccessControlServiceServer) UpdateDataAccessLabel(context.Context, *UpdateDataAccessLabelRequest) (*DataAccessLabel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDataAccessLabel not implemented")
}
func (UnimplementedDataAccessControlServiceServer) DeleteDataAccessLabel(context.Context, *DeleteDataAccessLabelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataAccessLabel not implemented")
}
func (UnimplementedDataAccessControlServiceServer) CreateDataAccessScope(context.Context, *CreateDataAccessScopeRequest) (*DataAccessScope, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataAccessScope not implemented")
}
func (UnimplementedDataAccessControlServiceServer) GetDataAccessScope(context.Context, *GetDataAccessScopeRequest) (*DataAccessScope, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataAccessScope not implemented")
}
func (UnimplementedDataAccessControlServiceServer) ListDataAccessScopes(context.Context, *ListDataAccessScopesRequest) (*ListDataAccessScopesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDataAccessScopes not implemented")
}
func (UnimplementedDataAccessControlServiceServer) UpdateDataAccessScope(context.Context, *UpdateDataAccessScopeRequest) (*DataAccessScope, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDataAccessScope not implemented")
}
func (UnimplementedDataAccessControlServiceServer) DeleteDataAccessScope(context.Context, *DeleteDataAccessScopeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataAccessScope not implemented")
}

// UnsafeDataAccessControlServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataAccessControlServiceServer will
// result in compilation errors.
type UnsafeDataAccessControlServiceServer interface {
	mustEmbedUnimplementedDataAccessControlServiceServer()
}

func RegisterDataAccessControlServiceServer(s grpc.ServiceRegistrar, srv DataAccessControlServiceServer) {
	s.RegisterService(&DataAccessControlService_ServiceDesc, srv)
}

func _DataAccessControlService_CreateDataAccessLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDataAccessLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataAccessControlServiceServer).CreateDataAccessLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataAccessControlService_CreateDataAccessLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataAccessControlServiceServer).CreateDataAccessLabel(ctx, req.(*CreateDataAccessLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataAccessControlService_GetDataAccessLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataAccessLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataAccessControlServiceServer).GetDataAccessLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataAccessControlService_GetDataAccessLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataAccessControlServiceServer).GetDataAccessLabel(ctx, req.(*GetDataAccessLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataAccessControlService_ListDataAccessLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDataAccessLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataAccessControlServiceServer).ListDataAccessLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataAccessControlService_ListDataAccessLabels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataAccessControlServiceServer).ListDataAccessLabels(ctx, req.(*ListDataAccessLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataAccessControlService_UpdateDataAccessLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDataAccessLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataAccessControlServiceServer).UpdateDataAccessLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataAccessControlService_UpdateDataAccessLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataAccessControlServiceServer).UpdateDataAccessLabel(ctx, req.(*UpdateDataAccessLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataAccessControlService_DeleteDataAccessLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDataAccessLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataAccessControlServiceServer).DeleteDataAccessLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataAccessControlService_DeleteDataAccessLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataAccessControlServiceServer).DeleteDataAccessLabel(ctx, req.(*DeleteDataAccessLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataAccessControlService_CreateDataAccessScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDataAccessScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataAccessControlServiceServer).CreateDataAccessScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataAccessControlService_CreateDataAccessScope_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataAccessControlServiceServer).CreateDataAccessScope(ctx, req.(*CreateDataAccessScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataAccessControlService_GetDataAccessScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataAccessScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataAccessControlServiceServer).GetDataAccessScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataAccessControlService_GetDataAccessScope_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataAccessControlServiceServer).GetDataAccessScope(ctx, req.(*GetDataAccessScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataAccessControlService_ListDataAccessScopes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDataAccessScopesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataAccessControlServiceServer).ListDataAccessScopes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataAccessControlService_ListDataAccessScopes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataAccessControlServiceServer).ListDataAccessScopes(ctx, req.(*ListDataAccessScopesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataAccessControlService_UpdateDataAccessScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDataAccessScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataAccessControlServiceServer).UpdateDataAccessScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataAccessControlService_UpdateDataAccessScope_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataAccessControlServiceServer).UpdateDataAccessScope(ctx, req.(*UpdateDataAccessScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataAccessControlService_DeleteDataAccessScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDataAccessScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataAccessControlServiceServer).DeleteDataAccessScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataAccessControlService_DeleteDataAccessScope_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataAccessControlServiceServer).DeleteDataAccessScope(ctx, req.(*DeleteDataAccessScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataAccessControlService_ServiceDesc is the grpc.ServiceDesc for DataAccessControlService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataAccessControlService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.chronicle.v1.DataAccessControlService",
	HandlerType: (*DataAccessControlServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDataAccessLabel",
			Handler:    _DataAccessControlService_CreateDataAccessLabel_Handler,
		},
		{
			MethodName: "GetDataAccessLabel",
			Handler:    _DataAccessControlService_GetDataAccessLabel_Handler,
		},
		{
			MethodName: "ListDataAccessLabels",
			Handler:    _DataAccessControlService_ListDataAccessLabels_Handler,
		},
		{
			MethodName: "UpdateDataAccessLabel",
			Handler:    _DataAccessControlService_UpdateDataAccessLabel_Handler,
		},
		{
			MethodName: "DeleteDataAccessLabel",
			Handler:    _DataAccessControlService_DeleteDataAccessLabel_Handler,
		},
		{
			MethodName: "CreateDataAccessScope",
			Handler:    _DataAccessControlService_CreateDataAccessScope_Handler,
		},
		{
			MethodName: "GetDataAccessScope",
			Handler:    _DataAccessControlService_GetDataAccessScope_Handler,
		},
		{
			MethodName: "ListDataAccessScopes",
			Handler:    _DataAccessControlService_ListDataAccessScopes_Handler,
		},
		{
			MethodName: "UpdateDataAccessScope",
			Handler:    _DataAccessControlService_UpdateDataAccessScope_Handler,
		},
		{
			MethodName: "DeleteDataAccessScope",
			Handler:    _DataAccessControlService_DeleteDataAccessScope_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/chronicle/v1/data_access_control.proto",
}
