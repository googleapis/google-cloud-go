// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.3
// source: google/cloud/chronicle/v1/entity.proto

package chroniclepb

import (
	context "context"
	reflect "reflect"
	sync "sync"

	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A watchlist is a list of entities that allows for bulk operations over the
// included entities.
type Watchlist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier. Resource name of the watchlist.
	// Format:
	// `projects/{project}/locations/{location}/instances/{instance}/watchlists/{watchlist}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Required. Display name of the watchlist.
	// Note that it must be at least one character and less than 63 characters
	// (https://google.aip.dev/148).
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Optional. Description of the watchlist.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Optional. Weight applied to the risk score for entities
	// in this watchlist.
	// The default is 1.0 if it is not specified.
	MultiplyingFactor float32 `protobuf:"fixed32,5,opt,name=multiplying_factor,json=multiplyingFactor,proto3" json:"multiplying_factor,omitempty"`
	// Required. Mechanism to populate entities in the watchlist.
	EntityPopulationMechanism *Watchlist_EntityPopulationMechanism `protobuf:"bytes,6,opt,name=entity_population_mechanism,json=entityPopulationMechanism,proto3" json:"entity_population_mechanism,omitempty"`
	// Output only. Entity count in the watchlist.
	EntityCount *Watchlist_EntityCount `protobuf:"bytes,7,opt,name=entity_count,json=entityCount,proto3" json:"entity_count,omitempty"`
	// Output only. Time the watchlist was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. Time the watchlist was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Optional. User preferences for watchlist configuration.
	WatchlistUserPreferences *WatchlistUserPreferences `protobuf:"bytes,10,opt,name=watchlist_user_preferences,json=watchlistUserPreferences,proto3" json:"watchlist_user_preferences,omitempty"`
}

func (x *Watchlist) Reset() {
	*x = Watchlist{}
	mi := &file_google_cloud_chronicle_v1_entity_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Watchlist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Watchlist) ProtoMessage() {}

func (x *Watchlist) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_entity_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Watchlist.ProtoReflect.Descriptor instead.
func (*Watchlist) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_entity_proto_rawDescGZIP(), []int{0}
}

func (x *Watchlist) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Watchlist) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Watchlist) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Watchlist) GetMultiplyingFactor() float32 {
	if x != nil {
		return x.MultiplyingFactor
	}
	return 0
}

func (x *Watchlist) GetEntityPopulationMechanism() *Watchlist_EntityPopulationMechanism {
	if x != nil {
		return x.EntityPopulationMechanism
	}
	return nil
}

func (x *Watchlist) GetEntityCount() *Watchlist_EntityCount {
	if x != nil {
		return x.EntityCount
	}
	return nil
}

func (x *Watchlist) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Watchlist) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Watchlist) GetWatchlistUserPreferences() *WatchlistUserPreferences {
	if x != nil {
		return x.WatchlistUserPreferences
	}
	return nil
}

// A collection of user preferences for watchlist UI configuration.
type WatchlistUserPreferences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Whether the watchlist is pinned on the dashboard.
	Pinned bool `protobuf:"varint,1,opt,name=pinned,proto3" json:"pinned,omitempty"`
}

func (x *WatchlistUserPreferences) Reset() {
	*x = WatchlistUserPreferences{}
	mi := &file_google_cloud_chronicle_v1_entity_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WatchlistUserPreferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchlistUserPreferences) ProtoMessage() {}

func (x *WatchlistUserPreferences) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_entity_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchlistUserPreferences.ProtoReflect.Descriptor instead.
func (*WatchlistUserPreferences) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_entity_proto_rawDescGZIP(), []int{1}
}

func (x *WatchlistUserPreferences) GetPinned() bool {
	if x != nil {
		return x.Pinned
	}
	return false
}

// Request message for getting a watchlist.
type GetWatchlistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent, which owns this collection of watchlists.
	// The name of the watchlist to retrieve.
	// Format:
	// `projects/{project}/locations/{location}/instances/{instance}/watchlists/{watchlist}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetWatchlistRequest) Reset() {
	*x = GetWatchlistRequest{}
	mi := &file_google_cloud_chronicle_v1_entity_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWatchlistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWatchlistRequest) ProtoMessage() {}

func (x *GetWatchlistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_entity_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWatchlistRequest.ProtoReflect.Descriptor instead.
func (*GetWatchlistRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_entity_proto_rawDescGZIP(), []int{2}
}

func (x *GetWatchlistRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Request message for listing watchlists.
type ListWatchlistsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent, which owns this collection of watchlists.
	// Format: `projects/{project}/locations/{location}/instances/{instance}`
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Optional. The maximum number of watchlists to return.
	// The service may return fewer than this value.
	// If unspecified, at most 200 watchlists will be returned.
	// The maximum value is 200; values above 200 will be coerced to 200.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Optional. A page token, received from a previous `ListWatchlists` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to
	// `ListWatchlists` must match the call that provided the page
	// token.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Optional. Which watchlist to return in aip.dev/160 form.
	// Currently, only the following filters are supported:
	// - `watchlist_user_preferences.pinned=true`
	// - `has_entity([ENTITY_INDICATOR],[ENTITY_TYPE])`
	// - `has_entity([ENTITY_INDICATOR],[ENTITY_TYPE],[NAMESPACE])`
	Filter string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListWatchlistsRequest) Reset() {
	*x = ListWatchlistsRequest{}
	mi := &file_google_cloud_chronicle_v1_entity_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListWatchlistsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWatchlistsRequest) ProtoMessage() {}

func (x *ListWatchlistsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_entity_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWatchlistsRequest.ProtoReflect.Descriptor instead.
func (*ListWatchlistsRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_entity_proto_rawDescGZIP(), []int{3}
}

func (x *ListWatchlistsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListWatchlistsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListWatchlistsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListWatchlistsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// Response message for listing watchlists.
type ListWatchlistsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The watchlists from the specified instance.
	Watchlists []*Watchlist `protobuf:"bytes,1,rep,name=watchlists,proto3" json:"watchlists,omitempty"`
	// Optional. A token, which can be sent as `page_token` to retrieve the next
	// page. If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListWatchlistsResponse) Reset() {
	*x = ListWatchlistsResponse{}
	mi := &file_google_cloud_chronicle_v1_entity_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListWatchlistsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWatchlistsResponse) ProtoMessage() {}

func (x *ListWatchlistsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_entity_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWatchlistsResponse.ProtoReflect.Descriptor instead.
func (*ListWatchlistsResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_entity_proto_rawDescGZIP(), []int{4}
}

func (x *ListWatchlistsResponse) GetWatchlists() []*Watchlist {
	if x != nil {
		return x.Watchlists
	}
	return nil
}

func (x *ListWatchlistsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Request message for creating watchlist.
type CreateWatchlistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent resource where this watchlist will be created.
	// Format: `projects/{project}/locations/{location}/instances/{instance}`
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Optional. The ID to use for the watchlist,
	// which will become the final component of the watchlist's resource name.
	//
	// This value should be 4-63 characters, and valid characters
	// are /[a-z][0-9]-/.
	WatchlistId string `protobuf:"bytes,2,opt,name=watchlist_id,json=watchlistId,proto3" json:"watchlist_id,omitempty"`
	// Required. The watchlist to create.
	Watchlist *Watchlist `protobuf:"bytes,3,opt,name=watchlist,proto3" json:"watchlist,omitempty"`
}

func (x *CreateWatchlistRequest) Reset() {
	*x = CreateWatchlistRequest{}
	mi := &file_google_cloud_chronicle_v1_entity_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateWatchlistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWatchlistRequest) ProtoMessage() {}

func (x *CreateWatchlistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_entity_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWatchlistRequest.ProtoReflect.Descriptor instead.
func (*CreateWatchlistRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_entity_proto_rawDescGZIP(), []int{5}
}

func (x *CreateWatchlistRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateWatchlistRequest) GetWatchlistId() string {
	if x != nil {
		return x.WatchlistId
	}
	return ""
}

func (x *CreateWatchlistRequest) GetWatchlist() *Watchlist {
	if x != nil {
		return x.Watchlist
	}
	return nil
}

// Request message for updating watchlist.
type UpdateWatchlistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The watchlist to update.
	//
	// The watchlist's `name` field is used to identify the watchlist to update.
	// Format:
	// `projects/{project}/locations/{location}/instances/{instance}/watchlists/{watchlist}`
	Watchlist *Watchlist `protobuf:"bytes,1,opt,name=watchlist,proto3" json:"watchlist,omitempty"`
	// Optional. The list of fields to update.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateWatchlistRequest) Reset() {
	*x = UpdateWatchlistRequest{}
	mi := &file_google_cloud_chronicle_v1_entity_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateWatchlistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWatchlistRequest) ProtoMessage() {}

func (x *UpdateWatchlistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_entity_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWatchlistRequest.ProtoReflect.Descriptor instead.
func (*UpdateWatchlistRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_entity_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateWatchlistRequest) GetWatchlist() *Watchlist {
	if x != nil {
		return x.Watchlist
	}
	return nil
}

func (x *UpdateWatchlistRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// Request message for deleting watchlist.
type DeleteWatchlistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the watchlist to delete.
	// Format:
	// `projects/{project}/locations/{location}/instances/{instance}/watchlists/{watchlist}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. If set to true, any entities under this watchlist will also be
	// deleted. (Otherwise, the request will only work if the watchlist has no
	// entities.)
	Force bool `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *DeleteWatchlistRequest) Reset() {
	*x = DeleteWatchlistRequest{}
	mi := &file_google_cloud_chronicle_v1_entity_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteWatchlistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWatchlistRequest) ProtoMessage() {}

func (x *DeleteWatchlistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_entity_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWatchlistRequest.ProtoReflect.Descriptor instead.
func (*DeleteWatchlistRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_entity_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteWatchlistRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteWatchlistRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

// Mechanism to populate entities in the watchlist.
type Watchlist_EntityPopulationMechanism struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ways to populate entities in watchlist.
	// Currently, only manual is supported.
	//
	// Types that are assignable to Mechanism:
	//
	//	*Watchlist_EntityPopulationMechanism_Manual_
	Mechanism isWatchlist_EntityPopulationMechanism_Mechanism `protobuf_oneof:"mechanism"`
}

func (x *Watchlist_EntityPopulationMechanism) Reset() {
	*x = Watchlist_EntityPopulationMechanism{}
	mi := &file_google_cloud_chronicle_v1_entity_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Watchlist_EntityPopulationMechanism) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Watchlist_EntityPopulationMechanism) ProtoMessage() {}

func (x *Watchlist_EntityPopulationMechanism) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_entity_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Watchlist_EntityPopulationMechanism.ProtoReflect.Descriptor instead.
func (*Watchlist_EntityPopulationMechanism) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_entity_proto_rawDescGZIP(), []int{0, 0}
}

func (m *Watchlist_EntityPopulationMechanism) GetMechanism() isWatchlist_EntityPopulationMechanism_Mechanism {
	if m != nil {
		return m.Mechanism
	}
	return nil
}

func (x *Watchlist_EntityPopulationMechanism) GetManual() *Watchlist_EntityPopulationMechanism_Manual {
	if x, ok := x.GetMechanism().(*Watchlist_EntityPopulationMechanism_Manual_); ok {
		return x.Manual
	}
	return nil
}

type isWatchlist_EntityPopulationMechanism_Mechanism interface {
	isWatchlist_EntityPopulationMechanism_Mechanism()
}

type Watchlist_EntityPopulationMechanism_Manual_ struct {
	// Optional. Entities are added manually.
	Manual *Watchlist_EntityPopulationMechanism_Manual `protobuf:"bytes,1,opt,name=manual,proto3,oneof"`
}

func (*Watchlist_EntityPopulationMechanism_Manual_) isWatchlist_EntityPopulationMechanism_Mechanism() {
}

// Count of different types of entities in the watchlist.
type Watchlist_EntityCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Count of user type entities in the watchlist.
	User int32 `protobuf:"varint,1,opt,name=user,proto3" json:"user,omitempty"`
	// Output only. Count of asset type entities in the watchlist.
	Asset int32 `protobuf:"varint,2,opt,name=asset,proto3" json:"asset,omitempty"`
}

func (x *Watchlist_EntityCount) Reset() {
	*x = Watchlist_EntityCount{}
	mi := &file_google_cloud_chronicle_v1_entity_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Watchlist_EntityCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Watchlist_EntityCount) ProtoMessage() {}

func (x *Watchlist_EntityCount) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_entity_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Watchlist_EntityCount.ProtoReflect.Descriptor instead.
func (*Watchlist_EntityCount) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_entity_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Watchlist_EntityCount) GetUser() int32 {
	if x != nil {
		return x.User
	}
	return 0
}

func (x *Watchlist_EntityCount) GetAsset() int32 {
	if x != nil {
		return x.Asset
	}
	return 0
}

// Entities are added manually.
type Watchlist_EntityPopulationMechanism_Manual struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Watchlist_EntityPopulationMechanism_Manual) Reset() {
	*x = Watchlist_EntityPopulationMechanism_Manual{}
	mi := &file_google_cloud_chronicle_v1_entity_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Watchlist_EntityPopulationMechanism_Manual) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Watchlist_EntityPopulationMechanism_Manual) ProtoMessage() {}

func (x *Watchlist_EntityPopulationMechanism_Manual) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_entity_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Watchlist_EntityPopulationMechanism_Manual.ProtoReflect.Descriptor instead.
func (*Watchlist_EntityPopulationMechanism_Manual) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_entity_proto_rawDescGZIP(), []int{0, 0, 0}
}

var File_google_cloud_chronicle_v1_entity_proto protoreflect.FileDescriptor

var file_google_cloud_chronicle_v1_entity_proto_rawDesc = []byte{
	0x0a, 0x26, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63,
	0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65,
	0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf8, 0x07, 0x0a, 0x09, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x08, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x12,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x11, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x83, 0x01, 0x0a, 0x1b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6f, 0x70, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x63,
	0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x19, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x63,
	0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x12, 0x58, 0x0a, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f,
	0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x76, 0x0a, 0x1a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x18, 0x77, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x1a, 0x98, 0x01, 0x0a,
	0x19, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x12, 0x64, 0x0a, 0x06, 0x6d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69,
	0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x06, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x1a, 0x08, 0x0a, 0x06, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x6d, 0x65,
	0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x1a, 0x41, 0x0a, 0x0b, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12,
	0x19, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x3a, 0x94, 0x01, 0xea, 0x41, 0x90,
	0x01, 0x0a, 0x22, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x53, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x7d, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x2f, 0x7b,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x7d, 0x2a, 0x0a, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x32, 0x09, 0x77, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0x37, 0x0a, 0x18, 0x57, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x1b, 0x0a,
	0x06, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x06, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x22, 0x55, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2a, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x24, 0x0a, 0x22, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63,
	0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x57, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0xbe, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x6c,
	0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0xe0, 0x41, 0x02,
	0xfa, 0x41, 0x24, 0x12, 0x22, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x22, 0x90, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x6c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a,
	0x0a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xcd, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x42, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2a, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x24, 0x12, 0x22, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69,
	0x63, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x57, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x0b, 0x77, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x09,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xa3, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x47, 0x0a, 0x09, 0x77, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x73, 0x0a, 0x16, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2a, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x24, 0x0a, 0x22, 0x63, 0x68, 0x72,
	0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x57, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x32, 0xbe, 0x08, 0x0a, 0x0d, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0xaf, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x49, 0xda, 0x41, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x12, 0x3a, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74,
	0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xc2, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63,
	0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x6c,
	0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4b, 0xda, 0x41,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x12, 0x3a, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x2a, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x12, 0xd9, 0x01, 0x0a, 0x0f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72,
	0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x6d, 0xda, 0x41, 0x1d, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x2c, 0x77, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x2c, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x47, 0x3a, 0x09,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x3a, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x6c, 0x69, 0x73, 0x74, 0x73, 0x12, 0xdb, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63,
	0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f,
	0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0x6f, 0xda, 0x41, 0x15, 0x77, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74,
	0x2c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x51, 0x3a, 0x09, 0x77, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x32, 0x44, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x77, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6e, 0x61,
	0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x73,
	0x2f, 0x2a, 0x7d, 0x12, 0xad, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x6c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x4f, 0xda, 0x41, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x2a, 0x3a, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x73,
	0x2f, 0x2a, 0x7d, 0x1a, 0x4c, 0xca, 0x41, 0x18, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c,
	0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0xd2, 0x41, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x42, 0xbe, 0x01, 0x0a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x42,
	0x0b, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3b,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x70, 0x62, 0x3b,
	0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x70, 0x62, 0xaa, 0x02, 0x19, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6e,
	0x69, 0x63, 0x6c, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x19, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x5c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x43, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65,
	0x5c, 0x56, 0x31, 0xea, 0x02, 0x1c, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x43, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x3a, 0x3a,
	0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_chronicle_v1_entity_proto_rawDescOnce sync.Once
	file_google_cloud_chronicle_v1_entity_proto_rawDescData = file_google_cloud_chronicle_v1_entity_proto_rawDesc
)

func file_google_cloud_chronicle_v1_entity_proto_rawDescGZIP() []byte {
	file_google_cloud_chronicle_v1_entity_proto_rawDescOnce.Do(func() {
		file_google_cloud_chronicle_v1_entity_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_chronicle_v1_entity_proto_rawDescData)
	})
	return file_google_cloud_chronicle_v1_entity_proto_rawDescData
}

var file_google_cloud_chronicle_v1_entity_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_google_cloud_chronicle_v1_entity_proto_goTypes = []any{
	(*Watchlist)(nil),                                  // 0: google.cloud.chronicle.v1.Watchlist
	(*WatchlistUserPreferences)(nil),                   // 1: google.cloud.chronicle.v1.WatchlistUserPreferences
	(*GetWatchlistRequest)(nil),                        // 2: google.cloud.chronicle.v1.GetWatchlistRequest
	(*ListWatchlistsRequest)(nil),                      // 3: google.cloud.chronicle.v1.ListWatchlistsRequest
	(*ListWatchlistsResponse)(nil),                     // 4: google.cloud.chronicle.v1.ListWatchlistsResponse
	(*CreateWatchlistRequest)(nil),                     // 5: google.cloud.chronicle.v1.CreateWatchlistRequest
	(*UpdateWatchlistRequest)(nil),                     // 6: google.cloud.chronicle.v1.UpdateWatchlistRequest
	(*DeleteWatchlistRequest)(nil),                     // 7: google.cloud.chronicle.v1.DeleteWatchlistRequest
	(*Watchlist_EntityPopulationMechanism)(nil),        // 8: google.cloud.chronicle.v1.Watchlist.EntityPopulationMechanism
	(*Watchlist_EntityCount)(nil),                      // 9: google.cloud.chronicle.v1.Watchlist.EntityCount
	(*Watchlist_EntityPopulationMechanism_Manual)(nil), // 10: google.cloud.chronicle.v1.Watchlist.EntityPopulationMechanism.Manual
	(*timestamppb.Timestamp)(nil),                      // 11: google.protobuf.Timestamp
	(*fieldmaskpb.FieldMask)(nil),                      // 12: google.protobuf.FieldMask
	(*emptypb.Empty)(nil),                              // 13: google.protobuf.Empty
}
var file_google_cloud_chronicle_v1_entity_proto_depIdxs = []int32{
	8,  // 0: google.cloud.chronicle.v1.Watchlist.entity_population_mechanism:type_name -> google.cloud.chronicle.v1.Watchlist.EntityPopulationMechanism
	9,  // 1: google.cloud.chronicle.v1.Watchlist.entity_count:type_name -> google.cloud.chronicle.v1.Watchlist.EntityCount
	11, // 2: google.cloud.chronicle.v1.Watchlist.create_time:type_name -> google.protobuf.Timestamp
	11, // 3: google.cloud.chronicle.v1.Watchlist.update_time:type_name -> google.protobuf.Timestamp
	1,  // 4: google.cloud.chronicle.v1.Watchlist.watchlist_user_preferences:type_name -> google.cloud.chronicle.v1.WatchlistUserPreferences
	0,  // 5: google.cloud.chronicle.v1.ListWatchlistsResponse.watchlists:type_name -> google.cloud.chronicle.v1.Watchlist
	0,  // 6: google.cloud.chronicle.v1.CreateWatchlistRequest.watchlist:type_name -> google.cloud.chronicle.v1.Watchlist
	0,  // 7: google.cloud.chronicle.v1.UpdateWatchlistRequest.watchlist:type_name -> google.cloud.chronicle.v1.Watchlist
	12, // 8: google.cloud.chronicle.v1.UpdateWatchlistRequest.update_mask:type_name -> google.protobuf.FieldMask
	10, // 9: google.cloud.chronicle.v1.Watchlist.EntityPopulationMechanism.manual:type_name -> google.cloud.chronicle.v1.Watchlist.EntityPopulationMechanism.Manual
	2,  // 10: google.cloud.chronicle.v1.EntityService.GetWatchlist:input_type -> google.cloud.chronicle.v1.GetWatchlistRequest
	3,  // 11: google.cloud.chronicle.v1.EntityService.ListWatchlists:input_type -> google.cloud.chronicle.v1.ListWatchlistsRequest
	5,  // 12: google.cloud.chronicle.v1.EntityService.CreateWatchlist:input_type -> google.cloud.chronicle.v1.CreateWatchlistRequest
	6,  // 13: google.cloud.chronicle.v1.EntityService.UpdateWatchlist:input_type -> google.cloud.chronicle.v1.UpdateWatchlistRequest
	7,  // 14: google.cloud.chronicle.v1.EntityService.DeleteWatchlist:input_type -> google.cloud.chronicle.v1.DeleteWatchlistRequest
	0,  // 15: google.cloud.chronicle.v1.EntityService.GetWatchlist:output_type -> google.cloud.chronicle.v1.Watchlist
	4,  // 16: google.cloud.chronicle.v1.EntityService.ListWatchlists:output_type -> google.cloud.chronicle.v1.ListWatchlistsResponse
	0,  // 17: google.cloud.chronicle.v1.EntityService.CreateWatchlist:output_type -> google.cloud.chronicle.v1.Watchlist
	0,  // 18: google.cloud.chronicle.v1.EntityService.UpdateWatchlist:output_type -> google.cloud.chronicle.v1.Watchlist
	13, // 19: google.cloud.chronicle.v1.EntityService.DeleteWatchlist:output_type -> google.protobuf.Empty
	15, // [15:20] is the sub-list for method output_type
	10, // [10:15] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_google_cloud_chronicle_v1_entity_proto_init() }
func file_google_cloud_chronicle_v1_entity_proto_init() {
	if File_google_cloud_chronicle_v1_entity_proto != nil {
		return
	}
	file_google_cloud_chronicle_v1_entity_proto_msgTypes[8].OneofWrappers = []any{
		(*Watchlist_EntityPopulationMechanism_Manual_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_chronicle_v1_entity_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_google_cloud_chronicle_v1_entity_proto_goTypes,
		DependencyIndexes: file_google_cloud_chronicle_v1_entity_proto_depIdxs,
		MessageInfos:      file_google_cloud_chronicle_v1_entity_proto_msgTypes,
	}.Build()
	File_google_cloud_chronicle_v1_entity_proto = out.File
	file_google_cloud_chronicle_v1_entity_proto_rawDesc = nil
	file_google_cloud_chronicle_v1_entity_proto_goTypes = nil
	file_google_cloud_chronicle_v1_entity_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EntityServiceClient is the client API for EntityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EntityServiceClient interface {
	// Gets watchlist details for the given watchlist ID.
	GetWatchlist(ctx context.Context, in *GetWatchlistRequest, opts ...grpc.CallOption) (*Watchlist, error)
	// Lists all watchlists for the given instance.
	ListWatchlists(ctx context.Context, in *ListWatchlistsRequest, opts ...grpc.CallOption) (*ListWatchlistsResponse, error)
	// Creates a watchlist for the given instance.
	// Note that there can be at most 200 watchlists per instance.
	CreateWatchlist(ctx context.Context, in *CreateWatchlistRequest, opts ...grpc.CallOption) (*Watchlist, error)
	// Updates the watchlist for the given instance.
	UpdateWatchlist(ctx context.Context, in *UpdateWatchlistRequest, opts ...grpc.CallOption) (*Watchlist, error)
	// Deletes the watchlist for the given instance.
	DeleteWatchlist(ctx context.Context, in *DeleteWatchlistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type entityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEntityServiceClient(cc grpc.ClientConnInterface) EntityServiceClient {
	return &entityServiceClient{cc}
}

func (c *entityServiceClient) GetWatchlist(ctx context.Context, in *GetWatchlistRequest, opts ...grpc.CallOption) (*Watchlist, error) {
	out := new(Watchlist)
	err := c.cc.Invoke(ctx, "/google.cloud.chronicle.v1.EntityService/GetWatchlist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) ListWatchlists(ctx context.Context, in *ListWatchlistsRequest, opts ...grpc.CallOption) (*ListWatchlistsResponse, error) {
	out := new(ListWatchlistsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.chronicle.v1.EntityService/ListWatchlists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) CreateWatchlist(ctx context.Context, in *CreateWatchlistRequest, opts ...grpc.CallOption) (*Watchlist, error) {
	out := new(Watchlist)
	err := c.cc.Invoke(ctx, "/google.cloud.chronicle.v1.EntityService/CreateWatchlist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) UpdateWatchlist(ctx context.Context, in *UpdateWatchlistRequest, opts ...grpc.CallOption) (*Watchlist, error) {
	out := new(Watchlist)
	err := c.cc.Invoke(ctx, "/google.cloud.chronicle.v1.EntityService/UpdateWatchlist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) DeleteWatchlist(ctx context.Context, in *DeleteWatchlistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/google.cloud.chronicle.v1.EntityService/DeleteWatchlist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EntityServiceServer is the server API for EntityService service.
type EntityServiceServer interface {
	// Gets watchlist details for the given watchlist ID.
	GetWatchlist(context.Context, *GetWatchlistRequest) (*Watchlist, error)
	// Lists all watchlists for the given instance.
	ListWatchlists(context.Context, *ListWatchlistsRequest) (*ListWatchlistsResponse, error)
	// Creates a watchlist for the given instance.
	// Note that there can be at most 200 watchlists per instance.
	CreateWatchlist(context.Context, *CreateWatchlistRequest) (*Watchlist, error)
	// Updates the watchlist for the given instance.
	UpdateWatchlist(context.Context, *UpdateWatchlistRequest) (*Watchlist, error)
	// Deletes the watchlist for the given instance.
	DeleteWatchlist(context.Context, *DeleteWatchlistRequest) (*emptypb.Empty, error)
}

// UnimplementedEntityServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEntityServiceServer struct {
}

func (*UnimplementedEntityServiceServer) GetWatchlist(context.Context, *GetWatchlistRequest) (*Watchlist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWatchlist not implemented")
}
func (*UnimplementedEntityServiceServer) ListWatchlists(context.Context, *ListWatchlistsRequest) (*ListWatchlistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWatchlists not implemented")
}
func (*UnimplementedEntityServiceServer) CreateWatchlist(context.Context, *CreateWatchlistRequest) (*Watchlist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWatchlist not implemented")
}
func (*UnimplementedEntityServiceServer) UpdateWatchlist(context.Context, *UpdateWatchlistRequest) (*Watchlist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWatchlist not implemented")
}
func (*UnimplementedEntityServiceServer) DeleteWatchlist(context.Context, *DeleteWatchlistRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWatchlist not implemented")
}

func RegisterEntityServiceServer(s *grpc.Server, srv EntityServiceServer) {
	s.RegisterService(&_EntityService_serviceDesc, srv)
}

func _EntityService_GetWatchlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWatchlistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).GetWatchlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.chronicle.v1.EntityService/GetWatchlist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).GetWatchlist(ctx, req.(*GetWatchlistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_ListWatchlists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWatchlistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).ListWatchlists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.chronicle.v1.EntityService/ListWatchlists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).ListWatchlists(ctx, req.(*ListWatchlistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_CreateWatchlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWatchlistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).CreateWatchlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.chronicle.v1.EntityService/CreateWatchlist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).CreateWatchlist(ctx, req.(*CreateWatchlistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_UpdateWatchlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWatchlistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).UpdateWatchlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.chronicle.v1.EntityService/UpdateWatchlist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).UpdateWatchlist(ctx, req.(*UpdateWatchlistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_DeleteWatchlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWatchlistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).DeleteWatchlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.chronicle.v1.EntityService/DeleteWatchlist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).DeleteWatchlist(ctx, req.(*DeleteWatchlistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EntityService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.chronicle.v1.EntityService",
	HandlerType: (*EntityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWatchlist",
			Handler:    _EntityService_GetWatchlist_Handler,
		},
		{
			MethodName: "ListWatchlists",
			Handler:    _EntityService_ListWatchlists_Handler,
		},
		{
			MethodName: "CreateWatchlist",
			Handler:    _EntityService_CreateWatchlist_Handler,
		},
		{
			MethodName: "UpdateWatchlist",
			Handler:    _EntityService_UpdateWatchlist_Handler,
		},
		{
			MethodName: "DeleteWatchlist",
			Handler:    _EntityService_DeleteWatchlist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/chronicle/v1/entity.proto",
}
