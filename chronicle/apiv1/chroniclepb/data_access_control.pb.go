// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.3
// source: google/cloud/chronicle/v1/data_access_control.proto

package chroniclepb

import (
	context "context"
	reflect "reflect"
	sync "sync"

	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for CreateDataAccessLabel.
type CreateDataAccessLabelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent resource where this Data Access Label will be created.
	// Format: `projects/{project}/locations/{location}/instances/{instance}`
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Required. Data access label to create.
	DataAccessLabel *DataAccessLabel `protobuf:"bytes,2,opt,name=data_access_label,json=dataAccessLabel,proto3" json:"data_access_label,omitempty"`
	// Required. The ID to use for the data access label, which will become the
	// label's display name and the final component of the label's resource name.
	// The maximum number of characters should be 63. Regex pattern is as per AIP:
	// https://google.aip.dev/122#resource-id-segments
	DataAccessLabelId string `protobuf:"bytes,3,opt,name=data_access_label_id,json=dataAccessLabelId,proto3" json:"data_access_label_id,omitempty"`
}

func (x *CreateDataAccessLabelRequest) Reset() {
	*x = CreateDataAccessLabelRequest{}
	mi := &file_google_cloud_chronicle_v1_data_access_control_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDataAccessLabelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDataAccessLabelRequest) ProtoMessage() {}

func (x *CreateDataAccessLabelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_data_access_control_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDataAccessLabelRequest.ProtoReflect.Descriptor instead.
func (*CreateDataAccessLabelRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_data_access_control_proto_rawDescGZIP(), []int{0}
}

func (x *CreateDataAccessLabelRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateDataAccessLabelRequest) GetDataAccessLabel() *DataAccessLabel {
	if x != nil {
		return x.DataAccessLabel
	}
	return nil
}

func (x *CreateDataAccessLabelRequest) GetDataAccessLabelId() string {
	if x != nil {
		return x.DataAccessLabelId
	}
	return ""
}

// Request message to retrieve a data access label.
type GetDataAccessLabelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The ID of the data access label to retrieve.
	// Format:
	// `projects/{project}/locations/{location}/instances/{instance}/dataAccessLabels/{data_access_label}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetDataAccessLabelRequest) Reset() {
	*x = GetDataAccessLabelRequest{}
	mi := &file_google_cloud_chronicle_v1_data_access_control_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDataAccessLabelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataAccessLabelRequest) ProtoMessage() {}

func (x *GetDataAccessLabelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_data_access_control_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataAccessLabelRequest.ProtoReflect.Descriptor instead.
func (*GetDataAccessLabelRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_data_access_control_proto_rawDescGZIP(), []int{1}
}

func (x *GetDataAccessLabelRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Request message for ListDataAccessLabels.
type ListDataAccessLabelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent resource where this data access label will be created.
	// Format: `projects/{project}/locations/{location}/instances/{instance}`
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The maximum number of data access labels to return. The service may return
	// fewer than this value. If unspecified, at most 100 data access labels will
	// be returned. The maximum value is 1000; values above 1000 will be coerced
	// to 1000.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListDataAccessLabelsRequest` call.
	// Provide this to retrieve the subsequent page.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Optional. A filter which should follow the guidelines of AIP-160.
	// Supports filtering on all fieds of DataAccessLabel and all operations as
	// mentioned in https://google.aip.dev/160.
	// example filter: "create_time greater than \"2023-04-21T11:30:00-04:00\" OR
	// display_name:\"-21-1\"".
	Filter string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListDataAccessLabelsRequest) Reset() {
	*x = ListDataAccessLabelsRequest{}
	mi := &file_google_cloud_chronicle_v1_data_access_control_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDataAccessLabelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDataAccessLabelsRequest) ProtoMessage() {}

func (x *ListDataAccessLabelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_data_access_control_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDataAccessLabelsRequest.ProtoReflect.Descriptor instead.
func (*ListDataAccessLabelsRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_data_access_control_proto_rawDescGZIP(), []int{2}
}

func (x *ListDataAccessLabelsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListDataAccessLabelsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListDataAccessLabelsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListDataAccessLabelsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// Response message for ListDataAccessLabels.
type ListDataAccessLabelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of data access labels.
	DataAccessLabels []*DataAccessLabel `protobuf:"bytes,1,rep,name=data_access_labels,json=dataAccessLabels,proto3" json:"data_access_labels,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListDataAccessLabelsResponse) Reset() {
	*x = ListDataAccessLabelsResponse{}
	mi := &file_google_cloud_chronicle_v1_data_access_control_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDataAccessLabelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDataAccessLabelsResponse) ProtoMessage() {}

func (x *ListDataAccessLabelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_data_access_control_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDataAccessLabelsResponse.ProtoReflect.Descriptor instead.
func (*ListDataAccessLabelsResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_data_access_control_proto_rawDescGZIP(), []int{3}
}

func (x *ListDataAccessLabelsResponse) GetDataAccessLabels() []*DataAccessLabel {
	if x != nil {
		return x.DataAccessLabels
	}
	return nil
}

func (x *ListDataAccessLabelsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Request message for UpdateDataAccessLabel method.
type UpdateDataAccessLabelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The data access label to update.
	//
	// The label's `name` field is used to identify the label to update.
	// Format:
	// `projects/{project}/locations/{location}/instances/{instance}/dataAccessLabels/{data_access_label}`
	DataAccessLabel *DataAccessLabel `protobuf:"bytes,1,opt,name=data_access_label,json=dataAccessLabel,proto3" json:"data_access_label,omitempty"`
	// The list of fields to update. If not included, all fields with a non-empty
	// value will be overwritten. Currently, only the description and definition
	// fields are supported for update; an update call that attempts to update any
	// other fields will return INVALID_ARGUMENT.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateDataAccessLabelRequest) Reset() {
	*x = UpdateDataAccessLabelRequest{}
	mi := &file_google_cloud_chronicle_v1_data_access_control_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDataAccessLabelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDataAccessLabelRequest) ProtoMessage() {}

func (x *UpdateDataAccessLabelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_data_access_control_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDataAccessLabelRequest.ProtoReflect.Descriptor instead.
func (*UpdateDataAccessLabelRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_data_access_control_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateDataAccessLabelRequest) GetDataAccessLabel() *DataAccessLabel {
	if x != nil {
		return x.DataAccessLabel
	}
	return nil
}

func (x *UpdateDataAccessLabelRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// Request message to delete a data access label.
type DeleteDataAccessLabelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The ID of the data access label to delete.
	// Format:
	// `projects/{project}/locations/{location}/instances/{instance}/dataAccessLabels/{data_access_label}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteDataAccessLabelRequest) Reset() {
	*x = DeleteDataAccessLabelRequest{}
	mi := &file_google_cloud_chronicle_v1_data_access_control_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDataAccessLabelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDataAccessLabelRequest) ProtoMessage() {}

func (x *DeleteDataAccessLabelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_data_access_control_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDataAccessLabelRequest.ProtoReflect.Descriptor instead.
func (*DeleteDataAccessLabelRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_data_access_control_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteDataAccessLabelRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Request message for CreateDataAccessScope.
type CreateDataAccessScopeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent resource where this Data Access Scope will be created.
	// Format: `projects/{project}/locations/{location}/instances/{instance}`
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Required. Data access scope to create.
	DataAccessScope *DataAccessScope `protobuf:"bytes,2,opt,name=data_access_scope,json=dataAccessScope,proto3" json:"data_access_scope,omitempty"`
	// Required. The user provided scope id which will become the last part of the
	// name of the scope resource. Needs to be compliant with
	// https://google.aip.dev/122
	DataAccessScopeId string `protobuf:"bytes,3,opt,name=data_access_scope_id,json=dataAccessScopeId,proto3" json:"data_access_scope_id,omitempty"`
}

func (x *CreateDataAccessScopeRequest) Reset() {
	*x = CreateDataAccessScopeRequest{}
	mi := &file_google_cloud_chronicle_v1_data_access_control_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDataAccessScopeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDataAccessScopeRequest) ProtoMessage() {}

func (x *CreateDataAccessScopeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_data_access_control_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDataAccessScopeRequest.ProtoReflect.Descriptor instead.
func (*CreateDataAccessScopeRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_data_access_control_proto_rawDescGZIP(), []int{6}
}

func (x *CreateDataAccessScopeRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateDataAccessScopeRequest) GetDataAccessScope() *DataAccessScope {
	if x != nil {
		return x.DataAccessScope
	}
	return nil
}

func (x *CreateDataAccessScopeRequest) GetDataAccessScopeId() string {
	if x != nil {
		return x.DataAccessScopeId
	}
	return ""
}

// Request message to retrieve a data access scope.
type GetDataAccessScopeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The ID of the data access scope to retrieve.
	// Format:
	// `projects/{project}/locations/{location}/instances/{instance}/dataAccessScopes/{data_access_scope}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetDataAccessScopeRequest) Reset() {
	*x = GetDataAccessScopeRequest{}
	mi := &file_google_cloud_chronicle_v1_data_access_control_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDataAccessScopeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataAccessScopeRequest) ProtoMessage() {}

func (x *GetDataAccessScopeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_data_access_control_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataAccessScopeRequest.ProtoReflect.Descriptor instead.
func (*GetDataAccessScopeRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_data_access_control_proto_rawDescGZIP(), []int{7}
}

func (x *GetDataAccessScopeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Request message for ListDataAccessScopes.
type ListDataAccessScopesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent resource where this data access scope will be created.
	// Format: `projects/{project}/locations/{location}/instances/{instance}`
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The maximum number of data access scopes to return. The service may return
	// fewer than this value. If unspecified, at most 100 data access scopes will
	// be returned. The maximum value is 1000; values above 1000 will be coerced
	// to 1000.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListDataAccessScopesRequest` call.
	// Provide this to retrieve the subsequent page.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Optional. A filter which should follow the guidelines of AIP-160.
	// Supports filtering on all fieds of DataAccessScope and all operations as
	// mentioned in https://google.aip.dev/160.
	// example filter: "create_time greater than \"2023-04-21T11:30:00-04:00\" OR
	// display_name:\"-21-1\"".
	Filter string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListDataAccessScopesRequest) Reset() {
	*x = ListDataAccessScopesRequest{}
	mi := &file_google_cloud_chronicle_v1_data_access_control_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDataAccessScopesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDataAccessScopesRequest) ProtoMessage() {}

func (x *ListDataAccessScopesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_data_access_control_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDataAccessScopesRequest.ProtoReflect.Descriptor instead.
func (*ListDataAccessScopesRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_data_access_control_proto_rawDescGZIP(), []int{8}
}

func (x *ListDataAccessScopesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListDataAccessScopesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListDataAccessScopesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListDataAccessScopesRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// Response message for ListDataAccessScopes.
type ListDataAccessScopesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of data access scopes.
	DataAccessScopes []*DataAccessScope `protobuf:"bytes,1,rep,name=data_access_scopes,json=dataAccessScopes,proto3" json:"data_access_scopes,omitempty"`
	// Whether or not global scope is granted to the user.
	GlobalDataAccessScopeGranted *bool `protobuf:"varint,3,opt,name=global_data_access_scope_granted,json=globalDataAccessScopeGranted,proto3,oneof" json:"global_data_access_scope_granted,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListDataAccessScopesResponse) Reset() {
	*x = ListDataAccessScopesResponse{}
	mi := &file_google_cloud_chronicle_v1_data_access_control_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDataAccessScopesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDataAccessScopesResponse) ProtoMessage() {}

func (x *ListDataAccessScopesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_data_access_control_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDataAccessScopesResponse.ProtoReflect.Descriptor instead.
func (*ListDataAccessScopesResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_data_access_control_proto_rawDescGZIP(), []int{9}
}

func (x *ListDataAccessScopesResponse) GetDataAccessScopes() []*DataAccessScope {
	if x != nil {
		return x.DataAccessScopes
	}
	return nil
}

func (x *ListDataAccessScopesResponse) GetGlobalDataAccessScopeGranted() bool {
	if x != nil && x.GlobalDataAccessScopeGranted != nil {
		return *x.GlobalDataAccessScopeGranted
	}
	return false
}

func (x *ListDataAccessScopesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Request message for UpdateDataAccessScope method.
type UpdateDataAccessScopeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The data access scope to update.
	//
	// The scope's `name` field is used to identify the scope to update.
	// Format:
	// `projects/{project}/locations/{location}/instances/{instance}/dataAccessScopes/{data_access_scope}`
	DataAccessScope *DataAccessScope `protobuf:"bytes,1,opt,name=data_access_scope,json=dataAccessScope,proto3" json:"data_access_scope,omitempty"`
	// The list of fields to update. If not included, all fields with a non-empty
	// value will be overwritten. Currently, only the description, the allowed
	// and denied labels list fields are supported for update;
	// an update call that attempts to update any
	// other fields will return INVALID_ARGUMENT.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateDataAccessScopeRequest) Reset() {
	*x = UpdateDataAccessScopeRequest{}
	mi := &file_google_cloud_chronicle_v1_data_access_control_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDataAccessScopeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDataAccessScopeRequest) ProtoMessage() {}

func (x *UpdateDataAccessScopeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_data_access_control_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDataAccessScopeRequest.ProtoReflect.Descriptor instead.
func (*UpdateDataAccessScopeRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_data_access_control_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateDataAccessScopeRequest) GetDataAccessScope() *DataAccessScope {
	if x != nil {
		return x.DataAccessScope
	}
	return nil
}

func (x *UpdateDataAccessScopeRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// Request message to delete a data access scope.
type DeleteDataAccessScopeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The ID of the data access scope to delete.
	// Format:
	// `projects/{project}/locations/{location}/instances/{instance}/dataAccessScopes/{data_access_scope}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteDataAccessScopeRequest) Reset() {
	*x = DeleteDataAccessScopeRequest{}
	mi := &file_google_cloud_chronicle_v1_data_access_control_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDataAccessScopeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDataAccessScopeRequest) ProtoMessage() {}

func (x *DeleteDataAccessScopeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_data_access_control_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDataAccessScopeRequest.ProtoReflect.Descriptor instead.
func (*DeleteDataAccessScopeRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_data_access_control_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteDataAccessScopeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// A DataAccessLabel is a label on events to define user access to data.
type DataAccessLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	// The definition of the data access label that determines which
	// data gets tagged with this label.
	//
	// Types that are assignable to Definition:
	//
	//	*DataAccessLabel_UdmQuery
	Definition isDataAccessLabel_Definition `protobuf_oneof:"definition"`
	// The unique resource name of the data access label.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. The short name displayed for the label as it appears on event
	// data.
	DisplayName string `protobuf:"bytes,8,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Output only. The time at which the data access label was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The time at which the data access label was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. The user who created the data access label.
	Author string `protobuf:"bytes,6,opt,name=author,proto3" json:"author,omitempty"`
	// Output only. The user who last updated the data access label.
	LastEditor string `protobuf:"bytes,7,opt,name=last_editor,json=lastEditor,proto3" json:"last_editor,omitempty"`
	// Optional. A description of the data access label for a human reader.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *DataAccessLabel) Reset() {
	*x = DataAccessLabel{}
	mi := &file_google_cloud_chronicle_v1_data_access_control_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataAccessLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataAccessLabel) ProtoMessage() {}

func (x *DataAccessLabel) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_data_access_control_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataAccessLabel.ProtoReflect.Descriptor instead.
func (*DataAccessLabel) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_data_access_control_proto_rawDescGZIP(), []int{12}
}

func (m *DataAccessLabel) GetDefinition() isDataAccessLabel_Definition {
	if m != nil {
		return m.Definition
	}
	return nil
}

func (x *DataAccessLabel) GetUdmQuery() string {
	if x, ok := x.GetDefinition().(*DataAccessLabel_UdmQuery); ok {
		return x.UdmQuery
	}
	return ""
}

func (x *DataAccessLabel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DataAccessLabel) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *DataAccessLabel) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *DataAccessLabel) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *DataAccessLabel) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *DataAccessLabel) GetLastEditor() string {
	if x != nil {
		return x.LastEditor
	}
	return ""
}

func (x *DataAccessLabel) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type isDataAccessLabel_Definition interface {
	isDataAccessLabel_Definition()
}

type DataAccessLabel_UdmQuery struct {
	// A UDM query over event data.
	UdmQuery string `protobuf:"bytes,3,opt,name=udm_query,json=udmQuery,proto3,oneof"`
}

func (*DataAccessLabel_UdmQuery) isDataAccessLabel_Definition() {}

// A DataAccessScope is a boolean expression of data access labels used
// to restrict access to data for users.
type DataAccessScope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The unique full name of the data access scope.
	// The name should comply with https://google.aip.dev/122 standards.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. The allowed labels for the scope.
	// Either allow_all or allowed_data_access_labels needs to be provided.
	// When provided, there has to be at least one label allowed for the scope to
	// be valid.
	// The logical operator for evaluation of the allowed labels is OR.
	// E.g.: A customer with scope with allowed labels A and B will be able
	// to see data with labeled with A or B or (A and B).
	AllowedDataAccessLabels []*DataAccessLabelReference `protobuf:"bytes,2,rep,name=allowed_data_access_labels,json=allowedDataAccessLabels,proto3" json:"allowed_data_access_labels,omitempty"`
	// Optional. The denied labels for the scope.
	// The logical operator for evaluation of the denied labels is AND.
	// E.g.: A customer with scope with denied labels A and B won't be able
	// to see data labeled with A and data labeled with B
	// and data with labels A and B.
	DeniedDataAccessLabels []*DataAccessLabelReference `protobuf:"bytes,3,rep,name=denied_data_access_labels,json=deniedDataAccessLabels,proto3" json:"denied_data_access_labels,omitempty"`
	// Output only. The name to be used for display to customers of the data
	// access scope.
	DisplayName string `protobuf:"bytes,4,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Output only. The time at which the data access scope was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The time at which the data access scope was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. The user who created the data access scope.
	Author string `protobuf:"bytes,7,opt,name=author,proto3" json:"author,omitempty"`
	// Output only. The user who last updated the data access scope.
	LastEditor string `protobuf:"bytes,8,opt,name=last_editor,json=lastEditor,proto3" json:"last_editor,omitempty"`
	// Optional. A description of the data access scope for a human reader.
	Description string `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	// Optional. Whether or not the scope allows all labels, allow_all and
	// allowed_data_access_labels are mutually exclusive and one of them must be
	// present. denied_data_access_labels can still be used along with allow_all.
	// When combined with denied_data_access_labels, access will be granted to all
	// data that doesn't have labels mentioned in denied_data_access_labels. E.g.:
	// A customer with scope with denied labels A and B and allow_all will be able
	// to see all data except data labeled with A and data labeled with B and data
	// with labels A and B.
	AllowAll bool `protobuf:"varint,10,opt,name=allow_all,json=allowAll,proto3" json:"allow_all,omitempty"`
}

func (x *DataAccessScope) Reset() {
	*x = DataAccessScope{}
	mi := &file_google_cloud_chronicle_v1_data_access_control_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataAccessScope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataAccessScope) ProtoMessage() {}

func (x *DataAccessScope) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_data_access_control_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataAccessScope.ProtoReflect.Descriptor instead.
func (*DataAccessScope) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_data_access_control_proto_rawDescGZIP(), []int{13}
}

func (x *DataAccessScope) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DataAccessScope) GetAllowedDataAccessLabels() []*DataAccessLabelReference {
	if x != nil {
		return x.AllowedDataAccessLabels
	}
	return nil
}

func (x *DataAccessScope) GetDeniedDataAccessLabels() []*DataAccessLabelReference {
	if x != nil {
		return x.DeniedDataAccessLabels
	}
	return nil
}

func (x *DataAccessScope) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *DataAccessScope) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *DataAccessScope) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *DataAccessScope) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *DataAccessScope) GetLastEditor() string {
	if x != nil {
		return x.LastEditor
	}
	return ""
}

func (x *DataAccessScope) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DataAccessScope) GetAllowAll() bool {
	if x != nil {
		return x.AllowAll
	}
	return false
}

// Reference object to a data access label.
type DataAccessLabelReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier for the label.
	//
	// Types that are assignable to Label:
	//
	//	*DataAccessLabelReference_DataAccessLabel
	//	*DataAccessLabelReference_LogType
	//	*DataAccessLabelReference_AssetNamespace
	//	*DataAccessLabelReference_IngestionLabel
	Label isDataAccessLabelReference_Label `protobuf_oneof:"label"`
	// Output only. The display name of the label.
	// Data access label and log types's name
	// will match the display name of the resource.
	// The asset namespace will match the namespace itself.
	// The ingestion key value pair will match the key of the tuple.
	DisplayName string `protobuf:"bytes,5,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
}

func (x *DataAccessLabelReference) Reset() {
	*x = DataAccessLabelReference{}
	mi := &file_google_cloud_chronicle_v1_data_access_control_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataAccessLabelReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataAccessLabelReference) ProtoMessage() {}

func (x *DataAccessLabelReference) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_data_access_control_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataAccessLabelReference.ProtoReflect.Descriptor instead.
func (*DataAccessLabelReference) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_data_access_control_proto_rawDescGZIP(), []int{14}
}

func (m *DataAccessLabelReference) GetLabel() isDataAccessLabelReference_Label {
	if m != nil {
		return m.Label
	}
	return nil
}

func (x *DataAccessLabelReference) GetDataAccessLabel() string {
	if x, ok := x.GetLabel().(*DataAccessLabelReference_DataAccessLabel); ok {
		return x.DataAccessLabel
	}
	return ""
}

func (x *DataAccessLabelReference) GetLogType() string {
	if x, ok := x.GetLabel().(*DataAccessLabelReference_LogType); ok {
		return x.LogType
	}
	return ""
}

func (x *DataAccessLabelReference) GetAssetNamespace() string {
	if x, ok := x.GetLabel().(*DataAccessLabelReference_AssetNamespace); ok {
		return x.AssetNamespace
	}
	return ""
}

func (x *DataAccessLabelReference) GetIngestionLabel() *IngestionLabel {
	if x, ok := x.GetLabel().(*DataAccessLabelReference_IngestionLabel); ok {
		return x.IngestionLabel
	}
	return nil
}

func (x *DataAccessLabelReference) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

type isDataAccessLabelReference_Label interface {
	isDataAccessLabelReference_Label()
}

type DataAccessLabelReference_DataAccessLabel struct {
	// The name of the data access label.
	DataAccessLabel string `protobuf:"bytes,1,opt,name=data_access_label,json=dataAccessLabel,proto3,oneof"`
}

type DataAccessLabelReference_LogType struct {
	// The name of the log type.
	LogType string `protobuf:"bytes,2,opt,name=log_type,json=logType,proto3,oneof"`
}

type DataAccessLabelReference_AssetNamespace struct {
	// The asset namespace configured in the forwarder
	// of the customer's events.
	AssetNamespace string `protobuf:"bytes,3,opt,name=asset_namespace,json=assetNamespace,proto3,oneof"`
}

type DataAccessLabelReference_IngestionLabel struct {
	// The ingestion label configured in the forwarder of the customer's events.
	IngestionLabel *IngestionLabel `protobuf:"bytes,4,opt,name=ingestion_label,json=ingestionLabel,proto3,oneof"`
}

func (*DataAccessLabelReference_DataAccessLabel) isDataAccessLabelReference_Label() {}

func (*DataAccessLabelReference_LogType) isDataAccessLabelReference_Label() {}

func (*DataAccessLabelReference_AssetNamespace) isDataAccessLabelReference_Label() {}

func (*DataAccessLabelReference_IngestionLabel) isDataAccessLabelReference_Label() {}

// Representation of an ingestion label type.
type IngestionLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The key of the ingestion label. Always required.
	IngestionLabelKey string `protobuf:"bytes,1,opt,name=ingestion_label_key,json=ingestionLabelKey,proto3" json:"ingestion_label_key,omitempty"`
	// Optional. The value of the ingestion label. Optional. An object
	// with no provided value and some key provided would match
	// against the given key and ANY value.
	IngestionLabelValue string `protobuf:"bytes,2,opt,name=ingestion_label_value,json=ingestionLabelValue,proto3" json:"ingestion_label_value,omitempty"`
}

func (x *IngestionLabel) Reset() {
	*x = IngestionLabel{}
	mi := &file_google_cloud_chronicle_v1_data_access_control_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IngestionLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestionLabel) ProtoMessage() {}

func (x *IngestionLabel) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_data_access_control_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestionLabel.ProtoReflect.Descriptor instead.
func (*IngestionLabel) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_data_access_control_proto_rawDescGZIP(), []int{15}
}

func (x *IngestionLabel) GetIngestionLabelKey() string {
	if x != nil {
		return x.IngestionLabelKey
	}
	return ""
}

func (x *IngestionLabel) GetIngestionLabelValue() string {
	if x != nil {
		return x.IngestionLabelValue
	}
	return ""
}

var File_google_cloud_chronicle_v1_data_access_control_proto protoreflect.FileDescriptor

var file_google_cloud_chronicle_v1_data_access_control_proto_rawDesc = []byte{
	0x0a, 0x33, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63,
	0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xfb, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2a, 0x12, 0x28, 0x63, 0x68,
	0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x5b,
	0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63,
	0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x34, 0x0a, 0x14, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x11,
	0x64, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49,
	0x64, 0x22, 0x61, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xe0, 0x41,
	0x02, 0xfa, 0x41, 0x2a, 0x0a, 0x28, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44,
	0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2a, 0x12, 0x28, 0x63, 0x68,
	0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xa0, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xb8, 0x01, 0x0a, 0x1c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5b, 0x0a, 0x11, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x64, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x30, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2a, 0x0a, 0x28, 0x63, 0x68, 0x72,
	0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xfb, 0x01, 0x0a, 0x1c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xe0, 0x41,
	0x02, 0xfa, 0x41, 0x2a, 0x12, 0x28, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44,
	0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x5b, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x14, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x11, 0x64, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x22, 0x61, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2a, 0x0a, 0x28, 0x63, 0x68,
	0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc0, 0x01, 0x0a,
	0x1b, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xe0, 0x41,
	0x02, 0xfa, 0x41, 0x2a, 0x12, 0x28, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44,
	0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22,
	0x92, 0x02, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x58, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f,
	0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x20, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x1c, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x47, 0x72, 0x61,
	0x6e, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42,
	0x23, 0x0a, 0x21, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x65, 0x64, 0x22, 0xb8, 0x01, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5b, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22,
	0x64, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x44, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xe0,
	0x41, 0x02, 0xfa, 0x41, 0x2a, 0x0a, 0x28, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xab, 0x04, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x09, 0x75, 0x64, 0x6d,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08,
	0x75, 0x64, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x41, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xfa, 0x41, 0x2a, 0x0a, 0x28, 0x63, 0x68, 0x72,
	0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a,
	0x6c, 0x61, 0x73, 0x74, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x3a, 0x91, 0x01, 0xea, 0x41, 0x8d, 0x01, 0x0a, 0x28, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69,
	0x63, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x61, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x7d, 0x42, 0x0c, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x8f, 0x06, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2a, 0x0a, 0x28, 0x63,
	0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x75, 0x0a,
	0x1a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x17, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x73, 0x0a, 0x19, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x16, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x6c, 0x61,
	0x73, 0x74, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x20, 0x0a, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x6c,
	0x6c, 0x3a, 0x91, 0x01, 0xea, 0x41, 0x8d, 0x01, 0x0a, 0x28, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69,
	0x63, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x12, 0x61, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x7d, 0x22, 0x97, 0x02, 0x0a, 0x18, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0f, 0x64, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x1b, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a,
	0x0f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x54, 0x0a, 0x0f, 0x69, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x0e,
	0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x26,
	0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22,
	0x7e, 0x0a, 0x0e, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x33, 0x0a, 0x13, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x11, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x15, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x13, 0x69, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x32,
	0xe6, 0x12, 0x0a, 0x18, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8a, 0x02, 0x0a,
	0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x8b, 0x01, 0xda, 0x41,
	0x2d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x2c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x55, 0x3a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x40, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0xc7, 0x01, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x22, 0x4f, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x42, 0x12, 0x40, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x2a, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x2f, 0x2a, 0x7d, 0x12, 0xda, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x36, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f,
	0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x51, 0xda,
	0x41, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x42, 0x12, 0x40,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x2a, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x8c, 0x02, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x37, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69,
	0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x22,
	0x8d, 0x01, 0xda, 0x41, 0x1d, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x67, 0x3a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x32, 0x52, 0x2f, 0x76, 0x31,
	0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2f, 0x2a, 0x7d, 0x12,
	0xb9, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63,
	0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x4f, 0xda, 0x41, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x42, 0x2a, 0x40, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x8a, 0x02, 0x0a, 0x15,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68,
	0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x8b, 0x01, 0xda, 0x41, 0x2d,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x2c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x55, 0x3a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x40, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0xc7, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12,
	0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x22, 0x4f, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x42,
	0x12, 0x40, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x2a, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x2f,
	0x2a, 0x7d, 0x12, 0xda, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x36, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e,
	0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x51, 0xda, 0x41,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x42, 0x12, 0x40, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x2a, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12,
	0x8c, 0x02, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63,
	0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x8d,
	0x01, 0xda, 0x41, 0x1d, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x2c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x67, 0x3a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x32, 0x52, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xb9,
	0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x4f, 0xda, 0x41, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x42, 0x2a, 0x40, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x1a, 0x4c, 0xca, 0x41, 0x18, 0x63,
	0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a,
	0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0xc2, 0x01, 0x0a, 0x19, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69,
	0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3b, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x63,
	0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2f, 0x63,
	0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x70, 0x62, 0x3b, 0x63, 0x68, 0x72, 0x6f, 0x6e,
	0x69, 0x63, 0x6c, 0x65, 0x70, 0x62, 0xaa, 0x02, 0x19, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e,
	0x56, 0x31, 0xca, 0x02, 0x19, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5c, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x5c, 0x43, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x5c, 0x56, 0x31, 0xea, 0x02,
	0x1c, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a,
	0x43, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_chronicle_v1_data_access_control_proto_rawDescOnce sync.Once
	file_google_cloud_chronicle_v1_data_access_control_proto_rawDescData = file_google_cloud_chronicle_v1_data_access_control_proto_rawDesc
)

func file_google_cloud_chronicle_v1_data_access_control_proto_rawDescGZIP() []byte {
	file_google_cloud_chronicle_v1_data_access_control_proto_rawDescOnce.Do(func() {
		file_google_cloud_chronicle_v1_data_access_control_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_chronicle_v1_data_access_control_proto_rawDescData)
	})
	return file_google_cloud_chronicle_v1_data_access_control_proto_rawDescData
}

var file_google_cloud_chronicle_v1_data_access_control_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_google_cloud_chronicle_v1_data_access_control_proto_goTypes = []any{
	(*CreateDataAccessLabelRequest)(nil), // 0: google.cloud.chronicle.v1.CreateDataAccessLabelRequest
	(*GetDataAccessLabelRequest)(nil),    // 1: google.cloud.chronicle.v1.GetDataAccessLabelRequest
	(*ListDataAccessLabelsRequest)(nil),  // 2: google.cloud.chronicle.v1.ListDataAccessLabelsRequest
	(*ListDataAccessLabelsResponse)(nil), // 3: google.cloud.chronicle.v1.ListDataAccessLabelsResponse
	(*UpdateDataAccessLabelRequest)(nil), // 4: google.cloud.chronicle.v1.UpdateDataAccessLabelRequest
	(*DeleteDataAccessLabelRequest)(nil), // 5: google.cloud.chronicle.v1.DeleteDataAccessLabelRequest
	(*CreateDataAccessScopeRequest)(nil), // 6: google.cloud.chronicle.v1.CreateDataAccessScopeRequest
	(*GetDataAccessScopeRequest)(nil),    // 7: google.cloud.chronicle.v1.GetDataAccessScopeRequest
	(*ListDataAccessScopesRequest)(nil),  // 8: google.cloud.chronicle.v1.ListDataAccessScopesRequest
	(*ListDataAccessScopesResponse)(nil), // 9: google.cloud.chronicle.v1.ListDataAccessScopesResponse
	(*UpdateDataAccessScopeRequest)(nil), // 10: google.cloud.chronicle.v1.UpdateDataAccessScopeRequest
	(*DeleteDataAccessScopeRequest)(nil), // 11: google.cloud.chronicle.v1.DeleteDataAccessScopeRequest
	(*DataAccessLabel)(nil),              // 12: google.cloud.chronicle.v1.DataAccessLabel
	(*DataAccessScope)(nil),              // 13: google.cloud.chronicle.v1.DataAccessScope
	(*DataAccessLabelReference)(nil),     // 14: google.cloud.chronicle.v1.DataAccessLabelReference
	(*IngestionLabel)(nil),               // 15: google.cloud.chronicle.v1.IngestionLabel
	(*fieldmaskpb.FieldMask)(nil),        // 16: google.protobuf.FieldMask
	(*timestamppb.Timestamp)(nil),        // 17: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                // 18: google.protobuf.Empty
}
var file_google_cloud_chronicle_v1_data_access_control_proto_depIdxs = []int32{
	12, // 0: google.cloud.chronicle.v1.CreateDataAccessLabelRequest.data_access_label:type_name -> google.cloud.chronicle.v1.DataAccessLabel
	12, // 1: google.cloud.chronicle.v1.ListDataAccessLabelsResponse.data_access_labels:type_name -> google.cloud.chronicle.v1.DataAccessLabel
	12, // 2: google.cloud.chronicle.v1.UpdateDataAccessLabelRequest.data_access_label:type_name -> google.cloud.chronicle.v1.DataAccessLabel
	16, // 3: google.cloud.chronicle.v1.UpdateDataAccessLabelRequest.update_mask:type_name -> google.protobuf.FieldMask
	13, // 4: google.cloud.chronicle.v1.CreateDataAccessScopeRequest.data_access_scope:type_name -> google.cloud.chronicle.v1.DataAccessScope
	13, // 5: google.cloud.chronicle.v1.ListDataAccessScopesResponse.data_access_scopes:type_name -> google.cloud.chronicle.v1.DataAccessScope
	13, // 6: google.cloud.chronicle.v1.UpdateDataAccessScopeRequest.data_access_scope:type_name -> google.cloud.chronicle.v1.DataAccessScope
	16, // 7: google.cloud.chronicle.v1.UpdateDataAccessScopeRequest.update_mask:type_name -> google.protobuf.FieldMask
	17, // 8: google.cloud.chronicle.v1.DataAccessLabel.create_time:type_name -> google.protobuf.Timestamp
	17, // 9: google.cloud.chronicle.v1.DataAccessLabel.update_time:type_name -> google.protobuf.Timestamp
	14, // 10: google.cloud.chronicle.v1.DataAccessScope.allowed_data_access_labels:type_name -> google.cloud.chronicle.v1.DataAccessLabelReference
	14, // 11: google.cloud.chronicle.v1.DataAccessScope.denied_data_access_labels:type_name -> google.cloud.chronicle.v1.DataAccessLabelReference
	17, // 12: google.cloud.chronicle.v1.DataAccessScope.create_time:type_name -> google.protobuf.Timestamp
	17, // 13: google.cloud.chronicle.v1.DataAccessScope.update_time:type_name -> google.protobuf.Timestamp
	15, // 14: google.cloud.chronicle.v1.DataAccessLabelReference.ingestion_label:type_name -> google.cloud.chronicle.v1.IngestionLabel
	0,  // 15: google.cloud.chronicle.v1.DataAccessControlService.CreateDataAccessLabel:input_type -> google.cloud.chronicle.v1.CreateDataAccessLabelRequest
	1,  // 16: google.cloud.chronicle.v1.DataAccessControlService.GetDataAccessLabel:input_type -> google.cloud.chronicle.v1.GetDataAccessLabelRequest
	2,  // 17: google.cloud.chronicle.v1.DataAccessControlService.ListDataAccessLabels:input_type -> google.cloud.chronicle.v1.ListDataAccessLabelsRequest
	4,  // 18: google.cloud.chronicle.v1.DataAccessControlService.UpdateDataAccessLabel:input_type -> google.cloud.chronicle.v1.UpdateDataAccessLabelRequest
	5,  // 19: google.cloud.chronicle.v1.DataAccessControlService.DeleteDataAccessLabel:input_type -> google.cloud.chronicle.v1.DeleteDataAccessLabelRequest
	6,  // 20: google.cloud.chronicle.v1.DataAccessControlService.CreateDataAccessScope:input_type -> google.cloud.chronicle.v1.CreateDataAccessScopeRequest
	7,  // 21: google.cloud.chronicle.v1.DataAccessControlService.GetDataAccessScope:input_type -> google.cloud.chronicle.v1.GetDataAccessScopeRequest
	8,  // 22: google.cloud.chronicle.v1.DataAccessControlService.ListDataAccessScopes:input_type -> google.cloud.chronicle.v1.ListDataAccessScopesRequest
	10, // 23: google.cloud.chronicle.v1.DataAccessControlService.UpdateDataAccessScope:input_type -> google.cloud.chronicle.v1.UpdateDataAccessScopeRequest
	11, // 24: google.cloud.chronicle.v1.DataAccessControlService.DeleteDataAccessScope:input_type -> google.cloud.chronicle.v1.DeleteDataAccessScopeRequest
	12, // 25: google.cloud.chronicle.v1.DataAccessControlService.CreateDataAccessLabel:output_type -> google.cloud.chronicle.v1.DataAccessLabel
	12, // 26: google.cloud.chronicle.v1.DataAccessControlService.GetDataAccessLabel:output_type -> google.cloud.chronicle.v1.DataAccessLabel
	3,  // 27: google.cloud.chronicle.v1.DataAccessControlService.ListDataAccessLabels:output_type -> google.cloud.chronicle.v1.ListDataAccessLabelsResponse
	12, // 28: google.cloud.chronicle.v1.DataAccessControlService.UpdateDataAccessLabel:output_type -> google.cloud.chronicle.v1.DataAccessLabel
	18, // 29: google.cloud.chronicle.v1.DataAccessControlService.DeleteDataAccessLabel:output_type -> google.protobuf.Empty
	13, // 30: google.cloud.chronicle.v1.DataAccessControlService.CreateDataAccessScope:output_type -> google.cloud.chronicle.v1.DataAccessScope
	13, // 31: google.cloud.chronicle.v1.DataAccessControlService.GetDataAccessScope:output_type -> google.cloud.chronicle.v1.DataAccessScope
	9,  // 32: google.cloud.chronicle.v1.DataAccessControlService.ListDataAccessScopes:output_type -> google.cloud.chronicle.v1.ListDataAccessScopesResponse
	13, // 33: google.cloud.chronicle.v1.DataAccessControlService.UpdateDataAccessScope:output_type -> google.cloud.chronicle.v1.DataAccessScope
	18, // 34: google.cloud.chronicle.v1.DataAccessControlService.DeleteDataAccessScope:output_type -> google.protobuf.Empty
	25, // [25:35] is the sub-list for method output_type
	15, // [15:25] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_google_cloud_chronicle_v1_data_access_control_proto_init() }
func file_google_cloud_chronicle_v1_data_access_control_proto_init() {
	if File_google_cloud_chronicle_v1_data_access_control_proto != nil {
		return
	}
	file_google_cloud_chronicle_v1_data_access_control_proto_msgTypes[9].OneofWrappers = []any{}
	file_google_cloud_chronicle_v1_data_access_control_proto_msgTypes[12].OneofWrappers = []any{
		(*DataAccessLabel_UdmQuery)(nil),
	}
	file_google_cloud_chronicle_v1_data_access_control_proto_msgTypes[14].OneofWrappers = []any{
		(*DataAccessLabelReference_DataAccessLabel)(nil),
		(*DataAccessLabelReference_LogType)(nil),
		(*DataAccessLabelReference_AssetNamespace)(nil),
		(*DataAccessLabelReference_IngestionLabel)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_chronicle_v1_data_access_control_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_google_cloud_chronicle_v1_data_access_control_proto_goTypes,
		DependencyIndexes: file_google_cloud_chronicle_v1_data_access_control_proto_depIdxs,
		MessageInfos:      file_google_cloud_chronicle_v1_data_access_control_proto_msgTypes,
	}.Build()
	File_google_cloud_chronicle_v1_data_access_control_proto = out.File
	file_google_cloud_chronicle_v1_data_access_control_proto_rawDesc = nil
	file_google_cloud_chronicle_v1_data_access_control_proto_goTypes = nil
	file_google_cloud_chronicle_v1_data_access_control_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DataAccessControlServiceClient is the client API for DataAccessControlService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DataAccessControlServiceClient interface {
	// Creates a data access label.
	// Data access labels are applied to incoming event data and selected in data
	// access scopes (another resource), and only users with scopes containing the
	// label can see data with that label. Currently, the data access label
	// resource only includes custom labels, which are labels that correspond
	// to UDM queries over event data.
	CreateDataAccessLabel(ctx context.Context, in *CreateDataAccessLabelRequest, opts ...grpc.CallOption) (*DataAccessLabel, error)
	// Gets a data access label.
	GetDataAccessLabel(ctx context.Context, in *GetDataAccessLabelRequest, opts ...grpc.CallOption) (*DataAccessLabel, error)
	// Lists all data access labels for the customer.
	ListDataAccessLabels(ctx context.Context, in *ListDataAccessLabelsRequest, opts ...grpc.CallOption) (*ListDataAccessLabelsResponse, error)
	// Updates a data access label.
	UpdateDataAccessLabel(ctx context.Context, in *UpdateDataAccessLabelRequest, opts ...grpc.CallOption) (*DataAccessLabel, error)
	// Deletes a data access label. When a label is deleted, new
	// data that enters in the system will not receive the label, but the label
	// will not be removed from old data that still refers to it.
	DeleteDataAccessLabel(ctx context.Context, in *DeleteDataAccessLabelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Creates a data access scope.
	// Data access scope is a combination of allowed and denied labels attached
	// to a permission group. If a scope has allowed labels A and B and denied
	// labels C and D, then the group of people attached to the scope
	// will have permissions to see all events labeled with A or B (or both) and
	// not labeled with either C or D.
	CreateDataAccessScope(ctx context.Context, in *CreateDataAccessScopeRequest, opts ...grpc.CallOption) (*DataAccessScope, error)
	// Retrieves an existing data access scope.
	GetDataAccessScope(ctx context.Context, in *GetDataAccessScopeRequest, opts ...grpc.CallOption) (*DataAccessScope, error)
	// Lists all existing data access scopes for the customer.
	ListDataAccessScopes(ctx context.Context, in *ListDataAccessScopesRequest, opts ...grpc.CallOption) (*ListDataAccessScopesResponse, error)
	// Updates a data access scope.
	UpdateDataAccessScope(ctx context.Context, in *UpdateDataAccessScopeRequest, opts ...grpc.CallOption) (*DataAccessScope, error)
	// Deletes a data access scope.
	DeleteDataAccessScope(ctx context.Context, in *DeleteDataAccessScopeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type dataAccessControlServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataAccessControlServiceClient(cc grpc.ClientConnInterface) DataAccessControlServiceClient {
	return &dataAccessControlServiceClient{cc}
}

func (c *dataAccessControlServiceClient) CreateDataAccessLabel(ctx context.Context, in *CreateDataAccessLabelRequest, opts ...grpc.CallOption) (*DataAccessLabel, error) {
	out := new(DataAccessLabel)
	err := c.cc.Invoke(ctx, "/google.cloud.chronicle.v1.DataAccessControlService/CreateDataAccessLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataAccessControlServiceClient) GetDataAccessLabel(ctx context.Context, in *GetDataAccessLabelRequest, opts ...grpc.CallOption) (*DataAccessLabel, error) {
	out := new(DataAccessLabel)
	err := c.cc.Invoke(ctx, "/google.cloud.chronicle.v1.DataAccessControlService/GetDataAccessLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataAccessControlServiceClient) ListDataAccessLabels(ctx context.Context, in *ListDataAccessLabelsRequest, opts ...grpc.CallOption) (*ListDataAccessLabelsResponse, error) {
	out := new(ListDataAccessLabelsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.chronicle.v1.DataAccessControlService/ListDataAccessLabels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataAccessControlServiceClient) UpdateDataAccessLabel(ctx context.Context, in *UpdateDataAccessLabelRequest, opts ...grpc.CallOption) (*DataAccessLabel, error) {
	out := new(DataAccessLabel)
	err := c.cc.Invoke(ctx, "/google.cloud.chronicle.v1.DataAccessControlService/UpdateDataAccessLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataAccessControlServiceClient) DeleteDataAccessLabel(ctx context.Context, in *DeleteDataAccessLabelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/google.cloud.chronicle.v1.DataAccessControlService/DeleteDataAccessLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataAccessControlServiceClient) CreateDataAccessScope(ctx context.Context, in *CreateDataAccessScopeRequest, opts ...grpc.CallOption) (*DataAccessScope, error) {
	out := new(DataAccessScope)
	err := c.cc.Invoke(ctx, "/google.cloud.chronicle.v1.DataAccessControlService/CreateDataAccessScope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataAccessControlServiceClient) GetDataAccessScope(ctx context.Context, in *GetDataAccessScopeRequest, opts ...grpc.CallOption) (*DataAccessScope, error) {
	out := new(DataAccessScope)
	err := c.cc.Invoke(ctx, "/google.cloud.chronicle.v1.DataAccessControlService/GetDataAccessScope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataAccessControlServiceClient) ListDataAccessScopes(ctx context.Context, in *ListDataAccessScopesRequest, opts ...grpc.CallOption) (*ListDataAccessScopesResponse, error) {
	out := new(ListDataAccessScopesResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.chronicle.v1.DataAccessControlService/ListDataAccessScopes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataAccessControlServiceClient) UpdateDataAccessScope(ctx context.Context, in *UpdateDataAccessScopeRequest, opts ...grpc.CallOption) (*DataAccessScope, error) {
	out := new(DataAccessScope)
	err := c.cc.Invoke(ctx, "/google.cloud.chronicle.v1.DataAccessControlService/UpdateDataAccessScope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataAccessControlServiceClient) DeleteDataAccessScope(ctx context.Context, in *DeleteDataAccessScopeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/google.cloud.chronicle.v1.DataAccessControlService/DeleteDataAccessScope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataAccessControlServiceServer is the server API for DataAccessControlService service.
type DataAccessControlServiceServer interface {
	// Creates a data access label.
	// Data access labels are applied to incoming event data and selected in data
	// access scopes (another resource), and only users with scopes containing the
	// label can see data with that label. Currently, the data access label
	// resource only includes custom labels, which are labels that correspond
	// to UDM queries over event data.
	CreateDataAccessLabel(context.Context, *CreateDataAccessLabelRequest) (*DataAccessLabel, error)
	// Gets a data access label.
	GetDataAccessLabel(context.Context, *GetDataAccessLabelRequest) (*DataAccessLabel, error)
	// Lists all data access labels for the customer.
	ListDataAccessLabels(context.Context, *ListDataAccessLabelsRequest) (*ListDataAccessLabelsResponse, error)
	// Updates a data access label.
	UpdateDataAccessLabel(context.Context, *UpdateDataAccessLabelRequest) (*DataAccessLabel, error)
	// Deletes a data access label. When a label is deleted, new
	// data that enters in the system will not receive the label, but the label
	// will not be removed from old data that still refers to it.
	DeleteDataAccessLabel(context.Context, *DeleteDataAccessLabelRequest) (*emptypb.Empty, error)
	// Creates a data access scope.
	// Data access scope is a combination of allowed and denied labels attached
	// to a permission group. If a scope has allowed labels A and B and denied
	// labels C and D, then the group of people attached to the scope
	// will have permissions to see all events labeled with A or B (or both) and
	// not labeled with either C or D.
	CreateDataAccessScope(context.Context, *CreateDataAccessScopeRequest) (*DataAccessScope, error)
	// Retrieves an existing data access scope.
	GetDataAccessScope(context.Context, *GetDataAccessScopeRequest) (*DataAccessScope, error)
	// Lists all existing data access scopes for the customer.
	ListDataAccessScopes(context.Context, *ListDataAccessScopesRequest) (*ListDataAccessScopesResponse, error)
	// Updates a data access scope.
	UpdateDataAccessScope(context.Context, *UpdateDataAccessScopeRequest) (*DataAccessScope, error)
	// Deletes a data access scope.
	DeleteDataAccessScope(context.Context, *DeleteDataAccessScopeRequest) (*emptypb.Empty, error)
}

// UnimplementedDataAccessControlServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDataAccessControlServiceServer struct {
}

func (*UnimplementedDataAccessControlServiceServer) CreateDataAccessLabel(context.Context, *CreateDataAccessLabelRequest) (*DataAccessLabel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataAccessLabel not implemented")
}
func (*UnimplementedDataAccessControlServiceServer) GetDataAccessLabel(context.Context, *GetDataAccessLabelRequest) (*DataAccessLabel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataAccessLabel not implemented")
}
func (*UnimplementedDataAccessControlServiceServer) ListDataAccessLabels(context.Context, *ListDataAccessLabelsRequest) (*ListDataAccessLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDataAccessLabels not implemented")
}
func (*UnimplementedDataAccessControlServiceServer) UpdateDataAccessLabel(context.Context, *UpdateDataAccessLabelRequest) (*DataAccessLabel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDataAccessLabel not implemented")
}
func (*UnimplementedDataAccessControlServiceServer) DeleteDataAccessLabel(context.Context, *DeleteDataAccessLabelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataAccessLabel not implemented")
}
func (*UnimplementedDataAccessControlServiceServer) CreateDataAccessScope(context.Context, *CreateDataAccessScopeRequest) (*DataAccessScope, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataAccessScope not implemented")
}
func (*UnimplementedDataAccessControlServiceServer) GetDataAccessScope(context.Context, *GetDataAccessScopeRequest) (*DataAccessScope, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataAccessScope not implemented")
}
func (*UnimplementedDataAccessControlServiceServer) ListDataAccessScopes(context.Context, *ListDataAccessScopesRequest) (*ListDataAccessScopesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDataAccessScopes not implemented")
}
func (*UnimplementedDataAccessControlServiceServer) UpdateDataAccessScope(context.Context, *UpdateDataAccessScopeRequest) (*DataAccessScope, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDataAccessScope not implemented")
}
func (*UnimplementedDataAccessControlServiceServer) DeleteDataAccessScope(context.Context, *DeleteDataAccessScopeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataAccessScope not implemented")
}

func RegisterDataAccessControlServiceServer(s *grpc.Server, srv DataAccessControlServiceServer) {
	s.RegisterService(&_DataAccessControlService_serviceDesc, srv)
}

func _DataAccessControlService_CreateDataAccessLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDataAccessLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataAccessControlServiceServer).CreateDataAccessLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.chronicle.v1.DataAccessControlService/CreateDataAccessLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataAccessControlServiceServer).CreateDataAccessLabel(ctx, req.(*CreateDataAccessLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataAccessControlService_GetDataAccessLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataAccessLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataAccessControlServiceServer).GetDataAccessLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.chronicle.v1.DataAccessControlService/GetDataAccessLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataAccessControlServiceServer).GetDataAccessLabel(ctx, req.(*GetDataAccessLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataAccessControlService_ListDataAccessLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDataAccessLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataAccessControlServiceServer).ListDataAccessLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.chronicle.v1.DataAccessControlService/ListDataAccessLabels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataAccessControlServiceServer).ListDataAccessLabels(ctx, req.(*ListDataAccessLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataAccessControlService_UpdateDataAccessLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDataAccessLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataAccessControlServiceServer).UpdateDataAccessLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.chronicle.v1.DataAccessControlService/UpdateDataAccessLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataAccessControlServiceServer).UpdateDataAccessLabel(ctx, req.(*UpdateDataAccessLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataAccessControlService_DeleteDataAccessLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDataAccessLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataAccessControlServiceServer).DeleteDataAccessLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.chronicle.v1.DataAccessControlService/DeleteDataAccessLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataAccessControlServiceServer).DeleteDataAccessLabel(ctx, req.(*DeleteDataAccessLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataAccessControlService_CreateDataAccessScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDataAccessScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataAccessControlServiceServer).CreateDataAccessScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.chronicle.v1.DataAccessControlService/CreateDataAccessScope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataAccessControlServiceServer).CreateDataAccessScope(ctx, req.(*CreateDataAccessScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataAccessControlService_GetDataAccessScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataAccessScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataAccessControlServiceServer).GetDataAccessScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.chronicle.v1.DataAccessControlService/GetDataAccessScope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataAccessControlServiceServer).GetDataAccessScope(ctx, req.(*GetDataAccessScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataAccessControlService_ListDataAccessScopes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDataAccessScopesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataAccessControlServiceServer).ListDataAccessScopes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.chronicle.v1.DataAccessControlService/ListDataAccessScopes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataAccessControlServiceServer).ListDataAccessScopes(ctx, req.(*ListDataAccessScopesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataAccessControlService_UpdateDataAccessScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDataAccessScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataAccessControlServiceServer).UpdateDataAccessScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.chronicle.v1.DataAccessControlService/UpdateDataAccessScope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataAccessControlServiceServer).UpdateDataAccessScope(ctx, req.(*UpdateDataAccessScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataAccessControlService_DeleteDataAccessScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDataAccessScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataAccessControlServiceServer).DeleteDataAccessScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.chronicle.v1.DataAccessControlService/DeleteDataAccessScope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataAccessControlServiceServer).DeleteDataAccessScope(ctx, req.(*DeleteDataAccessScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DataAccessControlService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.chronicle.v1.DataAccessControlService",
	HandlerType: (*DataAccessControlServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDataAccessLabel",
			Handler:    _DataAccessControlService_CreateDataAccessLabel_Handler,
		},
		{
			MethodName: "GetDataAccessLabel",
			Handler:    _DataAccessControlService_GetDataAccessLabel_Handler,
		},
		{
			MethodName: "ListDataAccessLabels",
			Handler:    _DataAccessControlService_ListDataAccessLabels_Handler,
		},
		{
			MethodName: "UpdateDataAccessLabel",
			Handler:    _DataAccessControlService_UpdateDataAccessLabel_Handler,
		},
		{
			MethodName: "DeleteDataAccessLabel",
			Handler:    _DataAccessControlService_DeleteDataAccessLabel_Handler,
		},
		{
			MethodName: "CreateDataAccessScope",
			Handler:    _DataAccessControlService_CreateDataAccessScope_Handler,
		},
		{
			MethodName: "GetDataAccessScope",
			Handler:    _DataAccessControlService_GetDataAccessScope_Handler,
		},
		{
			MethodName: "ListDataAccessScopes",
			Handler:    _DataAccessControlService_ListDataAccessScopes_Handler,
		},
		{
			MethodName: "UpdateDataAccessScope",
			Handler:    _DataAccessControlService_UpdateDataAccessScope_Handler,
		},
		{
			MethodName: "DeleteDataAccessScope",
			Handler:    _DataAccessControlService_DeleteDataAccessScope_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/chronicle/v1/data_access_control.proto",
}
