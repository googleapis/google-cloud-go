// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/chronicle/v1/entity.proto

package chroniclepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EntityService_GetWatchlist_FullMethodName    = "/google.cloud.chronicle.v1.EntityService/GetWatchlist"
	EntityService_ListWatchlists_FullMethodName  = "/google.cloud.chronicle.v1.EntityService/ListWatchlists"
	EntityService_CreateWatchlist_FullMethodName = "/google.cloud.chronicle.v1.EntityService/CreateWatchlist"
	EntityService_UpdateWatchlist_FullMethodName = "/google.cloud.chronicle.v1.EntityService/UpdateWatchlist"
	EntityService_DeleteWatchlist_FullMethodName = "/google.cloud.chronicle.v1.EntityService/DeleteWatchlist"
)

// EntityServiceClient is the client API for EntityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EntityServiceClient interface {
	// Gets watchlist details for the given watchlist ID.
	GetWatchlist(ctx context.Context, in *GetWatchlistRequest, opts ...grpc.CallOption) (*Watchlist, error)
	// Lists all watchlists for the given instance.
	ListWatchlists(ctx context.Context, in *ListWatchlistsRequest, opts ...grpc.CallOption) (*ListWatchlistsResponse, error)
	// Creates a watchlist for the given instance.
	// Note that there can be at most 200 watchlists per instance.
	CreateWatchlist(ctx context.Context, in *CreateWatchlistRequest, opts ...grpc.CallOption) (*Watchlist, error)
	// Updates the watchlist for the given instance.
	UpdateWatchlist(ctx context.Context, in *UpdateWatchlistRequest, opts ...grpc.CallOption) (*Watchlist, error)
	// Deletes the watchlist for the given instance.
	DeleteWatchlist(ctx context.Context, in *DeleteWatchlistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type entityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEntityServiceClient(cc grpc.ClientConnInterface) EntityServiceClient {
	return &entityServiceClient{cc}
}

func (c *entityServiceClient) GetWatchlist(ctx context.Context, in *GetWatchlistRequest, opts ...grpc.CallOption) (*Watchlist, error) {
	out := new(Watchlist)
	err := c.cc.Invoke(ctx, EntityService_GetWatchlist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) ListWatchlists(ctx context.Context, in *ListWatchlistsRequest, opts ...grpc.CallOption) (*ListWatchlistsResponse, error) {
	out := new(ListWatchlistsResponse)
	err := c.cc.Invoke(ctx, EntityService_ListWatchlists_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) CreateWatchlist(ctx context.Context, in *CreateWatchlistRequest, opts ...grpc.CallOption) (*Watchlist, error) {
	out := new(Watchlist)
	err := c.cc.Invoke(ctx, EntityService_CreateWatchlist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) UpdateWatchlist(ctx context.Context, in *UpdateWatchlistRequest, opts ...grpc.CallOption) (*Watchlist, error) {
	out := new(Watchlist)
	err := c.cc.Invoke(ctx, EntityService_UpdateWatchlist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) DeleteWatchlist(ctx context.Context, in *DeleteWatchlistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, EntityService_DeleteWatchlist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EntityServiceServer is the server API for EntityService service.
// All implementations should embed UnimplementedEntityServiceServer
// for forward compatibility
type EntityServiceServer interface {
	// Gets watchlist details for the given watchlist ID.
	GetWatchlist(context.Context, *GetWatchlistRequest) (*Watchlist, error)
	// Lists all watchlists for the given instance.
	ListWatchlists(context.Context, *ListWatchlistsRequest) (*ListWatchlistsResponse, error)
	// Creates a watchlist for the given instance.
	// Note that there can be at most 200 watchlists per instance.
	CreateWatchlist(context.Context, *CreateWatchlistRequest) (*Watchlist, error)
	// Updates the watchlist for the given instance.
	UpdateWatchlist(context.Context, *UpdateWatchlistRequest) (*Watchlist, error)
	// Deletes the watchlist for the given instance.
	DeleteWatchlist(context.Context, *DeleteWatchlistRequest) (*emptypb.Empty, error)
}

// UnimplementedEntityServiceServer should be embedded to have forward compatible implementations.
type UnimplementedEntityServiceServer struct {
}

func (UnimplementedEntityServiceServer) GetWatchlist(context.Context, *GetWatchlistRequest) (*Watchlist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWatchlist not implemented")
}
func (UnimplementedEntityServiceServer) ListWatchlists(context.Context, *ListWatchlistsRequest) (*ListWatchlistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWatchlists not implemented")
}
func (UnimplementedEntityServiceServer) CreateWatchlist(context.Context, *CreateWatchlistRequest) (*Watchlist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWatchlist not implemented")
}
func (UnimplementedEntityServiceServer) UpdateWatchlist(context.Context, *UpdateWatchlistRequest) (*Watchlist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWatchlist not implemented")
}
func (UnimplementedEntityServiceServer) DeleteWatchlist(context.Context, *DeleteWatchlistRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWatchlist not implemented")
}

// UnsafeEntityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EntityServiceServer will
// result in compilation errors.
type UnsafeEntityServiceServer interface {
	mustEmbedUnimplementedEntityServiceServer()
}

func RegisterEntityServiceServer(s grpc.ServiceRegistrar, srv EntityServiceServer) {
	s.RegisterService(&EntityService_ServiceDesc, srv)
}

func _EntityService_GetWatchlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWatchlistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).GetWatchlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityService_GetWatchlist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).GetWatchlist(ctx, req.(*GetWatchlistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_ListWatchlists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWatchlistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).ListWatchlists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityService_ListWatchlists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).ListWatchlists(ctx, req.(*ListWatchlistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_CreateWatchlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWatchlistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).CreateWatchlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityService_CreateWatchlist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).CreateWatchlist(ctx, req.(*CreateWatchlistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_UpdateWatchlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWatchlistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).UpdateWatchlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityService_UpdateWatchlist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).UpdateWatchlist(ctx, req.(*UpdateWatchlistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_DeleteWatchlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWatchlistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).DeleteWatchlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityService_DeleteWatchlist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).DeleteWatchlist(ctx, req.(*DeleteWatchlistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EntityService_ServiceDesc is the grpc.ServiceDesc for EntityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EntityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.chronicle.v1.EntityService",
	HandlerType: (*EntityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWatchlist",
			Handler:    _EntityService_GetWatchlist_Handler,
		},
		{
			MethodName: "ListWatchlists",
			Handler:    _EntityService_ListWatchlists_Handler,
		},
		{
			MethodName: "CreateWatchlist",
			Handler:    _EntityService_CreateWatchlist_Handler,
		},
		{
			MethodName: "UpdateWatchlist",
			Handler:    _EntityService_UpdateWatchlist_Handler,
		},
		{
			MethodName: "DeleteWatchlist",
			Handler:    _EntityService_DeleteWatchlist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/chronicle/v1/entity.proto",
}
