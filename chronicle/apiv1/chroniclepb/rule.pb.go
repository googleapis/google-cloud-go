// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.3
// source: google/cloud/chronicle/v1/rule.proto

package chroniclepb

import (
	context "context"
	reflect "reflect"
	sync "sync"

	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	interval "google.golang.org/genproto/googleapis/type/interval"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// RunFrequency indicates the run frequency at which a YARA-L 2 rule will run if
// enabled.
type RunFrequency int32

const (
	// The run frequency is unspecified/unknown.
	RunFrequency_RUN_FREQUENCY_UNSPECIFIED RunFrequency = 0
	// Executes in real time.
	RunFrequency_LIVE RunFrequency = 1
	// Executes once per hour.
	RunFrequency_HOURLY RunFrequency = 2
	// Executes once per day.
	RunFrequency_DAILY RunFrequency = 3
)

// Enum value maps for RunFrequency.
var (
	RunFrequency_name = map[int32]string{
		0: "RUN_FREQUENCY_UNSPECIFIED",
		1: "LIVE",
		2: "HOURLY",
		3: "DAILY",
	}
	RunFrequency_value = map[string]int32{
		"RUN_FREQUENCY_UNSPECIFIED": 0,
		"LIVE":                      1,
		"HOURLY":                    2,
		"DAILY":                     3,
	}
)

func (x RunFrequency) Enum() *RunFrequency {
	p := new(RunFrequency)
	*p = x
	return p
}

func (x RunFrequency) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RunFrequency) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_chronicle_v1_rule_proto_enumTypes[0].Descriptor()
}

func (RunFrequency) Type() protoreflect.EnumType {
	return &file_google_cloud_chronicle_v1_rule_proto_enumTypes[0]
}

func (x RunFrequency) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RunFrequency.Descriptor instead.
func (RunFrequency) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_rule_proto_rawDescGZIP(), []int{0}
}

// RuleType indicates the YARA-L rule type of user-created and Google Cloud
// Threat Intelligence (GCTI) authored rules.
type RuleType int32

const (
	// The rule type is unspecified/unknown.
	RuleType_RULE_TYPE_UNSPECIFIED RuleType = 0
	// Rule checks for the existence of a single event.
	RuleType_SINGLE_EVENT RuleType = 1
	// Rule checks for correlation between multiple events
	RuleType_MULTI_EVENT RuleType = 2
)

// Enum value maps for RuleType.
var (
	RuleType_name = map[int32]string{
		0: "RULE_TYPE_UNSPECIFIED",
		1: "SINGLE_EVENT",
		2: "MULTI_EVENT",
	}
	RuleType_value = map[string]int32{
		"RULE_TYPE_UNSPECIFIED": 0,
		"SINGLE_EVENT":          1,
		"MULTI_EVENT":           2,
	}
)

func (x RuleType) Enum() *RuleType {
	p := new(RuleType)
	*p = x
	return p
}

func (x RuleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RuleType) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_chronicle_v1_rule_proto_enumTypes[1].Descriptor()
}

func (RuleType) Type() protoreflect.EnumType {
	return &file_google_cloud_chronicle_v1_rule_proto_enumTypes[1]
}

func (x RuleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RuleType.Descriptor instead.
func (RuleType) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_rule_proto_rawDescGZIP(), []int{1}
}

// RuleView indicates the scope of fields to populate when returning the Rule
// resource.
type RuleView int32

const (
	// The default/unset value.
	// The API will default to the BASIC view for ListRules/ListRuleRevisions.
	// The API will default to the FULL view for GetRule.
	RuleView_RULE_VIEW_UNSPECIFIED RuleView = 0
	// Include basic metadata about the rule, but not the full contents.
	// Returned fields include: revision_id, revision_create_time, display_name,
	// author, severity, type, allowed_run_frequency,
	// near_real_time_live_rule_eligible, etag, and scope.
	// This is the default value for ListRules and ListRuleRevisions.
	RuleView_BASIC RuleView = 1
	// Include all fields.
	// This is the default value for GetRule.
	RuleView_FULL RuleView = 2
	// Include basic metadata about the rule's revision only.
	// Returned fields include: revision_id and revision_create_time.
	RuleView_REVISION_METADATA_ONLY RuleView = 3
)

// Enum value maps for RuleView.
var (
	RuleView_name = map[int32]string{
		0: "RULE_VIEW_UNSPECIFIED",
		1: "BASIC",
		2: "FULL",
		3: "REVISION_METADATA_ONLY",
	}
	RuleView_value = map[string]int32{
		"RULE_VIEW_UNSPECIFIED":  0,
		"BASIC":                  1,
		"FULL":                   2,
		"REVISION_METADATA_ONLY": 3,
	}
)

func (x RuleView) Enum() *RuleView {
	p := new(RuleView)
	*p = x
	return p
}

func (x RuleView) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RuleView) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_chronicle_v1_rule_proto_enumTypes[2].Descriptor()
}

func (RuleView) Type() protoreflect.EnumType {
	return &file_google_cloud_chronicle_v1_rule_proto_enumTypes[2]
}

func (x RuleView) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RuleView.Descriptor instead.
func (RuleView) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_rule_proto_rawDescGZIP(), []int{2}
}

// The current compilation state of the rule.
type Rule_CompilationState int32

const (
	// The compilation state is unspecified/unknown.
	Rule_COMPILATION_STATE_UNSPECIFIED Rule_CompilationState = 0
	// The Rule can successfully compile.
	Rule_SUCCEEDED Rule_CompilationState = 1
	// The Rule cannot successfully compile.
	// This is possible if a backwards-incompatible change was made to the
	// compiler.
	Rule_FAILED Rule_CompilationState = 2
)

// Enum value maps for Rule_CompilationState.
var (
	Rule_CompilationState_name = map[int32]string{
		0: "COMPILATION_STATE_UNSPECIFIED",
		1: "SUCCEEDED",
		2: "FAILED",
	}
	Rule_CompilationState_value = map[string]int32{
		"COMPILATION_STATE_UNSPECIFIED": 0,
		"SUCCEEDED":                     1,
		"FAILED":                        2,
	}
)

func (x Rule_CompilationState) Enum() *Rule_CompilationState {
	p := new(Rule_CompilationState)
	*p = x
	return p
}

func (x Rule_CompilationState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Rule_CompilationState) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_chronicle_v1_rule_proto_enumTypes[3].Descriptor()
}

func (Rule_CompilationState) Type() protoreflect.EnumType {
	return &file_google_cloud_chronicle_v1_rule_proto_enumTypes[3]
}

func (x Rule_CompilationState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Rule_CompilationState.Descriptor instead.
func (Rule_CompilationState) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_rule_proto_rawDescGZIP(), []int{0, 0}
}

// The possible execution states the rule deployment can be in.
type RuleDeployment_ExecutionState int32

const (
	// Unspecified or unknown execution state.
	RuleDeployment_EXECUTION_STATE_UNSPECIFIED RuleDeployment_ExecutionState = 0
	// Default execution state.
	RuleDeployment_DEFAULT RuleDeployment_ExecutionState = 1
	// Rules in limited state may not have their executions guaranteed.
	RuleDeployment_LIMITED RuleDeployment_ExecutionState = 2
	// Paused rules are not executed at all.
	RuleDeployment_PAUSED RuleDeployment_ExecutionState = 3
)

// Enum value maps for RuleDeployment_ExecutionState.
var (
	RuleDeployment_ExecutionState_name = map[int32]string{
		0: "EXECUTION_STATE_UNSPECIFIED",
		1: "DEFAULT",
		2: "LIMITED",
		3: "PAUSED",
	}
	RuleDeployment_ExecutionState_value = map[string]int32{
		"EXECUTION_STATE_UNSPECIFIED": 0,
		"DEFAULT":                     1,
		"LIMITED":                     2,
		"PAUSED":                      3,
	}
)

func (x RuleDeployment_ExecutionState) Enum() *RuleDeployment_ExecutionState {
	p := new(RuleDeployment_ExecutionState)
	*p = x
	return p
}

func (x RuleDeployment_ExecutionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RuleDeployment_ExecutionState) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_chronicle_v1_rule_proto_enumTypes[4].Descriptor()
}

func (RuleDeployment_ExecutionState) Type() protoreflect.EnumType {
	return &file_google_cloud_chronicle_v1_rule_proto_enumTypes[4]
}

func (x RuleDeployment_ExecutionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RuleDeployment_ExecutionState.Descriptor instead.
func (RuleDeployment_ExecutionState) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_rule_proto_rawDescGZIP(), []int{1, 0}
}

// The possible states a retrohunt can be in.
type Retrohunt_State int32

const (
	// Unspecified or unknown retrohunt state.
	Retrohunt_STATE_UNSPECIFIED Retrohunt_State = 0
	// Running state.
	Retrohunt_RUNNING Retrohunt_State = 1
	// Done state.
	Retrohunt_DONE Retrohunt_State = 2
	// Cancelled state.
	Retrohunt_CANCELLED Retrohunt_State = 3
	// Failed state.
	Retrohunt_FAILED Retrohunt_State = 4
)

// Enum value maps for Retrohunt_State.
var (
	Retrohunt_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "RUNNING",
		2: "DONE",
		3: "CANCELLED",
		4: "FAILED",
	}
	Retrohunt_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"RUNNING":           1,
		"DONE":              2,
		"CANCELLED":         3,
		"FAILED":            4,
	}
)

func (x Retrohunt_State) Enum() *Retrohunt_State {
	p := new(Retrohunt_State)
	*p = x
	return p
}

func (x Retrohunt_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Retrohunt_State) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_chronicle_v1_rule_proto_enumTypes[5].Descriptor()
}

func (Retrohunt_State) Type() protoreflect.EnumType {
	return &file_google_cloud_chronicle_v1_rule_proto_enumTypes[5]
}

func (x Retrohunt_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Retrohunt_State.Descriptor instead.
func (Retrohunt_State) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_rule_proto_rawDescGZIP(), []int{2, 0}
}

// The severity level of the compilation diagnostic.
type CompilationDiagnostic_Severity int32

const (
	// An unspecified severity level.
	CompilationDiagnostic_SEVERITY_UNSPECIFIED CompilationDiagnostic_Severity = 0
	// A compilation warning.
	CompilationDiagnostic_WARNING CompilationDiagnostic_Severity = 1
	// A compilation error.
	CompilationDiagnostic_ERROR CompilationDiagnostic_Severity = 2
)

// Enum value maps for CompilationDiagnostic_Severity.
var (
	CompilationDiagnostic_Severity_name = map[int32]string{
		0: "SEVERITY_UNSPECIFIED",
		1: "WARNING",
		2: "ERROR",
	}
	CompilationDiagnostic_Severity_value = map[string]int32{
		"SEVERITY_UNSPECIFIED": 0,
		"WARNING":              1,
		"ERROR":                2,
	}
)

func (x CompilationDiagnostic_Severity) Enum() *CompilationDiagnostic_Severity {
	p := new(CompilationDiagnostic_Severity)
	*p = x
	return p
}

func (x CompilationDiagnostic_Severity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompilationDiagnostic_Severity) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_chronicle_v1_rule_proto_enumTypes[6].Descriptor()
}

func (CompilationDiagnostic_Severity) Type() protoreflect.EnumType {
	return &file_google_cloud_chronicle_v1_rule_proto_enumTypes[6]
}

func (x CompilationDiagnostic_Severity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompilationDiagnostic_Severity.Descriptor instead.
func (CompilationDiagnostic_Severity) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_rule_proto_rawDescGZIP(), []int{20, 0}
}

// The Rule resource represents a user-created rule.
// NEXT TAG: 21
type Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier. Full resource name for the rule.
	// Format:
	// `projects/{project}/locations/{location}/instances/{instance}/rules/{rule}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. The revision ID of the rule.
	// A new revision is created whenever the rule text is changed in any way.
	// Format: `v_{10 digits}_{9 digits}`
	// Populated in REVISION_METADATA_ONLY view and FULL view.
	RevisionId string `protobuf:"bytes,2,opt,name=revision_id,json=revisionId,proto3" json:"revision_id,omitempty"`
	// Output only. Display name of the rule.
	// Populated in BASIC view and FULL view.
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// The YARA-L content of the rule.
	// Populated in FULL view.
	Text string `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	// Output only. The author of the rule. Extracted from the meta section of
	// text. Populated in BASIC view and FULL view.
	Author string `protobuf:"bytes,5,opt,name=author,proto3" json:"author,omitempty"`
	// Output only. The severity of the rule as specified in the meta section of
	// text. Populated in BASIC view and FULL view.
	Severity *Severity `protobuf:"bytes,6,opt,name=severity,proto3" json:"severity,omitempty"`
	// Output only. Additional metadata specified in the meta section of text.
	// Populated in FULL view.
	Metadata map[string]string `protobuf:"bytes,7,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Output only. The timestamp of when the rule was created.
	// Populated in FULL view.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The timestamp of when the rule revision was created.
	// Populated in FULL, REVISION_METADATA_ONLY views.
	RevisionCreateTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=revision_create_time,json=revisionCreateTime,proto3" json:"revision_create_time,omitempty"`
	// Output only. The current compilation state of the rule.
	// Populated in FULL view.
	CompilationState Rule_CompilationState `protobuf:"varint,10,opt,name=compilation_state,json=compilationState,proto3,enum=google.cloud.chronicle.v1.Rule_CompilationState" json:"compilation_state,omitempty"`
	// Output only. User-facing type of the rule. Extracted from the events
	// section of rule text. Populated in BASIC view and FULL view.
	Type RuleType `protobuf:"varint,12,opt,name=type,proto3,enum=google.cloud.chronicle.v1.RuleType" json:"type,omitempty"`
	// Output only. Resource names of the reference lists used in this rule.
	// Populated in FULL view.
	ReferenceLists []string `protobuf:"bytes,13,rep,name=reference_lists,json=referenceLists,proto3" json:"reference_lists,omitempty"`
	// Output only. The run frequencies that are allowed for the rule.
	// Populated in BASIC view and FULL view.
	AllowedRunFrequencies []RunFrequency `protobuf:"varint,14,rep,packed,name=allowed_run_frequencies,json=allowedRunFrequencies,proto3,enum=google.cloud.chronicle.v1.RunFrequency" json:"allowed_run_frequencies,omitempty"`
	// The etag for this rule.
	// If this is provided on update, the request will succeed if and only if it
	// matches the server-computed value, and will fail with an ABORTED error
	// otherwise.
	// Populated in BASIC view and FULL view.
	Etag string `protobuf:"bytes,15,opt,name=etag,proto3" json:"etag,omitempty"`
	// Resource name of the DataAccessScope bound to this rule.
	// Populated in BASIC view and FULL view.
	// If reference lists are used in the rule, validations will be performed
	// against this scope to ensure that the reference lists are compatible with
	// both the user's and the rule's scopes.
	// The scope should be in the format:
	// `projects/{project}/locations/{location}/instances/{instance}/dataAccessScopes/{scope}`.
	Scope string `protobuf:"bytes,16,opt,name=scope,proto3" json:"scope,omitempty"`
	// Output only. A list of a rule's corresponding compilation diagnostic
	// messages such as compilation errors and compilation warnings. Populated in
	// FULL view.
	CompilationDiagnostics []*CompilationDiagnostic `protobuf:"bytes,17,rep,name=compilation_diagnostics,json=compilationDiagnostics,proto3" json:"compilation_diagnostics,omitempty"`
	// Output only. Indicate the rule can run in near real time live rule.
	// If this is true, the rule uses the near real time live rule when the run
	// frequency is set to LIVE.
	NearRealTimeLiveRuleEligible bool `protobuf:"varint,18,opt,name=near_real_time_live_rule_eligible,json=nearRealTimeLiveRuleEligible,proto3" json:"near_real_time_live_rule_eligible,omitempty"`
	// Output only. The set of inputs used in the rule. For example, if the rule
	// uses $e.principal.hostname, then the uses_udm field will be true.
	InputsUsed *InputsUsed `protobuf:"bytes,20,opt,name=inputs_used,json=inputsUsed,proto3" json:"inputs_used,omitempty"`
}

func (x *Rule) Reset() {
	*x = Rule{}
	mi := &file_google_cloud_chronicle_v1_rule_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule) ProtoMessage() {}

func (x *Rule) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_rule_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule.ProtoReflect.Descriptor instead.
func (*Rule) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_rule_proto_rawDescGZIP(), []int{0}
}

func (x *Rule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Rule) GetRevisionId() string {
	if x != nil {
		return x.RevisionId
	}
	return ""
}

func (x *Rule) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Rule) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Rule) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *Rule) GetSeverity() *Severity {
	if x != nil {
		return x.Severity
	}
	return nil
}

func (x *Rule) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Rule) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Rule) GetRevisionCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.RevisionCreateTime
	}
	return nil
}

func (x *Rule) GetCompilationState() Rule_CompilationState {
	if x != nil {
		return x.CompilationState
	}
	return Rule_COMPILATION_STATE_UNSPECIFIED
}

func (x *Rule) GetType() RuleType {
	if x != nil {
		return x.Type
	}
	return RuleType_RULE_TYPE_UNSPECIFIED
}

func (x *Rule) GetReferenceLists() []string {
	if x != nil {
		return x.ReferenceLists
	}
	return nil
}

func (x *Rule) GetAllowedRunFrequencies() []RunFrequency {
	if x != nil {
		return x.AllowedRunFrequencies
	}
	return nil
}

func (x *Rule) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *Rule) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *Rule) GetCompilationDiagnostics() []*CompilationDiagnostic {
	if x != nil {
		return x.CompilationDiagnostics
	}
	return nil
}

func (x *Rule) GetNearRealTimeLiveRuleEligible() bool {
	if x != nil {
		return x.NearRealTimeLiveRuleEligible
	}
	return false
}

func (x *Rule) GetInputsUsed() *InputsUsed {
	if x != nil {
		return x.InputsUsed
	}
	return nil
}

// The RuleDeployment resource represents the deployment state of a Rule.
type RuleDeployment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The resource name of the rule deployment.
	// Note that RuleDeployment is a child of the overall Rule, not any individual
	// revision, so the resource ID segment for the Rule resource must not
	// reference a specific revision.
	// Format:
	// `projects/{project}/locations/{location}/instances/{instance}/rules/{rule}/deployment`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Whether the rule is currently deployed continuously against incoming data.
	Enabled bool `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Whether detections resulting from this deployment should be considered
	// alerts.
	Alerting bool `protobuf:"varint,3,opt,name=alerting,proto3" json:"alerting,omitempty"`
	// The archive state of the rule deployment.
	// Cannot be set to true unless enabled is set to false.
	// If set to true, alerting will automatically be set to false.
	// If currently set to true, enabled, alerting, and run_frequency cannot be
	// updated.
	Archived bool `protobuf:"varint,4,opt,name=archived,proto3" json:"archived,omitempty"`
	// Output only. The timestamp when the rule deployment archive state was last
	// set to true. If the rule deployment's current archive state is not set to
	// true, the field will be empty.
	ArchiveTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=archive_time,json=archiveTime,proto3" json:"archive_time,omitempty"`
	// The run frequency of the rule deployment.
	RunFrequency RunFrequency `protobuf:"varint,6,opt,name=run_frequency,json=runFrequency,proto3,enum=google.cloud.chronicle.v1.RunFrequency" json:"run_frequency,omitempty"`
	// Output only. The execution state of the rule deployment.
	ExecutionState RuleDeployment_ExecutionState `protobuf:"varint,7,opt,name=execution_state,json=executionState,proto3,enum=google.cloud.chronicle.v1.RuleDeployment_ExecutionState" json:"execution_state,omitempty"`
	// Output only. The names of the associated/chained producer rules. Rules are
	// considered producers for this rule if this rule explicitly filters on their
	// ruleid. Format:
	// `projects/{project}/locations/{location}/instances/{instance}/rules/{rule}`
	ProducerRules []string `protobuf:"bytes,8,rep,name=producer_rules,json=producerRules,proto3" json:"producer_rules,omitempty"`
	// Output only. The names of the associated/chained consumer rules. Rules are
	// considered consumers of this rule if their rule text explicitly filters on
	// this rule's ruleid. Format:
	// `projects/{project}/locations/{location}/instances/{instance}/rules/{rule}`
	ConsumerRules []string `protobuf:"bytes,9,rep,name=consumer_rules,json=consumerRules,proto3" json:"consumer_rules,omitempty"`
	// Output only. The timestamp when the rule deployment alert state was lastly
	// changed. This is filled regardless of the current alert state. E.g. if the
	// current alert status is false, this timestamp will be the timestamp when
	// the alert status was changed to false.
	LastAlertStatusChangeTime *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=last_alert_status_change_time,json=lastAlertStatusChangeTime,proto3" json:"last_alert_status_change_time,omitempty"`
}

func (x *RuleDeployment) Reset() {
	*x = RuleDeployment{}
	mi := &file_google_cloud_chronicle_v1_rule_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RuleDeployment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleDeployment) ProtoMessage() {}

func (x *RuleDeployment) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_rule_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleDeployment.ProtoReflect.Descriptor instead.
func (*RuleDeployment) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_rule_proto_rawDescGZIP(), []int{1}
}

func (x *RuleDeployment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RuleDeployment) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *RuleDeployment) GetAlerting() bool {
	if x != nil {
		return x.Alerting
	}
	return false
}

func (x *RuleDeployment) GetArchived() bool {
	if x != nil {
		return x.Archived
	}
	return false
}

func (x *RuleDeployment) GetArchiveTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchiveTime
	}
	return nil
}

func (x *RuleDeployment) GetRunFrequency() RunFrequency {
	if x != nil {
		return x.RunFrequency
	}
	return RunFrequency_RUN_FREQUENCY_UNSPECIFIED
}

func (x *RuleDeployment) GetExecutionState() RuleDeployment_ExecutionState {
	if x != nil {
		return x.ExecutionState
	}
	return RuleDeployment_EXECUTION_STATE_UNSPECIFIED
}

func (x *RuleDeployment) GetProducerRules() []string {
	if x != nil {
		return x.ProducerRules
	}
	return nil
}

func (x *RuleDeployment) GetConsumerRules() []string {
	if x != nil {
		return x.ConsumerRules
	}
	return nil
}

func (x *RuleDeployment) GetLastAlertStatusChangeTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastAlertStatusChangeTime
	}
	return nil
}

// Retrohunt is an execution of a Rule over a time range in the past.
type Retrohunt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the retrohunt.
	// Retrohunt is the child of a rule revision. {rule} in the format below is
	// structured as {rule_id@revision_id}.
	// Format:
	// `projects/{project}/locations/{location}/instances/{instance}/rules/{rule}/retrohunts/{retrohunt}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Required. The start and end time of the event time range this retrohunt
	// processes.
	ProcessInterval *interval.Interval `protobuf:"bytes,2,opt,name=process_interval,json=processInterval,proto3" json:"process_interval,omitempty"`
	// Output only. The start and end time of the retrohunt execution. If the
	// retrohunt is not yet finished, the end time of the interval will not be
	// populated.
	ExecutionInterval *interval.Interval `protobuf:"bytes,3,opt,name=execution_interval,json=executionInterval,proto3" json:"execution_interval,omitempty"`
	// Output only. The state of the retrohunt.
	State Retrohunt_State `protobuf:"varint,4,opt,name=state,proto3,enum=google.cloud.chronicle.v1.Retrohunt_State" json:"state,omitempty"`
	// Output only. Percent progress of the retrohunt towards completion, from
	// 0.00 to 100.00.
	ProgressPercentage float32 `protobuf:"fixed32,5,opt,name=progress_percentage,json=progressPercentage,proto3" json:"progress_percentage,omitempty"`
}

func (x *Retrohunt) Reset() {
	*x = Retrohunt{}
	mi := &file_google_cloud_chronicle_v1_rule_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Retrohunt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Retrohunt) ProtoMessage() {}

func (x *Retrohunt) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_rule_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Retrohunt.ProtoReflect.Descriptor instead.
func (*Retrohunt) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_rule_proto_rawDescGZIP(), []int{2}
}

func (x *Retrohunt) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Retrohunt) GetProcessInterval() *interval.Interval {
	if x != nil {
		return x.ProcessInterval
	}
	return nil
}

func (x *Retrohunt) GetExecutionInterval() *interval.Interval {
	if x != nil {
		return x.ExecutionInterval
	}
	return nil
}

func (x *Retrohunt) GetState() Retrohunt_State {
	if x != nil {
		return x.State
	}
	return Retrohunt_STATE_UNSPECIFIED
}

func (x *Retrohunt) GetProgressPercentage() float32 {
	if x != nil {
		return x.ProgressPercentage
	}
	return 0
}

// Request message for CreateRule method.
type CreateRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent resource where this rule will be created.
	// Format: `projects/{project}/locations/{location}/instances/{instance}`
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Required. The rule to create.
	Rule *Rule `protobuf:"bytes,2,opt,name=rule,proto3" json:"rule,omitempty"`
}

func (x *CreateRuleRequest) Reset() {
	*x = CreateRuleRequest{}
	mi := &file_google_cloud_chronicle_v1_rule_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRuleRequest) ProtoMessage() {}

func (x *CreateRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_rule_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRuleRequest.ProtoReflect.Descriptor instead.
func (*CreateRuleRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_rule_proto_rawDescGZIP(), []int{3}
}

func (x *CreateRuleRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateRuleRequest) GetRule() *Rule {
	if x != nil {
		return x.Rule
	}
	return nil
}

// Request message for GetRule method.
type GetRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the rule to retrieve.
	// Format:
	// `projects/{project}/locations/{location}/instances/{instance}/rules/{rule}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The view field indicates the scope of fields to populate for the Rule being
	// returned. If unspecified, defaults to FULL.
	View RuleView `protobuf:"varint,2,opt,name=view,proto3,enum=google.cloud.chronicle.v1.RuleView" json:"view,omitempty"`
}

func (x *GetRuleRequest) Reset() {
	*x = GetRuleRequest{}
	mi := &file_google_cloud_chronicle_v1_rule_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRuleRequest) ProtoMessage() {}

func (x *GetRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_rule_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRuleRequest.ProtoReflect.Descriptor instead.
func (*GetRuleRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_rule_proto_rawDescGZIP(), []int{4}
}

func (x *GetRuleRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetRuleRequest) GetView() RuleView {
	if x != nil {
		return x.View
	}
	return RuleView_RULE_VIEW_UNSPECIFIED
}

// Request message for ListRules method.
type ListRulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent, which owns this collection of rules.
	// Format:
	// `projects/{project}/locations/{location}/instances/{instance}`
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The maximum number of rules to return. The service may return fewer than
	// this value. If unspecified, at most 100 rules will be returned. The
	// maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListRules` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListRules`
	// must match the call that provided the page token.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// view indicates the scope of fields to populate for the Rule being returned.
	// If unspecified, defaults to BASIC.
	View RuleView `protobuf:"varint,4,opt,name=view,proto3,enum=google.cloud.chronicle.v1.RuleView" json:"view,omitempty"`
	// Only the following filters are allowed:
	// "reference_lists:{reference_list_name}"
	// "data_tables:{data_table_name}"
	// "display_name:{display_name}"
	Filter string `protobuf:"bytes,5,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListRulesRequest) Reset() {
	*x = ListRulesRequest{}
	mi := &file_google_cloud_chronicle_v1_rule_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRulesRequest) ProtoMessage() {}

func (x *ListRulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_rule_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRulesRequest.ProtoReflect.Descriptor instead.
func (*ListRulesRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_rule_proto_rawDescGZIP(), []int{5}
}

func (x *ListRulesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListRulesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRulesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListRulesRequest) GetView() RuleView {
	if x != nil {
		return x.View
	}
	return RuleView_RULE_VIEW_UNSPECIFIED
}

func (x *ListRulesRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// Response message for ListRules method.
type ListRulesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The rules from the specified instance.
	Rules []*Rule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListRulesResponse) Reset() {
	*x = ListRulesResponse{}
	mi := &file_google_cloud_chronicle_v1_rule_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRulesResponse) ProtoMessage() {}

func (x *ListRulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_rule_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRulesResponse.ProtoReflect.Descriptor instead.
func (*ListRulesResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_rule_proto_rawDescGZIP(), []int{6}
}

func (x *ListRulesResponse) GetRules() []*Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *ListRulesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Request message for UpdateRule method.
type UpdateRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The rule to update.
	//
	// The rule's `name` field is used to identify the rule to update.
	// Format:
	// `projects/{project}/locations/{location}/instances/{instance}/rules/{rule}`
	Rule *Rule `protobuf:"bytes,1,opt,name=rule,proto3" json:"rule,omitempty"`
	// The list of fields to update. If not included, all fields with a non-empty
	// value will be overwritten.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateRuleRequest) Reset() {
	*x = UpdateRuleRequest{}
	mi := &file_google_cloud_chronicle_v1_rule_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRuleRequest) ProtoMessage() {}

func (x *UpdateRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_rule_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRuleRequest.ProtoReflect.Descriptor instead.
func (*UpdateRuleRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_rule_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateRuleRequest) GetRule() *Rule {
	if x != nil {
		return x.Rule
	}
	return nil
}

func (x *UpdateRuleRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// Request message for the DeleteRule method.
type DeleteRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the rule to delete. A rule revision timestamp cannot
	// be specified as part of the name, as deleting specific revisions is not
	// supported.
	// Format:
	// `projects/{project}/locations/{location}/instances/{instance}/rules/{rule}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. If set to true, any retrohunts and any detections associated with
	// the rule will also be deleted. If set to false, the call will only succeed
	// if the rule has no associated retrohunts, including completed retrohunts,
	// and no associated detections. Regardless of this field's value, the rule
	// deployment associated with this rule will also be deleted.
	Force bool `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *DeleteRuleRequest) Reset() {
	*x = DeleteRuleRequest{}
	mi := &file_google_cloud_chronicle_v1_rule_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRuleRequest) ProtoMessage() {}

func (x *DeleteRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_rule_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRuleRequest.ProtoReflect.Descriptor instead.
func (*DeleteRuleRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_rule_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteRuleRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteRuleRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

// Request message for ListRuleRevisions method.
type ListRuleRevisionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the rule to list revisions for.
	// Format:
	// `projects/{project}/locations/{location}/instances/{instance}/rules/{rule}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The maximum number of revisions to return per page. The service may return
	// fewer than this value. If unspecified, at most 100 revisions will be
	// returned. The maximum value is 1000; values above 1000 will be coerced to
	// 1000.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The page token, received from a previous `ListRuleRevisions` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListRuleRevisions`
	// must match the call that provided the page token.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// The view field indicates the scope of fields to populate for the revision
	// being returned. If unspecified, defaults to BASIC.
	View RuleView `protobuf:"varint,4,opt,name=view,proto3,enum=google.cloud.chronicle.v1.RuleView" json:"view,omitempty"`
}

func (x *ListRuleRevisionsRequest) Reset() {
	*x = ListRuleRevisionsRequest{}
	mi := &file_google_cloud_chronicle_v1_rule_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRuleRevisionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRuleRevisionsRequest) ProtoMessage() {}

func (x *ListRuleRevisionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_rule_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRuleRevisionsRequest.ProtoReflect.Descriptor instead.
func (*ListRuleRevisionsRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_rule_proto_rawDescGZIP(), []int{9}
}

func (x *ListRuleRevisionsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListRuleRevisionsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRuleRevisionsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListRuleRevisionsRequest) GetView() RuleView {
	if x != nil {
		return x.View
	}
	return RuleView_RULE_VIEW_UNSPECIFIED
}

// Response message for ListRuleRevisions method.
type ListRuleRevisionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The revisions of the rule.
	Rules []*Rule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
	// A token that can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListRuleRevisionsResponse) Reset() {
	*x = ListRuleRevisionsResponse{}
	mi := &file_google_cloud_chronicle_v1_rule_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRuleRevisionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRuleRevisionsResponse) ProtoMessage() {}

func (x *ListRuleRevisionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_rule_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRuleRevisionsResponse.ProtoReflect.Descriptor instead.
func (*ListRuleRevisionsResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_rule_proto_rawDescGZIP(), []int{10}
}

func (x *ListRuleRevisionsResponse) GetRules() []*Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *ListRuleRevisionsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Request message for CreateRetrohunt method.
type CreateRetrohuntRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent of retrohunt, which is a rule.
	// Format:
	// `projects/{project}/locations/{location}/instances/{instance}/rules/{rule}`
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Required. The retrohunt to create.
	Retrohunt *Retrohunt `protobuf:"bytes,2,opt,name=retrohunt,proto3" json:"retrohunt,omitempty"`
}

func (x *CreateRetrohuntRequest) Reset() {
	*x = CreateRetrohuntRequest{}
	mi := &file_google_cloud_chronicle_v1_rule_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRetrohuntRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRetrohuntRequest) ProtoMessage() {}

func (x *CreateRetrohuntRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_rule_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRetrohuntRequest.ProtoReflect.Descriptor instead.
func (*CreateRetrohuntRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_rule_proto_rawDescGZIP(), []int{11}
}

func (x *CreateRetrohuntRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateRetrohuntRequest) GetRetrohunt() *Retrohunt {
	if x != nil {
		return x.Retrohunt
	}
	return nil
}

// Request message for GetRetrohunt method.
type GetRetrohuntRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the retrohunt to retrieve.
	// Format:
	// `projects/{project}/locations/{location}/instances/{instance}/rules/{rule}/retrohunts/{retrohunt}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetRetrohuntRequest) Reset() {
	*x = GetRetrohuntRequest{}
	mi := &file_google_cloud_chronicle_v1_rule_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRetrohuntRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRetrohuntRequest) ProtoMessage() {}

func (x *GetRetrohuntRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_rule_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRetrohuntRequest.ProtoReflect.Descriptor instead.
func (*GetRetrohuntRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_rule_proto_rawDescGZIP(), []int{12}
}

func (x *GetRetrohuntRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Request message for ListRetrohunts method.
type ListRetrohuntsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The rule that the retrohunts belong to.
	// Format:
	// `projects/{project}/locations/{location}/instances/{instance}/rules/{rule}`
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The maximum number of retrohunt to return. The service may return fewer
	// than this value. If unspecified, at most 100 retrohunts will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to
	// 1000.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListRetrohunts` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListRetrohunts` must
	// match the call that provided the page token.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// A filter that can be used to retrieve specific rule deployments.
	// The following fields are filterable:
	// state
	Filter string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListRetrohuntsRequest) Reset() {
	*x = ListRetrohuntsRequest{}
	mi := &file_google_cloud_chronicle_v1_rule_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRetrohuntsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRetrohuntsRequest) ProtoMessage() {}

func (x *ListRetrohuntsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_rule_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRetrohuntsRequest.ProtoReflect.Descriptor instead.
func (*ListRetrohuntsRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_rule_proto_rawDescGZIP(), []int{13}
}

func (x *ListRetrohuntsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListRetrohuntsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRetrohuntsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListRetrohuntsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// Response message for ListRetrohunts method.
type ListRetrohuntsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The retrohunts from the specified rule.
	Retrohunts []*Retrohunt `protobuf:"bytes,1,rep,name=retrohunts,proto3" json:"retrohunts,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListRetrohuntsResponse) Reset() {
	*x = ListRetrohuntsResponse{}
	mi := &file_google_cloud_chronicle_v1_rule_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRetrohuntsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRetrohuntsResponse) ProtoMessage() {}

func (x *ListRetrohuntsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_rule_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRetrohuntsResponse.ProtoReflect.Descriptor instead.
func (*ListRetrohuntsResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_rule_proto_rawDescGZIP(), []int{14}
}

func (x *ListRetrohuntsResponse) GetRetrohunts() []*Retrohunt {
	if x != nil {
		return x.Retrohunts
	}
	return nil
}

func (x *ListRetrohuntsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Request message for GetRuleDeployment.
type GetRuleDeploymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the rule deployment to retrieve.
	// Format:
	// `projects/{project}/locations/{location}/instances/{instance}/rules/{rule}/deployment`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetRuleDeploymentRequest) Reset() {
	*x = GetRuleDeploymentRequest{}
	mi := &file_google_cloud_chronicle_v1_rule_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRuleDeploymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRuleDeploymentRequest) ProtoMessage() {}

func (x *GetRuleDeploymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_rule_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRuleDeploymentRequest.ProtoReflect.Descriptor instead.
func (*GetRuleDeploymentRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_rule_proto_rawDescGZIP(), []int{15}
}

func (x *GetRuleDeploymentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Request message for ListRuleDeployments.
type ListRuleDeploymentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The collection of all parents which own all rule deployments. The
	// "-" wildcard token must be used as the rule identifier in the resource
	// path. Format:
	// `projects/{project}/locations/{location}/instances/{instance}/rules/-`
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The maximum number of rule deployments to return. The service may return
	// fewer than this value. If unspecified, at most 100 rule deployments will be
	// returned. The maximum value is 1000; values above 1000 will be coerced to
	// 1000.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListRuleDeployments` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListRuleDeployments`
	// must match the call that provided the page token.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// A filter that can be used to retrieve specific rule deployments.
	// The following fields are filterable:
	// archived, name
	Filter string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListRuleDeploymentsRequest) Reset() {
	*x = ListRuleDeploymentsRequest{}
	mi := &file_google_cloud_chronicle_v1_rule_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRuleDeploymentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRuleDeploymentsRequest) ProtoMessage() {}

func (x *ListRuleDeploymentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_rule_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRuleDeploymentsRequest.ProtoReflect.Descriptor instead.
func (*ListRuleDeploymentsRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_rule_proto_rawDescGZIP(), []int{16}
}

func (x *ListRuleDeploymentsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListRuleDeploymentsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRuleDeploymentsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListRuleDeploymentsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// Response message for ListRuleDeployments.
type ListRuleDeploymentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The rule deployments from all rules.
	RuleDeployments []*RuleDeployment `protobuf:"bytes,1,rep,name=rule_deployments,json=ruleDeployments,proto3" json:"rule_deployments,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListRuleDeploymentsResponse) Reset() {
	*x = ListRuleDeploymentsResponse{}
	mi := &file_google_cloud_chronicle_v1_rule_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRuleDeploymentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRuleDeploymentsResponse) ProtoMessage() {}

func (x *ListRuleDeploymentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_rule_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRuleDeploymentsResponse.ProtoReflect.Descriptor instead.
func (*ListRuleDeploymentsResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_rule_proto_rawDescGZIP(), []int{17}
}

func (x *ListRuleDeploymentsResponse) GetRuleDeployments() []*RuleDeployment {
	if x != nil {
		return x.RuleDeployments
	}
	return nil
}

func (x *ListRuleDeploymentsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Request message for UpdateRuleDeployment.
type UpdateRuleDeploymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The rule deployment to update.
	//
	// The rule deployment's `name` field is used to identify the rule deployment
	// to update. Format:
	// `projects/{project}/locations/{location}/instances/{instance}/rules/{rule}/deployment`
	RuleDeployment *RuleDeployment `protobuf:"bytes,1,opt,name=rule_deployment,json=ruleDeployment,proto3" json:"rule_deployment,omitempty"`
	// Required. The list of fields to update.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateRuleDeploymentRequest) Reset() {
	*x = UpdateRuleDeploymentRequest{}
	mi := &file_google_cloud_chronicle_v1_rule_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRuleDeploymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRuleDeploymentRequest) ProtoMessage() {}

func (x *UpdateRuleDeploymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_rule_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRuleDeploymentRequest.ProtoReflect.Descriptor instead.
func (*UpdateRuleDeploymentRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_rule_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateRuleDeploymentRequest) GetRuleDeployment() *RuleDeployment {
	if x != nil {
		return x.RuleDeployment
	}
	return nil
}

func (x *UpdateRuleDeploymentRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// CompilationPosition represents the location of a compilation diagnostic in
// rule text.
type CompilationPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Start line number, beginning at 1.
	StartLine int32 `protobuf:"varint,1,opt,name=start_line,json=startLine,proto3" json:"start_line,omitempty"`
	// Output only. Start column number, beginning at 1.
	StartColumn int32 `protobuf:"varint,2,opt,name=start_column,json=startColumn,proto3" json:"start_column,omitempty"`
	// Output only. End line number, beginning at 1.
	EndLine int32 `protobuf:"varint,3,opt,name=end_line,json=endLine,proto3" json:"end_line,omitempty"`
	// Output only. End column number, beginning at 1.
	EndColumn int32 `protobuf:"varint,4,opt,name=end_column,json=endColumn,proto3" json:"end_column,omitempty"`
}

func (x *CompilationPosition) Reset() {
	*x = CompilationPosition{}
	mi := &file_google_cloud_chronicle_v1_rule_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompilationPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompilationPosition) ProtoMessage() {}

func (x *CompilationPosition) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_rule_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompilationPosition.ProtoReflect.Descriptor instead.
func (*CompilationPosition) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_rule_proto_rawDescGZIP(), []int{19}
}

func (x *CompilationPosition) GetStartLine() int32 {
	if x != nil {
		return x.StartLine
	}
	return 0
}

func (x *CompilationPosition) GetStartColumn() int32 {
	if x != nil {
		return x.StartColumn
	}
	return 0
}

func (x *CompilationPosition) GetEndLine() int32 {
	if x != nil {
		return x.EndLine
	}
	return 0
}

func (x *CompilationPosition) GetEndColumn() int32 {
	if x != nil {
		return x.EndColumn
	}
	return 0
}

// CompilationDiagnostic represents a compilation diagnostic generated
// during a rule's compilation, such as a compilation error or a compilation
// warning.
type CompilationDiagnostic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The diagnostic message.
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// Output only. The approximate position in the rule text associated with the
	// compilation diagnostic.
	// Compilation Position may be empty.
	Position *CompilationPosition `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	// Output only. The severity of a rule's compilation diagnostic.
	Severity CompilationDiagnostic_Severity `protobuf:"varint,3,opt,name=severity,proto3,enum=google.cloud.chronicle.v1.CompilationDiagnostic_Severity" json:"severity,omitempty"`
	// Output only. Link to documentation that describes a diagnostic in more
	// detail.
	Uri string `protobuf:"bytes,5,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (x *CompilationDiagnostic) Reset() {
	*x = CompilationDiagnostic{}
	mi := &file_google_cloud_chronicle_v1_rule_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompilationDiagnostic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompilationDiagnostic) ProtoMessage() {}

func (x *CompilationDiagnostic) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_rule_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompilationDiagnostic.ProtoReflect.Descriptor instead.
func (*CompilationDiagnostic) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_rule_proto_rawDescGZIP(), []int{20}
}

func (x *CompilationDiagnostic) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CompilationDiagnostic) GetPosition() *CompilationPosition {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *CompilationDiagnostic) GetSeverity() CompilationDiagnostic_Severity {
	if x != nil {
		return x.Severity
	}
	return CompilationDiagnostic_SEVERITY_UNSPECIFIED
}

func (x *CompilationDiagnostic) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

// Severity represents the severity level of the rule.
type Severity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The display name of the severity level. Extracted from the meta section of
	// the rule text.
	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
}

func (x *Severity) Reset() {
	*x = Severity{}
	mi := &file_google_cloud_chronicle_v1_rule_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Severity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Severity) ProtoMessage() {}

func (x *Severity) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_rule_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Severity.ProtoReflect.Descriptor instead.
func (*Severity) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_rule_proto_rawDescGZIP(), []int{21}
}

func (x *Severity) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

// Operation Metadata for Retrohunts.
type RetrohuntMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the retrohunt.
	// Format:
	// `projects/{project}/locations/{location}/instances/{instance}/rules/{rule}/retrohunts/{retrohunt}`
	Retrohunt string `protobuf:"bytes,1,opt,name=retrohunt,proto3" json:"retrohunt,omitempty"`
	// The start and end time of the retrohunt execution. If the retrohunt is not
	// yet finished, the end time of the interval will not be filled.
	ExecutionInterval *interval.Interval `protobuf:"bytes,2,opt,name=execution_interval,json=executionInterval,proto3" json:"execution_interval,omitempty"`
	// Percent progress of the retrohunt towards completion, from 0.00 to 100.00.
	ProgressPercentage float32 `protobuf:"fixed32,3,opt,name=progress_percentage,json=progressPercentage,proto3" json:"progress_percentage,omitempty"`
}

func (x *RetrohuntMetadata) Reset() {
	*x = RetrohuntMetadata{}
	mi := &file_google_cloud_chronicle_v1_rule_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetrohuntMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrohuntMetadata) ProtoMessage() {}

func (x *RetrohuntMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_rule_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrohuntMetadata.ProtoReflect.Descriptor instead.
func (*RetrohuntMetadata) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_rule_proto_rawDescGZIP(), []int{22}
}

func (x *RetrohuntMetadata) GetRetrohunt() string {
	if x != nil {
		return x.Retrohunt
	}
	return ""
}

func (x *RetrohuntMetadata) GetExecutionInterval() *interval.Interval {
	if x != nil {
		return x.ExecutionInterval
	}
	return nil
}

func (x *RetrohuntMetadata) GetProgressPercentage() float32 {
	if x != nil {
		return x.ProgressPercentage
	}
	return 0
}

// InputsUsed is a convenience field that tells us which sources
// of events (if any) were used in the rule.
// NEXT TAG: 4
type InputsUsed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Whether the rule queries UDM events.
	UsesUdm bool `protobuf:"varint,1,opt,name=uses_udm,json=usesUdm,proto3" json:"uses_udm,omitempty"`
	// Optional. Whether the rule queries entity events.
	UsesEntity bool `protobuf:"varint,2,opt,name=uses_entity,json=usesEntity,proto3" json:"uses_entity,omitempty"`
	// Optional. Whether the rule queries detections.
	UsesDetection bool `protobuf:"varint,3,opt,name=uses_detection,json=usesDetection,proto3" json:"uses_detection,omitempty"`
}

func (x *InputsUsed) Reset() {
	*x = InputsUsed{}
	mi := &file_google_cloud_chronicle_v1_rule_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InputsUsed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputsUsed) ProtoMessage() {}

func (x *InputsUsed) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_rule_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputsUsed.ProtoReflect.Descriptor instead.
func (*InputsUsed) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_rule_proto_rawDescGZIP(), []int{23}
}

func (x *InputsUsed) GetUsesUdm() bool {
	if x != nil {
		return x.UsesUdm
	}
	return false
}

func (x *InputsUsed) GetUsesEntity() bool {
	if x != nil {
		return x.UsesEntity
	}
	return false
}

func (x *InputsUsed) GetUsesDetection() bool {
	if x != nil {
		return x.UsesDetection
	}
	return false
}

var File_google_cloud_chronicle_v1_rule_proto protoreflect.FileDescriptor

var file_google_cloud_chronicle_v1_rule_proto_rawDesc = []byte{
	0x0a, 0x24, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63,
	0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x75, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76,
	0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x6c, 0x6f, 0x6e,
	0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8c, 0x0b, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x17,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x08, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x44, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x4e, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68,
	0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x51,
	0x0a, 0x14, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x12, 0x72,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x62, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f,
	0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x57, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x42, 0x2e, 0xe0, 0x41,
	0x03, 0xfa, 0x41, 0x28, 0x0a, 0x26, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0e, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x64, 0x0a, 0x17,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x27, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72,
	0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x46, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x15, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x52, 0x75, 0x6e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x43, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xfa, 0x41, 0x2a, 0x0a, 0x28, 0x63, 0x68, 0x72, 0x6f,
	0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x6e, 0x0a, 0x17, 0x63,
	0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f,
	0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x4c, 0x0a, 0x21, 0x6e,
	0x65, 0x61, 0x72, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69,
	0x76, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x1c, 0x6e, 0x65, 0x61,
	0x72, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x4b, 0x0a, 0x0b, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68,
	0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x55, 0x73, 0x65, 0x64, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x55, 0x73, 0x65, 0x64, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x50, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4f, 0x4d, 0x50, 0x49,
	0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x02, 0x3a, 0x6d, 0xea, 0x41, 0x6a, 0x0a, 0x1d, 0x63, 0x68, 0x72, 0x6f,
	0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x49, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x72,
	0x75, 0x6c, 0x65, 0x7d, 0x22, 0xd2, 0x06, 0x0a, 0x0e, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x64, 0x12, 0x42, 0x0a, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x72, 0x75, 0x6e, 0x5f, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72,
	0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x46, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0c, 0x72, 0x75, 0x6e, 0x46, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x66, 0x0a, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72,
	0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0e, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x0e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x25, 0xe0, 0x41, 0x03, 0xfa, 0x41, 0x1f, 0x12, 0x1d, 0x63, 0x68,
	0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0d, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x0e, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x25, 0xe0, 0x41, 0x03, 0xfa, 0x41, 0x1f, 0x12, 0x1d, 0x63, 0x68, 0x72, 0x6f,
	0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x61, 0x0a, 0x1d, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x19, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x57, 0x0a, 0x0e, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a,
	0x1b, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4c,
	0x49, 0x4d, 0x49, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x41, 0x55, 0x53,
	0x45, 0x44, 0x10, 0x03, 0x3a, 0x82, 0x01, 0xea, 0x41, 0x7f, 0x0a, 0x27, 0x63, 0x68, 0x72, 0x6f,
	0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x54, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x7d, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x75, 0x6c, 0x65, 0x7d, 0x2f, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8d, 0x04, 0x0a, 0x09, 0x52, 0x65,
	0x74, 0x72, 0x6f, 0x68, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x10, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x49, 0x0a, 0x12, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x11, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x45, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f,
	0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x6f, 0x68, 0x75,
	0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0x50, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55,
	0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f, 0x4e, 0x45, 0x10,
	0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x3a, 0x8a, 0x01, 0xea,
	0x41, 0x86, 0x01, 0x0a, 0x22, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x65,
	0x74, 0x72, 0x6f, 0x68, 0x75, 0x6e, 0x74, 0x12, 0x60, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d,
	0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x75, 0x6c,
	0x65, 0x7d, 0x2f, 0x72, 0x65, 0x74, 0x72, 0x6f, 0x68, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x72,
	0x65, 0x74, 0x72, 0x6f, 0x68, 0x75, 0x6e, 0x74, 0x7d, 0x22, 0x8c, 0x01, 0x0a, 0x11, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3d, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x25, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1f, 0x12, 0x1d, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63,
	0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x38,
	0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f,
	0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xe0, 0x41, 0x02, 0xfa, 0x41,
	0x1f, 0x0a, 0x1d, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x75, 0x6c, 0x65, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22,
	0xde, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1f, 0x12, 0x1d, 0x63, 0x68,
	0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x37, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72,
	0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x56, 0x69,
	0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x22, 0x72, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x8a, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x72, 0x75,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04,
	0x72, 0x75, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73,
	0x6b, 0x22, 0x69, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1f, 0x0a, 0x1d, 0x63, 0x68,
	0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0xca, 0x01, 0x0a,
	0x18, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1f, 0x0a,
	0x1d, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x37, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68,
	0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x56,
	0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0x7a, 0x0a, 0x19, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xa5, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x74, 0x72, 0x6f, 0x68, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x42, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2a, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x24, 0x12, 0x22, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69,
	0x63, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x52, 0x65, 0x74, 0x72, 0x6f, 0x68, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x72, 0x6f, 0x68, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x6f, 0x68, 0x75, 0x6e, 0x74, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x09, 0x72, 0x65, 0x74, 0x72, 0x6f, 0x68, 0x75, 0x6e, 0x74, 0x22, 0x55, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x52, 0x65, 0x74, 0x72, 0x6f, 0x68, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2a, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x24, 0x0a, 0x22, 0x63, 0x68, 0x72, 0x6f,
	0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x65, 0x74, 0x72, 0x6f, 0x68, 0x75, 0x6e, 0x74, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x74,
	0x72, 0x6f, 0x68, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a,
	0xe0, 0x41, 0x02, 0xfa, 0x41, 0x24, 0x12, 0x22, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c,
	0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x52, 0x65, 0x74, 0x72, 0x6f, 0x68, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x86, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x74, 0x72, 0x6f, 0x68, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x44, 0x0a, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x6f, 0x68, 0x75, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x6f, 0x68, 0x75, 0x6e, 0x74, 0x52, 0x0a, 0x72, 0x65, 0x74,
	0x72, 0x6f, 0x68, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x5f, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xe0, 0x41, 0x02, 0xfa, 0x41,
	0x29, 0x0a, 0x27, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x75, 0x6c, 0x65,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xb9, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x47, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2f, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x29, 0x12, 0x27, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63,
	0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x9b, 0x01, 0x0a,
	0x1b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x10,
	0x72, 0x75, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x0f, 0x72, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xb8, 0x01, 0x0a, 0x1b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x0f, 0x72, 0x75,
	0x6c, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x0e, 0x72, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0xa5, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e,
	0x65, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1e, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x65, 0x6e, 0x64,
	0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0xb8, 0x02,
	0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4f, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63,
	0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x53, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x03, 0x75, 0x72, 0x69, 0x22, 0x3c, 0x0a, 0x08, 0x53, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x09, 0x0a,
	0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x22, 0x2d, 0x0a, 0x08, 0x53, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xcc, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x74, 0x72,
	0x6f, 0x68, 0x75, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a,
	0x09, 0x72, 0x65, 0x74, 0x72, 0x6f, 0x68, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x22, 0xfa, 0x41, 0x1f, 0x0a, 0x1d, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x09, 0x72, 0x65, 0x74, 0x72, 0x6f, 0x68, 0x75, 0x6e, 0x74, 0x12,
	0x44, 0x0a, 0x12, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x52, 0x11, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0x7e, 0x0a, 0x0a, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x55, 0x73, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x73, 0x5f, 0x75, 0x64, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x75, 0x73, 0x65,
	0x73, 0x55, 0x64, 0x6d, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x73, 0x5f, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a,
	0x75, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x0e, 0x75, 0x73,
	0x65, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x73, 0x44, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2a, 0x4e, 0x0a, 0x0c, 0x52, 0x75, 0x6e, 0x46, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x55, 0x4e, 0x5f, 0x46, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x48, 0x4f, 0x55, 0x52, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x44,
	0x41, 0x49, 0x4c, 0x59, 0x10, 0x03, 0x2a, 0x48, 0x0a, 0x08, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a,
	0x0c, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12,
	0x0f, 0x0a, 0x0b, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x02,
	0x2a, 0x56, 0x0a, 0x08, 0x52, 0x75, 0x6c, 0x65, 0x56, 0x69, 0x65, 0x77, 0x12, 0x19, 0x0a, 0x15,
	0x52, 0x55, 0x4c, 0x45, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x41, 0x53, 0x49, 0x43,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16,
	0x52, 0x45, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x03, 0x32, 0xa9, 0x13, 0x0a, 0x0b, 0x52, 0x75, 0x6c,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xae, 0x01, 0x0a, 0x0a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x51, 0xda, 0x41, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x2c, 0x72, 0x75, 0x6c, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x3a, 0x04, 0x72, 0x75,
	0x6c, 0x65, 0x22, 0x35, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x2f, 0x2a, 0x7d, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x9b, 0x01, 0x0a, 0x07, 0x47, 0x65,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c,
	0x65, 0x22, 0x44, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37,
	0x12, 0x35, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x2a, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xae, 0x01, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x46, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x37, 0x12, 0x35, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f,
	0x2a, 0x7d, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0xb8, 0x01, 0x0a, 0x0a, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x5b, 0xda, 0x41, 0x10, 0x72, 0x75, 0x6c, 0x65, 0x2c,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x42, 0x3a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x32, 0x3a, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x72, 0x75,
	0x6c, 0x65, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x2f, 0x2a, 0x7d, 0x12, 0x98, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x44, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x2a, 0x35, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xd2,
	0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63,
	0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x52, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x45, 0x12, 0x43,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a,
	0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0xef, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x74, 0x72, 0x6f, 0x68, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x74, 0x72, 0x6f, 0x68,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x89, 0x01, 0xca, 0x41, 0x1e, 0x0a,
	0x09, 0x52, 0x65, 0x74, 0x72, 0x6f, 0x68, 0x75, 0x6e, 0x74, 0x12, 0x11, 0x52, 0x65, 0x74, 0x72,
	0x6f, 0x68, 0x75, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xda, 0x41, 0x10,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x2c, 0x72, 0x65, 0x74, 0x72, 0x6f, 0x68, 0x75, 0x6e, 0x74,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4f, 0x3a, 0x09, 0x72, 0x65, 0x74, 0x72, 0x6f, 0x68, 0x75, 0x6e,
	0x74, 0x22, 0x42, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f,
	0x2a, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x72, 0x65, 0x74, 0x72, 0x6f,
	0x68, 0x75, 0x6e, 0x74, 0x73, 0x12, 0xb7, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x74,
	0x72, 0x6f, 0x68, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x74, 0x72, 0x6f, 0x68, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x6f, 0x68, 0x75, 0x6e, 0x74, 0x22, 0x51, 0xda, 0x41,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x12, 0x42, 0x2f, 0x76, 0x31,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f,
	0x2a, 0x2f, 0x72, 0x65, 0x74, 0x72, 0x6f, 0x68, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x12,
	0xca, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x74, 0x72, 0x6f, 0x68, 0x75, 0x6e,
	0x74, 0x73, 0x12, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x74, 0x72, 0x6f, 0x68, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x74, 0x72, 0x6f, 0x68, 0x75, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x53, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x12, 0x42, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a,
	0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x2a,
	0x7d, 0x2f, 0x72, 0x65, 0x74, 0x72, 0x6f, 0x68, 0x75, 0x6e, 0x74, 0x73, 0x12, 0xc4, 0x01, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0x4f, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x42, 0x12, 0x40, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x2a, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x2f,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x7d, 0x12, 0xda, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x35, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e,
	0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x54, 0xda, 0x41, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x45, 0x12, 0x43, 0x2f, 0x76, 0x31,
	0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x83, 0x02, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63,
	0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75,
	0x6c, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x87, 0x01, 0xda,
	0x41, 0x1b, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x2c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x63, 0x3a, 0x0f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x32, 0x50, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x72, 0x75, 0x6c, 0x65, 0x5f,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x2f, 0x2a, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x7d, 0x1a, 0x4c, 0xca, 0x41, 0x18, 0x63, 0x68, 0x72, 0x6f, 0x6e,
	0x69, 0x63, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77,
	0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x42, 0xbc, 0x01, 0x0a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x42, 0x09, 0x52, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x3b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x70, 0x62,
	0x3b, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x70, 0x62, 0xaa, 0x02, 0x19, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x43, 0x68, 0x72, 0x6f,
	0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x19, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x5c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x43, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c,
	0x65, 0x5c, 0x56, 0x31, 0xea, 0x02, 0x1c, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x43, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x3a,
	0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_chronicle_v1_rule_proto_rawDescOnce sync.Once
	file_google_cloud_chronicle_v1_rule_proto_rawDescData = file_google_cloud_chronicle_v1_rule_proto_rawDesc
)

func file_google_cloud_chronicle_v1_rule_proto_rawDescGZIP() []byte {
	file_google_cloud_chronicle_v1_rule_proto_rawDescOnce.Do(func() {
		file_google_cloud_chronicle_v1_rule_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_chronicle_v1_rule_proto_rawDescData)
	})
	return file_google_cloud_chronicle_v1_rule_proto_rawDescData
}

var file_google_cloud_chronicle_v1_rule_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_google_cloud_chronicle_v1_rule_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_google_cloud_chronicle_v1_rule_proto_goTypes = []any{
	(RunFrequency)(0),                   // 0: google.cloud.chronicle.v1.RunFrequency
	(RuleType)(0),                       // 1: google.cloud.chronicle.v1.RuleType
	(RuleView)(0),                       // 2: google.cloud.chronicle.v1.RuleView
	(Rule_CompilationState)(0),          // 3: google.cloud.chronicle.v1.Rule.CompilationState
	(RuleDeployment_ExecutionState)(0),  // 4: google.cloud.chronicle.v1.RuleDeployment.ExecutionState
	(Retrohunt_State)(0),                // 5: google.cloud.chronicle.v1.Retrohunt.State
	(CompilationDiagnostic_Severity)(0), // 6: google.cloud.chronicle.v1.CompilationDiagnostic.Severity
	(*Rule)(nil),                        // 7: google.cloud.chronicle.v1.Rule
	(*RuleDeployment)(nil),              // 8: google.cloud.chronicle.v1.RuleDeployment
	(*Retrohunt)(nil),                   // 9: google.cloud.chronicle.v1.Retrohunt
	(*CreateRuleRequest)(nil),           // 10: google.cloud.chronicle.v1.CreateRuleRequest
	(*GetRuleRequest)(nil),              // 11: google.cloud.chronicle.v1.GetRuleRequest
	(*ListRulesRequest)(nil),            // 12: google.cloud.chronicle.v1.ListRulesRequest
	(*ListRulesResponse)(nil),           // 13: google.cloud.chronicle.v1.ListRulesResponse
	(*UpdateRuleRequest)(nil),           // 14: google.cloud.chronicle.v1.UpdateRuleRequest
	(*DeleteRuleRequest)(nil),           // 15: google.cloud.chronicle.v1.DeleteRuleRequest
	(*ListRuleRevisionsRequest)(nil),    // 16: google.cloud.chronicle.v1.ListRuleRevisionsRequest
	(*ListRuleRevisionsResponse)(nil),   // 17: google.cloud.chronicle.v1.ListRuleRevisionsResponse
	(*CreateRetrohuntRequest)(nil),      // 18: google.cloud.chronicle.v1.CreateRetrohuntRequest
	(*GetRetrohuntRequest)(nil),         // 19: google.cloud.chronicle.v1.GetRetrohuntRequest
	(*ListRetrohuntsRequest)(nil),       // 20: google.cloud.chronicle.v1.ListRetrohuntsRequest
	(*ListRetrohuntsResponse)(nil),      // 21: google.cloud.chronicle.v1.ListRetrohuntsResponse
	(*GetRuleDeploymentRequest)(nil),    // 22: google.cloud.chronicle.v1.GetRuleDeploymentRequest
	(*ListRuleDeploymentsRequest)(nil),  // 23: google.cloud.chronicle.v1.ListRuleDeploymentsRequest
	(*ListRuleDeploymentsResponse)(nil), // 24: google.cloud.chronicle.v1.ListRuleDeploymentsResponse
	(*UpdateRuleDeploymentRequest)(nil), // 25: google.cloud.chronicle.v1.UpdateRuleDeploymentRequest
	(*CompilationPosition)(nil),         // 26: google.cloud.chronicle.v1.CompilationPosition
	(*CompilationDiagnostic)(nil),       // 27: google.cloud.chronicle.v1.CompilationDiagnostic
	(*Severity)(nil),                    // 28: google.cloud.chronicle.v1.Severity
	(*RetrohuntMetadata)(nil),           // 29: google.cloud.chronicle.v1.RetrohuntMetadata
	(*InputsUsed)(nil),                  // 30: google.cloud.chronicle.v1.InputsUsed
	nil,                                 // 31: google.cloud.chronicle.v1.Rule.MetadataEntry
	(*timestamppb.Timestamp)(nil),       // 32: google.protobuf.Timestamp
	(*interval.Interval)(nil),           // 33: google.type.Interval
	(*fieldmaskpb.FieldMask)(nil),       // 34: google.protobuf.FieldMask
	(*emptypb.Empty)(nil),               // 35: google.protobuf.Empty
	(*longrunningpb.Operation)(nil),     // 36: google.longrunning.Operation
}
var file_google_cloud_chronicle_v1_rule_proto_depIdxs = []int32{
	28, // 0: google.cloud.chronicle.v1.Rule.severity:type_name -> google.cloud.chronicle.v1.Severity
	31, // 1: google.cloud.chronicle.v1.Rule.metadata:type_name -> google.cloud.chronicle.v1.Rule.MetadataEntry
	32, // 2: google.cloud.chronicle.v1.Rule.create_time:type_name -> google.protobuf.Timestamp
	32, // 3: google.cloud.chronicle.v1.Rule.revision_create_time:type_name -> google.protobuf.Timestamp
	3,  // 4: google.cloud.chronicle.v1.Rule.compilation_state:type_name -> google.cloud.chronicle.v1.Rule.CompilationState
	1,  // 5: google.cloud.chronicle.v1.Rule.type:type_name -> google.cloud.chronicle.v1.RuleType
	0,  // 6: google.cloud.chronicle.v1.Rule.allowed_run_frequencies:type_name -> google.cloud.chronicle.v1.RunFrequency
	27, // 7: google.cloud.chronicle.v1.Rule.compilation_diagnostics:type_name -> google.cloud.chronicle.v1.CompilationDiagnostic
	30, // 8: google.cloud.chronicle.v1.Rule.inputs_used:type_name -> google.cloud.chronicle.v1.InputsUsed
	32, // 9: google.cloud.chronicle.v1.RuleDeployment.archive_time:type_name -> google.protobuf.Timestamp
	0,  // 10: google.cloud.chronicle.v1.RuleDeployment.run_frequency:type_name -> google.cloud.chronicle.v1.RunFrequency
	4,  // 11: google.cloud.chronicle.v1.RuleDeployment.execution_state:type_name -> google.cloud.chronicle.v1.RuleDeployment.ExecutionState
	32, // 12: google.cloud.chronicle.v1.RuleDeployment.last_alert_status_change_time:type_name -> google.protobuf.Timestamp
	33, // 13: google.cloud.chronicle.v1.Retrohunt.process_interval:type_name -> google.type.Interval
	33, // 14: google.cloud.chronicle.v1.Retrohunt.execution_interval:type_name -> google.type.Interval
	5,  // 15: google.cloud.chronicle.v1.Retrohunt.state:type_name -> google.cloud.chronicle.v1.Retrohunt.State
	7,  // 16: google.cloud.chronicle.v1.CreateRuleRequest.rule:type_name -> google.cloud.chronicle.v1.Rule
	2,  // 17: google.cloud.chronicle.v1.GetRuleRequest.view:type_name -> google.cloud.chronicle.v1.RuleView
	2,  // 18: google.cloud.chronicle.v1.ListRulesRequest.view:type_name -> google.cloud.chronicle.v1.RuleView
	7,  // 19: google.cloud.chronicle.v1.ListRulesResponse.rules:type_name -> google.cloud.chronicle.v1.Rule
	7,  // 20: google.cloud.chronicle.v1.UpdateRuleRequest.rule:type_name -> google.cloud.chronicle.v1.Rule
	34, // 21: google.cloud.chronicle.v1.UpdateRuleRequest.update_mask:type_name -> google.protobuf.FieldMask
	2,  // 22: google.cloud.chronicle.v1.ListRuleRevisionsRequest.view:type_name -> google.cloud.chronicle.v1.RuleView
	7,  // 23: google.cloud.chronicle.v1.ListRuleRevisionsResponse.rules:type_name -> google.cloud.chronicle.v1.Rule
	9,  // 24: google.cloud.chronicle.v1.CreateRetrohuntRequest.retrohunt:type_name -> google.cloud.chronicle.v1.Retrohunt
	9,  // 25: google.cloud.chronicle.v1.ListRetrohuntsResponse.retrohunts:type_name -> google.cloud.chronicle.v1.Retrohunt
	8,  // 26: google.cloud.chronicle.v1.ListRuleDeploymentsResponse.rule_deployments:type_name -> google.cloud.chronicle.v1.RuleDeployment
	8,  // 27: google.cloud.chronicle.v1.UpdateRuleDeploymentRequest.rule_deployment:type_name -> google.cloud.chronicle.v1.RuleDeployment
	34, // 28: google.cloud.chronicle.v1.UpdateRuleDeploymentRequest.update_mask:type_name -> google.protobuf.FieldMask
	26, // 29: google.cloud.chronicle.v1.CompilationDiagnostic.position:type_name -> google.cloud.chronicle.v1.CompilationPosition
	6,  // 30: google.cloud.chronicle.v1.CompilationDiagnostic.severity:type_name -> google.cloud.chronicle.v1.CompilationDiagnostic.Severity
	33, // 31: google.cloud.chronicle.v1.RetrohuntMetadata.execution_interval:type_name -> google.type.Interval
	10, // 32: google.cloud.chronicle.v1.RuleService.CreateRule:input_type -> google.cloud.chronicle.v1.CreateRuleRequest
	11, // 33: google.cloud.chronicle.v1.RuleService.GetRule:input_type -> google.cloud.chronicle.v1.GetRuleRequest
	12, // 34: google.cloud.chronicle.v1.RuleService.ListRules:input_type -> google.cloud.chronicle.v1.ListRulesRequest
	14, // 35: google.cloud.chronicle.v1.RuleService.UpdateRule:input_type -> google.cloud.chronicle.v1.UpdateRuleRequest
	15, // 36: google.cloud.chronicle.v1.RuleService.DeleteRule:input_type -> google.cloud.chronicle.v1.DeleteRuleRequest
	16, // 37: google.cloud.chronicle.v1.RuleService.ListRuleRevisions:input_type -> google.cloud.chronicle.v1.ListRuleRevisionsRequest
	18, // 38: google.cloud.chronicle.v1.RuleService.CreateRetrohunt:input_type -> google.cloud.chronicle.v1.CreateRetrohuntRequest
	19, // 39: google.cloud.chronicle.v1.RuleService.GetRetrohunt:input_type -> google.cloud.chronicle.v1.GetRetrohuntRequest
	20, // 40: google.cloud.chronicle.v1.RuleService.ListRetrohunts:input_type -> google.cloud.chronicle.v1.ListRetrohuntsRequest
	22, // 41: google.cloud.chronicle.v1.RuleService.GetRuleDeployment:input_type -> google.cloud.chronicle.v1.GetRuleDeploymentRequest
	23, // 42: google.cloud.chronicle.v1.RuleService.ListRuleDeployments:input_type -> google.cloud.chronicle.v1.ListRuleDeploymentsRequest
	25, // 43: google.cloud.chronicle.v1.RuleService.UpdateRuleDeployment:input_type -> google.cloud.chronicle.v1.UpdateRuleDeploymentRequest
	7,  // 44: google.cloud.chronicle.v1.RuleService.CreateRule:output_type -> google.cloud.chronicle.v1.Rule
	7,  // 45: google.cloud.chronicle.v1.RuleService.GetRule:output_type -> google.cloud.chronicle.v1.Rule
	13, // 46: google.cloud.chronicle.v1.RuleService.ListRules:output_type -> google.cloud.chronicle.v1.ListRulesResponse
	7,  // 47: google.cloud.chronicle.v1.RuleService.UpdateRule:output_type -> google.cloud.chronicle.v1.Rule
	35, // 48: google.cloud.chronicle.v1.RuleService.DeleteRule:output_type -> google.protobuf.Empty
	17, // 49: google.cloud.chronicle.v1.RuleService.ListRuleRevisions:output_type -> google.cloud.chronicle.v1.ListRuleRevisionsResponse
	36, // 50: google.cloud.chronicle.v1.RuleService.CreateRetrohunt:output_type -> google.longrunning.Operation
	9,  // 51: google.cloud.chronicle.v1.RuleService.GetRetrohunt:output_type -> google.cloud.chronicle.v1.Retrohunt
	21, // 52: google.cloud.chronicle.v1.RuleService.ListRetrohunts:output_type -> google.cloud.chronicle.v1.ListRetrohuntsResponse
	8,  // 53: google.cloud.chronicle.v1.RuleService.GetRuleDeployment:output_type -> google.cloud.chronicle.v1.RuleDeployment
	24, // 54: google.cloud.chronicle.v1.RuleService.ListRuleDeployments:output_type -> google.cloud.chronicle.v1.ListRuleDeploymentsResponse
	8,  // 55: google.cloud.chronicle.v1.RuleService.UpdateRuleDeployment:output_type -> google.cloud.chronicle.v1.RuleDeployment
	44, // [44:56] is the sub-list for method output_type
	32, // [32:44] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_google_cloud_chronicle_v1_rule_proto_init() }
func file_google_cloud_chronicle_v1_rule_proto_init() {
	if File_google_cloud_chronicle_v1_rule_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_chronicle_v1_rule_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_google_cloud_chronicle_v1_rule_proto_goTypes,
		DependencyIndexes: file_google_cloud_chronicle_v1_rule_proto_depIdxs,
		EnumInfos:         file_google_cloud_chronicle_v1_rule_proto_enumTypes,
		MessageInfos:      file_google_cloud_chronicle_v1_rule_proto_msgTypes,
	}.Build()
	File_google_cloud_chronicle_v1_rule_proto = out.File
	file_google_cloud_chronicle_v1_rule_proto_rawDesc = nil
	file_google_cloud_chronicle_v1_rule_proto_goTypes = nil
	file_google_cloud_chronicle_v1_rule_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RuleServiceClient is the client API for RuleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RuleServiceClient interface {
	// Creates a new Rule.
	CreateRule(ctx context.Context, in *CreateRuleRequest, opts ...grpc.CallOption) (*Rule, error)
	// Gets a Rule.
	GetRule(ctx context.Context, in *GetRuleRequest, opts ...grpc.CallOption) (*Rule, error)
	// Lists Rules.
	ListRules(ctx context.Context, in *ListRulesRequest, opts ...grpc.CallOption) (*ListRulesResponse, error)
	// Updates a Rule.
	UpdateRule(ctx context.Context, in *UpdateRuleRequest, opts ...grpc.CallOption) (*Rule, error)
	// Deletes a Rule.
	DeleteRule(ctx context.Context, in *DeleteRuleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Lists all revisions of the rule.
	ListRuleRevisions(ctx context.Context, in *ListRuleRevisionsRequest, opts ...grpc.CallOption) (*ListRuleRevisionsResponse, error)
	// Create a Retrohunt.
	CreateRetrohunt(ctx context.Context, in *CreateRetrohuntRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Get a Retrohunt.
	GetRetrohunt(ctx context.Context, in *GetRetrohuntRequest, opts ...grpc.CallOption) (*Retrohunt, error)
	// List Retrohunts.
	ListRetrohunts(ctx context.Context, in *ListRetrohuntsRequest, opts ...grpc.CallOption) (*ListRetrohuntsResponse, error)
	// Gets a RuleDeployment.
	GetRuleDeployment(ctx context.Context, in *GetRuleDeploymentRequest, opts ...grpc.CallOption) (*RuleDeployment, error)
	// Lists RuleDeployments across all Rules.
	ListRuleDeployments(ctx context.Context, in *ListRuleDeploymentsRequest, opts ...grpc.CallOption) (*ListRuleDeploymentsResponse, error)
	// Updates a RuleDeployment.
	// Failures are not necessarily atomic. If there is a request to update
	// multiple fields, and any update to a single field fails, an error will be
	// returned, but other fields may remain successfully updated.
	UpdateRuleDeployment(ctx context.Context, in *UpdateRuleDeploymentRequest, opts ...grpc.CallOption) (*RuleDeployment, error)
}

type ruleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRuleServiceClient(cc grpc.ClientConnInterface) RuleServiceClient {
	return &ruleServiceClient{cc}
}

func (c *ruleServiceClient) CreateRule(ctx context.Context, in *CreateRuleRequest, opts ...grpc.CallOption) (*Rule, error) {
	out := new(Rule)
	err := c.cc.Invoke(ctx, "/google.cloud.chronicle.v1.RuleService/CreateRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleServiceClient) GetRule(ctx context.Context, in *GetRuleRequest, opts ...grpc.CallOption) (*Rule, error) {
	out := new(Rule)
	err := c.cc.Invoke(ctx, "/google.cloud.chronicle.v1.RuleService/GetRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleServiceClient) ListRules(ctx context.Context, in *ListRulesRequest, opts ...grpc.CallOption) (*ListRulesResponse, error) {
	out := new(ListRulesResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.chronicle.v1.RuleService/ListRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleServiceClient) UpdateRule(ctx context.Context, in *UpdateRuleRequest, opts ...grpc.CallOption) (*Rule, error) {
	out := new(Rule)
	err := c.cc.Invoke(ctx, "/google.cloud.chronicle.v1.RuleService/UpdateRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleServiceClient) DeleteRule(ctx context.Context, in *DeleteRuleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/google.cloud.chronicle.v1.RuleService/DeleteRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleServiceClient) ListRuleRevisions(ctx context.Context, in *ListRuleRevisionsRequest, opts ...grpc.CallOption) (*ListRuleRevisionsResponse, error) {
	out := new(ListRuleRevisionsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.chronicle.v1.RuleService/ListRuleRevisions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleServiceClient) CreateRetrohunt(ctx context.Context, in *CreateRetrohuntRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.chronicle.v1.RuleService/CreateRetrohunt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleServiceClient) GetRetrohunt(ctx context.Context, in *GetRetrohuntRequest, opts ...grpc.CallOption) (*Retrohunt, error) {
	out := new(Retrohunt)
	err := c.cc.Invoke(ctx, "/google.cloud.chronicle.v1.RuleService/GetRetrohunt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleServiceClient) ListRetrohunts(ctx context.Context, in *ListRetrohuntsRequest, opts ...grpc.CallOption) (*ListRetrohuntsResponse, error) {
	out := new(ListRetrohuntsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.chronicle.v1.RuleService/ListRetrohunts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleServiceClient) GetRuleDeployment(ctx context.Context, in *GetRuleDeploymentRequest, opts ...grpc.CallOption) (*RuleDeployment, error) {
	out := new(RuleDeployment)
	err := c.cc.Invoke(ctx, "/google.cloud.chronicle.v1.RuleService/GetRuleDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleServiceClient) ListRuleDeployments(ctx context.Context, in *ListRuleDeploymentsRequest, opts ...grpc.CallOption) (*ListRuleDeploymentsResponse, error) {
	out := new(ListRuleDeploymentsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.chronicle.v1.RuleService/ListRuleDeployments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleServiceClient) UpdateRuleDeployment(ctx context.Context, in *UpdateRuleDeploymentRequest, opts ...grpc.CallOption) (*RuleDeployment, error) {
	out := new(RuleDeployment)
	err := c.cc.Invoke(ctx, "/google.cloud.chronicle.v1.RuleService/UpdateRuleDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RuleServiceServer is the server API for RuleService service.
type RuleServiceServer interface {
	// Creates a new Rule.
	CreateRule(context.Context, *CreateRuleRequest) (*Rule, error)
	// Gets a Rule.
	GetRule(context.Context, *GetRuleRequest) (*Rule, error)
	// Lists Rules.
	ListRules(context.Context, *ListRulesRequest) (*ListRulesResponse, error)
	// Updates a Rule.
	UpdateRule(context.Context, *UpdateRuleRequest) (*Rule, error)
	// Deletes a Rule.
	DeleteRule(context.Context, *DeleteRuleRequest) (*emptypb.Empty, error)
	// Lists all revisions of the rule.
	ListRuleRevisions(context.Context, *ListRuleRevisionsRequest) (*ListRuleRevisionsResponse, error)
	// Create a Retrohunt.
	CreateRetrohunt(context.Context, *CreateRetrohuntRequest) (*longrunningpb.Operation, error)
	// Get a Retrohunt.
	GetRetrohunt(context.Context, *GetRetrohuntRequest) (*Retrohunt, error)
	// List Retrohunts.
	ListRetrohunts(context.Context, *ListRetrohuntsRequest) (*ListRetrohuntsResponse, error)
	// Gets a RuleDeployment.
	GetRuleDeployment(context.Context, *GetRuleDeploymentRequest) (*RuleDeployment, error)
	// Lists RuleDeployments across all Rules.
	ListRuleDeployments(context.Context, *ListRuleDeploymentsRequest) (*ListRuleDeploymentsResponse, error)
	// Updates a RuleDeployment.
	// Failures are not necessarily atomic. If there is a request to update
	// multiple fields, and any update to a single field fails, an error will be
	// returned, but other fields may remain successfully updated.
	UpdateRuleDeployment(context.Context, *UpdateRuleDeploymentRequest) (*RuleDeployment, error)
}

// UnimplementedRuleServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRuleServiceServer struct {
}

func (*UnimplementedRuleServiceServer) CreateRule(context.Context, *CreateRuleRequest) (*Rule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRule not implemented")
}
func (*UnimplementedRuleServiceServer) GetRule(context.Context, *GetRuleRequest) (*Rule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRule not implemented")
}
func (*UnimplementedRuleServiceServer) ListRules(context.Context, *ListRulesRequest) (*ListRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRules not implemented")
}
func (*UnimplementedRuleServiceServer) UpdateRule(context.Context, *UpdateRuleRequest) (*Rule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRule not implemented")
}
func (*UnimplementedRuleServiceServer) DeleteRule(context.Context, *DeleteRuleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRule not implemented")
}
func (*UnimplementedRuleServiceServer) ListRuleRevisions(context.Context, *ListRuleRevisionsRequest) (*ListRuleRevisionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRuleRevisions not implemented")
}
func (*UnimplementedRuleServiceServer) CreateRetrohunt(context.Context, *CreateRetrohuntRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRetrohunt not implemented")
}
func (*UnimplementedRuleServiceServer) GetRetrohunt(context.Context, *GetRetrohuntRequest) (*Retrohunt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRetrohunt not implemented")
}
func (*UnimplementedRuleServiceServer) ListRetrohunts(context.Context, *ListRetrohuntsRequest) (*ListRetrohuntsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRetrohunts not implemented")
}
func (*UnimplementedRuleServiceServer) GetRuleDeployment(context.Context, *GetRuleDeploymentRequest) (*RuleDeployment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRuleDeployment not implemented")
}
func (*UnimplementedRuleServiceServer) ListRuleDeployments(context.Context, *ListRuleDeploymentsRequest) (*ListRuleDeploymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRuleDeployments not implemented")
}
func (*UnimplementedRuleServiceServer) UpdateRuleDeployment(context.Context, *UpdateRuleDeploymentRequest) (*RuleDeployment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRuleDeployment not implemented")
}

func RegisterRuleServiceServer(s *grpc.Server, srv RuleServiceServer) {
	s.RegisterService(&_RuleService_serviceDesc, srv)
}

func _RuleService_CreateRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServiceServer).CreateRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.chronicle.v1.RuleService/CreateRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServiceServer).CreateRule(ctx, req.(*CreateRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleService_GetRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServiceServer).GetRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.chronicle.v1.RuleService/GetRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServiceServer).GetRule(ctx, req.(*GetRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleService_ListRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServiceServer).ListRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.chronicle.v1.RuleService/ListRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServiceServer).ListRules(ctx, req.(*ListRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleService_UpdateRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServiceServer).UpdateRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.chronicle.v1.RuleService/UpdateRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServiceServer).UpdateRule(ctx, req.(*UpdateRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleService_DeleteRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServiceServer).DeleteRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.chronicle.v1.RuleService/DeleteRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServiceServer).DeleteRule(ctx, req.(*DeleteRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleService_ListRuleRevisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRuleRevisionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServiceServer).ListRuleRevisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.chronicle.v1.RuleService/ListRuleRevisions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServiceServer).ListRuleRevisions(ctx, req.(*ListRuleRevisionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleService_CreateRetrohunt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRetrohuntRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServiceServer).CreateRetrohunt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.chronicle.v1.RuleService/CreateRetrohunt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServiceServer).CreateRetrohunt(ctx, req.(*CreateRetrohuntRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleService_GetRetrohunt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRetrohuntRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServiceServer).GetRetrohunt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.chronicle.v1.RuleService/GetRetrohunt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServiceServer).GetRetrohunt(ctx, req.(*GetRetrohuntRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleService_ListRetrohunts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRetrohuntsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServiceServer).ListRetrohunts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.chronicle.v1.RuleService/ListRetrohunts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServiceServer).ListRetrohunts(ctx, req.(*ListRetrohuntsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleService_GetRuleDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRuleDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServiceServer).GetRuleDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.chronicle.v1.RuleService/GetRuleDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServiceServer).GetRuleDeployment(ctx, req.(*GetRuleDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleService_ListRuleDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRuleDeploymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServiceServer).ListRuleDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.chronicle.v1.RuleService/ListRuleDeployments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServiceServer).ListRuleDeployments(ctx, req.(*ListRuleDeploymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleService_UpdateRuleDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRuleDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServiceServer).UpdateRuleDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.chronicle.v1.RuleService/UpdateRuleDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServiceServer).UpdateRuleDeployment(ctx, req.(*UpdateRuleDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RuleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.chronicle.v1.RuleService",
	HandlerType: (*RuleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRule",
			Handler:    _RuleService_CreateRule_Handler,
		},
		{
			MethodName: "GetRule",
			Handler:    _RuleService_GetRule_Handler,
		},
		{
			MethodName: "ListRules",
			Handler:    _RuleService_ListRules_Handler,
		},
		{
			MethodName: "UpdateRule",
			Handler:    _RuleService_UpdateRule_Handler,
		},
		{
			MethodName: "DeleteRule",
			Handler:    _RuleService_DeleteRule_Handler,
		},
		{
			MethodName: "ListRuleRevisions",
			Handler:    _RuleService_ListRuleRevisions_Handler,
		},
		{
			MethodName: "CreateRetrohunt",
			Handler:    _RuleService_CreateRetrohunt_Handler,
		},
		{
			MethodName: "GetRetrohunt",
			Handler:    _RuleService_GetRetrohunt_Handler,
		},
		{
			MethodName: "ListRetrohunts",
			Handler:    _RuleService_ListRetrohunts_Handler,
		},
		{
			MethodName: "GetRuleDeployment",
			Handler:    _RuleService_GetRuleDeployment_Handler,
		},
		{
			MethodName: "ListRuleDeployments",
			Handler:    _RuleService_ListRuleDeployments_Handler,
		},
		{
			MethodName: "UpdateRuleDeployment",
			Handler:    _RuleService_UpdateRuleDeployment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/chronicle/v1/rule.proto",
}
