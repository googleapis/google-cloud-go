// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/chronicle/v1/rule.proto

package chroniclepb

import (
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RuleService_CreateRule_FullMethodName           = "/google.cloud.chronicle.v1.RuleService/CreateRule"
	RuleService_GetRule_FullMethodName              = "/google.cloud.chronicle.v1.RuleService/GetRule"
	RuleService_ListRules_FullMethodName            = "/google.cloud.chronicle.v1.RuleService/ListRules"
	RuleService_UpdateRule_FullMethodName           = "/google.cloud.chronicle.v1.RuleService/UpdateRule"
	RuleService_DeleteRule_FullMethodName           = "/google.cloud.chronicle.v1.RuleService/DeleteRule"
	RuleService_ListRuleRevisions_FullMethodName    = "/google.cloud.chronicle.v1.RuleService/ListRuleRevisions"
	RuleService_CreateRetrohunt_FullMethodName      = "/google.cloud.chronicle.v1.RuleService/CreateRetrohunt"
	RuleService_GetRetrohunt_FullMethodName         = "/google.cloud.chronicle.v1.RuleService/GetRetrohunt"
	RuleService_ListRetrohunts_FullMethodName       = "/google.cloud.chronicle.v1.RuleService/ListRetrohunts"
	RuleService_GetRuleDeployment_FullMethodName    = "/google.cloud.chronicle.v1.RuleService/GetRuleDeployment"
	RuleService_ListRuleDeployments_FullMethodName  = "/google.cloud.chronicle.v1.RuleService/ListRuleDeployments"
	RuleService_UpdateRuleDeployment_FullMethodName = "/google.cloud.chronicle.v1.RuleService/UpdateRuleDeployment"
)

// RuleServiceClient is the client API for RuleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RuleServiceClient interface {
	// Creates a new Rule.
	CreateRule(ctx context.Context, in *CreateRuleRequest, opts ...grpc.CallOption) (*Rule, error)
	// Gets a Rule.
	GetRule(ctx context.Context, in *GetRuleRequest, opts ...grpc.CallOption) (*Rule, error)
	// Lists Rules.
	ListRules(ctx context.Context, in *ListRulesRequest, opts ...grpc.CallOption) (*ListRulesResponse, error)
	// Updates a Rule.
	UpdateRule(ctx context.Context, in *UpdateRuleRequest, opts ...grpc.CallOption) (*Rule, error)
	// Deletes a Rule.
	DeleteRule(ctx context.Context, in *DeleteRuleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Lists all revisions of the rule.
	ListRuleRevisions(ctx context.Context, in *ListRuleRevisionsRequest, opts ...grpc.CallOption) (*ListRuleRevisionsResponse, error)
	// Create a Retrohunt.
	CreateRetrohunt(ctx context.Context, in *CreateRetrohuntRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Get a Retrohunt.
	GetRetrohunt(ctx context.Context, in *GetRetrohuntRequest, opts ...grpc.CallOption) (*Retrohunt, error)
	// List Retrohunts.
	ListRetrohunts(ctx context.Context, in *ListRetrohuntsRequest, opts ...grpc.CallOption) (*ListRetrohuntsResponse, error)
	// Gets a RuleDeployment.
	GetRuleDeployment(ctx context.Context, in *GetRuleDeploymentRequest, opts ...grpc.CallOption) (*RuleDeployment, error)
	// Lists RuleDeployments across all Rules.
	ListRuleDeployments(ctx context.Context, in *ListRuleDeploymentsRequest, opts ...grpc.CallOption) (*ListRuleDeploymentsResponse, error)
	// Updates a RuleDeployment.
	// Failures are not necessarily atomic. If there is a request to update
	// multiple fields, and any update to a single field fails, an error will be
	// returned, but other fields may remain successfully updated.
	UpdateRuleDeployment(ctx context.Context, in *UpdateRuleDeploymentRequest, opts ...grpc.CallOption) (*RuleDeployment, error)
}

type ruleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRuleServiceClient(cc grpc.ClientConnInterface) RuleServiceClient {
	return &ruleServiceClient{cc}
}

func (c *ruleServiceClient) CreateRule(ctx context.Context, in *CreateRuleRequest, opts ...grpc.CallOption) (*Rule, error) {
	out := new(Rule)
	err := c.cc.Invoke(ctx, RuleService_CreateRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleServiceClient) GetRule(ctx context.Context, in *GetRuleRequest, opts ...grpc.CallOption) (*Rule, error) {
	out := new(Rule)
	err := c.cc.Invoke(ctx, RuleService_GetRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleServiceClient) ListRules(ctx context.Context, in *ListRulesRequest, opts ...grpc.CallOption) (*ListRulesResponse, error) {
	out := new(ListRulesResponse)
	err := c.cc.Invoke(ctx, RuleService_ListRules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleServiceClient) UpdateRule(ctx context.Context, in *UpdateRuleRequest, opts ...grpc.CallOption) (*Rule, error) {
	out := new(Rule)
	err := c.cc.Invoke(ctx, RuleService_UpdateRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleServiceClient) DeleteRule(ctx context.Context, in *DeleteRuleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RuleService_DeleteRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleServiceClient) ListRuleRevisions(ctx context.Context, in *ListRuleRevisionsRequest, opts ...grpc.CallOption) (*ListRuleRevisionsResponse, error) {
	out := new(ListRuleRevisionsResponse)
	err := c.cc.Invoke(ctx, RuleService_ListRuleRevisions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleServiceClient) CreateRetrohunt(ctx context.Context, in *CreateRetrohuntRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, RuleService_CreateRetrohunt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleServiceClient) GetRetrohunt(ctx context.Context, in *GetRetrohuntRequest, opts ...grpc.CallOption) (*Retrohunt, error) {
	out := new(Retrohunt)
	err := c.cc.Invoke(ctx, RuleService_GetRetrohunt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleServiceClient) ListRetrohunts(ctx context.Context, in *ListRetrohuntsRequest, opts ...grpc.CallOption) (*ListRetrohuntsResponse, error) {
	out := new(ListRetrohuntsResponse)
	err := c.cc.Invoke(ctx, RuleService_ListRetrohunts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleServiceClient) GetRuleDeployment(ctx context.Context, in *GetRuleDeploymentRequest, opts ...grpc.CallOption) (*RuleDeployment, error) {
	out := new(RuleDeployment)
	err := c.cc.Invoke(ctx, RuleService_GetRuleDeployment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleServiceClient) ListRuleDeployments(ctx context.Context, in *ListRuleDeploymentsRequest, opts ...grpc.CallOption) (*ListRuleDeploymentsResponse, error) {
	out := new(ListRuleDeploymentsResponse)
	err := c.cc.Invoke(ctx, RuleService_ListRuleDeployments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleServiceClient) UpdateRuleDeployment(ctx context.Context, in *UpdateRuleDeploymentRequest, opts ...grpc.CallOption) (*RuleDeployment, error) {
	out := new(RuleDeployment)
	err := c.cc.Invoke(ctx, RuleService_UpdateRuleDeployment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RuleServiceServer is the server API for RuleService service.
// All implementations should embed UnimplementedRuleServiceServer
// for forward compatibility
type RuleServiceServer interface {
	// Creates a new Rule.
	CreateRule(context.Context, *CreateRuleRequest) (*Rule, error)
	// Gets a Rule.
	GetRule(context.Context, *GetRuleRequest) (*Rule, error)
	// Lists Rules.
	ListRules(context.Context, *ListRulesRequest) (*ListRulesResponse, error)
	// Updates a Rule.
	UpdateRule(context.Context, *UpdateRuleRequest) (*Rule, error)
	// Deletes a Rule.
	DeleteRule(context.Context, *DeleteRuleRequest) (*emptypb.Empty, error)
	// Lists all revisions of the rule.
	ListRuleRevisions(context.Context, *ListRuleRevisionsRequest) (*ListRuleRevisionsResponse, error)
	// Create a Retrohunt.
	CreateRetrohunt(context.Context, *CreateRetrohuntRequest) (*longrunningpb.Operation, error)
	// Get a Retrohunt.
	GetRetrohunt(context.Context, *GetRetrohuntRequest) (*Retrohunt, error)
	// List Retrohunts.
	ListRetrohunts(context.Context, *ListRetrohuntsRequest) (*ListRetrohuntsResponse, error)
	// Gets a RuleDeployment.
	GetRuleDeployment(context.Context, *GetRuleDeploymentRequest) (*RuleDeployment, error)
	// Lists RuleDeployments across all Rules.
	ListRuleDeployments(context.Context, *ListRuleDeploymentsRequest) (*ListRuleDeploymentsResponse, error)
	// Updates a RuleDeployment.
	// Failures are not necessarily atomic. If there is a request to update
	// multiple fields, and any update to a single field fails, an error will be
	// returned, but other fields may remain successfully updated.
	UpdateRuleDeployment(context.Context, *UpdateRuleDeploymentRequest) (*RuleDeployment, error)
}

// UnimplementedRuleServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRuleServiceServer struct {
}

func (UnimplementedRuleServiceServer) CreateRule(context.Context, *CreateRuleRequest) (*Rule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRule not implemented")
}
func (UnimplementedRuleServiceServer) GetRule(context.Context, *GetRuleRequest) (*Rule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRule not implemented")
}
func (UnimplementedRuleServiceServer) ListRules(context.Context, *ListRulesRequest) (*ListRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRules not implemented")
}
func (UnimplementedRuleServiceServer) UpdateRule(context.Context, *UpdateRuleRequest) (*Rule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRule not implemented")
}
func (UnimplementedRuleServiceServer) DeleteRule(context.Context, *DeleteRuleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRule not implemented")
}
func (UnimplementedRuleServiceServer) ListRuleRevisions(context.Context, *ListRuleRevisionsRequest) (*ListRuleRevisionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRuleRevisions not implemented")
}
func (UnimplementedRuleServiceServer) CreateRetrohunt(context.Context, *CreateRetrohuntRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRetrohunt not implemented")
}
func (UnimplementedRuleServiceServer) GetRetrohunt(context.Context, *GetRetrohuntRequest) (*Retrohunt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRetrohunt not implemented")
}
func (UnimplementedRuleServiceServer) ListRetrohunts(context.Context, *ListRetrohuntsRequest) (*ListRetrohuntsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRetrohunts not implemented")
}
func (UnimplementedRuleServiceServer) GetRuleDeployment(context.Context, *GetRuleDeploymentRequest) (*RuleDeployment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRuleDeployment not implemented")
}
func (UnimplementedRuleServiceServer) ListRuleDeployments(context.Context, *ListRuleDeploymentsRequest) (*ListRuleDeploymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRuleDeployments not implemented")
}
func (UnimplementedRuleServiceServer) UpdateRuleDeployment(context.Context, *UpdateRuleDeploymentRequest) (*RuleDeployment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRuleDeployment not implemented")
}

// UnsafeRuleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RuleServiceServer will
// result in compilation errors.
type UnsafeRuleServiceServer interface {
	mustEmbedUnimplementedRuleServiceServer()
}

func RegisterRuleServiceServer(s grpc.ServiceRegistrar, srv RuleServiceServer) {
	s.RegisterService(&RuleService_ServiceDesc, srv)
}

func _RuleService_CreateRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServiceServer).CreateRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleService_CreateRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServiceServer).CreateRule(ctx, req.(*CreateRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleService_GetRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServiceServer).GetRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleService_GetRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServiceServer).GetRule(ctx, req.(*GetRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleService_ListRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServiceServer).ListRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleService_ListRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServiceServer).ListRules(ctx, req.(*ListRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleService_UpdateRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServiceServer).UpdateRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleService_UpdateRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServiceServer).UpdateRule(ctx, req.(*UpdateRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleService_DeleteRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServiceServer).DeleteRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleService_DeleteRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServiceServer).DeleteRule(ctx, req.(*DeleteRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleService_ListRuleRevisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRuleRevisionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServiceServer).ListRuleRevisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleService_ListRuleRevisions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServiceServer).ListRuleRevisions(ctx, req.(*ListRuleRevisionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleService_CreateRetrohunt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRetrohuntRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServiceServer).CreateRetrohunt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleService_CreateRetrohunt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServiceServer).CreateRetrohunt(ctx, req.(*CreateRetrohuntRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleService_GetRetrohunt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRetrohuntRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServiceServer).GetRetrohunt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleService_GetRetrohunt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServiceServer).GetRetrohunt(ctx, req.(*GetRetrohuntRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleService_ListRetrohunts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRetrohuntsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServiceServer).ListRetrohunts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleService_ListRetrohunts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServiceServer).ListRetrohunts(ctx, req.(*ListRetrohuntsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleService_GetRuleDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRuleDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServiceServer).GetRuleDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleService_GetRuleDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServiceServer).GetRuleDeployment(ctx, req.(*GetRuleDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleService_ListRuleDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRuleDeploymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServiceServer).ListRuleDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleService_ListRuleDeployments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServiceServer).ListRuleDeployments(ctx, req.(*ListRuleDeploymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleService_UpdateRuleDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRuleDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServiceServer).UpdateRuleDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleService_UpdateRuleDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServiceServer).UpdateRuleDeployment(ctx, req.(*UpdateRuleDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RuleService_ServiceDesc is the grpc.ServiceDesc for RuleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RuleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.chronicle.v1.RuleService",
	HandlerType: (*RuleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRule",
			Handler:    _RuleService_CreateRule_Handler,
		},
		{
			MethodName: "GetRule",
			Handler:    _RuleService_GetRule_Handler,
		},
		{
			MethodName: "ListRules",
			Handler:    _RuleService_ListRules_Handler,
		},
		{
			MethodName: "UpdateRule",
			Handler:    _RuleService_UpdateRule_Handler,
		},
		{
			MethodName: "DeleteRule",
			Handler:    _RuleService_DeleteRule_Handler,
		},
		{
			MethodName: "ListRuleRevisions",
			Handler:    _RuleService_ListRuleRevisions_Handler,
		},
		{
			MethodName: "CreateRetrohunt",
			Handler:    _RuleService_CreateRetrohunt_Handler,
		},
		{
			MethodName: "GetRetrohunt",
			Handler:    _RuleService_GetRetrohunt_Handler,
		},
		{
			MethodName: "ListRetrohunts",
			Handler:    _RuleService_ListRetrohunts_Handler,
		},
		{
			MethodName: "GetRuleDeployment",
			Handler:    _RuleService_GetRuleDeployment_Handler,
		},
		{
			MethodName: "ListRuleDeployments",
			Handler:    _RuleService_ListRuleDeployments_Handler,
		},
		{
			MethodName: "UpdateRuleDeployment",
			Handler:    _RuleService_UpdateRuleDeployment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/chronicle/v1/rule.proto",
}
