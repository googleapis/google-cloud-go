// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.3
// source: google/cloud/chronicle/v1/reference_list.proto

package chroniclepb

import (
	context "context"
	reflect "reflect"
	sync "sync"

	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The syntax type indicating how list entries should be validated.
type ReferenceListSyntaxType int32

const (
	// Defaults to REFERENCE_LIST_SYNTAX_TYPE_PLAIN_TEXT_STRING.
	ReferenceListSyntaxType_REFERENCE_LIST_SYNTAX_TYPE_UNSPECIFIED ReferenceListSyntaxType = 0
	// List contains plain text patterns.
	ReferenceListSyntaxType_REFERENCE_LIST_SYNTAX_TYPE_PLAIN_TEXT_STRING ReferenceListSyntaxType = 1
	// List contains only Regular Expression patterns.
	ReferenceListSyntaxType_REFERENCE_LIST_SYNTAX_TYPE_REGEX ReferenceListSyntaxType = 2
	// List contains only CIDR patterns.
	ReferenceListSyntaxType_REFERENCE_LIST_SYNTAX_TYPE_CIDR ReferenceListSyntaxType = 3
)

// Enum value maps for ReferenceListSyntaxType.
var (
	ReferenceListSyntaxType_name = map[int32]string{
		0: "REFERENCE_LIST_SYNTAX_TYPE_UNSPECIFIED",
		1: "REFERENCE_LIST_SYNTAX_TYPE_PLAIN_TEXT_STRING",
		2: "REFERENCE_LIST_SYNTAX_TYPE_REGEX",
		3: "REFERENCE_LIST_SYNTAX_TYPE_CIDR",
	}
	ReferenceListSyntaxType_value = map[string]int32{
		"REFERENCE_LIST_SYNTAX_TYPE_UNSPECIFIED":       0,
		"REFERENCE_LIST_SYNTAX_TYPE_PLAIN_TEXT_STRING": 1,
		"REFERENCE_LIST_SYNTAX_TYPE_REGEX":             2,
		"REFERENCE_LIST_SYNTAX_TYPE_CIDR":              3,
	}
)

func (x ReferenceListSyntaxType) Enum() *ReferenceListSyntaxType {
	p := new(ReferenceListSyntaxType)
	*p = x
	return p
}

func (x ReferenceListSyntaxType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReferenceListSyntaxType) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_chronicle_v1_reference_list_proto_enumTypes[0].Descriptor()
}

func (ReferenceListSyntaxType) Type() protoreflect.EnumType {
	return &file_google_cloud_chronicle_v1_reference_list_proto_enumTypes[0]
}

func (x ReferenceListSyntaxType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReferenceListSyntaxType.Descriptor instead.
func (ReferenceListSyntaxType) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_reference_list_proto_rawDescGZIP(), []int{0}
}

// ReferenceListView is a mechanism for viewing partial responses of the
// ReferenceList resource.
type ReferenceListView int32

const (
	// The default / unset value.
	// The API will default to the BASIC view for ListReferenceLists.
	// The API will default to the FULL view for methods that return a single
	// ReferenceList resource.
	ReferenceListView_REFERENCE_LIST_VIEW_UNSPECIFIED ReferenceListView = 0
	// Include metadata about the ReferenceList.
	// This is the default view for ListReferenceLists.
	ReferenceListView_REFERENCE_LIST_VIEW_BASIC ReferenceListView = 1
	// Include all details about the ReferenceList: metadata, content lines,
	// associated rule counts. This is the default view for GetReferenceList.
	ReferenceListView_REFERENCE_LIST_VIEW_FULL ReferenceListView = 2
)

// Enum value maps for ReferenceListView.
var (
	ReferenceListView_name = map[int32]string{
		0: "REFERENCE_LIST_VIEW_UNSPECIFIED",
		1: "REFERENCE_LIST_VIEW_BASIC",
		2: "REFERENCE_LIST_VIEW_FULL",
	}
	ReferenceListView_value = map[string]int32{
		"REFERENCE_LIST_VIEW_UNSPECIFIED": 0,
		"REFERENCE_LIST_VIEW_BASIC":       1,
		"REFERENCE_LIST_VIEW_FULL":        2,
	}
)

func (x ReferenceListView) Enum() *ReferenceListView {
	p := new(ReferenceListView)
	*p = x
	return p
}

func (x ReferenceListView) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReferenceListView) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_chronicle_v1_reference_list_proto_enumTypes[1].Descriptor()
}

func (ReferenceListView) Type() protoreflect.EnumType {
	return &file_google_cloud_chronicle_v1_reference_list_proto_enumTypes[1]
}

func (x ReferenceListView) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReferenceListView.Descriptor instead.
func (ReferenceListView) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_reference_list_proto_rawDescGZIP(), []int{1}
}

// ScopeInfo specifies the scope info of the reference list.
type ScopeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The list of scope names of the reference list, if the list is
	// empty the reference list is treated as unscoped.
	ReferenceListScope *ReferenceListScope `protobuf:"bytes,2,opt,name=reference_list_scope,json=referenceListScope,proto3" json:"reference_list_scope,omitempty"`
}

func (x *ScopeInfo) Reset() {
	*x = ScopeInfo{}
	mi := &file_google_cloud_chronicle_v1_reference_list_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScopeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScopeInfo) ProtoMessage() {}

func (x *ScopeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_reference_list_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScopeInfo.ProtoReflect.Descriptor instead.
func (*ScopeInfo) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_reference_list_proto_rawDescGZIP(), []int{0}
}

func (x *ScopeInfo) GetReferenceListScope() *ReferenceListScope {
	if x != nil {
		return x.ReferenceListScope
	}
	return nil
}

// ReferenceListScope specifies the list of scope names of the reference list.
type ReferenceListScope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The list of scope names of the reference list. The scope names
	// should be full resource names and should be of the format:
	// `projects/{project}/locations/{location}/instances/{instance}/dataAccessScopes/{scope_name}`.
	ScopeNames []string `protobuf:"bytes,1,rep,name=scope_names,json=scopeNames,proto3" json:"scope_names,omitempty"`
}

func (x *ReferenceListScope) Reset() {
	*x = ReferenceListScope{}
	mi := &file_google_cloud_chronicle_v1_reference_list_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReferenceListScope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceListScope) ProtoMessage() {}

func (x *ReferenceListScope) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_reference_list_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceListScope.ProtoReflect.Descriptor instead.
func (*ReferenceListScope) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_reference_list_proto_rawDescGZIP(), []int{1}
}

func (x *ReferenceListScope) GetScopeNames() []string {
	if x != nil {
		return x.ScopeNames
	}
	return nil
}

// A request to get details about a reference list.
type GetReferenceListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The resource name of the reference list to retrieve.
	// Format:
	// `projects/{project}/locations/{locations}/instances/{instance}/referenceLists/{reference_list}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// How much of the ReferenceList to view. Defaults to
	// REFERENCE_LIST_VIEW_FULL.
	View ReferenceListView `protobuf:"varint,2,opt,name=view,proto3,enum=google.cloud.chronicle.v1.ReferenceListView" json:"view,omitempty"`
}

func (x *GetReferenceListRequest) Reset() {
	*x = GetReferenceListRequest{}
	mi := &file_google_cloud_chronicle_v1_reference_list_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetReferenceListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReferenceListRequest) ProtoMessage() {}

func (x *GetReferenceListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_reference_list_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReferenceListRequest.ProtoReflect.Descriptor instead.
func (*GetReferenceListRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_reference_list_proto_rawDescGZIP(), []int{2}
}

func (x *GetReferenceListRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetReferenceListRequest) GetView() ReferenceListView {
	if x != nil {
		return x.View
	}
	return ReferenceListView_REFERENCE_LIST_VIEW_UNSPECIFIED
}

// A request for a list of reference lists.
type ListReferenceListsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent, which owns this collection of reference lists.
	// Format:
	// `projects/{project}/locations/{location}/instances/{instance}`
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The maximum number of reference lists to return.
	// The service may return fewer than this value.
	// If unspecified, at most 100 reference lists will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListReferenceLists` call.
	// Provide this to retrieve the subsequent page.
	// When paginating, all other parameters provided to `ListReferenceLists` must
	// match the call that provided the page token.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// How much of each ReferenceList to view. Defaults to
	// REFERENCE_LIST_VIEW_BASIC.
	View ReferenceListView `protobuf:"varint,4,opt,name=view,proto3,enum=google.cloud.chronicle.v1.ReferenceListView" json:"view,omitempty"`
}

func (x *ListReferenceListsRequest) Reset() {
	*x = ListReferenceListsRequest{}
	mi := &file_google_cloud_chronicle_v1_reference_list_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListReferenceListsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReferenceListsRequest) ProtoMessage() {}

func (x *ListReferenceListsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_reference_list_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReferenceListsRequest.ProtoReflect.Descriptor instead.
func (*ListReferenceListsRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_reference_list_proto_rawDescGZIP(), []int{3}
}

func (x *ListReferenceListsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListReferenceListsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListReferenceListsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListReferenceListsRequest) GetView() ReferenceListView {
	if x != nil {
		return x.View
	}
	return ReferenceListView_REFERENCE_LIST_VIEW_UNSPECIFIED
}

// A response to a request for a list of reference lists.
type ListReferenceListsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The reference lists.
	// Ordered in ascending alphabetical order by name.
	ReferenceLists []*ReferenceList `protobuf:"bytes,1,rep,name=reference_lists,json=referenceLists,proto3" json:"reference_lists,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListReferenceListsResponse) Reset() {
	*x = ListReferenceListsResponse{}
	mi := &file_google_cloud_chronicle_v1_reference_list_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListReferenceListsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReferenceListsResponse) ProtoMessage() {}

func (x *ListReferenceListsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_reference_list_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReferenceListsResponse.ProtoReflect.Descriptor instead.
func (*ListReferenceListsResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_reference_list_proto_rawDescGZIP(), []int{4}
}

func (x *ListReferenceListsResponse) GetReferenceLists() []*ReferenceList {
	if x != nil {
		return x.ReferenceLists
	}
	return nil
}

func (x *ListReferenceListsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// A request to create a reference list.
type CreateReferenceListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent resource where this reference list will be created.
	// Format: `projects/{project}/locations/{location}/instances/{instance}`
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Required. The reference list to create.
	ReferenceList *ReferenceList `protobuf:"bytes,2,opt,name=reference_list,json=referenceList,proto3" json:"reference_list,omitempty"`
	// Required. The ID to use for the reference list. This is also the display
	// name for the reference list. It must satisfy the following requirements:
	// - Starts with letter.
	// - Contains only letters, numbers and underscore.
	// - Has length less than 256.
	// - Must be unique.
	ReferenceListId string `protobuf:"bytes,3,opt,name=reference_list_id,json=referenceListId,proto3" json:"reference_list_id,omitempty"`
}

func (x *CreateReferenceListRequest) Reset() {
	*x = CreateReferenceListRequest{}
	mi := &file_google_cloud_chronicle_v1_reference_list_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateReferenceListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReferenceListRequest) ProtoMessage() {}

func (x *CreateReferenceListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_reference_list_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReferenceListRequest.ProtoReflect.Descriptor instead.
func (*CreateReferenceListRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_reference_list_proto_rawDescGZIP(), []int{5}
}

func (x *CreateReferenceListRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateReferenceListRequest) GetReferenceList() *ReferenceList {
	if x != nil {
		return x.ReferenceList
	}
	return nil
}

func (x *CreateReferenceListRequest) GetReferenceListId() string {
	if x != nil {
		return x.ReferenceListId
	}
	return ""
}

// A request to update a reference list.
type UpdateReferenceListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The reference list to update.
	//
	// The reference list's `name` field is used to identify the reference list to
	// update.
	// Format:
	// `projects/{project}/locations/{locations}/instances/{instance}/referenceLists/{reference_list}`
	ReferenceList *ReferenceList `protobuf:"bytes,1,opt,name=reference_list,json=referenceList,proto3" json:"reference_list,omitempty"`
	// The list of fields to update.
	// When no field mask is supplied, all non-empty fields will be updated.
	// A field mask of "*" will update all fields, whether empty or not.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateReferenceListRequest) Reset() {
	*x = UpdateReferenceListRequest{}
	mi := &file_google_cloud_chronicle_v1_reference_list_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateReferenceListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReferenceListRequest) ProtoMessage() {}

func (x *UpdateReferenceListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_reference_list_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReferenceListRequest.ProtoReflect.Descriptor instead.
func (*UpdateReferenceListRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_reference_list_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateReferenceListRequest) GetReferenceList() *ReferenceList {
	if x != nil {
		return x.ReferenceList
	}
	return nil
}

func (x *UpdateReferenceListRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// A reference list.
// Reference lists are user-defined lists of values which users can
// use in multiple Rules.
type ReferenceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier. The resource name of the reference list.
	// Format:
	// `projects/{project}/locations/{location}/instances/{instance}/referenceLists/{reference_list}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. The unique display name of the reference list.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Output only. The timestamp when the reference list was last updated.
	RevisionCreateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=revision_create_time,json=revisionCreateTime,proto3" json:"revision_create_time,omitempty"`
	// Required. A user-provided description of the reference list.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Required. The entries of the reference list.
	// When listed, they are returned in the order that was specified at creation
	// or update. The combined size of the values of the reference list may not
	// exceed 6MB.
	// This is returned only when the view is REFERENCE_LIST_VIEW_FULL.
	Entries []*ReferenceListEntry `protobuf:"bytes,5,rep,name=entries,proto3" json:"entries,omitempty"`
	// Output only. The resource names for the associated self-authored Rules that
	// use this reference list. This is returned only when the view is
	// REFERENCE_LIST_VIEW_FULL.
	Rules []string `protobuf:"bytes,6,rep,name=rules,proto3" json:"rules,omitempty"`
	// Required. The syntax type indicating how list entries should be validated.
	SyntaxType ReferenceListSyntaxType `protobuf:"varint,8,opt,name=syntax_type,json=syntaxType,proto3,enum=google.cloud.chronicle.v1.ReferenceListSyntaxType" json:"syntax_type,omitempty"`
	// Output only. The count of self-authored rules using the reference list.
	RuleAssociationsCount int32 `protobuf:"varint,9,opt,name=rule_associations_count,json=ruleAssociationsCount,proto3" json:"rule_associations_count,omitempty"`
	// The scope info of the reference list.
	// During reference list creation, if this field is not set, the reference
	// list without scopes (an unscoped list) will be created for an unscoped
	// user. For a scoped user, this field must be set. During reference list
	// update, if scope_info is requested to be updated, this field must be set.
	ScopeInfo *ScopeInfo `protobuf:"bytes,11,opt,name=scope_info,json=scopeInfo,proto3" json:"scope_info,omitempty"`
}

func (x *ReferenceList) Reset() {
	*x = ReferenceList{}
	mi := &file_google_cloud_chronicle_v1_reference_list_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReferenceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceList) ProtoMessage() {}

func (x *ReferenceList) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_reference_list_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceList.ProtoReflect.Descriptor instead.
func (*ReferenceList) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_reference_list_proto_rawDescGZIP(), []int{7}
}

func (x *ReferenceList) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReferenceList) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ReferenceList) GetRevisionCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.RevisionCreateTime
	}
	return nil
}

func (x *ReferenceList) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ReferenceList) GetEntries() []*ReferenceListEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *ReferenceList) GetRules() []string {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *ReferenceList) GetSyntaxType() ReferenceListSyntaxType {
	if x != nil {
		return x.SyntaxType
	}
	return ReferenceListSyntaxType_REFERENCE_LIST_SYNTAX_TYPE_UNSPECIFIED
}

func (x *ReferenceList) GetRuleAssociationsCount() int32 {
	if x != nil {
		return x.RuleAssociationsCount
	}
	return 0
}

func (x *ReferenceList) GetScopeInfo() *ScopeInfo {
	if x != nil {
		return x.ScopeInfo
	}
	return nil
}

// An entry in a reference list.
type ReferenceListEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The value of the entry. Maximum length is 512 characters.
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ReferenceListEntry) Reset() {
	*x = ReferenceListEntry{}
	mi := &file_google_cloud_chronicle_v1_reference_list_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReferenceListEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceListEntry) ProtoMessage() {}

func (x *ReferenceListEntry) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_chronicle_v1_reference_list_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceListEntry.ProtoReflect.Descriptor instead.
func (*ReferenceListEntry) Descriptor() ([]byte, []int) {
	return file_google_cloud_chronicle_v1_reference_list_proto_rawDescGZIP(), []int{8}
}

func (x *ReferenceListEntry) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_google_cloud_chronicle_v1_reference_list_proto protoreflect.FileDescriptor

var file_google_cloud_chronicle_v1_reference_list_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63,
	0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x71, 0x0a, 0x09, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x64,
	0x0a, 0x14, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f,
	0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x12, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x22, 0x3a, 0x0a, 0x12, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x22, 0x9f, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xe0, 0x41, 0x02, 0xfa,
	0x41, 0x28, 0x0a, 0x26, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x40, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68,
	0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69,
	0x65, 0x77, 0x22, 0xe1, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x46, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2e, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x28, 0x12, 0x26, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69,
	0x63, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x40, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77,
	0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0x97, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68,
	0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0xeb, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x46, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2e, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x28, 0x12, 0x26, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63,
	0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x54, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a,
	0x11, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x22, 0xaf,
	0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a,
	0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b,
	0x22, 0x9c, 0x05, 0x0a, 0x0d, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x08, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x14, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x12, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a,
	0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68,
	0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x0b, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e,
	0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x3b, 0x0a, 0x17, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x15, 0x72, 0x75, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x43, 0x0a,
	0x0a, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x3a, 0x8a, 0x01, 0xea, 0x41, 0x86, 0x01, 0x0a, 0x26, 0x63, 0x68, 0x72, 0x6f, 0x6e,
	0x69, 0x63, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x5c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x2f, 0x7b,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x7d, 0x22,
	0x2f, 0x0a, 0x12, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x2a, 0xc2, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x26,
	0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x53,
	0x59, 0x4e, 0x54, 0x41, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x30, 0x0a, 0x2c, 0x52, 0x45, 0x46, 0x45,
	0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x53, 0x59, 0x4e, 0x54, 0x41,
	0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x49, 0x4e, 0x5f, 0x54, 0x45, 0x58,
	0x54, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x45,
	0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x53, 0x59, 0x4e,
	0x54, 0x41, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x45, 0x58, 0x10, 0x02,
	0x12, 0x23, 0x0a, 0x1f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x4c, 0x49,
	0x53, 0x54, 0x5f, 0x53, 0x59, 0x4e, 0x54, 0x41, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x49, 0x44, 0x52, 0x10, 0x03, 0x2a, 0x75, 0x0a, 0x11, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x45,
	0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x56, 0x49, 0x45,
	0x57, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x1d, 0x0a, 0x19, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x01, 0x12, 0x1c,
	0x0a, 0x18, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54,
	0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x02, 0x32, 0xf5, 0x07, 0x0a,
	0x14, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xbf, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69,
	0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68,
	0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x4d, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x40, 0x12, 0x3e, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xd2, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x34,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68,
	0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4f, 0xda, 0x41, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x40, 0x12, 0x3e, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a,
	0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0xf9, 0x01, 0x0a,
	0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e,
	0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x80, 0x01, 0xda, 0x41, 0x27, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x2c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x2c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x50, 0x3a, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x3e, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a,
	0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0xfb, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x82, 0x01, 0xda, 0x41, 0x1a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5f, 0x3a, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x32, 0x4d, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x1a, 0x4c, 0xca, 0x41, 0x18, 0x63, 0x68, 0x72, 0x6f, 0x6e,
	0x69, 0x63, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77,
	0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x42, 0xc5, 0x01, 0x0a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x42, 0x12, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x68,
	0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2f, 0x63, 0x68,
	0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x70, 0x62, 0x3b, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69,
	0x63, 0x6c, 0x65, 0x70, 0x62, 0xaa, 0x02, 0x19, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x56,
	0x31, 0xca, 0x02, 0x19, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5c, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x5c, 0x43, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x5c, 0x56, 0x31, 0xea, 0x02, 0x1c,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x43,
	0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x6c, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_chronicle_v1_reference_list_proto_rawDescOnce sync.Once
	file_google_cloud_chronicle_v1_reference_list_proto_rawDescData = file_google_cloud_chronicle_v1_reference_list_proto_rawDesc
)

func file_google_cloud_chronicle_v1_reference_list_proto_rawDescGZIP() []byte {
	file_google_cloud_chronicle_v1_reference_list_proto_rawDescOnce.Do(func() {
		file_google_cloud_chronicle_v1_reference_list_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_chronicle_v1_reference_list_proto_rawDescData)
	})
	return file_google_cloud_chronicle_v1_reference_list_proto_rawDescData
}

var file_google_cloud_chronicle_v1_reference_list_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_google_cloud_chronicle_v1_reference_list_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_google_cloud_chronicle_v1_reference_list_proto_goTypes = []any{
	(ReferenceListSyntaxType)(0),       // 0: google.cloud.chronicle.v1.ReferenceListSyntaxType
	(ReferenceListView)(0),             // 1: google.cloud.chronicle.v1.ReferenceListView
	(*ScopeInfo)(nil),                  // 2: google.cloud.chronicle.v1.ScopeInfo
	(*ReferenceListScope)(nil),         // 3: google.cloud.chronicle.v1.ReferenceListScope
	(*GetReferenceListRequest)(nil),    // 4: google.cloud.chronicle.v1.GetReferenceListRequest
	(*ListReferenceListsRequest)(nil),  // 5: google.cloud.chronicle.v1.ListReferenceListsRequest
	(*ListReferenceListsResponse)(nil), // 6: google.cloud.chronicle.v1.ListReferenceListsResponse
	(*CreateReferenceListRequest)(nil), // 7: google.cloud.chronicle.v1.CreateReferenceListRequest
	(*UpdateReferenceListRequest)(nil), // 8: google.cloud.chronicle.v1.UpdateReferenceListRequest
	(*ReferenceList)(nil),              // 9: google.cloud.chronicle.v1.ReferenceList
	(*ReferenceListEntry)(nil),         // 10: google.cloud.chronicle.v1.ReferenceListEntry
	(*fieldmaskpb.FieldMask)(nil),      // 11: google.protobuf.FieldMask
	(*timestamppb.Timestamp)(nil),      // 12: google.protobuf.Timestamp
}
var file_google_cloud_chronicle_v1_reference_list_proto_depIdxs = []int32{
	3,  // 0: google.cloud.chronicle.v1.ScopeInfo.reference_list_scope:type_name -> google.cloud.chronicle.v1.ReferenceListScope
	1,  // 1: google.cloud.chronicle.v1.GetReferenceListRequest.view:type_name -> google.cloud.chronicle.v1.ReferenceListView
	1,  // 2: google.cloud.chronicle.v1.ListReferenceListsRequest.view:type_name -> google.cloud.chronicle.v1.ReferenceListView
	9,  // 3: google.cloud.chronicle.v1.ListReferenceListsResponse.reference_lists:type_name -> google.cloud.chronicle.v1.ReferenceList
	9,  // 4: google.cloud.chronicle.v1.CreateReferenceListRequest.reference_list:type_name -> google.cloud.chronicle.v1.ReferenceList
	9,  // 5: google.cloud.chronicle.v1.UpdateReferenceListRequest.reference_list:type_name -> google.cloud.chronicle.v1.ReferenceList
	11, // 6: google.cloud.chronicle.v1.UpdateReferenceListRequest.update_mask:type_name -> google.protobuf.FieldMask
	12, // 7: google.cloud.chronicle.v1.ReferenceList.revision_create_time:type_name -> google.protobuf.Timestamp
	10, // 8: google.cloud.chronicle.v1.ReferenceList.entries:type_name -> google.cloud.chronicle.v1.ReferenceListEntry
	0,  // 9: google.cloud.chronicle.v1.ReferenceList.syntax_type:type_name -> google.cloud.chronicle.v1.ReferenceListSyntaxType
	2,  // 10: google.cloud.chronicle.v1.ReferenceList.scope_info:type_name -> google.cloud.chronicle.v1.ScopeInfo
	4,  // 11: google.cloud.chronicle.v1.ReferenceListService.GetReferenceList:input_type -> google.cloud.chronicle.v1.GetReferenceListRequest
	5,  // 12: google.cloud.chronicle.v1.ReferenceListService.ListReferenceLists:input_type -> google.cloud.chronicle.v1.ListReferenceListsRequest
	7,  // 13: google.cloud.chronicle.v1.ReferenceListService.CreateReferenceList:input_type -> google.cloud.chronicle.v1.CreateReferenceListRequest
	8,  // 14: google.cloud.chronicle.v1.ReferenceListService.UpdateReferenceList:input_type -> google.cloud.chronicle.v1.UpdateReferenceListRequest
	9,  // 15: google.cloud.chronicle.v1.ReferenceListService.GetReferenceList:output_type -> google.cloud.chronicle.v1.ReferenceList
	6,  // 16: google.cloud.chronicle.v1.ReferenceListService.ListReferenceLists:output_type -> google.cloud.chronicle.v1.ListReferenceListsResponse
	9,  // 17: google.cloud.chronicle.v1.ReferenceListService.CreateReferenceList:output_type -> google.cloud.chronicle.v1.ReferenceList
	9,  // 18: google.cloud.chronicle.v1.ReferenceListService.UpdateReferenceList:output_type -> google.cloud.chronicle.v1.ReferenceList
	15, // [15:19] is the sub-list for method output_type
	11, // [11:15] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_google_cloud_chronicle_v1_reference_list_proto_init() }
func file_google_cloud_chronicle_v1_reference_list_proto_init() {
	if File_google_cloud_chronicle_v1_reference_list_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_chronicle_v1_reference_list_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_google_cloud_chronicle_v1_reference_list_proto_goTypes,
		DependencyIndexes: file_google_cloud_chronicle_v1_reference_list_proto_depIdxs,
		EnumInfos:         file_google_cloud_chronicle_v1_reference_list_proto_enumTypes,
		MessageInfos:      file_google_cloud_chronicle_v1_reference_list_proto_msgTypes,
	}.Build()
	File_google_cloud_chronicle_v1_reference_list_proto = out.File
	file_google_cloud_chronicle_v1_reference_list_proto_rawDesc = nil
	file_google_cloud_chronicle_v1_reference_list_proto_goTypes = nil
	file_google_cloud_chronicle_v1_reference_list_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ReferenceListServiceClient is the client API for ReferenceListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReferenceListServiceClient interface {
	// Gets a single reference list.
	GetReferenceList(ctx context.Context, in *GetReferenceListRequest, opts ...grpc.CallOption) (*ReferenceList, error)
	// Lists a collection of reference lists.
	ListReferenceLists(ctx context.Context, in *ListReferenceListsRequest, opts ...grpc.CallOption) (*ListReferenceListsResponse, error)
	// Creates a new reference list.
	CreateReferenceList(ctx context.Context, in *CreateReferenceListRequest, opts ...grpc.CallOption) (*ReferenceList, error)
	// Updates an existing reference list.
	UpdateReferenceList(ctx context.Context, in *UpdateReferenceListRequest, opts ...grpc.CallOption) (*ReferenceList, error)
}

type referenceListServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReferenceListServiceClient(cc grpc.ClientConnInterface) ReferenceListServiceClient {
	return &referenceListServiceClient{cc}
}

func (c *referenceListServiceClient) GetReferenceList(ctx context.Context, in *GetReferenceListRequest, opts ...grpc.CallOption) (*ReferenceList, error) {
	out := new(ReferenceList)
	err := c.cc.Invoke(ctx, "/google.cloud.chronicle.v1.ReferenceListService/GetReferenceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referenceListServiceClient) ListReferenceLists(ctx context.Context, in *ListReferenceListsRequest, opts ...grpc.CallOption) (*ListReferenceListsResponse, error) {
	out := new(ListReferenceListsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.chronicle.v1.ReferenceListService/ListReferenceLists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referenceListServiceClient) CreateReferenceList(ctx context.Context, in *CreateReferenceListRequest, opts ...grpc.CallOption) (*ReferenceList, error) {
	out := new(ReferenceList)
	err := c.cc.Invoke(ctx, "/google.cloud.chronicle.v1.ReferenceListService/CreateReferenceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referenceListServiceClient) UpdateReferenceList(ctx context.Context, in *UpdateReferenceListRequest, opts ...grpc.CallOption) (*ReferenceList, error) {
	out := new(ReferenceList)
	err := c.cc.Invoke(ctx, "/google.cloud.chronicle.v1.ReferenceListService/UpdateReferenceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReferenceListServiceServer is the server API for ReferenceListService service.
type ReferenceListServiceServer interface {
	// Gets a single reference list.
	GetReferenceList(context.Context, *GetReferenceListRequest) (*ReferenceList, error)
	// Lists a collection of reference lists.
	ListReferenceLists(context.Context, *ListReferenceListsRequest) (*ListReferenceListsResponse, error)
	// Creates a new reference list.
	CreateReferenceList(context.Context, *CreateReferenceListRequest) (*ReferenceList, error)
	// Updates an existing reference list.
	UpdateReferenceList(context.Context, *UpdateReferenceListRequest) (*ReferenceList, error)
}

// UnimplementedReferenceListServiceServer can be embedded to have forward compatible implementations.
type UnimplementedReferenceListServiceServer struct {
}

func (*UnimplementedReferenceListServiceServer) GetReferenceList(context.Context, *GetReferenceListRequest) (*ReferenceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReferenceList not implemented")
}
func (*UnimplementedReferenceListServiceServer) ListReferenceLists(context.Context, *ListReferenceListsRequest) (*ListReferenceListsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReferenceLists not implemented")
}
func (*UnimplementedReferenceListServiceServer) CreateReferenceList(context.Context, *CreateReferenceListRequest) (*ReferenceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReferenceList not implemented")
}
func (*UnimplementedReferenceListServiceServer) UpdateReferenceList(context.Context, *UpdateReferenceListRequest) (*ReferenceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReferenceList not implemented")
}

func RegisterReferenceListServiceServer(s *grpc.Server, srv ReferenceListServiceServer) {
	s.RegisterService(&_ReferenceListService_serviceDesc, srv)
}

func _ReferenceListService_GetReferenceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReferenceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferenceListServiceServer).GetReferenceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.chronicle.v1.ReferenceListService/GetReferenceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferenceListServiceServer).GetReferenceList(ctx, req.(*GetReferenceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferenceListService_ListReferenceLists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReferenceListsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferenceListServiceServer).ListReferenceLists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.chronicle.v1.ReferenceListService/ListReferenceLists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferenceListServiceServer).ListReferenceLists(ctx, req.(*ListReferenceListsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferenceListService_CreateReferenceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReferenceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferenceListServiceServer).CreateReferenceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.chronicle.v1.ReferenceListService/CreateReferenceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferenceListServiceServer).CreateReferenceList(ctx, req.(*CreateReferenceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferenceListService_UpdateReferenceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReferenceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferenceListServiceServer).UpdateReferenceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.chronicle.v1.ReferenceListService/UpdateReferenceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferenceListServiceServer).UpdateReferenceList(ctx, req.(*UpdateReferenceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ReferenceListService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.chronicle.v1.ReferenceListService",
	HandlerType: (*ReferenceListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetReferenceList",
			Handler:    _ReferenceListService_GetReferenceList_Handler,
		},
		{
			MethodName: "ListReferenceLists",
			Handler:    _ReferenceListService_ListReferenceLists_Handler,
		},
		{
			MethodName: "CreateReferenceList",
			Handler:    _ReferenceListService_CreateReferenceList_Handler,
		},
		{
			MethodName: "UpdateReferenceList",
			Handler:    _ReferenceListService_UpdateReferenceList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/chronicle/v1/reference_list.proto",
}
