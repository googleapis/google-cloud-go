// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.7
// source: google/cloud/managedkafka/schemaregistry/v1/schema_registry_resources.proto

package schemaregistrypb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Schema types.
type Schema_SchemaType int32

const (
	// No schema type. The default will be AVRO.
	Schema_SCHEMA_TYPE_UNSPECIFIED Schema_SchemaType = 0
	// Avro schema type.
	Schema_AVRO Schema_SchemaType = 1
	// JSON schema type.
	Schema_JSON Schema_SchemaType = 2
	// Protobuf schema type.
	Schema_PROTOBUF Schema_SchemaType = 3
)

// Enum value maps for Schema_SchemaType.
var (
	Schema_SchemaType_name = map[int32]string{
		0: "SCHEMA_TYPE_UNSPECIFIED",
		1: "AVRO",
		2: "JSON",
		3: "PROTOBUF",
	}
	Schema_SchemaType_value = map[string]int32{
		"SCHEMA_TYPE_UNSPECIFIED": 0,
		"AVRO":                    1,
		"JSON":                    2,
		"PROTOBUF":                3,
	}
)

func (x Schema_SchemaType) Enum() *Schema_SchemaType {
	p := new(Schema_SchemaType)
	*p = x
	return p
}

func (x Schema_SchemaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Schema_SchemaType) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_enumTypes[0].Descriptor()
}

func (Schema_SchemaType) Type() protoreflect.EnumType {
	return &file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_enumTypes[0]
}

func (x Schema_SchemaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Schema_SchemaType.Descriptor instead.
func (Schema_SchemaType) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_rawDescGZIP(), []int{2, 0}
}

// Compatibility type of the schemas.
type SchemaConfig_CompatibilityType int32

const (
	// No compatibility check.
	SchemaConfig_NONE SchemaConfig_CompatibilityType = 0
	// Backwards compatible with the most recent version.
	SchemaConfig_BACKWARD SchemaConfig_CompatibilityType = 1
	// Backwards compatible with all previous versions.
	SchemaConfig_BACKWARD_TRANSITIVE SchemaConfig_CompatibilityType = 2
	// Forwards compatible with the most recent version.
	SchemaConfig_FORWARD SchemaConfig_CompatibilityType = 3
	// Forwards compatible with all previous versions.
	SchemaConfig_FORWARD_TRANSITIVE SchemaConfig_CompatibilityType = 4
	// Backwards and forwards compatible with the most recent version.
	SchemaConfig_FULL SchemaConfig_CompatibilityType = 5
	// Backwards and forwards compatible with all previous versions.
	SchemaConfig_FULL_TRANSITIVE SchemaConfig_CompatibilityType = 6
)

// Enum value maps for SchemaConfig_CompatibilityType.
var (
	SchemaConfig_CompatibilityType_name = map[int32]string{
		0: "NONE",
		1: "BACKWARD",
		2: "BACKWARD_TRANSITIVE",
		3: "FORWARD",
		4: "FORWARD_TRANSITIVE",
		5: "FULL",
		6: "FULL_TRANSITIVE",
	}
	SchemaConfig_CompatibilityType_value = map[string]int32{
		"NONE":                0,
		"BACKWARD":            1,
		"BACKWARD_TRANSITIVE": 2,
		"FORWARD":             3,
		"FORWARD_TRANSITIVE":  4,
		"FULL":                5,
		"FULL_TRANSITIVE":     6,
	}
)

func (x SchemaConfig_CompatibilityType) Enum() *SchemaConfig_CompatibilityType {
	p := new(SchemaConfig_CompatibilityType)
	*p = x
	return p
}

func (x SchemaConfig_CompatibilityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SchemaConfig_CompatibilityType) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_enumTypes[1].Descriptor()
}

func (SchemaConfig_CompatibilityType) Type() protoreflect.EnumType {
	return &file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_enumTypes[1]
}

func (x SchemaConfig_CompatibilityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SchemaConfig_CompatibilityType.Descriptor instead.
func (SchemaConfig_CompatibilityType) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_rawDescGZIP(), []int{5, 0}
}

// Mode type of the schemas or subjects.
type SchemaMode_ModeType int32

const (
	// The default / unset value.
	// The subject mode is NONE/unset by default, which means use the global
	// schema registry mode. This should not be used for setting the mode.
	SchemaMode_NONE SchemaMode_ModeType = 0
	// READONLY mode.
	SchemaMode_READONLY SchemaMode_ModeType = 1
	// READWRITE mode.
	SchemaMode_READWRITE SchemaMode_ModeType = 2
	// IMPORT mode.
	SchemaMode_IMPORT SchemaMode_ModeType = 3
)

// Enum value maps for SchemaMode_ModeType.
var (
	SchemaMode_ModeType_name = map[int32]string{
		0: "NONE",
		1: "READONLY",
		2: "READWRITE",
		3: "IMPORT",
	}
	SchemaMode_ModeType_value = map[string]int32{
		"NONE":      0,
		"READONLY":  1,
		"READWRITE": 2,
		"IMPORT":    3,
	}
)

func (x SchemaMode_ModeType) Enum() *SchemaMode_ModeType {
	p := new(SchemaMode_ModeType)
	*p = x
	return p
}

func (x SchemaMode_ModeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SchemaMode_ModeType) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_enumTypes[2].Descriptor()
}

func (SchemaMode_ModeType) Type() protoreflect.EnumType {
	return &file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_enumTypes[2]
}

func (x SchemaMode_ModeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SchemaMode_ModeType.Descriptor instead.
func (SchemaMode_ModeType) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_rawDescGZIP(), []int{6, 0}
}

// SchemaRegistry is a schema registry instance.
type SchemaRegistry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier. The name of the schema registry instance. Structured like:
	// `projects/{project}/locations/{location}/schemaRegistries/{schema_registry}`
	// The instance name {schema_registry} can contain the following:
	// * Up to 255 characters.
	// * Letters (uppercase or lowercase), numbers, and underscores.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. The contexts of the schema registry instance.
	Contexts []string `protobuf:"bytes,2,rep,name=contexts,proto3" json:"contexts,omitempty"`
}

func (x *SchemaRegistry) Reset() {
	*x = SchemaRegistry{}
	mi := &file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchemaRegistry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaRegistry) ProtoMessage() {}

func (x *SchemaRegistry) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaRegistry.ProtoReflect.Descriptor instead.
func (*SchemaRegistry) Descriptor() ([]byte, []int) {
	return file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_rawDescGZIP(), []int{0}
}

func (x *SchemaRegistry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SchemaRegistry) GetContexts() []string {
	if x != nil {
		return x.Contexts
	}
	return nil
}

// Context represents an independent schema grouping in a schema registry
// instance.
type Context struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier. The name of the context. Structured like:
	// `projects/{project}/locations/{location}/schemaRegistries/{schema_registry}/contexts/{context}`
	// The context name {context} can contain the following:
	// * Up to 255 characters.
	// * Allowed characters: letters (uppercase or lowercase), numbers, and the
	// following special characters: `.`, `-`, `_`, `+`, `%`, and `~`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. The subjects of the context.
	Subjects []string `protobuf:"bytes,2,rep,name=subjects,proto3" json:"subjects,omitempty"`
}

func (x *Context) Reset() {
	*x = Context{}
	mi := &file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Context) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Context) ProtoMessage() {}

func (x *Context) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Context.ProtoReflect.Descriptor instead.
func (*Context) Descriptor() ([]byte, []int) {
	return file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_rawDescGZIP(), []int{1}
}

func (x *Context) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Context) GetSubjects() []string {
	if x != nil {
		return x.Subjects
	}
	return nil
}

// Schema for a Kafka message.
type Schema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The schema type of the schema.
	SchemaType Schema_SchemaType `protobuf:"varint,1,opt,name=schema_type,json=schemaType,proto3,enum=google.cloud.managedkafka.schemaregistry.v1.Schema_SchemaType" json:"schema_type,omitempty"`
	// The schema payload.
	SchemaPayload string `protobuf:"bytes,2,opt,name=schema_payload,json=schema,proto3" json:"schema_payload,omitempty"`
	// Optional. The schema references used by the schema.
	References []*Schema_SchemaReference `protobuf:"bytes,3,rep,name=references,proto3" json:"references,omitempty"`
}

func (x *Schema) Reset() {
	*x = Schema{}
	mi := &file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Schema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema) ProtoMessage() {}

func (x *Schema) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema.ProtoReflect.Descriptor instead.
func (*Schema) Descriptor() ([]byte, []int) {
	return file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_rawDescGZIP(), []int{2}
}

func (x *Schema) GetSchemaType() Schema_SchemaType {
	if x != nil {
		return x.SchemaType
	}
	return Schema_SCHEMA_TYPE_UNSPECIFIED
}

func (x *Schema) GetSchemaPayload() string {
	if x != nil {
		return x.SchemaPayload
	}
	return ""
}

func (x *Schema) GetReferences() []*Schema_SchemaReference {
	if x != nil {
		return x.References
	}
	return nil
}

// Subject defines the evolution scope of schemas as a holder of schema
// versions.
type SchemaSubject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the subject. Structured like:
	// `projects/{project}/locations/{location}/schemaRegistries/{schema_registry}/subjects/{subject}`
	// or
	// `projects/{project}/locations/{location}/schemaRegistries/{schema_registry}/contexts/{context}/subjects/{subject}`
	//
	// Subject name {subject} can contain the following:
	// * Up to 255 UTF-8 bytes.
	// * Allowed characters: letters (uppercase or lowercase), numbers, and the
	// following special characters: `.`, `-`, `_`, `+`, `%`, and `~`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The versions of the subject.
	Versions []string `protobuf:"bytes,3,rep,name=versions,proto3" json:"versions,omitempty"`
}

func (x *SchemaSubject) Reset() {
	*x = SchemaSubject{}
	mi := &file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchemaSubject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaSubject) ProtoMessage() {}

func (x *SchemaSubject) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaSubject.ProtoReflect.Descriptor instead.
func (*SchemaSubject) Descriptor() ([]byte, []int) {
	return file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_rawDescGZIP(), []int{3}
}

func (x *SchemaSubject) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SchemaSubject) GetVersions() []string {
	if x != nil {
		return x.Versions
	}
	return nil
}

// Version of a schema.
type SchemaVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The subject of the version.
	Subject string `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	// Required. The version ID
	VersionId int32 `protobuf:"varint,2,opt,name=version_id,json=version,proto3" json:"version_id,omitempty"`
	// Required. The schema ID.
	SchemaId int32 `protobuf:"varint,3,opt,name=schema_id,json=id,proto3" json:"schema_id,omitempty"`
	// Optional. The schema type of the schema.
	SchemaType Schema_SchemaType `protobuf:"varint,4,opt,name=schema_type,json=schemaType,proto3,enum=google.cloud.managedkafka.schemaregistry.v1.Schema_SchemaType" json:"schema_type,omitempty"`
	// Required. The schema payload.
	SchemaPayload string `protobuf:"bytes,5,opt,name=schema_payload,json=schema,proto3" json:"schema_payload,omitempty"`
	// Optional. The schema references used by the schema.
	References []*Schema_SchemaReference `protobuf:"bytes,6,rep,name=references,proto3" json:"references,omitempty"`
}

func (x *SchemaVersion) Reset() {
	*x = SchemaVersion{}
	mi := &file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchemaVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaVersion) ProtoMessage() {}

func (x *SchemaVersion) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaVersion.ProtoReflect.Descriptor instead.
func (*SchemaVersion) Descriptor() ([]byte, []int) {
	return file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_rawDescGZIP(), []int{4}
}

func (x *SchemaVersion) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *SchemaVersion) GetVersionId() int32 {
	if x != nil {
		return x.VersionId
	}
	return 0
}

func (x *SchemaVersion) GetSchemaId() int32 {
	if x != nil {
		return x.SchemaId
	}
	return 0
}

func (x *SchemaVersion) GetSchemaType() Schema_SchemaType {
	if x != nil {
		return x.SchemaType
	}
	return Schema_SCHEMA_TYPE_UNSPECIFIED
}

func (x *SchemaVersion) GetSchemaPayload() string {
	if x != nil {
		return x.SchemaPayload
	}
	return ""
}

func (x *SchemaVersion) GetReferences() []*Schema_SchemaReference {
	if x != nil {
		return x.References
	}
	return nil
}

// SchemaConfig represents configuration for a schema registry or a specific
// subject.
type SchemaConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The compatibility type of the schema.
	// The default value is BACKWARD.
	// If unset in a SchemaSubject-level SchemaConfig, defaults to the global
	// value. If unset in a SchemaRegistry-level SchemaConfig, reverts to the
	// default value.
	Compatibility *SchemaConfig_CompatibilityType `protobuf:"varint,1,opt,name=compatibility,proto3,enum=google.cloud.managedkafka.schemaregistry.v1.SchemaConfig_CompatibilityType,oneof" json:"compatibility,omitempty"`
	// Optional. If true, the schema will be normalized before being stored or
	// looked up. The default is false. If unset in a SchemaSubject-level
	// SchemaConfig, the global value will be used. If unset in a
	// SchemaRegistry-level SchemaConfig, reverts to the default value.
	Normalize *bool `protobuf:"varint,2,opt,name=normalize,proto3,oneof" json:"normalize,omitempty"`
	// Optional. The subject to which this subject is an alias of. Only applicable
	// for subject config.
	Alias string `protobuf:"bytes,3,opt,name=alias,proto3" json:"alias,omitempty"`
}

func (x *SchemaConfig) Reset() {
	*x = SchemaConfig{}
	mi := &file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchemaConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaConfig) ProtoMessage() {}

func (x *SchemaConfig) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaConfig.ProtoReflect.Descriptor instead.
func (*SchemaConfig) Descriptor() ([]byte, []int) {
	return file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_rawDescGZIP(), []int{5}
}

func (x *SchemaConfig) GetCompatibility() SchemaConfig_CompatibilityType {
	if x != nil && x.Compatibility != nil {
		return *x.Compatibility
	}
	return SchemaConfig_NONE
}

func (x *SchemaConfig) GetNormalize() bool {
	if x != nil && x.Normalize != nil {
		return *x.Normalize
	}
	return false
}

func (x *SchemaConfig) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

// SchemaMode represents the mode of a schema registry or a specific subject.
// Four modes are supported:
// * NONE: deprecated. This was the default mode for a subject, but now the
// default is unset (which means use the global schema registry setting)
// * READONLY: The schema registry is in read-only mode.
// * READWRITE: The schema registry is in read-write mode, which allows limited
// write operations on the schema.
// * IMPORT: The schema registry is in import mode, which allows more editing
// operations on the schema for data importing purposes.
type SchemaMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The mode type of a schema registry (READWRITE by default) or of a
	// subject (unset by default, which means use the global schema registry
	// setting).
	Mode SchemaMode_ModeType `protobuf:"varint,1,opt,name=mode,proto3,enum=google.cloud.managedkafka.schemaregistry.v1.SchemaMode_ModeType" json:"mode,omitempty"`
}

func (x *SchemaMode) Reset() {
	*x = SchemaMode{}
	mi := &file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchemaMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaMode) ProtoMessage() {}

func (x *SchemaMode) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaMode.ProtoReflect.Descriptor instead.
func (*SchemaMode) Descriptor() ([]byte, []int) {
	return file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_rawDescGZIP(), []int{6}
}

func (x *SchemaMode) GetMode() SchemaMode_ModeType {
	if x != nil {
		return x.Mode
	}
	return SchemaMode_NONE
}

// SchemaReference is a reference to a schema.
type Schema_SchemaReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the reference.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Required. The subject of the reference.
	Subject string `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	// Required. The version of the reference.
	Version int32 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Schema_SchemaReference) Reset() {
	*x = Schema_SchemaReference{}
	mi := &file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Schema_SchemaReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema_SchemaReference) ProtoMessage() {}

func (x *Schema_SchemaReference) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema_SchemaReference.ProtoReflect.Descriptor instead.
func (*Schema_SchemaReference) Descriptor() ([]byte, []int) {
	return file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Schema_SchemaReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Schema_SchemaReference) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *Schema_SchemaReference) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

var File_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto protoreflect.FileDescriptor

var file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_rawDesc = []byte{
	0x0a, 0x4b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2f, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x64, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x99, 0x02, 0x0a, 0x0e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x08, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x31, 0xe0, 0x41, 0x03, 0xfa, 0x41, 0x2b, 0x0a, 0x29, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x73, 0x3a, 0x9e, 0x01, 0xea, 0x41, 0x9a, 0x01, 0x0a, 0x2a, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x12, 0x4a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x7d,
	0x2a, 0x10, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x32, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x22, 0x95, 0x02, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x17,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x08, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x31, 0xe0, 0x41, 0x01, 0xfa, 0x41,
	0x2b, 0x0a, 0x29, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x3a, 0xa1, 0x01, 0xea, 0x41, 0x9d, 0x01, 0x0a, 0x29, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x5d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x7d, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x2f, 0x7b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x2f, 0x7b, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x7d, 0x2a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x73, 0x32, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xc0, 0x05, 0x0a, 0x06, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x64, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x68, 0x0a, 0x0a, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x43, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x1a, 0x68, 0x0a, 0x0f, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x1d, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x4b, 0x0a, 0x0a, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a,
	0x17, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x56,
	0x52, 0x4f, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x0c,
	0x0a, 0x08, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x42, 0x55, 0x46, 0x10, 0x03, 0x3a, 0x8e, 0x02, 0xea,
	0x41, 0x8a, 0x02, 0x0a, 0x22, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x6b, 0x61, 0x66, 0x6b,
	0x61, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d,
	0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x2f, 0x7b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x7d, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x2f, 0x69, 0x64, 0x73, 0x2f,
	0x7b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x7d, 0x12, 0x72, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x7d, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x2f, 0x7b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x2f, 0x7b, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x7d, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x2f,
	0x69, 0x64, 0x73, 0x2f, 0x7b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x7d, 0x2a, 0x07, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x73, 0x32, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0x8d, 0x03,
	0x0a, 0x0d, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x08, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x31, 0xe0, 0x41, 0x01, 0xfa,
	0x41, 0x2b, 0x0a, 0x29, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x6b, 0x61, 0x66, 0x6b, 0x61,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x93, 0x02, 0xea, 0x41, 0x8f, 0x02, 0x0a, 0x29,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x5d, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x7d, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x7d, 0x2f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x12, 0x70, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x7d, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x2f, 0x7b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x2f, 0x7b, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x7d, 0x2f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x7b, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2a, 0x08, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x32, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0xb2, 0x09,
	0x0a, 0x0d, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x20,
	0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x69, 0x64, 0x12, 0x64, 0x0a, 0x0b,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x23, 0x0a, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x68, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x3a, 0xce, 0x06, 0xea, 0x41, 0xca, 0x06, 0x0a, 0x29, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x70, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x7d, 0x2f,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x12, 0x83, 0x01, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x2f, 0x7b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x7d, 0x2f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x12, 0x74, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x7d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x2f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x87, 0x01, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x7d, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x7d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2f,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x7e, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x7d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x2f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x12, 0x91, 0x01, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d,
	0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x7d, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x7b, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x2a,
	0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0xc1, 0x06, 0x0a, 0x0c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x7b, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x48, 0x00, 0x52, 0x0d,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x09, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x01, 0x52, 0x09, 0x6e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x41, 0x43, 0x4b, 0x57, 0x41, 0x52, 0x44, 0x10,
	0x01, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x41, 0x43, 0x4b, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x4f,
	0x52, 0x57, 0x41, 0x52, 0x44, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x4f, 0x52, 0x57, 0x41,
	0x52, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x10, 0x04, 0x12,
	0x08, 0x0a, 0x04, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x55, 0x4c,
	0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x10, 0x06, 0x3a, 0xc5,
	0x03, 0xea, 0x41, 0xc1, 0x03, 0x0a, 0x28, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x6b, 0x61,
	0x66, 0x6b, 0x61, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x51, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x5b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x7d, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x7b, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x12,
	0x64, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x7d, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f,
	0x7b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x7b, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x32, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x22, 0xe0, 0x04, 0x0a, 0x0a, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x59, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x22, 0x3d, 0x0a, 0x08, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x41, 0x44, 0x4f, 0x4e,
	0x4c, 0x59, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x41, 0x44, 0x57, 0x52, 0x49, 0x54,
	0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x03, 0x3a,
	0xb7, 0x03, 0xea, 0x41, 0xb3, 0x03, 0x0a, 0x26, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x6b,
	0x61, 0x66, 0x6b, 0x61, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x4f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x12,
	0x59, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x2f, 0x7b, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x12, 0x62, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x7d, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x2f,
	0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x6c,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x7d, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x2f, 0x7b, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2a, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x73, 0x32, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0xb8, 0x02, 0x0a, 0x2f, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x42, 0x1c, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x57, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x67, 0x6f, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x70, 0x62, 0x3b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x70, 0x62, 0xaa, 0x02, 0x2b, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x4b, 0x61, 0x66,
	0x6b, 0x61, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x2b, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5c, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x5c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x4b, 0x61, 0x66, 0x6b, 0x61,
	0x5c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5c,
	0x56, 0x31, 0xea, 0x02, 0x2f, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x3a, 0x3a, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x4b, 0x61, 0x66, 0x6b, 0x61,
	0x3a, 0x3a, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_rawDescOnce sync.Once
	file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_rawDescData = file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_rawDesc
)

func file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_rawDescGZIP() []byte {
	file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_rawDescOnce.Do(func() {
		file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_rawDescData)
	})
	return file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_rawDescData
}

var file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_goTypes = []any{
	(Schema_SchemaType)(0),              // 0: google.cloud.managedkafka.schemaregistry.v1.Schema.SchemaType
	(SchemaConfig_CompatibilityType)(0), // 1: google.cloud.managedkafka.schemaregistry.v1.SchemaConfig.CompatibilityType
	(SchemaMode_ModeType)(0),            // 2: google.cloud.managedkafka.schemaregistry.v1.SchemaMode.ModeType
	(*SchemaRegistry)(nil),              // 3: google.cloud.managedkafka.schemaregistry.v1.SchemaRegistry
	(*Context)(nil),                     // 4: google.cloud.managedkafka.schemaregistry.v1.Context
	(*Schema)(nil),                      // 5: google.cloud.managedkafka.schemaregistry.v1.Schema
	(*SchemaSubject)(nil),               // 6: google.cloud.managedkafka.schemaregistry.v1.SchemaSubject
	(*SchemaVersion)(nil),               // 7: google.cloud.managedkafka.schemaregistry.v1.SchemaVersion
	(*SchemaConfig)(nil),                // 8: google.cloud.managedkafka.schemaregistry.v1.SchemaConfig
	(*SchemaMode)(nil),                  // 9: google.cloud.managedkafka.schemaregistry.v1.SchemaMode
	(*Schema_SchemaReference)(nil),      // 10: google.cloud.managedkafka.schemaregistry.v1.Schema.SchemaReference
}
var file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_depIdxs = []int32{
	0,  // 0: google.cloud.managedkafka.schemaregistry.v1.Schema.schema_type:type_name -> google.cloud.managedkafka.schemaregistry.v1.Schema.SchemaType
	10, // 1: google.cloud.managedkafka.schemaregistry.v1.Schema.references:type_name -> google.cloud.managedkafka.schemaregistry.v1.Schema.SchemaReference
	0,  // 2: google.cloud.managedkafka.schemaregistry.v1.SchemaVersion.schema_type:type_name -> google.cloud.managedkafka.schemaregistry.v1.Schema.SchemaType
	10, // 3: google.cloud.managedkafka.schemaregistry.v1.SchemaVersion.references:type_name -> google.cloud.managedkafka.schemaregistry.v1.Schema.SchemaReference
	1,  // 4: google.cloud.managedkafka.schemaregistry.v1.SchemaConfig.compatibility:type_name -> google.cloud.managedkafka.schemaregistry.v1.SchemaConfig.CompatibilityType
	2,  // 5: google.cloud.managedkafka.schemaregistry.v1.SchemaMode.mode:type_name -> google.cloud.managedkafka.schemaregistry.v1.SchemaMode.ModeType
	6,  // [6:6] is the sub-list for method output_type
	6,  // [6:6] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_init() }
func file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_init() {
	if File_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto != nil {
		return
	}
	file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_msgTypes[5].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_goTypes,
		DependencyIndexes: file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_depIdxs,
		EnumInfos:         file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_enumTypes,
		MessageInfos:      file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_msgTypes,
	}.Build()
	File_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto = out.File
	file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_rawDesc = nil
	file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_goTypes = nil
	file_google_cloud_managedkafka_schemaregistry_v1_schema_registry_resources_proto_depIdxs = nil
}
