// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/managedkafka/schemaregistry/v1/schema_registry.proto

package schemaregistrypb

import (
	context "context"

	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ManagedSchemaRegistry_GetSchemaRegistry_FullMethodName      = "/google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry/GetSchemaRegistry"
	ManagedSchemaRegistry_ListSchemaRegistries_FullMethodName   = "/google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry/ListSchemaRegistries"
	ManagedSchemaRegistry_CreateSchemaRegistry_FullMethodName   = "/google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry/CreateSchemaRegistry"
	ManagedSchemaRegistry_DeleteSchemaRegistry_FullMethodName   = "/google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry/DeleteSchemaRegistry"
	ManagedSchemaRegistry_GetContext_FullMethodName             = "/google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry/GetContext"
	ManagedSchemaRegistry_ListContexts_FullMethodName           = "/google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry/ListContexts"
	ManagedSchemaRegistry_GetSchema_FullMethodName              = "/google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry/GetSchema"
	ManagedSchemaRegistry_GetRawSchema_FullMethodName           = "/google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry/GetRawSchema"
	ManagedSchemaRegistry_ListSchemaVersions_FullMethodName     = "/google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry/ListSchemaVersions"
	ManagedSchemaRegistry_ListSchemaTypes_FullMethodName        = "/google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry/ListSchemaTypes"
	ManagedSchemaRegistry_ListSubjects_FullMethodName           = "/google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry/ListSubjects"
	ManagedSchemaRegistry_ListSubjectsBySchemaId_FullMethodName = "/google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry/ListSubjectsBySchemaId"
	ManagedSchemaRegistry_DeleteSubject_FullMethodName          = "/google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry/DeleteSubject"
	ManagedSchemaRegistry_LookupVersion_FullMethodName          = "/google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry/LookupVersion"
	ManagedSchemaRegistry_GetVersion_FullMethodName             = "/google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry/GetVersion"
	ManagedSchemaRegistry_GetRawSchemaVersion_FullMethodName    = "/google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry/GetRawSchemaVersion"
	ManagedSchemaRegistry_ListVersions_FullMethodName           = "/google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry/ListVersions"
	ManagedSchemaRegistry_CreateVersion_FullMethodName          = "/google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry/CreateVersion"
	ManagedSchemaRegistry_DeleteVersion_FullMethodName          = "/google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry/DeleteVersion"
	ManagedSchemaRegistry_ListReferencedSchemas_FullMethodName  = "/google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry/ListReferencedSchemas"
	ManagedSchemaRegistry_CheckCompatibility_FullMethodName     = "/google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry/CheckCompatibility"
	ManagedSchemaRegistry_GetSchemaConfig_FullMethodName        = "/google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry/GetSchemaConfig"
	ManagedSchemaRegistry_UpdateSchemaConfig_FullMethodName     = "/google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry/UpdateSchemaConfig"
	ManagedSchemaRegistry_DeleteSchemaConfig_FullMethodName     = "/google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry/DeleteSchemaConfig"
	ManagedSchemaRegistry_GetSchemaMode_FullMethodName          = "/google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry/GetSchemaMode"
	ManagedSchemaRegistry_UpdateSchemaMode_FullMethodName       = "/google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry/UpdateSchemaMode"
	ManagedSchemaRegistry_DeleteSchemaMode_FullMethodName       = "/google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry/DeleteSchemaMode"
)

// ManagedSchemaRegistryClient is the client API for ManagedSchemaRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagedSchemaRegistryClient interface {
	// Get the schema registry instance.
	GetSchemaRegistry(ctx context.Context, in *GetSchemaRegistryRequest, opts ...grpc.CallOption) (*SchemaRegistry, error)
	// List schema registries.
	ListSchemaRegistries(ctx context.Context, in *ListSchemaRegistriesRequest, opts ...grpc.CallOption) (*ListSchemaRegistriesResponse, error)
	// Create a schema registry instance.
	CreateSchemaRegistry(ctx context.Context, in *CreateSchemaRegistryRequest, opts ...grpc.CallOption) (*SchemaRegistry, error)
	// Delete a schema registry instance.
	DeleteSchemaRegistry(ctx context.Context, in *DeleteSchemaRegistryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Get the context.
	GetContext(ctx context.Context, in *GetContextRequest, opts ...grpc.CallOption) (*Context, error)
	// List contexts for a schema registry.
	ListContexts(ctx context.Context, in *ListContextsRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	// Get the schema for the given schema id.
	GetSchema(ctx context.Context, in *GetSchemaRequest, opts ...grpc.CallOption) (*Schema, error)
	// Get the schema string for the given schema id.
	// The response will be the schema string.
	GetRawSchema(ctx context.Context, in *GetSchemaRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	// List the schema versions for the given schema id.
	// The response will be an array of subject-version pairs as:
	// [{"subject":"subject1", "version":1}, {"subject":"subject2", "version":2}].
	ListSchemaVersions(ctx context.Context, in *ListSchemaVersionsRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	// List the supported schema types.
	// The response will be an array of schema types.
	ListSchemaTypes(ctx context.Context, in *ListSchemaTypesRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	// List subjects in the schema registry.
	// The response will be an array of subject names.
	ListSubjects(ctx context.Context, in *ListSubjectsRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	// List subjects which reference a particular schema id.
	// The response will be an array of subject names.
	ListSubjectsBySchemaId(ctx context.Context, in *ListSubjectsBySchemaIdRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	// Delete a subject.
	// The response will be an array of versions of the deleted subject.
	DeleteSubject(ctx context.Context, in *DeleteSubjectRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	// Lookup a schema under the specified subject.
	LookupVersion(ctx context.Context, in *LookupVersionRequest, opts ...grpc.CallOption) (*SchemaVersion, error)
	// Get a versioned schema (schema with subject/version) of a subject.
	GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*SchemaVersion, error)
	// Get the schema string only for a version of a subject.
	// The response will be the schema string.
	GetRawSchemaVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	// Get all versions of a subject.
	// The response will be an array of versions of the subject.
	ListVersions(ctx context.Context, in *ListVersionsRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	// Register a new version under a given subject with the given schema.
	CreateVersion(ctx context.Context, in *CreateVersionRequest, opts ...grpc.CallOption) (*CreateVersionResponse, error)
	// Delete a version of a subject.
	// The response will be the deleted version id.
	DeleteVersion(ctx context.Context, in *DeleteVersionRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	// Get a list of IDs of schemas that reference the schema with the given
	// subject and version.
	ListReferencedSchemas(ctx context.Context, in *ListReferencedSchemasRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	// Check compatibility of a schema with all versions or a specific version of
	// a subject.
	CheckCompatibility(ctx context.Context, in *CheckCompatibilityRequest, opts ...grpc.CallOption) (*CheckCompatibilityResponse, error)
	// Get schema config at global level or for a subject.
	GetSchemaConfig(ctx context.Context, in *GetSchemaConfigRequest, opts ...grpc.CallOption) (*SchemaConfig, error)
	// Update config at global level or for a subject.
	// Creates a SchemaSubject-level SchemaConfig if it does not exist.
	UpdateSchemaConfig(ctx context.Context, in *UpdateSchemaConfigRequest, opts ...grpc.CallOption) (*SchemaConfig, error)
	// Delete schema config for a subject.
	DeleteSchemaConfig(ctx context.Context, in *DeleteSchemaConfigRequest, opts ...grpc.CallOption) (*SchemaConfig, error)
	// Get mode at global level or for a subject.
	GetSchemaMode(ctx context.Context, in *GetSchemaModeRequest, opts ...grpc.CallOption) (*SchemaMode, error)
	// Update mode at global level or for a subject.
	UpdateSchemaMode(ctx context.Context, in *UpdateSchemaModeRequest, opts ...grpc.CallOption) (*SchemaMode, error)
	// Delete schema mode for a subject.
	DeleteSchemaMode(ctx context.Context, in *DeleteSchemaModeRequest, opts ...grpc.CallOption) (*SchemaMode, error)
}

type managedSchemaRegistryClient struct {
	cc grpc.ClientConnInterface
}

func NewManagedSchemaRegistryClient(cc grpc.ClientConnInterface) ManagedSchemaRegistryClient {
	return &managedSchemaRegistryClient{cc}
}

func (c *managedSchemaRegistryClient) GetSchemaRegistry(ctx context.Context, in *GetSchemaRegistryRequest, opts ...grpc.CallOption) (*SchemaRegistry, error) {
	out := new(SchemaRegistry)
	err := c.cc.Invoke(ctx, ManagedSchemaRegistry_GetSchemaRegistry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedSchemaRegistryClient) ListSchemaRegistries(ctx context.Context, in *ListSchemaRegistriesRequest, opts ...grpc.CallOption) (*ListSchemaRegistriesResponse, error) {
	out := new(ListSchemaRegistriesResponse)
	err := c.cc.Invoke(ctx, ManagedSchemaRegistry_ListSchemaRegistries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedSchemaRegistryClient) CreateSchemaRegistry(ctx context.Context, in *CreateSchemaRegistryRequest, opts ...grpc.CallOption) (*SchemaRegistry, error) {
	out := new(SchemaRegistry)
	err := c.cc.Invoke(ctx, ManagedSchemaRegistry_CreateSchemaRegistry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedSchemaRegistryClient) DeleteSchemaRegistry(ctx context.Context, in *DeleteSchemaRegistryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ManagedSchemaRegistry_DeleteSchemaRegistry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedSchemaRegistryClient) GetContext(ctx context.Context, in *GetContextRequest, opts ...grpc.CallOption) (*Context, error) {
	out := new(Context)
	err := c.cc.Invoke(ctx, ManagedSchemaRegistry_GetContext_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedSchemaRegistryClient) ListContexts(ctx context.Context, in *ListContextsRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, ManagedSchemaRegistry_ListContexts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedSchemaRegistryClient) GetSchema(ctx context.Context, in *GetSchemaRequest, opts ...grpc.CallOption) (*Schema, error) {
	out := new(Schema)
	err := c.cc.Invoke(ctx, ManagedSchemaRegistry_GetSchema_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedSchemaRegistryClient) GetRawSchema(ctx context.Context, in *GetSchemaRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, ManagedSchemaRegistry_GetRawSchema_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedSchemaRegistryClient) ListSchemaVersions(ctx context.Context, in *ListSchemaVersionsRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, ManagedSchemaRegistry_ListSchemaVersions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedSchemaRegistryClient) ListSchemaTypes(ctx context.Context, in *ListSchemaTypesRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, ManagedSchemaRegistry_ListSchemaTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedSchemaRegistryClient) ListSubjects(ctx context.Context, in *ListSubjectsRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, ManagedSchemaRegistry_ListSubjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedSchemaRegistryClient) ListSubjectsBySchemaId(ctx context.Context, in *ListSubjectsBySchemaIdRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, ManagedSchemaRegistry_ListSubjectsBySchemaId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedSchemaRegistryClient) DeleteSubject(ctx context.Context, in *DeleteSubjectRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, ManagedSchemaRegistry_DeleteSubject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedSchemaRegistryClient) LookupVersion(ctx context.Context, in *LookupVersionRequest, opts ...grpc.CallOption) (*SchemaVersion, error) {
	out := new(SchemaVersion)
	err := c.cc.Invoke(ctx, ManagedSchemaRegistry_LookupVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedSchemaRegistryClient) GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*SchemaVersion, error) {
	out := new(SchemaVersion)
	err := c.cc.Invoke(ctx, ManagedSchemaRegistry_GetVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedSchemaRegistryClient) GetRawSchemaVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, ManagedSchemaRegistry_GetRawSchemaVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedSchemaRegistryClient) ListVersions(ctx context.Context, in *ListVersionsRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, ManagedSchemaRegistry_ListVersions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedSchemaRegistryClient) CreateVersion(ctx context.Context, in *CreateVersionRequest, opts ...grpc.CallOption) (*CreateVersionResponse, error) {
	out := new(CreateVersionResponse)
	err := c.cc.Invoke(ctx, ManagedSchemaRegistry_CreateVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedSchemaRegistryClient) DeleteVersion(ctx context.Context, in *DeleteVersionRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, ManagedSchemaRegistry_DeleteVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedSchemaRegistryClient) ListReferencedSchemas(ctx context.Context, in *ListReferencedSchemasRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, ManagedSchemaRegistry_ListReferencedSchemas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedSchemaRegistryClient) CheckCompatibility(ctx context.Context, in *CheckCompatibilityRequest, opts ...grpc.CallOption) (*CheckCompatibilityResponse, error) {
	out := new(CheckCompatibilityResponse)
	err := c.cc.Invoke(ctx, ManagedSchemaRegistry_CheckCompatibility_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedSchemaRegistryClient) GetSchemaConfig(ctx context.Context, in *GetSchemaConfigRequest, opts ...grpc.CallOption) (*SchemaConfig, error) {
	out := new(SchemaConfig)
	err := c.cc.Invoke(ctx, ManagedSchemaRegistry_GetSchemaConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedSchemaRegistryClient) UpdateSchemaConfig(ctx context.Context, in *UpdateSchemaConfigRequest, opts ...grpc.CallOption) (*SchemaConfig, error) {
	out := new(SchemaConfig)
	err := c.cc.Invoke(ctx, ManagedSchemaRegistry_UpdateSchemaConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedSchemaRegistryClient) DeleteSchemaConfig(ctx context.Context, in *DeleteSchemaConfigRequest, opts ...grpc.CallOption) (*SchemaConfig, error) {
	out := new(SchemaConfig)
	err := c.cc.Invoke(ctx, ManagedSchemaRegistry_DeleteSchemaConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedSchemaRegistryClient) GetSchemaMode(ctx context.Context, in *GetSchemaModeRequest, opts ...grpc.CallOption) (*SchemaMode, error) {
	out := new(SchemaMode)
	err := c.cc.Invoke(ctx, ManagedSchemaRegistry_GetSchemaMode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedSchemaRegistryClient) UpdateSchemaMode(ctx context.Context, in *UpdateSchemaModeRequest, opts ...grpc.CallOption) (*SchemaMode, error) {
	out := new(SchemaMode)
	err := c.cc.Invoke(ctx, ManagedSchemaRegistry_UpdateSchemaMode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedSchemaRegistryClient) DeleteSchemaMode(ctx context.Context, in *DeleteSchemaModeRequest, opts ...grpc.CallOption) (*SchemaMode, error) {
	out := new(SchemaMode)
	err := c.cc.Invoke(ctx, ManagedSchemaRegistry_DeleteSchemaMode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagedSchemaRegistryServer is the server API for ManagedSchemaRegistry service.
// All implementations should embed UnimplementedManagedSchemaRegistryServer
// for forward compatibility
type ManagedSchemaRegistryServer interface {
	// Get the schema registry instance.
	GetSchemaRegistry(context.Context, *GetSchemaRegistryRequest) (*SchemaRegistry, error)
	// List schema registries.
	ListSchemaRegistries(context.Context, *ListSchemaRegistriesRequest) (*ListSchemaRegistriesResponse, error)
	// Create a schema registry instance.
	CreateSchemaRegistry(context.Context, *CreateSchemaRegistryRequest) (*SchemaRegistry, error)
	// Delete a schema registry instance.
	DeleteSchemaRegistry(context.Context, *DeleteSchemaRegistryRequest) (*emptypb.Empty, error)
	// Get the context.
	GetContext(context.Context, *GetContextRequest) (*Context, error)
	// List contexts for a schema registry.
	ListContexts(context.Context, *ListContextsRequest) (*httpbody.HttpBody, error)
	// Get the schema for the given schema id.
	GetSchema(context.Context, *GetSchemaRequest) (*Schema, error)
	// Get the schema string for the given schema id.
	// The response will be the schema string.
	GetRawSchema(context.Context, *GetSchemaRequest) (*httpbody.HttpBody, error)
	// List the schema versions for the given schema id.
	// The response will be an array of subject-version pairs as:
	// [{"subject":"subject1", "version":1}, {"subject":"subject2", "version":2}].
	ListSchemaVersions(context.Context, *ListSchemaVersionsRequest) (*httpbody.HttpBody, error)
	// List the supported schema types.
	// The response will be an array of schema types.
	ListSchemaTypes(context.Context, *ListSchemaTypesRequest) (*httpbody.HttpBody, error)
	// List subjects in the schema registry.
	// The response will be an array of subject names.
	ListSubjects(context.Context, *ListSubjectsRequest) (*httpbody.HttpBody, error)
	// List subjects which reference a particular schema id.
	// The response will be an array of subject names.
	ListSubjectsBySchemaId(context.Context, *ListSubjectsBySchemaIdRequest) (*httpbody.HttpBody, error)
	// Delete a subject.
	// The response will be an array of versions of the deleted subject.
	DeleteSubject(context.Context, *DeleteSubjectRequest) (*httpbody.HttpBody, error)
	// Lookup a schema under the specified subject.
	LookupVersion(context.Context, *LookupVersionRequest) (*SchemaVersion, error)
	// Get a versioned schema (schema with subject/version) of a subject.
	GetVersion(context.Context, *GetVersionRequest) (*SchemaVersion, error)
	// Get the schema string only for a version of a subject.
	// The response will be the schema string.
	GetRawSchemaVersion(context.Context, *GetVersionRequest) (*httpbody.HttpBody, error)
	// Get all versions of a subject.
	// The response will be an array of versions of the subject.
	ListVersions(context.Context, *ListVersionsRequest) (*httpbody.HttpBody, error)
	// Register a new version under a given subject with the given schema.
	CreateVersion(context.Context, *CreateVersionRequest) (*CreateVersionResponse, error)
	// Delete a version of a subject.
	// The response will be the deleted version id.
	DeleteVersion(context.Context, *DeleteVersionRequest) (*httpbody.HttpBody, error)
	// Get a list of IDs of schemas that reference the schema with the given
	// subject and version.
	ListReferencedSchemas(context.Context, *ListReferencedSchemasRequest) (*httpbody.HttpBody, error)
	// Check compatibility of a schema with all versions or a specific version of
	// a subject.
	CheckCompatibility(context.Context, *CheckCompatibilityRequest) (*CheckCompatibilityResponse, error)
	// Get schema config at global level or for a subject.
	GetSchemaConfig(context.Context, *GetSchemaConfigRequest) (*SchemaConfig, error)
	// Update config at global level or for a subject.
	// Creates a SchemaSubject-level SchemaConfig if it does not exist.
	UpdateSchemaConfig(context.Context, *UpdateSchemaConfigRequest) (*SchemaConfig, error)
	// Delete schema config for a subject.
	DeleteSchemaConfig(context.Context, *DeleteSchemaConfigRequest) (*SchemaConfig, error)
	// Get mode at global level or for a subject.
	GetSchemaMode(context.Context, *GetSchemaModeRequest) (*SchemaMode, error)
	// Update mode at global level or for a subject.
	UpdateSchemaMode(context.Context, *UpdateSchemaModeRequest) (*SchemaMode, error)
	// Delete schema mode for a subject.
	DeleteSchemaMode(context.Context, *DeleteSchemaModeRequest) (*SchemaMode, error)
}

// UnimplementedManagedSchemaRegistryServer should be embedded to have forward compatible implementations.
type UnimplementedManagedSchemaRegistryServer struct {
}

func (UnimplementedManagedSchemaRegistryServer) GetSchemaRegistry(context.Context, *GetSchemaRegistryRequest) (*SchemaRegistry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchemaRegistry not implemented")
}
func (UnimplementedManagedSchemaRegistryServer) ListSchemaRegistries(context.Context, *ListSchemaRegistriesRequest) (*ListSchemaRegistriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSchemaRegistries not implemented")
}
func (UnimplementedManagedSchemaRegistryServer) CreateSchemaRegistry(context.Context, *CreateSchemaRegistryRequest) (*SchemaRegistry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSchemaRegistry not implemented")
}
func (UnimplementedManagedSchemaRegistryServer) DeleteSchemaRegistry(context.Context, *DeleteSchemaRegistryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSchemaRegistry not implemented")
}
func (UnimplementedManagedSchemaRegistryServer) GetContext(context.Context, *GetContextRequest) (*Context, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContext not implemented")
}
func (UnimplementedManagedSchemaRegistryServer) ListContexts(context.Context, *ListContextsRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContexts not implemented")
}
func (UnimplementedManagedSchemaRegistryServer) GetSchema(context.Context, *GetSchemaRequest) (*Schema, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchema not implemented")
}
func (UnimplementedManagedSchemaRegistryServer) GetRawSchema(context.Context, *GetSchemaRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRawSchema not implemented")
}
func (UnimplementedManagedSchemaRegistryServer) ListSchemaVersions(context.Context, *ListSchemaVersionsRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSchemaVersions not implemented")
}
func (UnimplementedManagedSchemaRegistryServer) ListSchemaTypes(context.Context, *ListSchemaTypesRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSchemaTypes not implemented")
}
func (UnimplementedManagedSchemaRegistryServer) ListSubjects(context.Context, *ListSubjectsRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubjects not implemented")
}
func (UnimplementedManagedSchemaRegistryServer) ListSubjectsBySchemaId(context.Context, *ListSubjectsBySchemaIdRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubjectsBySchemaId not implemented")
}
func (UnimplementedManagedSchemaRegistryServer) DeleteSubject(context.Context, *DeleteSubjectRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubject not implemented")
}
func (UnimplementedManagedSchemaRegistryServer) LookupVersion(context.Context, *LookupVersionRequest) (*SchemaVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupVersion not implemented")
}
func (UnimplementedManagedSchemaRegistryServer) GetVersion(context.Context, *GetVersionRequest) (*SchemaVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedManagedSchemaRegistryServer) GetRawSchemaVersion(context.Context, *GetVersionRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRawSchemaVersion not implemented")
}
func (UnimplementedManagedSchemaRegistryServer) ListVersions(context.Context, *ListVersionsRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVersions not implemented")
}
func (UnimplementedManagedSchemaRegistryServer) CreateVersion(context.Context, *CreateVersionRequest) (*CreateVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVersion not implemented")
}
func (UnimplementedManagedSchemaRegistryServer) DeleteVersion(context.Context, *DeleteVersionRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVersion not implemented")
}
func (UnimplementedManagedSchemaRegistryServer) ListReferencedSchemas(context.Context, *ListReferencedSchemasRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReferencedSchemas not implemented")
}
func (UnimplementedManagedSchemaRegistryServer) CheckCompatibility(context.Context, *CheckCompatibilityRequest) (*CheckCompatibilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCompatibility not implemented")
}
func (UnimplementedManagedSchemaRegistryServer) GetSchemaConfig(context.Context, *GetSchemaConfigRequest) (*SchemaConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchemaConfig not implemented")
}
func (UnimplementedManagedSchemaRegistryServer) UpdateSchemaConfig(context.Context, *UpdateSchemaConfigRequest) (*SchemaConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSchemaConfig not implemented")
}
func (UnimplementedManagedSchemaRegistryServer) DeleteSchemaConfig(context.Context, *DeleteSchemaConfigRequest) (*SchemaConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSchemaConfig not implemented")
}
func (UnimplementedManagedSchemaRegistryServer) GetSchemaMode(context.Context, *GetSchemaModeRequest) (*SchemaMode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchemaMode not implemented")
}
func (UnimplementedManagedSchemaRegistryServer) UpdateSchemaMode(context.Context, *UpdateSchemaModeRequest) (*SchemaMode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSchemaMode not implemented")
}
func (UnimplementedManagedSchemaRegistryServer) DeleteSchemaMode(context.Context, *DeleteSchemaModeRequest) (*SchemaMode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSchemaMode not implemented")
}

// UnsafeManagedSchemaRegistryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagedSchemaRegistryServer will
// result in compilation errors.
type UnsafeManagedSchemaRegistryServer interface {
	mustEmbedUnimplementedManagedSchemaRegistryServer()
}

func RegisterManagedSchemaRegistryServer(s grpc.ServiceRegistrar, srv ManagedSchemaRegistryServer) {
	s.RegisterService(&ManagedSchemaRegistry_ServiceDesc, srv)
}

func _ManagedSchemaRegistry_GetSchemaRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchemaRegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedSchemaRegistryServer).GetSchemaRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedSchemaRegistry_GetSchemaRegistry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedSchemaRegistryServer).GetSchemaRegistry(ctx, req.(*GetSchemaRegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedSchemaRegistry_ListSchemaRegistries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSchemaRegistriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedSchemaRegistryServer).ListSchemaRegistries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedSchemaRegistry_ListSchemaRegistries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedSchemaRegistryServer).ListSchemaRegistries(ctx, req.(*ListSchemaRegistriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedSchemaRegistry_CreateSchemaRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSchemaRegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedSchemaRegistryServer).CreateSchemaRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedSchemaRegistry_CreateSchemaRegistry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedSchemaRegistryServer).CreateSchemaRegistry(ctx, req.(*CreateSchemaRegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedSchemaRegistry_DeleteSchemaRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSchemaRegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedSchemaRegistryServer).DeleteSchemaRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedSchemaRegistry_DeleteSchemaRegistry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedSchemaRegistryServer).DeleteSchemaRegistry(ctx, req.(*DeleteSchemaRegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedSchemaRegistry_GetContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedSchemaRegistryServer).GetContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedSchemaRegistry_GetContext_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedSchemaRegistryServer).GetContext(ctx, req.(*GetContextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedSchemaRegistry_ListContexts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContextsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedSchemaRegistryServer).ListContexts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedSchemaRegistry_ListContexts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedSchemaRegistryServer).ListContexts(ctx, req.(*ListContextsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedSchemaRegistry_GetSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedSchemaRegistryServer).GetSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedSchemaRegistry_GetSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedSchemaRegistryServer).GetSchema(ctx, req.(*GetSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedSchemaRegistry_GetRawSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedSchemaRegistryServer).GetRawSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedSchemaRegistry_GetRawSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedSchemaRegistryServer).GetRawSchema(ctx, req.(*GetSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedSchemaRegistry_ListSchemaVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSchemaVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedSchemaRegistryServer).ListSchemaVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedSchemaRegistry_ListSchemaVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedSchemaRegistryServer).ListSchemaVersions(ctx, req.(*ListSchemaVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedSchemaRegistry_ListSchemaTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSchemaTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedSchemaRegistryServer).ListSchemaTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedSchemaRegistry_ListSchemaTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedSchemaRegistryServer).ListSchemaTypes(ctx, req.(*ListSchemaTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedSchemaRegistry_ListSubjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedSchemaRegistryServer).ListSubjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedSchemaRegistry_ListSubjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedSchemaRegistryServer).ListSubjects(ctx, req.(*ListSubjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedSchemaRegistry_ListSubjectsBySchemaId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubjectsBySchemaIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedSchemaRegistryServer).ListSubjectsBySchemaId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedSchemaRegistry_ListSubjectsBySchemaId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedSchemaRegistryServer).ListSubjectsBySchemaId(ctx, req.(*ListSubjectsBySchemaIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedSchemaRegistry_DeleteSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedSchemaRegistryServer).DeleteSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedSchemaRegistry_DeleteSubject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedSchemaRegistryServer).DeleteSubject(ctx, req.(*DeleteSubjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedSchemaRegistry_LookupVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedSchemaRegistryServer).LookupVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedSchemaRegistry_LookupVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedSchemaRegistryServer).LookupVersion(ctx, req.(*LookupVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedSchemaRegistry_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedSchemaRegistryServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedSchemaRegistry_GetVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedSchemaRegistryServer).GetVersion(ctx, req.(*GetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedSchemaRegistry_GetRawSchemaVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedSchemaRegistryServer).GetRawSchemaVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedSchemaRegistry_GetRawSchemaVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedSchemaRegistryServer).GetRawSchemaVersion(ctx, req.(*GetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedSchemaRegistry_ListVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedSchemaRegistryServer).ListVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedSchemaRegistry_ListVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedSchemaRegistryServer).ListVersions(ctx, req.(*ListVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedSchemaRegistry_CreateVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedSchemaRegistryServer).CreateVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedSchemaRegistry_CreateVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedSchemaRegistryServer).CreateVersion(ctx, req.(*CreateVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedSchemaRegistry_DeleteVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedSchemaRegistryServer).DeleteVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedSchemaRegistry_DeleteVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedSchemaRegistryServer).DeleteVersion(ctx, req.(*DeleteVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedSchemaRegistry_ListReferencedSchemas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReferencedSchemasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedSchemaRegistryServer).ListReferencedSchemas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedSchemaRegistry_ListReferencedSchemas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedSchemaRegistryServer).ListReferencedSchemas(ctx, req.(*ListReferencedSchemasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedSchemaRegistry_CheckCompatibility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckCompatibilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedSchemaRegistryServer).CheckCompatibility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedSchemaRegistry_CheckCompatibility_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedSchemaRegistryServer).CheckCompatibility(ctx, req.(*CheckCompatibilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedSchemaRegistry_GetSchemaConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchemaConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedSchemaRegistryServer).GetSchemaConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedSchemaRegistry_GetSchemaConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedSchemaRegistryServer).GetSchemaConfig(ctx, req.(*GetSchemaConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedSchemaRegistry_UpdateSchemaConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSchemaConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedSchemaRegistryServer).UpdateSchemaConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedSchemaRegistry_UpdateSchemaConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedSchemaRegistryServer).UpdateSchemaConfig(ctx, req.(*UpdateSchemaConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedSchemaRegistry_DeleteSchemaConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSchemaConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedSchemaRegistryServer).DeleteSchemaConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedSchemaRegistry_DeleteSchemaConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedSchemaRegistryServer).DeleteSchemaConfig(ctx, req.(*DeleteSchemaConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedSchemaRegistry_GetSchemaMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchemaModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedSchemaRegistryServer).GetSchemaMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedSchemaRegistry_GetSchemaMode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedSchemaRegistryServer).GetSchemaMode(ctx, req.(*GetSchemaModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedSchemaRegistry_UpdateSchemaMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSchemaModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedSchemaRegistryServer).UpdateSchemaMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedSchemaRegistry_UpdateSchemaMode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedSchemaRegistryServer).UpdateSchemaMode(ctx, req.(*UpdateSchemaModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedSchemaRegistry_DeleteSchemaMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSchemaModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedSchemaRegistryServer).DeleteSchemaMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedSchemaRegistry_DeleteSchemaMode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedSchemaRegistryServer).DeleteSchemaMode(ctx, req.(*DeleteSchemaModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ManagedSchemaRegistry_ServiceDesc is the grpc.ServiceDesc for ManagedSchemaRegistry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManagedSchemaRegistry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.managedkafka.schemaregistry.v1.ManagedSchemaRegistry",
	HandlerType: (*ManagedSchemaRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSchemaRegistry",
			Handler:    _ManagedSchemaRegistry_GetSchemaRegistry_Handler,
		},
		{
			MethodName: "ListSchemaRegistries",
			Handler:    _ManagedSchemaRegistry_ListSchemaRegistries_Handler,
		},
		{
			MethodName: "CreateSchemaRegistry",
			Handler:    _ManagedSchemaRegistry_CreateSchemaRegistry_Handler,
		},
		{
			MethodName: "DeleteSchemaRegistry",
			Handler:    _ManagedSchemaRegistry_DeleteSchemaRegistry_Handler,
		},
		{
			MethodName: "GetContext",
			Handler:    _ManagedSchemaRegistry_GetContext_Handler,
		},
		{
			MethodName: "ListContexts",
			Handler:    _ManagedSchemaRegistry_ListContexts_Handler,
		},
		{
			MethodName: "GetSchema",
			Handler:    _ManagedSchemaRegistry_GetSchema_Handler,
		},
		{
			MethodName: "GetRawSchema",
			Handler:    _ManagedSchemaRegistry_GetRawSchema_Handler,
		},
		{
			MethodName: "ListSchemaVersions",
			Handler:    _ManagedSchemaRegistry_ListSchemaVersions_Handler,
		},
		{
			MethodName: "ListSchemaTypes",
			Handler:    _ManagedSchemaRegistry_ListSchemaTypes_Handler,
		},
		{
			MethodName: "ListSubjects",
			Handler:    _ManagedSchemaRegistry_ListSubjects_Handler,
		},
		{
			MethodName: "ListSubjectsBySchemaId",
			Handler:    _ManagedSchemaRegistry_ListSubjectsBySchemaId_Handler,
		},
		{
			MethodName: "DeleteSubject",
			Handler:    _ManagedSchemaRegistry_DeleteSubject_Handler,
		},
		{
			MethodName: "LookupVersion",
			Handler:    _ManagedSchemaRegistry_LookupVersion_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _ManagedSchemaRegistry_GetVersion_Handler,
		},
		{
			MethodName: "GetRawSchemaVersion",
			Handler:    _ManagedSchemaRegistry_GetRawSchemaVersion_Handler,
		},
		{
			MethodName: "ListVersions",
			Handler:    _ManagedSchemaRegistry_ListVersions_Handler,
		},
		{
			MethodName: "CreateVersion",
			Handler:    _ManagedSchemaRegistry_CreateVersion_Handler,
		},
		{
			MethodName: "DeleteVersion",
			Handler:    _ManagedSchemaRegistry_DeleteVersion_Handler,
		},
		{
			MethodName: "ListReferencedSchemas",
			Handler:    _ManagedSchemaRegistry_ListReferencedSchemas_Handler,
		},
		{
			MethodName: "CheckCompatibility",
			Handler:    _ManagedSchemaRegistry_CheckCompatibility_Handler,
		},
		{
			MethodName: "GetSchemaConfig",
			Handler:    _ManagedSchemaRegistry_GetSchemaConfig_Handler,
		},
		{
			MethodName: "UpdateSchemaConfig",
			Handler:    _ManagedSchemaRegistry_UpdateSchemaConfig_Handler,
		},
		{
			MethodName: "DeleteSchemaConfig",
			Handler:    _ManagedSchemaRegistry_DeleteSchemaConfig_Handler,
		},
		{
			MethodName: "GetSchemaMode",
			Handler:    _ManagedSchemaRegistry_GetSchemaMode_Handler,
		},
		{
			MethodName: "UpdateSchemaMode",
			Handler:    _ManagedSchemaRegistry_UpdateSchemaMode_Handler,
		},
		{
			MethodName: "DeleteSchemaMode",
			Handler:    _ManagedSchemaRegistry_DeleteSchemaMode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/managedkafka/schemaregistry/v1/schema_registry.proto",
}
