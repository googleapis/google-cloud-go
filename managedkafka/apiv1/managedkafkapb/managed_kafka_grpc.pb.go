// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/managedkafka/v1/managed_kafka.proto

package managedkafkapb

import (
	context "context"

	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ManagedKafka_ListClusters_FullMethodName        = "/google.cloud.managedkafka.v1.ManagedKafka/ListClusters"
	ManagedKafka_GetCluster_FullMethodName          = "/google.cloud.managedkafka.v1.ManagedKafka/GetCluster"
	ManagedKafka_CreateCluster_FullMethodName       = "/google.cloud.managedkafka.v1.ManagedKafka/CreateCluster"
	ManagedKafka_UpdateCluster_FullMethodName       = "/google.cloud.managedkafka.v1.ManagedKafka/UpdateCluster"
	ManagedKafka_DeleteCluster_FullMethodName       = "/google.cloud.managedkafka.v1.ManagedKafka/DeleteCluster"
	ManagedKafka_ListTopics_FullMethodName          = "/google.cloud.managedkafka.v1.ManagedKafka/ListTopics"
	ManagedKafka_GetTopic_FullMethodName            = "/google.cloud.managedkafka.v1.ManagedKafka/GetTopic"
	ManagedKafka_CreateTopic_FullMethodName         = "/google.cloud.managedkafka.v1.ManagedKafka/CreateTopic"
	ManagedKafka_UpdateTopic_FullMethodName         = "/google.cloud.managedkafka.v1.ManagedKafka/UpdateTopic"
	ManagedKafka_DeleteTopic_FullMethodName         = "/google.cloud.managedkafka.v1.ManagedKafka/DeleteTopic"
	ManagedKafka_ListConsumerGroups_FullMethodName  = "/google.cloud.managedkafka.v1.ManagedKafka/ListConsumerGroups"
	ManagedKafka_GetConsumerGroup_FullMethodName    = "/google.cloud.managedkafka.v1.ManagedKafka/GetConsumerGroup"
	ManagedKafka_UpdateConsumerGroup_FullMethodName = "/google.cloud.managedkafka.v1.ManagedKafka/UpdateConsumerGroup"
	ManagedKafka_DeleteConsumerGroup_FullMethodName = "/google.cloud.managedkafka.v1.ManagedKafka/DeleteConsumerGroup"
	ManagedKafka_ListAcls_FullMethodName            = "/google.cloud.managedkafka.v1.ManagedKafka/ListAcls"
	ManagedKafka_GetAcl_FullMethodName              = "/google.cloud.managedkafka.v1.ManagedKafka/GetAcl"
	ManagedKafka_CreateAcl_FullMethodName           = "/google.cloud.managedkafka.v1.ManagedKafka/CreateAcl"
	ManagedKafka_UpdateAcl_FullMethodName           = "/google.cloud.managedkafka.v1.ManagedKafka/UpdateAcl"
	ManagedKafka_DeleteAcl_FullMethodName           = "/google.cloud.managedkafka.v1.ManagedKafka/DeleteAcl"
	ManagedKafka_AddAclEntry_FullMethodName         = "/google.cloud.managedkafka.v1.ManagedKafka/AddAclEntry"
	ManagedKafka_RemoveAclEntry_FullMethodName      = "/google.cloud.managedkafka.v1.ManagedKafka/RemoveAclEntry"
)

// ManagedKafkaClient is the client API for ManagedKafka service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagedKafkaClient interface {
	// Lists the clusters in a given project and location.
	ListClusters(ctx context.Context, in *ListClustersRequest, opts ...grpc.CallOption) (*ListClustersResponse, error)
	// Returns the properties of a single cluster.
	GetCluster(ctx context.Context, in *GetClusterRequest, opts ...grpc.CallOption) (*Cluster, error)
	// Creates a new cluster in a given project and location.
	CreateCluster(ctx context.Context, in *CreateClusterRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates the properties of a single cluster.
	UpdateCluster(ctx context.Context, in *UpdateClusterRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single cluster.
	DeleteCluster(ctx context.Context, in *DeleteClusterRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists the topics in a given cluster.
	ListTopics(ctx context.Context, in *ListTopicsRequest, opts ...grpc.CallOption) (*ListTopicsResponse, error)
	// Returns the properties of a single topic.
	GetTopic(ctx context.Context, in *GetTopicRequest, opts ...grpc.CallOption) (*Topic, error)
	// Creates a new topic in a given project and location.
	CreateTopic(ctx context.Context, in *CreateTopicRequest, opts ...grpc.CallOption) (*Topic, error)
	// Updates the properties of a single topic.
	UpdateTopic(ctx context.Context, in *UpdateTopicRequest, opts ...grpc.CallOption) (*Topic, error)
	// Deletes a single topic.
	DeleteTopic(ctx context.Context, in *DeleteTopicRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Lists the consumer groups in a given cluster.
	ListConsumerGroups(ctx context.Context, in *ListConsumerGroupsRequest, opts ...grpc.CallOption) (*ListConsumerGroupsResponse, error)
	// Returns the properties of a single consumer group.
	GetConsumerGroup(ctx context.Context, in *GetConsumerGroupRequest, opts ...grpc.CallOption) (*ConsumerGroup, error)
	// Updates the properties of a single consumer group.
	UpdateConsumerGroup(ctx context.Context, in *UpdateConsumerGroupRequest, opts ...grpc.CallOption) (*ConsumerGroup, error)
	// Deletes a single consumer group.
	DeleteConsumerGroup(ctx context.Context, in *DeleteConsumerGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Lists the acls in a given cluster.
	ListAcls(ctx context.Context, in *ListAclsRequest, opts ...grpc.CallOption) (*ListAclsResponse, error)
	// Returns the properties of a single acl.
	GetAcl(ctx context.Context, in *GetAclRequest, opts ...grpc.CallOption) (*Acl, error)
	// Creates a new acl in the given project, location, and cluster.
	CreateAcl(ctx context.Context, in *CreateAclRequest, opts ...grpc.CallOption) (*Acl, error)
	// Updates the properties of a single acl.
	UpdateAcl(ctx context.Context, in *UpdateAclRequest, opts ...grpc.CallOption) (*Acl, error)
	// Deletes an acl.
	DeleteAcl(ctx context.Context, in *DeleteAclRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Incremental update: Adds an acl entry to an acl. Creates the acl if it does
	// not exist yet.
	AddAclEntry(ctx context.Context, in *AddAclEntryRequest, opts ...grpc.CallOption) (*AddAclEntryResponse, error)
	// Incremental update: Removes an acl entry from an acl. Deletes the acl if
	// its acl entries become empty (i.e. if the removed entry was the last one in
	// the acl).
	RemoveAclEntry(ctx context.Context, in *RemoveAclEntryRequest, opts ...grpc.CallOption) (*RemoveAclEntryResponse, error)
}

type managedKafkaClient struct {
	cc grpc.ClientConnInterface
}

func NewManagedKafkaClient(cc grpc.ClientConnInterface) ManagedKafkaClient {
	return &managedKafkaClient{cc}
}

func (c *managedKafkaClient) ListClusters(ctx context.Context, in *ListClustersRequest, opts ...grpc.CallOption) (*ListClustersResponse, error) {
	out := new(ListClustersResponse)
	err := c.cc.Invoke(ctx, ManagedKafka_ListClusters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedKafkaClient) GetCluster(ctx context.Context, in *GetClusterRequest, opts ...grpc.CallOption) (*Cluster, error) {
	out := new(Cluster)
	err := c.cc.Invoke(ctx, ManagedKafka_GetCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedKafkaClient) CreateCluster(ctx context.Context, in *CreateClusterRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, ManagedKafka_CreateCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedKafkaClient) UpdateCluster(ctx context.Context, in *UpdateClusterRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, ManagedKafka_UpdateCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedKafkaClient) DeleteCluster(ctx context.Context, in *DeleteClusterRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, ManagedKafka_DeleteCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedKafkaClient) ListTopics(ctx context.Context, in *ListTopicsRequest, opts ...grpc.CallOption) (*ListTopicsResponse, error) {
	out := new(ListTopicsResponse)
	err := c.cc.Invoke(ctx, ManagedKafka_ListTopics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedKafkaClient) GetTopic(ctx context.Context, in *GetTopicRequest, opts ...grpc.CallOption) (*Topic, error) {
	out := new(Topic)
	err := c.cc.Invoke(ctx, ManagedKafka_GetTopic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedKafkaClient) CreateTopic(ctx context.Context, in *CreateTopicRequest, opts ...grpc.CallOption) (*Topic, error) {
	out := new(Topic)
	err := c.cc.Invoke(ctx, ManagedKafka_CreateTopic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedKafkaClient) UpdateTopic(ctx context.Context, in *UpdateTopicRequest, opts ...grpc.CallOption) (*Topic, error) {
	out := new(Topic)
	err := c.cc.Invoke(ctx, ManagedKafka_UpdateTopic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedKafkaClient) DeleteTopic(ctx context.Context, in *DeleteTopicRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ManagedKafka_DeleteTopic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedKafkaClient) ListConsumerGroups(ctx context.Context, in *ListConsumerGroupsRequest, opts ...grpc.CallOption) (*ListConsumerGroupsResponse, error) {
	out := new(ListConsumerGroupsResponse)
	err := c.cc.Invoke(ctx, ManagedKafka_ListConsumerGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedKafkaClient) GetConsumerGroup(ctx context.Context, in *GetConsumerGroupRequest, opts ...grpc.CallOption) (*ConsumerGroup, error) {
	out := new(ConsumerGroup)
	err := c.cc.Invoke(ctx, ManagedKafka_GetConsumerGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedKafkaClient) UpdateConsumerGroup(ctx context.Context, in *UpdateConsumerGroupRequest, opts ...grpc.CallOption) (*ConsumerGroup, error) {
	out := new(ConsumerGroup)
	err := c.cc.Invoke(ctx, ManagedKafka_UpdateConsumerGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedKafkaClient) DeleteConsumerGroup(ctx context.Context, in *DeleteConsumerGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ManagedKafka_DeleteConsumerGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedKafkaClient) ListAcls(ctx context.Context, in *ListAclsRequest, opts ...grpc.CallOption) (*ListAclsResponse, error) {
	out := new(ListAclsResponse)
	err := c.cc.Invoke(ctx, ManagedKafka_ListAcls_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedKafkaClient) GetAcl(ctx context.Context, in *GetAclRequest, opts ...grpc.CallOption) (*Acl, error) {
	out := new(Acl)
	err := c.cc.Invoke(ctx, ManagedKafka_GetAcl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedKafkaClient) CreateAcl(ctx context.Context, in *CreateAclRequest, opts ...grpc.CallOption) (*Acl, error) {
	out := new(Acl)
	err := c.cc.Invoke(ctx, ManagedKafka_CreateAcl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedKafkaClient) UpdateAcl(ctx context.Context, in *UpdateAclRequest, opts ...grpc.CallOption) (*Acl, error) {
	out := new(Acl)
	err := c.cc.Invoke(ctx, ManagedKafka_UpdateAcl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedKafkaClient) DeleteAcl(ctx context.Context, in *DeleteAclRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ManagedKafka_DeleteAcl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedKafkaClient) AddAclEntry(ctx context.Context, in *AddAclEntryRequest, opts ...grpc.CallOption) (*AddAclEntryResponse, error) {
	out := new(AddAclEntryResponse)
	err := c.cc.Invoke(ctx, ManagedKafka_AddAclEntry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedKafkaClient) RemoveAclEntry(ctx context.Context, in *RemoveAclEntryRequest, opts ...grpc.CallOption) (*RemoveAclEntryResponse, error) {
	out := new(RemoveAclEntryResponse)
	err := c.cc.Invoke(ctx, ManagedKafka_RemoveAclEntry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagedKafkaServer is the server API for ManagedKafka service.
// All implementations should embed UnimplementedManagedKafkaServer
// for forward compatibility
type ManagedKafkaServer interface {
	// Lists the clusters in a given project and location.
	ListClusters(context.Context, *ListClustersRequest) (*ListClustersResponse, error)
	// Returns the properties of a single cluster.
	GetCluster(context.Context, *GetClusterRequest) (*Cluster, error)
	// Creates a new cluster in a given project and location.
	CreateCluster(context.Context, *CreateClusterRequest) (*longrunningpb.Operation, error)
	// Updates the properties of a single cluster.
	UpdateCluster(context.Context, *UpdateClusterRequest) (*longrunningpb.Operation, error)
	// Deletes a single cluster.
	DeleteCluster(context.Context, *DeleteClusterRequest) (*longrunningpb.Operation, error)
	// Lists the topics in a given cluster.
	ListTopics(context.Context, *ListTopicsRequest) (*ListTopicsResponse, error)
	// Returns the properties of a single topic.
	GetTopic(context.Context, *GetTopicRequest) (*Topic, error)
	// Creates a new topic in a given project and location.
	CreateTopic(context.Context, *CreateTopicRequest) (*Topic, error)
	// Updates the properties of a single topic.
	UpdateTopic(context.Context, *UpdateTopicRequest) (*Topic, error)
	// Deletes a single topic.
	DeleteTopic(context.Context, *DeleteTopicRequest) (*emptypb.Empty, error)
	// Lists the consumer groups in a given cluster.
	ListConsumerGroups(context.Context, *ListConsumerGroupsRequest) (*ListConsumerGroupsResponse, error)
	// Returns the properties of a single consumer group.
	GetConsumerGroup(context.Context, *GetConsumerGroupRequest) (*ConsumerGroup, error)
	// Updates the properties of a single consumer group.
	UpdateConsumerGroup(context.Context, *UpdateConsumerGroupRequest) (*ConsumerGroup, error)
	// Deletes a single consumer group.
	DeleteConsumerGroup(context.Context, *DeleteConsumerGroupRequest) (*emptypb.Empty, error)
	// Lists the acls in a given cluster.
	ListAcls(context.Context, *ListAclsRequest) (*ListAclsResponse, error)
	// Returns the properties of a single acl.
	GetAcl(context.Context, *GetAclRequest) (*Acl, error)
	// Creates a new acl in the given project, location, and cluster.
	CreateAcl(context.Context, *CreateAclRequest) (*Acl, error)
	// Updates the properties of a single acl.
	UpdateAcl(context.Context, *UpdateAclRequest) (*Acl, error)
	// Deletes an acl.
	DeleteAcl(context.Context, *DeleteAclRequest) (*emptypb.Empty, error)
	// Incremental update: Adds an acl entry to an acl. Creates the acl if it does
	// not exist yet.
	AddAclEntry(context.Context, *AddAclEntryRequest) (*AddAclEntryResponse, error)
	// Incremental update: Removes an acl entry from an acl. Deletes the acl if
	// its acl entries become empty (i.e. if the removed entry was the last one in
	// the acl).
	RemoveAclEntry(context.Context, *RemoveAclEntryRequest) (*RemoveAclEntryResponse, error)
}

// UnimplementedManagedKafkaServer should be embedded to have forward compatible implementations.
type UnimplementedManagedKafkaServer struct {
}

func (UnimplementedManagedKafkaServer) ListClusters(context.Context, *ListClustersRequest) (*ListClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClusters not implemented")
}
func (UnimplementedManagedKafkaServer) GetCluster(context.Context, *GetClusterRequest) (*Cluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCluster not implemented")
}
func (UnimplementedManagedKafkaServer) CreateCluster(context.Context, *CreateClusterRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCluster not implemented")
}
func (UnimplementedManagedKafkaServer) UpdateCluster(context.Context, *UpdateClusterRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCluster not implemented")
}
func (UnimplementedManagedKafkaServer) DeleteCluster(context.Context, *DeleteClusterRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCluster not implemented")
}
func (UnimplementedManagedKafkaServer) ListTopics(context.Context, *ListTopicsRequest) (*ListTopicsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTopics not implemented")
}
func (UnimplementedManagedKafkaServer) GetTopic(context.Context, *GetTopicRequest) (*Topic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopic not implemented")
}
func (UnimplementedManagedKafkaServer) CreateTopic(context.Context, *CreateTopicRequest) (*Topic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTopic not implemented")
}
func (UnimplementedManagedKafkaServer) UpdateTopic(context.Context, *UpdateTopicRequest) (*Topic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTopic not implemented")
}
func (UnimplementedManagedKafkaServer) DeleteTopic(context.Context, *DeleteTopicRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTopic not implemented")
}
func (UnimplementedManagedKafkaServer) ListConsumerGroups(context.Context, *ListConsumerGroupsRequest) (*ListConsumerGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConsumerGroups not implemented")
}
func (UnimplementedManagedKafkaServer) GetConsumerGroup(context.Context, *GetConsumerGroupRequest) (*ConsumerGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConsumerGroup not implemented")
}
func (UnimplementedManagedKafkaServer) UpdateConsumerGroup(context.Context, *UpdateConsumerGroupRequest) (*ConsumerGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConsumerGroup not implemented")
}
func (UnimplementedManagedKafkaServer) DeleteConsumerGroup(context.Context, *DeleteConsumerGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConsumerGroup not implemented")
}
func (UnimplementedManagedKafkaServer) ListAcls(context.Context, *ListAclsRequest) (*ListAclsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAcls not implemented")
}
func (UnimplementedManagedKafkaServer) GetAcl(context.Context, *GetAclRequest) (*Acl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAcl not implemented")
}
func (UnimplementedManagedKafkaServer) CreateAcl(context.Context, *CreateAclRequest) (*Acl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAcl not implemented")
}
func (UnimplementedManagedKafkaServer) UpdateAcl(context.Context, *UpdateAclRequest) (*Acl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAcl not implemented")
}
func (UnimplementedManagedKafkaServer) DeleteAcl(context.Context, *DeleteAclRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAcl not implemented")
}
func (UnimplementedManagedKafkaServer) AddAclEntry(context.Context, *AddAclEntryRequest) (*AddAclEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAclEntry not implemented")
}
func (UnimplementedManagedKafkaServer) RemoveAclEntry(context.Context, *RemoveAclEntryRequest) (*RemoveAclEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAclEntry not implemented")
}

// UnsafeManagedKafkaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagedKafkaServer will
// result in compilation errors.
type UnsafeManagedKafkaServer interface {
	mustEmbedUnimplementedManagedKafkaServer()
}

func RegisterManagedKafkaServer(s grpc.ServiceRegistrar, srv ManagedKafkaServer) {
	s.RegisterService(&ManagedKafka_ServiceDesc, srv)
}

func _ManagedKafka_ListClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedKafkaServer).ListClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedKafka_ListClusters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedKafkaServer).ListClusters(ctx, req.(*ListClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedKafka_GetCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedKafkaServer).GetCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedKafka_GetCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedKafkaServer).GetCluster(ctx, req.(*GetClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedKafka_CreateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedKafkaServer).CreateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedKafka_CreateCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedKafkaServer).CreateCluster(ctx, req.(*CreateClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedKafka_UpdateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedKafkaServer).UpdateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedKafka_UpdateCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedKafkaServer).UpdateCluster(ctx, req.(*UpdateClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedKafka_DeleteCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedKafkaServer).DeleteCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedKafka_DeleteCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedKafkaServer).DeleteCluster(ctx, req.(*DeleteClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedKafka_ListTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTopicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedKafkaServer).ListTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedKafka_ListTopics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedKafkaServer).ListTopics(ctx, req.(*ListTopicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedKafka_GetTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedKafkaServer).GetTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedKafka_GetTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedKafkaServer).GetTopic(ctx, req.(*GetTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedKafka_CreateTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedKafkaServer).CreateTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedKafka_CreateTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedKafkaServer).CreateTopic(ctx, req.(*CreateTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedKafka_UpdateTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedKafkaServer).UpdateTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedKafka_UpdateTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedKafkaServer).UpdateTopic(ctx, req.(*UpdateTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedKafka_DeleteTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedKafkaServer).DeleteTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedKafka_DeleteTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedKafkaServer).DeleteTopic(ctx, req.(*DeleteTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedKafka_ListConsumerGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConsumerGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedKafkaServer).ListConsumerGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedKafka_ListConsumerGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedKafkaServer).ListConsumerGroups(ctx, req.(*ListConsumerGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedKafka_GetConsumerGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConsumerGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedKafkaServer).GetConsumerGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedKafka_GetConsumerGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedKafkaServer).GetConsumerGroup(ctx, req.(*GetConsumerGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedKafka_UpdateConsumerGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConsumerGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedKafkaServer).UpdateConsumerGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedKafka_UpdateConsumerGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedKafkaServer).UpdateConsumerGroup(ctx, req.(*UpdateConsumerGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedKafka_DeleteConsumerGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConsumerGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedKafkaServer).DeleteConsumerGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedKafka_DeleteConsumerGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedKafkaServer).DeleteConsumerGroup(ctx, req.(*DeleteConsumerGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedKafka_ListAcls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAclsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedKafkaServer).ListAcls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedKafka_ListAcls_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedKafkaServer).ListAcls(ctx, req.(*ListAclsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedKafka_GetAcl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAclRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedKafkaServer).GetAcl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedKafka_GetAcl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedKafkaServer).GetAcl(ctx, req.(*GetAclRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedKafka_CreateAcl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAclRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedKafkaServer).CreateAcl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedKafka_CreateAcl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedKafkaServer).CreateAcl(ctx, req.(*CreateAclRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedKafka_UpdateAcl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAclRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedKafkaServer).UpdateAcl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedKafka_UpdateAcl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedKafkaServer).UpdateAcl(ctx, req.(*UpdateAclRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedKafka_DeleteAcl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAclRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedKafkaServer).DeleteAcl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedKafka_DeleteAcl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedKafkaServer).DeleteAcl(ctx, req.(*DeleteAclRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedKafka_AddAclEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAclEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedKafkaServer).AddAclEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedKafka_AddAclEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedKafkaServer).AddAclEntry(ctx, req.(*AddAclEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedKafka_RemoveAclEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAclEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedKafkaServer).RemoveAclEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedKafka_RemoveAclEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedKafkaServer).RemoveAclEntry(ctx, req.(*RemoveAclEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ManagedKafka_ServiceDesc is the grpc.ServiceDesc for ManagedKafka service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManagedKafka_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.managedkafka.v1.ManagedKafka",
	HandlerType: (*ManagedKafkaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListClusters",
			Handler:    _ManagedKafka_ListClusters_Handler,
		},
		{
			MethodName: "GetCluster",
			Handler:    _ManagedKafka_GetCluster_Handler,
		},
		{
			MethodName: "CreateCluster",
			Handler:    _ManagedKafka_CreateCluster_Handler,
		},
		{
			MethodName: "UpdateCluster",
			Handler:    _ManagedKafka_UpdateCluster_Handler,
		},
		{
			MethodName: "DeleteCluster",
			Handler:    _ManagedKafka_DeleteCluster_Handler,
		},
		{
			MethodName: "ListTopics",
			Handler:    _ManagedKafka_ListTopics_Handler,
		},
		{
			MethodName: "GetTopic",
			Handler:    _ManagedKafka_GetTopic_Handler,
		},
		{
			MethodName: "CreateTopic",
			Handler:    _ManagedKafka_CreateTopic_Handler,
		},
		{
			MethodName: "UpdateTopic",
			Handler:    _ManagedKafka_UpdateTopic_Handler,
		},
		{
			MethodName: "DeleteTopic",
			Handler:    _ManagedKafka_DeleteTopic_Handler,
		},
		{
			MethodName: "ListConsumerGroups",
			Handler:    _ManagedKafka_ListConsumerGroups_Handler,
		},
		{
			MethodName: "GetConsumerGroup",
			Handler:    _ManagedKafka_GetConsumerGroup_Handler,
		},
		{
			MethodName: "UpdateConsumerGroup",
			Handler:    _ManagedKafka_UpdateConsumerGroup_Handler,
		},
		{
			MethodName: "DeleteConsumerGroup",
			Handler:    _ManagedKafka_DeleteConsumerGroup_Handler,
		},
		{
			MethodName: "ListAcls",
			Handler:    _ManagedKafka_ListAcls_Handler,
		},
		{
			MethodName: "GetAcl",
			Handler:    _ManagedKafka_GetAcl_Handler,
		},
		{
			MethodName: "CreateAcl",
			Handler:    _ManagedKafka_CreateAcl_Handler,
		},
		{
			MethodName: "UpdateAcl",
			Handler:    _ManagedKafka_UpdateAcl_Handler,
		},
		{
			MethodName: "DeleteAcl",
			Handler:    _ManagedKafka_DeleteAcl_Handler,
		},
		{
			MethodName: "AddAclEntry",
			Handler:    _ManagedKafka_AddAclEntry_Handler,
		},
		{
			MethodName: "RemoveAclEntry",
			Handler:    _ManagedKafka_RemoveAclEntry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/managedkafka/v1/managed_kafka.proto",
}
