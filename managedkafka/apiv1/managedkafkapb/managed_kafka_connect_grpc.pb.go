// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/managedkafka/v1/managed_kafka_connect.proto

package managedkafkapb

import (
	context "context"

	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ManagedKafkaConnect_ListConnectClusters_FullMethodName  = "/google.cloud.managedkafka.v1.ManagedKafkaConnect/ListConnectClusters"
	ManagedKafkaConnect_GetConnectCluster_FullMethodName    = "/google.cloud.managedkafka.v1.ManagedKafkaConnect/GetConnectCluster"
	ManagedKafkaConnect_CreateConnectCluster_FullMethodName = "/google.cloud.managedkafka.v1.ManagedKafkaConnect/CreateConnectCluster"
	ManagedKafkaConnect_UpdateConnectCluster_FullMethodName = "/google.cloud.managedkafka.v1.ManagedKafkaConnect/UpdateConnectCluster"
	ManagedKafkaConnect_DeleteConnectCluster_FullMethodName = "/google.cloud.managedkafka.v1.ManagedKafkaConnect/DeleteConnectCluster"
	ManagedKafkaConnect_ListConnectors_FullMethodName       = "/google.cloud.managedkafka.v1.ManagedKafkaConnect/ListConnectors"
	ManagedKafkaConnect_GetConnector_FullMethodName         = "/google.cloud.managedkafka.v1.ManagedKafkaConnect/GetConnector"
	ManagedKafkaConnect_CreateConnector_FullMethodName      = "/google.cloud.managedkafka.v1.ManagedKafkaConnect/CreateConnector"
	ManagedKafkaConnect_UpdateConnector_FullMethodName      = "/google.cloud.managedkafka.v1.ManagedKafkaConnect/UpdateConnector"
	ManagedKafkaConnect_DeleteConnector_FullMethodName      = "/google.cloud.managedkafka.v1.ManagedKafkaConnect/DeleteConnector"
	ManagedKafkaConnect_PauseConnector_FullMethodName       = "/google.cloud.managedkafka.v1.ManagedKafkaConnect/PauseConnector"
	ManagedKafkaConnect_ResumeConnector_FullMethodName      = "/google.cloud.managedkafka.v1.ManagedKafkaConnect/ResumeConnector"
	ManagedKafkaConnect_RestartConnector_FullMethodName     = "/google.cloud.managedkafka.v1.ManagedKafkaConnect/RestartConnector"
	ManagedKafkaConnect_StopConnector_FullMethodName        = "/google.cloud.managedkafka.v1.ManagedKafkaConnect/StopConnector"
)

// ManagedKafkaConnectClient is the client API for ManagedKafkaConnect service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagedKafkaConnectClient interface {
	// Lists the Kafka Connect clusters in a given project and location.
	ListConnectClusters(ctx context.Context, in *ListConnectClustersRequest, opts ...grpc.CallOption) (*ListConnectClustersResponse, error)
	// Returns the properties of a single Kafka Connect cluster.
	GetConnectCluster(ctx context.Context, in *GetConnectClusterRequest, opts ...grpc.CallOption) (*ConnectCluster, error)
	// Creates a new Kafka Connect cluster in a given project and location.
	CreateConnectCluster(ctx context.Context, in *CreateConnectClusterRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates the properties of a single Kafka Connect cluster.
	UpdateConnectCluster(ctx context.Context, in *UpdateConnectClusterRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single Connect cluster.
	DeleteConnectCluster(ctx context.Context, in *DeleteConnectClusterRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists the connectors in a given Connect cluster.
	ListConnectors(ctx context.Context, in *ListConnectorsRequest, opts ...grpc.CallOption) (*ListConnectorsResponse, error)
	// Returns the properties of a single connector.
	GetConnector(ctx context.Context, in *GetConnectorRequest, opts ...grpc.CallOption) (*Connector, error)
	// Creates a new connector in a given Connect cluster.
	CreateConnector(ctx context.Context, in *CreateConnectorRequest, opts ...grpc.CallOption) (*Connector, error)
	// Updates the properties of a connector.
	UpdateConnector(ctx context.Context, in *UpdateConnectorRequest, opts ...grpc.CallOption) (*Connector, error)
	// Deletes a connector.
	DeleteConnector(ctx context.Context, in *DeleteConnectorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Pauses the connector and its tasks.
	PauseConnector(ctx context.Context, in *PauseConnectorRequest, opts ...grpc.CallOption) (*PauseConnectorResponse, error)
	// Resumes the connector and its tasks.
	ResumeConnector(ctx context.Context, in *ResumeConnectorRequest, opts ...grpc.CallOption) (*ResumeConnectorResponse, error)
	// Restarts the connector.
	RestartConnector(ctx context.Context, in *RestartConnectorRequest, opts ...grpc.CallOption) (*RestartConnectorResponse, error)
	// Stops the connector.
	StopConnector(ctx context.Context, in *StopConnectorRequest, opts ...grpc.CallOption) (*StopConnectorResponse, error)
}

type managedKafkaConnectClient struct {
	cc grpc.ClientConnInterface
}

func NewManagedKafkaConnectClient(cc grpc.ClientConnInterface) ManagedKafkaConnectClient {
	return &managedKafkaConnectClient{cc}
}

func (c *managedKafkaConnectClient) ListConnectClusters(ctx context.Context, in *ListConnectClustersRequest, opts ...grpc.CallOption) (*ListConnectClustersResponse, error) {
	out := new(ListConnectClustersResponse)
	err := c.cc.Invoke(ctx, ManagedKafkaConnect_ListConnectClusters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedKafkaConnectClient) GetConnectCluster(ctx context.Context, in *GetConnectClusterRequest, opts ...grpc.CallOption) (*ConnectCluster, error) {
	out := new(ConnectCluster)
	err := c.cc.Invoke(ctx, ManagedKafkaConnect_GetConnectCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedKafkaConnectClient) CreateConnectCluster(ctx context.Context, in *CreateConnectClusterRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, ManagedKafkaConnect_CreateConnectCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedKafkaConnectClient) UpdateConnectCluster(ctx context.Context, in *UpdateConnectClusterRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, ManagedKafkaConnect_UpdateConnectCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedKafkaConnectClient) DeleteConnectCluster(ctx context.Context, in *DeleteConnectClusterRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, ManagedKafkaConnect_DeleteConnectCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedKafkaConnectClient) ListConnectors(ctx context.Context, in *ListConnectorsRequest, opts ...grpc.CallOption) (*ListConnectorsResponse, error) {
	out := new(ListConnectorsResponse)
	err := c.cc.Invoke(ctx, ManagedKafkaConnect_ListConnectors_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedKafkaConnectClient) GetConnector(ctx context.Context, in *GetConnectorRequest, opts ...grpc.CallOption) (*Connector, error) {
	out := new(Connector)
	err := c.cc.Invoke(ctx, ManagedKafkaConnect_GetConnector_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedKafkaConnectClient) CreateConnector(ctx context.Context, in *CreateConnectorRequest, opts ...grpc.CallOption) (*Connector, error) {
	out := new(Connector)
	err := c.cc.Invoke(ctx, ManagedKafkaConnect_CreateConnector_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedKafkaConnectClient) UpdateConnector(ctx context.Context, in *UpdateConnectorRequest, opts ...grpc.CallOption) (*Connector, error) {
	out := new(Connector)
	err := c.cc.Invoke(ctx, ManagedKafkaConnect_UpdateConnector_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedKafkaConnectClient) DeleteConnector(ctx context.Context, in *DeleteConnectorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ManagedKafkaConnect_DeleteConnector_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedKafkaConnectClient) PauseConnector(ctx context.Context, in *PauseConnectorRequest, opts ...grpc.CallOption) (*PauseConnectorResponse, error) {
	out := new(PauseConnectorResponse)
	err := c.cc.Invoke(ctx, ManagedKafkaConnect_PauseConnector_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedKafkaConnectClient) ResumeConnector(ctx context.Context, in *ResumeConnectorRequest, opts ...grpc.CallOption) (*ResumeConnectorResponse, error) {
	out := new(ResumeConnectorResponse)
	err := c.cc.Invoke(ctx, ManagedKafkaConnect_ResumeConnector_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedKafkaConnectClient) RestartConnector(ctx context.Context, in *RestartConnectorRequest, opts ...grpc.CallOption) (*RestartConnectorResponse, error) {
	out := new(RestartConnectorResponse)
	err := c.cc.Invoke(ctx, ManagedKafkaConnect_RestartConnector_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedKafkaConnectClient) StopConnector(ctx context.Context, in *StopConnectorRequest, opts ...grpc.CallOption) (*StopConnectorResponse, error) {
	out := new(StopConnectorResponse)
	err := c.cc.Invoke(ctx, ManagedKafkaConnect_StopConnector_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagedKafkaConnectServer is the server API for ManagedKafkaConnect service.
// All implementations should embed UnimplementedManagedKafkaConnectServer
// for forward compatibility
type ManagedKafkaConnectServer interface {
	// Lists the Kafka Connect clusters in a given project and location.
	ListConnectClusters(context.Context, *ListConnectClustersRequest) (*ListConnectClustersResponse, error)
	// Returns the properties of a single Kafka Connect cluster.
	GetConnectCluster(context.Context, *GetConnectClusterRequest) (*ConnectCluster, error)
	// Creates a new Kafka Connect cluster in a given project and location.
	CreateConnectCluster(context.Context, *CreateConnectClusterRequest) (*longrunningpb.Operation, error)
	// Updates the properties of a single Kafka Connect cluster.
	UpdateConnectCluster(context.Context, *UpdateConnectClusterRequest) (*longrunningpb.Operation, error)
	// Deletes a single Connect cluster.
	DeleteConnectCluster(context.Context, *DeleteConnectClusterRequest) (*longrunningpb.Operation, error)
	// Lists the connectors in a given Connect cluster.
	ListConnectors(context.Context, *ListConnectorsRequest) (*ListConnectorsResponse, error)
	// Returns the properties of a single connector.
	GetConnector(context.Context, *GetConnectorRequest) (*Connector, error)
	// Creates a new connector in a given Connect cluster.
	CreateConnector(context.Context, *CreateConnectorRequest) (*Connector, error)
	// Updates the properties of a connector.
	UpdateConnector(context.Context, *UpdateConnectorRequest) (*Connector, error)
	// Deletes a connector.
	DeleteConnector(context.Context, *DeleteConnectorRequest) (*emptypb.Empty, error)
	// Pauses the connector and its tasks.
	PauseConnector(context.Context, *PauseConnectorRequest) (*PauseConnectorResponse, error)
	// Resumes the connector and its tasks.
	ResumeConnector(context.Context, *ResumeConnectorRequest) (*ResumeConnectorResponse, error)
	// Restarts the connector.
	RestartConnector(context.Context, *RestartConnectorRequest) (*RestartConnectorResponse, error)
	// Stops the connector.
	StopConnector(context.Context, *StopConnectorRequest) (*StopConnectorResponse, error)
}

// UnimplementedManagedKafkaConnectServer should be embedded to have forward compatible implementations.
type UnimplementedManagedKafkaConnectServer struct {
}

func (UnimplementedManagedKafkaConnectServer) ListConnectClusters(context.Context, *ListConnectClustersRequest) (*ListConnectClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConnectClusters not implemented")
}
func (UnimplementedManagedKafkaConnectServer) GetConnectCluster(context.Context, *GetConnectClusterRequest) (*ConnectCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectCluster not implemented")
}
func (UnimplementedManagedKafkaConnectServer) CreateConnectCluster(context.Context, *CreateConnectClusterRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConnectCluster not implemented")
}
func (UnimplementedManagedKafkaConnectServer) UpdateConnectCluster(context.Context, *UpdateConnectClusterRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConnectCluster not implemented")
}
func (UnimplementedManagedKafkaConnectServer) DeleteConnectCluster(context.Context, *DeleteConnectClusterRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConnectCluster not implemented")
}
func (UnimplementedManagedKafkaConnectServer) ListConnectors(context.Context, *ListConnectorsRequest) (*ListConnectorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConnectors not implemented")
}
func (UnimplementedManagedKafkaConnectServer) GetConnector(context.Context, *GetConnectorRequest) (*Connector, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnector not implemented")
}
func (UnimplementedManagedKafkaConnectServer) CreateConnector(context.Context, *CreateConnectorRequest) (*Connector, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConnector not implemented")
}
func (UnimplementedManagedKafkaConnectServer) UpdateConnector(context.Context, *UpdateConnectorRequest) (*Connector, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConnector not implemented")
}
func (UnimplementedManagedKafkaConnectServer) DeleteConnector(context.Context, *DeleteConnectorRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConnector not implemented")
}
func (UnimplementedManagedKafkaConnectServer) PauseConnector(context.Context, *PauseConnectorRequest) (*PauseConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseConnector not implemented")
}
func (UnimplementedManagedKafkaConnectServer) ResumeConnector(context.Context, *ResumeConnectorRequest) (*ResumeConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeConnector not implemented")
}
func (UnimplementedManagedKafkaConnectServer) RestartConnector(context.Context, *RestartConnectorRequest) (*RestartConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartConnector not implemented")
}
func (UnimplementedManagedKafkaConnectServer) StopConnector(context.Context, *StopConnectorRequest) (*StopConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopConnector not implemented")
}

// UnsafeManagedKafkaConnectServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagedKafkaConnectServer will
// result in compilation errors.
type UnsafeManagedKafkaConnectServer interface {
	mustEmbedUnimplementedManagedKafkaConnectServer()
}

func RegisterManagedKafkaConnectServer(s grpc.ServiceRegistrar, srv ManagedKafkaConnectServer) {
	s.RegisterService(&ManagedKafkaConnect_ServiceDesc, srv)
}

func _ManagedKafkaConnect_ListConnectClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConnectClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedKafkaConnectServer).ListConnectClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedKafkaConnect_ListConnectClusters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedKafkaConnectServer).ListConnectClusters(ctx, req.(*ListConnectClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedKafkaConnect_GetConnectCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedKafkaConnectServer).GetConnectCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedKafkaConnect_GetConnectCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedKafkaConnectServer).GetConnectCluster(ctx, req.(*GetConnectClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedKafkaConnect_CreateConnectCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConnectClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedKafkaConnectServer).CreateConnectCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedKafkaConnect_CreateConnectCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedKafkaConnectServer).CreateConnectCluster(ctx, req.(*CreateConnectClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedKafkaConnect_UpdateConnectCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConnectClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedKafkaConnectServer).UpdateConnectCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedKafkaConnect_UpdateConnectCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedKafkaConnectServer).UpdateConnectCluster(ctx, req.(*UpdateConnectClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedKafkaConnect_DeleteConnectCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConnectClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedKafkaConnectServer).DeleteConnectCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedKafkaConnect_DeleteConnectCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedKafkaConnectServer).DeleteConnectCluster(ctx, req.(*DeleteConnectClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedKafkaConnect_ListConnectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConnectorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedKafkaConnectServer).ListConnectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedKafkaConnect_ListConnectors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedKafkaConnectServer).ListConnectors(ctx, req.(*ListConnectorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedKafkaConnect_GetConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedKafkaConnectServer).GetConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedKafkaConnect_GetConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedKafkaConnectServer).GetConnector(ctx, req.(*GetConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedKafkaConnect_CreateConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedKafkaConnectServer).CreateConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedKafkaConnect_CreateConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedKafkaConnectServer).CreateConnector(ctx, req.(*CreateConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedKafkaConnect_UpdateConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedKafkaConnectServer).UpdateConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedKafkaConnect_UpdateConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedKafkaConnectServer).UpdateConnector(ctx, req.(*UpdateConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedKafkaConnect_DeleteConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedKafkaConnectServer).DeleteConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedKafkaConnect_DeleteConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedKafkaConnectServer).DeleteConnector(ctx, req.(*DeleteConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedKafkaConnect_PauseConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedKafkaConnectServer).PauseConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedKafkaConnect_PauseConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedKafkaConnectServer).PauseConnector(ctx, req.(*PauseConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedKafkaConnect_ResumeConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedKafkaConnectServer).ResumeConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedKafkaConnect_ResumeConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedKafkaConnectServer).ResumeConnector(ctx, req.(*ResumeConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedKafkaConnect_RestartConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedKafkaConnectServer).RestartConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedKafkaConnect_RestartConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedKafkaConnectServer).RestartConnector(ctx, req.(*RestartConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedKafkaConnect_StopConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedKafkaConnectServer).StopConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagedKafkaConnect_StopConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedKafkaConnectServer).StopConnector(ctx, req.(*StopConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ManagedKafkaConnect_ServiceDesc is the grpc.ServiceDesc for ManagedKafkaConnect service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManagedKafkaConnect_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.managedkafka.v1.ManagedKafkaConnect",
	HandlerType: (*ManagedKafkaConnectServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListConnectClusters",
			Handler:    _ManagedKafkaConnect_ListConnectClusters_Handler,
		},
		{
			MethodName: "GetConnectCluster",
			Handler:    _ManagedKafkaConnect_GetConnectCluster_Handler,
		},
		{
			MethodName: "CreateConnectCluster",
			Handler:    _ManagedKafkaConnect_CreateConnectCluster_Handler,
		},
		{
			MethodName: "UpdateConnectCluster",
			Handler:    _ManagedKafkaConnect_UpdateConnectCluster_Handler,
		},
		{
			MethodName: "DeleteConnectCluster",
			Handler:    _ManagedKafkaConnect_DeleteConnectCluster_Handler,
		},
		{
			MethodName: "ListConnectors",
			Handler:    _ManagedKafkaConnect_ListConnectors_Handler,
		},
		{
			MethodName: "GetConnector",
			Handler:    _ManagedKafkaConnect_GetConnector_Handler,
		},
		{
			MethodName: "CreateConnector",
			Handler:    _ManagedKafkaConnect_CreateConnector_Handler,
		},
		{
			MethodName: "UpdateConnector",
			Handler:    _ManagedKafkaConnect_UpdateConnector_Handler,
		},
		{
			MethodName: "DeleteConnector",
			Handler:    _ManagedKafkaConnect_DeleteConnector_Handler,
		},
		{
			MethodName: "PauseConnector",
			Handler:    _ManagedKafkaConnect_PauseConnector_Handler,
		},
		{
			MethodName: "ResumeConnector",
			Handler:    _ManagedKafkaConnect_ResumeConnector_Handler,
		},
		{
			MethodName: "RestartConnector",
			Handler:    _ManagedKafkaConnect_RestartConnector_Handler,
		},
		{
			MethodName: "StopConnector",
			Handler:    _ManagedKafkaConnect_StopConnector_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/managedkafka/v1/managed_kafka_connect.proto",
}
