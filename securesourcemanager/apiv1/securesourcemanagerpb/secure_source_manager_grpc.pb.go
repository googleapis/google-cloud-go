// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/securesourcemanager/v1/secure_source_manager.proto

package securesourcemanagerpb

import (
	context "context"

	iampb "cloud.google.com/go/iam/apiv1/iampb"
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SecureSourceManager_ListInstances_FullMethodName                  = "/google.cloud.securesourcemanager.v1.SecureSourceManager/ListInstances"
	SecureSourceManager_GetInstance_FullMethodName                    = "/google.cloud.securesourcemanager.v1.SecureSourceManager/GetInstance"
	SecureSourceManager_CreateInstance_FullMethodName                 = "/google.cloud.securesourcemanager.v1.SecureSourceManager/CreateInstance"
	SecureSourceManager_DeleteInstance_FullMethodName                 = "/google.cloud.securesourcemanager.v1.SecureSourceManager/DeleteInstance"
	SecureSourceManager_ListRepositories_FullMethodName               = "/google.cloud.securesourcemanager.v1.SecureSourceManager/ListRepositories"
	SecureSourceManager_GetRepository_FullMethodName                  = "/google.cloud.securesourcemanager.v1.SecureSourceManager/GetRepository"
	SecureSourceManager_CreateRepository_FullMethodName               = "/google.cloud.securesourcemanager.v1.SecureSourceManager/CreateRepository"
	SecureSourceManager_UpdateRepository_FullMethodName               = "/google.cloud.securesourcemanager.v1.SecureSourceManager/UpdateRepository"
	SecureSourceManager_DeleteRepository_FullMethodName               = "/google.cloud.securesourcemanager.v1.SecureSourceManager/DeleteRepository"
	SecureSourceManager_ListHooks_FullMethodName                      = "/google.cloud.securesourcemanager.v1.SecureSourceManager/ListHooks"
	SecureSourceManager_GetHook_FullMethodName                        = "/google.cloud.securesourcemanager.v1.SecureSourceManager/GetHook"
	SecureSourceManager_CreateHook_FullMethodName                     = "/google.cloud.securesourcemanager.v1.SecureSourceManager/CreateHook"
	SecureSourceManager_UpdateHook_FullMethodName                     = "/google.cloud.securesourcemanager.v1.SecureSourceManager/UpdateHook"
	SecureSourceManager_DeleteHook_FullMethodName                     = "/google.cloud.securesourcemanager.v1.SecureSourceManager/DeleteHook"
	SecureSourceManager_GetIamPolicyRepo_FullMethodName               = "/google.cloud.securesourcemanager.v1.SecureSourceManager/GetIamPolicyRepo"
	SecureSourceManager_SetIamPolicyRepo_FullMethodName               = "/google.cloud.securesourcemanager.v1.SecureSourceManager/SetIamPolicyRepo"
	SecureSourceManager_TestIamPermissionsRepo_FullMethodName         = "/google.cloud.securesourcemanager.v1.SecureSourceManager/TestIamPermissionsRepo"
	SecureSourceManager_CreateBranchRule_FullMethodName               = "/google.cloud.securesourcemanager.v1.SecureSourceManager/CreateBranchRule"
	SecureSourceManager_ListBranchRules_FullMethodName                = "/google.cloud.securesourcemanager.v1.SecureSourceManager/ListBranchRules"
	SecureSourceManager_GetBranchRule_FullMethodName                  = "/google.cloud.securesourcemanager.v1.SecureSourceManager/GetBranchRule"
	SecureSourceManager_UpdateBranchRule_FullMethodName               = "/google.cloud.securesourcemanager.v1.SecureSourceManager/UpdateBranchRule"
	SecureSourceManager_DeleteBranchRule_FullMethodName               = "/google.cloud.securesourcemanager.v1.SecureSourceManager/DeleteBranchRule"
	SecureSourceManager_CreatePullRequest_FullMethodName              = "/google.cloud.securesourcemanager.v1.SecureSourceManager/CreatePullRequest"
	SecureSourceManager_GetPullRequest_FullMethodName                 = "/google.cloud.securesourcemanager.v1.SecureSourceManager/GetPullRequest"
	SecureSourceManager_ListPullRequests_FullMethodName               = "/google.cloud.securesourcemanager.v1.SecureSourceManager/ListPullRequests"
	SecureSourceManager_UpdatePullRequest_FullMethodName              = "/google.cloud.securesourcemanager.v1.SecureSourceManager/UpdatePullRequest"
	SecureSourceManager_MergePullRequest_FullMethodName               = "/google.cloud.securesourcemanager.v1.SecureSourceManager/MergePullRequest"
	SecureSourceManager_OpenPullRequest_FullMethodName                = "/google.cloud.securesourcemanager.v1.SecureSourceManager/OpenPullRequest"
	SecureSourceManager_ClosePullRequest_FullMethodName               = "/google.cloud.securesourcemanager.v1.SecureSourceManager/ClosePullRequest"
	SecureSourceManager_ListPullRequestFileDiffs_FullMethodName       = "/google.cloud.securesourcemanager.v1.SecureSourceManager/ListPullRequestFileDiffs"
	SecureSourceManager_FetchTree_FullMethodName                      = "/google.cloud.securesourcemanager.v1.SecureSourceManager/FetchTree"
	SecureSourceManager_FetchBlob_FullMethodName                      = "/google.cloud.securesourcemanager.v1.SecureSourceManager/FetchBlob"
	SecureSourceManager_CreateIssue_FullMethodName                    = "/google.cloud.securesourcemanager.v1.SecureSourceManager/CreateIssue"
	SecureSourceManager_GetIssue_FullMethodName                       = "/google.cloud.securesourcemanager.v1.SecureSourceManager/GetIssue"
	SecureSourceManager_ListIssues_FullMethodName                     = "/google.cloud.securesourcemanager.v1.SecureSourceManager/ListIssues"
	SecureSourceManager_UpdateIssue_FullMethodName                    = "/google.cloud.securesourcemanager.v1.SecureSourceManager/UpdateIssue"
	SecureSourceManager_DeleteIssue_FullMethodName                    = "/google.cloud.securesourcemanager.v1.SecureSourceManager/DeleteIssue"
	SecureSourceManager_OpenIssue_FullMethodName                      = "/google.cloud.securesourcemanager.v1.SecureSourceManager/OpenIssue"
	SecureSourceManager_CloseIssue_FullMethodName                     = "/google.cloud.securesourcemanager.v1.SecureSourceManager/CloseIssue"
	SecureSourceManager_GetPullRequestComment_FullMethodName          = "/google.cloud.securesourcemanager.v1.SecureSourceManager/GetPullRequestComment"
	SecureSourceManager_ListPullRequestComments_FullMethodName        = "/google.cloud.securesourcemanager.v1.SecureSourceManager/ListPullRequestComments"
	SecureSourceManager_CreatePullRequestComment_FullMethodName       = "/google.cloud.securesourcemanager.v1.SecureSourceManager/CreatePullRequestComment"
	SecureSourceManager_UpdatePullRequestComment_FullMethodName       = "/google.cloud.securesourcemanager.v1.SecureSourceManager/UpdatePullRequestComment"
	SecureSourceManager_DeletePullRequestComment_FullMethodName       = "/google.cloud.securesourcemanager.v1.SecureSourceManager/DeletePullRequestComment"
	SecureSourceManager_BatchCreatePullRequestComments_FullMethodName = "/google.cloud.securesourcemanager.v1.SecureSourceManager/BatchCreatePullRequestComments"
	SecureSourceManager_ResolvePullRequestComments_FullMethodName     = "/google.cloud.securesourcemanager.v1.SecureSourceManager/ResolvePullRequestComments"
	SecureSourceManager_UnresolvePullRequestComments_FullMethodName   = "/google.cloud.securesourcemanager.v1.SecureSourceManager/UnresolvePullRequestComments"
	SecureSourceManager_CreateIssueComment_FullMethodName             = "/google.cloud.securesourcemanager.v1.SecureSourceManager/CreateIssueComment"
	SecureSourceManager_GetIssueComment_FullMethodName                = "/google.cloud.securesourcemanager.v1.SecureSourceManager/GetIssueComment"
	SecureSourceManager_ListIssueComments_FullMethodName              = "/google.cloud.securesourcemanager.v1.SecureSourceManager/ListIssueComments"
	SecureSourceManager_UpdateIssueComment_FullMethodName             = "/google.cloud.securesourcemanager.v1.SecureSourceManager/UpdateIssueComment"
	SecureSourceManager_DeleteIssueComment_FullMethodName             = "/google.cloud.securesourcemanager.v1.SecureSourceManager/DeleteIssueComment"
)

// SecureSourceManagerClient is the client API for SecureSourceManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecureSourceManagerClient interface {
	// Lists Instances in a given project and location.
	ListInstances(ctx context.Context, in *ListInstancesRequest, opts ...grpc.CallOption) (*ListInstancesResponse, error)
	// Gets details of a single instance.
	GetInstance(ctx context.Context, in *GetInstanceRequest, opts ...grpc.CallOption) (*Instance, error)
	// Creates a new instance in a given project and location.
	CreateInstance(ctx context.Context, in *CreateInstanceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single instance.
	DeleteInstance(ctx context.Context, in *DeleteInstanceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists Repositories in a given project and location.
	//
	// The instance field is required in the query parameter for requests using
	// the securesourcemanager.googleapis.com endpoint.
	ListRepositories(ctx context.Context, in *ListRepositoriesRequest, opts ...grpc.CallOption) (*ListRepositoriesResponse, error)
	// Gets metadata of a repository.
	GetRepository(ctx context.Context, in *GetRepositoryRequest, opts ...grpc.CallOption) (*Repository, error)
	// Creates a new repository in a given project and location.
	//
	// The Repository.Instance field is required in the request body for requests
	// using the securesourcemanager.googleapis.com endpoint.
	CreateRepository(ctx context.Context, in *CreateRepositoryRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates the metadata of a repository.
	UpdateRepository(ctx context.Context, in *UpdateRepositoryRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a Repository.
	DeleteRepository(ctx context.Context, in *DeleteRepositoryRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists hooks in a given repository.
	ListHooks(ctx context.Context, in *ListHooksRequest, opts ...grpc.CallOption) (*ListHooksResponse, error)
	// Gets metadata of a hook.
	GetHook(ctx context.Context, in *GetHookRequest, opts ...grpc.CallOption) (*Hook, error)
	// Creates a new hook in a given repository.
	CreateHook(ctx context.Context, in *CreateHookRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates the metadata of a hook.
	UpdateHook(ctx context.Context, in *UpdateHookRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a Hook.
	DeleteHook(ctx context.Context, in *DeleteHookRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Get IAM policy for a repository.
	GetIamPolicyRepo(ctx context.Context, in *iampb.GetIamPolicyRequest, opts ...grpc.CallOption) (*iampb.Policy, error)
	// Set IAM policy on a repository.
	SetIamPolicyRepo(ctx context.Context, in *iampb.SetIamPolicyRequest, opts ...grpc.CallOption) (*iampb.Policy, error)
	// Test IAM permissions on a repository.
	// IAM permission checks are not required on this method.
	TestIamPermissionsRepo(ctx context.Context, in *iampb.TestIamPermissionsRequest, opts ...grpc.CallOption) (*iampb.TestIamPermissionsResponse, error)
	// CreateBranchRule creates a branch rule in a given repository.
	CreateBranchRule(ctx context.Context, in *CreateBranchRuleRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// ListBranchRules lists branch rules in a given repository.
	ListBranchRules(ctx context.Context, in *ListBranchRulesRequest, opts ...grpc.CallOption) (*ListBranchRulesResponse, error)
	// GetBranchRule gets a branch rule.
	GetBranchRule(ctx context.Context, in *GetBranchRuleRequest, opts ...grpc.CallOption) (*BranchRule, error)
	// UpdateBranchRule updates a branch rule.
	UpdateBranchRule(ctx context.Context, in *UpdateBranchRuleRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// DeleteBranchRule deletes a branch rule.
	DeleteBranchRule(ctx context.Context, in *DeleteBranchRuleRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Creates a pull request.
	CreatePullRequest(ctx context.Context, in *CreatePullRequestRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets a pull request.
	GetPullRequest(ctx context.Context, in *GetPullRequestRequest, opts ...grpc.CallOption) (*PullRequest, error)
	// Lists pull requests in a repository.
	ListPullRequests(ctx context.Context, in *ListPullRequestsRequest, opts ...grpc.CallOption) (*ListPullRequestsResponse, error)
	// Updates a pull request.
	UpdatePullRequest(ctx context.Context, in *UpdatePullRequestRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Merges a pull request.
	MergePullRequest(ctx context.Context, in *MergePullRequestRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Opens a pull request.
	OpenPullRequest(ctx context.Context, in *OpenPullRequestRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Closes a pull request without merging.
	ClosePullRequest(ctx context.Context, in *ClosePullRequestRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists a pull request's file diffs.
	ListPullRequestFileDiffs(ctx context.Context, in *ListPullRequestFileDiffsRequest, opts ...grpc.CallOption) (*ListPullRequestFileDiffsResponse, error)
	// Fetches a tree from a repository.
	FetchTree(ctx context.Context, in *FetchTreeRequest, opts ...grpc.CallOption) (*FetchTreeResponse, error)
	// Fetches a blob from a repository.
	FetchBlob(ctx context.Context, in *FetchBlobRequest, opts ...grpc.CallOption) (*FetchBlobResponse, error)
	// Creates an issue.
	CreateIssue(ctx context.Context, in *CreateIssueRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets an issue.
	GetIssue(ctx context.Context, in *GetIssueRequest, opts ...grpc.CallOption) (*Issue, error)
	// Lists issues in a repository.
	ListIssues(ctx context.Context, in *ListIssuesRequest, opts ...grpc.CallOption) (*ListIssuesResponse, error)
	// Updates a issue.
	UpdateIssue(ctx context.Context, in *UpdateIssueRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes an issue.
	DeleteIssue(ctx context.Context, in *DeleteIssueRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Opens an issue.
	OpenIssue(ctx context.Context, in *OpenIssueRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Closes an issue.
	CloseIssue(ctx context.Context, in *CloseIssueRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets a pull request comment.
	GetPullRequestComment(ctx context.Context, in *GetPullRequestCommentRequest, opts ...grpc.CallOption) (*PullRequestComment, error)
	// Lists pull request comments.
	ListPullRequestComments(ctx context.Context, in *ListPullRequestCommentsRequest, opts ...grpc.CallOption) (*ListPullRequestCommentsResponse, error)
	// Creates a pull request comment. This function is used to create a single
	// PullRequestComment of type Comment, or a single PullRequestComment of type
	// Code that's replying to another PullRequestComment of type Code. Use
	// BatchCreatePullRequestComments to create multiple PullRequestComments for
	// code reviews.
	CreatePullRequestComment(ctx context.Context, in *CreatePullRequestCommentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates a pull request comment.
	UpdatePullRequestComment(ctx context.Context, in *UpdatePullRequestCommentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a pull request comment.
	DeletePullRequestComment(ctx context.Context, in *DeletePullRequestCommentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Batch creates pull request comments. This function is used to create
	// multiple PullRequestComments for code review. There needs to be exactly one
	// PullRequestComment of type Review, and at most 100 PullRequestComments of
	// type Code per request. The Postition of the code comments must be unique
	// within the request.
	BatchCreatePullRequestComments(ctx context.Context, in *BatchCreatePullRequestCommentsRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Resolves pull request comments. A list of PullRequestComment names must be
	// provided. The PullRequestComment names must be in the same conversation
	// thread. If auto_fill is set, all comments in the conversation thread will
	// be resolved.
	ResolvePullRequestComments(ctx context.Context, in *ResolvePullRequestCommentsRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Unresolves pull request comments. A list of PullRequestComment names must
	// be provided. The PullRequestComment names must be in the same conversation
	// thread. If auto_fill is set, all comments in the conversation thread will
	// be unresolved.
	UnresolvePullRequestComments(ctx context.Context, in *UnresolvePullRequestCommentsRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Creates an issue comment.
	CreateIssueComment(ctx context.Context, in *CreateIssueCommentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets an issue comment.
	GetIssueComment(ctx context.Context, in *GetIssueCommentRequest, opts ...grpc.CallOption) (*IssueComment, error)
	// Lists comments in an issue.
	ListIssueComments(ctx context.Context, in *ListIssueCommentsRequest, opts ...grpc.CallOption) (*ListIssueCommentsResponse, error)
	// Updates an issue comment.
	UpdateIssueComment(ctx context.Context, in *UpdateIssueCommentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes an issue comment.
	DeleteIssueComment(ctx context.Context, in *DeleteIssueCommentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type secureSourceManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewSecureSourceManagerClient(cc grpc.ClientConnInterface) SecureSourceManagerClient {
	return &secureSourceManagerClient{cc}
}

func (c *secureSourceManagerClient) ListInstances(ctx context.Context, in *ListInstancesRequest, opts ...grpc.CallOption) (*ListInstancesResponse, error) {
	out := new(ListInstancesResponse)
	err := c.cc.Invoke(ctx, SecureSourceManager_ListInstances_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureSourceManagerClient) GetInstance(ctx context.Context, in *GetInstanceRequest, opts ...grpc.CallOption) (*Instance, error) {
	out := new(Instance)
	err := c.cc.Invoke(ctx, SecureSourceManager_GetInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureSourceManagerClient) CreateInstance(ctx context.Context, in *CreateInstanceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, SecureSourceManager_CreateInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureSourceManagerClient) DeleteInstance(ctx context.Context, in *DeleteInstanceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, SecureSourceManager_DeleteInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureSourceManagerClient) ListRepositories(ctx context.Context, in *ListRepositoriesRequest, opts ...grpc.CallOption) (*ListRepositoriesResponse, error) {
	out := new(ListRepositoriesResponse)
	err := c.cc.Invoke(ctx, SecureSourceManager_ListRepositories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureSourceManagerClient) GetRepository(ctx context.Context, in *GetRepositoryRequest, opts ...grpc.CallOption) (*Repository, error) {
	out := new(Repository)
	err := c.cc.Invoke(ctx, SecureSourceManager_GetRepository_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureSourceManagerClient) CreateRepository(ctx context.Context, in *CreateRepositoryRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, SecureSourceManager_CreateRepository_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureSourceManagerClient) UpdateRepository(ctx context.Context, in *UpdateRepositoryRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, SecureSourceManager_UpdateRepository_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureSourceManagerClient) DeleteRepository(ctx context.Context, in *DeleteRepositoryRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, SecureSourceManager_DeleteRepository_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureSourceManagerClient) ListHooks(ctx context.Context, in *ListHooksRequest, opts ...grpc.CallOption) (*ListHooksResponse, error) {
	out := new(ListHooksResponse)
	err := c.cc.Invoke(ctx, SecureSourceManager_ListHooks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureSourceManagerClient) GetHook(ctx context.Context, in *GetHookRequest, opts ...grpc.CallOption) (*Hook, error) {
	out := new(Hook)
	err := c.cc.Invoke(ctx, SecureSourceManager_GetHook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureSourceManagerClient) CreateHook(ctx context.Context, in *CreateHookRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, SecureSourceManager_CreateHook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureSourceManagerClient) UpdateHook(ctx context.Context, in *UpdateHookRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, SecureSourceManager_UpdateHook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureSourceManagerClient) DeleteHook(ctx context.Context, in *DeleteHookRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, SecureSourceManager_DeleteHook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureSourceManagerClient) GetIamPolicyRepo(ctx context.Context, in *iampb.GetIamPolicyRequest, opts ...grpc.CallOption) (*iampb.Policy, error) {
	out := new(iampb.Policy)
	err := c.cc.Invoke(ctx, SecureSourceManager_GetIamPolicyRepo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureSourceManagerClient) SetIamPolicyRepo(ctx context.Context, in *iampb.SetIamPolicyRequest, opts ...grpc.CallOption) (*iampb.Policy, error) {
	out := new(iampb.Policy)
	err := c.cc.Invoke(ctx, SecureSourceManager_SetIamPolicyRepo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureSourceManagerClient) TestIamPermissionsRepo(ctx context.Context, in *iampb.TestIamPermissionsRequest, opts ...grpc.CallOption) (*iampb.TestIamPermissionsResponse, error) {
	out := new(iampb.TestIamPermissionsResponse)
	err := c.cc.Invoke(ctx, SecureSourceManager_TestIamPermissionsRepo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureSourceManagerClient) CreateBranchRule(ctx context.Context, in *CreateBranchRuleRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, SecureSourceManager_CreateBranchRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureSourceManagerClient) ListBranchRules(ctx context.Context, in *ListBranchRulesRequest, opts ...grpc.CallOption) (*ListBranchRulesResponse, error) {
	out := new(ListBranchRulesResponse)
	err := c.cc.Invoke(ctx, SecureSourceManager_ListBranchRules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureSourceManagerClient) GetBranchRule(ctx context.Context, in *GetBranchRuleRequest, opts ...grpc.CallOption) (*BranchRule, error) {
	out := new(BranchRule)
	err := c.cc.Invoke(ctx, SecureSourceManager_GetBranchRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureSourceManagerClient) UpdateBranchRule(ctx context.Context, in *UpdateBranchRuleRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, SecureSourceManager_UpdateBranchRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureSourceManagerClient) DeleteBranchRule(ctx context.Context, in *DeleteBranchRuleRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, SecureSourceManager_DeleteBranchRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureSourceManagerClient) CreatePullRequest(ctx context.Context, in *CreatePullRequestRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, SecureSourceManager_CreatePullRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureSourceManagerClient) GetPullRequest(ctx context.Context, in *GetPullRequestRequest, opts ...grpc.CallOption) (*PullRequest, error) {
	out := new(PullRequest)
	err := c.cc.Invoke(ctx, SecureSourceManager_GetPullRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureSourceManagerClient) ListPullRequests(ctx context.Context, in *ListPullRequestsRequest, opts ...grpc.CallOption) (*ListPullRequestsResponse, error) {
	out := new(ListPullRequestsResponse)
	err := c.cc.Invoke(ctx, SecureSourceManager_ListPullRequests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureSourceManagerClient) UpdatePullRequest(ctx context.Context, in *UpdatePullRequestRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, SecureSourceManager_UpdatePullRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureSourceManagerClient) MergePullRequest(ctx context.Context, in *MergePullRequestRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, SecureSourceManager_MergePullRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureSourceManagerClient) OpenPullRequest(ctx context.Context, in *OpenPullRequestRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, SecureSourceManager_OpenPullRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureSourceManagerClient) ClosePullRequest(ctx context.Context, in *ClosePullRequestRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, SecureSourceManager_ClosePullRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureSourceManagerClient) ListPullRequestFileDiffs(ctx context.Context, in *ListPullRequestFileDiffsRequest, opts ...grpc.CallOption) (*ListPullRequestFileDiffsResponse, error) {
	out := new(ListPullRequestFileDiffsResponse)
	err := c.cc.Invoke(ctx, SecureSourceManager_ListPullRequestFileDiffs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureSourceManagerClient) FetchTree(ctx context.Context, in *FetchTreeRequest, opts ...grpc.CallOption) (*FetchTreeResponse, error) {
	out := new(FetchTreeResponse)
	err := c.cc.Invoke(ctx, SecureSourceManager_FetchTree_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureSourceManagerClient) FetchBlob(ctx context.Context, in *FetchBlobRequest, opts ...grpc.CallOption) (*FetchBlobResponse, error) {
	out := new(FetchBlobResponse)
	err := c.cc.Invoke(ctx, SecureSourceManager_FetchBlob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureSourceManagerClient) CreateIssue(ctx context.Context, in *CreateIssueRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, SecureSourceManager_CreateIssue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureSourceManagerClient) GetIssue(ctx context.Context, in *GetIssueRequest, opts ...grpc.CallOption) (*Issue, error) {
	out := new(Issue)
	err := c.cc.Invoke(ctx, SecureSourceManager_GetIssue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureSourceManagerClient) ListIssues(ctx context.Context, in *ListIssuesRequest, opts ...grpc.CallOption) (*ListIssuesResponse, error) {
	out := new(ListIssuesResponse)
	err := c.cc.Invoke(ctx, SecureSourceManager_ListIssues_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureSourceManagerClient) UpdateIssue(ctx context.Context, in *UpdateIssueRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, SecureSourceManager_UpdateIssue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureSourceManagerClient) DeleteIssue(ctx context.Context, in *DeleteIssueRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, SecureSourceManager_DeleteIssue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureSourceManagerClient) OpenIssue(ctx context.Context, in *OpenIssueRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, SecureSourceManager_OpenIssue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureSourceManagerClient) CloseIssue(ctx context.Context, in *CloseIssueRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, SecureSourceManager_CloseIssue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureSourceManagerClient) GetPullRequestComment(ctx context.Context, in *GetPullRequestCommentRequest, opts ...grpc.CallOption) (*PullRequestComment, error) {
	out := new(PullRequestComment)
	err := c.cc.Invoke(ctx, SecureSourceManager_GetPullRequestComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureSourceManagerClient) ListPullRequestComments(ctx context.Context, in *ListPullRequestCommentsRequest, opts ...grpc.CallOption) (*ListPullRequestCommentsResponse, error) {
	out := new(ListPullRequestCommentsResponse)
	err := c.cc.Invoke(ctx, SecureSourceManager_ListPullRequestComments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureSourceManagerClient) CreatePullRequestComment(ctx context.Context, in *CreatePullRequestCommentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, SecureSourceManager_CreatePullRequestComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureSourceManagerClient) UpdatePullRequestComment(ctx context.Context, in *UpdatePullRequestCommentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, SecureSourceManager_UpdatePullRequestComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureSourceManagerClient) DeletePullRequestComment(ctx context.Context, in *DeletePullRequestCommentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, SecureSourceManager_DeletePullRequestComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureSourceManagerClient) BatchCreatePullRequestComments(ctx context.Context, in *BatchCreatePullRequestCommentsRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, SecureSourceManager_BatchCreatePullRequestComments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureSourceManagerClient) ResolvePullRequestComments(ctx context.Context, in *ResolvePullRequestCommentsRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, SecureSourceManager_ResolvePullRequestComments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureSourceManagerClient) UnresolvePullRequestComments(ctx context.Context, in *UnresolvePullRequestCommentsRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, SecureSourceManager_UnresolvePullRequestComments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureSourceManagerClient) CreateIssueComment(ctx context.Context, in *CreateIssueCommentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, SecureSourceManager_CreateIssueComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureSourceManagerClient) GetIssueComment(ctx context.Context, in *GetIssueCommentRequest, opts ...grpc.CallOption) (*IssueComment, error) {
	out := new(IssueComment)
	err := c.cc.Invoke(ctx, SecureSourceManager_GetIssueComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureSourceManagerClient) ListIssueComments(ctx context.Context, in *ListIssueCommentsRequest, opts ...grpc.CallOption) (*ListIssueCommentsResponse, error) {
	out := new(ListIssueCommentsResponse)
	err := c.cc.Invoke(ctx, SecureSourceManager_ListIssueComments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureSourceManagerClient) UpdateIssueComment(ctx context.Context, in *UpdateIssueCommentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, SecureSourceManager_UpdateIssueComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureSourceManagerClient) DeleteIssueComment(ctx context.Context, in *DeleteIssueCommentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, SecureSourceManager_DeleteIssueComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecureSourceManagerServer is the server API for SecureSourceManager service.
// All implementations should embed UnimplementedSecureSourceManagerServer
// for forward compatibility
type SecureSourceManagerServer interface {
	// Lists Instances in a given project and location.
	ListInstances(context.Context, *ListInstancesRequest) (*ListInstancesResponse, error)
	// Gets details of a single instance.
	GetInstance(context.Context, *GetInstanceRequest) (*Instance, error)
	// Creates a new instance in a given project and location.
	CreateInstance(context.Context, *CreateInstanceRequest) (*longrunningpb.Operation, error)
	// Deletes a single instance.
	DeleteInstance(context.Context, *DeleteInstanceRequest) (*longrunningpb.Operation, error)
	// Lists Repositories in a given project and location.
	//
	// The instance field is required in the query parameter for requests using
	// the securesourcemanager.googleapis.com endpoint.
	ListRepositories(context.Context, *ListRepositoriesRequest) (*ListRepositoriesResponse, error)
	// Gets metadata of a repository.
	GetRepository(context.Context, *GetRepositoryRequest) (*Repository, error)
	// Creates a new repository in a given project and location.
	//
	// The Repository.Instance field is required in the request body for requests
	// using the securesourcemanager.googleapis.com endpoint.
	CreateRepository(context.Context, *CreateRepositoryRequest) (*longrunningpb.Operation, error)
	// Updates the metadata of a repository.
	UpdateRepository(context.Context, *UpdateRepositoryRequest) (*longrunningpb.Operation, error)
	// Deletes a Repository.
	DeleteRepository(context.Context, *DeleteRepositoryRequest) (*longrunningpb.Operation, error)
	// Lists hooks in a given repository.
	ListHooks(context.Context, *ListHooksRequest) (*ListHooksResponse, error)
	// Gets metadata of a hook.
	GetHook(context.Context, *GetHookRequest) (*Hook, error)
	// Creates a new hook in a given repository.
	CreateHook(context.Context, *CreateHookRequest) (*longrunningpb.Operation, error)
	// Updates the metadata of a hook.
	UpdateHook(context.Context, *UpdateHookRequest) (*longrunningpb.Operation, error)
	// Deletes a Hook.
	DeleteHook(context.Context, *DeleteHookRequest) (*longrunningpb.Operation, error)
	// Get IAM policy for a repository.
	GetIamPolicyRepo(context.Context, *iampb.GetIamPolicyRequest) (*iampb.Policy, error)
	// Set IAM policy on a repository.
	SetIamPolicyRepo(context.Context, *iampb.SetIamPolicyRequest) (*iampb.Policy, error)
	// Test IAM permissions on a repository.
	// IAM permission checks are not required on this method.
	TestIamPermissionsRepo(context.Context, *iampb.TestIamPermissionsRequest) (*iampb.TestIamPermissionsResponse, error)
	// CreateBranchRule creates a branch rule in a given repository.
	CreateBranchRule(context.Context, *CreateBranchRuleRequest) (*longrunningpb.Operation, error)
	// ListBranchRules lists branch rules in a given repository.
	ListBranchRules(context.Context, *ListBranchRulesRequest) (*ListBranchRulesResponse, error)
	// GetBranchRule gets a branch rule.
	GetBranchRule(context.Context, *GetBranchRuleRequest) (*BranchRule, error)
	// UpdateBranchRule updates a branch rule.
	UpdateBranchRule(context.Context, *UpdateBranchRuleRequest) (*longrunningpb.Operation, error)
	// DeleteBranchRule deletes a branch rule.
	DeleteBranchRule(context.Context, *DeleteBranchRuleRequest) (*longrunningpb.Operation, error)
	// Creates a pull request.
	CreatePullRequest(context.Context, *CreatePullRequestRequest) (*longrunningpb.Operation, error)
	// Gets a pull request.
	GetPullRequest(context.Context, *GetPullRequestRequest) (*PullRequest, error)
	// Lists pull requests in a repository.
	ListPullRequests(context.Context, *ListPullRequestsRequest) (*ListPullRequestsResponse, error)
	// Updates a pull request.
	UpdatePullRequest(context.Context, *UpdatePullRequestRequest) (*longrunningpb.Operation, error)
	// Merges a pull request.
	MergePullRequest(context.Context, *MergePullRequestRequest) (*longrunningpb.Operation, error)
	// Opens a pull request.
	OpenPullRequest(context.Context, *OpenPullRequestRequest) (*longrunningpb.Operation, error)
	// Closes a pull request without merging.
	ClosePullRequest(context.Context, *ClosePullRequestRequest) (*longrunningpb.Operation, error)
	// Lists a pull request's file diffs.
	ListPullRequestFileDiffs(context.Context, *ListPullRequestFileDiffsRequest) (*ListPullRequestFileDiffsResponse, error)
	// Fetches a tree from a repository.
	FetchTree(context.Context, *FetchTreeRequest) (*FetchTreeResponse, error)
	// Fetches a blob from a repository.
	FetchBlob(context.Context, *FetchBlobRequest) (*FetchBlobResponse, error)
	// Creates an issue.
	CreateIssue(context.Context, *CreateIssueRequest) (*longrunningpb.Operation, error)
	// Gets an issue.
	GetIssue(context.Context, *GetIssueRequest) (*Issue, error)
	// Lists issues in a repository.
	ListIssues(context.Context, *ListIssuesRequest) (*ListIssuesResponse, error)
	// Updates a issue.
	UpdateIssue(context.Context, *UpdateIssueRequest) (*longrunningpb.Operation, error)
	// Deletes an issue.
	DeleteIssue(context.Context, *DeleteIssueRequest) (*longrunningpb.Operation, error)
	// Opens an issue.
	OpenIssue(context.Context, *OpenIssueRequest) (*longrunningpb.Operation, error)
	// Closes an issue.
	CloseIssue(context.Context, *CloseIssueRequest) (*longrunningpb.Operation, error)
	// Gets a pull request comment.
	GetPullRequestComment(context.Context, *GetPullRequestCommentRequest) (*PullRequestComment, error)
	// Lists pull request comments.
	ListPullRequestComments(context.Context, *ListPullRequestCommentsRequest) (*ListPullRequestCommentsResponse, error)
	// Creates a pull request comment. This function is used to create a single
	// PullRequestComment of type Comment, or a single PullRequestComment of type
	// Code that's replying to another PullRequestComment of type Code. Use
	// BatchCreatePullRequestComments to create multiple PullRequestComments for
	// code reviews.
	CreatePullRequestComment(context.Context, *CreatePullRequestCommentRequest) (*longrunningpb.Operation, error)
	// Updates a pull request comment.
	UpdatePullRequestComment(context.Context, *UpdatePullRequestCommentRequest) (*longrunningpb.Operation, error)
	// Deletes a pull request comment.
	DeletePullRequestComment(context.Context, *DeletePullRequestCommentRequest) (*longrunningpb.Operation, error)
	// Batch creates pull request comments. This function is used to create
	// multiple PullRequestComments for code review. There needs to be exactly one
	// PullRequestComment of type Review, and at most 100 PullRequestComments of
	// type Code per request. The Postition of the code comments must be unique
	// within the request.
	BatchCreatePullRequestComments(context.Context, *BatchCreatePullRequestCommentsRequest) (*longrunningpb.Operation, error)
	// Resolves pull request comments. A list of PullRequestComment names must be
	// provided. The PullRequestComment names must be in the same conversation
	// thread. If auto_fill is set, all comments in the conversation thread will
	// be resolved.
	ResolvePullRequestComments(context.Context, *ResolvePullRequestCommentsRequest) (*longrunningpb.Operation, error)
	// Unresolves pull request comments. A list of PullRequestComment names must
	// be provided. The PullRequestComment names must be in the same conversation
	// thread. If auto_fill is set, all comments in the conversation thread will
	// be unresolved.
	UnresolvePullRequestComments(context.Context, *UnresolvePullRequestCommentsRequest) (*longrunningpb.Operation, error)
	// Creates an issue comment.
	CreateIssueComment(context.Context, *CreateIssueCommentRequest) (*longrunningpb.Operation, error)
	// Gets an issue comment.
	GetIssueComment(context.Context, *GetIssueCommentRequest) (*IssueComment, error)
	// Lists comments in an issue.
	ListIssueComments(context.Context, *ListIssueCommentsRequest) (*ListIssueCommentsResponse, error)
	// Updates an issue comment.
	UpdateIssueComment(context.Context, *UpdateIssueCommentRequest) (*longrunningpb.Operation, error)
	// Deletes an issue comment.
	DeleteIssueComment(context.Context, *DeleteIssueCommentRequest) (*longrunningpb.Operation, error)
}

// UnimplementedSecureSourceManagerServer should be embedded to have forward compatible implementations.
type UnimplementedSecureSourceManagerServer struct {
}

func (UnimplementedSecureSourceManagerServer) ListInstances(context.Context, *ListInstancesRequest) (*ListInstancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInstances not implemented")
}
func (UnimplementedSecureSourceManagerServer) GetInstance(context.Context, *GetInstanceRequest) (*Instance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstance not implemented")
}
func (UnimplementedSecureSourceManagerServer) CreateInstance(context.Context, *CreateInstanceRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInstance not implemented")
}
func (UnimplementedSecureSourceManagerServer) DeleteInstance(context.Context, *DeleteInstanceRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInstance not implemented")
}
func (UnimplementedSecureSourceManagerServer) ListRepositories(context.Context, *ListRepositoriesRequest) (*ListRepositoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRepositories not implemented")
}
func (UnimplementedSecureSourceManagerServer) GetRepository(context.Context, *GetRepositoryRequest) (*Repository, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepository not implemented")
}
func (UnimplementedSecureSourceManagerServer) CreateRepository(context.Context, *CreateRepositoryRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRepository not implemented")
}
func (UnimplementedSecureSourceManagerServer) UpdateRepository(context.Context, *UpdateRepositoryRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRepository not implemented")
}
func (UnimplementedSecureSourceManagerServer) DeleteRepository(context.Context, *DeleteRepositoryRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRepository not implemented")
}
func (UnimplementedSecureSourceManagerServer) ListHooks(context.Context, *ListHooksRequest) (*ListHooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHooks not implemented")
}
func (UnimplementedSecureSourceManagerServer) GetHook(context.Context, *GetHookRequest) (*Hook, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHook not implemented")
}
func (UnimplementedSecureSourceManagerServer) CreateHook(context.Context, *CreateHookRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHook not implemented")
}
func (UnimplementedSecureSourceManagerServer) UpdateHook(context.Context, *UpdateHookRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHook not implemented")
}
func (UnimplementedSecureSourceManagerServer) DeleteHook(context.Context, *DeleteHookRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHook not implemented")
}
func (UnimplementedSecureSourceManagerServer) GetIamPolicyRepo(context.Context, *iampb.GetIamPolicyRequest) (*iampb.Policy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIamPolicyRepo not implemented")
}
func (UnimplementedSecureSourceManagerServer) SetIamPolicyRepo(context.Context, *iampb.SetIamPolicyRequest) (*iampb.Policy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetIamPolicyRepo not implemented")
}
func (UnimplementedSecureSourceManagerServer) TestIamPermissionsRepo(context.Context, *iampb.TestIamPermissionsRequest) (*iampb.TestIamPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestIamPermissionsRepo not implemented")
}
func (UnimplementedSecureSourceManagerServer) CreateBranchRule(context.Context, *CreateBranchRuleRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBranchRule not implemented")
}
func (UnimplementedSecureSourceManagerServer) ListBranchRules(context.Context, *ListBranchRulesRequest) (*ListBranchRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBranchRules not implemented")
}
func (UnimplementedSecureSourceManagerServer) GetBranchRule(context.Context, *GetBranchRuleRequest) (*BranchRule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBranchRule not implemented")
}
func (UnimplementedSecureSourceManagerServer) UpdateBranchRule(context.Context, *UpdateBranchRuleRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBranchRule not implemented")
}
func (UnimplementedSecureSourceManagerServer) DeleteBranchRule(context.Context, *DeleteBranchRuleRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBranchRule not implemented")
}
func (UnimplementedSecureSourceManagerServer) CreatePullRequest(context.Context, *CreatePullRequestRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePullRequest not implemented")
}
func (UnimplementedSecureSourceManagerServer) GetPullRequest(context.Context, *GetPullRequestRequest) (*PullRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPullRequest not implemented")
}
func (UnimplementedSecureSourceManagerServer) ListPullRequests(context.Context, *ListPullRequestsRequest) (*ListPullRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPullRequests not implemented")
}
func (UnimplementedSecureSourceManagerServer) UpdatePullRequest(context.Context, *UpdatePullRequestRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePullRequest not implemented")
}
func (UnimplementedSecureSourceManagerServer) MergePullRequest(context.Context, *MergePullRequestRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergePullRequest not implemented")
}
func (UnimplementedSecureSourceManagerServer) OpenPullRequest(context.Context, *OpenPullRequestRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenPullRequest not implemented")
}
func (UnimplementedSecureSourceManagerServer) ClosePullRequest(context.Context, *ClosePullRequestRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClosePullRequest not implemented")
}
func (UnimplementedSecureSourceManagerServer) ListPullRequestFileDiffs(context.Context, *ListPullRequestFileDiffsRequest) (*ListPullRequestFileDiffsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPullRequestFileDiffs not implemented")
}
func (UnimplementedSecureSourceManagerServer) FetchTree(context.Context, *FetchTreeRequest) (*FetchTreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchTree not implemented")
}
func (UnimplementedSecureSourceManagerServer) FetchBlob(context.Context, *FetchBlobRequest) (*FetchBlobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchBlob not implemented")
}
func (UnimplementedSecureSourceManagerServer) CreateIssue(context.Context, *CreateIssueRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIssue not implemented")
}
func (UnimplementedSecureSourceManagerServer) GetIssue(context.Context, *GetIssueRequest) (*Issue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIssue not implemented")
}
func (UnimplementedSecureSourceManagerServer) ListIssues(context.Context, *ListIssuesRequest) (*ListIssuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIssues not implemented")
}
func (UnimplementedSecureSourceManagerServer) UpdateIssue(context.Context, *UpdateIssueRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIssue not implemented")
}
func (UnimplementedSecureSourceManagerServer) DeleteIssue(context.Context, *DeleteIssueRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIssue not implemented")
}
func (UnimplementedSecureSourceManagerServer) OpenIssue(context.Context, *OpenIssueRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenIssue not implemented")
}
func (UnimplementedSecureSourceManagerServer) CloseIssue(context.Context, *CloseIssueRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseIssue not implemented")
}
func (UnimplementedSecureSourceManagerServer) GetPullRequestComment(context.Context, *GetPullRequestCommentRequest) (*PullRequestComment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPullRequestComment not implemented")
}
func (UnimplementedSecureSourceManagerServer) ListPullRequestComments(context.Context, *ListPullRequestCommentsRequest) (*ListPullRequestCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPullRequestComments not implemented")
}
func (UnimplementedSecureSourceManagerServer) CreatePullRequestComment(context.Context, *CreatePullRequestCommentRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePullRequestComment not implemented")
}
func (UnimplementedSecureSourceManagerServer) UpdatePullRequestComment(context.Context, *UpdatePullRequestCommentRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePullRequestComment not implemented")
}
func (UnimplementedSecureSourceManagerServer) DeletePullRequestComment(context.Context, *DeletePullRequestCommentRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePullRequestComment not implemented")
}
func (UnimplementedSecureSourceManagerServer) BatchCreatePullRequestComments(context.Context, *BatchCreatePullRequestCommentsRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreatePullRequestComments not implemented")
}
func (UnimplementedSecureSourceManagerServer) ResolvePullRequestComments(context.Context, *ResolvePullRequestCommentsRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolvePullRequestComments not implemented")
}
func (UnimplementedSecureSourceManagerServer) UnresolvePullRequestComments(context.Context, *UnresolvePullRequestCommentsRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnresolvePullRequestComments not implemented")
}
func (UnimplementedSecureSourceManagerServer) CreateIssueComment(context.Context, *CreateIssueCommentRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIssueComment not implemented")
}
func (UnimplementedSecureSourceManagerServer) GetIssueComment(context.Context, *GetIssueCommentRequest) (*IssueComment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIssueComment not implemented")
}
func (UnimplementedSecureSourceManagerServer) ListIssueComments(context.Context, *ListIssueCommentsRequest) (*ListIssueCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIssueComments not implemented")
}
func (UnimplementedSecureSourceManagerServer) UpdateIssueComment(context.Context, *UpdateIssueCommentRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIssueComment not implemented")
}
func (UnimplementedSecureSourceManagerServer) DeleteIssueComment(context.Context, *DeleteIssueCommentRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIssueComment not implemented")
}

// UnsafeSecureSourceManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecureSourceManagerServer will
// result in compilation errors.
type UnsafeSecureSourceManagerServer interface {
	mustEmbedUnimplementedSecureSourceManagerServer()
}

func RegisterSecureSourceManagerServer(s grpc.ServiceRegistrar, srv SecureSourceManagerServer) {
	s.RegisterService(&SecureSourceManager_ServiceDesc, srv)
}

func _SecureSourceManager_ListInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInstancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureSourceManagerServer).ListInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureSourceManager_ListInstances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureSourceManagerServer).ListInstances(ctx, req.(*ListInstancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureSourceManager_GetInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureSourceManagerServer).GetInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureSourceManager_GetInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureSourceManagerServer).GetInstance(ctx, req.(*GetInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureSourceManager_CreateInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureSourceManagerServer).CreateInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureSourceManager_CreateInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureSourceManagerServer).CreateInstance(ctx, req.(*CreateInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureSourceManager_DeleteInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureSourceManagerServer).DeleteInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureSourceManager_DeleteInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureSourceManagerServer).DeleteInstance(ctx, req.(*DeleteInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureSourceManager_ListRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRepositoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureSourceManagerServer).ListRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureSourceManager_ListRepositories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureSourceManagerServer).ListRepositories(ctx, req.(*ListRepositoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureSourceManager_GetRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureSourceManagerServer).GetRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureSourceManager_GetRepository_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureSourceManagerServer).GetRepository(ctx, req.(*GetRepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureSourceManager_CreateRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureSourceManagerServer).CreateRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureSourceManager_CreateRepository_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureSourceManagerServer).CreateRepository(ctx, req.(*CreateRepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureSourceManager_UpdateRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureSourceManagerServer).UpdateRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureSourceManager_UpdateRepository_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureSourceManagerServer).UpdateRepository(ctx, req.(*UpdateRepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureSourceManager_DeleteRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureSourceManagerServer).DeleteRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureSourceManager_DeleteRepository_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureSourceManagerServer).DeleteRepository(ctx, req.(*DeleteRepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureSourceManager_ListHooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureSourceManagerServer).ListHooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureSourceManager_ListHooks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureSourceManagerServer).ListHooks(ctx, req.(*ListHooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureSourceManager_GetHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureSourceManagerServer).GetHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureSourceManager_GetHook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureSourceManagerServer).GetHook(ctx, req.(*GetHookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureSourceManager_CreateHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureSourceManagerServer).CreateHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureSourceManager_CreateHook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureSourceManagerServer).CreateHook(ctx, req.(*CreateHookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureSourceManager_UpdateHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureSourceManagerServer).UpdateHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureSourceManager_UpdateHook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureSourceManagerServer).UpdateHook(ctx, req.(*UpdateHookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureSourceManager_DeleteHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureSourceManagerServer).DeleteHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureSourceManager_DeleteHook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureSourceManagerServer).DeleteHook(ctx, req.(*DeleteHookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureSourceManager_GetIamPolicyRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iampb.GetIamPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureSourceManagerServer).GetIamPolicyRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureSourceManager_GetIamPolicyRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureSourceManagerServer).GetIamPolicyRepo(ctx, req.(*iampb.GetIamPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureSourceManager_SetIamPolicyRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iampb.SetIamPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureSourceManagerServer).SetIamPolicyRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureSourceManager_SetIamPolicyRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureSourceManagerServer).SetIamPolicyRepo(ctx, req.(*iampb.SetIamPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureSourceManager_TestIamPermissionsRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iampb.TestIamPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureSourceManagerServer).TestIamPermissionsRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureSourceManager_TestIamPermissionsRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureSourceManagerServer).TestIamPermissionsRepo(ctx, req.(*iampb.TestIamPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureSourceManager_CreateBranchRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBranchRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureSourceManagerServer).CreateBranchRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureSourceManager_CreateBranchRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureSourceManagerServer).CreateBranchRule(ctx, req.(*CreateBranchRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureSourceManager_ListBranchRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBranchRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureSourceManagerServer).ListBranchRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureSourceManager_ListBranchRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureSourceManagerServer).ListBranchRules(ctx, req.(*ListBranchRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureSourceManager_GetBranchRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBranchRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureSourceManagerServer).GetBranchRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureSourceManager_GetBranchRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureSourceManagerServer).GetBranchRule(ctx, req.(*GetBranchRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureSourceManager_UpdateBranchRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBranchRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureSourceManagerServer).UpdateBranchRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureSourceManager_UpdateBranchRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureSourceManagerServer).UpdateBranchRule(ctx, req.(*UpdateBranchRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureSourceManager_DeleteBranchRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBranchRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureSourceManagerServer).DeleteBranchRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureSourceManager_DeleteBranchRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureSourceManagerServer).DeleteBranchRule(ctx, req.(*DeleteBranchRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureSourceManager_CreatePullRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePullRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureSourceManagerServer).CreatePullRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureSourceManager_CreatePullRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureSourceManagerServer).CreatePullRequest(ctx, req.(*CreatePullRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureSourceManager_GetPullRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPullRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureSourceManagerServer).GetPullRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureSourceManager_GetPullRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureSourceManagerServer).GetPullRequest(ctx, req.(*GetPullRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureSourceManager_ListPullRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPullRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureSourceManagerServer).ListPullRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureSourceManager_ListPullRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureSourceManagerServer).ListPullRequests(ctx, req.(*ListPullRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureSourceManager_UpdatePullRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePullRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureSourceManagerServer).UpdatePullRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureSourceManager_UpdatePullRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureSourceManagerServer).UpdatePullRequest(ctx, req.(*UpdatePullRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureSourceManager_MergePullRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergePullRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureSourceManagerServer).MergePullRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureSourceManager_MergePullRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureSourceManagerServer).MergePullRequest(ctx, req.(*MergePullRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureSourceManager_OpenPullRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenPullRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureSourceManagerServer).OpenPullRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureSourceManager_OpenPullRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureSourceManagerServer).OpenPullRequest(ctx, req.(*OpenPullRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureSourceManager_ClosePullRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClosePullRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureSourceManagerServer).ClosePullRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureSourceManager_ClosePullRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureSourceManagerServer).ClosePullRequest(ctx, req.(*ClosePullRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureSourceManager_ListPullRequestFileDiffs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPullRequestFileDiffsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureSourceManagerServer).ListPullRequestFileDiffs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureSourceManager_ListPullRequestFileDiffs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureSourceManagerServer).ListPullRequestFileDiffs(ctx, req.(*ListPullRequestFileDiffsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureSourceManager_FetchTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureSourceManagerServer).FetchTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureSourceManager_FetchTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureSourceManagerServer).FetchTree(ctx, req.(*FetchTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureSourceManager_FetchBlob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchBlobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureSourceManagerServer).FetchBlob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureSourceManager_FetchBlob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureSourceManagerServer).FetchBlob(ctx, req.(*FetchBlobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureSourceManager_CreateIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureSourceManagerServer).CreateIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureSourceManager_CreateIssue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureSourceManagerServer).CreateIssue(ctx, req.(*CreateIssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureSourceManager_GetIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureSourceManagerServer).GetIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureSourceManager_GetIssue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureSourceManagerServer).GetIssue(ctx, req.(*GetIssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureSourceManager_ListIssues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIssuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureSourceManagerServer).ListIssues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureSourceManager_ListIssues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureSourceManagerServer).ListIssues(ctx, req.(*ListIssuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureSourceManager_UpdateIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureSourceManagerServer).UpdateIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureSourceManager_UpdateIssue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureSourceManagerServer).UpdateIssue(ctx, req.(*UpdateIssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureSourceManager_DeleteIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureSourceManagerServer).DeleteIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureSourceManager_DeleteIssue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureSourceManagerServer).DeleteIssue(ctx, req.(*DeleteIssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureSourceManager_OpenIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenIssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureSourceManagerServer).OpenIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureSourceManager_OpenIssue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureSourceManagerServer).OpenIssue(ctx, req.(*OpenIssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureSourceManager_CloseIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseIssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureSourceManagerServer).CloseIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureSourceManager_CloseIssue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureSourceManagerServer).CloseIssue(ctx, req.(*CloseIssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureSourceManager_GetPullRequestComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPullRequestCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureSourceManagerServer).GetPullRequestComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureSourceManager_GetPullRequestComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureSourceManagerServer).GetPullRequestComment(ctx, req.(*GetPullRequestCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureSourceManager_ListPullRequestComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPullRequestCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureSourceManagerServer).ListPullRequestComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureSourceManager_ListPullRequestComments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureSourceManagerServer).ListPullRequestComments(ctx, req.(*ListPullRequestCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureSourceManager_CreatePullRequestComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePullRequestCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureSourceManagerServer).CreatePullRequestComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureSourceManager_CreatePullRequestComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureSourceManagerServer).CreatePullRequestComment(ctx, req.(*CreatePullRequestCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureSourceManager_UpdatePullRequestComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePullRequestCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureSourceManagerServer).UpdatePullRequestComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureSourceManager_UpdatePullRequestComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureSourceManagerServer).UpdatePullRequestComment(ctx, req.(*UpdatePullRequestCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureSourceManager_DeletePullRequestComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePullRequestCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureSourceManagerServer).DeletePullRequestComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureSourceManager_DeletePullRequestComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureSourceManagerServer).DeletePullRequestComment(ctx, req.(*DeletePullRequestCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureSourceManager_BatchCreatePullRequestComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreatePullRequestCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureSourceManagerServer).BatchCreatePullRequestComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureSourceManager_BatchCreatePullRequestComments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureSourceManagerServer).BatchCreatePullRequestComments(ctx, req.(*BatchCreatePullRequestCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureSourceManager_ResolvePullRequestComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolvePullRequestCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureSourceManagerServer).ResolvePullRequestComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureSourceManager_ResolvePullRequestComments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureSourceManagerServer).ResolvePullRequestComments(ctx, req.(*ResolvePullRequestCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureSourceManager_UnresolvePullRequestComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnresolvePullRequestCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureSourceManagerServer).UnresolvePullRequestComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureSourceManager_UnresolvePullRequestComments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureSourceManagerServer).UnresolvePullRequestComments(ctx, req.(*UnresolvePullRequestCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureSourceManager_CreateIssueComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIssueCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureSourceManagerServer).CreateIssueComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureSourceManager_CreateIssueComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureSourceManagerServer).CreateIssueComment(ctx, req.(*CreateIssueCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureSourceManager_GetIssueComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIssueCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureSourceManagerServer).GetIssueComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureSourceManager_GetIssueComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureSourceManagerServer).GetIssueComment(ctx, req.(*GetIssueCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureSourceManager_ListIssueComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIssueCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureSourceManagerServer).ListIssueComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureSourceManager_ListIssueComments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureSourceManagerServer).ListIssueComments(ctx, req.(*ListIssueCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureSourceManager_UpdateIssueComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIssueCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureSourceManagerServer).UpdateIssueComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureSourceManager_UpdateIssueComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureSourceManagerServer).UpdateIssueComment(ctx, req.(*UpdateIssueCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureSourceManager_DeleteIssueComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIssueCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureSourceManagerServer).DeleteIssueComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureSourceManager_DeleteIssueComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureSourceManagerServer).DeleteIssueComment(ctx, req.(*DeleteIssueCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SecureSourceManager_ServiceDesc is the grpc.ServiceDesc for SecureSourceManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecureSourceManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.securesourcemanager.v1.SecureSourceManager",
	HandlerType: (*SecureSourceManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListInstances",
			Handler:    _SecureSourceManager_ListInstances_Handler,
		},
		{
			MethodName: "GetInstance",
			Handler:    _SecureSourceManager_GetInstance_Handler,
		},
		{
			MethodName: "CreateInstance",
			Handler:    _SecureSourceManager_CreateInstance_Handler,
		},
		{
			MethodName: "DeleteInstance",
			Handler:    _SecureSourceManager_DeleteInstance_Handler,
		},
		{
			MethodName: "ListRepositories",
			Handler:    _SecureSourceManager_ListRepositories_Handler,
		},
		{
			MethodName: "GetRepository",
			Handler:    _SecureSourceManager_GetRepository_Handler,
		},
		{
			MethodName: "CreateRepository",
			Handler:    _SecureSourceManager_CreateRepository_Handler,
		},
		{
			MethodName: "UpdateRepository",
			Handler:    _SecureSourceManager_UpdateRepository_Handler,
		},
		{
			MethodName: "DeleteRepository",
			Handler:    _SecureSourceManager_DeleteRepository_Handler,
		},
		{
			MethodName: "ListHooks",
			Handler:    _SecureSourceManager_ListHooks_Handler,
		},
		{
			MethodName: "GetHook",
			Handler:    _SecureSourceManager_GetHook_Handler,
		},
		{
			MethodName: "CreateHook",
			Handler:    _SecureSourceManager_CreateHook_Handler,
		},
		{
			MethodName: "UpdateHook",
			Handler:    _SecureSourceManager_UpdateHook_Handler,
		},
		{
			MethodName: "DeleteHook",
			Handler:    _SecureSourceManager_DeleteHook_Handler,
		},
		{
			MethodName: "GetIamPolicyRepo",
			Handler:    _SecureSourceManager_GetIamPolicyRepo_Handler,
		},
		{
			MethodName: "SetIamPolicyRepo",
			Handler:    _SecureSourceManager_SetIamPolicyRepo_Handler,
		},
		{
			MethodName: "TestIamPermissionsRepo",
			Handler:    _SecureSourceManager_TestIamPermissionsRepo_Handler,
		},
		{
			MethodName: "CreateBranchRule",
			Handler:    _SecureSourceManager_CreateBranchRule_Handler,
		},
		{
			MethodName: "ListBranchRules",
			Handler:    _SecureSourceManager_ListBranchRules_Handler,
		},
		{
			MethodName: "GetBranchRule",
			Handler:    _SecureSourceManager_GetBranchRule_Handler,
		},
		{
			MethodName: "UpdateBranchRule",
			Handler:    _SecureSourceManager_UpdateBranchRule_Handler,
		},
		{
			MethodName: "DeleteBranchRule",
			Handler:    _SecureSourceManager_DeleteBranchRule_Handler,
		},
		{
			MethodName: "CreatePullRequest",
			Handler:    _SecureSourceManager_CreatePullRequest_Handler,
		},
		{
			MethodName: "GetPullRequest",
			Handler:    _SecureSourceManager_GetPullRequest_Handler,
		},
		{
			MethodName: "ListPullRequests",
			Handler:    _SecureSourceManager_ListPullRequests_Handler,
		},
		{
			MethodName: "UpdatePullRequest",
			Handler:    _SecureSourceManager_UpdatePullRequest_Handler,
		},
		{
			MethodName: "MergePullRequest",
			Handler:    _SecureSourceManager_MergePullRequest_Handler,
		},
		{
			MethodName: "OpenPullRequest",
			Handler:    _SecureSourceManager_OpenPullRequest_Handler,
		},
		{
			MethodName: "ClosePullRequest",
			Handler:    _SecureSourceManager_ClosePullRequest_Handler,
		},
		{
			MethodName: "ListPullRequestFileDiffs",
			Handler:    _SecureSourceManager_ListPullRequestFileDiffs_Handler,
		},
		{
			MethodName: "FetchTree",
			Handler:    _SecureSourceManager_FetchTree_Handler,
		},
		{
			MethodName: "FetchBlob",
			Handler:    _SecureSourceManager_FetchBlob_Handler,
		},
		{
			MethodName: "CreateIssue",
			Handler:    _SecureSourceManager_CreateIssue_Handler,
		},
		{
			MethodName: "GetIssue",
			Handler:    _SecureSourceManager_GetIssue_Handler,
		},
		{
			MethodName: "ListIssues",
			Handler:    _SecureSourceManager_ListIssues_Handler,
		},
		{
			MethodName: "UpdateIssue",
			Handler:    _SecureSourceManager_UpdateIssue_Handler,
		},
		{
			MethodName: "DeleteIssue",
			Handler:    _SecureSourceManager_DeleteIssue_Handler,
		},
		{
			MethodName: "OpenIssue",
			Handler:    _SecureSourceManager_OpenIssue_Handler,
		},
		{
			MethodName: "CloseIssue",
			Handler:    _SecureSourceManager_CloseIssue_Handler,
		},
		{
			MethodName: "GetPullRequestComment",
			Handler:    _SecureSourceManager_GetPullRequestComment_Handler,
		},
		{
			MethodName: "ListPullRequestComments",
			Handler:    _SecureSourceManager_ListPullRequestComments_Handler,
		},
		{
			MethodName: "CreatePullRequestComment",
			Handler:    _SecureSourceManager_CreatePullRequestComment_Handler,
		},
		{
			MethodName: "UpdatePullRequestComment",
			Handler:    _SecureSourceManager_UpdatePullRequestComment_Handler,
		},
		{
			MethodName: "DeletePullRequestComment",
			Handler:    _SecureSourceManager_DeletePullRequestComment_Handler,
		},
		{
			MethodName: "BatchCreatePullRequestComments",
			Handler:    _SecureSourceManager_BatchCreatePullRequestComments_Handler,
		},
		{
			MethodName: "ResolvePullRequestComments",
			Handler:    _SecureSourceManager_ResolvePullRequestComments_Handler,
		},
		{
			MethodName: "UnresolvePullRequestComments",
			Handler:    _SecureSourceManager_UnresolvePullRequestComments_Handler,
		},
		{
			MethodName: "CreateIssueComment",
			Handler:    _SecureSourceManager_CreateIssueComment_Handler,
		},
		{
			MethodName: "GetIssueComment",
			Handler:    _SecureSourceManager_GetIssueComment_Handler,
		},
		{
			MethodName: "ListIssueComments",
			Handler:    _SecureSourceManager_ListIssueComments_Handler,
		},
		{
			MethodName: "UpdateIssueComment",
			Handler:    _SecureSourceManager_UpdateIssueComment_Handler,
		},
		{
			MethodName: "DeleteIssueComment",
			Handler:    _SecureSourceManager_DeleteIssueComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/securesourcemanager/v1/secure_source_manager.proto",
}
