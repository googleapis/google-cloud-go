// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/apihub/v1/plugin_service.proto

package apihubpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ApiHubPlugin_GetPlugin_FullMethodName     = "/google.cloud.apihub.v1.ApiHubPlugin/GetPlugin"
	ApiHubPlugin_EnablePlugin_FullMethodName  = "/google.cloud.apihub.v1.ApiHubPlugin/EnablePlugin"
	ApiHubPlugin_DisablePlugin_FullMethodName = "/google.cloud.apihub.v1.ApiHubPlugin/DisablePlugin"
)

// ApiHubPluginClient is the client API for ApiHubPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiHubPluginClient interface {
	// Get details about an API Hub plugin.
	GetPlugin(ctx context.Context, in *GetPluginRequest, opts ...grpc.CallOption) (*Plugin, error)
	// Enables a plugin.
	// The `state` of the plugin after enabling is `ENABLED`
	EnablePlugin(ctx context.Context, in *EnablePluginRequest, opts ...grpc.CallOption) (*Plugin, error)
	// Disables a plugin.
	// The `state` of the plugin after disabling is `DISABLED`
	DisablePlugin(ctx context.Context, in *DisablePluginRequest, opts ...grpc.CallOption) (*Plugin, error)
}

type apiHubPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewApiHubPluginClient(cc grpc.ClientConnInterface) ApiHubPluginClient {
	return &apiHubPluginClient{cc}
}

func (c *apiHubPluginClient) GetPlugin(ctx context.Context, in *GetPluginRequest, opts ...grpc.CallOption) (*Plugin, error) {
	out := new(Plugin)
	err := c.cc.Invoke(ctx, ApiHubPlugin_GetPlugin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiHubPluginClient) EnablePlugin(ctx context.Context, in *EnablePluginRequest, opts ...grpc.CallOption) (*Plugin, error) {
	out := new(Plugin)
	err := c.cc.Invoke(ctx, ApiHubPlugin_EnablePlugin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiHubPluginClient) DisablePlugin(ctx context.Context, in *DisablePluginRequest, opts ...grpc.CallOption) (*Plugin, error) {
	out := new(Plugin)
	err := c.cc.Invoke(ctx, ApiHubPlugin_DisablePlugin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiHubPluginServer is the server API for ApiHubPlugin service.
// All implementations should embed UnimplementedApiHubPluginServer
// for forward compatibility
type ApiHubPluginServer interface {
	// Get details about an API Hub plugin.
	GetPlugin(context.Context, *GetPluginRequest) (*Plugin, error)
	// Enables a plugin.
	// The `state` of the plugin after enabling is `ENABLED`
	EnablePlugin(context.Context, *EnablePluginRequest) (*Plugin, error)
	// Disables a plugin.
	// The `state` of the plugin after disabling is `DISABLED`
	DisablePlugin(context.Context, *DisablePluginRequest) (*Plugin, error)
}

// UnimplementedApiHubPluginServer should be embedded to have forward compatible implementations.
type UnimplementedApiHubPluginServer struct {
}

func (UnimplementedApiHubPluginServer) GetPlugin(context.Context, *GetPluginRequest) (*Plugin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlugin not implemented")
}
func (UnimplementedApiHubPluginServer) EnablePlugin(context.Context, *EnablePluginRequest) (*Plugin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnablePlugin not implemented")
}
func (UnimplementedApiHubPluginServer) DisablePlugin(context.Context, *DisablePluginRequest) (*Plugin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisablePlugin not implemented")
}

// UnsafeApiHubPluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiHubPluginServer will
// result in compilation errors.
type UnsafeApiHubPluginServer interface {
	mustEmbedUnimplementedApiHubPluginServer()
}

func RegisterApiHubPluginServer(s grpc.ServiceRegistrar, srv ApiHubPluginServer) {
	s.RegisterService(&ApiHubPlugin_ServiceDesc, srv)
}

func _ApiHubPlugin_GetPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiHubPluginServer).GetPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiHubPlugin_GetPlugin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiHubPluginServer).GetPlugin(ctx, req.(*GetPluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiHubPlugin_EnablePlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnablePluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiHubPluginServer).EnablePlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiHubPlugin_EnablePlugin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiHubPluginServer).EnablePlugin(ctx, req.(*EnablePluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiHubPlugin_DisablePlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisablePluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiHubPluginServer).DisablePlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiHubPlugin_DisablePlugin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiHubPluginServer).DisablePlugin(ctx, req.(*DisablePluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiHubPlugin_ServiceDesc is the grpc.ServiceDesc for ApiHubPlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiHubPlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.apihub.v1.ApiHubPlugin",
	HandlerType: (*ApiHubPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlugin",
			Handler:    _ApiHubPlugin_GetPlugin_Handler,
		},
		{
			MethodName: "EnablePlugin",
			Handler:    _ApiHubPlugin_EnablePlugin_Handler,
		},
		{
			MethodName: "DisablePlugin",
			Handler:    _ApiHubPlugin_DisablePlugin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/apihub/v1/plugin_service.proto",
}
