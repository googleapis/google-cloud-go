// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/apihub/v1/host_project_registration_service.proto

package apihubpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HostProjectRegistrationService_CreateHostProjectRegistration_FullMethodName = "/google.cloud.apihub.v1.HostProjectRegistrationService/CreateHostProjectRegistration"
	HostProjectRegistrationService_GetHostProjectRegistration_FullMethodName    = "/google.cloud.apihub.v1.HostProjectRegistrationService/GetHostProjectRegistration"
	HostProjectRegistrationService_ListHostProjectRegistrations_FullMethodName  = "/google.cloud.apihub.v1.HostProjectRegistrationService/ListHostProjectRegistrations"
)

// HostProjectRegistrationServiceClient is the client API for HostProjectRegistrationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HostProjectRegistrationServiceClient interface {
	// Create a host project registration.
	// A Google cloud project can be registered as a host project if it is not
	// attached as a runtime project to another host project.
	// A project can be registered as a host project only once. Subsequent
	// register calls for the same project will fail.
	CreateHostProjectRegistration(ctx context.Context, in *CreateHostProjectRegistrationRequest, opts ...grpc.CallOption) (*HostProjectRegistration, error)
	// Get a host project registration.
	GetHostProjectRegistration(ctx context.Context, in *GetHostProjectRegistrationRequest, opts ...grpc.CallOption) (*HostProjectRegistration, error)
	// Lists host project registrations.
	ListHostProjectRegistrations(ctx context.Context, in *ListHostProjectRegistrationsRequest, opts ...grpc.CallOption) (*ListHostProjectRegistrationsResponse, error)
}

type hostProjectRegistrationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHostProjectRegistrationServiceClient(cc grpc.ClientConnInterface) HostProjectRegistrationServiceClient {
	return &hostProjectRegistrationServiceClient{cc}
}

func (c *hostProjectRegistrationServiceClient) CreateHostProjectRegistration(ctx context.Context, in *CreateHostProjectRegistrationRequest, opts ...grpc.CallOption) (*HostProjectRegistration, error) {
	out := new(HostProjectRegistration)
	err := c.cc.Invoke(ctx, HostProjectRegistrationService_CreateHostProjectRegistration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostProjectRegistrationServiceClient) GetHostProjectRegistration(ctx context.Context, in *GetHostProjectRegistrationRequest, opts ...grpc.CallOption) (*HostProjectRegistration, error) {
	out := new(HostProjectRegistration)
	err := c.cc.Invoke(ctx, HostProjectRegistrationService_GetHostProjectRegistration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostProjectRegistrationServiceClient) ListHostProjectRegistrations(ctx context.Context, in *ListHostProjectRegistrationsRequest, opts ...grpc.CallOption) (*ListHostProjectRegistrationsResponse, error) {
	out := new(ListHostProjectRegistrationsResponse)
	err := c.cc.Invoke(ctx, HostProjectRegistrationService_ListHostProjectRegistrations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HostProjectRegistrationServiceServer is the server API for HostProjectRegistrationService service.
// All implementations should embed UnimplementedHostProjectRegistrationServiceServer
// for forward compatibility
type HostProjectRegistrationServiceServer interface {
	// Create a host project registration.
	// A Google cloud project can be registered as a host project if it is not
	// attached as a runtime project to another host project.
	// A project can be registered as a host project only once. Subsequent
	// register calls for the same project will fail.
	CreateHostProjectRegistration(context.Context, *CreateHostProjectRegistrationRequest) (*HostProjectRegistration, error)
	// Get a host project registration.
	GetHostProjectRegistration(context.Context, *GetHostProjectRegistrationRequest) (*HostProjectRegistration, error)
	// Lists host project registrations.
	ListHostProjectRegistrations(context.Context, *ListHostProjectRegistrationsRequest) (*ListHostProjectRegistrationsResponse, error)
}

// UnimplementedHostProjectRegistrationServiceServer should be embedded to have forward compatible implementations.
type UnimplementedHostProjectRegistrationServiceServer struct {
}

func (UnimplementedHostProjectRegistrationServiceServer) CreateHostProjectRegistration(context.Context, *CreateHostProjectRegistrationRequest) (*HostProjectRegistration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHostProjectRegistration not implemented")
}
func (UnimplementedHostProjectRegistrationServiceServer) GetHostProjectRegistration(context.Context, *GetHostProjectRegistrationRequest) (*HostProjectRegistration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostProjectRegistration not implemented")
}
func (UnimplementedHostProjectRegistrationServiceServer) ListHostProjectRegistrations(context.Context, *ListHostProjectRegistrationsRequest) (*ListHostProjectRegistrationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHostProjectRegistrations not implemented")
}

// UnsafeHostProjectRegistrationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HostProjectRegistrationServiceServer will
// result in compilation errors.
type UnsafeHostProjectRegistrationServiceServer interface {
	mustEmbedUnimplementedHostProjectRegistrationServiceServer()
}

func RegisterHostProjectRegistrationServiceServer(s grpc.ServiceRegistrar, srv HostProjectRegistrationServiceServer) {
	s.RegisterService(&HostProjectRegistrationService_ServiceDesc, srv)
}

func _HostProjectRegistrationService_CreateHostProjectRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHostProjectRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostProjectRegistrationServiceServer).CreateHostProjectRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostProjectRegistrationService_CreateHostProjectRegistration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostProjectRegistrationServiceServer).CreateHostProjectRegistration(ctx, req.(*CreateHostProjectRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostProjectRegistrationService_GetHostProjectRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHostProjectRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostProjectRegistrationServiceServer).GetHostProjectRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostProjectRegistrationService_GetHostProjectRegistration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostProjectRegistrationServiceServer).GetHostProjectRegistration(ctx, req.(*GetHostProjectRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostProjectRegistrationService_ListHostProjectRegistrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHostProjectRegistrationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostProjectRegistrationServiceServer).ListHostProjectRegistrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostProjectRegistrationService_ListHostProjectRegistrations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostProjectRegistrationServiceServer).ListHostProjectRegistrations(ctx, req.(*ListHostProjectRegistrationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HostProjectRegistrationService_ServiceDesc is the grpc.ServiceDesc for HostProjectRegistrationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HostProjectRegistrationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.apihub.v1.HostProjectRegistrationService",
	HandlerType: (*HostProjectRegistrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHostProjectRegistration",
			Handler:    _HostProjectRegistrationService_CreateHostProjectRegistration_Handler,
		},
		{
			MethodName: "GetHostProjectRegistration",
			Handler:    _HostProjectRegistrationService_GetHostProjectRegistration_Handler,
		},
		{
			MethodName: "ListHostProjectRegistrations",
			Handler:    _HostProjectRegistrationService_ListHostProjectRegistrations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/apihub/v1/host_project_registration_service.proto",
}
