// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.7
// source: google/cloud/apihub/v1/plugin_service.proto

package apihubpb

import (
	reflect "reflect"
	sync "sync"

	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enum for the action type.
type ActionType int32

const (
	// Default unspecified action type.
	ActionType_ACTION_TYPE_UNSPECIFIED ActionType = 0
	// Action type for sync metadata.
	ActionType_SYNC_METADATA ActionType = 1
	// Action type for sync runtime data.
	ActionType_SYNC_RUNTIME_DATA ActionType = 2
)

// Enum value maps for ActionType.
var (
	ActionType_name = map[int32]string{
		0: "ACTION_TYPE_UNSPECIFIED",
		1: "SYNC_METADATA",
		2: "SYNC_RUNTIME_DATA",
	}
	ActionType_value = map[string]int32{
		"ACTION_TYPE_UNSPECIFIED": 0,
		"SYNC_METADATA":           1,
		"SYNC_RUNTIME_DATA":       2,
	}
)

func (x ActionType) Enum() *ActionType {
	p := new(ActionType)
	*p = x
	return p
}

func (x ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_apihub_v1_plugin_service_proto_enumTypes[0].Descriptor()
}

func (ActionType) Type() protoreflect.EnumType {
	return &file_google_cloud_apihub_v1_plugin_service_proto_enumTypes[0]
}

func (x ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionType.Descriptor instead.
func (ActionType) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_apihub_v1_plugin_service_proto_rawDescGZIP(), []int{0}
}

// Enum for the gateway type.
type GatewayType int32

const (
	// The gateway type is not specified.
	GatewayType_GATEWAY_TYPE_UNSPECIFIED GatewayType = 0
	// The gateway type is Apigee X and Hybrid.
	GatewayType_APIGEE_X_AND_HYBRID GatewayType = 1
	// The gateway type is Apigee Edge Public Cloud.
	GatewayType_APIGEE_EDGE_PUBLIC_CLOUD GatewayType = 2
	// The gateway type is Apigee Edge Private Cloud.
	GatewayType_APIGEE_EDGE_PRIVATE_CLOUD GatewayType = 3
	// The gateway type is Cloud API Gateway.
	GatewayType_CLOUD_API_GATEWAY GatewayType = 4
	// The gateway type is Cloud Endpoints.
	GatewayType_CLOUD_ENDPOINTS GatewayType = 5
	// The gateway type is API Discovery.
	GatewayType_API_DISCOVERY GatewayType = 6
	// The gateway type for any other types of gateways.
	GatewayType_OTHERS GatewayType = 7
)

// Enum value maps for GatewayType.
var (
	GatewayType_name = map[int32]string{
		0: "GATEWAY_TYPE_UNSPECIFIED",
		1: "APIGEE_X_AND_HYBRID",
		2: "APIGEE_EDGE_PUBLIC_CLOUD",
		3: "APIGEE_EDGE_PRIVATE_CLOUD",
		4: "CLOUD_API_GATEWAY",
		5: "CLOUD_ENDPOINTS",
		6: "API_DISCOVERY",
		7: "OTHERS",
	}
	GatewayType_value = map[string]int32{
		"GATEWAY_TYPE_UNSPECIFIED":  0,
		"APIGEE_X_AND_HYBRID":       1,
		"APIGEE_EDGE_PUBLIC_CLOUD":  2,
		"APIGEE_EDGE_PRIVATE_CLOUD": 3,
		"CLOUD_API_GATEWAY":         4,
		"CLOUD_ENDPOINTS":           5,
		"API_DISCOVERY":             6,
		"OTHERS":                    7,
	}
)

func (x GatewayType) Enum() *GatewayType {
	p := new(GatewayType)
	*p = x
	return p
}

func (x GatewayType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GatewayType) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_apihub_v1_plugin_service_proto_enumTypes[1].Descriptor()
}

func (GatewayType) Type() protoreflect.EnumType {
	return &file_google_cloud_apihub_v1_plugin_service_proto_enumTypes[1]
}

func (x GatewayType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GatewayType.Descriptor instead.
func (GatewayType) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_apihub_v1_plugin_service_proto_rawDescGZIP(), []int{1}
}

// Enum for the curation type.
type CurationType int32

const (
	// Default unspecified curation type.
	CurationType_CURATION_TYPE_UNSPECIFIED CurationType = 0
	// Default curation for API metadata will be used.
	CurationType_DEFAULT_CURATION_FOR_API_METADATA CurationType = 1
	// Custom curation for API metadata will be used.
	CurationType_CUSTOM_CURATION_FOR_API_METADATA CurationType = 2
)

// Enum value maps for CurationType.
var (
	CurationType_name = map[int32]string{
		0: "CURATION_TYPE_UNSPECIFIED",
		1: "DEFAULT_CURATION_FOR_API_METADATA",
		2: "CUSTOM_CURATION_FOR_API_METADATA",
	}
	CurationType_value = map[string]int32{
		"CURATION_TYPE_UNSPECIFIED":         0,
		"DEFAULT_CURATION_FOR_API_METADATA": 1,
		"CUSTOM_CURATION_FOR_API_METADATA":  2,
	}
)

func (x CurationType) Enum() *CurationType {
	p := new(CurationType)
	*p = x
	return p
}

func (x CurationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CurationType) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_apihub_v1_plugin_service_proto_enumTypes[2].Descriptor()
}

func (CurationType) Type() protoreflect.EnumType {
	return &file_google_cloud_apihub_v1_plugin_service_proto_enumTypes[2]
}

func (x CurationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CurationType.Descriptor instead.
func (CurationType) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_apihub_v1_plugin_service_proto_rawDescGZIP(), []int{2}
}

// Possible states a plugin can have. Note that this enum may receive new
// values in the future. Consumers are advised to always code against the
// enum values expecting new states can be added later on.
type Plugin_State int32

const (
	// The default value. This value is used if the state is omitted.
	Plugin_STATE_UNSPECIFIED Plugin_State = 0
	// The plugin is enabled.
	Plugin_ENABLED Plugin_State = 1
	// The plugin is disabled.
	Plugin_DISABLED Plugin_State = 2
)

// Enum value maps for Plugin_State.
var (
	Plugin_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "ENABLED",
		2: "DISABLED",
	}
	Plugin_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"ENABLED":           1,
		"DISABLED":          2,
	}
)

func (x Plugin_State) Enum() *Plugin_State {
	p := new(Plugin_State)
	*p = x
	return p
}

func (x Plugin_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Plugin_State) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_apihub_v1_plugin_service_proto_enumTypes[3].Descriptor()
}

func (Plugin_State) Type() protoreflect.EnumType {
	return &file_google_cloud_apihub_v1_plugin_service_proto_enumTypes[3]
}

func (x Plugin_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Plugin_State.Descriptor instead.
func (Plugin_State) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_apihub_v1_plugin_service_proto_rawDescGZIP(), []int{0, 0}
}

// Ownership type of the plugin.
type Plugin_OwnershipType int32

const (
	// Default unspecified type.
	Plugin_OWNERSHIP_TYPE_UNSPECIFIED Plugin_OwnershipType = 0
	// System owned plugins are defined by API hub and are available out of the
	// box in API hub.
	Plugin_SYSTEM_OWNED Plugin_OwnershipType = 1
	// User owned plugins are defined by the user and need to be explicitly
	// added to API hub via
	// [CreatePlugin][google.cloud.apihub.v1.ApiHubPlugin.CreatePlugin] method.
	Plugin_USER_OWNED Plugin_OwnershipType = 2
)

// Enum value maps for Plugin_OwnershipType.
var (
	Plugin_OwnershipType_name = map[int32]string{
		0: "OWNERSHIP_TYPE_UNSPECIFIED",
		1: "SYSTEM_OWNED",
		2: "USER_OWNED",
	}
	Plugin_OwnershipType_value = map[string]int32{
		"OWNERSHIP_TYPE_UNSPECIFIED": 0,
		"SYSTEM_OWNED":               1,
		"USER_OWNED":                 2,
	}
)

func (x Plugin_OwnershipType) Enum() *Plugin_OwnershipType {
	p := new(Plugin_OwnershipType)
	*p = x
	return p
}

func (x Plugin_OwnershipType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Plugin_OwnershipType) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_apihub_v1_plugin_service_proto_enumTypes[4].Descriptor()
}

func (Plugin_OwnershipType) Type() protoreflect.EnumType {
	return &file_google_cloud_apihub_v1_plugin_service_proto_enumTypes[4]
}

func (x Plugin_OwnershipType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Plugin_OwnershipType.Descriptor instead.
func (Plugin_OwnershipType) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_apihub_v1_plugin_service_proto_rawDescGZIP(), []int{0, 1}
}

// Execution mode of the action.
type PluginActionConfig_TriggerMode int32

const (
	// Default unspecified mode.
	PluginActionConfig_TRIGGER_MODE_UNSPECIFIED PluginActionConfig_TriggerMode = 0
	// This action can be executed by invoking
	// [ExecutePluginInstanceAction][google.cloud.apihub.v1.ApiHubPlugin.ExecutePluginInstanceAction]
	// API with the given action id. To support this, the plugin hosting service
	// should handle this action id as part of execute call.
	PluginActionConfig_API_HUB_ON_DEMAND_TRIGGER PluginActionConfig_TriggerMode = 1
	// This action will be executed on schedule by invoking
	// [ExecutePluginInstanceAction][google.cloud.apihub.v1.ApiHubPlugin.ExecutePluginInstanceAction]
	// API with the given action id. To set the schedule, the user can provide
	// the cron expression in the
	// [PluginAction][PluginAction.schedule_cron_expression] field for a given
	// plugin instance. To support this, the plugin hosting service should
	// handle this action id as part of execute call.
	// Note, on demand execution will be supported by default in this trigger
	// mode.
	PluginActionConfig_API_HUB_SCHEDULE_TRIGGER PluginActionConfig_TriggerMode = 2
	// The execution of this plugin is not handled by API hub. In this case,
	// the plugin hosting service need not handle this action id as part of
	// the execute call.
	PluginActionConfig_NON_API_HUB_MANAGED PluginActionConfig_TriggerMode = 3
)

// Enum value maps for PluginActionConfig_TriggerMode.
var (
	PluginActionConfig_TriggerMode_name = map[int32]string{
		0: "TRIGGER_MODE_UNSPECIFIED",
		1: "API_HUB_ON_DEMAND_TRIGGER",
		2: "API_HUB_SCHEDULE_TRIGGER",
		3: "NON_API_HUB_MANAGED",
	}
	PluginActionConfig_TriggerMode_value = map[string]int32{
		"TRIGGER_MODE_UNSPECIFIED":  0,
		"API_HUB_ON_DEMAND_TRIGGER": 1,
		"API_HUB_SCHEDULE_TRIGGER":  2,
		"NON_API_HUB_MANAGED":       3,
	}
)

func (x PluginActionConfig_TriggerMode) Enum() *PluginActionConfig_TriggerMode {
	p := new(PluginActionConfig_TriggerMode)
	*p = x
	return p
}

func (x PluginActionConfig_TriggerMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PluginActionConfig_TriggerMode) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_apihub_v1_plugin_service_proto_enumTypes[5].Descriptor()
}

func (PluginActionConfig_TriggerMode) Type() protoreflect.EnumType {
	return &file_google_cloud_apihub_v1_plugin_service_proto_enumTypes[5]
}

func (x PluginActionConfig_TriggerMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PluginActionConfig_TriggerMode.Descriptor instead.
func (PluginActionConfig_TriggerMode) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_apihub_v1_plugin_service_proto_rawDescGZIP(), []int{1, 0}
}

// State represents the state of the plugin instance action.
type PluginInstanceAction_State int32

const (
	// Default unspecified state.
	PluginInstanceAction_STATE_UNSPECIFIED PluginInstanceAction_State = 0
	// The action is enabled in the plugin instance i.e., executions can
	// be triggered for this action.
	PluginInstanceAction_ENABLED PluginInstanceAction_State = 1
	// The action is disabled in the plugin instance i.e., no executions
	// can be triggered for this action. This state indicates that the user
	// explicitly disabled the instance, and no further action is needed unless
	// the user wants to re-enable it.
	PluginInstanceAction_DISABLED PluginInstanceAction_State = 2
	// The action in the plugin instance is being enabled.
	PluginInstanceAction_ENABLING PluginInstanceAction_State = 3
	// The action in the plugin instance is being disabled.
	PluginInstanceAction_DISABLING PluginInstanceAction_State = 4
	// The ERROR state can come while enabling/disabling plugin instance action.
	// Users can retrigger enable, disable via
	// [EnablePluginInstanceAction][google.cloud.apihub.v1.ApiHubPlugin.EnablePluginInstanceAction]
	// and
	// [DisablePluginInstanceAction][google.cloud.apihub.v1.ApiHubPlugin.DisablePluginInstanceAction]
	// to restore the action back to enabled/disabled state. Note enable/disable
	// on actions can only be triggered if plugin instance is in Active state.
	PluginInstanceAction_ERROR PluginInstanceAction_State = 5
)

// Enum value maps for PluginInstanceAction_State.
var (
	PluginInstanceAction_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "ENABLED",
		2: "DISABLED",
		3: "ENABLING",
		4: "DISABLING",
		5: "ERROR",
	}
	PluginInstanceAction_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"ENABLED":           1,
		"DISABLED":          2,
		"ENABLING":          3,
		"DISABLING":         4,
		"ERROR":             5,
	}
)

func (x PluginInstanceAction_State) Enum() *PluginInstanceAction_State {
	p := new(PluginInstanceAction_State)
	*p = x
	return p
}

func (x PluginInstanceAction_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PluginInstanceAction_State) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_apihub_v1_plugin_service_proto_enumTypes[6].Descriptor()
}

func (PluginInstanceAction_State) Type() protoreflect.EnumType {
	return &file_google_cloud_apihub_v1_plugin_service_proto_enumTypes[6]
}

func (x PluginInstanceAction_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PluginInstanceAction_State.Descriptor instead.
func (PluginInstanceAction_State) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_apihub_v1_plugin_service_proto_rawDescGZIP(), []int{5, 0}
}

// State represents the state of the plugin instance.
type PluginInstance_State int32

const (
	// Default unspecified state.
	PluginInstance_STATE_UNSPECIFIED PluginInstance_State = 0
	// The plugin instance is being created.
	PluginInstance_CREATING PluginInstance_State = 1
	// The plugin instance is active and ready for executions. This is the only
	// state where executions can run on the plugin instance.
	PluginInstance_ACTIVE PluginInstance_State = 2
	// The updated config that contains
	// [additional_config][google.cloud.apihub.v1.PluginInstance.additional_config]
	// and [auth_config][google.cloud.apihub.v1.PluginInstance.auth_config] is
	// being applied.
	PluginInstance_APPLYING_CONFIG PluginInstance_State = 3
	// The ERROR state can come while applying config. Users
	// can retrigger
	// [ApplyPluginInstanceConfig][google.cloud.apihub.v1.ApiHubPlugin.ApplyPluginInstanceConfig]
	// to restore the plugin instance back to active state. Note, In case the
	// ERROR state happens while applying config (auth_config,
	// additional_config), the plugin instance will reflect the config which was
	// trying to be applied while error happened. In order to overwrite, trigger
	// ApplyConfig with a new config.
	PluginInstance_ERROR PluginInstance_State = 4
	// The plugin instance is in a failed state. This indicates that an
	// unrecoverable error occurred during a previous operation (Create,
	// Delete).
	PluginInstance_FAILED PluginInstance_State = 5
	// The plugin instance is being deleted. Delete is only possible if there is
	// no other operation running on the plugin instance and plugin instance
	// action.
	PluginInstance_DELETING PluginInstance_State = 6
)

// Enum value maps for PluginInstance_State.
var (
	PluginInstance_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "CREATING",
		2: "ACTIVE",
		3: "APPLYING_CONFIG",
		4: "ERROR",
		5: "FAILED",
		6: "DELETING",
	}
	PluginInstance_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"CREATING":          1,
		"ACTIVE":            2,
		"APPLYING_CONFIG":   3,
		"ERROR":             4,
		"FAILED":            5,
		"DELETING":          6,
	}
)

func (x PluginInstance_State) Enum() *PluginInstance_State {
	p := new(PluginInstance_State)
	*p = x
	return p
}

func (x PluginInstance_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PluginInstance_State) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_apihub_v1_plugin_service_proto_enumTypes[7].Descriptor()
}

func (PluginInstance_State) Type() protoreflect.EnumType {
	return &file_google_cloud_apihub_v1_plugin_service_proto_enumTypes[7]
}

func (x PluginInstance_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PluginInstance_State.Descriptor instead.
func (PluginInstance_State) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_apihub_v1_plugin_service_proto_rawDescGZIP(), []int{6, 0}
}

// Enum for the current state of the execution.
type ExecutionStatus_CurrentExecutionState int32

const (
	// Default unspecified execution state.
	ExecutionStatus_CURRENT_EXECUTION_STATE_UNSPECIFIED ExecutionStatus_CurrentExecutionState = 0
	// The plugin instance is executing.
	ExecutionStatus_RUNNING ExecutionStatus_CurrentExecutionState = 1
	// The plugin instance is not running an execution.
	ExecutionStatus_NOT_RUNNING ExecutionStatus_CurrentExecutionState = 2
)

// Enum value maps for ExecutionStatus_CurrentExecutionState.
var (
	ExecutionStatus_CurrentExecutionState_name = map[int32]string{
		0: "CURRENT_EXECUTION_STATE_UNSPECIFIED",
		1: "RUNNING",
		2: "NOT_RUNNING",
	}
	ExecutionStatus_CurrentExecutionState_value = map[string]int32{
		"CURRENT_EXECUTION_STATE_UNSPECIFIED": 0,
		"RUNNING":                             1,
		"NOT_RUNNING":                         2,
	}
)

func (x ExecutionStatus_CurrentExecutionState) Enum() *ExecutionStatus_CurrentExecutionState {
	p := new(ExecutionStatus_CurrentExecutionState)
	*p = x
	return p
}

func (x ExecutionStatus_CurrentExecutionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecutionStatus_CurrentExecutionState) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_apihub_v1_plugin_service_proto_enumTypes[8].Descriptor()
}

func (ExecutionStatus_CurrentExecutionState) Type() protoreflect.EnumType {
	return &file_google_cloud_apihub_v1_plugin_service_proto_enumTypes[8]
}

func (x ExecutionStatus_CurrentExecutionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecutionStatus_CurrentExecutionState.Descriptor instead.
func (ExecutionStatus_CurrentExecutionState) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_apihub_v1_plugin_service_proto_rawDescGZIP(), []int{8, 0}
}

// Enum for the result of the last execution of the plugin instance.
type ExecutionStatus_LastExecution_Result int32

const (
	// Default unspecified execution result.
	ExecutionStatus_LastExecution_RESULT_UNSPECIFIED ExecutionStatus_LastExecution_Result = 0
	// The plugin instance executed successfully.
	ExecutionStatus_LastExecution_SUCCEEDED ExecutionStatus_LastExecution_Result = 1
	// The plugin instance execution failed.
	ExecutionStatus_LastExecution_FAILED ExecutionStatus_LastExecution_Result = 2
)

// Enum value maps for ExecutionStatus_LastExecution_Result.
var (
	ExecutionStatus_LastExecution_Result_name = map[int32]string{
		0: "RESULT_UNSPECIFIED",
		1: "SUCCEEDED",
		2: "FAILED",
	}
	ExecutionStatus_LastExecution_Result_value = map[string]int32{
		"RESULT_UNSPECIFIED": 0,
		"SUCCEEDED":          1,
		"FAILED":             2,
	}
)

func (x ExecutionStatus_LastExecution_Result) Enum() *ExecutionStatus_LastExecution_Result {
	p := new(ExecutionStatus_LastExecution_Result)
	*p = x
	return p
}

func (x ExecutionStatus_LastExecution_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecutionStatus_LastExecution_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_apihub_v1_plugin_service_proto_enumTypes[9].Descriptor()
}

func (ExecutionStatus_LastExecution_Result) Type() protoreflect.EnumType {
	return &file_google_cloud_apihub_v1_plugin_service_proto_enumTypes[9]
}

func (x ExecutionStatus_LastExecution_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecutionStatus_LastExecution_Result.Descriptor instead.
func (ExecutionStatus_LastExecution_Result) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_apihub_v1_plugin_service_proto_rawDescGZIP(), []int{8, 0, 0}
}

// A plugin resource in the API Hub.
type Plugin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier. The name of the plugin.
	// Format: `projects/{project}/locations/{location}/plugins/{plugin}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Required. The display name of the plugin. Max length is 50 characters
	// (Unicode code points).
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Optional. The type of the API.
	// This maps to the following system defined attribute:
	// `projects/{project}/locations/{location}/attributes/system-plugin-type`
	// attribute.
	// The number of allowed values for this attribute will be based on the
	// cardinality of the attribute. The same can be retrieved via GetAttribute
	// API. All values should be from the list of allowed values defined for the
	// attribute.
	// Note this field is not required for plugins developed via plugin framework.
	Type *AttributeValues `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// Optional. The plugin description. Max length is 2000 characters (Unicode
	// code points).
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Output only. Represents the state of the plugin.
	// Note this field will not be set for plugins developed via plugin
	// framework as the state will be managed at plugin instance level.
	State Plugin_State `protobuf:"varint,5,opt,name=state,proto3,enum=google.cloud.apihub.v1.Plugin_State" json:"state,omitempty"`
	// Output only. The type of the plugin, indicating whether it is
	// 'SYSTEM_OWNED' or 'USER_OWNED'.
	OwnershipType Plugin_OwnershipType `protobuf:"varint,6,opt,name=ownership_type,json=ownershipType,proto3,enum=google.cloud.apihub.v1.Plugin_OwnershipType" json:"ownership_type,omitempty"`
	// Optional. This field is optional. It is used to notify the plugin hosting
	// service for any lifecycle changes of the plugin instance and trigger
	// execution of plugin instance actions in case of API hub managed actions.
	//
	// This field should be provided if the plugin instance lifecycle of the
	// developed plugin needs to be managed from API hub. Also, in this case the
	// plugin hosting service interface needs to be implemented.
	//
	// This field should not be provided if the plugin wants to manage plugin
	// instance lifecycle events outside of hub interface and use plugin framework
	// for only registering of plugin and plugin instances to capture the source
	// of data into hub. Note, in this case the plugin hosting service interface
	// is not required to be implemented. Also, the plugin instance lifecycle
	// actions will be disabled from API hub's UI.
	HostingService *Plugin_HostingService `protobuf:"bytes,7,opt,name=hosting_service,json=hostingService,proto3" json:"hosting_service,omitempty"`
	// Optional. The configuration of actions supported by the plugin.
	// **REQUIRED**: This field must be provided when creating or updating a
	// Plugin. The server will reject requests if this field is missing.
	ActionsConfig []*PluginActionConfig `protobuf:"bytes,8,rep,name=actions_config,json=actionsConfig,proto3" json:"actions_config,omitempty"`
	// Optional. The documentation of the plugin, that explains how to set up and
	// use the plugin.
	Documentation *Documentation `protobuf:"bytes,9,opt,name=documentation,proto3" json:"documentation,omitempty"`
	// Optional. The category of the plugin, identifying its primary category or
	// purpose. This field is required for all plugins.
	PluginCategory PluginCategory `protobuf:"varint,11,opt,name=plugin_category,json=pluginCategory,proto3,enum=google.cloud.apihub.v1.PluginCategory" json:"plugin_category,omitempty"`
	// Optional. The configuration template for the plugin.
	ConfigTemplate *Plugin_ConfigTemplate `protobuf:"bytes,12,opt,name=config_template,json=configTemplate,proto3" json:"config_template,omitempty"`
	// Output only. Timestamp indicating when the plugin was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. Timestamp indicating when the plugin was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Optional. The type of the gateway.
	GatewayType GatewayType `protobuf:"varint,15,opt,name=gateway_type,json=gatewayType,proto3,enum=google.cloud.apihub.v1.GatewayType" json:"gateway_type,omitempty"`
}

func (x *Plugin) Reset() {
	*x = Plugin{}
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Plugin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Plugin) ProtoMessage() {}

func (x *Plugin) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Plugin.ProtoReflect.Descriptor instead.
func (*Plugin) Descriptor() ([]byte, []int) {
	return file_google_cloud_apihub_v1_plugin_service_proto_rawDescGZIP(), []int{0}
}

func (x *Plugin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Plugin) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Plugin) GetType() *AttributeValues {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Plugin) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Plugin) GetState() Plugin_State {
	if x != nil {
		return x.State
	}
	return Plugin_STATE_UNSPECIFIED
}

func (x *Plugin) GetOwnershipType() Plugin_OwnershipType {
	if x != nil {
		return x.OwnershipType
	}
	return Plugin_OWNERSHIP_TYPE_UNSPECIFIED
}

func (x *Plugin) GetHostingService() *Plugin_HostingService {
	if x != nil {
		return x.HostingService
	}
	return nil
}

func (x *Plugin) GetActionsConfig() []*PluginActionConfig {
	if x != nil {
		return x.ActionsConfig
	}
	return nil
}

func (x *Plugin) GetDocumentation() *Documentation {
	if x != nil {
		return x.Documentation
	}
	return nil
}

func (x *Plugin) GetPluginCategory() PluginCategory {
	if x != nil {
		return x.PluginCategory
	}
	return PluginCategory_PLUGIN_CATEGORY_UNSPECIFIED
}

func (x *Plugin) GetConfigTemplate() *Plugin_ConfigTemplate {
	if x != nil {
		return x.ConfigTemplate
	}
	return nil
}

func (x *Plugin) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Plugin) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Plugin) GetGatewayType() GatewayType {
	if x != nil {
		return x.GatewayType
	}
	return GatewayType_GATEWAY_TYPE_UNSPECIFIED
}

// PluginActionConfig represents the configuration of an action supported by a
// plugin.
type PluginActionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The id of the action.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Required. The display name of the action.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Required. The description of the operation performed by the action.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Required. The trigger mode supported by the action.
	TriggerMode PluginActionConfig_TriggerMode `protobuf:"varint,4,opt,name=trigger_mode,json=triggerMode,proto3,enum=google.cloud.apihub.v1.PluginActionConfig_TriggerMode" json:"trigger_mode,omitempty"`
}

func (x *PluginActionConfig) Reset() {
	*x = PluginActionConfig{}
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PluginActionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginActionConfig) ProtoMessage() {}

func (x *PluginActionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginActionConfig.ProtoReflect.Descriptor instead.
func (*PluginActionConfig) Descriptor() ([]byte, []int) {
	return file_google_cloud_apihub_v1_plugin_service_proto_rawDescGZIP(), []int{1}
}

func (x *PluginActionConfig) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PluginActionConfig) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *PluginActionConfig) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PluginActionConfig) GetTriggerMode() PluginActionConfig_TriggerMode {
	if x != nil {
		return x.TriggerMode
	}
	return PluginActionConfig_TRIGGER_MODE_UNSPECIFIED
}

// The [GetPlugin][google.cloud.apihub.v1.ApiHubPlugin.GetPlugin] method's
// request.
type GetPluginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the plugin to retrieve.
	// Format: `projects/{project}/locations/{location}/plugins/{plugin}`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetPluginRequest) Reset() {
	*x = GetPluginRequest{}
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPluginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPluginRequest) ProtoMessage() {}

func (x *GetPluginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPluginRequest.ProtoReflect.Descriptor instead.
func (*GetPluginRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_apihub_v1_plugin_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetPluginRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// The [EnablePlugin][google.cloud.apihub.v1.ApiHubPlugin.EnablePlugin] method's
// request.
type EnablePluginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the plugin to enable.
	// Format: `projects/{project}/locations/{location}/plugins/{plugin}`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *EnablePluginRequest) Reset() {
	*x = EnablePluginRequest{}
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnablePluginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnablePluginRequest) ProtoMessage() {}

func (x *EnablePluginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnablePluginRequest.ProtoReflect.Descriptor instead.
func (*EnablePluginRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_apihub_v1_plugin_service_proto_rawDescGZIP(), []int{3}
}

func (x *EnablePluginRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// The [DisablePlugin][google.cloud.apihub.v1.ApiHubPlugin.DisablePlugin]
// method's request.
type DisablePluginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the plugin to disable.
	// Format: `projects/{project}/locations/{location}/plugins/{plugin}`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DisablePluginRequest) Reset() {
	*x = DisablePluginRequest{}
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisablePluginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisablePluginRequest) ProtoMessage() {}

func (x *DisablePluginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisablePluginRequest.ProtoReflect.Descriptor instead.
func (*DisablePluginRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_apihub_v1_plugin_service_proto_rawDescGZIP(), []int{4}
}

func (x *DisablePluginRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// PluginInstanceAction represents an action which can be executed in the plugin
// instance.
type PluginInstanceAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The status of the plugin action.
	//
	// Types that are assignable to ActionStatus:
	//
	//	*PluginInstanceAction_HubInstanceAction
	ActionStatus isPluginInstanceAction_ActionStatus `protobuf_oneof:"action_status"`
	// Required. This should map to one of the [action
	// id][google.cloud.apihub.v1.PluginActionConfig.id] specified in
	// [actions_config][google.cloud.apihub.v1.Plugin.actions_config] in the
	// plugin.
	ActionId string `protobuf:"bytes,1,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
	// Output only. The current state of the plugin action in the plugin instance.
	State PluginInstanceAction_State `protobuf:"varint,2,opt,name=state,proto3,enum=google.cloud.apihub.v1.PluginInstanceAction_State" json:"state,omitempty"`
	// Optional. The schedule for this plugin instance action. This can only be
	// set if the plugin supports API_HUB_SCHEDULE_TRIGGER mode for this action.
	ScheduleCronExpression string `protobuf:"bytes,4,opt,name=schedule_cron_expression,json=scheduleCronExpression,proto3" json:"schedule_cron_expression,omitempty"`
	// Optional. This configuration should be provided if the plugin action is
	// publishing data to API hub curate layer.
	CurationConfig *CurationConfig `protobuf:"bytes,5,opt,name=curation_config,json=curationConfig,proto3" json:"curation_config,omitempty"`
	// Optional. The time zone for the schedule cron expression. If not provided,
	// UTC will be used.
	ScheduleTimeZone string `protobuf:"bytes,7,opt,name=schedule_time_zone,json=scheduleTimeZone,proto3" json:"schedule_time_zone,omitempty"`
	// Optional. The service account used to publish data. Note, the service
	// account will only be accepted for non GCP plugins like OPDK.
	ServiceAccount string `protobuf:"bytes,8,opt,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty"`
	// Output only. The configuration of resources created for a given plugin
	// instance action. Note these will be returned only in case of Non-GCP
	// plugins like OPDK.
	ResourceConfig *PluginInstanceAction_ResourceConfig `protobuf:"bytes,9,opt,name=resource_config,json=resourceConfig,proto3" json:"resource_config,omitempty"`
}

func (x *PluginInstanceAction) Reset() {
	*x = PluginInstanceAction{}
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PluginInstanceAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginInstanceAction) ProtoMessage() {}

func (x *PluginInstanceAction) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginInstanceAction.ProtoReflect.Descriptor instead.
func (*PluginInstanceAction) Descriptor() ([]byte, []int) {
	return file_google_cloud_apihub_v1_plugin_service_proto_rawDescGZIP(), []int{5}
}

func (m *PluginInstanceAction) GetActionStatus() isPluginInstanceAction_ActionStatus {
	if m != nil {
		return m.ActionStatus
	}
	return nil
}

func (x *PluginInstanceAction) GetHubInstanceAction() *ExecutionStatus {
	if x, ok := x.GetActionStatus().(*PluginInstanceAction_HubInstanceAction); ok {
		return x.HubInstanceAction
	}
	return nil
}

func (x *PluginInstanceAction) GetActionId() string {
	if x != nil {
		return x.ActionId
	}
	return ""
}

func (x *PluginInstanceAction) GetState() PluginInstanceAction_State {
	if x != nil {
		return x.State
	}
	return PluginInstanceAction_STATE_UNSPECIFIED
}

func (x *PluginInstanceAction) GetScheduleCronExpression() string {
	if x != nil {
		return x.ScheduleCronExpression
	}
	return ""
}

func (x *PluginInstanceAction) GetCurationConfig() *CurationConfig {
	if x != nil {
		return x.CurationConfig
	}
	return nil
}

func (x *PluginInstanceAction) GetScheduleTimeZone() string {
	if x != nil {
		return x.ScheduleTimeZone
	}
	return ""
}

func (x *PluginInstanceAction) GetServiceAccount() string {
	if x != nil {
		return x.ServiceAccount
	}
	return ""
}

func (x *PluginInstanceAction) GetResourceConfig() *PluginInstanceAction_ResourceConfig {
	if x != nil {
		return x.ResourceConfig
	}
	return nil
}

type isPluginInstanceAction_ActionStatus interface {
	isPluginInstanceAction_ActionStatus()
}

type PluginInstanceAction_HubInstanceAction struct {
	// Optional. The execution information for the plugin instance action done
	// corresponding to an API hub instance.
	HubInstanceAction *ExecutionStatus `protobuf:"bytes,6,opt,name=hub_instance_action,json=hubInstanceAction,proto3,oneof"`
}

func (*PluginInstanceAction_HubInstanceAction) isPluginInstanceAction_ActionStatus() {}

// Represents a plugin instance resource in the API Hub.
// A PluginInstance is a specific instance of a hub plugin with its own
// configuration, state, and execution details.
type PluginInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier. The unique name of the plugin instance resource.
	// Format:
	// `projects/{project}/locations/{location}/plugins/{plugin}/instances/{instance}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Required. The display name for this plugin instance. Max length is 255
	// characters.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Optional. The authentication information for this plugin instance.
	AuthConfig *AuthConfig `protobuf:"bytes,3,opt,name=auth_config,json=authConfig,proto3" json:"auth_config,omitempty"`
	// Optional. The additional information for this plugin instance corresponding
	// to the additional config template of the plugin. This information will be
	// sent to plugin hosting service on each call to plugin hosted service. The
	// key will be the config_variable_template.display_name to uniquely identify
	// the config variable.
	AdditionalConfig map[string]*ConfigVariable `protobuf:"bytes,4,rep,name=additional_config,json=additionalConfig,proto3" json:"additional_config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Output only. The current state of the plugin instance (e.g., enabled,
	// disabled, provisioning).
	State PluginInstance_State `protobuf:"varint,5,opt,name=state,proto3,enum=google.cloud.apihub.v1.PluginInstance_State" json:"state,omitempty"`
	// Output only. Error message describing the failure, if any, during Create,
	// Delete or ApplyConfig operation corresponding to the plugin instance.This
	// field will only be populated if the plugin instance is in the ERROR or
	// FAILED state.
	ErrorMessage string `protobuf:"bytes,6,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// Required. The action status for the plugin instance.
	Actions []*PluginInstanceAction `protobuf:"bytes,7,rep,name=actions,proto3" json:"actions,omitempty"`
	// Output only. Timestamp indicating when the plugin instance was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. Timestamp indicating when the plugin instance was last
	// updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Optional. The source project id of the plugin instance. This will be the id
	// of runtime project in case of gcp based plugins and org id in case of non
	// gcp based plugins. This field will be a required field for Google provided
	// on-ramp plugins.
	SourceProjectId string `protobuf:"bytes,11,opt,name=source_project_id,json=sourceProjectId,proto3" json:"source_project_id,omitempty"`
}

func (x *PluginInstance) Reset() {
	*x = PluginInstance{}
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PluginInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginInstance) ProtoMessage() {}

func (x *PluginInstance) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginInstance.ProtoReflect.Descriptor instead.
func (*PluginInstance) Descriptor() ([]byte, []int) {
	return file_google_cloud_apihub_v1_plugin_service_proto_rawDescGZIP(), []int{6}
}

func (x *PluginInstance) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PluginInstance) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *PluginInstance) GetAuthConfig() *AuthConfig {
	if x != nil {
		return x.AuthConfig
	}
	return nil
}

func (x *PluginInstance) GetAdditionalConfig() map[string]*ConfigVariable {
	if x != nil {
		return x.AdditionalConfig
	}
	return nil
}

func (x *PluginInstance) GetState() PluginInstance_State {
	if x != nil {
		return x.State
	}
	return PluginInstance_STATE_UNSPECIFIED
}

func (x *PluginInstance) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *PluginInstance) GetActions() []*PluginInstanceAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *PluginInstance) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *PluginInstance) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *PluginInstance) GetSourceProjectId() string {
	if x != nil {
		return x.SourceProjectId
	}
	return ""
}

// The curation information for this plugin instance.
type CurationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The curation information for this plugin instance.
	//
	// Types that are assignable to CurationConfig:
	//
	//	*CurationConfig_CustomCuration_
	CurationConfig isCurationConfig_CurationConfig `protobuf_oneof:"curation_config"`
	// Required. The curation type for this plugin instance.
	CurationType CurationType `protobuf:"varint,1,opt,name=curation_type,json=curationType,proto3,enum=google.cloud.apihub.v1.CurationType" json:"curation_type,omitempty"`
}

func (x *CurationConfig) Reset() {
	*x = CurationConfig{}
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CurationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurationConfig) ProtoMessage() {}

func (x *CurationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurationConfig.ProtoReflect.Descriptor instead.
func (*CurationConfig) Descriptor() ([]byte, []int) {
	return file_google_cloud_apihub_v1_plugin_service_proto_rawDescGZIP(), []int{7}
}

func (m *CurationConfig) GetCurationConfig() isCurationConfig_CurationConfig {
	if m != nil {
		return m.CurationConfig
	}
	return nil
}

func (x *CurationConfig) GetCustomCuration() *CurationConfig_CustomCuration {
	if x, ok := x.GetCurationConfig().(*CurationConfig_CustomCuration_); ok {
		return x.CustomCuration
	}
	return nil
}

func (x *CurationConfig) GetCurationType() CurationType {
	if x != nil {
		return x.CurationType
	}
	return CurationType_CURATION_TYPE_UNSPECIFIED
}

type isCurationConfig_CurationConfig interface {
	isCurationConfig_CurationConfig()
}

type CurationConfig_CustomCuration_ struct {
	// Optional. Custom curation information for this plugin instance.
	CustomCuration *CurationConfig_CustomCuration `protobuf:"bytes,2,opt,name=custom_curation,json=customCuration,proto3,oneof"`
}

func (*CurationConfig_CustomCuration_) isCurationConfig_CurationConfig() {}

// The execution status for the plugin instance.
type ExecutionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The current state of the execution.
	CurrentExecutionState ExecutionStatus_CurrentExecutionState `protobuf:"varint,1,opt,name=current_execution_state,json=currentExecutionState,proto3,enum=google.cloud.apihub.v1.ExecutionStatus_CurrentExecutionState" json:"current_execution_state,omitempty"`
	// Output only. The last execution of the plugin instance.
	LastExecution *ExecutionStatus_LastExecution `protobuf:"bytes,2,opt,name=last_execution,json=lastExecution,proto3" json:"last_execution,omitempty"`
}

func (x *ExecutionStatus) Reset() {
	*x = ExecutionStatus{}
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionStatus) ProtoMessage() {}

func (x *ExecutionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionStatus.ProtoReflect.Descriptor instead.
func (*ExecutionStatus) Descriptor() ([]byte, []int) {
	return file_google_cloud_apihub_v1_plugin_service_proto_rawDescGZIP(), []int{8}
}

func (x *ExecutionStatus) GetCurrentExecutionState() ExecutionStatus_CurrentExecutionState {
	if x != nil {
		return x.CurrentExecutionState
	}
	return ExecutionStatus_CURRENT_EXECUTION_STATE_UNSPECIFIED
}

func (x *ExecutionStatus) GetLastExecution() *ExecutionStatus_LastExecution {
	if x != nil {
		return x.LastExecution
	}
	return nil
}

// The [CreatePlugin][google.cloud.apihub.v1.ApiHubPlugin.CreatePlugin] method's
// request.
type CreatePluginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent resource where this plugin will be created.
	// Format: `projects/{project}/locations/{location}`.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Optional. The ID to use for the Plugin resource, which will become the
	// final component of the Plugin's resource name. This field is optional.
	//
	// * If provided, the same will be used. The service will throw an error if
	// the specified id is already used by another Plugin resource in the API hub
	// instance.
	// * If not provided, a system generated id will be used.
	//
	// This value should be 4-63 characters, overall resource name which will be
	// of format
	// `projects/{project}/locations/{location}/plugins/{plugin}`,
	// its length is limited to 1000 characters and valid characters are
	// /[a-z][A-Z][0-9]-_/.
	PluginId string `protobuf:"bytes,2,opt,name=plugin_id,json=pluginId,proto3" json:"plugin_id,omitempty"`
	// Required. The plugin to create.
	Plugin *Plugin `protobuf:"bytes,3,opt,name=plugin,proto3" json:"plugin,omitempty"`
}

func (x *CreatePluginRequest) Reset() {
	*x = CreatePluginRequest{}
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePluginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePluginRequest) ProtoMessage() {}

func (x *CreatePluginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePluginRequest.ProtoReflect.Descriptor instead.
func (*CreatePluginRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_apihub_v1_plugin_service_proto_rawDescGZIP(), []int{9}
}

func (x *CreatePluginRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreatePluginRequest) GetPluginId() string {
	if x != nil {
		return x.PluginId
	}
	return ""
}

func (x *CreatePluginRequest) GetPlugin() *Plugin {
	if x != nil {
		return x.Plugin
	}
	return nil
}

// The [DeletePlugin][ApiHub.DeletePlugin] method's request.
type DeletePluginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the Plugin resource to delete.
	// Format: `projects/{project}/locations/{location}/plugins/{plugin}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeletePluginRequest) Reset() {
	*x = DeletePluginRequest{}
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeletePluginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePluginRequest) ProtoMessage() {}

func (x *DeletePluginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePluginRequest.ProtoReflect.Descriptor instead.
func (*DeletePluginRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_apihub_v1_plugin_service_proto_rawDescGZIP(), []int{10}
}

func (x *DeletePluginRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// The [ListPlugins][google.cloud.apihub.v1.ApiHubPlugin.ListPlugins] method's
// request.
type ListPluginsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent resource where this plugin will be created.
	// Format: `projects/{project}/locations/{location}`.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Optional. An expression that filters the list of plugins.
	//
	// A filter expression consists of a field name, a comparison
	// operator, and a value for filtering. The value must be a string. The
	// comparison operator must be one of: `<`, `>` or
	// `=`. Filters are not case sensitive.
	//
	// The following fields in the `Plugins` are eligible for filtering:
	//
	//   - `plugin_category` - The category of the Plugin. Allowed
	//     comparison operators: `=`.
	//
	// Expressions are combined with either `AND` logic operator or `OR` logical
	// operator but not both of them together i.e. only one of the `AND` or `OR`
	// operator can be used throughout the filter string and both the operators
	// cannot be used together. No other logical operators are
	// supported. At most three filter fields are allowed in the filter
	// string and if provided more than that then `INVALID_ARGUMENT` error is
	// returned by the API.
	// Here are a few examples:
	//
	//   - `plugin_category = ON_RAMP` - The plugin is of category
	//     on ramp.
	Filter string `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	// Optional. The maximum number of hub plugins to return. The service may
	// return fewer than this value. If unspecified, at most 50 hub plugins will
	// be returned. The maximum value is 1000; values above 1000 will be coerced
	// to 1000.
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Optional. A page token, received from a previous `ListPlugins` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters (except page_size) provided to
	// `ListPlugins` must match the call that provided the page token.
	PageToken string `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListPluginsRequest) Reset() {
	*x = ListPluginsRequest{}
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPluginsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPluginsRequest) ProtoMessage() {}

func (x *ListPluginsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPluginsRequest.ProtoReflect.Descriptor instead.
func (*ListPluginsRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_apihub_v1_plugin_service_proto_rawDescGZIP(), []int{11}
}

func (x *ListPluginsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListPluginsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListPluginsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListPluginsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// The [ListPlugins][google.cloud.apihub.v1.ApiHubPlugin.ListPlugins] method's
// response.
type ListPluginsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The plugins from the specified parent resource.
	Plugins []*Plugin `protobuf:"bytes,1,rep,name=plugins,proto3" json:"plugins,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListPluginsResponse) Reset() {
	*x = ListPluginsResponse{}
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPluginsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPluginsResponse) ProtoMessage() {}

func (x *ListPluginsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPluginsResponse.ProtoReflect.Descriptor instead.
func (*ListPluginsResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_apihub_v1_plugin_service_proto_rawDescGZIP(), []int{12}
}

func (x *ListPluginsResponse) GetPlugins() []*Plugin {
	if x != nil {
		return x.Plugins
	}
	return nil
}

func (x *ListPluginsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// The
// [CreatePluginInstance][google.cloud.apihub.v1.ApiHubPlugin.CreatePluginInstance]
// method's request.
type CreatePluginInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent of the plugin instance resource.
	// Format: `projects/{project}/locations/{location}/plugins/{plugin}`
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Optional. The ID to use for the plugin instance, which will become the
	// final component of the plugin instance's resource name. This field is
	// optional.
	//
	// * If provided, the same will be used. The service will throw an error if
	// the specified id is already used by another plugin instance in the plugin
	// resource.
	// * If not provided, a system generated id will be used.
	//
	// This value should be 4-63 characters, and valid characters
	// are /[a-z][A-Z][0-9]-_/.
	PluginInstanceId string `protobuf:"bytes,2,opt,name=plugin_instance_id,json=pluginInstanceId,proto3" json:"plugin_instance_id,omitempty"`
	// Required. The plugin instance to create.
	PluginInstance *PluginInstance `protobuf:"bytes,3,opt,name=plugin_instance,json=pluginInstance,proto3" json:"plugin_instance,omitempty"`
}

func (x *CreatePluginInstanceRequest) Reset() {
	*x = CreatePluginInstanceRequest{}
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePluginInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePluginInstanceRequest) ProtoMessage() {}

func (x *CreatePluginInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePluginInstanceRequest.ProtoReflect.Descriptor instead.
func (*CreatePluginInstanceRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_apihub_v1_plugin_service_proto_rawDescGZIP(), []int{13}
}

func (x *CreatePluginInstanceRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreatePluginInstanceRequest) GetPluginInstanceId() string {
	if x != nil {
		return x.PluginInstanceId
	}
	return ""
}

func (x *CreatePluginInstanceRequest) GetPluginInstance() *PluginInstance {
	if x != nil {
		return x.PluginInstance
	}
	return nil
}

// The
// [ExecutePluginInstanceAction][google.cloud.apihub.v1.ApiHubPlugin.ExecutePluginInstanceAction]
// method's request.
type ExecutePluginInstanceActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the plugin instance to execute.
	// Format:
	// `projects/{project}/locations/{location}/plugins/{plugin}/instances/{instance}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Required. The execution details for the action to execute.
	ActionExecutionDetail *ActionExecutionDetail `protobuf:"bytes,2,opt,name=action_execution_detail,json=actionExecutionDetail,proto3" json:"action_execution_detail,omitempty"`
}

func (x *ExecutePluginInstanceActionRequest) Reset() {
	*x = ExecutePluginInstanceActionRequest{}
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutePluginInstanceActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutePluginInstanceActionRequest) ProtoMessage() {}

func (x *ExecutePluginInstanceActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutePluginInstanceActionRequest.ProtoReflect.Descriptor instead.
func (*ExecutePluginInstanceActionRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_apihub_v1_plugin_service_proto_rawDescGZIP(), []int{14}
}

func (x *ExecutePluginInstanceActionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExecutePluginInstanceActionRequest) GetActionExecutionDetail() *ActionExecutionDetail {
	if x != nil {
		return x.ActionExecutionDetail
	}
	return nil
}

// The details for the action to execute.
type ActionExecutionDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The action id of the plugin to execute.
	ActionId string `protobuf:"bytes,1,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
}

func (x *ActionExecutionDetail) Reset() {
	*x = ActionExecutionDetail{}
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionExecutionDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionExecutionDetail) ProtoMessage() {}

func (x *ActionExecutionDetail) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionExecutionDetail.ProtoReflect.Descriptor instead.
func (*ActionExecutionDetail) Descriptor() ([]byte, []int) {
	return file_google_cloud_apihub_v1_plugin_service_proto_rawDescGZIP(), []int{15}
}

func (x *ActionExecutionDetail) GetActionId() string {
	if x != nil {
		return x.ActionId
	}
	return ""
}

// The
// [ExecutePluginInstanceAction][google.cloud.apihub.v1.ApiHubPlugin.ExecutePluginInstanceAction]
// method's response.
type ExecutePluginInstanceActionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExecutePluginInstanceActionResponse) Reset() {
	*x = ExecutePluginInstanceActionResponse{}
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutePluginInstanceActionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutePluginInstanceActionResponse) ProtoMessage() {}

func (x *ExecutePluginInstanceActionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutePluginInstanceActionResponse.ProtoReflect.Descriptor instead.
func (*ExecutePluginInstanceActionResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_apihub_v1_plugin_service_proto_rawDescGZIP(), []int{16}
}

// The
// [GetPluginInstance][google.cloud.apihub.v1.ApiHubPlugin.GetPluginInstance]
// method's request.
type GetPluginInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the plugin instance to retrieve.
	// Format:
	// `projects/{project}/locations/{location}/plugins/{plugin}/instances/{instance}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetPluginInstanceRequest) Reset() {
	*x = GetPluginInstanceRequest{}
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPluginInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPluginInstanceRequest) ProtoMessage() {}

func (x *GetPluginInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPluginInstanceRequest.ProtoReflect.Descriptor instead.
func (*GetPluginInstanceRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_apihub_v1_plugin_service_proto_rawDescGZIP(), []int{17}
}

func (x *GetPluginInstanceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// The
// [ListPluginInstances][google.cloud.apihub.v1.ApiHubPlugin.ListPluginInstances]
// method's request.
type ListPluginInstancesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent resource where this plugin will be created.
	// Format: `projects/{project}/locations/{location}/plugins/{plugin}`.
	// To list plugin instances for multiple plugins,
	// use the - character instead of the plugin ID.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Optional. An expression that filters the list of plugin instances.
	//
	// A filter expression consists of a field name, a comparison
	// operator, and a value for filtering. The value must be a string. The
	// comparison operator must be one of: `<`, `>` or
	// `=`. Filters are not case sensitive.
	//
	// The following fields in the `PluginInstances` are eligible for filtering:
	//
	//   - `state` - The state of the Plugin Instance. Allowed
	//     comparison operators: `=`.
	//
	// A filter function is also supported in the filter string. The filter
	// function is `id(name)`. The `id(name)` function returns the id of the
	// resource name. For example, `id(name) = \"plugin-instance-1\"` is
	// equivalent to `name =
	// \"projects/test-project-id/locations/test-location-id/plugins/plugin-1/instances/plugin-instance-1\"`
	// provided the parent is
	// `projects/test-project-id/locations/test-location-id/plugins/plugin-1`.
	//
	// Expressions are combined with either `AND` logic operator or `OR` logical
	// operator but not both of them together i.e. only one of the `AND` or `OR`
	// operator can be used throughout the filter string and both the operators
	// cannot be used together. No other logical operators are
	// supported. At most three filter fields are allowed in the filter
	// string and if provided more than that then `INVALID_ARGUMENT` error is
	// returned by the API.
	// Here are a few examples:
	//
	//   - `state = ENABLED` - The plugin instance is in enabled state.
	Filter string `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	// Optional. The maximum number of hub plugins to return. The service may
	// return fewer than this value. If unspecified, at most 50 hub plugins will
	// be returned. The maximum value is 1000; values above 1000 will be coerced
	// to 1000.
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Optional. A page token, received from a previous `ListPluginInstances`
	// call. Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListPluginInstances`
	// must match the call that provided the page token.
	PageToken string `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListPluginInstancesRequest) Reset() {
	*x = ListPluginInstancesRequest{}
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPluginInstancesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPluginInstancesRequest) ProtoMessage() {}

func (x *ListPluginInstancesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPluginInstancesRequest.ProtoReflect.Descriptor instead.
func (*ListPluginInstancesRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_apihub_v1_plugin_service_proto_rawDescGZIP(), []int{18}
}

func (x *ListPluginInstancesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListPluginInstancesRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListPluginInstancesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListPluginInstancesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// The
// [ListPluginInstances][google.cloud.apihub.v1.ApiHubPlugin.ListPluginInstances]
// method's response.
type ListPluginInstancesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The plugin instances from the specified parent resource.
	PluginInstances []*PluginInstance `protobuf:"bytes,1,rep,name=plugin_instances,json=pluginInstances,proto3" json:"plugin_instances,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListPluginInstancesResponse) Reset() {
	*x = ListPluginInstancesResponse{}
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPluginInstancesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPluginInstancesResponse) ProtoMessage() {}

func (x *ListPluginInstancesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPluginInstancesResponse.ProtoReflect.Descriptor instead.
func (*ListPluginInstancesResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_apihub_v1_plugin_service_proto_rawDescGZIP(), []int{19}
}

func (x *ListPluginInstancesResponse) GetPluginInstances() []*PluginInstance {
	if x != nil {
		return x.PluginInstances
	}
	return nil
}

func (x *ListPluginInstancesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// The
// [EnablePluginInstanceAction][google.cloud.apihub.v1.ApiHubPlugin.EnablePluginInstanceAction]
// method's request.
type EnablePluginInstanceActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the plugin instance to enable.
	// Format:
	// `projects/{project}/locations/{location}/plugins/{plugin}/instances/{instance}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Required. The action id to enable.
	ActionId string `protobuf:"bytes,2,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
}

func (x *EnablePluginInstanceActionRequest) Reset() {
	*x = EnablePluginInstanceActionRequest{}
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnablePluginInstanceActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnablePluginInstanceActionRequest) ProtoMessage() {}

func (x *EnablePluginInstanceActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnablePluginInstanceActionRequest.ProtoReflect.Descriptor instead.
func (*EnablePluginInstanceActionRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_apihub_v1_plugin_service_proto_rawDescGZIP(), []int{20}
}

func (x *EnablePluginInstanceActionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EnablePluginInstanceActionRequest) GetActionId() string {
	if x != nil {
		return x.ActionId
	}
	return ""
}

// The
// [EnablePluginInstanceAction][google.cloud.apihub.v1.ApiHubPlugin.EnablePluginInstanceAction]
// method's response.
type EnablePluginInstanceActionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EnablePluginInstanceActionResponse) Reset() {
	*x = EnablePluginInstanceActionResponse{}
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnablePluginInstanceActionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnablePluginInstanceActionResponse) ProtoMessage() {}

func (x *EnablePluginInstanceActionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnablePluginInstanceActionResponse.ProtoReflect.Descriptor instead.
func (*EnablePluginInstanceActionResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_apihub_v1_plugin_service_proto_rawDescGZIP(), []int{21}
}

// The
// [DisablePluginInstanceAction][google.cloud.apihub.v1.ApiHubPlugin.DisablePluginInstanceAction]
// method's request.
type DisablePluginInstanceActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the plugin instance to disable.
	// Format:
	// `projects/{project}/locations/{location}/plugins/{plugin}/instances/{instance}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Required. The action id to disable.
	ActionId string `protobuf:"bytes,2,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
}

func (x *DisablePluginInstanceActionRequest) Reset() {
	*x = DisablePluginInstanceActionRequest{}
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisablePluginInstanceActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisablePluginInstanceActionRequest) ProtoMessage() {}

func (x *DisablePluginInstanceActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisablePluginInstanceActionRequest.ProtoReflect.Descriptor instead.
func (*DisablePluginInstanceActionRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_apihub_v1_plugin_service_proto_rawDescGZIP(), []int{22}
}

func (x *DisablePluginInstanceActionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DisablePluginInstanceActionRequest) GetActionId() string {
	if x != nil {
		return x.ActionId
	}
	return ""
}

// The
// [DisablePluginInstanceAction][google.cloud.apihub.v1.ApiHubPlugin.DisablePluginInstanceAction]
// method's response.
type DisablePluginInstanceActionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DisablePluginInstanceActionResponse) Reset() {
	*x = DisablePluginInstanceActionResponse{}
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisablePluginInstanceActionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisablePluginInstanceActionResponse) ProtoMessage() {}

func (x *DisablePluginInstanceActionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisablePluginInstanceActionResponse.ProtoReflect.Descriptor instead.
func (*DisablePluginInstanceActionResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_apihub_v1_plugin_service_proto_rawDescGZIP(), []int{23}
}

// The
// [UpdatePluginInstance][google.cloud.apihub.v1.ApiHubPlugin.UpdatePluginInstance]
// method's request.
type UpdatePluginInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The plugin instance to update.
	PluginInstance *PluginInstance `protobuf:"bytes,1,opt,name=plugin_instance,json=pluginInstance,proto3" json:"plugin_instance,omitempty"`
	// Optional. The list of fields to update.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdatePluginInstanceRequest) Reset() {
	*x = UpdatePluginInstanceRequest{}
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePluginInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePluginInstanceRequest) ProtoMessage() {}

func (x *UpdatePluginInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePluginInstanceRequest.ProtoReflect.Descriptor instead.
func (*UpdatePluginInstanceRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_apihub_v1_plugin_service_proto_rawDescGZIP(), []int{24}
}

func (x *UpdatePluginInstanceRequest) GetPluginInstance() *PluginInstance {
	if x != nil {
		return x.PluginInstance
	}
	return nil
}

func (x *UpdatePluginInstanceRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// The
// [DeletePluginInstance][google.cloud.apihub.v1.ApiHubPlugin.DeletePluginInstance]
// method's request.
type DeletePluginInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the plugin instance to delete.
	// Format:
	// `projects/{project}/locations/{location}/plugins/{plugin}/instances/{instance}`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeletePluginInstanceRequest) Reset() {
	*x = DeletePluginInstanceRequest{}
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeletePluginInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePluginInstanceRequest) ProtoMessage() {}

func (x *DeletePluginInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePluginInstanceRequest.ProtoReflect.Descriptor instead.
func (*DeletePluginInstanceRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_apihub_v1_plugin_service_proto_rawDescGZIP(), []int{25}
}

func (x *DeletePluginInstanceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// The information related to the service implemented by the plugin
// developer, used to invoke the plugin's functionality.
type Plugin_HostingService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The URI of the service implemented by the plugin developer,
	// used to invoke the plugin's functionality. This information is only
	// required for user defined plugins.
	ServiceUri string `protobuf:"bytes,1,opt,name=service_uri,json=serviceUri,proto3" json:"service_uri,omitempty"`
}

func (x *Plugin_HostingService) Reset() {
	*x = Plugin_HostingService{}
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Plugin_HostingService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Plugin_HostingService) ProtoMessage() {}

func (x *Plugin_HostingService) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Plugin_HostingService.ProtoReflect.Descriptor instead.
func (*Plugin_HostingService) Descriptor() ([]byte, []int) {
	return file_google_cloud_apihub_v1_plugin_service_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Plugin_HostingService) GetServiceUri() string {
	if x != nil {
		return x.ServiceUri
	}
	return ""
}

// ConfigTemplate represents the configuration template for a plugin.
type Plugin_ConfigTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The authentication template for the plugin.
	AuthConfigTemplate *Plugin_ConfigTemplate_AuthConfigTemplate `protobuf:"bytes,1,opt,name=auth_config_template,json=authConfigTemplate,proto3" json:"auth_config_template,omitempty"`
	// Optional. The list of additional configuration variables for the plugin's
	// configuration.
	AdditionalConfigTemplate []*ConfigVariableTemplate `protobuf:"bytes,2,rep,name=additional_config_template,json=additionalConfigTemplate,proto3" json:"additional_config_template,omitempty"`
}

func (x *Plugin_ConfigTemplate) Reset() {
	*x = Plugin_ConfigTemplate{}
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Plugin_ConfigTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Plugin_ConfigTemplate) ProtoMessage() {}

func (x *Plugin_ConfigTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Plugin_ConfigTemplate.ProtoReflect.Descriptor instead.
func (*Plugin_ConfigTemplate) Descriptor() ([]byte, []int) {
	return file_google_cloud_apihub_v1_plugin_service_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Plugin_ConfigTemplate) GetAuthConfigTemplate() *Plugin_ConfigTemplate_AuthConfigTemplate {
	if x != nil {
		return x.AuthConfigTemplate
	}
	return nil
}

func (x *Plugin_ConfigTemplate) GetAdditionalConfigTemplate() []*ConfigVariableTemplate {
	if x != nil {
		return x.AdditionalConfigTemplate
	}
	return nil
}

// AuthConfigTemplate represents the authentication template for a plugin.
type Plugin_ConfigTemplate_AuthConfigTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The list of authentication types supported by the plugin.
	SupportedAuthTypes []AuthType `protobuf:"varint,1,rep,packed,name=supported_auth_types,json=supportedAuthTypes,proto3,enum=google.cloud.apihub.v1.AuthType" json:"supported_auth_types,omitempty"`
	// Optional. The service account of the plugin hosting service.
	// This service account should be granted the required permissions on the
	// Auth Config parameters provided while creating the plugin instances
	// corresponding to this plugin.
	//
	// For example, if the plugin instance auth config requires a secret
	// manager secret, the service account should be granted the
	// secretmanager.versions.access permission on the corresponding secret,
	// if the plugin instance auth config contains a service account, the
	// service account should be granted the
	// iam.serviceAccounts.getAccessToken permission on the corresponding
	// service account.
	ServiceAccount *GoogleServiceAccountConfig `protobuf:"bytes,2,opt,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty"`
}

func (x *Plugin_ConfigTemplate_AuthConfigTemplate) Reset() {
	*x = Plugin_ConfigTemplate_AuthConfigTemplate{}
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Plugin_ConfigTemplate_AuthConfigTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Plugin_ConfigTemplate_AuthConfigTemplate) ProtoMessage() {}

func (x *Plugin_ConfigTemplate_AuthConfigTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Plugin_ConfigTemplate_AuthConfigTemplate.ProtoReflect.Descriptor instead.
func (*Plugin_ConfigTemplate_AuthConfigTemplate) Descriptor() ([]byte, []int) {
	return file_google_cloud_apihub_v1_plugin_service_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *Plugin_ConfigTemplate_AuthConfigTemplate) GetSupportedAuthTypes() []AuthType {
	if x != nil {
		return x.SupportedAuthTypes
	}
	return nil
}

func (x *Plugin_ConfigTemplate_AuthConfigTemplate) GetServiceAccount() *GoogleServiceAccountConfig {
	if x != nil {
		return x.ServiceAccount
	}
	return nil
}

// The configuration of resources created for a given plugin instance action.
type PluginInstanceAction_ResourceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The type of the action.
	ActionType ActionType `protobuf:"varint,1,opt,name=action_type,json=actionType,proto3,enum=google.cloud.apihub.v1.ActionType" json:"action_type,omitempty"`
	// Output only. The pubsub topic to publish the data to. Format is
	// projects/{project}/topics/{topic}
	PubsubTopic string `protobuf:"bytes,2,opt,name=pubsub_topic,json=pubsubTopic,proto3" json:"pubsub_topic,omitempty"`
}

func (x *PluginInstanceAction_ResourceConfig) Reset() {
	*x = PluginInstanceAction_ResourceConfig{}
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PluginInstanceAction_ResourceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginInstanceAction_ResourceConfig) ProtoMessage() {}

func (x *PluginInstanceAction_ResourceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginInstanceAction_ResourceConfig.ProtoReflect.Descriptor instead.
func (*PluginInstanceAction_ResourceConfig) Descriptor() ([]byte, []int) {
	return file_google_cloud_apihub_v1_plugin_service_proto_rawDescGZIP(), []int{5, 0}
}

func (x *PluginInstanceAction_ResourceConfig) GetActionType() ActionType {
	if x != nil {
		return x.ActionType
	}
	return ActionType_ACTION_TYPE_UNSPECIFIED
}

func (x *PluginInstanceAction_ResourceConfig) GetPubsubTopic() string {
	if x != nil {
		return x.PubsubTopic
	}
	return ""
}

// Custom curation information for this plugin instance.
type CurationConfig_CustomCuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The unique name of the curation resource. This will be the name
	// of the curation resource in the format:
	// `projects/{project}/locations/{location}/curations/{curation}`
	Curation string `protobuf:"bytes,1,opt,name=curation,proto3" json:"curation,omitempty"`
}

func (x *CurationConfig_CustomCuration) Reset() {
	*x = CurationConfig_CustomCuration{}
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CurationConfig_CustomCuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurationConfig_CustomCuration) ProtoMessage() {}

func (x *CurationConfig_CustomCuration) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurationConfig_CustomCuration.ProtoReflect.Descriptor instead.
func (*CurationConfig_CustomCuration) Descriptor() ([]byte, []int) {
	return file_google_cloud_apihub_v1_plugin_service_proto_rawDescGZIP(), []int{7, 0}
}

func (x *CurationConfig_CustomCuration) GetCuration() string {
	if x != nil {
		return x.Curation
	}
	return ""
}

// The result of the last execution of the plugin instance.
type ExecutionStatus_LastExecution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The result of the last execution of the plugin instance.
	Result ExecutionStatus_LastExecution_Result `protobuf:"varint,1,opt,name=result,proto3,enum=google.cloud.apihub.v1.ExecutionStatus_LastExecution_Result" json:"result,omitempty"`
	// Output only. Error message describing the failure, if any, during the
	// last execution.
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// Output only. The last execution start time of the plugin instance.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Output only. The last execution end time of the plugin instance.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *ExecutionStatus_LastExecution) Reset() {
	*x = ExecutionStatus_LastExecution{}
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutionStatus_LastExecution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionStatus_LastExecution) ProtoMessage() {}

func (x *ExecutionStatus_LastExecution) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionStatus_LastExecution.ProtoReflect.Descriptor instead.
func (*ExecutionStatus_LastExecution) Descriptor() ([]byte, []int) {
	return file_google_cloud_apihub_v1_plugin_service_proto_rawDescGZIP(), []int{8, 0}
}

func (x *ExecutionStatus_LastExecution) GetResult() ExecutionStatus_LastExecution_Result {
	if x != nil {
		return x.Result
	}
	return ExecutionStatus_LastExecution_RESULT_UNSPECIFIED
}

func (x *ExecutionStatus_LastExecution) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *ExecutionStatus_LastExecution) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ExecutionStatus_LastExecution) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

var File_google_cloud_apihub_v1_plugin_service_proto protoreflect.FileDescriptor

var file_google_cloud_apihub_v1_plugin_service_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61,
	0x70, 0x69, 0x68, 0x75, 0x62, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x68,
	0x75, 0x62, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x68, 0x75, 0x62, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x6c, 0x6f, 0x6e,
	0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdd, 0x0d, 0x0a, 0x06, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x08, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x58, 0x0a, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0d, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5b, 0x0a, 0x0f, 0x68, 0x6f, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x68, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x56, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x50,
	0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x54, 0x0a, 0x0f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x68, 0x75, 0x62, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x5b, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x1a, 0x36, 0x0a, 0x0e, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x72, 0x69, 0x1a, 0xce, 0x03, 0x0a,
	0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12,
	0x77, 0x0a, 0x14, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x12, 0x61, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x71, 0x0a, 0x1a, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x68,
	0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x18, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x1a, 0xcf, 0x01, 0x0a, 0x12,
	0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x12, 0x57, 0x0a, 0x14, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x12, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x60, 0x0a, 0x0f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x39, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49,
	0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x22, 0x51, 0x0a, 0x0d, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x57, 0x4e,
	0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x44, 0x10, 0x02, 0x3a, 0x6c, 0xea, 0x41, 0x69,
	0x0a, 0x1c, 0x61, 0x70, 0x69, 0x68, 0x75, 0x62, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x38,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f,
	0x7b, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x7d, 0x2a, 0x07, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x32, 0x06, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x22, 0xdc, 0x02, 0x0a, 0x12, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x68, 0x75, 0x62,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x6f,
	0x64, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x4d, 0x6f, 0x64, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x0b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x50, 0x49, 0x5f, 0x48, 0x55, 0x42, 0x5f, 0x4f, 0x4e,
	0x5f, 0x44, 0x45, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x10,
	0x01, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x50, 0x49, 0x5f, 0x48, 0x55, 0x42, 0x5f, 0x53, 0x43, 0x48,
	0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x10, 0x02, 0x12,
	0x17, 0x0a, 0x13, 0x4e, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x48, 0x55, 0x42, 0x5f, 0x4d,
	0x41, 0x4e, 0x41, 0x47, 0x45, 0x44, 0x10, 0x03, 0x22, 0x4c, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xe0, 0x41, 0x02, 0xfa,
	0x41, 0x1e, 0x0a, 0x1c, 0x61, 0x70, 0x69, 0x68, 0x75, 0x62, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4f, 0x0a, 0x13, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xe0, 0x41, 0x02,
	0xfa, 0x41, 0x1e, 0x0a, 0x1c, 0x61, 0x70, 0x69, 0x68, 0x75, 0x62, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x50, 0x0a, 0x14, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x38, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xe0,
	0x41, 0x02, 0xfa, 0x41, 0x1e, 0x0a, 0x1c, 0x61, 0x70, 0x69, 0x68, 0x75, 0x62, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc1, 0x06, 0x0a, 0x14, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x13, 0x68, 0x75, 0x62, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52,
	0x11, 0x68, 0x75, 0x62, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x18, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x63, 0x72, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x16, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x68, 0x75,
	0x62, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x31, 0x0a, 0x12, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x2c, 0x0a, 0x0f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x69, 0x0a, 0x0f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x1a, 0x82, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x48, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x68,
	0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x70, 0x75,
	0x62, 0x73, 0x75, 0x62, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x22, 0x61, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4e, 0x41,
	0x42, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x49, 0x4e, 0x47,
	0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x49, 0x4e, 0x47, 0x10,
	0x04, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x42, 0x0f, 0x0a, 0x0d,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xfe, 0x07,
	0x0a, 0x0e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x08, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x48, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x0a, 0x61, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6e, 0x0a, 0x11, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x10, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x47, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x68, 0x75, 0x62,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4b,
	0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2f, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x1a, 0x6b, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x68, 0x75, 0x62,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x72, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x50, 0x50, 0x4c, 0x59,
	0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10,
	0x06, 0x3a, 0x9a, 0x01, 0xea, 0x41, 0x96, 0x01, 0x0a, 0x24, 0x61, 0x70, 0x69, 0x68, 0x75, 0x62,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x4d,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f,
	0x7b, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2a, 0x0f, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x32, 0x0e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x8d,
	0x02, 0x0a, 0x0e, 0x43, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x65, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x68, 0x75, 0x62,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x43, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x31, 0x0a, 0x0e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x43, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x08, 0x63, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x63,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xa0,
	0x05, 0x0a, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x7a, 0x0a, 0x17, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x15, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x61,
	0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x4c, 0x61, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0xcd, 0x02, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4c, 0x61, 0x73,
	0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x28,
	0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x3b, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16,
	0x0a, 0x12, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45,
	0x44, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x02, 0x22, 0x5e, 0x0a, 0x15, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x23, 0x43, 0x55,
	0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10,
	0x02, 0x22, 0xb2, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xe0, 0x41, 0x02, 0xfa, 0x41,
	0x1e, 0x12, 0x1c, 0x61, 0x70, 0x69, 0x68, 0x75, 0x62, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x08, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x06, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x68, 0x75, 0x62, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x22, 0x4f, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xe0, 0x41, 0x02,
	0xfa, 0x41, 0x1e, 0x0a, 0x1c, 0x61, 0x70, 0x69, 0x68, 0x75, 0x62, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb5, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24,
	0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1e, 0x12, 0x1c, 0x61, 0x70, 0x69, 0x68, 0x75, 0x62, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x77, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x07, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xe4, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1e,
	0x0a, 0x1c, 0x61, 0x70, 0x69, 0x68, 0x75, 0x62, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x12, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x10, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x0f, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x0e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22,
	0xd2, 0x01, 0x0a, 0x22, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x26, 0x0a, 0x24, 0x61, 0x70,
	0x69, 0x68, 0x75, 0x62, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x6a, 0x0a, 0x17, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x68, 0x75, 0x62, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x15, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x22, 0x39, 0x0a, 0x15, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x20, 0x0a,
	0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0x25, 0x0a, 0x23, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5c, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x40, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2c, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x26, 0x0a, 0x24, 0x61, 0x70, 0x69, 0x68, 0x75, 0x62,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc5, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2c, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x26, 0x12, 0x24, 0x61, 0x70, 0x69,
	0x68, 0x75, 0x62, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x98, 0x01, 0x0a,
	0x1b, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x10,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0f,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x87, 0x01, 0x0a, 0x21, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xe0, 0x41, 0x02,
	0xfa, 0x41, 0x26, 0x0a, 0x24, 0x61, 0x70, 0x69, 0x68, 0x75, 0x62, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0x24, 0x0a, 0x22, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x22, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xe0, 0x41,
	0x02, 0xfa, 0x41, 0x26, 0x0a, 0x24, 0x61, 0x70, 0x69, 0x68, 0x75, 0x62, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0x25, 0x0a, 0x23, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb5, 0x01, 0x0a, 0x1b, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x0f, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x0e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73,
	0x6b, 0x22, 0x5f, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x40, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c,
	0xe0, 0x41, 0x02, 0xfa, 0x41, 0x26, 0x0a, 0x24, 0x61, 0x70, 0x69, 0x68, 0x75, 0x62, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x2a, 0x53, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x17, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x10, 0x01,
	0x12, 0x15, 0x0a, 0x11, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45,
	0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x02, 0x2a, 0xcc, 0x01, 0x0a, 0x0b, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x41, 0x54, 0x45, 0x57,
	0x41, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x50, 0x49, 0x47, 0x45, 0x45, 0x5f,
	0x58, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x48, 0x59, 0x42, 0x52, 0x49, 0x44, 0x10, 0x01, 0x12, 0x1c,
	0x0a, 0x18, 0x41, 0x50, 0x49, 0x47, 0x45, 0x45, 0x5f, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x50, 0x55,
	0x42, 0x4c, 0x49, 0x43, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19,
	0x41, 0x50, 0x49, 0x47, 0x45, 0x45, 0x5f, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x56,
	0x41, 0x54, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x43,
	0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59,
	0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x45, 0x4e, 0x44, 0x50,
	0x4f, 0x49, 0x4e, 0x54, 0x53, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x50, 0x49, 0x5f, 0x44,
	0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x53, 0x10, 0x07, 0x2a, 0x7a, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x55, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54,
	0x5f, 0x43, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x41, 0x50,
	0x49, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20,
	0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x43, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x46, 0x4f, 0x52, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41,
	0x10, 0x02, 0x32, 0x9f, 0x18, 0x0a, 0x0c, 0x41, 0x70, 0x69, 0x48, 0x75, 0x62, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x12, 0x91, 0x01, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x12, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x68, 0x75,
	0x62, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x22, 0x3a, 0xda, 0x41, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a,
	0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xa1, 0x01, 0x0a, 0x0c, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x68, 0x75, 0x62, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x22, 0x44, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x37, 0x3a, 0x01, 0x2a, 0x22, 0x32, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0xa4, 0x01, 0x0a, 0x0d,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x2c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x68, 0x75,
	0x62, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x22, 0x45, 0xda, 0x41, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x3a, 0x01, 0x2a, 0x22, 0x33, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0xb2, 0x01, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x12, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x22, 0x55, 0xda, 0x41, 0x17, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x2c, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2c, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x35, 0x3a, 0x06, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x22, 0x2b, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x12, 0xa4, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x3c, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2d, 0x12, 0x2b, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x12, 0xc3,
	0x01, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12,
	0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x67, 0xca, 0x41, 0x2a,
	0x0a, 0x15, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x11, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x2a, 0x2b, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x8f, 0x02, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x33, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67,
	0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xa2, 0x01, 0xca, 0x41, 0x23, 0x0a, 0x0e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x11, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xda, 0x41, 0x29, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x2c, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x2c, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4a, 0x3a, 0x0f, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x37, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x2a, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0xa5, 0x02, 0x0a, 0x1b, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67,
	0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xaa, 0x01, 0xca, 0x41, 0x38, 0x0a, 0x23, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x11, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xda,
	0x41, 0x1c, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x4a, 0x3a, 0x01, 0x2a, 0x22, 0x45, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x2f, 0x2a, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x7d,
	0x3a, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xb5,
	0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x46,
	0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x12, 0x37, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xc8, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x32,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x48, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x12, 0x37, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a,
	0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x12, 0x93, 0x02, 0x0a, 0x1a, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9a, 0x01, 0xca, 0x41, 0x37,
	0x0a, 0x22, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x11, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xda, 0x41, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x49, 0x3a, 0x01,
	0x2a, 0x22, 0x44, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x97, 0x02, 0x0a, 0x1b, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e,
	0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x9c, 0x01, 0xca, 0x41, 0x38, 0x0a, 0x23, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x11, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xda, 0x41, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4a, 0x3a, 0x01, 0x2a, 0x22, 0x45, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a,
	0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x2f, 0x2a, 0x7d, 0x3a, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0xf3, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x33, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x68, 0x75, 0x62,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x7e, 0xda, 0x41, 0x1b, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2c, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5a, 0x3a, 0x0f, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x32, 0x47,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a,
	0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xdf, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x68, 0x75, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c,
	0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x73, 0xca, 0x41, 0x2a, 0x0a, 0x15, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x11, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39,
	0x2a, 0x37, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x2a, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x1a, 0x49, 0xca, 0x41, 0x15, 0x61, 0x70,
	0x69, 0x68, 0x75, 0x62, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77,
	0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x42, 0xb4, 0x01, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x68, 0x75, 0x62,
	0x2e, 0x76, 0x31, 0x42, 0x12, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x61,
	0x70, 0x69, 0x68, 0x75, 0x62, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x68,
	0x75, 0x62, 0x70, 0x62, 0x3b, 0x61, 0x70, 0x69, 0x68, 0x75, 0x62, 0x70, 0x62, 0xaa, 0x02, 0x16,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x41, 0x70, 0x69,
	0x48, 0x75, 0x62, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x16, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5c,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x41, 0x70, 0x69, 0x48, 0x75, 0x62, 0x5c, 0x56, 0x31, 0xea,
	0x02, 0x19, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a,
	0x3a, 0x41, 0x70, 0x69, 0x48, 0x75, 0x62, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_apihub_v1_plugin_service_proto_rawDescOnce sync.Once
	file_google_cloud_apihub_v1_plugin_service_proto_rawDescData = file_google_cloud_apihub_v1_plugin_service_proto_rawDesc
)

func file_google_cloud_apihub_v1_plugin_service_proto_rawDescGZIP() []byte {
	file_google_cloud_apihub_v1_plugin_service_proto_rawDescOnce.Do(func() {
		file_google_cloud_apihub_v1_plugin_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_apihub_v1_plugin_service_proto_rawDescData)
	})
	return file_google_cloud_apihub_v1_plugin_service_proto_rawDescData
}

var file_google_cloud_apihub_v1_plugin_service_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_google_cloud_apihub_v1_plugin_service_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_google_cloud_apihub_v1_plugin_service_proto_goTypes = []any{
	(ActionType)(0),                                  // 0: google.cloud.apihub.v1.ActionType
	(GatewayType)(0),                                 // 1: google.cloud.apihub.v1.GatewayType
	(CurationType)(0),                                // 2: google.cloud.apihub.v1.CurationType
	(Plugin_State)(0),                                // 3: google.cloud.apihub.v1.Plugin.State
	(Plugin_OwnershipType)(0),                        // 4: google.cloud.apihub.v1.Plugin.OwnershipType
	(PluginActionConfig_TriggerMode)(0),              // 5: google.cloud.apihub.v1.PluginActionConfig.TriggerMode
	(PluginInstanceAction_State)(0),                  // 6: google.cloud.apihub.v1.PluginInstanceAction.State
	(PluginInstance_State)(0),                        // 7: google.cloud.apihub.v1.PluginInstance.State
	(ExecutionStatus_CurrentExecutionState)(0),       // 8: google.cloud.apihub.v1.ExecutionStatus.CurrentExecutionState
	(ExecutionStatus_LastExecution_Result)(0),        // 9: google.cloud.apihub.v1.ExecutionStatus.LastExecution.Result
	(*Plugin)(nil),                                   // 10: google.cloud.apihub.v1.Plugin
	(*PluginActionConfig)(nil),                       // 11: google.cloud.apihub.v1.PluginActionConfig
	(*GetPluginRequest)(nil),                         // 12: google.cloud.apihub.v1.GetPluginRequest
	(*EnablePluginRequest)(nil),                      // 13: google.cloud.apihub.v1.EnablePluginRequest
	(*DisablePluginRequest)(nil),                     // 14: google.cloud.apihub.v1.DisablePluginRequest
	(*PluginInstanceAction)(nil),                     // 15: google.cloud.apihub.v1.PluginInstanceAction
	(*PluginInstance)(nil),                           // 16: google.cloud.apihub.v1.PluginInstance
	(*CurationConfig)(nil),                           // 17: google.cloud.apihub.v1.CurationConfig
	(*ExecutionStatus)(nil),                          // 18: google.cloud.apihub.v1.ExecutionStatus
	(*CreatePluginRequest)(nil),                      // 19: google.cloud.apihub.v1.CreatePluginRequest
	(*DeletePluginRequest)(nil),                      // 20: google.cloud.apihub.v1.DeletePluginRequest
	(*ListPluginsRequest)(nil),                       // 21: google.cloud.apihub.v1.ListPluginsRequest
	(*ListPluginsResponse)(nil),                      // 22: google.cloud.apihub.v1.ListPluginsResponse
	(*CreatePluginInstanceRequest)(nil),              // 23: google.cloud.apihub.v1.CreatePluginInstanceRequest
	(*ExecutePluginInstanceActionRequest)(nil),       // 24: google.cloud.apihub.v1.ExecutePluginInstanceActionRequest
	(*ActionExecutionDetail)(nil),                    // 25: google.cloud.apihub.v1.ActionExecutionDetail
	(*ExecutePluginInstanceActionResponse)(nil),      // 26: google.cloud.apihub.v1.ExecutePluginInstanceActionResponse
	(*GetPluginInstanceRequest)(nil),                 // 27: google.cloud.apihub.v1.GetPluginInstanceRequest
	(*ListPluginInstancesRequest)(nil),               // 28: google.cloud.apihub.v1.ListPluginInstancesRequest
	(*ListPluginInstancesResponse)(nil),              // 29: google.cloud.apihub.v1.ListPluginInstancesResponse
	(*EnablePluginInstanceActionRequest)(nil),        // 30: google.cloud.apihub.v1.EnablePluginInstanceActionRequest
	(*EnablePluginInstanceActionResponse)(nil),       // 31: google.cloud.apihub.v1.EnablePluginInstanceActionResponse
	(*DisablePluginInstanceActionRequest)(nil),       // 32: google.cloud.apihub.v1.DisablePluginInstanceActionRequest
	(*DisablePluginInstanceActionResponse)(nil),      // 33: google.cloud.apihub.v1.DisablePluginInstanceActionResponse
	(*UpdatePluginInstanceRequest)(nil),              // 34: google.cloud.apihub.v1.UpdatePluginInstanceRequest
	(*DeletePluginInstanceRequest)(nil),              // 35: google.cloud.apihub.v1.DeletePluginInstanceRequest
	(*Plugin_HostingService)(nil),                    // 36: google.cloud.apihub.v1.Plugin.HostingService
	(*Plugin_ConfigTemplate)(nil),                    // 37: google.cloud.apihub.v1.Plugin.ConfigTemplate
	(*Plugin_ConfigTemplate_AuthConfigTemplate)(nil), // 38: google.cloud.apihub.v1.Plugin.ConfigTemplate.AuthConfigTemplate
	(*PluginInstanceAction_ResourceConfig)(nil),      // 39: google.cloud.apihub.v1.PluginInstanceAction.ResourceConfig
	nil,                                   // 40: google.cloud.apihub.v1.PluginInstance.AdditionalConfigEntry
	(*CurationConfig_CustomCuration)(nil), // 41: google.cloud.apihub.v1.CurationConfig.CustomCuration
	(*ExecutionStatus_LastExecution)(nil), // 42: google.cloud.apihub.v1.ExecutionStatus.LastExecution
	(*AttributeValues)(nil),               // 43: google.cloud.apihub.v1.AttributeValues
	(*Documentation)(nil),                 // 44: google.cloud.apihub.v1.Documentation
	(PluginCategory)(0),                   // 45: google.cloud.apihub.v1.PluginCategory
	(*timestamppb.Timestamp)(nil),         // 46: google.protobuf.Timestamp
	(*AuthConfig)(nil),                    // 47: google.cloud.apihub.v1.AuthConfig
	(*fieldmaskpb.FieldMask)(nil),         // 48: google.protobuf.FieldMask
	(*ConfigVariableTemplate)(nil),        // 49: google.cloud.apihub.v1.ConfigVariableTemplate
	(AuthType)(0),                         // 50: google.cloud.apihub.v1.AuthType
	(*GoogleServiceAccountConfig)(nil),    // 51: google.cloud.apihub.v1.GoogleServiceAccountConfig
	(*ConfigVariable)(nil),                // 52: google.cloud.apihub.v1.ConfigVariable
	(*longrunningpb.Operation)(nil),       // 53: google.longrunning.Operation
}
var file_google_cloud_apihub_v1_plugin_service_proto_depIdxs = []int32{
	43, // 0: google.cloud.apihub.v1.Plugin.type:type_name -> google.cloud.apihub.v1.AttributeValues
	3,  // 1: google.cloud.apihub.v1.Plugin.state:type_name -> google.cloud.apihub.v1.Plugin.State
	4,  // 2: google.cloud.apihub.v1.Plugin.ownership_type:type_name -> google.cloud.apihub.v1.Plugin.OwnershipType
	36, // 3: google.cloud.apihub.v1.Plugin.hosting_service:type_name -> google.cloud.apihub.v1.Plugin.HostingService
	11, // 4: google.cloud.apihub.v1.Plugin.actions_config:type_name -> google.cloud.apihub.v1.PluginActionConfig
	44, // 5: google.cloud.apihub.v1.Plugin.documentation:type_name -> google.cloud.apihub.v1.Documentation
	45, // 6: google.cloud.apihub.v1.Plugin.plugin_category:type_name -> google.cloud.apihub.v1.PluginCategory
	37, // 7: google.cloud.apihub.v1.Plugin.config_template:type_name -> google.cloud.apihub.v1.Plugin.ConfigTemplate
	46, // 8: google.cloud.apihub.v1.Plugin.create_time:type_name -> google.protobuf.Timestamp
	46, // 9: google.cloud.apihub.v1.Plugin.update_time:type_name -> google.protobuf.Timestamp
	1,  // 10: google.cloud.apihub.v1.Plugin.gateway_type:type_name -> google.cloud.apihub.v1.GatewayType
	5,  // 11: google.cloud.apihub.v1.PluginActionConfig.trigger_mode:type_name -> google.cloud.apihub.v1.PluginActionConfig.TriggerMode
	18, // 12: google.cloud.apihub.v1.PluginInstanceAction.hub_instance_action:type_name -> google.cloud.apihub.v1.ExecutionStatus
	6,  // 13: google.cloud.apihub.v1.PluginInstanceAction.state:type_name -> google.cloud.apihub.v1.PluginInstanceAction.State
	17, // 14: google.cloud.apihub.v1.PluginInstanceAction.curation_config:type_name -> google.cloud.apihub.v1.CurationConfig
	39, // 15: google.cloud.apihub.v1.PluginInstanceAction.resource_config:type_name -> google.cloud.apihub.v1.PluginInstanceAction.ResourceConfig
	47, // 16: google.cloud.apihub.v1.PluginInstance.auth_config:type_name -> google.cloud.apihub.v1.AuthConfig
	40, // 17: google.cloud.apihub.v1.PluginInstance.additional_config:type_name -> google.cloud.apihub.v1.PluginInstance.AdditionalConfigEntry
	7,  // 18: google.cloud.apihub.v1.PluginInstance.state:type_name -> google.cloud.apihub.v1.PluginInstance.State
	15, // 19: google.cloud.apihub.v1.PluginInstance.actions:type_name -> google.cloud.apihub.v1.PluginInstanceAction
	46, // 20: google.cloud.apihub.v1.PluginInstance.create_time:type_name -> google.protobuf.Timestamp
	46, // 21: google.cloud.apihub.v1.PluginInstance.update_time:type_name -> google.protobuf.Timestamp
	41, // 22: google.cloud.apihub.v1.CurationConfig.custom_curation:type_name -> google.cloud.apihub.v1.CurationConfig.CustomCuration
	2,  // 23: google.cloud.apihub.v1.CurationConfig.curation_type:type_name -> google.cloud.apihub.v1.CurationType
	8,  // 24: google.cloud.apihub.v1.ExecutionStatus.current_execution_state:type_name -> google.cloud.apihub.v1.ExecutionStatus.CurrentExecutionState
	42, // 25: google.cloud.apihub.v1.ExecutionStatus.last_execution:type_name -> google.cloud.apihub.v1.ExecutionStatus.LastExecution
	10, // 26: google.cloud.apihub.v1.CreatePluginRequest.plugin:type_name -> google.cloud.apihub.v1.Plugin
	10, // 27: google.cloud.apihub.v1.ListPluginsResponse.plugins:type_name -> google.cloud.apihub.v1.Plugin
	16, // 28: google.cloud.apihub.v1.CreatePluginInstanceRequest.plugin_instance:type_name -> google.cloud.apihub.v1.PluginInstance
	25, // 29: google.cloud.apihub.v1.ExecutePluginInstanceActionRequest.action_execution_detail:type_name -> google.cloud.apihub.v1.ActionExecutionDetail
	16, // 30: google.cloud.apihub.v1.ListPluginInstancesResponse.plugin_instances:type_name -> google.cloud.apihub.v1.PluginInstance
	16, // 31: google.cloud.apihub.v1.UpdatePluginInstanceRequest.plugin_instance:type_name -> google.cloud.apihub.v1.PluginInstance
	48, // 32: google.cloud.apihub.v1.UpdatePluginInstanceRequest.update_mask:type_name -> google.protobuf.FieldMask
	38, // 33: google.cloud.apihub.v1.Plugin.ConfigTemplate.auth_config_template:type_name -> google.cloud.apihub.v1.Plugin.ConfigTemplate.AuthConfigTemplate
	49, // 34: google.cloud.apihub.v1.Plugin.ConfigTemplate.additional_config_template:type_name -> google.cloud.apihub.v1.ConfigVariableTemplate
	50, // 35: google.cloud.apihub.v1.Plugin.ConfigTemplate.AuthConfigTemplate.supported_auth_types:type_name -> google.cloud.apihub.v1.AuthType
	51, // 36: google.cloud.apihub.v1.Plugin.ConfigTemplate.AuthConfigTemplate.service_account:type_name -> google.cloud.apihub.v1.GoogleServiceAccountConfig
	0,  // 37: google.cloud.apihub.v1.PluginInstanceAction.ResourceConfig.action_type:type_name -> google.cloud.apihub.v1.ActionType
	52, // 38: google.cloud.apihub.v1.PluginInstance.AdditionalConfigEntry.value:type_name -> google.cloud.apihub.v1.ConfigVariable
	9,  // 39: google.cloud.apihub.v1.ExecutionStatus.LastExecution.result:type_name -> google.cloud.apihub.v1.ExecutionStatus.LastExecution.Result
	46, // 40: google.cloud.apihub.v1.ExecutionStatus.LastExecution.start_time:type_name -> google.protobuf.Timestamp
	46, // 41: google.cloud.apihub.v1.ExecutionStatus.LastExecution.end_time:type_name -> google.protobuf.Timestamp
	12, // 42: google.cloud.apihub.v1.ApiHubPlugin.GetPlugin:input_type -> google.cloud.apihub.v1.GetPluginRequest
	13, // 43: google.cloud.apihub.v1.ApiHubPlugin.EnablePlugin:input_type -> google.cloud.apihub.v1.EnablePluginRequest
	14, // 44: google.cloud.apihub.v1.ApiHubPlugin.DisablePlugin:input_type -> google.cloud.apihub.v1.DisablePluginRequest
	19, // 45: google.cloud.apihub.v1.ApiHubPlugin.CreatePlugin:input_type -> google.cloud.apihub.v1.CreatePluginRequest
	21, // 46: google.cloud.apihub.v1.ApiHubPlugin.ListPlugins:input_type -> google.cloud.apihub.v1.ListPluginsRequest
	20, // 47: google.cloud.apihub.v1.ApiHubPlugin.DeletePlugin:input_type -> google.cloud.apihub.v1.DeletePluginRequest
	23, // 48: google.cloud.apihub.v1.ApiHubPlugin.CreatePluginInstance:input_type -> google.cloud.apihub.v1.CreatePluginInstanceRequest
	24, // 49: google.cloud.apihub.v1.ApiHubPlugin.ExecutePluginInstanceAction:input_type -> google.cloud.apihub.v1.ExecutePluginInstanceActionRequest
	27, // 50: google.cloud.apihub.v1.ApiHubPlugin.GetPluginInstance:input_type -> google.cloud.apihub.v1.GetPluginInstanceRequest
	28, // 51: google.cloud.apihub.v1.ApiHubPlugin.ListPluginInstances:input_type -> google.cloud.apihub.v1.ListPluginInstancesRequest
	30, // 52: google.cloud.apihub.v1.ApiHubPlugin.EnablePluginInstanceAction:input_type -> google.cloud.apihub.v1.EnablePluginInstanceActionRequest
	32, // 53: google.cloud.apihub.v1.ApiHubPlugin.DisablePluginInstanceAction:input_type -> google.cloud.apihub.v1.DisablePluginInstanceActionRequest
	34, // 54: google.cloud.apihub.v1.ApiHubPlugin.UpdatePluginInstance:input_type -> google.cloud.apihub.v1.UpdatePluginInstanceRequest
	35, // 55: google.cloud.apihub.v1.ApiHubPlugin.DeletePluginInstance:input_type -> google.cloud.apihub.v1.DeletePluginInstanceRequest
	10, // 56: google.cloud.apihub.v1.ApiHubPlugin.GetPlugin:output_type -> google.cloud.apihub.v1.Plugin
	10, // 57: google.cloud.apihub.v1.ApiHubPlugin.EnablePlugin:output_type -> google.cloud.apihub.v1.Plugin
	10, // 58: google.cloud.apihub.v1.ApiHubPlugin.DisablePlugin:output_type -> google.cloud.apihub.v1.Plugin
	10, // 59: google.cloud.apihub.v1.ApiHubPlugin.CreatePlugin:output_type -> google.cloud.apihub.v1.Plugin
	22, // 60: google.cloud.apihub.v1.ApiHubPlugin.ListPlugins:output_type -> google.cloud.apihub.v1.ListPluginsResponse
	53, // 61: google.cloud.apihub.v1.ApiHubPlugin.DeletePlugin:output_type -> google.longrunning.Operation
	53, // 62: google.cloud.apihub.v1.ApiHubPlugin.CreatePluginInstance:output_type -> google.longrunning.Operation
	53, // 63: google.cloud.apihub.v1.ApiHubPlugin.ExecutePluginInstanceAction:output_type -> google.longrunning.Operation
	16, // 64: google.cloud.apihub.v1.ApiHubPlugin.GetPluginInstance:output_type -> google.cloud.apihub.v1.PluginInstance
	29, // 65: google.cloud.apihub.v1.ApiHubPlugin.ListPluginInstances:output_type -> google.cloud.apihub.v1.ListPluginInstancesResponse
	53, // 66: google.cloud.apihub.v1.ApiHubPlugin.EnablePluginInstanceAction:output_type -> google.longrunning.Operation
	53, // 67: google.cloud.apihub.v1.ApiHubPlugin.DisablePluginInstanceAction:output_type -> google.longrunning.Operation
	16, // 68: google.cloud.apihub.v1.ApiHubPlugin.UpdatePluginInstance:output_type -> google.cloud.apihub.v1.PluginInstance
	53, // 69: google.cloud.apihub.v1.ApiHubPlugin.DeletePluginInstance:output_type -> google.longrunning.Operation
	56, // [56:70] is the sub-list for method output_type
	42, // [42:56] is the sub-list for method input_type
	42, // [42:42] is the sub-list for extension type_name
	42, // [42:42] is the sub-list for extension extendee
	0,  // [0:42] is the sub-list for field type_name
}

func init() { file_google_cloud_apihub_v1_plugin_service_proto_init() }
func file_google_cloud_apihub_v1_plugin_service_proto_init() {
	if File_google_cloud_apihub_v1_plugin_service_proto != nil {
		return
	}
	file_google_cloud_apihub_v1_common_fields_proto_init()
	file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[5].OneofWrappers = []any{
		(*PluginInstanceAction_HubInstanceAction)(nil),
	}
	file_google_cloud_apihub_v1_plugin_service_proto_msgTypes[7].OneofWrappers = []any{
		(*CurationConfig_CustomCuration_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_apihub_v1_plugin_service_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_google_cloud_apihub_v1_plugin_service_proto_goTypes,
		DependencyIndexes: file_google_cloud_apihub_v1_plugin_service_proto_depIdxs,
		EnumInfos:         file_google_cloud_apihub_v1_plugin_service_proto_enumTypes,
		MessageInfos:      file_google_cloud_apihub_v1_plugin_service_proto_msgTypes,
	}.Build()
	File_google_cloud_apihub_v1_plugin_service_proto = out.File
	file_google_cloud_apihub_v1_plugin_service_proto_rawDesc = nil
	file_google_cloud_apihub_v1_plugin_service_proto_goTypes = nil
	file_google_cloud_apihub_v1_plugin_service_proto_depIdxs = nil
}
