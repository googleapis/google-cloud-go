// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/apihub/v1/discovery_service.proto

package apihubpb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ApiHubDiscovery_ListDiscoveredApiObservations_FullMethodName = "/google.cloud.apihub.v1.ApiHubDiscovery/ListDiscoveredApiObservations"
	ApiHubDiscovery_GetDiscoveredApiObservation_FullMethodName   = "/google.cloud.apihub.v1.ApiHubDiscovery/GetDiscoveredApiObservation"
	ApiHubDiscovery_ListDiscoveredApiOperations_FullMethodName   = "/google.cloud.apihub.v1.ApiHubDiscovery/ListDiscoveredApiOperations"
	ApiHubDiscovery_GetDiscoveredApiOperation_FullMethodName     = "/google.cloud.apihub.v1.ApiHubDiscovery/GetDiscoveredApiOperation"
)

// ApiHubDiscoveryClient is the client API for ApiHubDiscovery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiHubDiscoveryClient interface {
	// Lists all the DiscoveredAPIObservations in a given project and location.
	ListDiscoveredApiObservations(ctx context.Context, in *ListDiscoveredApiObservationsRequest, opts ...grpc.CallOption) (*ListDiscoveredApiObservationsResponse, error)
	// Gets a DiscoveredAPIObservation in a given project, location and
	// ApiObservation.
	GetDiscoveredApiObservation(ctx context.Context, in *GetDiscoveredApiObservationRequest, opts ...grpc.CallOption) (*DiscoveredApiObservation, error)
	// Lists all the DiscoveredAPIOperations in a given project, location and
	// ApiObservation.
	ListDiscoveredApiOperations(ctx context.Context, in *ListDiscoveredApiOperationsRequest, opts ...grpc.CallOption) (*ListDiscoveredApiOperationsResponse, error)
	// Gets a DiscoveredAPIOperation in a given project, location,
	// ApiObservation and ApiOperation.
	GetDiscoveredApiOperation(ctx context.Context, in *GetDiscoveredApiOperationRequest, opts ...grpc.CallOption) (*DiscoveredApiOperation, error)
}

type apiHubDiscoveryClient struct {
	cc grpc.ClientConnInterface
}

func NewApiHubDiscoveryClient(cc grpc.ClientConnInterface) ApiHubDiscoveryClient {
	return &apiHubDiscoveryClient{cc}
}

func (c *apiHubDiscoveryClient) ListDiscoveredApiObservations(ctx context.Context, in *ListDiscoveredApiObservationsRequest, opts ...grpc.CallOption) (*ListDiscoveredApiObservationsResponse, error) {
	out := new(ListDiscoveredApiObservationsResponse)
	err := c.cc.Invoke(ctx, ApiHubDiscovery_ListDiscoveredApiObservations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiHubDiscoveryClient) GetDiscoveredApiObservation(ctx context.Context, in *GetDiscoveredApiObservationRequest, opts ...grpc.CallOption) (*DiscoveredApiObservation, error) {
	out := new(DiscoveredApiObservation)
	err := c.cc.Invoke(ctx, ApiHubDiscovery_GetDiscoveredApiObservation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiHubDiscoveryClient) ListDiscoveredApiOperations(ctx context.Context, in *ListDiscoveredApiOperationsRequest, opts ...grpc.CallOption) (*ListDiscoveredApiOperationsResponse, error) {
	out := new(ListDiscoveredApiOperationsResponse)
	err := c.cc.Invoke(ctx, ApiHubDiscovery_ListDiscoveredApiOperations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiHubDiscoveryClient) GetDiscoveredApiOperation(ctx context.Context, in *GetDiscoveredApiOperationRequest, opts ...grpc.CallOption) (*DiscoveredApiOperation, error) {
	out := new(DiscoveredApiOperation)
	err := c.cc.Invoke(ctx, ApiHubDiscovery_GetDiscoveredApiOperation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiHubDiscoveryServer is the server API for ApiHubDiscovery service.
// All implementations should embed UnimplementedApiHubDiscoveryServer
// for forward compatibility
type ApiHubDiscoveryServer interface {
	// Lists all the DiscoveredAPIObservations in a given project and location.
	ListDiscoveredApiObservations(context.Context, *ListDiscoveredApiObservationsRequest) (*ListDiscoveredApiObservationsResponse, error)
	// Gets a DiscoveredAPIObservation in a given project, location and
	// ApiObservation.
	GetDiscoveredApiObservation(context.Context, *GetDiscoveredApiObservationRequest) (*DiscoveredApiObservation, error)
	// Lists all the DiscoveredAPIOperations in a given project, location and
	// ApiObservation.
	ListDiscoveredApiOperations(context.Context, *ListDiscoveredApiOperationsRequest) (*ListDiscoveredApiOperationsResponse, error)
	// Gets a DiscoveredAPIOperation in a given project, location,
	// ApiObservation and ApiOperation.
	GetDiscoveredApiOperation(context.Context, *GetDiscoveredApiOperationRequest) (*DiscoveredApiOperation, error)
}

// UnimplementedApiHubDiscoveryServer should be embedded to have forward compatible implementations.
type UnimplementedApiHubDiscoveryServer struct {
}

func (UnimplementedApiHubDiscoveryServer) ListDiscoveredApiObservations(context.Context, *ListDiscoveredApiObservationsRequest) (*ListDiscoveredApiObservationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDiscoveredApiObservations not implemented")
}
func (UnimplementedApiHubDiscoveryServer) GetDiscoveredApiObservation(context.Context, *GetDiscoveredApiObservationRequest) (*DiscoveredApiObservation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiscoveredApiObservation not implemented")
}
func (UnimplementedApiHubDiscoveryServer) ListDiscoveredApiOperations(context.Context, *ListDiscoveredApiOperationsRequest) (*ListDiscoveredApiOperationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDiscoveredApiOperations not implemented")
}
func (UnimplementedApiHubDiscoveryServer) GetDiscoveredApiOperation(context.Context, *GetDiscoveredApiOperationRequest) (*DiscoveredApiOperation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiscoveredApiOperation not implemented")
}

// UnsafeApiHubDiscoveryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiHubDiscoveryServer will
// result in compilation errors.
type UnsafeApiHubDiscoveryServer interface {
	mustEmbedUnimplementedApiHubDiscoveryServer()
}

func RegisterApiHubDiscoveryServer(s grpc.ServiceRegistrar, srv ApiHubDiscoveryServer) {
	s.RegisterService(&ApiHubDiscovery_ServiceDesc, srv)
}

func _ApiHubDiscovery_ListDiscoveredApiObservations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDiscoveredApiObservationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiHubDiscoveryServer).ListDiscoveredApiObservations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiHubDiscovery_ListDiscoveredApiObservations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiHubDiscoveryServer).ListDiscoveredApiObservations(ctx, req.(*ListDiscoveredApiObservationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiHubDiscovery_GetDiscoveredApiObservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiscoveredApiObservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiHubDiscoveryServer).GetDiscoveredApiObservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiHubDiscovery_GetDiscoveredApiObservation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiHubDiscoveryServer).GetDiscoveredApiObservation(ctx, req.(*GetDiscoveredApiObservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiHubDiscovery_ListDiscoveredApiOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDiscoveredApiOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiHubDiscoveryServer).ListDiscoveredApiOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiHubDiscovery_ListDiscoveredApiOperations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiHubDiscoveryServer).ListDiscoveredApiOperations(ctx, req.(*ListDiscoveredApiOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiHubDiscovery_GetDiscoveredApiOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiscoveredApiOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiHubDiscoveryServer).GetDiscoveredApiOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiHubDiscovery_GetDiscoveredApiOperation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiHubDiscoveryServer).GetDiscoveredApiOperation(ctx, req.(*GetDiscoveredApiOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiHubDiscovery_ServiceDesc is the grpc.ServiceDesc for ApiHubDiscovery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiHubDiscovery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.apihub.v1.ApiHubDiscovery",
	HandlerType: (*ApiHubDiscoveryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDiscoveredApiObservations",
			Handler:    _ApiHubDiscovery_ListDiscoveredApiObservations_Handler,
		},
		{
			MethodName: "GetDiscoveredApiObservation",
			Handler:    _ApiHubDiscovery_GetDiscoveredApiObservation_Handler,
		},
		{
			MethodName: "ListDiscoveredApiOperations",
			Handler:    _ApiHubDiscovery_ListDiscoveredApiOperations_Handler,
		},
		{
			MethodName: "GetDiscoveredApiOperation",
			Handler:    _ApiHubDiscovery_GetDiscoveredApiOperation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/apihub/v1/discovery_service.proto",
}
