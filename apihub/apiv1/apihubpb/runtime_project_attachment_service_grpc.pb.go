// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/apihub/v1/runtime_project_attachment_service.proto

package apihubpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RuntimeProjectAttachmentService_CreateRuntimeProjectAttachment_FullMethodName = "/google.cloud.apihub.v1.RuntimeProjectAttachmentService/CreateRuntimeProjectAttachment"
	RuntimeProjectAttachmentService_GetRuntimeProjectAttachment_FullMethodName    = "/google.cloud.apihub.v1.RuntimeProjectAttachmentService/GetRuntimeProjectAttachment"
	RuntimeProjectAttachmentService_ListRuntimeProjectAttachments_FullMethodName  = "/google.cloud.apihub.v1.RuntimeProjectAttachmentService/ListRuntimeProjectAttachments"
	RuntimeProjectAttachmentService_DeleteRuntimeProjectAttachment_FullMethodName = "/google.cloud.apihub.v1.RuntimeProjectAttachmentService/DeleteRuntimeProjectAttachment"
	RuntimeProjectAttachmentService_LookupRuntimeProjectAttachment_FullMethodName = "/google.cloud.apihub.v1.RuntimeProjectAttachmentService/LookupRuntimeProjectAttachment"
)

// RuntimeProjectAttachmentServiceClient is the client API for RuntimeProjectAttachmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RuntimeProjectAttachmentServiceClient interface {
	// Attaches a runtime project to the host project.
	CreateRuntimeProjectAttachment(ctx context.Context, in *CreateRuntimeProjectAttachmentRequest, opts ...grpc.CallOption) (*RuntimeProjectAttachment, error)
	// Gets a runtime project attachment.
	GetRuntimeProjectAttachment(ctx context.Context, in *GetRuntimeProjectAttachmentRequest, opts ...grpc.CallOption) (*RuntimeProjectAttachment, error)
	// List runtime projects attached to the host project.
	ListRuntimeProjectAttachments(ctx context.Context, in *ListRuntimeProjectAttachmentsRequest, opts ...grpc.CallOption) (*ListRuntimeProjectAttachmentsResponse, error)
	// Delete a runtime project attachment in the API Hub. This call will detach
	// the runtime project from the host project.
	DeleteRuntimeProjectAttachment(ctx context.Context, in *DeleteRuntimeProjectAttachmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Look up a runtime project attachment. This API can be called in the context
	// of any project.
	LookupRuntimeProjectAttachment(ctx context.Context, in *LookupRuntimeProjectAttachmentRequest, opts ...grpc.CallOption) (*LookupRuntimeProjectAttachmentResponse, error)
}

type runtimeProjectAttachmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRuntimeProjectAttachmentServiceClient(cc grpc.ClientConnInterface) RuntimeProjectAttachmentServiceClient {
	return &runtimeProjectAttachmentServiceClient{cc}
}

func (c *runtimeProjectAttachmentServiceClient) CreateRuntimeProjectAttachment(ctx context.Context, in *CreateRuntimeProjectAttachmentRequest, opts ...grpc.CallOption) (*RuntimeProjectAttachment, error) {
	out := new(RuntimeProjectAttachment)
	err := c.cc.Invoke(ctx, RuntimeProjectAttachmentService_CreateRuntimeProjectAttachment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeProjectAttachmentServiceClient) GetRuntimeProjectAttachment(ctx context.Context, in *GetRuntimeProjectAttachmentRequest, opts ...grpc.CallOption) (*RuntimeProjectAttachment, error) {
	out := new(RuntimeProjectAttachment)
	err := c.cc.Invoke(ctx, RuntimeProjectAttachmentService_GetRuntimeProjectAttachment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeProjectAttachmentServiceClient) ListRuntimeProjectAttachments(ctx context.Context, in *ListRuntimeProjectAttachmentsRequest, opts ...grpc.CallOption) (*ListRuntimeProjectAttachmentsResponse, error) {
	out := new(ListRuntimeProjectAttachmentsResponse)
	err := c.cc.Invoke(ctx, RuntimeProjectAttachmentService_ListRuntimeProjectAttachments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeProjectAttachmentServiceClient) DeleteRuntimeProjectAttachment(ctx context.Context, in *DeleteRuntimeProjectAttachmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RuntimeProjectAttachmentService_DeleteRuntimeProjectAttachment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeProjectAttachmentServiceClient) LookupRuntimeProjectAttachment(ctx context.Context, in *LookupRuntimeProjectAttachmentRequest, opts ...grpc.CallOption) (*LookupRuntimeProjectAttachmentResponse, error) {
	out := new(LookupRuntimeProjectAttachmentResponse)
	err := c.cc.Invoke(ctx, RuntimeProjectAttachmentService_LookupRuntimeProjectAttachment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RuntimeProjectAttachmentServiceServer is the server API for RuntimeProjectAttachmentService service.
// All implementations should embed UnimplementedRuntimeProjectAttachmentServiceServer
// for forward compatibility
type RuntimeProjectAttachmentServiceServer interface {
	// Attaches a runtime project to the host project.
	CreateRuntimeProjectAttachment(context.Context, *CreateRuntimeProjectAttachmentRequest) (*RuntimeProjectAttachment, error)
	// Gets a runtime project attachment.
	GetRuntimeProjectAttachment(context.Context, *GetRuntimeProjectAttachmentRequest) (*RuntimeProjectAttachment, error)
	// List runtime projects attached to the host project.
	ListRuntimeProjectAttachments(context.Context, *ListRuntimeProjectAttachmentsRequest) (*ListRuntimeProjectAttachmentsResponse, error)
	// Delete a runtime project attachment in the API Hub. This call will detach
	// the runtime project from the host project.
	DeleteRuntimeProjectAttachment(context.Context, *DeleteRuntimeProjectAttachmentRequest) (*emptypb.Empty, error)
	// Look up a runtime project attachment. This API can be called in the context
	// of any project.
	LookupRuntimeProjectAttachment(context.Context, *LookupRuntimeProjectAttachmentRequest) (*LookupRuntimeProjectAttachmentResponse, error)
}

// UnimplementedRuntimeProjectAttachmentServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRuntimeProjectAttachmentServiceServer struct {
}

func (UnimplementedRuntimeProjectAttachmentServiceServer) CreateRuntimeProjectAttachment(context.Context, *CreateRuntimeProjectAttachmentRequest) (*RuntimeProjectAttachment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRuntimeProjectAttachment not implemented")
}
func (UnimplementedRuntimeProjectAttachmentServiceServer) GetRuntimeProjectAttachment(context.Context, *GetRuntimeProjectAttachmentRequest) (*RuntimeProjectAttachment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRuntimeProjectAttachment not implemented")
}
func (UnimplementedRuntimeProjectAttachmentServiceServer) ListRuntimeProjectAttachments(context.Context, *ListRuntimeProjectAttachmentsRequest) (*ListRuntimeProjectAttachmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRuntimeProjectAttachments not implemented")
}
func (UnimplementedRuntimeProjectAttachmentServiceServer) DeleteRuntimeProjectAttachment(context.Context, *DeleteRuntimeProjectAttachmentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRuntimeProjectAttachment not implemented")
}
func (UnimplementedRuntimeProjectAttachmentServiceServer) LookupRuntimeProjectAttachment(context.Context, *LookupRuntimeProjectAttachmentRequest) (*LookupRuntimeProjectAttachmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupRuntimeProjectAttachment not implemented")
}

// UnsafeRuntimeProjectAttachmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RuntimeProjectAttachmentServiceServer will
// result in compilation errors.
type UnsafeRuntimeProjectAttachmentServiceServer interface {
	mustEmbedUnimplementedRuntimeProjectAttachmentServiceServer()
}

func RegisterRuntimeProjectAttachmentServiceServer(s grpc.ServiceRegistrar, srv RuntimeProjectAttachmentServiceServer) {
	s.RegisterService(&RuntimeProjectAttachmentService_ServiceDesc, srv)
}

func _RuntimeProjectAttachmentService_CreateRuntimeProjectAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRuntimeProjectAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeProjectAttachmentServiceServer).CreateRuntimeProjectAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeProjectAttachmentService_CreateRuntimeProjectAttachment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeProjectAttachmentServiceServer).CreateRuntimeProjectAttachment(ctx, req.(*CreateRuntimeProjectAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeProjectAttachmentService_GetRuntimeProjectAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRuntimeProjectAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeProjectAttachmentServiceServer).GetRuntimeProjectAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeProjectAttachmentService_GetRuntimeProjectAttachment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeProjectAttachmentServiceServer).GetRuntimeProjectAttachment(ctx, req.(*GetRuntimeProjectAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeProjectAttachmentService_ListRuntimeProjectAttachments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRuntimeProjectAttachmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeProjectAttachmentServiceServer).ListRuntimeProjectAttachments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeProjectAttachmentService_ListRuntimeProjectAttachments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeProjectAttachmentServiceServer).ListRuntimeProjectAttachments(ctx, req.(*ListRuntimeProjectAttachmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeProjectAttachmentService_DeleteRuntimeProjectAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRuntimeProjectAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeProjectAttachmentServiceServer).DeleteRuntimeProjectAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeProjectAttachmentService_DeleteRuntimeProjectAttachment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeProjectAttachmentServiceServer).DeleteRuntimeProjectAttachment(ctx, req.(*DeleteRuntimeProjectAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeProjectAttachmentService_LookupRuntimeProjectAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupRuntimeProjectAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeProjectAttachmentServiceServer).LookupRuntimeProjectAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeProjectAttachmentService_LookupRuntimeProjectAttachment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeProjectAttachmentServiceServer).LookupRuntimeProjectAttachment(ctx, req.(*LookupRuntimeProjectAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RuntimeProjectAttachmentService_ServiceDesc is the grpc.ServiceDesc for RuntimeProjectAttachmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RuntimeProjectAttachmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.apihub.v1.RuntimeProjectAttachmentService",
	HandlerType: (*RuntimeProjectAttachmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRuntimeProjectAttachment",
			Handler:    _RuntimeProjectAttachmentService_CreateRuntimeProjectAttachment_Handler,
		},
		{
			MethodName: "GetRuntimeProjectAttachment",
			Handler:    _RuntimeProjectAttachmentService_GetRuntimeProjectAttachment_Handler,
		},
		{
			MethodName: "ListRuntimeProjectAttachments",
			Handler:    _RuntimeProjectAttachmentService_ListRuntimeProjectAttachments_Handler,
		},
		{
			MethodName: "DeleteRuntimeProjectAttachment",
			Handler:    _RuntimeProjectAttachmentService_DeleteRuntimeProjectAttachment_Handler,
		},
		{
			MethodName: "LookupRuntimeProjectAttachment",
			Handler:    _RuntimeProjectAttachmentService_LookupRuntimeProjectAttachment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/apihub/v1/runtime_project_attachment_service.proto",
}
