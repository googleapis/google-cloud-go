// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/configdelivery/v1/config_delivery.proto

package configdeliverypb

import (
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ConfigDelivery_ListResourceBundles_FullMethodName  = "/google.cloud.configdelivery.v1.ConfigDelivery/ListResourceBundles"
	ConfigDelivery_GetResourceBundle_FullMethodName    = "/google.cloud.configdelivery.v1.ConfigDelivery/GetResourceBundle"
	ConfigDelivery_CreateResourceBundle_FullMethodName = "/google.cloud.configdelivery.v1.ConfigDelivery/CreateResourceBundle"
	ConfigDelivery_UpdateResourceBundle_FullMethodName = "/google.cloud.configdelivery.v1.ConfigDelivery/UpdateResourceBundle"
	ConfigDelivery_DeleteResourceBundle_FullMethodName = "/google.cloud.configdelivery.v1.ConfigDelivery/DeleteResourceBundle"
	ConfigDelivery_ListFleetPackages_FullMethodName    = "/google.cloud.configdelivery.v1.ConfigDelivery/ListFleetPackages"
	ConfigDelivery_GetFleetPackage_FullMethodName      = "/google.cloud.configdelivery.v1.ConfigDelivery/GetFleetPackage"
	ConfigDelivery_CreateFleetPackage_FullMethodName   = "/google.cloud.configdelivery.v1.ConfigDelivery/CreateFleetPackage"
	ConfigDelivery_UpdateFleetPackage_FullMethodName   = "/google.cloud.configdelivery.v1.ConfigDelivery/UpdateFleetPackage"
	ConfigDelivery_DeleteFleetPackage_FullMethodName   = "/google.cloud.configdelivery.v1.ConfigDelivery/DeleteFleetPackage"
	ConfigDelivery_ListReleases_FullMethodName         = "/google.cloud.configdelivery.v1.ConfigDelivery/ListReleases"
	ConfigDelivery_GetRelease_FullMethodName           = "/google.cloud.configdelivery.v1.ConfigDelivery/GetRelease"
	ConfigDelivery_CreateRelease_FullMethodName        = "/google.cloud.configdelivery.v1.ConfigDelivery/CreateRelease"
	ConfigDelivery_UpdateRelease_FullMethodName        = "/google.cloud.configdelivery.v1.ConfigDelivery/UpdateRelease"
	ConfigDelivery_DeleteRelease_FullMethodName        = "/google.cloud.configdelivery.v1.ConfigDelivery/DeleteRelease"
	ConfigDelivery_ListVariants_FullMethodName         = "/google.cloud.configdelivery.v1.ConfigDelivery/ListVariants"
	ConfigDelivery_GetVariant_FullMethodName           = "/google.cloud.configdelivery.v1.ConfigDelivery/GetVariant"
	ConfigDelivery_CreateVariant_FullMethodName        = "/google.cloud.configdelivery.v1.ConfigDelivery/CreateVariant"
	ConfigDelivery_UpdateVariant_FullMethodName        = "/google.cloud.configdelivery.v1.ConfigDelivery/UpdateVariant"
	ConfigDelivery_DeleteVariant_FullMethodName        = "/google.cloud.configdelivery.v1.ConfigDelivery/DeleteVariant"
	ConfigDelivery_ListRollouts_FullMethodName         = "/google.cloud.configdelivery.v1.ConfigDelivery/ListRollouts"
	ConfigDelivery_GetRollout_FullMethodName           = "/google.cloud.configdelivery.v1.ConfigDelivery/GetRollout"
	ConfigDelivery_SuspendRollout_FullMethodName       = "/google.cloud.configdelivery.v1.ConfigDelivery/SuspendRollout"
	ConfigDelivery_ResumeRollout_FullMethodName        = "/google.cloud.configdelivery.v1.ConfigDelivery/ResumeRollout"
	ConfigDelivery_AbortRollout_FullMethodName         = "/google.cloud.configdelivery.v1.ConfigDelivery/AbortRollout"
)

// ConfigDeliveryClient is the client API for ConfigDelivery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigDeliveryClient interface {
	// Lists ResourceBundles in a given project and location.
	ListResourceBundles(ctx context.Context, in *ListResourceBundlesRequest, opts ...grpc.CallOption) (*ListResourceBundlesResponse, error)
	// Gets details of a single ResourceBundle.
	GetResourceBundle(ctx context.Context, in *GetResourceBundleRequest, opts ...grpc.CallOption) (*ResourceBundle, error)
	// Creates a new ResourceBundle in a given project and location.
	CreateResourceBundle(ctx context.Context, in *CreateResourceBundleRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates the parameters of a single ResourceBundle.
	UpdateResourceBundle(ctx context.Context, in *UpdateResourceBundleRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single ResourceBundle.
	DeleteResourceBundle(ctx context.Context, in *DeleteResourceBundleRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists FleetPackages in a given project and location.
	ListFleetPackages(ctx context.Context, in *ListFleetPackagesRequest, opts ...grpc.CallOption) (*ListFleetPackagesResponse, error)
	// Gets details of a single FleetPackage.
	GetFleetPackage(ctx context.Context, in *GetFleetPackageRequest, opts ...grpc.CallOption) (*FleetPackage, error)
	// Creates a new FleetPackage in a given project and location.
	CreateFleetPackage(ctx context.Context, in *CreateFleetPackageRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates the parameters of a single FleetPackage.
	UpdateFleetPackage(ctx context.Context, in *UpdateFleetPackageRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single FleetPackage.
	DeleteFleetPackage(ctx context.Context, in *DeleteFleetPackageRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists Releases in a given project and location.
	ListReleases(ctx context.Context, in *ListReleasesRequest, opts ...grpc.CallOption) (*ListReleasesResponse, error)
	// Gets details of a single Release.
	GetRelease(ctx context.Context, in *GetReleaseRequest, opts ...grpc.CallOption) (*Release, error)
	// Creates a new Release in a given project, location and resource bundle.
	CreateRelease(ctx context.Context, in *CreateReleaseRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates the parameters of a single Release.
	UpdateRelease(ctx context.Context, in *UpdateReleaseRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single Release.
	DeleteRelease(ctx context.Context, in *DeleteReleaseRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists Variants in a given project and location.
	ListVariants(ctx context.Context, in *ListVariantsRequest, opts ...grpc.CallOption) (*ListVariantsResponse, error)
	// Gets details of a single Variant.
	GetVariant(ctx context.Context, in *GetVariantRequest, opts ...grpc.CallOption) (*Variant, error)
	// Creates a new Variant in a given project, location, resource bundle, and
	// release.
	CreateVariant(ctx context.Context, in *CreateVariantRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates the parameters of a single Variant.
	UpdateVariant(ctx context.Context, in *UpdateVariantRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single Variant.
	DeleteVariant(ctx context.Context, in *DeleteVariantRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists Rollouts in a given project, location, and Fleet Package.
	ListRollouts(ctx context.Context, in *ListRolloutsRequest, opts ...grpc.CallOption) (*ListRolloutsResponse, error)
	// Gets details of a single Rollout.
	GetRollout(ctx context.Context, in *GetRolloutRequest, opts ...grpc.CallOption) (*Rollout, error)
	// Suspend a Rollout.
	SuspendRollout(ctx context.Context, in *SuspendRolloutRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Resume a Rollout.
	ResumeRollout(ctx context.Context, in *ResumeRolloutRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Abort a Rollout.
	AbortRollout(ctx context.Context, in *AbortRolloutRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type configDeliveryClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigDeliveryClient(cc grpc.ClientConnInterface) ConfigDeliveryClient {
	return &configDeliveryClient{cc}
}

func (c *configDeliveryClient) ListResourceBundles(ctx context.Context, in *ListResourceBundlesRequest, opts ...grpc.CallOption) (*ListResourceBundlesResponse, error) {
	out := new(ListResourceBundlesResponse)
	err := c.cc.Invoke(ctx, ConfigDelivery_ListResourceBundles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configDeliveryClient) GetResourceBundle(ctx context.Context, in *GetResourceBundleRequest, opts ...grpc.CallOption) (*ResourceBundle, error) {
	out := new(ResourceBundle)
	err := c.cc.Invoke(ctx, ConfigDelivery_GetResourceBundle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configDeliveryClient) CreateResourceBundle(ctx context.Context, in *CreateResourceBundleRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, ConfigDelivery_CreateResourceBundle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configDeliveryClient) UpdateResourceBundle(ctx context.Context, in *UpdateResourceBundleRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, ConfigDelivery_UpdateResourceBundle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configDeliveryClient) DeleteResourceBundle(ctx context.Context, in *DeleteResourceBundleRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, ConfigDelivery_DeleteResourceBundle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configDeliveryClient) ListFleetPackages(ctx context.Context, in *ListFleetPackagesRequest, opts ...grpc.CallOption) (*ListFleetPackagesResponse, error) {
	out := new(ListFleetPackagesResponse)
	err := c.cc.Invoke(ctx, ConfigDelivery_ListFleetPackages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configDeliveryClient) GetFleetPackage(ctx context.Context, in *GetFleetPackageRequest, opts ...grpc.CallOption) (*FleetPackage, error) {
	out := new(FleetPackage)
	err := c.cc.Invoke(ctx, ConfigDelivery_GetFleetPackage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configDeliveryClient) CreateFleetPackage(ctx context.Context, in *CreateFleetPackageRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, ConfigDelivery_CreateFleetPackage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configDeliveryClient) UpdateFleetPackage(ctx context.Context, in *UpdateFleetPackageRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, ConfigDelivery_UpdateFleetPackage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configDeliveryClient) DeleteFleetPackage(ctx context.Context, in *DeleteFleetPackageRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, ConfigDelivery_DeleteFleetPackage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configDeliveryClient) ListReleases(ctx context.Context, in *ListReleasesRequest, opts ...grpc.CallOption) (*ListReleasesResponse, error) {
	out := new(ListReleasesResponse)
	err := c.cc.Invoke(ctx, ConfigDelivery_ListReleases_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configDeliveryClient) GetRelease(ctx context.Context, in *GetReleaseRequest, opts ...grpc.CallOption) (*Release, error) {
	out := new(Release)
	err := c.cc.Invoke(ctx, ConfigDelivery_GetRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configDeliveryClient) CreateRelease(ctx context.Context, in *CreateReleaseRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, ConfigDelivery_CreateRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configDeliveryClient) UpdateRelease(ctx context.Context, in *UpdateReleaseRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, ConfigDelivery_UpdateRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configDeliveryClient) DeleteRelease(ctx context.Context, in *DeleteReleaseRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, ConfigDelivery_DeleteRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configDeliveryClient) ListVariants(ctx context.Context, in *ListVariantsRequest, opts ...grpc.CallOption) (*ListVariantsResponse, error) {
	out := new(ListVariantsResponse)
	err := c.cc.Invoke(ctx, ConfigDelivery_ListVariants_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configDeliveryClient) GetVariant(ctx context.Context, in *GetVariantRequest, opts ...grpc.CallOption) (*Variant, error) {
	out := new(Variant)
	err := c.cc.Invoke(ctx, ConfigDelivery_GetVariant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configDeliveryClient) CreateVariant(ctx context.Context, in *CreateVariantRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, ConfigDelivery_CreateVariant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configDeliveryClient) UpdateVariant(ctx context.Context, in *UpdateVariantRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, ConfigDelivery_UpdateVariant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configDeliveryClient) DeleteVariant(ctx context.Context, in *DeleteVariantRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, ConfigDelivery_DeleteVariant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configDeliveryClient) ListRollouts(ctx context.Context, in *ListRolloutsRequest, opts ...grpc.CallOption) (*ListRolloutsResponse, error) {
	out := new(ListRolloutsResponse)
	err := c.cc.Invoke(ctx, ConfigDelivery_ListRollouts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configDeliveryClient) GetRollout(ctx context.Context, in *GetRolloutRequest, opts ...grpc.CallOption) (*Rollout, error) {
	out := new(Rollout)
	err := c.cc.Invoke(ctx, ConfigDelivery_GetRollout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configDeliveryClient) SuspendRollout(ctx context.Context, in *SuspendRolloutRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, ConfigDelivery_SuspendRollout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configDeliveryClient) ResumeRollout(ctx context.Context, in *ResumeRolloutRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, ConfigDelivery_ResumeRollout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configDeliveryClient) AbortRollout(ctx context.Context, in *AbortRolloutRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, ConfigDelivery_AbortRollout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigDeliveryServer is the server API for ConfigDelivery service.
// All implementations should embed UnimplementedConfigDeliveryServer
// for forward compatibility
type ConfigDeliveryServer interface {
	// Lists ResourceBundles in a given project and location.
	ListResourceBundles(context.Context, *ListResourceBundlesRequest) (*ListResourceBundlesResponse, error)
	// Gets details of a single ResourceBundle.
	GetResourceBundle(context.Context, *GetResourceBundleRequest) (*ResourceBundle, error)
	// Creates a new ResourceBundle in a given project and location.
	CreateResourceBundle(context.Context, *CreateResourceBundleRequest) (*longrunningpb.Operation, error)
	// Updates the parameters of a single ResourceBundle.
	UpdateResourceBundle(context.Context, *UpdateResourceBundleRequest) (*longrunningpb.Operation, error)
	// Deletes a single ResourceBundle.
	DeleteResourceBundle(context.Context, *DeleteResourceBundleRequest) (*longrunningpb.Operation, error)
	// Lists FleetPackages in a given project and location.
	ListFleetPackages(context.Context, *ListFleetPackagesRequest) (*ListFleetPackagesResponse, error)
	// Gets details of a single FleetPackage.
	GetFleetPackage(context.Context, *GetFleetPackageRequest) (*FleetPackage, error)
	// Creates a new FleetPackage in a given project and location.
	CreateFleetPackage(context.Context, *CreateFleetPackageRequest) (*longrunningpb.Operation, error)
	// Updates the parameters of a single FleetPackage.
	UpdateFleetPackage(context.Context, *UpdateFleetPackageRequest) (*longrunningpb.Operation, error)
	// Deletes a single FleetPackage.
	DeleteFleetPackage(context.Context, *DeleteFleetPackageRequest) (*longrunningpb.Operation, error)
	// Lists Releases in a given project and location.
	ListReleases(context.Context, *ListReleasesRequest) (*ListReleasesResponse, error)
	// Gets details of a single Release.
	GetRelease(context.Context, *GetReleaseRequest) (*Release, error)
	// Creates a new Release in a given project, location and resource bundle.
	CreateRelease(context.Context, *CreateReleaseRequest) (*longrunningpb.Operation, error)
	// Updates the parameters of a single Release.
	UpdateRelease(context.Context, *UpdateReleaseRequest) (*longrunningpb.Operation, error)
	// Deletes a single Release.
	DeleteRelease(context.Context, *DeleteReleaseRequest) (*longrunningpb.Operation, error)
	// Lists Variants in a given project and location.
	ListVariants(context.Context, *ListVariantsRequest) (*ListVariantsResponse, error)
	// Gets details of a single Variant.
	GetVariant(context.Context, *GetVariantRequest) (*Variant, error)
	// Creates a new Variant in a given project, location, resource bundle, and
	// release.
	CreateVariant(context.Context, *CreateVariantRequest) (*longrunningpb.Operation, error)
	// Updates the parameters of a single Variant.
	UpdateVariant(context.Context, *UpdateVariantRequest) (*longrunningpb.Operation, error)
	// Deletes a single Variant.
	DeleteVariant(context.Context, *DeleteVariantRequest) (*longrunningpb.Operation, error)
	// Lists Rollouts in a given project, location, and Fleet Package.
	ListRollouts(context.Context, *ListRolloutsRequest) (*ListRolloutsResponse, error)
	// Gets details of a single Rollout.
	GetRollout(context.Context, *GetRolloutRequest) (*Rollout, error)
	// Suspend a Rollout.
	SuspendRollout(context.Context, *SuspendRolloutRequest) (*longrunningpb.Operation, error)
	// Resume a Rollout.
	ResumeRollout(context.Context, *ResumeRolloutRequest) (*longrunningpb.Operation, error)
	// Abort a Rollout.
	AbortRollout(context.Context, *AbortRolloutRequest) (*longrunningpb.Operation, error)
}

// UnimplementedConfigDeliveryServer should be embedded to have forward compatible implementations.
type UnimplementedConfigDeliveryServer struct {
}

func (UnimplementedConfigDeliveryServer) ListResourceBundles(context.Context, *ListResourceBundlesRequest) (*ListResourceBundlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResourceBundles not implemented")
}
func (UnimplementedConfigDeliveryServer) GetResourceBundle(context.Context, *GetResourceBundleRequest) (*ResourceBundle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceBundle not implemented")
}
func (UnimplementedConfigDeliveryServer) CreateResourceBundle(context.Context, *CreateResourceBundleRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResourceBundle not implemented")
}
func (UnimplementedConfigDeliveryServer) UpdateResourceBundle(context.Context, *UpdateResourceBundleRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResourceBundle not implemented")
}
func (UnimplementedConfigDeliveryServer) DeleteResourceBundle(context.Context, *DeleteResourceBundleRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResourceBundle not implemented")
}
func (UnimplementedConfigDeliveryServer) ListFleetPackages(context.Context, *ListFleetPackagesRequest) (*ListFleetPackagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFleetPackages not implemented")
}
func (UnimplementedConfigDeliveryServer) GetFleetPackage(context.Context, *GetFleetPackageRequest) (*FleetPackage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFleetPackage not implemented")
}
func (UnimplementedConfigDeliveryServer) CreateFleetPackage(context.Context, *CreateFleetPackageRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFleetPackage not implemented")
}
func (UnimplementedConfigDeliveryServer) UpdateFleetPackage(context.Context, *UpdateFleetPackageRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFleetPackage not implemented")
}
func (UnimplementedConfigDeliveryServer) DeleteFleetPackage(context.Context, *DeleteFleetPackageRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFleetPackage not implemented")
}
func (UnimplementedConfigDeliveryServer) ListReleases(context.Context, *ListReleasesRequest) (*ListReleasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReleases not implemented")
}
func (UnimplementedConfigDeliveryServer) GetRelease(context.Context, *GetReleaseRequest) (*Release, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelease not implemented")
}
func (UnimplementedConfigDeliveryServer) CreateRelease(context.Context, *CreateReleaseRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRelease not implemented")
}
func (UnimplementedConfigDeliveryServer) UpdateRelease(context.Context, *UpdateReleaseRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRelease not implemented")
}
func (UnimplementedConfigDeliveryServer) DeleteRelease(context.Context, *DeleteReleaseRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRelease not implemented")
}
func (UnimplementedConfigDeliveryServer) ListVariants(context.Context, *ListVariantsRequest) (*ListVariantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVariants not implemented")
}
func (UnimplementedConfigDeliveryServer) GetVariant(context.Context, *GetVariantRequest) (*Variant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVariant not implemented")
}
func (UnimplementedConfigDeliveryServer) CreateVariant(context.Context, *CreateVariantRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVariant not implemented")
}
func (UnimplementedConfigDeliveryServer) UpdateVariant(context.Context, *UpdateVariantRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVariant not implemented")
}
func (UnimplementedConfigDeliveryServer) DeleteVariant(context.Context, *DeleteVariantRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVariant not implemented")
}
func (UnimplementedConfigDeliveryServer) ListRollouts(context.Context, *ListRolloutsRequest) (*ListRolloutsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRollouts not implemented")
}
func (UnimplementedConfigDeliveryServer) GetRollout(context.Context, *GetRolloutRequest) (*Rollout, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRollout not implemented")
}
func (UnimplementedConfigDeliveryServer) SuspendRollout(context.Context, *SuspendRolloutRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuspendRollout not implemented")
}
func (UnimplementedConfigDeliveryServer) ResumeRollout(context.Context, *ResumeRolloutRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeRollout not implemented")
}
func (UnimplementedConfigDeliveryServer) AbortRollout(context.Context, *AbortRolloutRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbortRollout not implemented")
}

// UnsafeConfigDeliveryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigDeliveryServer will
// result in compilation errors.
type UnsafeConfigDeliveryServer interface {
	mustEmbedUnimplementedConfigDeliveryServer()
}

func RegisterConfigDeliveryServer(s grpc.ServiceRegistrar, srv ConfigDeliveryServer) {
	s.RegisterService(&ConfigDelivery_ServiceDesc, srv)
}

func _ConfigDelivery_ListResourceBundles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResourceBundlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigDeliveryServer).ListResourceBundles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigDelivery_ListResourceBundles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigDeliveryServer).ListResourceBundles(ctx, req.(*ListResourceBundlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigDelivery_GetResourceBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceBundleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigDeliveryServer).GetResourceBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigDelivery_GetResourceBundle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigDeliveryServer).GetResourceBundle(ctx, req.(*GetResourceBundleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigDelivery_CreateResourceBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResourceBundleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigDeliveryServer).CreateResourceBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigDelivery_CreateResourceBundle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigDeliveryServer).CreateResourceBundle(ctx, req.(*CreateResourceBundleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigDelivery_UpdateResourceBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceBundleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigDeliveryServer).UpdateResourceBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigDelivery_UpdateResourceBundle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigDeliveryServer).UpdateResourceBundle(ctx, req.(*UpdateResourceBundleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigDelivery_DeleteResourceBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResourceBundleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigDeliveryServer).DeleteResourceBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigDelivery_DeleteResourceBundle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigDeliveryServer).DeleteResourceBundle(ctx, req.(*DeleteResourceBundleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigDelivery_ListFleetPackages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFleetPackagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigDeliveryServer).ListFleetPackages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigDelivery_ListFleetPackages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigDeliveryServer).ListFleetPackages(ctx, req.(*ListFleetPackagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigDelivery_GetFleetPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFleetPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigDeliveryServer).GetFleetPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigDelivery_GetFleetPackage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigDeliveryServer).GetFleetPackage(ctx, req.(*GetFleetPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigDelivery_CreateFleetPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFleetPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigDeliveryServer).CreateFleetPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigDelivery_CreateFleetPackage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigDeliveryServer).CreateFleetPackage(ctx, req.(*CreateFleetPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigDelivery_UpdateFleetPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFleetPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigDeliveryServer).UpdateFleetPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigDelivery_UpdateFleetPackage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigDeliveryServer).UpdateFleetPackage(ctx, req.(*UpdateFleetPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigDelivery_DeleteFleetPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFleetPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigDeliveryServer).DeleteFleetPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigDelivery_DeleteFleetPackage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigDeliveryServer).DeleteFleetPackage(ctx, req.(*DeleteFleetPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigDelivery_ListReleases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReleasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigDeliveryServer).ListReleases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigDelivery_ListReleases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigDeliveryServer).ListReleases(ctx, req.(*ListReleasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigDelivery_GetRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigDeliveryServer).GetRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigDelivery_GetRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigDeliveryServer).GetRelease(ctx, req.(*GetReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigDelivery_CreateRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigDeliveryServer).CreateRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigDelivery_CreateRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigDeliveryServer).CreateRelease(ctx, req.(*CreateReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigDelivery_UpdateRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigDeliveryServer).UpdateRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigDelivery_UpdateRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigDeliveryServer).UpdateRelease(ctx, req.(*UpdateReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigDelivery_DeleteRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigDeliveryServer).DeleteRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigDelivery_DeleteRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigDeliveryServer).DeleteRelease(ctx, req.(*DeleteReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigDelivery_ListVariants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVariantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigDeliveryServer).ListVariants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigDelivery_ListVariants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigDeliveryServer).ListVariants(ctx, req.(*ListVariantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigDelivery_GetVariant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVariantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigDeliveryServer).GetVariant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigDelivery_GetVariant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigDeliveryServer).GetVariant(ctx, req.(*GetVariantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigDelivery_CreateVariant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVariantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigDeliveryServer).CreateVariant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigDelivery_CreateVariant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigDeliveryServer).CreateVariant(ctx, req.(*CreateVariantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigDelivery_UpdateVariant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVariantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigDeliveryServer).UpdateVariant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigDelivery_UpdateVariant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigDeliveryServer).UpdateVariant(ctx, req.(*UpdateVariantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigDelivery_DeleteVariant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVariantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigDeliveryServer).DeleteVariant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigDelivery_DeleteVariant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigDeliveryServer).DeleteVariant(ctx, req.(*DeleteVariantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigDelivery_ListRollouts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRolloutsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigDeliveryServer).ListRollouts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigDelivery_ListRollouts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigDeliveryServer).ListRollouts(ctx, req.(*ListRolloutsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigDelivery_GetRollout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRolloutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigDeliveryServer).GetRollout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigDelivery_GetRollout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigDeliveryServer).GetRollout(ctx, req.(*GetRolloutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigDelivery_SuspendRollout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuspendRolloutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigDeliveryServer).SuspendRollout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigDelivery_SuspendRollout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigDeliveryServer).SuspendRollout(ctx, req.(*SuspendRolloutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigDelivery_ResumeRollout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeRolloutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigDeliveryServer).ResumeRollout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigDelivery_ResumeRollout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigDeliveryServer).ResumeRollout(ctx, req.(*ResumeRolloutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigDelivery_AbortRollout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortRolloutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigDeliveryServer).AbortRollout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigDelivery_AbortRollout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigDeliveryServer).AbortRollout(ctx, req.(*AbortRolloutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConfigDelivery_ServiceDesc is the grpc.ServiceDesc for ConfigDelivery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigDelivery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.configdelivery.v1.ConfigDelivery",
	HandlerType: (*ConfigDeliveryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListResourceBundles",
			Handler:    _ConfigDelivery_ListResourceBundles_Handler,
		},
		{
			MethodName: "GetResourceBundle",
			Handler:    _ConfigDelivery_GetResourceBundle_Handler,
		},
		{
			MethodName: "CreateResourceBundle",
			Handler:    _ConfigDelivery_CreateResourceBundle_Handler,
		},
		{
			MethodName: "UpdateResourceBundle",
			Handler:    _ConfigDelivery_UpdateResourceBundle_Handler,
		},
		{
			MethodName: "DeleteResourceBundle",
			Handler:    _ConfigDelivery_DeleteResourceBundle_Handler,
		},
		{
			MethodName: "ListFleetPackages",
			Handler:    _ConfigDelivery_ListFleetPackages_Handler,
		},
		{
			MethodName: "GetFleetPackage",
			Handler:    _ConfigDelivery_GetFleetPackage_Handler,
		},
		{
			MethodName: "CreateFleetPackage",
			Handler:    _ConfigDelivery_CreateFleetPackage_Handler,
		},
		{
			MethodName: "UpdateFleetPackage",
			Handler:    _ConfigDelivery_UpdateFleetPackage_Handler,
		},
		{
			MethodName: "DeleteFleetPackage",
			Handler:    _ConfigDelivery_DeleteFleetPackage_Handler,
		},
		{
			MethodName: "ListReleases",
			Handler:    _ConfigDelivery_ListReleases_Handler,
		},
		{
			MethodName: "GetRelease",
			Handler:    _ConfigDelivery_GetRelease_Handler,
		},
		{
			MethodName: "CreateRelease",
			Handler:    _ConfigDelivery_CreateRelease_Handler,
		},
		{
			MethodName: "UpdateRelease",
			Handler:    _ConfigDelivery_UpdateRelease_Handler,
		},
		{
			MethodName: "DeleteRelease",
			Handler:    _ConfigDelivery_DeleteRelease_Handler,
		},
		{
			MethodName: "ListVariants",
			Handler:    _ConfigDelivery_ListVariants_Handler,
		},
		{
			MethodName: "GetVariant",
			Handler:    _ConfigDelivery_GetVariant_Handler,
		},
		{
			MethodName: "CreateVariant",
			Handler:    _ConfigDelivery_CreateVariant_Handler,
		},
		{
			MethodName: "UpdateVariant",
			Handler:    _ConfigDelivery_UpdateVariant_Handler,
		},
		{
			MethodName: "DeleteVariant",
			Handler:    _ConfigDelivery_DeleteVariant_Handler,
		},
		{
			MethodName: "ListRollouts",
			Handler:    _ConfigDelivery_ListRollouts_Handler,
		},
		{
			MethodName: "GetRollout",
			Handler:    _ConfigDelivery_GetRollout_Handler,
		},
		{
			MethodName: "SuspendRollout",
			Handler:    _ConfigDelivery_SuspendRollout_Handler,
		},
		{
			MethodName: "ResumeRollout",
			Handler:    _ConfigDelivery_ResumeRollout_Handler,
		},
		{
			MethodName: "AbortRollout",
			Handler:    _ConfigDelivery_AbortRollout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/configdelivery/v1/config_delivery.proto",
}
