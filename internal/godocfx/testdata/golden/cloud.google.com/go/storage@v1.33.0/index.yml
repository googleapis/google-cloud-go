### YamlMime:UniversalReference
items:
    - uid: cloud.google.com/go/storage
      name: cloud.google.com/go/storage
      id: storage
      summary: |
        <p>Package storage provides an easy way to work with Google Cloud Storage.
        Google Cloud Storage stores data in named objects, which are grouped into buckets.
        <p>More information about Google Cloud Storage is available at
        <a href="https://cloud.google.com/storage/docs">https://cloud.google.com/storage/docs</a>.
        <p>See <a href="https://pkg.go.dev/cloud.google.com/go">https://pkg.go.dev/cloud.google.com/go</a> for authentication, timeouts,
        connection pooling and similar aspects of this package.
        <h2 id="hdr-Creating_a_Client">Creating a Client</h2>
        <p>To start working with this package, create a <a href="#Client">Client</a>:
        <pre class="prettyprint">ctx := context.Background()
        client, err := storage.NewClient(ctx)
        if err != nil {
            // TODO: Handle error.
        }
        </pre>
        <p>The client will use your default application credentials. Clients should be
        reused instead of created as needed. The methods of <a href="#Client">Client</a> are safe for
        concurrent use by multiple goroutines.
        <p>You may configure the client by passing in options from the <a href="https://pkg.go.dev/google.golang.org/api/option">google.golang.org/api/option</a>
        package. You may also use options defined in this package, such as <a href="#WithJSONReads">WithJSONReads</a>.
        <p>If you only wish to access public data, you can create
        an unauthenticated client with
        <pre class="prettyprint">client, err := storage.NewClient(ctx, option.WithoutAuthentication())
        </pre>
        <p>To use an emulator with this library, you can set the STORAGE_EMULATOR_HOST
        environment variable to the address at which your emulator is running. This will
        send requests to that address instead of to Cloud Storage. You can then create
        and use a client as usual:
        <pre class="prettyprint">// Set STORAGE_EMULATOR_HOST environment variable.
        err := os.Setenv(&quot;STORAGE_EMULATOR_HOST&quot;, &quot;localhost:9000&quot;)
        if err != nil {
            // TODO: Handle error.
        }

        // Create client as usual.
        client, err := storage.NewClient(ctx)
        if err != nil {
            // TODO: Handle error.
        }

        // This request is now directed to http://localhost:9000/storage/v1/b
        // instead of https://storage.googleapis.com/storage/v1/b
        if err := client.Bucket(&quot;my-bucket&quot;).Create(ctx, projectID, nil); err != nil {
            // TODO: Handle error.
        }
        </pre>
        <p>Please note that there is no official emulator for Cloud Storage.
        <h2 id="hdr-Buckets">Buckets</h2>
        <p>A Google Cloud Storage bucket is a collection of objects. To work with a
        bucket, make a bucket handle:
        <pre class="prettyprint">bkt := client.Bucket(bucketName)
        </pre>
        <p>A handle is a reference to a bucket. You can have a handle even if the
        bucket doesn&apos;t exist yet. To create a bucket in Google Cloud Storage,
        call <a href="#BucketHandle.Create">BucketHandle.Create</a>:
        <pre class="prettyprint">if err := bkt.Create(ctx, projectID, nil); err != nil {
            // TODO: Handle error.
        }
        </pre>
        <p>Note that although buckets are associated with projects, bucket names are
        global across all projects.
        <p>Each bucket has associated metadata, represented in this package by
        <a href="#BucketAttrs">BucketAttrs</a>. The third argument to <a href="#BucketHandle.Create">BucketHandle.Create</a> allows you to set
        the initial <a href="#BucketAttrs">BucketAttrs</a> of a bucket. To retrieve a bucket&apos;s attributes, use
        <a href="#BucketHandle.Attrs">BucketHandle.Attrs</a>:
        <pre class="prettyprint">attrs, err := bkt.Attrs(ctx)
        if err != nil {
            // TODO: Handle error.
        }
        fmt.Printf(&quot;bucket %s, created at %s, is located in %s with storage class %s\n&quot;,
            attrs.Name, attrs.Created, attrs.Location, attrs.StorageClass)
        </pre>
        <h2 id="hdr-Objects">Objects</h2>
        <p>An object holds arbitrary data as a sequence of bytes, like a file. You
        refer to objects using a handle, just as with buckets, but unlike buckets
        you don&apos;t explicitly create an object. Instead, the first time you write
        to an object it will be created. You can use the standard Go <a href="https://pkg.go.dev/io#Reader">io.Reader</a>
        and <a href="https://pkg.go.dev/io#Writer">io.Writer</a> interfaces to read and write object data:
        <pre class="prettyprint">obj := bkt.Object(&quot;data&quot;)
        // Write something to obj.
        // w implements io.Writer.
        w := obj.NewWriter(ctx)
        // Write some text to obj. This will either create the object or overwrite whatever is there already.
        if _, err := fmt.Fprintf(w, &quot;This object contains text.\n&quot;); err != nil {
            // TODO: Handle error.
        }
        // Close, just like writing a file.
        if err := w.Close(); err != nil {
            // TODO: Handle error.
        }

        // Read it back.
        r, err := obj.NewReader(ctx)
        if err != nil {
            // TODO: Handle error.
        }
        defer r.Close()
        if _, err := io.Copy(os.Stdout, r); err != nil {
            // TODO: Handle error.
        }
        // Prints &quot;This object contains text.&quot;
        </pre>
        <p>Objects also have attributes, which you can fetch with <a href="#ObjectHandle.Attrs">ObjectHandle.Attrs</a>:
        <pre class="prettyprint">objAttrs, err := obj.Attrs(ctx)
        if err != nil {
            // TODO: Handle error.
        }
        fmt.Printf(&quot;object %s has size %d and can be read using %s\n&quot;,
            objAttrs.Name, objAttrs.Size, objAttrs.MediaLink)
        </pre>
        <h2 id="hdr-Listing_objects">Listing objects</h2>
        <p>Listing objects in a bucket is done with the <a href="#BucketHandle.Objects">BucketHandle.Objects</a> method:
        <pre class="prettyprint">query := &amp;storage.Query{Prefix: &quot;&quot;}

        var names []string
        it := bkt.Objects(ctx, query)
        for {
            attrs, err := it.Next()
            if err == iterator.Done {
                break
            }
            if err != nil {
                log.Fatal(err)
            }
            names = append(names, attrs.Name)
        }
        </pre>
        <p>Objects are listed lexicographically by name. To filter objects
        lexicographically, [Query.StartOffset] and/or [Query.EndOffset] can be used:
        <pre class="prettyprint">query := &amp;storage.Query{
            Prefix: &quot;&quot;,
            StartOffset: &quot;bar/&quot;,  // Only list objects lexicographically &gt;= &quot;bar/&quot;
            EndOffset: &quot;foo/&quot;,    // Only list objects lexicographically &lt; &quot;foo/&quot;
        }

        // ... as before
        </pre>
        <p>If only a subset of object attributes is needed when listing, specifying this
        subset using <a href="#Query.SetAttrSelection">Query.SetAttrSelection</a> may speed up the listing process:
        <pre class="prettyprint">query := &amp;storage.Query{Prefix: &quot;&quot;}
        query.SetAttrSelection([]string{&quot;Name&quot;})

        // ... as before
        </pre>
        <h2 id="hdr-ACLs">ACLs</h2>
        <p>Both objects and buckets have ACLs (Access Control Lists). An ACL is a list of
        ACLRules, each of which specifies the role of a user, group or project. ACLs
        are suitable for fine-grained control, but you may prefer using IAM to control
        access at the project level (see <a href="https://cloud.google.com/storage/docs/access-control/iam">Cloud Storage IAM docs</a>.
        <p>To list the ACLs of a bucket or object, obtain an <a href="#ACLHandle">ACLHandle</a> and call <a href="#ACLHandle.List">ACLHandle.List</a>:
        <pre class="prettyprint">acls, err := obj.ACL().List(ctx)
        if err != nil {
            // TODO: Handle error.
        }
        for _, rule := range acls {
            fmt.Printf(&quot;%s has role %s\n&quot;, rule.Entity, rule.Role)
        }
        </pre>
        <p>You can also set and delete ACLs.
        <h2 id="hdr-Conditions">Conditions</h2>
        <p>Every object has a generation and a metageneration. The generation changes
        whenever the content changes, and the metageneration changes whenever the
        metadata changes. <a href="#Conditions">Conditions</a> let you check these values before an operation;
        the operation only executes if the conditions match. You can use conditions to
        prevent race conditions in read-modify-write operations.
        <p>For example, say you&apos;ve read an object&apos;s metadata into objAttrs. Now
        you want to write to that object, but only if its contents haven&apos;t changed
        since you read it. Here is how to express that:
        <pre class="prettyprint">w = obj.If(storage.Conditions{GenerationMatch: objAttrs.Generation}).NewWriter(ctx)
        // Proceed with writing as above.
        </pre>
        <h2 id="hdr-Signed_URLs">Signed URLs</h2>
        <p>You can obtain a URL that lets anyone read or write an object for a limited time.
        Signing a URL requires credentials authorized to sign a URL. To use the same
        authentication that was used when instantiating the Storage client, use
        <a href="#BucketHandle.SignedURL">BucketHandle.SignedURL</a>.
        <pre class="prettyprint">url, err := client.Bucket(bucketName).SignedURL(objectName, opts)
        if err != nil {
            // TODO: Handle error.
        }
        fmt.Println(url)
        </pre>
        <p>You can also sign a URL without creating a client. See the documentation of
        <a href="#SignedURL">SignedURL</a> for details.
        <pre class="prettyprint">url, err := storage.SignedURL(bucketName, &quot;shared-object&quot;, opts)
        if err != nil {
            // TODO: Handle error.
        }
        fmt.Println(url)
        </pre>
        <h2 id="hdr-Post_Policy_V4_Signed_Request">Post Policy V4 Signed Request</h2>
        <p>A type of signed request that allows uploads through HTML forms directly to Cloud Storage with
        temporary permission. Conditions can be applied to restrict how the HTML form is used and exercised
        by a user.
        <p>For more information, please see the <a href="https://cloud.google.com/storage/docs/xml-api/post-object">XML POST Object docs</a> as well
        as the documentation of <a href="#BucketHandle.GenerateSignedPostPolicyV4">BucketHandle.GenerateSignedPostPolicyV4</a>.
        <pre class="prettyprint">pv4, err := client.Bucket(bucketName).GenerateSignedPostPolicyV4(objectName, opts)
        if err != nil {
            // TODO: Handle error.
        }
        fmt.Printf(&quot;URL: %s\nFields; %v\n&quot;, pv4.URL, pv4.Fields)
        </pre>
        <h2 id="hdr-Credential_requirements_for_signing">Credential requirements for signing</h2>
        <p>If the GoogleAccessID and PrivateKey option fields are not provided, they will
        be automatically detected by <a href="#BucketHandle.SignedURL">BucketHandle.SignedURL</a> and
        <a href="#BucketHandle.GenerateSignedPostPolicyV4">BucketHandle.GenerateSignedPostPolicyV4</a> if any of the following are true:
        <ul>
        <li>you are authenticated to the Storage Client with a service account&apos;s
        downloaded private key, either directly in code or by setting the
        GOOGLE_APPLICATION_CREDENTIALS environment variable (see <a href="https://cloud.google.com/storage/docs/authentication#libauth">Other Environments</a>),
        <li>your application is running on Google Compute Engine (GCE), or
        <li>you are logged into <a href="https://cloud.google.com/sdk/gcloud/reference/auth/application-default/login">gcloud using application default credentials</a>
        with <a href="https://cloud.google.com/sdk/gcloud/reference#--impersonate-service-account">impersonation enabled</a>.
        </ul>
        <p>Detecting GoogleAccessID may not be possible if you are authenticated using a
        token source or using <a href="https://pkg.go.dev/google.golang.org/api/option#WithHTTPClient">option.WithHTTPClient</a>. In this case, you can provide a
        service account email for GoogleAccessID and the client will attempt to sign
        the URL or Post Policy using that service account.
        <p>To generate the signature, you must have:
        <ul>
        <li>iam.serviceAccounts.signBlob permissions on the GoogleAccessID service
        account, and
        <li>the <a href="https://console.developers.google.com/apis/api/iamcredentials.googleapis.com/overview">IAM Service Account Credentials API</a> enabled (unless authenticating
        with a downloaded private key).
        </ul>
        <h2 id="hdr-Errors">Errors</h2>
        <p>Errors returned by this client are often of the type <a href="https://pkg.go.dev/google.golang.org/api/googleapi#Error">googleapi.Error</a>.
        These errors can be introspected for more information by using <a href="https://pkg.go.dev/errors#As">errors.As</a>
        with the richer <a href="https://pkg.go.dev/google.golang.org/api/googleapi#Error">googleapi.Error</a> type. For example:
        <pre class="prettyprint">var e &#42;googleapi.Error
        if ok := errors.As(err, &amp;e); ok {
        	  if e.Code == 409 { ... }
        }
        </pre>
        <h2 id="hdr-Retrying_failed_requests">Retrying failed requests</h2>
        <p>Methods in this package may retry calls that fail with transient errors.
        Retrying continues indefinitely unless the controlling context is canceled, the
        client is closed, or a non-transient error is received. To stop retries from
        continuing, use context timeouts or cancellation.
        <p>The retry strategy in this library follows best practices for Cloud Storage. By
        default, operations are retried only if they are idempotent, and exponential
        backoff with jitter is employed. In addition, errors are only retried if they
        are defined as transient by the service. See the <a href="https://cloud.google.com/storage/docs/retry-strategy">Cloud Storage retry docs</a>
        for more information.
        <p>Users can configure non-default retry behavior for a single library call (using
        <a href="#BucketHandle.Retryer">BucketHandle.Retryer</a> and <a href="#ObjectHandle.Retryer">ObjectHandle.Retryer</a>) or for all calls made by a
        client (using <a href="#Client.SetRetry">Client.SetRetry</a>). For example:
        <pre class="prettyprint">o := client.Bucket(bucket).Object(object).Retryer(
        	// Use WithBackoff to change the timing of the exponential backoff.
        	storage.WithBackoff(gax.Backoff{
        		Initial:    2 &#42; time.Second,
        	}),
        	// Use WithPolicy to configure the idempotency policy. RetryAlways will
        	// retry the operation even if it is non-idempotent.
        	storage.WithPolicy(storage.RetryAlways),
        )

        // Use a context timeout to set an overall deadline on the call, including all
        // potential retries.
        ctx, cancel := context.WithTimeout(ctx, 5&#42;time.Second)
        defer cancel()

        // Delete an object using the specified strategy and timeout.
        if err := o.Delete(ctx); err != nil {
        	// Handle err.
        }
        </pre>
        <h2 id="hdr-Sending_Custom_Headers">Sending Custom Headers</h2>
        <p>You can add custom headers to any API call made by this package by using
        <a href="https://pkg.go.dev/github.com/googleapis/gax-go/v2/callctx#SetHeaders">callctx.SetHeaders</a> on the context which is passed to the method. For example,
        to add a <a href="https://cloud.google.com/storage/docs/audit-logging#add-custom-metadata">custom audit logging</a> header:
        <pre class="prettyprint">ctx := context.Background()
        ctx = callctx.SetHeaders(ctx, &quot;x-goog-custom-audit-&lt;key&gt;&quot;, &quot;&lt;value&gt;&quot;)
        // Use client as usual with the context and the additional headers will be sent.
        client.Bucket(&quot;my-bucket&quot;).Attrs(ctx)
        </pre>
        <h2 id="hdr-Experimental_gRPC_API">Experimental gRPC API</h2>
        <p>This package includes support for the Cloud Storage gRPC API, which is currently
        in preview. This implementation uses gRPC rather than the current JSON &amp; XML
        APIs to make requests to Cloud Storage. If you would like to try the API,
        please contact your GCP account rep for more information. The gRPC API is not
        yet generally available, so it may be subject to breaking changes.
        <p>To create a client which will use gRPC, use the alternate constructor:
        <pre class="prettyprint">ctx := context.Background()
        client, err := storage.NewGRPCClient(ctx)
        if err != nil {
        	// TODO: Handle error.
        }
        // Use client as usual.
        </pre>
        <p>If the application is running within GCP, users may get better performance by
        enabling DirectPath (enabling requests to skip some proxy steps). To enable,
        set the environment variable `GOOGLE_CLOUD_ENABLE_DIRECT_PATH_XDS=true` and add
        the following side-effect imports to your application:
        <pre class="prettyprint">import (
        	_ &quot;google.golang.org/grpc/balancer/rls&quot;
        	_ &quot;google.golang.org/grpc/xds/googledirectpath&quot;
        )
        </pre>
      type: package
      langs:
        - go
      children:
        - cloud.google.com/go/storage.DeleteAction,SetStorageClassAction,AbortIncompleteMPUAction
        - cloud.google.com/go/storage.NoPayload,JSONPayload
        - cloud.google.com/go/storage.ObjectFinalizeEvent,ObjectMetadataUpdateEvent,ObjectDeleteEvent,ObjectArchiveEvent
        - cloud.google.com/go/storage.ScopeFullControl,ScopeReadOnly,ScopeReadWrite
        - cloud.google.com/go/storage.ErrBucketNotExist,ErrObjectNotExist
        - cloud.google.com/go/storage.ACLEntity
        - cloud.google.com/go/storage.AllUsers,AllAuthenticatedUsers
        - cloud.google.com/go/storage.ACLHandle
        - cloud.google.com/go/storage.ACLHandle.Delete
        - cloud.google.com/go/storage.ACLHandle.List
        - cloud.google.com/go/storage.ACLHandle.Set
        - cloud.google.com/go/storage.ACLRole
        - cloud.google.com/go/storage.RoleOwner,RoleReader,RoleWriter
        - cloud.google.com/go/storage.ACLRule
        - cloud.google.com/go/storage.Autoclass
        - cloud.google.com/go/storage.BucketAttrs
        - cloud.google.com/go/storage.BucketAttrsToUpdate
        - cloud.google.com/go/storage.BucketAttrsToUpdate.DeleteLabel
        - cloud.google.com/go/storage.BucketAttrsToUpdate.SetLabel
        - cloud.google.com/go/storage.BucketConditions
        - cloud.google.com/go/storage.BucketEncryption
        - cloud.google.com/go/storage.BucketHandle
        - cloud.google.com/go/storage.BucketHandle.ACL
        - cloud.google.com/go/storage.BucketHandle.AddNotification
        - cloud.google.com/go/storage.BucketHandle.Attrs
        - cloud.google.com/go/storage.BucketHandle.Create
        - cloud.google.com/go/storage.BucketHandle.DefaultObjectACL
        - cloud.google.com/go/storage.BucketHandle.Delete
        - cloud.google.com/go/storage.BucketHandle.DeleteNotification
        - cloud.google.com/go/storage.BucketHandle.GenerateSignedPostPolicyV4
        - cloud.google.com/go/storage.BucketHandle.IAM
        - cloud.google.com/go/storage.BucketHandle.If
        - cloud.google.com/go/storage.BucketHandle.LockRetentionPolicy
        - cloud.google.com/go/storage.BucketHandle.Notifications
        - cloud.google.com/go/storage.BucketHandle.Object
        - cloud.google.com/go/storage.BucketHandle.Objects
        - cloud.google.com/go/storage.BucketHandle.Retryer
        - cloud.google.com/go/storage.BucketHandle.SignedURL
        - cloud.google.com/go/storage.BucketHandle.Update
        - cloud.google.com/go/storage.BucketHandle.UserProject
        - cloud.google.com/go/storage.BucketIterator
        - cloud.google.com/go/storage.BucketIterator.Next
        - cloud.google.com/go/storage.BucketIterator.PageInfo
        - cloud.google.com/go/storage.BucketLogging
        - cloud.google.com/go/storage.BucketPolicyOnly
        - cloud.google.com/go/storage.BucketWebsite
        - cloud.google.com/go/storage.CORS
        - cloud.google.com/go/storage.Client
        - cloud.google.com/go/storage.Client.NewClient
        - cloud.google.com/go/storage.Client.NewGRPCClient
        - cloud.google.com/go/storage.Client.Bucket
        - cloud.google.com/go/storage.Client.Buckets
        - cloud.google.com/go/storage.Client.Close
        - cloud.google.com/go/storage.Client.CreateHMACKey
        - cloud.google.com/go/storage.Client.HMACKeyHandle
        - cloud.google.com/go/storage.Client.ListHMACKeys
        - cloud.google.com/go/storage.Client.ServiceAccount
        - cloud.google.com/go/storage.Client.SetRetry
        - cloud.google.com/go/storage.Composer
        - cloud.google.com/go/storage.Composer.Run
        - cloud.google.com/go/storage.Conditions
        - cloud.google.com/go/storage.Copier
        - cloud.google.com/go/storage.Copier.Run
        - cloud.google.com/go/storage.CustomPlacementConfig
        - cloud.google.com/go/storage.HMACKey
        - cloud.google.com/go/storage.HMACKeyAttrsToUpdate
        - cloud.google.com/go/storage.HMACKeyHandle
        - cloud.google.com/go/storage.HMACKeyHandle.Delete
        - cloud.google.com/go/storage.HMACKeyHandle.Get
        - cloud.google.com/go/storage.HMACKeyHandle.Update
        - cloud.google.com/go/storage.HMACKeyOption
        - cloud.google.com/go/storage.HMACKeyOption.ForHMACKeyServiceAccountEmail
        - cloud.google.com/go/storage.HMACKeyOption.ShowDeletedHMACKeys
        - cloud.google.com/go/storage.HMACKeyOption.UserProjectForHMACKeys
        - cloud.google.com/go/storage.HMACKeysIterator
        - cloud.google.com/go/storage.HMACKeysIterator.Next
        - cloud.google.com/go/storage.HMACKeysIterator.PageInfo
        - cloud.google.com/go/storage.HMACState
        - cloud.google.com/go/storage.Active,Inactive,Deleted
        - cloud.google.com/go/storage.Lifecycle
        - cloud.google.com/go/storage.LifecycleAction
        - cloud.google.com/go/storage.LifecycleCondition
        - cloud.google.com/go/storage.LifecycleRule
        - cloud.google.com/go/storage.Liveness
        - cloud.google.com/go/storage.LiveAndArchived,Live,Archived
        - cloud.google.com/go/storage.Notification
        - cloud.google.com/go/storage.ObjectAttrs
        - cloud.google.com/go/storage.ObjectAttrsToUpdate
        - cloud.google.com/go/storage.ObjectHandle
        - cloud.google.com/go/storage.ObjectHandle.ACL
        - cloud.google.com/go/storage.ObjectHandle.Attrs
        - cloud.google.com/go/storage.ObjectHandle.BucketName
        - cloud.google.com/go/storage.ObjectHandle.ComposerFrom
        - cloud.google.com/go/storage.ObjectHandle.CopierFrom
        - cloud.google.com/go/storage.ObjectHandle.Delete
        - cloud.google.com/go/storage.ObjectHandle.Generation
        - cloud.google.com/go/storage.ObjectHandle.If
        - cloud.google.com/go/storage.ObjectHandle.Key
        - cloud.google.com/go/storage.ObjectHandle.NewRangeReader
        - cloud.google.com/go/storage.ObjectHandle.NewReader
        - cloud.google.com/go/storage.ObjectHandle.NewWriter
        - cloud.google.com/go/storage.ObjectHandle.ObjectName
        - cloud.google.com/go/storage.ObjectHandle.ReadCompressed
        - cloud.google.com/go/storage.ObjectHandle.Retryer
        - cloud.google.com/go/storage.ObjectHandle.Update
        - cloud.google.com/go/storage.ObjectIterator
        - cloud.google.com/go/storage.ObjectIterator.Next
        - cloud.google.com/go/storage.ObjectIterator.PageInfo
        - cloud.google.com/go/storage.PolicyV4Fields
        - cloud.google.com/go/storage.PostPolicyV4
        - cloud.google.com/go/storage.PostPolicyV4.GenerateSignedPostPolicyV4
        - cloud.google.com/go/storage.PostPolicyV4Condition
        - cloud.google.com/go/storage.PostPolicyV4Condition.ConditionContentLengthRange
        - cloud.google.com/go/storage.PostPolicyV4Condition.ConditionStartsWith
        - cloud.google.com/go/storage.PostPolicyV4Options
        - cloud.google.com/go/storage.ProjectTeam
        - cloud.google.com/go/storage.Projection
        - cloud.google.com/go/storage.ProjectionDefault,ProjectionFull,ProjectionNoACL
        - cloud.google.com/go/storage.Projection.String
        - cloud.google.com/go/storage.PublicAccessPrevention
        - cloud.google.com/go/storage.PublicAccessPreventionUnknown,PublicAccessPreventionUnspecified,PublicAccessPreventionEnforced,PublicAccessPreventionInherited
        - cloud.google.com/go/storage.PublicAccessPrevention.String
        - cloud.google.com/go/storage.Query
        - cloud.google.com/go/storage.Query.SetAttrSelection
        - cloud.google.com/go/storage.RPO
        - cloud.google.com/go/storage.RPOUnknown,RPODefault,RPOAsyncTurbo
        - cloud.google.com/go/storage.RPO.String
        - cloud.google.com/go/storage.Reader
        - cloud.google.com/go/storage.Reader.CacheControl
        - cloud.google.com/go/storage.Reader.Close
        - cloud.google.com/go/storage.Reader.ContentEncoding
        - cloud.google.com/go/storage.Reader.ContentType
        - cloud.google.com/go/storage.Reader.LastModified
        - cloud.google.com/go/storage.Reader.Read
        - cloud.google.com/go/storage.Reader.Remain
        - cloud.google.com/go/storage.Reader.Size
        - cloud.google.com/go/storage.ReaderObjectAttrs
        - cloud.google.com/go/storage.RetentionPolicy
        - cloud.google.com/go/storage.RetryOption
        - cloud.google.com/go/storage.RetryOption.WithBackoff
        - cloud.google.com/go/storage.RetryOption.WithErrorFunc
        - cloud.google.com/go/storage.RetryOption.WithPolicy
        - cloud.google.com/go/storage.RetryPolicy
        - cloud.google.com/go/storage.RetryIdempotent,RetryAlways,RetryNever
        - cloud.google.com/go/storage.SignedURLOptions
        - cloud.google.com/go/storage.SigningScheme
        - cloud.google.com/go/storage.SigningSchemeDefault,SigningSchemeV2,SigningSchemeV4
        - cloud.google.com/go/storage.URLStyle
        - cloud.google.com/go/storage.URLStyle.BucketBoundHostname
        - cloud.google.com/go/storage.URLStyle.PathStyle
        - cloud.google.com/go/storage.URLStyle.VirtualHostedStyle
        - cloud.google.com/go/storage.UniformBucketLevelAccess
        - cloud.google.com/go/storage.Writer
        - cloud.google.com/go/storage.Writer.Attrs
        - cloud.google.com/go/storage.Writer.Close
        - cloud.google.com/go/storage.Writer.CloseWithError
        - cloud.google.com/go/storage.Writer.Write
        - cloud.google.com/go/storage.ShouldRetry
        - cloud.google.com/go/storage.SignedURL
        - cloud.google.com/go/storage.WithJSONReads
        - cloud.google.com/go/storage.WithXMLReads
      alt_link: https://pkg.go.dev/cloud.google.com/go/storage
      friendlyApiName: Storage API
    - uid: cloud.google.com/go/storage.DeleteAction,SetStorageClassAction,AbortIncompleteMPUAction
      name: DeleteAction, SetStorageClassAction, AbortIncompleteMPUAction
      id: DeleteAction,SetStorageClassAction,AbortIncompleteMPUAction
      parent: cloud.google.com/go/storage
      type: const
      langs:
        - go
      syntax:
        content: |-
            const (

            	// DeleteAction is a lifecycle action that deletes a live and/or archived
            	// objects. Takes precedence over SetStorageClass actions.
            	DeleteAction = "Delete"

            	// SetStorageClassAction changes the storage class of live and/or archived
            	// objects.
            	SetStorageClassAction = "SetStorageClass"

            	// AbortIncompleteMPUAction is a lifecycle action that aborts an incomplete
            	// multipart upload when the multipart upload meets the conditions specified
            	// in the lifecycle rule. The AgeInDays condition is the only allowed
            	// condition for this action. AgeInDays is measured from the time the
            	// multipart upload was created.
            	AbortIncompleteMPUAction = "AbortIncompleteMultipartUpload"
            )
    - uid: cloud.google.com/go/storage.NoPayload,JSONPayload
      name: NoPayload, JSONPayload
      id: NoPayload,JSONPayload
      summary: |
        Values for Notification.PayloadFormat.
      parent: cloud.google.com/go/storage
      type: const
      langs:
        - go
      syntax:
        content: |-
            const (
            	// Send no payload with notification messages.
            	NoPayload = "NONE"

            	// Send object metadata as JSON with notification messages.
            	JSONPayload = "JSON_API_V1"
            )
    - uid: cloud.google.com/go/storage.ObjectFinalizeEvent,ObjectMetadataUpdateEvent,ObjectDeleteEvent,ObjectArchiveEvent
      name: ObjectFinalizeEvent, ObjectMetadataUpdateEvent, ObjectDeleteEvent, ObjectArchiveEvent
      id: ObjectFinalizeEvent,ObjectMetadataUpdateEvent,ObjectDeleteEvent,ObjectArchiveEvent
      summary: |
        Values for Notification.EventTypes.
      parent: cloud.google.com/go/storage
      type: const
      langs:
        - go
      syntax:
        content: |-
            const (
            	// Event that occurs when an object is successfully created.
            	ObjectFinalizeEvent = "OBJECT_FINALIZE"

            	// Event that occurs when the metadata of an existing object changes.
            	ObjectMetadataUpdateEvent = "OBJECT_METADATA_UPDATE"

            	// Event that occurs when an object is permanently deleted.
            	ObjectDeleteEvent = "OBJECT_DELETE"

            	// Event that occurs when the live version of an object becomes an
            	// archived version.
            	ObjectArchiveEvent = "OBJECT_ARCHIVE"
            )
    - uid: cloud.google.com/go/storage.ScopeFullControl,ScopeReadOnly,ScopeReadWrite
      name: ScopeFullControl, ScopeReadOnly, ScopeReadWrite
      id: ScopeFullControl,ScopeReadOnly,ScopeReadWrite
      parent: cloud.google.com/go/storage
      type: const
      langs:
        - go
      syntax:
        content: |-
            const (
            	// ScopeFullControl grants permissions to manage your
            	// data and permissions in Google Cloud Storage.
            	ScopeFullControl = <a href="https://pkg.go.dev/google.golang.org/api/storage/v1">raw</a>.<a href="https://pkg.go.dev/google.golang.org/api/storage/v1#DevstorageFullControlScope">DevstorageFullControlScope</a>

            	// ScopeReadOnly grants permissions to
            	// view your data in Google Cloud Storage.
            	ScopeReadOnly = <a href="https://pkg.go.dev/google.golang.org/api/storage/v1">raw</a>.<a href="https://pkg.go.dev/google.golang.org/api/storage/v1#DevstorageReadOnlyScope">DevstorageReadOnlyScope</a>

            	// ScopeReadWrite grants permissions to manage your
            	// data in Google Cloud Storage.
            	ScopeReadWrite = <a href="https://pkg.go.dev/google.golang.org/api/storage/v1">raw</a>.<a href="https://pkg.go.dev/google.golang.org/api/storage/v1#DevstorageReadWriteScope">DevstorageReadWriteScope</a>
            )
    - uid: cloud.google.com/go/storage.ErrBucketNotExist,ErrObjectNotExist
      name: ErrBucketNotExist, ErrObjectNotExist
      id: ErrBucketNotExist,ErrObjectNotExist
      parent: cloud.google.com/go/storage
      type: variable
      langs:
        - go
      syntax:
        content: |-
            var (
            	// ErrBucketNotExist indicates that the bucket does not exist.
            	ErrBucketNotExist = <a href="https://pkg.go.dev/errors">errors</a>.<a href="https://pkg.go.dev/errors#New">New</a>("storage: bucket doesn't exist")
            	// ErrObjectNotExist indicates that the object does not exist.
            	ErrObjectNotExist = <a href="https://pkg.go.dev/errors">errors</a>.<a href="https://pkg.go.dev/errors#New">New</a>("storage: object doesn't exist")
            )
    - uid: cloud.google.com/go/storage.ACLEntity
      name: ACLEntity
      id: ACLEntity
      summary: |
        ACLEntity refers to a user or group.
        They are sometimes referred to as grantees.

        It could be in the form of:
        "user-<userId>", "user-<email>", "group-<groupId>", "group-<email>",
        "domain-<domain>" and "project-team-<projectId>".

        Or one of the predefined constants: AllUsers, AllAuthenticatedUsers.
      parent: cloud.google.com/go/storage
      type: type
      langs:
        - go
      syntax:
        content: type ACLEntity <a href="https://pkg.go.dev/builtin#string">string</a>
    - uid: cloud.google.com/go/storage.AllUsers,AllAuthenticatedUsers
      name: AllUsers, AllAuthenticatedUsers
      id: AllUsers,AllAuthenticatedUsers
      parent: cloud.google.com/go/storage.ACLEntity
      type: const
      langs:
        - go
      syntax:
        content: |-
            const (
            	AllUsers              <a href="#cloud_google_com_go_storage_ACLEntity">ACLEntity</a> = "allUsers"
            	AllAuthenticatedUsers <a href="#cloud_google_com_go_storage_ACLEntity">ACLEntity</a> = "allAuthenticatedUsers"
            )
    - uid: cloud.google.com/go/storage.ACLHandle
      name: ACLHandle
      id: ACLHandle
      summary: |
        ACLHandle provides operations on an access control list for a Google Cloud Storage bucket or object.
        ACLHandle on an object operates on the latest generation of that object by default.
        Selecting a specific generation of an object is not currently supported by the client.
      parent: cloud.google.com/go/storage
      type: type
      langs:
        - go
      syntax:
        content: |-
            type ACLHandle struct {
            	// contains filtered or unexported fields
            }
    - uid: cloud.google.com/go/storage.ACLHandle.Delete
      name: |
        func (*ACLHandle) Delete
      id: Delete
      summary: |
        Delete permanently deletes the ACL entry for the given entity.
      parent: cloud.google.com/go/storage.ACLHandle
      type: method
      langs:
        - go
      syntax:
        content: func (a *<a href="#cloud_google_com_go_storage_ACLHandle">ACLHandle</a>) Delete(ctx <a href="https://pkg.go.dev/context">context</a>.<a href="https://pkg.go.dev/context#Context">Context</a>, entity <a href="#cloud_google_com_go_storage_ACLEntity">ACLEntity</a>) (err <a href="https://pkg.go.dev/builtin#error">error</a>)
      codeexamples:
        - content: |
            package main

            import (
            	"context"

            	"cloud.google.com/go/storage"
            )

            func main() {
            	ctx := context.Background()
            	client, err := storage.NewClient(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}
            	// No longer grant access to the bucket to everyone on the Internet.
            	if err := client.Bucket("my-bucket").ACL().Delete(ctx, storage.AllUsers); err != nil {
            		// TODO: handle error.
            	}
            }
    - uid: cloud.google.com/go/storage.ACLHandle.List
      name: |
        func (*ACLHandle) List
      id: List
      summary: |
        List retrieves ACL entries.
      parent: cloud.google.com/go/storage.ACLHandle
      type: method
      langs:
        - go
      syntax:
        content: func (a *<a href="#cloud_google_com_go_storage_ACLHandle">ACLHandle</a>) List(ctx <a href="https://pkg.go.dev/context">context</a>.<a href="https://pkg.go.dev/context#Context">Context</a>) (rules []<a href="#cloud_google_com_go_storage_ACLRule">ACLRule</a>, err <a href="https://pkg.go.dev/builtin#error">error</a>)
      codeexamples:
        - content: |
            package main

            import (
            	"context"
            	"fmt"

            	"cloud.google.com/go/storage"
            )

            func main() {
            	ctx := context.Background()
            	client, err := storage.NewClient(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}
            	// List the default object ACLs for my-bucket.
            	aclRules, err := client.Bucket("my-bucket").DefaultObjectACL().List(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}
            	fmt.Println(aclRules)
            }
    - uid: cloud.google.com/go/storage.ACLHandle.Set
      name: |
        func (*ACLHandle) Set
      id: Set
      summary: |
        Set sets the role for the given entity.
      parent: cloud.google.com/go/storage.ACLHandle
      type: method
      langs:
        - go
      syntax:
        content: func (a *<a href="#cloud_google_com_go_storage_ACLHandle">ACLHandle</a>) Set(ctx <a href="https://pkg.go.dev/context">context</a>.<a href="https://pkg.go.dev/context#Context">Context</a>, entity <a href="#cloud_google_com_go_storage_ACLEntity">ACLEntity</a>, role <a href="#cloud_google_com_go_storage_ACLRole">ACLRole</a>) (err <a href="https://pkg.go.dev/builtin#error">error</a>)
      codeexamples:
        - content: |
            package main

            import (
            	"context"

            	"cloud.google.com/go/storage"
            )

            func main() {
            	ctx := context.Background()
            	client, err := storage.NewClient(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}
            	// Let any authenticated user read my-bucket/my-object.
            	obj := client.Bucket("my-bucket").Object("my-object")
            	if err := obj.ACL().Set(ctx, storage.AllAuthenticatedUsers, storage.RoleReader); err != nil {
            		// TODO: handle error.
            	}
            }
    - uid: cloud.google.com/go/storage.ACLRole
      name: ACLRole
      id: ACLRole
      summary: |
        ACLRole is the level of access to grant.
      parent: cloud.google.com/go/storage
      type: type
      langs:
        - go
      syntax:
        content: type ACLRole <a href="https://pkg.go.dev/builtin#string">string</a>
    - uid: cloud.google.com/go/storage.RoleOwner,RoleReader,RoleWriter
      name: RoleOwner, RoleReader, RoleWriter
      id: RoleOwner,RoleReader,RoleWriter
      parent: cloud.google.com/go/storage.ACLRole
      type: const
      langs:
        - go
      syntax:
        content: |-
            const (
            	RoleOwner  <a href="#cloud_google_com_go_storage_ACLRole">ACLRole</a> = "OWNER"
            	RoleReader <a href="#cloud_google_com_go_storage_ACLRole">ACLRole</a> = "READER"
            	RoleWriter <a href="#cloud_google_com_go_storage_ACLRole">ACLRole</a> = "WRITER"
            )
    - uid: cloud.google.com/go/storage.ACLRule
      name: ACLRule
      id: ACLRule
      summary: |
        ACLRule represents a grant for a role to an entity (user, group or team) for a
        Google Cloud Storage object or bucket.
      parent: cloud.google.com/go/storage
      type: type
      langs:
        - go
      syntax:
        content: |-
            type ACLRule struct {
            	Entity      <a href="#cloud_google_com_go_storage_ACLEntity">ACLEntity</a>
            	EntityID    <a href="https://pkg.go.dev/builtin#string">string</a>
            	Role        <a href="#cloud_google_com_go_storage_ACLRole">ACLRole</a>
            	Domain      <a href="https://pkg.go.dev/builtin#string">string</a>
            	Email       <a href="https://pkg.go.dev/builtin#string">string</a>
            	ProjectTeam *<a href="#cloud_google_com_go_storage_ProjectTeam">ProjectTeam</a>
            }
    - uid: cloud.google.com/go/storage.Autoclass
      name: Autoclass
      id: Autoclass
      summary: |
        Autoclass holds the bucket's autoclass configuration. If enabled,
        allows for the automatic selection of the best storage class
        based on object access patterns. See
        https://cloud.google.com/storage/docs/using-autoclass for more information.
      parent: cloud.google.com/go/storage
      type: type
      langs:
        - go
      syntax:
        content: |-
            type Autoclass struct {
            	// Enabled specifies whether the autoclass feature is enabled
            	// on the bucket.
            	Enabled <a href="https://pkg.go.dev/builtin#bool">bool</a>
            	// ToggleTime is the time from which Autoclass was last toggled.
            	// If Autoclass is enabled when the bucket is created, the ToggleTime
            	// is set to the bucket creation time. This field is read-only.
            	ToggleTime <a href="https://pkg.go.dev/time">time</a>.<a href="https://pkg.go.dev/time#Time">Time</a>
            }
    - uid: cloud.google.com/go/storage.BucketAttrs
      name: BucketAttrs
      id: BucketAttrs
      summary: |
        BucketAttrs represents the metadata for a Google Cloud Storage bucket.
        Read-only fields are ignored by BucketHandle.Create.
      parent: cloud.google.com/go/storage
      type: type
      langs:
        - go
      syntax:
        content: |-
            type BucketAttrs struct {
            	// Name is the name of the bucket.
            	// This field is read-only.
            	Name <a href="https://pkg.go.dev/builtin#string">string</a>

            	// ACL is the list of access control rules on the bucket.
            	ACL []<a href="#cloud_google_com_go_storage_ACLRule">ACLRule</a>

            	// BucketPolicyOnly is an alias for UniformBucketLevelAccess. Use of
            	// UniformBucketLevelAccess is recommended above the use of this field.
            	// Setting BucketPolicyOnly.Enabled OR UniformBucketLevelAccess.Enabled to
            	// true, will enable UniformBucketLevelAccess.
            	BucketPolicyOnly <a href="#cloud_google_com_go_storage_BucketPolicyOnly">BucketPolicyOnly</a>

            	// UniformBucketLevelAccess configures access checks to use only bucket-level IAM
            	// policies and ignore any ACL rules for the bucket.
            	// See https://cloud.google.com/storage/docs/uniform-bucket-level-access
            	// for more information.
            	UniformBucketLevelAccess <a href="#cloud_google_com_go_storage_UniformBucketLevelAccess">UniformBucketLevelAccess</a>

            	// PublicAccessPrevention is the setting for the bucket's
            	// PublicAccessPrevention policy, which can be used to prevent public access
            	// of data in the bucket. See
            	// https://cloud.google.com/storage/docs/public-access-prevention for more
            	// information.
            	PublicAccessPrevention <a href="#cloud_google_com_go_storage_PublicAccessPrevention">PublicAccessPrevention</a>

            	// DefaultObjectACL is the list of access controls to
            	// apply to new objects when no object ACL is provided.
            	DefaultObjectACL []<a href="#cloud_google_com_go_storage_ACLRule">ACLRule</a>

            	// DefaultEventBasedHold is the default value for event-based hold on
            	// newly created objects in this bucket. It defaults to false.
            	DefaultEventBasedHold <a href="https://pkg.go.dev/builtin#bool">bool</a>

            	// If not empty, applies a predefined set of access controls. It should be set
            	// only when creating a bucket.
            	// It is always empty for BucketAttrs returned from the service.
            	// See https://cloud.google.com/storage/docs/json_api/v1/buckets/insert
            	// for valid values.
            	PredefinedACL <a href="https://pkg.go.dev/builtin#string">string</a>

            	// If not empty, applies a predefined set of default object access controls.
            	// It should be set only when creating a bucket.
            	// It is always empty for BucketAttrs returned from the service.
            	// See https://cloud.google.com/storage/docs/json_api/v1/buckets/insert
            	// for valid values.
            	PredefinedDefaultObjectACL <a href="https://pkg.go.dev/builtin#string">string</a>

            	// Location is the location of the bucket. It defaults to "US".
            	// If specifying a dual-region, CustomPlacementConfig should be set in conjunction.
            	Location <a href="https://pkg.go.dev/builtin#string">string</a>

            	// The bucket's custom placement configuration that holds a list of
            	// regional locations for custom dual regions.
            	CustomPlacementConfig *<a href="#cloud_google_com_go_storage_CustomPlacementConfig">CustomPlacementConfig</a>

            	// MetaGeneration is the metadata generation of the bucket.
            	// This field is read-only.
            	MetaGeneration <a href="https://pkg.go.dev/builtin#int64">int64</a>

            	// StorageClass is the default storage class of the bucket. This defines
            	// how objects in the bucket are stored and determines the SLA
            	// and the cost of storage. Typical values are "STANDARD", "NEARLINE",
            	// "COLDLINE" and "ARCHIVE". Defaults to "STANDARD".
            	// See https://cloud.google.com/storage/docs/storage-classes for all
            	// valid values.
            	StorageClass <a href="https://pkg.go.dev/builtin#string">string</a>

            	// Created is the creation time of the bucket.
            	// This field is read-only.
            	Created <a href="https://pkg.go.dev/time">time</a>.<a href="https://pkg.go.dev/time#Time">Time</a>

            	// VersioningEnabled reports whether this bucket has versioning enabled.
            	VersioningEnabled <a href="https://pkg.go.dev/builtin#bool">bool</a>

            	// Labels are the bucket's labels.
            	Labels map[<a href="https://pkg.go.dev/builtin#string">string</a>]<a href="https://pkg.go.dev/builtin#string">string</a>

            	// RequesterPays reports whether the bucket is a Requester Pays bucket.
            	// Clients performing operations on Requester Pays buckets must provide
            	// a user project (see BucketHandle.UserProject), which will be billed
            	// for the operations.
            	RequesterPays <a href="https://pkg.go.dev/builtin#bool">bool</a>

            	// Lifecycle is the lifecycle configuration for objects in the bucket.
            	Lifecycle <a href="#cloud_google_com_go_storage_Lifecycle">Lifecycle</a>

            	// Retention policy enforces a minimum retention time for all objects
            	// contained in the bucket. A RetentionPolicy of nil implies the bucket
            	// has no minimum data retention.
            	//
            	// This feature is in private alpha release. It is not currently available to
            	// most customers. It might be changed in backwards-incompatible ways and is not
            	// subject to any SLA or deprecation policy.
            	RetentionPolicy *<a href="#cloud_google_com_go_storage_RetentionPolicy">RetentionPolicy</a>

            	// The bucket's Cross-Origin Resource Sharing (CORS) configuration.
            	CORS []<a href="#cloud_google_com_go_storage_CORS">CORS</a>

            	// The encryption configuration used by default for newly inserted objects.
            	Encryption *<a href="#cloud_google_com_go_storage_BucketEncryption">BucketEncryption</a>

            	// The logging configuration.
            	Logging *<a href="#cloud_google_com_go_storage_BucketLogging">BucketLogging</a>

            	// The website configuration.
            	Website *<a href="#cloud_google_com_go_storage_BucketWebsite">BucketWebsite</a>

            	// Etag is the HTTP/1.1 Entity tag for the bucket.
            	// This field is read-only.
            	Etag <a href="https://pkg.go.dev/builtin#string">string</a>

            	// LocationType describes how data is stored and replicated.
            	// Typical values are "multi-region", "region" and "dual-region".
            	// This field is read-only.
            	LocationType <a href="https://pkg.go.dev/builtin#string">string</a>

            	// The project number of the project the bucket belongs to.
            	// This field is read-only.
            	ProjectNumber <a href="https://pkg.go.dev/builtin#uint64">uint64</a>

            	// RPO configures the Recovery Point Objective (RPO) policy of the bucket.
            	// Set to RPOAsyncTurbo to turn on Turbo Replication for a bucket.
            	// See https://cloud.google.com/storage/docs/managing-turbo-replication for
            	// more information.
            	RPO <a href="#cloud_google_com_go_storage_RPO">RPO</a>

            	// Autoclass holds the bucket's autoclass configuration. If enabled,
            	// allows for the automatic selection of the best storage class
            	// based on object access patterns.
            	Autoclass *<a href="#cloud_google_com_go_storage_Autoclass">Autoclass</a>
            }
    - uid: cloud.google.com/go/storage.BucketAttrsToUpdate
      name: BucketAttrsToUpdate
      id: BucketAttrsToUpdate
      summary: |
        BucketAttrsToUpdate define the attributes to update during an Update call.
      parent: cloud.google.com/go/storage
      type: type
      langs:
        - go
      syntax:
        content: |-
            type BucketAttrsToUpdate struct {
            	// If set, updates whether the bucket uses versioning.
            	VersioningEnabled <a href="https://pkg.go.dev/cloud.google.com/go/internal/optional">optional</a>.<a href="https://pkg.go.dev/cloud.google.com/go/internal/optional#Bool">Bool</a>

            	// If set, updates whether the bucket is a Requester Pays bucket.
            	RequesterPays <a href="https://pkg.go.dev/cloud.google.com/go/internal/optional">optional</a>.<a href="https://pkg.go.dev/cloud.google.com/go/internal/optional#Bool">Bool</a>

            	// DefaultEventBasedHold is the default value for event-based hold on
            	// newly created objects in this bucket.
            	DefaultEventBasedHold <a href="https://pkg.go.dev/cloud.google.com/go/internal/optional">optional</a>.<a href="https://pkg.go.dev/cloud.google.com/go/internal/optional#Bool">Bool</a>

            	// BucketPolicyOnly is an alias for UniformBucketLevelAccess. Use of
            	// UniformBucketLevelAccess is recommended above the use of this field.
            	// Setting BucketPolicyOnly.Enabled OR UniformBucketLevelAccess.Enabled to
            	// true, will enable UniformBucketLevelAccess. If both BucketPolicyOnly and
            	// UniformBucketLevelAccess are set, the value of UniformBucketLevelAccess
            	// will take precedence.
            	BucketPolicyOnly *<a href="#cloud_google_com_go_storage_BucketPolicyOnly">BucketPolicyOnly</a>

            	// UniformBucketLevelAccess configures access checks to use only bucket-level IAM
            	// policies and ignore any ACL rules for the bucket.
            	// See https://cloud.google.com/storage/docs/uniform-bucket-level-access
            	// for more information.
            	UniformBucketLevelAccess *<a href="#cloud_google_com_go_storage_UniformBucketLevelAccess">UniformBucketLevelAccess</a>

            	// PublicAccessPrevention is the setting for the bucket's
            	// PublicAccessPrevention policy, which can be used to prevent public access
            	// of data in the bucket. See
            	// https://cloud.google.com/storage/docs/public-access-prevention for more
            	// information.
            	PublicAccessPrevention <a href="#cloud_google_com_go_storage_PublicAccessPrevention">PublicAccessPrevention</a>

            	// StorageClass is the default storage class of the bucket. This defines
            	// how objects in the bucket are stored and determines the SLA
            	// and the cost of storage. Typical values are "STANDARD", "NEARLINE",
            	// "COLDLINE" and "ARCHIVE". Defaults to "STANDARD".
            	// See https://cloud.google.com/storage/docs/storage-classes for all
            	// valid values.
            	StorageClass <a href="https://pkg.go.dev/builtin#string">string</a>

            	// If set, updates the retention policy of the bucket. Using
            	// RetentionPolicy.RetentionPeriod = 0 will delete the existing policy.
            	//
            	// This feature is in private alpha release. It is not currently available to
            	// most customers. It might be changed in backwards-incompatible ways and is not
            	// subject to any SLA or deprecation policy.
            	RetentionPolicy *<a href="#cloud_google_com_go_storage_RetentionPolicy">RetentionPolicy</a>

            	// If set, replaces the CORS configuration with a new configuration.
            	// An empty (rather than nil) slice causes all CORS policies to be removed.
            	CORS []<a href="#cloud_google_com_go_storage_CORS">CORS</a>

            	// If set, replaces the encryption configuration of the bucket. Using
            	// BucketEncryption.DefaultKMSKeyName = "" will delete the existing
            	// configuration.
            	Encryption *<a href="#cloud_google_com_go_storage_BucketEncryption">BucketEncryption</a>

            	// If set, replaces the lifecycle configuration of the bucket.
            	Lifecycle *<a href="#cloud_google_com_go_storage_Lifecycle">Lifecycle</a>

            	// If set, replaces the logging configuration of the bucket.
            	Logging *<a href="#cloud_google_com_go_storage_BucketLogging">BucketLogging</a>

            	// If set, replaces the website configuration of the bucket.
            	Website *<a href="#cloud_google_com_go_storage_BucketWebsite">BucketWebsite</a>

            	// If not empty, applies a predefined set of access controls.
            	// See https://cloud.google.com/storage/docs/json_api/v1/buckets/patch.
            	PredefinedACL <a href="https://pkg.go.dev/builtin#string">string</a>

            	// If not empty, applies a predefined set of default object access controls.
            	// See https://cloud.google.com/storage/docs/json_api/v1/buckets/patch.
            	PredefinedDefaultObjectACL <a href="https://pkg.go.dev/builtin#string">string</a>

            	// RPO configures the Recovery Point Objective (RPO) policy of the bucket.
            	// Set to RPOAsyncTurbo to turn on Turbo Replication for a bucket.
            	// See https://cloud.google.com/storage/docs/managing-turbo-replication for
            	// more information.
            	RPO <a href="#cloud_google_com_go_storage_RPO">RPO</a>

            	// If set, updates the autoclass configuration of the bucket.
            	// See https://cloud.google.com/storage/docs/using-autoclass for more information.
            	Autoclass *<a href="#cloud_google_com_go_storage_Autoclass">Autoclass</a>
            	// contains filtered or unexported fields
            }
    - uid: cloud.google.com/go/storage.BucketAttrsToUpdate.DeleteLabel
      name: |
        func (*BucketAttrsToUpdate) DeleteLabel
      id: DeleteLabel
      summary: |
        DeleteLabel causes a label to be deleted when ua is used in a
        call to Bucket.Update.
      parent: cloud.google.com/go/storage.BucketAttrsToUpdate
      type: method
      langs:
        - go
      syntax:
        content: func (ua *<a href="#cloud_google_com_go_storage_BucketAttrsToUpdate">BucketAttrsToUpdate</a>) DeleteLabel(name <a href="https://pkg.go.dev/builtin#string">string</a>)
    - uid: cloud.google.com/go/storage.BucketAttrsToUpdate.SetLabel
      name: |
        func (*BucketAttrsToUpdate) SetLabel
      id: SetLabel
      summary: |
        SetLabel causes a label to be added or modified when ua is used
        in a call to Bucket.Update.
      parent: cloud.google.com/go/storage.BucketAttrsToUpdate
      type: method
      langs:
        - go
      syntax:
        content: func (ua *<a href="#cloud_google_com_go_storage_BucketAttrsToUpdate">BucketAttrsToUpdate</a>) SetLabel(name, value <a href="https://pkg.go.dev/builtin#string">string</a>)
    - uid: cloud.google.com/go/storage.BucketConditions
      name: BucketConditions
      id: BucketConditions
      summary: |
        BucketConditions constrain bucket methods to act on specific metagenerations.

        The zero value is an empty set of constraints.
      parent: cloud.google.com/go/storage
      type: type
      langs:
        - go
      syntax:
        content: |-
            type BucketConditions struct {
            	// MetagenerationMatch specifies that the bucket must have the given
            	// metageneration for the operation to occur.
            	// If MetagenerationMatch is zero, it has no effect.
            	MetagenerationMatch <a href="https://pkg.go.dev/builtin#int64">int64</a>

            	// MetagenerationNotMatch specifies that the bucket must not have the given
            	// metageneration for the operation to occur.
            	// If MetagenerationNotMatch is zero, it has no effect.
            	MetagenerationNotMatch <a href="https://pkg.go.dev/builtin#int64">int64</a>
            }
    - uid: cloud.google.com/go/storage.BucketEncryption
      name: BucketEncryption
      id: BucketEncryption
      summary: |
        BucketEncryption is a bucket's encryption configuration.
      parent: cloud.google.com/go/storage
      type: type
      langs:
        - go
      syntax:
        content: |-
            type BucketEncryption struct {
            	// A Cloud KMS key name, in the form
            	// projects/P/locations/L/keyRings/R/cryptoKeys/K, that will be used to encrypt
            	// objects inserted into this bucket, if no encryption method is specified.
            	// The key's location must be the same as the bucket's.
            	DefaultKMSKeyName <a href="https://pkg.go.dev/builtin#string">string</a>
            }
    - uid: cloud.google.com/go/storage.BucketHandle
      name: BucketHandle
      id: BucketHandle
      summary: |
        BucketHandle provides operations on a Google Cloud Storage bucket.
        Use Client.Bucket to get a handle.
      parent: cloud.google.com/go/storage
      type: type
      langs:
        - go
      syntax:
        content: |-
            type BucketHandle struct {
            	// contains filtered or unexported fields
            }
      codeexamples:
        - content: |
            package main

            import (
            	"context"
            	"fmt"

            	"cloud.google.com/go/storage"
            )

            func main() {
            	ctx := context.Background()
            	client, err := storage.NewClient(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}

            	attrs, err := client.Bucket("my-bucket").Attrs(ctx)
            	if err == storage.ErrBucketNotExist {
            		fmt.Println("The bucket does not exist")
            		return
            	}
            	if err != nil {
            		// TODO: handle error.
            	}
            	fmt.Printf("The bucket exists and has attributes: %#v\n", attrs)
            }
          name: exists
    - uid: cloud.google.com/go/storage.BucketHandle.ACL
      name: |
        func (*BucketHandle) ACL
      id: ACL
      summary: |
        ACL returns an ACLHandle, which provides access to the bucket's access control list.
        This controls who can list, create or overwrite the objects in a bucket.
        This call does not perform any network operations.
      parent: cloud.google.com/go/storage.BucketHandle
      type: method
      langs:
        - go
      syntax:
        content: func (b *<a href="#cloud_google_com_go_storage_BucketHandle">BucketHandle</a>) ACL() *<a href="#cloud_google_com_go_storage_ACLHandle">ACLHandle</a>
    - uid: cloud.google.com/go/storage.BucketHandle.AddNotification
      name: |
        func (*BucketHandle) AddNotification
      id: AddNotification
      summary: |
        AddNotification adds a notification to b. You must set n's TopicProjectID, TopicID
        and PayloadFormat, and must not set its ID. The other fields are all optional. The
        returned Notification's ID can be used to refer to it.
      parent: cloud.google.com/go/storage.BucketHandle
      type: method
      langs:
        - go
      syntax:
        content: func (b *<a href="#cloud_google_com_go_storage_BucketHandle">BucketHandle</a>) AddNotification(ctx <a href="https://pkg.go.dev/context">context</a>.<a href="https://pkg.go.dev/context#Context">Context</a>, n *<a href="#cloud_google_com_go_storage_Notification">Notification</a>) (ret *<a href="#cloud_google_com_go_storage_Notification">Notification</a>, err <a href="https://pkg.go.dev/builtin#error">error</a>)
      codeexamples:
        - content: |
            package main

            import (
            	"context"
            	"fmt"

            	"cloud.google.com/go/storage"
            )

            func main() {
            	ctx := context.Background()
            	client, err := storage.NewClient(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}
            	b := client.Bucket("my-bucket")
            	n, err := b.AddNotification(ctx, &storage.Notification{
            		TopicProjectID: "my-project",
            		TopicID:        "my-topic",
            		PayloadFormat:  storage.JSONPayload,
            	})
            	if err != nil {
            		// TODO: handle error.
            	}
            	fmt.Println(n.ID)
            }
    - uid: cloud.google.com/go/storage.BucketHandle.Attrs
      name: |
        func (*BucketHandle) Attrs
      id: Attrs
      summary: |
        Attrs returns the metadata for the bucket.
      parent: cloud.google.com/go/storage.BucketHandle
      type: method
      langs:
        - go
      syntax:
        content: func (b *<a href="#cloud_google_com_go_storage_BucketHandle">BucketHandle</a>) Attrs(ctx <a href="https://pkg.go.dev/context">context</a>.<a href="https://pkg.go.dev/context#Context">Context</a>) (attrs *<a href="#cloud_google_com_go_storage_BucketAttrs">BucketAttrs</a>, err <a href="https://pkg.go.dev/builtin#error">error</a>)
      codeexamples:
        - content: |
            package main

            import (
            	"context"
            	"fmt"

            	"cloud.google.com/go/storage"
            )

            func main() {
            	ctx := context.Background()
            	client, err := storage.NewClient(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}
            	attrs, err := client.Bucket("my-bucket").Attrs(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}
            	fmt.Println(attrs)
            }
    - uid: cloud.google.com/go/storage.BucketHandle.Create
      name: |
        func (*BucketHandle) Create
      id: Create
      summary: |
        Create creates the Bucket in the project.
        If attrs is nil the API defaults will be used.
      parent: cloud.google.com/go/storage.BucketHandle
      type: method
      langs:
        - go
      syntax:
        content: func (b *<a href="#cloud_google_com_go_storage_BucketHandle">BucketHandle</a>) Create(ctx <a href="https://pkg.go.dev/context">context</a>.<a href="https://pkg.go.dev/context#Context">Context</a>, projectID <a href="https://pkg.go.dev/builtin#string">string</a>, attrs *<a href="#cloud_google_com_go_storage_BucketAttrs">BucketAttrs</a>) (err <a href="https://pkg.go.dev/builtin#error">error</a>)
      codeexamples:
        - content: |
            package main

            import (
            	"context"

            	"cloud.google.com/go/storage"
            )

            func main() {
            	ctx := context.Background()
            	client, err := storage.NewClient(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}
            	if err := client.Bucket("my-bucket").Create(ctx, "my-project", nil); err != nil {
            		// TODO: handle error.
            	}
            }
    - uid: cloud.google.com/go/storage.BucketHandle.DefaultObjectACL
      name: |
        func (*BucketHandle) DefaultObjectACL
      id: DefaultObjectACL
      summary: |
        DefaultObjectACL returns an ACLHandle, which provides access to the bucket's default object ACLs.
        These ACLs are applied to newly created objects in this bucket that do not have a defined ACL.
        This call does not perform any network operations.
      parent: cloud.google.com/go/storage.BucketHandle
      type: method
      langs:
        - go
      syntax:
        content: func (b *<a href="#cloud_google_com_go_storage_BucketHandle">BucketHandle</a>) DefaultObjectACL() *<a href="#cloud_google_com_go_storage_ACLHandle">ACLHandle</a>
    - uid: cloud.google.com/go/storage.BucketHandle.Delete
      name: |
        func (*BucketHandle) Delete
      id: Delete
      summary: |
        Delete deletes the Bucket.
      parent: cloud.google.com/go/storage.BucketHandle
      type: method
      langs:
        - go
      syntax:
        content: func (b *<a href="#cloud_google_com_go_storage_BucketHandle">BucketHandle</a>) Delete(ctx <a href="https://pkg.go.dev/context">context</a>.<a href="https://pkg.go.dev/context#Context">Context</a>) (err <a href="https://pkg.go.dev/builtin#error">error</a>)
      codeexamples:
        - content: |
            package main

            import (
            	"context"

            	"cloud.google.com/go/storage"
            )

            func main() {
            	ctx := context.Background()
            	client, err := storage.NewClient(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}
            	if err := client.Bucket("my-bucket").Delete(ctx); err != nil {
            		// TODO: handle error.
            	}
            }
    - uid: cloud.google.com/go/storage.BucketHandle.DeleteNotification
      name: |
        func (*BucketHandle) DeleteNotification
      id: DeleteNotification
      summary: |
        DeleteNotification deletes the notification with the given ID.
      parent: cloud.google.com/go/storage.BucketHandle
      type: method
      langs:
        - go
      syntax:
        content: func (b *<a href="#cloud_google_com_go_storage_BucketHandle">BucketHandle</a>) DeleteNotification(ctx <a href="https://pkg.go.dev/context">context</a>.<a href="https://pkg.go.dev/context#Context">Context</a>, id <a href="https://pkg.go.dev/builtin#string">string</a>) (err <a href="https://pkg.go.dev/builtin#error">error</a>)
      codeexamples:
        - content: |
            package main

            import (
            	"context"

            	"cloud.google.com/go/storage"
            )

            var notificationID string

            func main() {
            	ctx := context.Background()
            	client, err := storage.NewClient(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}
            	b := client.Bucket("my-bucket")
            	// TODO: Obtain notificationID from BucketHandle.AddNotification
            	// or BucketHandle.Notifications.
            	err = b.DeleteNotification(ctx, notificationID)
            	if err != nil {
            		// TODO: handle error.
            	}
            }
    - uid: cloud.google.com/go/storage.BucketHandle.GenerateSignedPostPolicyV4
      name: |
        func (*BucketHandle) GenerateSignedPostPolicyV4
      id: GenerateSignedPostPolicyV4
      summary: |
        GenerateSignedPostPolicyV4 generates a PostPolicyV4 value from bucket, object and opts.
        The generated URL and fields will then allow an unauthenticated client to perform multipart uploads.

        This method requires the Expires field in the specified PostPolicyV4Options
        to be non-nil. You may need to set the GoogleAccessID and PrivateKey fields
        in some cases. Read more on the [automatic detection of credentials] for this method.

        [automatic detection of credentials]: https://pkg.go.dev/cloud.google.com/go/storage#hdr-Credential_requirements_for_signing
      parent: cloud.google.com/go/storage.BucketHandle
      type: method
      langs:
        - go
      syntax:
        content: func (b *<a href="#cloud_google_com_go_storage_BucketHandle">BucketHandle</a>) GenerateSignedPostPolicyV4(object <a href="https://pkg.go.dev/builtin#string">string</a>, opts *<a href="#cloud_google_com_go_storage_PostPolicyV4Options">PostPolicyV4Options</a>) (*<a href="#cloud_google_com_go_storage_PostPolicyV4">PostPolicyV4</a>, <a href="https://pkg.go.dev/builtin#error">error</a>)
    - uid: cloud.google.com/go/storage.BucketHandle.IAM
      name: |
        func (*BucketHandle) IAM
      id: IAM
      summary: |
        IAM provides access to IAM access control for the bucket.
      parent: cloud.google.com/go/storage.BucketHandle
      type: method
      langs:
        - go
      syntax:
        content: func (b *<a href="#cloud_google_com_go_storage_BucketHandle">BucketHandle</a>) IAM() *<a href="/go/docs/reference/cloud.google.com/go/iam/latest/">iam</a>.<a href="/go/docs/reference/cloud.google.com/go/iam/latest/#cloud_google_com_go_iam_Handle">Handle</a>
    - uid: cloud.google.com/go/storage.BucketHandle.If
      name: |
        func (*BucketHandle) If
      id: If
      summary: |
        If returns a new BucketHandle that applies a set of preconditions.
        Preconditions already set on the BucketHandle are ignored. The supplied
        BucketConditions must have exactly one field set to a non-zero value;
        otherwise an error will be returned from any operation on the BucketHandle.
        Operations on the new handle will return an error if the preconditions are not
        satisfied. The only valid preconditions for buckets are MetagenerationMatch
        and MetagenerationNotMatch.
      parent: cloud.google.com/go/storage.BucketHandle
      type: method
      langs:
        - go
      syntax:
        content: func (b *<a href="#cloud_google_com_go_storage_BucketHandle">BucketHandle</a>) If(conds <a href="#cloud_google_com_go_storage_BucketConditions">BucketConditions</a>) *<a href="#cloud_google_com_go_storage_BucketHandle">BucketHandle</a>
    - uid: cloud.google.com/go/storage.BucketHandle.LockRetentionPolicy
      name: |
        func (*BucketHandle) LockRetentionPolicy
      id: LockRetentionPolicy
      summary: |
        LockRetentionPolicy locks a bucket's retention policy until a previously-configured
        RetentionPeriod past the EffectiveTime. Note that if RetentionPeriod is set to less
        than a day, the retention policy is treated as a development configuration and locking
        will have no effect. The BucketHandle must have a metageneration condition that
        matches the bucket's metageneration. See BucketHandle.If.

        This feature is in private alpha release. It is not currently available to
        most customers. It might be changed in backwards-incompatible ways and is not
        subject to any SLA or deprecation policy.
      parent: cloud.google.com/go/storage.BucketHandle
      type: method
      langs:
        - go
      syntax:
        content: func (b *<a href="#cloud_google_com_go_storage_BucketHandle">BucketHandle</a>) LockRetentionPolicy(ctx <a href="https://pkg.go.dev/context">context</a>.<a href="https://pkg.go.dev/context#Context">Context</a>) <a href="https://pkg.go.dev/builtin#error">error</a>
      codeexamples:
        - content: |
            package main

            import (
            	"context"

            	"cloud.google.com/go/storage"
            )

            func main() {
            	ctx := context.Background()
            	client, err := storage.NewClient(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}
            	b := client.Bucket("my-bucket")
            	attrs, err := b.Attrs(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}
            	// Note that locking the bucket without first attaching a RetentionPolicy
            	// that's at least 1 day is a no-op
            	err = b.If(storage.BucketConditions{MetagenerationMatch: attrs.MetaGeneration}).LockRetentionPolicy(ctx)
            	if err != nil {
            		// TODO: handle err
            	}
            }
    - uid: cloud.google.com/go/storage.BucketHandle.Notifications
      name: |
        func (*BucketHandle) Notifications
      id: Notifications
      summary: |
        Notifications returns all the Notifications configured for this bucket, as a map
        indexed by notification ID.
      parent: cloud.google.com/go/storage.BucketHandle
      type: method
      langs:
        - go
      syntax:
        content: func (b *<a href="#cloud_google_com_go_storage_BucketHandle">BucketHandle</a>) Notifications(ctx <a href="https://pkg.go.dev/context">context</a>.<a href="https://pkg.go.dev/context#Context">Context</a>) (n map[<a href="https://pkg.go.dev/builtin#string">string</a>]*<a href="#cloud_google_com_go_storage_Notification">Notification</a>, err <a href="https://pkg.go.dev/builtin#error">error</a>)
      codeexamples:
        - content: |
            package main

            import (
            	"context"
            	"fmt"

            	"cloud.google.com/go/storage"
            )

            func main() {
            	ctx := context.Background()
            	client, err := storage.NewClient(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}
            	b := client.Bucket("my-bucket")
            	ns, err := b.Notifications(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}
            	for id, n := range ns {
            		fmt.Printf("%s: %+v\n", id, n)
            	}
            }
    - uid: cloud.google.com/go/storage.BucketHandle.Object
      name: |
        func (*BucketHandle) Object
      id: Object
      summary: |
        Object returns an ObjectHandle, which provides operations on the named object.
        This call does not perform any network operations such as fetching the object or verifying its existence.
        Use methods on ObjectHandle to perform network operations.

        name must consist entirely of valid UTF-8-encoded runes. The full specification
        for valid object names can be found at:

        	https://cloud.google.com/storage/docs/naming-objects
      parent: cloud.google.com/go/storage.BucketHandle
      type: method
      langs:
        - go
      syntax:
        content: func (b *<a href="#cloud_google_com_go_storage_BucketHandle">BucketHandle</a>) Object(name <a href="https://pkg.go.dev/builtin#string">string</a>) *<a href="#cloud_google_com_go_storage_ObjectHandle">ObjectHandle</a>
    - uid: cloud.google.com/go/storage.BucketHandle.Objects
      name: |
        func (*BucketHandle) Objects
      id: Objects
      summary: |
        Objects returns an iterator over the objects in the bucket that match the
        Query q. If q is nil, no filtering is done. Objects will be iterated over
        lexicographically by name.

        Note: The returned iterator is not safe for concurrent operations without explicit synchronization.
      parent: cloud.google.com/go/storage.BucketHandle
      type: method
      langs:
        - go
      syntax:
        content: func (b *<a href="#cloud_google_com_go_storage_BucketHandle">BucketHandle</a>) Objects(ctx <a href="https://pkg.go.dev/context">context</a>.<a href="https://pkg.go.dev/context#Context">Context</a>, q *<a href="#cloud_google_com_go_storage_Query">Query</a>) *<a href="#cloud_google_com_go_storage_ObjectIterator">ObjectIterator</a>
      codeexamples:
        - content: |
            package main

            import (
            	"context"

            	"cloud.google.com/go/storage"
            )

            func main() {
            	ctx := context.Background()
            	client, err := storage.NewClient(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}
            	it := client.Bucket("my-bucket").Objects(ctx, nil)
            	_ = it // TODO: iterate using Next or iterator.Pager.
            }
    - uid: cloud.google.com/go/storage.BucketHandle.Retryer
      name: |
        func (*BucketHandle) Retryer
      id: Retryer
      summary: |
        Retryer returns a bucket handle that is configured with custom retry
        behavior as specified by the options that are passed to it. All operations
        on the new handle will use the customized retry configuration.
        Retry options set on a object handle will take precedence over options set on
        the bucket handle.
        These retry options will merge with the client's retry configuration (if set)
        for the returned handle. Options passed into this method will take precedence
        over retry options on the client. Note that you must explicitly pass in each
        option you want to override.
      parent: cloud.google.com/go/storage.BucketHandle
      type: method
      langs:
        - go
      syntax:
        content: func (b *<a href="#cloud_google_com_go_storage_BucketHandle">BucketHandle</a>) Retryer(opts ...<a href="#cloud_google_com_go_storage_RetryOption">RetryOption</a>) *<a href="#cloud_google_com_go_storage_BucketHandle">BucketHandle</a>
    - uid: cloud.google.com/go/storage.BucketHandle.SignedURL
      name: |
        func (*BucketHandle) SignedURL
      id: SignedURL
      summary: |
        SignedURL returns a URL for the specified object. Signed URLs allow anyone
        access to a restricted resource for a limited time without needing a Google
        account or signing in.
        For more information about signed URLs, see "[Overview of access control]."

        This method requires the Method and Expires fields in the specified
        SignedURLOptions to be non-nil. You may need to set the GoogleAccessID and
        PrivateKey fields in some cases. Read more on the [automatic detection of credentials]
        for this method.

        [Overview of access control]: https://cloud.google.com/storage/docs/accesscontrol#signed_urls_query_string_authentication
        [automatic detection of credentials]: https://pkg.go.dev/cloud.google.com/go/storage#hdr-Credential_requirements_for_signing
      parent: cloud.google.com/go/storage.BucketHandle
      type: method
      langs:
        - go
      syntax:
        content: func (b *<a href="#cloud_google_com_go_storage_BucketHandle">BucketHandle</a>) SignedURL(object <a href="https://pkg.go.dev/builtin#string">string</a>, opts *<a href="#cloud_google_com_go_storage_SignedURLOptions">SignedURLOptions</a>) (<a href="https://pkg.go.dev/builtin#string">string</a>, <a href="https://pkg.go.dev/builtin#error">error</a>)
    - uid: cloud.google.com/go/storage.BucketHandle.Update
      name: |
        func (*BucketHandle) Update
      id: Update
      summary: |
        Update updates a bucket's attributes.
      parent: cloud.google.com/go/storage.BucketHandle
      type: method
      langs:
        - go
      syntax:
        content: func (b *<a href="#cloud_google_com_go_storage_BucketHandle">BucketHandle</a>) Update(ctx <a href="https://pkg.go.dev/context">context</a>.<a href="https://pkg.go.dev/context#Context">Context</a>, uattrs <a href="#cloud_google_com_go_storage_BucketAttrsToUpdate">BucketAttrsToUpdate</a>) (attrs *<a href="#cloud_google_com_go_storage_BucketAttrs">BucketAttrs</a>, err <a href="https://pkg.go.dev/builtin#error">error</a>)
      codeexamples:
        - content: |
            package main

            import (
            	"context"
            	"fmt"

            	"cloud.google.com/go/storage"
            )

            func main() {
            	ctx := context.Background()
            	client, err := storage.NewClient(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}
            	// Enable versioning in the bucket, regardless of its previous value.
            	attrs, err := client.Bucket("my-bucket").Update(ctx,
            		storage.BucketAttrsToUpdate{VersioningEnabled: true})
            	if err != nil {
            		// TODO: handle error.
            	}
            	fmt.Println(attrs)
            }
        - content: |
            package main

            import (
            	"context"
            	"fmt"

            	"cloud.google.com/go/storage"
            )

            func main() {
            	ctx := context.Background()
            	client, err := storage.NewClient(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}
            	b := client.Bucket("my-bucket")
            	attrs, err := b.Attrs(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}
            	var au storage.BucketAttrsToUpdate
            	au.SetLabel("lab", attrs.Labels["lab"]+"-more")
            	if attrs.Labels["delete-me"] == "yes" {
            		au.DeleteLabel("delete-me")
            	}
            	attrs, err = b.
            		If(storage.BucketConditions{MetagenerationMatch: attrs.MetaGeneration}).
            		Update(ctx, au)
            	if err != nil {
            		// TODO: handle error.
            	}
            	fmt.Println(attrs)
            }
          name: readModifyWrite
    - uid: cloud.google.com/go/storage.BucketHandle.UserProject
      name: |
        func (*BucketHandle) UserProject
      id: UserProject
      summary: |
        UserProject returns a new BucketHandle that passes the project ID as the user
        project for all subsequent calls. Calls with a user project will be billed to that
        project rather than to the bucket's owning project.

        A user project is required for all operations on Requester Pays buckets.
      parent: cloud.google.com/go/storage.BucketHandle
      type: method
      langs:
        - go
      syntax:
        content: func (b *<a href="#cloud_google_com_go_storage_BucketHandle">BucketHandle</a>) UserProject(projectID <a href="https://pkg.go.dev/builtin#string">string</a>) *<a href="#cloud_google_com_go_storage_BucketHandle">BucketHandle</a>
    - uid: cloud.google.com/go/storage.BucketIterator
      name: BucketIterator
      id: BucketIterator
      summary: |
        A BucketIterator is an iterator over BucketAttrs.

        Note: This iterator is not safe for concurrent operations without explicit synchronization.
      parent: cloud.google.com/go/storage
      type: type
      langs:
        - go
      syntax:
        content: |-
            type BucketIterator struct {
            	// Prefix restricts the iterator to buckets whose names begin with it.
            	Prefix <a href="https://pkg.go.dev/builtin#string">string</a>
            	// contains filtered or unexported fields
            }
    - uid: cloud.google.com/go/storage.BucketIterator.Next
      name: |
        func (*BucketIterator) Next
      id: Next
      summary: |
        Next returns the next result. Its second return value is iterator.Done if
        there are no more results. Once Next returns iterator.Done, all subsequent
        calls will return iterator.Done.

        Note: This method is not safe for concurrent operations without explicit synchronization.
      parent: cloud.google.com/go/storage.BucketIterator
      type: method
      langs:
        - go
      syntax:
        content: func (it *<a href="#cloud_google_com_go_storage_BucketIterator">BucketIterator</a>) Next() (*<a href="#cloud_google_com_go_storage_BucketAttrs">BucketAttrs</a>, <a href="https://pkg.go.dev/builtin#error">error</a>)
      codeexamples:
        - content: |
            package main

            import (
            	"context"
            	"fmt"

            	"cloud.google.com/go/storage"
            	"google.golang.org/api/iterator"
            )

            func main() {
            	ctx := context.Background()
            	client, err := storage.NewClient(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}
            	it := client.Buckets(ctx, "my-project")
            	for {
            		bucketAttrs, err := it.Next()
            		if err == iterator.Done {
            			break
            		}
            		if err != nil {
            			// TODO: Handle error.
            		}
            		fmt.Println(bucketAttrs)
            	}
            }
    - uid: cloud.google.com/go/storage.BucketIterator.PageInfo
      name: |
        func (*BucketIterator) PageInfo
      id: PageInfo
      summary: |
        PageInfo supports pagination. See the google.golang.org/api/iterator package for details.

        Note: This method is not safe for concurrent operations without explicit synchronization.
      parent: cloud.google.com/go/storage.BucketIterator
      type: method
      langs:
        - go
      syntax:
        content: func (it *<a href="#cloud_google_com_go_storage_BucketIterator">BucketIterator</a>) PageInfo() *<a href="https://pkg.go.dev/google.golang.org/api/iterator">iterator</a>.<a href="https://pkg.go.dev/google.golang.org/api/iterator#PageInfo">PageInfo</a>
    - uid: cloud.google.com/go/storage.BucketLogging
      name: BucketLogging
      id: BucketLogging
      summary: |
        BucketLogging holds the bucket's logging configuration, which defines the
        destination bucket and optional name prefix for the current bucket's
        logs.
      parent: cloud.google.com/go/storage
      type: type
      langs:
        - go
      syntax:
        content: |-
            type BucketLogging struct {
            	// The destination bucket where the current bucket's logs
            	// should be placed.
            	LogBucket <a href="https://pkg.go.dev/builtin#string">string</a>

            	// A prefix for log object names.
            	LogObjectPrefix <a href="https://pkg.go.dev/builtin#string">string</a>
            }
    - uid: cloud.google.com/go/storage.BucketPolicyOnly
      name: BucketPolicyOnly
      id: BucketPolicyOnly
      summary: |
        BucketPolicyOnly is an alias for UniformBucketLevelAccess.
        Use of UniformBucketLevelAccess is preferred above BucketPolicyOnly.
      parent: cloud.google.com/go/storage
      type: type
      langs:
        - go
      syntax:
        content: |-
            type BucketPolicyOnly struct {
            	// Enabled specifies whether access checks use only bucket-level IAM
            	// policies. Enabled may be disabled until the locked time.
            	Enabled <a href="https://pkg.go.dev/builtin#bool">bool</a>
            	// LockedTime specifies the deadline for changing Enabled from true to
            	// false.
            	LockedTime <a href="https://pkg.go.dev/time">time</a>.<a href="https://pkg.go.dev/time#Time">Time</a>
            }
    - uid: cloud.google.com/go/storage.BucketWebsite
      name: BucketWebsite
      id: BucketWebsite
      summary: |
        BucketWebsite holds the bucket's website configuration, controlling how the
        service behaves when accessing bucket contents as a web site. See
        https://cloud.google.com/storage/docs/static-website for more information.
      parent: cloud.google.com/go/storage
      type: type
      langs:
        - go
      syntax:
        content: |-
            type BucketWebsite struct {
            	// If the requested object path is missing, the service will ensure the path has
            	// a trailing '/', append this suffix, and attempt to retrieve the resulting
            	// object. This allows the creation of index.html objects to represent directory
            	// pages.
            	MainPageSuffix <a href="https://pkg.go.dev/builtin#string">string</a>

            	// If the requested object path is missing, and any mainPageSuffix object is
            	// missing, if applicable, the service will return the named object from this
            	// bucket as the content for a 404 Not Found result.
            	NotFoundPage <a href="https://pkg.go.dev/builtin#string">string</a>
            }
    - uid: cloud.google.com/go/storage.CORS
      name: CORS
      id: CORS
      summary: |
        CORS is the bucket's Cross-Origin Resource Sharing (CORS) configuration.
      parent: cloud.google.com/go/storage
      type: type
      langs:
        - go
      syntax:
        content: |-
            type CORS struct {
            	// MaxAge is the value to return in the Access-Control-Max-Age
            	// header used in preflight responses.
            	MaxAge <a href="https://pkg.go.dev/time">time</a>.<a href="https://pkg.go.dev/time#Duration">Duration</a>

            	// Methods is the list of HTTP methods on which to include CORS response
            	// headers, (GET, OPTIONS, POST, etc) Note: "*" is permitted in the list
            	// of methods, and means "any method".
            	Methods []<a href="https://pkg.go.dev/builtin#string">string</a>

            	// Origins is the list of Origins eligible to receive CORS response
            	// headers. Note: "*" is permitted in the list of origins, and means
            	// "any Origin".
            	Origins []<a href="https://pkg.go.dev/builtin#string">string</a>

            	// ResponseHeaders is the list of HTTP headers other than the simple
            	// response headers to give permission for the user-agent to share
            	// across domains.
            	ResponseHeaders []<a href="https://pkg.go.dev/builtin#string">string</a>
            }
    - uid: cloud.google.com/go/storage.Client
      name: Client
      id: Client
      summary: |
        Client is a client for interacting with Google Cloud Storage.

        Clients should be reused instead of created as needed.
        The methods of Client are safe for concurrent use by multiple goroutines.
      parent: cloud.google.com/go/storage
      type: type
      langs:
        - go
      syntax:
        content: |-
            type Client struct {
            	// contains filtered or unexported fields
            }
    - uid: cloud.google.com/go/storage.Client.NewClient
      name: |
        func NewClient
      id: NewClient
      summary: |
        NewClient creates a new Google Cloud Storage client using the HTTP transport.
        The default scope is ScopeFullControl. To use a different scope, like
        ScopeReadOnly, use option.WithScopes.

        Clients should be reused instead of created as needed. The methods of Client
        are safe for concurrent use by multiple goroutines.

        You may configure the client by passing in options from the [google.golang.org/api/option]
        package. You may also use options defined in this package, such as [WithJSONReads].
      parent: cloud.google.com/go/storage.Client
      type: function
      langs:
        - go
      syntax:
        content: func NewClient(ctx <a href="https://pkg.go.dev/context">context</a>.<a href="https://pkg.go.dev/context#Context">Context</a>, opts ...<a href="https://pkg.go.dev/google.golang.org/api/option">option</a>.<a href="https://pkg.go.dev/google.golang.org/api/option#ClientOption">ClientOption</a>) (*<a href="#cloud_google_com_go_storage_Client">Client</a>, <a href="https://pkg.go.dev/builtin#error">error</a>)
      codeexamples:
        - content: |
            package main

            import (
            	"context"

            	"cloud.google.com/go/storage"
            )

            func main() {
            	ctx := context.Background()
            	// Use Google Application Default Credentials to authorize and authenticate the client.
            	// More information about Application Default Credentials and how to enable is at
            	// https://developers.google.com/identity/protocols/application-default-credentials.
            	client, err := storage.NewClient(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}
            	// Use the client.

            	// Close the client when finished.
            	if err := client.Close(); err != nil {
            		// TODO: handle error.
            	}
            }
        - content: |
            package main

            import (
            	"context"

            	"cloud.google.com/go/storage"
            	"google.golang.org/api/option"
            )

            func main() {
            	ctx := context.Background()
            	client, err := storage.NewClient(ctx, option.WithoutAuthentication())
            	if err != nil {
            		// TODO: handle error.
            	}
            	// Use the client.

            	// Close the client when finished.
            	if err := client.Close(); err != nil {
            		// TODO: handle error.
            	}
            }
          name: unauthenticated
    - uid: cloud.google.com/go/storage.Client.NewGRPCClient
      name: |
        func NewGRPCClient
      id: NewGRPCClient
      summary: |
        NewGRPCClient creates a new Storage client using the gRPC transport and API.
        Client methods which have not been implemented in gRPC will return an error.
        In particular, methods for Cloud Pub/Sub notifications are not supported.

        The storage gRPC API is still in preview and not yet publicly available.
        If you would like to use the API, please first contact your GCP account rep to
        request access. The API may be subject to breaking changes.

        Clients should be reused instead of created as needed. The methods of Client
        are safe for concurrent use by multiple goroutines.

        You may configure the client by passing in options from the [google.golang.org/api/option]
        package.
      parent: cloud.google.com/go/storage.Client
      type: function
      langs:
        - go
      syntax:
        content: func NewGRPCClient(ctx <a href="https://pkg.go.dev/context">context</a>.<a href="https://pkg.go.dev/context#Context">Context</a>, opts ...<a href="https://pkg.go.dev/google.golang.org/api/option">option</a>.<a href="https://pkg.go.dev/google.golang.org/api/option#ClientOption">ClientOption</a>) (*<a href="#cloud_google_com_go_storage_Client">Client</a>, <a href="https://pkg.go.dev/builtin#error">error</a>)
    - uid: cloud.google.com/go/storage.Client.Bucket
      name: |
        func (*Client) Bucket
      id: Bucket
      summary: |
        Bucket returns a BucketHandle, which provides operations on the named bucket.
        This call does not perform any network operations.

        The supplied name must contain only lowercase letters, numbers, dashes,
        underscores, and dots. The full specification for valid bucket names can be
        found at:

        	https://cloud.google.com/storage/docs/bucket-naming
      parent: cloud.google.com/go/storage.Client
      type: method
      langs:
        - go
      syntax:
        content: func (c *<a href="#cloud_google_com_go_storage_Client">Client</a>) Bucket(name <a href="https://pkg.go.dev/builtin#string">string</a>) *<a href="#cloud_google_com_go_storage_BucketHandle">BucketHandle</a>
    - uid: cloud.google.com/go/storage.Client.Buckets
      name: |
        func (*Client) Buckets
      id: Buckets
      summary: |
        Buckets returns an iterator over the buckets in the project. You may
        optionally set the iterator's Prefix field to restrict the list to buckets
        whose names begin with the prefix. By default, all buckets in the project
        are returned.

        Note: The returned iterator is not safe for concurrent operations without explicit synchronization.
      parent: cloud.google.com/go/storage.Client
      type: method
      langs:
        - go
      syntax:
        content: func (c *<a href="#cloud_google_com_go_storage_Client">Client</a>) Buckets(ctx <a href="https://pkg.go.dev/context">context</a>.<a href="https://pkg.go.dev/context#Context">Context</a>, projectID <a href="https://pkg.go.dev/builtin#string">string</a>) *<a href="#cloud_google_com_go_storage_BucketIterator">BucketIterator</a>
      codeexamples:
        - content: |
            package main

            import (
            	"context"

            	"cloud.google.com/go/storage"
            )

            func main() {
            	ctx := context.Background()
            	client, err := storage.NewClient(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}
            	it := client.Buckets(ctx, "my-project")
            	_ = it // TODO: iterate using Next or iterator.Pager.
            }
    - uid: cloud.google.com/go/storage.Client.Close
      name: |
        func (*Client) Close
      id: Close
      summary: |
        Close closes the Client.

        Close need not be called at program exit.
      parent: cloud.google.com/go/storage.Client
      type: method
      langs:
        - go
      syntax:
        content: func (c *<a href="#cloud_google_com_go_storage_Client">Client</a>) Close() <a href="https://pkg.go.dev/builtin#error">error</a>
    - uid: cloud.google.com/go/storage.Client.CreateHMACKey
      name: |
        func (*Client) CreateHMACKey
      id: CreateHMACKey
      summary: |
        CreateHMACKey invokes an RPC for Google Cloud Storage to create a new HMACKey.
      parent: cloud.google.com/go/storage.Client
      type: method
      langs:
        - go
      syntax:
        content: func (c *<a href="#cloud_google_com_go_storage_Client">Client</a>) CreateHMACKey(ctx <a href="https://pkg.go.dev/context">context</a>.<a href="https://pkg.go.dev/context#Context">Context</a>, projectID, serviceAccountEmail <a href="https://pkg.go.dev/builtin#string">string</a>, opts ...<a href="#cloud_google_com_go_storage_HMACKeyOption">HMACKeyOption</a>) (*<a href="#cloud_google_com_go_storage_HMACKey">HMACKey</a>, <a href="https://pkg.go.dev/builtin#error">error</a>)
      codeexamples:
        - content: |
            package main

            import (
            	"context"

            	"cloud.google.com/go/storage"
            )

            func main() {
            	ctx := context.Background()
            	client, err := storage.NewClient(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}

            	hkey, err := client.CreateHMACKey(ctx, "project-id", "service-account-email")
            	if err != nil {
            		// TODO: handle error.
            	}
            	_ = hkey // TODO: Use the HMAC Key.
            }
    - uid: cloud.google.com/go/storage.Client.HMACKeyHandle
      name: |
        func (*Client) HMACKeyHandle
      id: HMACKeyHandle
      summary: |
        HMACKeyHandle creates a handle that will be used for HMACKey operations.
      parent: cloud.google.com/go/storage.Client
      type: method
      langs:
        - go
      syntax:
        content: func (c *<a href="#cloud_google_com_go_storage_Client">Client</a>) HMACKeyHandle(projectID, accessID <a href="https://pkg.go.dev/builtin#string">string</a>) *<a href="#cloud_google_com_go_storage_HMACKeyHandle">HMACKeyHandle</a>
    - uid: cloud.google.com/go/storage.Client.ListHMACKeys
      name: |
        func (*Client) ListHMACKeys
      id: ListHMACKeys
      summary: |
        ListHMACKeys returns an iterator for listing HMACKeys.

        Note: This iterator is not safe for concurrent operations without explicit synchronization.
      parent: cloud.google.com/go/storage.Client
      type: method
      langs:
        - go
      syntax:
        content: func (c *<a href="#cloud_google_com_go_storage_Client">Client</a>) ListHMACKeys(ctx <a href="https://pkg.go.dev/context">context</a>.<a href="https://pkg.go.dev/context#Context">Context</a>, projectID <a href="https://pkg.go.dev/builtin#string">string</a>, opts ...<a href="#cloud_google_com_go_storage_HMACKeyOption">HMACKeyOption</a>) *<a href="#cloud_google_com_go_storage_HMACKeysIterator">HMACKeysIterator</a>
      codeexamples:
        - content: |
            package main

            import (
            	"context"

            	"cloud.google.com/go/storage"
            	"google.golang.org/api/iterator"
            )

            func main() {
            	ctx := context.Background()
            	client, err := storage.NewClient(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}

            	iter := client.ListHMACKeys(ctx, "project-id")
            	for {
            		key, err := iter.Next()
            		if err == iterator.Done {
            			break
            		}
            		if err != nil {
            			// TODO: handle error.
            		}
            		_ = key // TODO: Use the key.
            	}
            }
        - content: |
            package main

            import (
            	"context"

            	"cloud.google.com/go/storage"
            	"google.golang.org/api/iterator"
            )

            func main() {
            	ctx := context.Background()
            	client, err := storage.NewClient(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}

            	iter := client.ListHMACKeys(ctx, "project-id", storage.ForHMACKeyServiceAccountEmail("service@account.email"))
            	for {
            		key, err := iter.Next()
            		if err == iterator.Done {
            			break
            		}
            		if err != nil {
            			// TODO: handle error.
            		}
            		_ = key // TODO: Use the key.
            	}
            }
          name: forServiceAccountEmail
        - content: |
            package main

            import (
            	"context"

            	"cloud.google.com/go/storage"
            	"google.golang.org/api/iterator"
            )

            func main() {
            	ctx := context.Background()
            	client, err := storage.NewClient(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}

            	iter := client.ListHMACKeys(ctx, "project-id", storage.ShowDeletedHMACKeys())
            	for {
            		key, err := iter.Next()
            		if err == iterator.Done {
            			break
            		}
            		if err != nil {
            			// TODO: handle error.
            		}
            		_ = key // TODO: Use the key.
            	}
            }
          name: showDeletedKeys
    - uid: cloud.google.com/go/storage.Client.ServiceAccount
      name: |
        func (*Client) ServiceAccount
      id: ServiceAccount
      summary: |
        ServiceAccount fetches the email address of the given project's Google Cloud Storage service account.
      parent: cloud.google.com/go/storage.Client
      type: method
      langs:
        - go
      syntax:
        content: func (c *<a href="#cloud_google_com_go_storage_Client">Client</a>) ServiceAccount(ctx <a href="https://pkg.go.dev/context">context</a>.<a href="https://pkg.go.dev/context#Context">Context</a>, projectID <a href="https://pkg.go.dev/builtin#string">string</a>) (<a href="https://pkg.go.dev/builtin#string">string</a>, <a href="https://pkg.go.dev/builtin#error">error</a>)
    - uid: cloud.google.com/go/storage.Client.SetRetry
      name: |
        func (*Client) SetRetry
      id: SetRetry
      summary: |
        SetRetry configures the client with custom retry behavior as specified by the
        options that are passed to it. All operations using this client will use the
        customized retry configuration.
        This should be called once before using the client for network operations, as
        there could be indeterminate behaviour with operations in progress.
        Retry options set on a bucket or object handle will take precedence over
        these options.
      parent: cloud.google.com/go/storage.Client
      type: method
      langs:
        - go
      syntax:
        content: func (c *<a href="#cloud_google_com_go_storage_Client">Client</a>) SetRetry(opts ...<a href="#cloud_google_com_go_storage_RetryOption">RetryOption</a>)
    - uid: cloud.google.com/go/storage.Composer
      name: Composer
      id: Composer
      summary: |
        A Composer composes source objects into a destination object.

        For Requester Pays buckets, the user project of dst is billed.
      parent: cloud.google.com/go/storage
      type: type
      langs:
        - go
      syntax:
        content: |-
            type Composer struct {
            	// ObjectAttrs are optional attributes to set on the destination object.
            	// Any attributes must be initialized before any calls on the Composer. Nil
            	// or zero-valued attributes are ignored.
            	<a href="#cloud_google_com_go_storage_ObjectAttrs">ObjectAttrs</a>

            	// SendCRC specifies whether to transmit a CRC32C field. It should be set
            	// to true in addition to setting the Composer's CRC32C field, because zero
            	// is a valid CRC and normally a zero would not be transmitted.
            	// If a CRC32C is sent, and the data in the destination object does not match
            	// the checksum, the compose will be rejected.
            	SendCRC32C <a href="https://pkg.go.dev/builtin#bool">bool</a>
            	// contains filtered or unexported fields
            }
    - uid: cloud.google.com/go/storage.Composer.Run
      name: |
        func (*Composer) Run
      id: Run
      summary: |
        Run performs the compose operation.
      parent: cloud.google.com/go/storage.Composer
      type: method
      langs:
        - go
      syntax:
        content: func (c *<a href="#cloud_google_com_go_storage_Composer">Composer</a>) Run(ctx <a href="https://pkg.go.dev/context">context</a>.<a href="https://pkg.go.dev/context#Context">Context</a>) (attrs *<a href="#cloud_google_com_go_storage_ObjectAttrs">ObjectAttrs</a>, err <a href="https://pkg.go.dev/builtin#error">error</a>)
      codeexamples:
        - content: |
            package main

            import (
            	"context"
            	"fmt"

            	"cloud.google.com/go/storage"
            )

            func main() {
            	ctx := context.Background()
            	client, err := storage.NewClient(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}
            	bkt := client.Bucket("bucketname")
            	src1 := bkt.Object("o1")
            	src2 := bkt.Object("o2")
            	dst := bkt.Object("o3")

            	// Compose and modify metadata.
            	c := dst.ComposerFrom(src1, src2)
            	c.ContentType = "text/plain"

            	// Set the expected checksum for the destination object to be validated by
            	// the backend (if desired).
            	c.CRC32C = 42
            	c.SendCRC32C = true

            	attrs, err := c.Run(ctx)
            	if err != nil {
            		// TODO: Handle error.
            	}
            	fmt.Println(attrs)
            	// Just compose.
            	attrs, err = dst.ComposerFrom(src1, src2).Run(ctx)
            	if err != nil {
            		// TODO: Handle error.
            	}
            	fmt.Println(attrs)
            }
    - uid: cloud.google.com/go/storage.Conditions
      name: Conditions
      id: Conditions
      summary: |
        Conditions constrain methods to act on specific generations of
        objects.

        The zero value is an empty set of constraints. Not all conditions or
        combinations of conditions are applicable to all methods.
        See https://cloud.google.com/storage/docs/generations-preconditions
        for details on how these operate.
      parent: cloud.google.com/go/storage
      type: type
      langs:
        - go
      syntax:
        content: |-
            type Conditions struct {

            	// GenerationMatch specifies that the object must have the given generation
            	// for the operation to occur.
            	// If GenerationMatch is zero, it has no effect.
            	// Use DoesNotExist to specify that the object does not exist in the bucket.
            	GenerationMatch <a href="https://pkg.go.dev/builtin#int64">int64</a>

            	// GenerationNotMatch specifies that the object must not have the given
            	// generation for the operation to occur.
            	// If GenerationNotMatch is zero, it has no effect.
            	// This condition only works for object reads if the WithJSONReads client
            	// option is set.
            	GenerationNotMatch <a href="https://pkg.go.dev/builtin#int64">int64</a>

            	// DoesNotExist specifies that the object must not exist in the bucket for
            	// the operation to occur.
            	// If DoesNotExist is false, it has no effect.
            	DoesNotExist <a href="https://pkg.go.dev/builtin#bool">bool</a>

            	// MetagenerationMatch specifies that the object must have the given
            	// metageneration for the operation to occur.
            	// If MetagenerationMatch is zero, it has no effect.
            	MetagenerationMatch <a href="https://pkg.go.dev/builtin#int64">int64</a>

            	// MetagenerationNotMatch specifies that the object must not have the given
            	// metageneration for the operation to occur.
            	// If MetagenerationNotMatch is zero, it has no effect.
            	// This condition only works for object reads if the WithJSONReads client
            	// option is set.
            	MetagenerationNotMatch <a href="https://pkg.go.dev/builtin#int64">int64</a>
            }
    - uid: cloud.google.com/go/storage.Copier
      name: Copier
      id: Copier
      summary: |
        A Copier copies a source object to a destination.
      parent: cloud.google.com/go/storage
      type: type
      langs:
        - go
      syntax:
        content: |-
            type Copier struct {
            	// ObjectAttrs are optional attributes to set on the destination object.
            	// Any attributes must be initialized before any calls on the Copier. Nil
            	// or zero-valued attributes are ignored.
            	<a href="#cloud_google_com_go_storage_ObjectAttrs">ObjectAttrs</a>

            	// RewriteToken can be set before calling Run to resume a copy
            	// operation. After Run returns a non-nil error, RewriteToken will
            	// have been updated to contain the value needed to resume the copy.
            	RewriteToken <a href="https://pkg.go.dev/builtin#string">string</a>

            	// ProgressFunc can be used to monitor the progress of a multi-RPC copy
            	// operation. If ProgressFunc is not nil and copying requires multiple
            	// calls to the underlying service (see
            	// https://cloud.google.com/storage/docs/json_api/v1/objects/rewrite), then
            	// ProgressFunc will be invoked after each call with the number of bytes of
            	// content copied so far and the total size in bytes of the source object.
            	//
            	// ProgressFunc is intended to make upload progress available to the
            	// application. For example, the implementation of ProgressFunc may update
            	// a progress bar in the application's UI, or log the result of
            	// float64(copiedBytes)/float64(totalBytes).
            	//
            	// ProgressFunc should return quickly without blocking.
            	ProgressFunc func(copiedBytes, totalBytes <a href="https://pkg.go.dev/builtin#uint64">uint64</a>)

            	// The Cloud KMS key, in the form projects/P/locations/L/keyRings/R/cryptoKeys/K,
            	// that will be used to encrypt the object. Overrides the object's KMSKeyName, if
            	// any.
            	//
            	// Providing both a DestinationKMSKeyName and a customer-supplied encryption key
            	// (via ObjectHandle.Key) on the destination object will result in an error when
            	// Run is called.
            	DestinationKMSKeyName <a href="https://pkg.go.dev/builtin#string">string</a>
            	// contains filtered or unexported fields
            }
    - uid: cloud.google.com/go/storage.Copier.Run
      name: |
        func (*Copier) Run
      id: Run
      summary: |
        Run performs the copy.
      parent: cloud.google.com/go/storage.Copier
      type: method
      langs:
        - go
      syntax:
        content: func (c *<a href="#cloud_google_com_go_storage_Copier">Copier</a>) Run(ctx <a href="https://pkg.go.dev/context">context</a>.<a href="https://pkg.go.dev/context#Context">Context</a>) (attrs *<a href="#cloud_google_com_go_storage_ObjectAttrs">ObjectAttrs</a>, err <a href="https://pkg.go.dev/builtin#error">error</a>)
      codeexamples:
        - content: |
            package main

            import (
            	"context"
            	"fmt"

            	"cloud.google.com/go/storage"
            )

            func main() {
            	ctx := context.Background()
            	client, err := storage.NewClient(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}
            	src := client.Bucket("bucketname").Object("file1")
            	dst := client.Bucket("another-bucketname").Object("file2")

            	// Copy content and modify metadata.
            	copier := dst.CopierFrom(src)
            	copier.ContentType = "text/plain"
            	attrs, err := copier.Run(ctx)
            	if err != nil {
            		// TODO: Handle error, possibly resuming with copier.RewriteToken.
            	}
            	fmt.Println(attrs)

            	// Just copy content.
            	attrs, err = dst.CopierFrom(src).Run(ctx)
            	if err != nil {
            		// TODO: Handle error. No way to resume.
            	}
            	fmt.Println(attrs)
            }
        - content: |
            package main

            import (
            	"context"
            	"log"

            	"cloud.google.com/go/storage"
            )

            func main() {
            	// Display progress across multiple rewrite RPCs.
            	ctx := context.Background()
            	client, err := storage.NewClient(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}
            	src := client.Bucket("bucketname").Object("file1")
            	dst := client.Bucket("another-bucketname").Object("file2")

            	copier := dst.CopierFrom(src)
            	copier.ProgressFunc = func(copiedBytes, totalBytes uint64) {
            		log.Printf("copy %.1f%% done", float64(copiedBytes)/float64(totalBytes)*100)
            	}
            	if _, err := copier.Run(ctx); err != nil {
            		// TODO: handle error.
            	}
            }
          name: progress
    - uid: cloud.google.com/go/storage.CustomPlacementConfig
      name: CustomPlacementConfig
      id: CustomPlacementConfig
      summary: |
        CustomPlacementConfig holds the bucket's custom placement
        configuration for Custom Dual Regions. See
        https://cloud.google.com/storage/docs/locations#location-dr for more information.
      parent: cloud.google.com/go/storage
      type: type
      langs:
        - go
      syntax:
        content: |-
            type CustomPlacementConfig struct {
            	// The list of regional locations in which data is placed.
            	// Custom Dual Regions require exactly 2 regional locations.
            	DataLocations []<a href="https://pkg.go.dev/builtin#string">string</a>
            }
    - uid: cloud.google.com/go/storage.HMACKey
      name: HMACKey
      id: HMACKey
      summary: |
        HMACKey is the representation of a Google Cloud Storage HMAC key.

        HMAC keys are used to authenticate signed access to objects. To enable HMAC key
        authentication, please visit https://cloud.google.com/storage/docs/migrating.
      parent: cloud.google.com/go/storage
      type: type
      langs:
        - go
      syntax:
        content: |-
            type HMACKey struct {
            	// The HMAC's secret key.
            	Secret <a href="https://pkg.go.dev/builtin#string">string</a>

            	// AccessID is the ID of the HMAC key.
            	AccessID <a href="https://pkg.go.dev/builtin#string">string</a>

            	// Etag is the HTTP/1.1 Entity tag.
            	Etag <a href="https://pkg.go.dev/builtin#string">string</a>

            	// ID is the ID of the HMAC key, including the ProjectID and AccessID.
            	ID <a href="https://pkg.go.dev/builtin#string">string</a>

            	// ProjectID is the ID of the project that owns the
            	// service account to which the key authenticates.
            	ProjectID <a href="https://pkg.go.dev/builtin#string">string</a>

            	// ServiceAccountEmail is the email address
            	// of the key's associated service account.
            	ServiceAccountEmail <a href="https://pkg.go.dev/builtin#string">string</a>

            	// CreatedTime is the creation time of the HMAC key.
            	CreatedTime <a href="https://pkg.go.dev/time">time</a>.<a href="https://pkg.go.dev/time#Time">Time</a>

            	// UpdatedTime is the last modification time of the HMAC key metadata.
            	UpdatedTime <a href="https://pkg.go.dev/time">time</a>.<a href="https://pkg.go.dev/time#Time">Time</a>

            	// State is the state of the HMAC key.
            	// It can be one of StateActive, StateInactive or StateDeleted.
            	State <a href="#cloud_google_com_go_storage_HMACState">HMACState</a>
            }
    - uid: cloud.google.com/go/storage.HMACKeyAttrsToUpdate
      name: HMACKeyAttrsToUpdate
      id: HMACKeyAttrsToUpdate
      summary: |
        HMACKeyAttrsToUpdate defines the attributes of an HMACKey that will be updated.
      parent: cloud.google.com/go/storage
      type: type
      langs:
        - go
      syntax:
        content: |-
            type HMACKeyAttrsToUpdate struct {
            	// State is required and must be either StateActive or StateInactive.
            	State <a href="#cloud_google_com_go_storage_HMACState">HMACState</a>

            	// Etag is an optional field and it is the HTTP/1.1 Entity tag.
            	Etag <a href="https://pkg.go.dev/builtin#string">string</a>
            }
    - uid: cloud.google.com/go/storage.HMACKeyHandle
      name: HMACKeyHandle
      id: HMACKeyHandle
      summary: |
        HMACKeyHandle helps provide access and management for HMAC keys.
      parent: cloud.google.com/go/storage
      type: type
      langs:
        - go
      syntax:
        content: |-
            type HMACKeyHandle struct {
            	// contains filtered or unexported fields
            }
    - uid: cloud.google.com/go/storage.HMACKeyHandle.Delete
      name: |
        func (*HMACKeyHandle) Delete
      id: Delete
      summary: |
        Delete invokes an RPC to delete the key referenced by accessID, on Google Cloud Storage.
        Only inactive HMAC keys can be deleted.
        After deletion, a key cannot be used to authenticate requests.
      parent: cloud.google.com/go/storage.HMACKeyHandle
      type: method
      langs:
        - go
      syntax:
        content: func (hkh *<a href="#cloud_google_com_go_storage_HMACKeyHandle">HMACKeyHandle</a>) Delete(ctx <a href="https://pkg.go.dev/context">context</a>.<a href="https://pkg.go.dev/context#Context">Context</a>, opts ...<a href="#cloud_google_com_go_storage_HMACKeyOption">HMACKeyOption</a>) <a href="https://pkg.go.dev/builtin#error">error</a>
      codeexamples:
        - content: |
            package main

            import (
            	"context"

            	"cloud.google.com/go/storage"
            )

            func main() {
            	ctx := context.Background()
            	client, err := storage.NewClient(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}

            	hkh := client.HMACKeyHandle("project-id", "access-key-id")
            	// Make sure that the HMACKey being deleted has a status of inactive.
            	if err := hkh.Delete(ctx); err != nil {
            		// TODO: handle error.
            	}
            }
    - uid: cloud.google.com/go/storage.HMACKeyHandle.Get
      name: |
        func (*HMACKeyHandle) Get
      id: Get
      summary: |
        Get invokes an RPC to retrieve the HMAC key referenced by the
        HMACKeyHandle's accessID.

        Options such as UserProjectForHMACKeys can be used to set the
        userProject to be billed against for operations.
      parent: cloud.google.com/go/storage.HMACKeyHandle
      type: method
      langs:
        - go
      syntax:
        content: func (hkh *<a href="#cloud_google_com_go_storage_HMACKeyHandle">HMACKeyHandle</a>) Get(ctx <a href="https://pkg.go.dev/context">context</a>.<a href="https://pkg.go.dev/context#Context">Context</a>, opts ...<a href="#cloud_google_com_go_storage_HMACKeyOption">HMACKeyOption</a>) (*<a href="#cloud_google_com_go_storage_HMACKey">HMACKey</a>, <a href="https://pkg.go.dev/builtin#error">error</a>)
      codeexamples:
        - content: |
            package main

            import (
            	"context"

            	"cloud.google.com/go/storage"
            )

            func main() {
            	ctx := context.Background()
            	client, err := storage.NewClient(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}

            	hkh := client.HMACKeyHandle("project-id", "access-key-id")
            	hkey, err := hkh.Get(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}
            	_ = hkey // TODO: Use the HMAC Key.
            }
    - uid: cloud.google.com/go/storage.HMACKeyHandle.Update
      name: |
        func (*HMACKeyHandle) Update
      id: Update
      summary: |
        Update mutates the HMACKey referred to by accessID.
      parent: cloud.google.com/go/storage.HMACKeyHandle
      type: method
      langs:
        - go
      syntax:
        content: func (h *<a href="#cloud_google_com_go_storage_HMACKeyHandle">HMACKeyHandle</a>) Update(ctx <a href="https://pkg.go.dev/context">context</a>.<a href="https://pkg.go.dev/context#Context">Context</a>, au <a href="#cloud_google_com_go_storage_HMACKeyAttrsToUpdate">HMACKeyAttrsToUpdate</a>, opts ...<a href="#cloud_google_com_go_storage_HMACKeyOption">HMACKeyOption</a>) (*<a href="#cloud_google_com_go_storage_HMACKey">HMACKey</a>, <a href="https://pkg.go.dev/builtin#error">error</a>)
      codeexamples:
        - content: |
            package main

            import (
            	"context"

            	"cloud.google.com/go/storage"
            )

            func main() {
            	ctx := context.Background()
            	client, err := storage.NewClient(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}

            	hkh := client.HMACKeyHandle("project-id", "access-key-id")
            	ukey, err := hkh.Update(ctx, storage.HMACKeyAttrsToUpdate{
            		State: storage.Inactive,
            	})
            	if err != nil {
            		// TODO: handle error.
            	}
            	_ = ukey // TODO: Use the HMAC Key.
            }
    - uid: cloud.google.com/go/storage.HMACKeyOption
      name: HMACKeyOption
      id: HMACKeyOption
      summary: |
        HMACKeyOption configures the behavior of HMACKey related methods and actions.
      parent: cloud.google.com/go/storage
      type: type
      langs:
        - go
      syntax:
        content: |-
            type HMACKeyOption interface {
            	// contains filtered or unexported methods
            }
    - uid: cloud.google.com/go/storage.HMACKeyOption.ForHMACKeyServiceAccountEmail
      name: |
        func ForHMACKeyServiceAccountEmail
      id: ForHMACKeyServiceAccountEmail
      summary: |
        ForHMACKeyServiceAccountEmail returns HMAC Keys that are
        associated with the email address of a service account in the project.

        Only one service account email can be used as a filter, so if multiple
        of these options are applied, the last email to be set will be used.
      parent: cloud.google.com/go/storage.HMACKeyOption
      type: function
      langs:
        - go
      syntax:
        content: func ForHMACKeyServiceAccountEmail(serviceAccountEmail <a href="https://pkg.go.dev/builtin#string">string</a>) <a href="#cloud_google_com_go_storage_HMACKeyOption">HMACKeyOption</a>
    - uid: cloud.google.com/go/storage.HMACKeyOption.ShowDeletedHMACKeys
      name: |
        func ShowDeletedHMACKeys
      id: ShowDeletedHMACKeys
      summary: |
        ShowDeletedHMACKeys will also list keys whose state is "DELETED".
      parent: cloud.google.com/go/storage.HMACKeyOption
      type: function
      langs:
        - go
      syntax:
        content: func ShowDeletedHMACKeys() <a href="#cloud_google_com_go_storage_HMACKeyOption">HMACKeyOption</a>
    - uid: cloud.google.com/go/storage.HMACKeyOption.UserProjectForHMACKeys
      name: |
        func UserProjectForHMACKeys
      id: UserProjectForHMACKeys
      summary: |
        UserProjectForHMACKeys will bill the request against userProjectID
        if userProjectID is non-empty.

        Note: This is a noop right now and only provided for API compatibility.
      parent: cloud.google.com/go/storage.HMACKeyOption
      type: function
      langs:
        - go
      syntax:
        content: func UserProjectForHMACKeys(userProjectID <a href="https://pkg.go.dev/builtin#string">string</a>) <a href="#cloud_google_com_go_storage_HMACKeyOption">HMACKeyOption</a>
    - uid: cloud.google.com/go/storage.HMACKeysIterator
      name: HMACKeysIterator
      id: HMACKeysIterator
      summary: |
        An HMACKeysIterator is an iterator over HMACKeys.

        Note: This iterator is not safe for concurrent operations without explicit synchronization.
      parent: cloud.google.com/go/storage
      type: type
      langs:
        - go
      syntax:
        content: |-
            type HMACKeysIterator struct {
            	// contains filtered or unexported fields
            }
    - uid: cloud.google.com/go/storage.HMACKeysIterator.Next
      name: |
        func (*HMACKeysIterator) Next
      id: Next
      summary: |
        Next returns the next result. Its second return value is iterator.Done if
        there are no more results. Once Next returns iterator.Done, all subsequent
        calls will return iterator.Done.

        Note: This iterator is not safe for concurrent operations without explicit synchronization.
      parent: cloud.google.com/go/storage.HMACKeysIterator
      type: method
      langs:
        - go
      syntax:
        content: func (it *<a href="#cloud_google_com_go_storage_HMACKeysIterator">HMACKeysIterator</a>) Next() (*<a href="#cloud_google_com_go_storage_HMACKey">HMACKey</a>, <a href="https://pkg.go.dev/builtin#error">error</a>)
    - uid: cloud.google.com/go/storage.HMACKeysIterator.PageInfo
      name: |
        func (*HMACKeysIterator) PageInfo
      id: PageInfo
      summary: |
        PageInfo supports pagination. See the google.golang.org/api/iterator package for details.

        Note: This iterator is not safe for concurrent operations without explicit synchronization.
      parent: cloud.google.com/go/storage.HMACKeysIterator
      type: method
      langs:
        - go
      syntax:
        content: func (it *<a href="#cloud_google_com_go_storage_HMACKeysIterator">HMACKeysIterator</a>) PageInfo() *<a href="https://pkg.go.dev/google.golang.org/api/iterator">iterator</a>.<a href="https://pkg.go.dev/google.golang.org/api/iterator#PageInfo">PageInfo</a>
    - uid: cloud.google.com/go/storage.HMACState
      name: HMACState
      id: HMACState
      summary: |
        HMACState is the state of the HMAC key.
      parent: cloud.google.com/go/storage
      type: type
      langs:
        - go
      syntax:
        content: type HMACState <a href="https://pkg.go.dev/builtin#string">string</a>
    - uid: cloud.google.com/go/storage.Active,Inactive,Deleted
      name: Active, Inactive, Deleted
      id: Active,Inactive,Deleted
      parent: cloud.google.com/go/storage.HMACState
      type: const
      langs:
        - go
      syntax:
        content: |-
            const (
            	// Active is the status for an active key that can be used to sign
            	// requests.
            	Active <a href="#cloud_google_com_go_storage_HMACState">HMACState</a> = "ACTIVE"

            	// Inactive is the status for an inactive key thus requests signed by
            	// this key will be denied.
            	Inactive <a href="#cloud_google_com_go_storage_HMACState">HMACState</a> = "INACTIVE"

            	// Deleted is the status for a key that is deleted.
            	// Once in this state the key cannot key cannot be recovered
            	// and does not count towards key limits. Deleted keys will be cleaned
            	// up later.
            	Deleted <a href="#cloud_google_com_go_storage_HMACState">HMACState</a> = "DELETED"
            )
    - uid: cloud.google.com/go/storage.Lifecycle
      name: Lifecycle
      id: Lifecycle
      summary: |
        Lifecycle is the lifecycle configuration for objects in the bucket.
      parent: cloud.google.com/go/storage
      type: type
      langs:
        - go
      syntax:
        content: |-
            type Lifecycle struct {
            	Rules []<a href="#cloud_google_com_go_storage_LifecycleRule">LifecycleRule</a>
            }
    - uid: cloud.google.com/go/storage.LifecycleAction
      name: LifecycleAction
      id: LifecycleAction
      summary: |
        LifecycleAction is a lifecycle configuration action.
      parent: cloud.google.com/go/storage
      type: type
      langs:
        - go
      syntax:
        content: |-
            type LifecycleAction struct {
            	// Type is the type of action to take on matching objects.
            	//
            	// Acceptable values are storage.DeleteAction, storage.SetStorageClassAction,
            	// and storage.AbortIncompleteMPUAction.
            	Type <a href="https://pkg.go.dev/builtin#string">string</a>

            	// StorageClass is the storage class to set on matching objects if the Action
            	// is "SetStorageClass".
            	StorageClass <a href="https://pkg.go.dev/builtin#string">string</a>
            }
    - uid: cloud.google.com/go/storage.LifecycleCondition
      name: LifecycleCondition
      id: LifecycleCondition
      summary: |
        LifecycleCondition is a set of conditions used to match objects and take an
        action automatically.

        All configured conditions must be met for the associated action to be taken.
      parent: cloud.google.com/go/storage
      type: type
      langs:
        - go
      syntax:
        content: |-
            type LifecycleCondition struct {
            	// AllObjects is used to select all objects in a bucket by
            	// setting AgeInDays to 0.
            	AllObjects <a href="https://pkg.go.dev/builtin#bool">bool</a>

            	// AgeInDays is the age of the object in days.
            	// If you want to set AgeInDays to `0` use AllObjects set to `true`.
            	AgeInDays <a href="https://pkg.go.dev/builtin#int64">int64</a>

            	// CreatedBefore is the time the object was created.
            	//
            	// This condition is satisfied when an object is created before midnight of
            	// the specified date in UTC.
            	CreatedBefore <a href="https://pkg.go.dev/time">time</a>.<a href="https://pkg.go.dev/time#Time">Time</a>

            	// CustomTimeBefore is the CustomTime metadata field of the object. This
            	// condition is satisfied when an object's CustomTime timestamp is before
            	// midnight of the specified date in UTC.
            	//
            	// This condition can only be satisfied if CustomTime has been set.
            	CustomTimeBefore <a href="https://pkg.go.dev/time">time</a>.<a href="https://pkg.go.dev/time#Time">Time</a>

            	// DaysSinceCustomTime is the days elapsed since the CustomTime date of the
            	// object. This condition can only be satisfied if CustomTime has been set.
            	// Note: Using `0` as the value will be ignored by the library and not sent to the API.
            	DaysSinceCustomTime <a href="https://pkg.go.dev/builtin#int64">int64</a>

            	// DaysSinceNoncurrentTime is the days elapsed since the noncurrent timestamp
            	// of the object. This condition is relevant only for versioned objects.
            	// Note: Using `0` as the value will be ignored by the library and not sent to the API.
            	DaysSinceNoncurrentTime <a href="https://pkg.go.dev/builtin#int64">int64</a>

            	// Liveness specifies the object's liveness. Relevant only for versioned objects
            	Liveness <a href="#cloud_google_com_go_storage_Liveness">Liveness</a>

            	// MatchesPrefix is the condition matching an object if any of the
            	// matches_prefix strings are an exact prefix of the object's name.
            	MatchesPrefix []<a href="https://pkg.go.dev/builtin#string">string</a>

            	// MatchesStorageClasses is the condition matching the object's storage
            	// class.
            	//
            	// Values include "STANDARD", "NEARLINE", "COLDLINE" and "ARCHIVE".
            	MatchesStorageClasses []<a href="https://pkg.go.dev/builtin#string">string</a>

            	// MatchesSuffix is the condition matching an object if any of the
            	// matches_suffix strings are an exact suffix of the object's name.
            	MatchesSuffix []<a href="https://pkg.go.dev/builtin#string">string</a>

            	// NoncurrentTimeBefore is the noncurrent timestamp of the object. This
            	// condition is satisfied when an object's noncurrent timestamp is before
            	// midnight of the specified date in UTC.
            	//
            	// This condition is relevant only for versioned objects.
            	NoncurrentTimeBefore <a href="https://pkg.go.dev/time">time</a>.<a href="https://pkg.go.dev/time#Time">Time</a>

            	// NumNewerVersions is the condition matching objects with a number of newer versions.
            	//
            	// If the value is N, this condition is satisfied when there are at least N
            	// versions (including the live version) newer than this version of the
            	// object.
            	// Note: Using `0` as the value will be ignored by the library and not sent to the API.
            	NumNewerVersions <a href="https://pkg.go.dev/builtin#int64">int64</a>
            }
    - uid: cloud.google.com/go/storage.LifecycleRule
      name: LifecycleRule
      id: LifecycleRule
      summary: |
        LifecycleRule is a lifecycle configuration rule.

        When all the configured conditions are met by an object in the bucket, the
        configured action will automatically be taken on that object.
      parent: cloud.google.com/go/storage
      type: type
      langs:
        - go
      syntax:
        content: |-
            type LifecycleRule struct {
            	// Action is the action to take when all of the associated conditions are
            	// met.
            	Action <a href="#cloud_google_com_go_storage_LifecycleAction">LifecycleAction</a>

            	// Condition is the set of conditions that must be met for the associated
            	// action to be taken.
            	Condition <a href="#cloud_google_com_go_storage_LifecycleCondition">LifecycleCondition</a>
            }
    - uid: cloud.google.com/go/storage.Liveness
      name: Liveness
      id: Liveness
      summary: |
        Liveness specifies whether the object is live or not.
      parent: cloud.google.com/go/storage
      type: type
      langs:
        - go
      syntax:
        content: type Liveness <a href="https://pkg.go.dev/builtin#int">int</a>
    - uid: cloud.google.com/go/storage.LiveAndArchived,Live,Archived
      name: LiveAndArchived, Live, Archived
      id: LiveAndArchived,Live,Archived
      parent: cloud.google.com/go/storage.Liveness
      type: const
      langs:
        - go
      syntax:
        content: |-
            const (
            	// LiveAndArchived includes both live and archived objects.
            	LiveAndArchived <a href="#cloud_google_com_go_storage_Liveness">Liveness</a> = <a href="https://pkg.go.dev/builtin#iota">iota</a>
            	// Live specifies that the object is still live.
            	Live
            	// Archived specifies that the object is archived.
            	Archived
            )
    - uid: cloud.google.com/go/storage.Notification
      name: Notification
      id: Notification
      summary: |
        A Notification describes how to send Cloud PubSub messages when certain
        events occur in a bucket.
      parent: cloud.google.com/go/storage
      type: type
      langs:
        - go
      syntax:
        content: |-
            type Notification struct {
            	//The ID of the notification.
            	ID <a href="https://pkg.go.dev/builtin#string">string</a>

            	// The ID of the topic to which this subscription publishes.
            	TopicID <a href="https://pkg.go.dev/builtin#string">string</a>

            	// The ID of the project to which the topic belongs.
            	TopicProjectID <a href="https://pkg.go.dev/builtin#string">string</a>

            	// Only send notifications about listed event types. If empty, send notifications
            	// for all event types.
            	// See https://cloud.google.com/storage/docs/pubsub-notifications#events.
            	EventTypes []<a href="https://pkg.go.dev/builtin#string">string</a>

            	// If present, only apply this notification configuration to object names that
            	// begin with this prefix.
            	ObjectNamePrefix <a href="https://pkg.go.dev/builtin#string">string</a>

            	// An optional list of additional attributes to attach to each Cloud PubSub
            	// message published for this notification subscription.
            	CustomAttributes map[<a href="https://pkg.go.dev/builtin#string">string</a>]<a href="https://pkg.go.dev/builtin#string">string</a>

            	// The contents of the message payload.
            	// See https://cloud.google.com/storage/docs/pubsub-notifications#payload.
            	PayloadFormat <a href="https://pkg.go.dev/builtin#string">string</a>
            }
    - uid: cloud.google.com/go/storage.ObjectAttrs
      name: ObjectAttrs
      id: ObjectAttrs
      summary: |
        ObjectAttrs represents the metadata for a Google Cloud Storage (GCS) object.
      parent: cloud.google.com/go/storage
      type: type
      langs:
        - go
      syntax:
        content: |-
            type ObjectAttrs struct {
            	// Bucket is the name of the bucket containing this GCS object.
            	// This field is read-only.
            	Bucket <a href="https://pkg.go.dev/builtin#string">string</a>

            	// Name is the name of the object within the bucket.
            	// This field is read-only.
            	Name <a href="https://pkg.go.dev/builtin#string">string</a>

            	// ContentType is the MIME type of the object's content.
            	ContentType <a href="https://pkg.go.dev/builtin#string">string</a>

            	// ContentLanguage is the content language of the object's content.
            	ContentLanguage <a href="https://pkg.go.dev/builtin#string">string</a>

            	// CacheControl is the Cache-Control header to be sent in the response
            	// headers when serving the object data.
            	CacheControl <a href="https://pkg.go.dev/builtin#string">string</a>

            	// EventBasedHold specifies whether an object is under event-based hold. New
            	// objects created in a bucket whose DefaultEventBasedHold is set will
            	// default to that value.
            	EventBasedHold <a href="https://pkg.go.dev/builtin#bool">bool</a>

            	// TemporaryHold specifies whether an object is under temporary hold. While
            	// this flag is set to true, the object is protected against deletion and
            	// overwrites.
            	TemporaryHold <a href="https://pkg.go.dev/builtin#bool">bool</a>

            	// RetentionExpirationTime is a server-determined value that specifies the
            	// earliest time that the object's retention period expires.
            	// This is a read-only field.
            	RetentionExpirationTime <a href="https://pkg.go.dev/time">time</a>.<a href="https://pkg.go.dev/time#Time">Time</a>

            	// ACL is the list of access control rules for the object.
            	ACL []<a href="#cloud_google_com_go_storage_ACLRule">ACLRule</a>

            	// If not empty, applies a predefined set of access controls. It should be set
            	// only when writing, copying or composing an object. When copying or composing,
            	// it acts as the destinationPredefinedAcl parameter.
            	// PredefinedACL is always empty for ObjectAttrs returned from the service.
            	// See https://cloud.google.com/storage/docs/json_api/v1/objects/insert
            	// for valid values.
            	PredefinedACL <a href="https://pkg.go.dev/builtin#string">string</a>

            	// Owner is the owner of the object. This field is read-only.
            	//
            	// If non-zero, it is in the form of "user-<userId>".
            	Owner <a href="https://pkg.go.dev/builtin#string">string</a>

            	// Size is the length of the object's content. This field is read-only.
            	Size <a href="https://pkg.go.dev/builtin#int64">int64</a>

            	// ContentEncoding is the encoding of the object's content.
            	ContentEncoding <a href="https://pkg.go.dev/builtin#string">string</a>

            	// ContentDisposition is the optional Content-Disposition header of the object
            	// sent in the response headers.
            	ContentDisposition <a href="https://pkg.go.dev/builtin#string">string</a>

            	// MD5 is the MD5 hash of the object's content. This field is read-only,
            	// except when used from a Writer. If set on a Writer, the uploaded
            	// data is rejected if its MD5 hash does not match this field.
            	MD5 []<a href="https://pkg.go.dev/builtin#byte">byte</a>

            	// CRC32C is the CRC32 checksum of the object's content using the Castagnoli93
            	// polynomial. This field is read-only, except when used from a Writer or
            	// Composer. In those cases, if the SendCRC32C field in the Writer or Composer
            	// is set to is true, the uploaded data is rejected if its CRC32C hash does
            	// not match this field.
            	//
            	// Note: For a Writer, SendCRC32C must be set to true BEFORE the first call to
            	// Writer.Write() in order to send the checksum.
            	CRC32C <a href="https://pkg.go.dev/builtin#uint32">uint32</a>

            	// MediaLink is an URL to the object's content. This field is read-only.
            	MediaLink <a href="https://pkg.go.dev/builtin#string">string</a>

            	// Metadata represents user-provided metadata, in key/value pairs.
            	// It can be nil if no metadata is provided.
            	//
            	// For object downloads using Reader, metadata keys are sent as headers.
            	// Therefore, avoid setting metadata keys using characters that are not valid
            	// for headers. See https://www.rfc-editor.org/rfc/rfc7230#section-3.2.6.
            	Metadata map[<a href="https://pkg.go.dev/builtin#string">string</a>]<a href="https://pkg.go.dev/builtin#string">string</a>

            	// Generation is the generation number of the object's content.
            	// This field is read-only.
            	Generation <a href="https://pkg.go.dev/builtin#int64">int64</a>

            	// Metageneration is the version of the metadata for this
            	// object at this generation. This field is used for preconditions
            	// and for detecting changes in metadata. A metageneration number
            	// is only meaningful in the context of a particular generation
            	// of a particular object. This field is read-only.
            	Metageneration <a href="https://pkg.go.dev/builtin#int64">int64</a>

            	// StorageClass is the storage class of the object. This defines
            	// how objects are stored and determines the SLA and the cost of storage.
            	// Typical values are "STANDARD", "NEARLINE", "COLDLINE" and "ARCHIVE".
            	// Defaults to "STANDARD".
            	// See https://cloud.google.com/storage/docs/storage-classes for all
            	// valid values.
            	StorageClass <a href="https://pkg.go.dev/builtin#string">string</a>

            	// Created is the time the object was created. This field is read-only.
            	Created <a href="https://pkg.go.dev/time">time</a>.<a href="https://pkg.go.dev/time#Time">Time</a>

            	// Deleted is the time the object was deleted.
            	// If not deleted, it is the zero value. This field is read-only.
            	Deleted <a href="https://pkg.go.dev/time">time</a>.<a href="https://pkg.go.dev/time#Time">Time</a>

            	// Updated is the creation or modification time of the object.
            	// For buckets with versioning enabled, changing an object's
            	// metadata does not change this property. This field is read-only.
            	Updated <a href="https://pkg.go.dev/time">time</a>.<a href="https://pkg.go.dev/time#Time">Time</a>

            	// CustomerKeySHA256 is the base64-encoded SHA-256 hash of the
            	// customer-supplied encryption key for the object. It is empty if there is
            	// no customer-supplied encryption key.
            	// See // https://cloud.google.com/storage/docs/encryption for more about
            	// encryption in Google Cloud Storage.
            	CustomerKeySHA256 <a href="https://pkg.go.dev/builtin#string">string</a>

            	// Cloud KMS key name, in the form
            	// projects/P/locations/L/keyRings/R/cryptoKeys/K, used to encrypt this object,
            	// if the object is encrypted by such a key.
            	//
            	// Providing both a KMSKeyName and a customer-supplied encryption key (via
            	// ObjectHandle.Key) will result in an error when writing an object.
            	KMSKeyName <a href="https://pkg.go.dev/builtin#string">string</a>

            	// Prefix is set only for ObjectAttrs which represent synthetic "directory
            	// entries" when iterating over buckets using Query.Delimiter. See
            	// ObjectIterator.Next. When set, no other fields in ObjectAttrs will be
            	// populated.
            	Prefix <a href="https://pkg.go.dev/builtin#string">string</a>

            	// Etag is the HTTP/1.1 Entity tag for the object.
            	// This field is read-only.
            	Etag <a href="https://pkg.go.dev/builtin#string">string</a>

            	// A user-specified timestamp which can be applied to an object. This is
            	// typically set in order to use the CustomTimeBefore and DaysSinceCustomTime
            	// LifecycleConditions to manage object lifecycles.
            	//
            	// CustomTime cannot be removed once set on an object. It can be updated to a
            	// later value but not to an earlier one. For more information see
            	// https://cloud.google.com/storage/docs/metadata#custom-time .
            	CustomTime <a href="https://pkg.go.dev/time">time</a>.<a href="https://pkg.go.dev/time#Time">Time</a>

            	// ComponentCount is the number of objects contained within a composite object.
            	// For non-composite objects, the value will be zero.
            	// This field is read-only.
            	ComponentCount <a href="https://pkg.go.dev/builtin#int64">int64</a>
            }
    - uid: cloud.google.com/go/storage.ObjectAttrsToUpdate
      name: ObjectAttrsToUpdate
      id: ObjectAttrsToUpdate
      summary: |
        ObjectAttrsToUpdate is used to update the attributes of an object.
        Only fields set to non-nil values will be updated.
        For all fields except CustomTime, set the field to its zero value to delete
        it. CustomTime cannot be deleted or changed to an earlier time once set.

        For example, to change ContentType and delete ContentEncoding and
        Metadata, use

        	ObjectAttrsToUpdate{
        	    ContentType: "text/html",
        	    ContentEncoding: "",
        	    Metadata: map[string]string{},
        	}
      parent: cloud.google.com/go/storage
      type: type
      langs:
        - go
      syntax:
        content: |-
            type ObjectAttrsToUpdate struct {
            	EventBasedHold     <a href="https://pkg.go.dev/cloud.google.com/go/internal/optional">optional</a>.<a href="https://pkg.go.dev/cloud.google.com/go/internal/optional#Bool">Bool</a>
            	TemporaryHold      <a href="https://pkg.go.dev/cloud.google.com/go/internal/optional">optional</a>.<a href="https://pkg.go.dev/cloud.google.com/go/internal/optional#Bool">Bool</a>
            	ContentType        <a href="https://pkg.go.dev/cloud.google.com/go/internal/optional">optional</a>.<a href="https://pkg.go.dev/cloud.google.com/go/internal/optional#String">String</a>
            	ContentLanguage    <a href="https://pkg.go.dev/cloud.google.com/go/internal/optional">optional</a>.<a href="https://pkg.go.dev/cloud.google.com/go/internal/optional#String">String</a>
            	ContentEncoding    <a href="https://pkg.go.dev/cloud.google.com/go/internal/optional">optional</a>.<a href="https://pkg.go.dev/cloud.google.com/go/internal/optional#String">String</a>
            	ContentDisposition <a href="https://pkg.go.dev/cloud.google.com/go/internal/optional">optional</a>.<a href="https://pkg.go.dev/cloud.google.com/go/internal/optional#String">String</a>
            	CacheControl       <a href="https://pkg.go.dev/cloud.google.com/go/internal/optional">optional</a>.<a href="https://pkg.go.dev/cloud.google.com/go/internal/optional#String">String</a>
            	CustomTime         <a href="https://pkg.go.dev/time">time</a>.<a href="https://pkg.go.dev/time#Time">Time</a>         // Cannot be deleted or backdated from its current value.
            	Metadata           map[<a href="https://pkg.go.dev/builtin#string">string</a>]<a href="https://pkg.go.dev/builtin#string">string</a> // Set to map[string]string{} to delete.
            	ACL                []<a href="#cloud_google_com_go_storage_ACLRule">ACLRule</a>

            	// If not empty, applies a predefined set of access controls. ACL must be nil.
            	// See https://cloud.google.com/storage/docs/json_api/v1/objects/patch.
            	PredefinedACL <a href="https://pkg.go.dev/builtin#string">string</a>
            }
    - uid: cloud.google.com/go/storage.ObjectHandle
      name: ObjectHandle
      id: ObjectHandle
      summary: |
        ObjectHandle provides operations on an object in a Google Cloud Storage bucket.
        Use BucketHandle.Object to get a handle.
      parent: cloud.google.com/go/storage
      type: type
      langs:
        - go
      syntax:
        content: |-
            type ObjectHandle struct {
            	// contains filtered or unexported fields
            }
      codeexamples:
        - content: |
            package main

            import (
            	"context"
            	"fmt"

            	"cloud.google.com/go/storage"
            )

            func main() {
            	ctx := context.Background()
            	client, err := storage.NewClient(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}

            	attrs, err := client.Bucket("my-bucket").Object("my-object").Attrs(ctx)
            	if err == storage.ErrObjectNotExist {
            		fmt.Println("The object does not exist")
            		return
            	}
            	if err != nil {
            		// TODO: handle error.
            	}
            	fmt.Printf("The object exists and has attributes: %#v\n", attrs)
            }
          name: exists
    - uid: cloud.google.com/go/storage.ObjectHandle.ACL
      name: |
        func (*ObjectHandle) ACL
      id: ACL
      summary: |
        ACL provides access to the object's access control list.
        This controls who can read and write this object.
        This call does not perform any network operations.
      parent: cloud.google.com/go/storage.ObjectHandle
      type: method
      langs:
        - go
      syntax:
        content: func (o *<a href="#cloud_google_com_go_storage_ObjectHandle">ObjectHandle</a>) ACL() *<a href="#cloud_google_com_go_storage_ACLHandle">ACLHandle</a>
    - uid: cloud.google.com/go/storage.ObjectHandle.Attrs
      name: |
        func (*ObjectHandle) Attrs
      id: Attrs
      summary: |
        Attrs returns meta information about the object.
        ErrObjectNotExist will be returned if the object is not found.
      parent: cloud.google.com/go/storage.ObjectHandle
      type: method
      langs:
        - go
      syntax:
        content: func (o *<a href="#cloud_google_com_go_storage_ObjectHandle">ObjectHandle</a>) Attrs(ctx <a href="https://pkg.go.dev/context">context</a>.<a href="https://pkg.go.dev/context#Context">Context</a>) (attrs *<a href="#cloud_google_com_go_storage_ObjectAttrs">ObjectAttrs</a>, err <a href="https://pkg.go.dev/builtin#error">error</a>)
      codeexamples:
        - content: |
            package main

            import (
            	"context"
            	"fmt"

            	"cloud.google.com/go/storage"
            )

            func main() {
            	ctx := context.Background()
            	client, err := storage.NewClient(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}
            	objAttrs, err := client.Bucket("my-bucket").Object("my-object").Attrs(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}
            	fmt.Println(objAttrs)
            }
        - content: |
            package main

            import (
            	"context"
            	"fmt"
            	"time"

            	"cloud.google.com/go/storage"
            )

            func main() {
            	ctx := context.Background()
            	client, err := storage.NewClient(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}
            	obj := client.Bucket("my-bucket").Object("my-object")
            	// Read the object.
            	objAttrs1, err := obj.Attrs(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}
            	// Do something else for a while.
            	time.Sleep(5 * time.Minute)
            	// Now read the same contents, even if the object has been written since the last read.
            	objAttrs2, err := obj.Generation(objAttrs1.Generation).Attrs(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}
            	fmt.Println(objAttrs1, objAttrs2)
            }
          name: withConditions
    - uid: cloud.google.com/go/storage.ObjectHandle.BucketName
      name: |
        func (*ObjectHandle) BucketName
      id: BucketName
      summary: |
        BucketName returns the name of the bucket.
      parent: cloud.google.com/go/storage.ObjectHandle
      type: method
      langs:
        - go
      syntax:
        content: func (o *<a href="#cloud_google_com_go_storage_ObjectHandle">ObjectHandle</a>) BucketName() <a href="https://pkg.go.dev/builtin#string">string</a>
    - uid: cloud.google.com/go/storage.ObjectHandle.ComposerFrom
      name: |
        func (*ObjectHandle) ComposerFrom
      id: ComposerFrom
      summary: |
        ComposerFrom creates a Composer that can compose srcs into dst.
        You can immediately call Run on the returned Composer, or you can
        configure it first.

        The encryption key for the destination object will be used to decrypt all
        source objects and encrypt the destination object. It is an error
        to specify an encryption key for any of the source objects.
      parent: cloud.google.com/go/storage.ObjectHandle
      type: method
      langs:
        - go
      syntax:
        content: func (dst *<a href="#cloud_google_com_go_storage_ObjectHandle">ObjectHandle</a>) ComposerFrom(srcs ...*<a href="#cloud_google_com_go_storage_ObjectHandle">ObjectHandle</a>) *<a href="#cloud_google_com_go_storage_Composer">Composer</a>
    - uid: cloud.google.com/go/storage.ObjectHandle.CopierFrom
      name: |
        func (*ObjectHandle) CopierFrom
      id: CopierFrom
      summary: |
        CopierFrom creates a Copier that can copy src to dst.
        You can immediately call Run on the returned Copier, or
        you can configure it first.

        For Requester Pays buckets, the user project of dst is billed, unless it is empty,
        in which case the user project of src is billed.
      parent: cloud.google.com/go/storage.ObjectHandle
      type: method
      langs:
        - go
      syntax:
        content: func (dst *<a href="#cloud_google_com_go_storage_ObjectHandle">ObjectHandle</a>) CopierFrom(src *<a href="#cloud_google_com_go_storage_ObjectHandle">ObjectHandle</a>) *<a href="#cloud_google_com_go_storage_Copier">Copier</a>
      codeexamples:
        - content: |
            package main

            import (
            	"context"

            	"cloud.google.com/go/storage"
            )

            var key1, key2 []byte

            func main() {
            	// To rotate the encryption key on an object, copy it onto itself.
            	ctx := context.Background()
            	client, err := storage.NewClient(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}
            	obj := client.Bucket("bucketname").Object("obj")
            	// Assume obj is encrypted with key1, and we want to change to key2.
            	_, err = obj.Key(key2).CopierFrom(obj.Key(key1)).Run(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}
            }
          name: rotateEncryptionKeys
    - uid: cloud.google.com/go/storage.ObjectHandle.Delete
      name: |
        func (*ObjectHandle) Delete
      id: Delete
      summary: |
        Delete deletes the single specified object.
      parent: cloud.google.com/go/storage.ObjectHandle
      type: method
      langs:
        - go
      syntax:
        content: func (o *<a href="#cloud_google_com_go_storage_ObjectHandle">ObjectHandle</a>) Delete(ctx <a href="https://pkg.go.dev/context">context</a>.<a href="https://pkg.go.dev/context#Context">Context</a>) <a href="https://pkg.go.dev/builtin#error">error</a>
      codeexamples:
        - content: |
            package main

            import (
            	"context"
            	"fmt"

            	"cloud.google.com/go/storage"
            	"google.golang.org/api/iterator"
            )

            func main() {
            	ctx := context.Background()
            	client, err := storage.NewClient(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}
            	// To delete multiple objects in a bucket, list them with an
            	// ObjectIterator, then Delete them.

            	// If you are using this package on the App Engine Flex runtime,
            	// you can init a bucket client with your app's default bucket name.
            	// See http://godoc.org/google.golang.org/appengine/file#DefaultBucketName.
            	bucket := client.Bucket("my-bucket")
            	it := bucket.Objects(ctx, nil)
            	for {
            		objAttrs, err := it.Next()
            		if err != nil && err != iterator.Done {
            			// TODO: Handle error.
            		}
            		if err == iterator.Done {
            			break
            		}
            		if err := bucket.Object(objAttrs.Name).Delete(ctx); err != nil {
            			// TODO: Handle error.
            		}
            	}
            	fmt.Println("deleted all object items in the bucket specified.")
            }
    - uid: cloud.google.com/go/storage.ObjectHandle.Generation
      name: |
        func (*ObjectHandle) Generation
      id: Generation
      summary: |
        Generation returns a new ObjectHandle that operates on a specific generation
        of the object.
        By default, the handle operates on the latest generation. Not
        all operations work when given a specific generation; check the API
        endpoints at https://cloud.google.com/storage/docs/json_api/ for details.
      parent: cloud.google.com/go/storage.ObjectHandle
      type: method
      langs:
        - go
      syntax:
        content: func (o *<a href="#cloud_google_com_go_storage_ObjectHandle">ObjectHandle</a>) Generation(gen <a href="https://pkg.go.dev/builtin#int64">int64</a>) *<a href="#cloud_google_com_go_storage_ObjectHandle">ObjectHandle</a>
      codeexamples:
        - content: |
            package main

            import (
            	"context"
            	"io"
            	"os"

            	"cloud.google.com/go/storage"
            )

            var gen int64

            func main() {
            	// Read an object's contents from generation gen, regardless of the
            	// current generation of the object.
            	ctx := context.Background()
            	client, err := storage.NewClient(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}
            	obj := client.Bucket("my-bucket").Object("my-object")
            	rc, err := obj.Generation(gen).NewReader(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}
            	defer rc.Close()
            	if _, err := io.Copy(os.Stdout, rc); err != nil {
            		// TODO: handle error.
            	}
            }
    - uid: cloud.google.com/go/storage.ObjectHandle.If
      name: |
        func (*ObjectHandle) If
      id: If
      summary: |
        If returns a new ObjectHandle that applies a set of preconditions.
        Preconditions already set on the ObjectHandle are ignored. The supplied
        Conditions must have at least one field set to a non-default value;
        otherwise an error will be returned from any operation on the ObjectHandle.
        Operations on the new handle will return an error if the preconditions are not
        satisfied. See https://cloud.google.com/storage/docs/generations-preconditions
        for more details.
      parent: cloud.google.com/go/storage.ObjectHandle
      type: method
      langs:
        - go
      syntax:
        content: func (o *<a href="#cloud_google_com_go_storage_ObjectHandle">ObjectHandle</a>) If(conds <a href="#cloud_google_com_go_storage_Conditions">Conditions</a>) *<a href="#cloud_google_com_go_storage_ObjectHandle">ObjectHandle</a>
      codeexamples:
        - content: |
            package main

            import (
            	"context"
            	"io"
            	"net/http"
            	"os"

            	"cloud.google.com/go/storage"
            	"google.golang.org/api/googleapi"
            )

            var gen int64

            func main() {
            	// Read from an object only if the current generation is gen.
            	ctx := context.Background()
            	client, err := storage.NewClient(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}
            	obj := client.Bucket("my-bucket").Object("my-object")
            	rc, err := obj.If(storage.Conditions{GenerationMatch: gen}).NewReader(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}

            	if _, err := io.Copy(os.Stdout, rc); err != nil {
            		// TODO: handle error.
            	}
            	if err := rc.Close(); err != nil {
            		switch ee := err.(type) {
            		case *googleapi.Error:
            			if ee.Code == http.StatusPreconditionFailed {
            				// The condition presented in the If failed.
            				// TODO: handle error.
            			}

            			// TODO: handle other status codes here.

            		default:
            			// TODO: handle error.
            		}
            	}
            }
    - uid: cloud.google.com/go/storage.ObjectHandle.Key
      name: |
        func (*ObjectHandle) Key
      id: Key
      summary: |
        Key returns a new ObjectHandle that uses the supplied encryption
        key to encrypt and decrypt the object's contents.

        Encryption key must be a 32-byte AES-256 key.
        See https://cloud.google.com/storage/docs/encryption for details.
      parent: cloud.google.com/go/storage.ObjectHandle
      type: method
      langs:
        - go
      syntax:
        content: func (o *<a href="#cloud_google_com_go_storage_ObjectHandle">ObjectHandle</a>) Key(encryptionKey []<a href="https://pkg.go.dev/builtin#byte">byte</a>) *<a href="#cloud_google_com_go_storage_ObjectHandle">ObjectHandle</a>
      codeexamples:
        - content: |
            package main

            import (
            	"context"

            	"cloud.google.com/go/storage"
            )

            var secretKey []byte

            func main() {
            	ctx := context.Background()
            	client, err := storage.NewClient(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}
            	obj := client.Bucket("my-bucket").Object("my-object")
            	// Encrypt the object's contents.
            	w := obj.Key(secretKey).NewWriter(ctx)
            	if _, err := w.Write([]byte("top secret")); err != nil {
            		// TODO: handle error.
            	}
            	if err := w.Close(); err != nil {
            		// TODO: handle error.
            	}
            }
    - uid: cloud.google.com/go/storage.ObjectHandle.NewRangeReader
      name: |
        func (*ObjectHandle) NewRangeReader
      id: NewRangeReader
      summary: |
        NewRangeReader reads part of an object, reading at most length bytes
        starting at the given offset. If length is negative, the object is read
        until the end. If offset is negative, the object is read abs(offset) bytes
        from the end, and length must also be negative to indicate all remaining
        bytes will be read.

        If the object's metadata property "Content-Encoding" is set to "gzip" or satisfies
        decompressive transcoding per https://cloud.google.com/storage/docs/transcoding
        that file will be served back whole, regardless of the requested range as
        Google Cloud Storage dictates.
      parent: cloud.google.com/go/storage.ObjectHandle
      type: method
      langs:
        - go
      syntax:
        content: func (o *<a href="#cloud_google_com_go_storage_ObjectHandle">ObjectHandle</a>) NewRangeReader(ctx <a href="https://pkg.go.dev/context">context</a>.<a href="https://pkg.go.dev/context#Context">Context</a>, offset, length <a href="https://pkg.go.dev/builtin#int64">int64</a>) (r *<a href="#cloud_google_com_go_storage_Reader">Reader</a>, err <a href="https://pkg.go.dev/builtin#error">error</a>)
      codeexamples:
        - content: |
            package main

            import (
            	"context"
            	"fmt"
            	"io/ioutil"

            	"cloud.google.com/go/storage"
            )

            func main() {
            	ctx := context.Background()
            	client, err := storage.NewClient(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}
            	// Read only the first 64K.
            	rc, err := client.Bucket("bucketname").Object("filename1").NewRangeReader(ctx, 0, 64*1024)
            	if err != nil {
            		// TODO: handle error.
            	}
            	defer rc.Close()

            	slurp, err := ioutil.ReadAll(rc)
            	if err != nil {
            		// TODO: handle error.
            	}
            	fmt.Printf("first 64K of file contents:\n%s\n", slurp)
            }
        - content: |
            package main

            import (
            	"context"
            	"fmt"
            	"io/ioutil"

            	"cloud.google.com/go/storage"
            )

            func main() {
            	ctx := context.Background()
            	client, err := storage.NewClient(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}
            	// Read only the last 10 bytes until the end of the file.
            	rc, err := client.Bucket("bucketname").Object("filename1").NewRangeReader(ctx, -10, -1)
            	if err != nil {
            		// TODO: handle error.
            	}
            	defer rc.Close()

            	slurp, err := ioutil.ReadAll(rc)
            	if err != nil {
            		// TODO: handle error.
            	}
            	fmt.Printf("Last 10 bytes from the end of the file:\n%s\n", slurp)
            }
          name: lastNBytes
        - content: |
            package main

            import (
            	"context"
            	"fmt"
            	"io/ioutil"

            	"cloud.google.com/go/storage"
            )

            func main() {
            	ctx := context.Background()
            	client, err := storage.NewClient(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}
            	// Read from the 101st byte until the end of the file.
            	rc, err := client.Bucket("bucketname").Object("filename1").NewRangeReader(ctx, 100, -1)
            	if err != nil {
            		// TODO: handle error.
            	}
            	defer rc.Close()

            	slurp, err := ioutil.ReadAll(rc)
            	if err != nil {
            		// TODO: handle error.
            	}
            	fmt.Printf("From 101st byte until the end:\n%s\n", slurp)
            }
          name: untilEnd
    - uid: cloud.google.com/go/storage.ObjectHandle.NewReader
      name: |
        func (*ObjectHandle) NewReader
      id: NewReader
      summary: |
        NewReader creates a new Reader to read the contents of the
        object.
        ErrObjectNotExist will be returned if the object is not found.

        The caller must call Close on the returned Reader when done reading.
      parent: cloud.google.com/go/storage.ObjectHandle
      type: method
      langs:
        - go
      syntax:
        content: func (o *<a href="#cloud_google_com_go_storage_ObjectHandle">ObjectHandle</a>) NewReader(ctx <a href="https://pkg.go.dev/context">context</a>.<a href="https://pkg.go.dev/context#Context">Context</a>) (*<a href="#cloud_google_com_go_storage_Reader">Reader</a>, <a href="https://pkg.go.dev/builtin#error">error</a>)
      codeexamples:
        - content: |
            package main

            import (
            	"context"
            	"fmt"
            	"io/ioutil"

            	"cloud.google.com/go/storage"
            )

            func main() {
            	ctx := context.Background()
            	client, err := storage.NewClient(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}
            	rc, err := client.Bucket("my-bucket").Object("my-object").NewReader(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}
            	slurp, err := ioutil.ReadAll(rc)
            	rc.Close()
            	if err != nil {
            		// TODO: handle error.
            	}
            	fmt.Println("file contents:", slurp)
            }
    - uid: cloud.google.com/go/storage.ObjectHandle.NewWriter
      name: |
        func (*ObjectHandle) NewWriter
      id: NewWriter
      summary: |
        NewWriter returns a storage Writer that writes to the GCS object
        associated with this ObjectHandle.

        A new object will be created unless an object with this name already exists.
        Otherwise any previous object with the same name will be replaced.
        The object will not be available (and any previous object will remain)
        until Close has been called.

        Attributes can be set on the object by modifying the returned Writer's
        ObjectAttrs field before the first call to Write. If no ContentType
        attribute is specified, the content type will be automatically sniffed
        using net/http.DetectContentType.

        Note that each Writer allocates an internal buffer of size Writer.ChunkSize.
        See the ChunkSize docs for more information.

        It is the caller's responsibility to call Close when writing is done. To
        stop writing without saving the data, cancel the context.
      parent: cloud.google.com/go/storage.ObjectHandle
      type: method
      langs:
        - go
      syntax:
        content: func (o *<a href="#cloud_google_com_go_storage_ObjectHandle">ObjectHandle</a>) NewWriter(ctx <a href="https://pkg.go.dev/context">context</a>.<a href="https://pkg.go.dev/context#Context">Context</a>) *<a href="#cloud_google_com_go_storage_Writer">Writer</a>
      codeexamples:
        - content: |
            package main

            import (
            	"context"

            	"cloud.google.com/go/storage"
            )

            func main() {
            	ctx := context.Background()
            	client, err := storage.NewClient(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}
            	wc := client.Bucket("bucketname").Object("filename1").NewWriter(ctx)
            	_ = wc // TODO: Use the Writer.
            }
    - uid: cloud.google.com/go/storage.ObjectHandle.ObjectName
      name: |
        func (*ObjectHandle) ObjectName
      id: ObjectName
      summary: |
        ObjectName returns the name of the object.
      parent: cloud.google.com/go/storage.ObjectHandle
      type: method
      langs:
        - go
      syntax:
        content: func (o *<a href="#cloud_google_com_go_storage_ObjectHandle">ObjectHandle</a>) ObjectName() <a href="https://pkg.go.dev/builtin#string">string</a>
    - uid: cloud.google.com/go/storage.ObjectHandle.ReadCompressed
      name: |
        func (*ObjectHandle) ReadCompressed
      id: ReadCompressed
      summary: |
        ReadCompressed when true causes the read to happen without decompressing.
      parent: cloud.google.com/go/storage.ObjectHandle
      type: method
      langs:
        - go
      syntax:
        content: func (o *<a href="#cloud_google_com_go_storage_ObjectHandle">ObjectHandle</a>) ReadCompressed(compressed <a href="https://pkg.go.dev/builtin#bool">bool</a>) *<a href="#cloud_google_com_go_storage_ObjectHandle">ObjectHandle</a>
    - uid: cloud.google.com/go/storage.ObjectHandle.Retryer
      name: |
        func (*ObjectHandle) Retryer
      id: Retryer
      summary: |
        Retryer returns an object handle that is configured with custom retry
        behavior as specified by the options that are passed to it. All operations
        on the new handle will use the customized retry configuration.
        These retry options will merge with the bucket's retryer (if set) for the
        returned handle. Options passed into this method will take precedence over
        retry options on the bucket and client. Note that you must explicitly pass in
        each option you want to override.
      parent: cloud.google.com/go/storage.ObjectHandle
      type: method
      langs:
        - go
      syntax:
        content: func (o *<a href="#cloud_google_com_go_storage_ObjectHandle">ObjectHandle</a>) Retryer(opts ...<a href="#cloud_google_com_go_storage_RetryOption">RetryOption</a>) *<a href="#cloud_google_com_go_storage_ObjectHandle">ObjectHandle</a>
    - uid: cloud.google.com/go/storage.ObjectHandle.Update
      name: |
        func (*ObjectHandle) Update
      id: Update
      summary: |
        Update updates an object with the provided attributes. See
        ObjectAttrsToUpdate docs for details on treatment of zero values.
        ErrObjectNotExist will be returned if the object is not found.
      parent: cloud.google.com/go/storage.ObjectHandle
      type: method
      langs:
        - go
      syntax:
        content: func (o *<a href="#cloud_google_com_go_storage_ObjectHandle">ObjectHandle</a>) Update(ctx <a href="https://pkg.go.dev/context">context</a>.<a href="https://pkg.go.dev/context#Context">Context</a>, uattrs <a href="#cloud_google_com_go_storage_ObjectAttrsToUpdate">ObjectAttrsToUpdate</a>) (oa *<a href="#cloud_google_com_go_storage_ObjectAttrs">ObjectAttrs</a>, err <a href="https://pkg.go.dev/builtin#error">error</a>)
      codeexamples:
        - content: |
            package main

            import (
            	"context"
            	"fmt"

            	"cloud.google.com/go/storage"
            )

            func main() {
            	ctx := context.Background()
            	client, err := storage.NewClient(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}
            	// Change only the content type of the object.
            	objAttrs, err := client.Bucket("my-bucket").Object("my-object").Update(ctx, storage.ObjectAttrsToUpdate{
            		ContentType:        "text/html",
            		ContentDisposition: "", // delete ContentDisposition
            	})
            	if err != nil {
            		// TODO: handle error.
            	}
            	fmt.Println(objAttrs)
            }
    - uid: cloud.google.com/go/storage.ObjectIterator
      name: ObjectIterator
      id: ObjectIterator
      summary: |
        An ObjectIterator is an iterator over ObjectAttrs.

        Note: This iterator is not safe for concurrent operations without explicit synchronization.
      parent: cloud.google.com/go/storage
      type: type
      langs:
        - go
      syntax:
        content: |-
            type ObjectIterator struct {
            	// contains filtered or unexported fields
            }
    - uid: cloud.google.com/go/storage.ObjectIterator.Next
      name: |
        func (*ObjectIterator) Next
      id: Next
      summary: |
        Next returns the next result. Its second return value is iterator.Done if
        there are no more results. Once Next returns iterator.Done, all subsequent
        calls will return iterator.Done.

        In addition, if Next returns an error other than iterator.Done, all
        subsequent calls will return the same error. To continue iteration, a new
        `ObjectIterator` must be created. Since objects are ordered lexicographically
        by name, `Query.StartOffset` can be used to create a new iterator which will
        start at the desired place. See
        https://pkg.go.dev/cloud.google.com/go/storage?tab=doc#hdr-Listing_objects.

        If Query.Delimiter is non-empty, some of the ObjectAttrs returned by Next will
        have a non-empty Prefix field, and a zero value for all other fields. These
        represent prefixes.

        Note: This method is not safe for concurrent operations without explicit synchronization.
      parent: cloud.google.com/go/storage.ObjectIterator
      type: method
      langs:
        - go
      syntax:
        content: func (it *<a href="#cloud_google_com_go_storage_ObjectIterator">ObjectIterator</a>) Next() (*<a href="#cloud_google_com_go_storage_ObjectAttrs">ObjectAttrs</a>, <a href="https://pkg.go.dev/builtin#error">error</a>)
      codeexamples:
        - content: |
            package main

            import (
            	"context"
            	"fmt"

            	"cloud.google.com/go/storage"
            	"google.golang.org/api/iterator"
            )

            func main() {
            	ctx := context.Background()
            	client, err := storage.NewClient(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}
            	it := client.Bucket("my-bucket").Objects(ctx, nil)
            	for {
            		objAttrs, err := it.Next()
            		if err == iterator.Done {
            			break
            		}
            		if err != nil {
            			// TODO: Handle error.
            		}
            		fmt.Println(objAttrs)
            	}
            }
    - uid: cloud.google.com/go/storage.ObjectIterator.PageInfo
      name: |
        func (*ObjectIterator) PageInfo
      id: PageInfo
      summary: |
        PageInfo supports pagination. See the google.golang.org/api/iterator package for details.

        Note: This method is not safe for concurrent operations without explicit synchronization.
      parent: cloud.google.com/go/storage.ObjectIterator
      type: method
      langs:
        - go
      syntax:
        content: func (it *<a href="#cloud_google_com_go_storage_ObjectIterator">ObjectIterator</a>) PageInfo() *<a href="https://pkg.go.dev/google.golang.org/api/iterator">iterator</a>.<a href="https://pkg.go.dev/google.golang.org/api/iterator#PageInfo">PageInfo</a>
    - uid: cloud.google.com/go/storage.PolicyV4Fields
      name: PolicyV4Fields
      id: PolicyV4Fields
      summary: |
        PolicyV4Fields describes the attributes for a PostPolicyV4 request.
      parent: cloud.google.com/go/storage
      type: type
      langs:
        - go
      syntax:
        content: |-
            type PolicyV4Fields struct {
            	// ACL specifies the access control permissions for the object.
            	// Optional.
            	ACL <a href="https://pkg.go.dev/builtin#string">string</a>
            	// CacheControl specifies the caching directives for the object.
            	// Optional.
            	CacheControl <a href="https://pkg.go.dev/builtin#string">string</a>
            	// ContentType specifies the media type of the object.
            	// Optional.
            	ContentType <a href="https://pkg.go.dev/builtin#string">string</a>
            	// ContentDisposition specifies how the file will be served back to requesters.
            	// Optional.
            	ContentDisposition <a href="https://pkg.go.dev/builtin#string">string</a>
            	// ContentEncoding specifies the decompressive transcoding that the object.
            	// This field is complementary to ContentType in that the file could be
            	// compressed but ContentType specifies the file's original media type.
            	// Optional.
            	ContentEncoding <a href="https://pkg.go.dev/builtin#string">string</a>
            	// Metadata specifies custom metadata for the object.
            	// If any key doesn't begin with "x-goog-meta-", an error will be returned.
            	// Optional.
            	Metadata map[<a href="https://pkg.go.dev/builtin#string">string</a>]<a href="https://pkg.go.dev/builtin#string">string</a>
            	// StatusCodeOnSuccess when set, specifies the status code that Cloud Storage
            	// will serve back on successful upload of the object.
            	// Optional.
            	StatusCodeOnSuccess <a href="https://pkg.go.dev/builtin#int">int</a>
            	// RedirectToURLOnSuccess when set, specifies the URL that Cloud Storage
            	// will serve back on successful upload of the object.
            	// Optional.
            	RedirectToURLOnSuccess <a href="https://pkg.go.dev/builtin#string">string</a>
            }
    - uid: cloud.google.com/go/storage.PostPolicyV4
      name: PostPolicyV4
      id: PostPolicyV4
      summary: |
        PostPolicyV4 describes the URL and respective form fields for a generated PostPolicyV4 request.
      parent: cloud.google.com/go/storage
      type: type
      langs:
        - go
      syntax:
        content: |-
            type PostPolicyV4 struct {
            	// URL is the generated URL that the file upload will be made to.
            	URL <a href="https://pkg.go.dev/builtin#string">string</a>
            	// Fields specifies the generated key-values that the file uploader
            	// must include in their multipart upload form.
            	Fields map[<a href="https://pkg.go.dev/builtin#string">string</a>]<a href="https://pkg.go.dev/builtin#string">string</a>
            }
    - uid: cloud.google.com/go/storage.PostPolicyV4.GenerateSignedPostPolicyV4
      name: |
        func GenerateSignedPostPolicyV4
      id: GenerateSignedPostPolicyV4
      summary: |
        GenerateSignedPostPolicyV4 generates a PostPolicyV4 value from bucket, object and opts.
        The generated URL and fields will then allow an unauthenticated client to perform multipart uploads.
        If initializing a Storage Client, instead use the Bucket.GenerateSignedPostPolicyV4
        method which uses the Client's credentials to handle authentication.
      parent: cloud.google.com/go/storage.PostPolicyV4
      type: function
      langs:
        - go
      syntax:
        content: func GenerateSignedPostPolicyV4(bucket, object <a href="https://pkg.go.dev/builtin#string">string</a>, opts *<a href="#cloud_google_com_go_storage_PostPolicyV4Options">PostPolicyV4Options</a>) (*<a href="#cloud_google_com_go_storage_PostPolicyV4">PostPolicyV4</a>, <a href="https://pkg.go.dev/builtin#error">error</a>)
      codeexamples:
        - content: |
            package main

            import (
            	"bytes"
            	"io"
            	"mime/multipart"
            	"net/http"
            	"time"

            	"cloud.google.com/go/storage"
            )

            func main() {
            	pv4, err := storage.GenerateSignedPostPolicyV4("my-bucket", "my-object.txt", &storage.PostPolicyV4Options{
            		GoogleAccessID: "my-access-id",
            		PrivateKey:     []byte("my-private-key"),

            		// The upload expires in 2hours.
            		Expires: time.Now().Add(2 * time.Hour),

            		Fields: &storage.PolicyV4Fields{
            			StatusCodeOnSuccess:    200,
            			RedirectToURLOnSuccess: "https://example.org/",
            			// It MUST only be a text file.
            			ContentType: "text/plain",
            		},

            		// The conditions that the uploaded file will be expected to conform to.
            		Conditions: []storage.PostPolicyV4Condition{
            			// Make the file a maximum of 10mB.
            			storage.ConditionContentLengthRange(0, 10<<20),
            		},
            	})
            	if err != nil {
            		// TODO: handle error.
            	}

            	// Now you can upload your file using the generated post policy
            	// with a plain HTTP client or even the browser.
            	formBuf := new(bytes.Buffer)
            	mw := multipart.NewWriter(formBuf)
            	for fieldName, value := range pv4.Fields {
            		if err := mw.WriteField(fieldName, value); err != nil {
            			// TODO: handle error.
            		}
            	}
            	file := bytes.NewReader(bytes.Repeat([]byte("a"), 100))

            	mf, err := mw.CreateFormFile("file", "myfile.txt")
            	if err != nil {
            		// TODO: handle error.
            	}
            	if _, err := io.Copy(mf, file); err != nil {
            		// TODO: handle error.
            	}
            	if err := mw.Close(); err != nil {
            		// TODO: handle error.
            	}

            	// Compose the request.
            	req, err := http.NewRequest("POST", pv4.URL, formBuf)
            	if err != nil {
            		// TODO: handle error.
            	}
            	// Ensure the Content-Type is derived from the multipart writer.
            	req.Header.Set("Content-Type", mw.FormDataContentType())
            	res, err := http.DefaultClient.Do(req)
            	if err != nil {
            		// TODO: handle error.
            	}
            	_ = res
            }
    - uid: cloud.google.com/go/storage.PostPolicyV4Condition
      name: PostPolicyV4Condition
      id: PostPolicyV4Condition
      summary: |
        PostPolicyV4Condition describes the constraints that the subsequent
        object upload's multipart form fields will be expected to conform to.
      parent: cloud.google.com/go/storage
      type: type
      langs:
        - go
      syntax:
        content: |-
            type PostPolicyV4Condition interface {
            	<a href="https://pkg.go.dev/encoding/json">json</a>.<a href="https://pkg.go.dev/encoding/json#Marshaler">Marshaler</a>
            	// contains filtered or unexported methods
            }
    - uid: cloud.google.com/go/storage.PostPolicyV4Condition.ConditionContentLengthRange
      name: |
        func ConditionContentLengthRange
      id: ConditionContentLengthRange
      summary: |
        ConditionContentLengthRange constraints the limits that the
        multipart upload's range header will be expected to be within.
      parent: cloud.google.com/go/storage.PostPolicyV4Condition
      type: function
      langs:
        - go
      syntax:
        content: func ConditionContentLengthRange(start, end <a href="https://pkg.go.dev/builtin#uint64">uint64</a>) <a href="#cloud_google_com_go_storage_PostPolicyV4Condition">PostPolicyV4Condition</a>
    - uid: cloud.google.com/go/storage.PostPolicyV4Condition.ConditionStartsWith
      name: |
        func ConditionStartsWith
      id: ConditionStartsWith
      summary: |
        ConditionStartsWith checks that an attributes starts with value.
        An empty value will cause this condition to be ignored.
      parent: cloud.google.com/go/storage.PostPolicyV4Condition
      type: function
      langs:
        - go
      syntax:
        content: func ConditionStartsWith(key, value <a href="https://pkg.go.dev/builtin#string">string</a>) <a href="#cloud_google_com_go_storage_PostPolicyV4Condition">PostPolicyV4Condition</a>
    - uid: cloud.google.com/go/storage.PostPolicyV4Options
      name: PostPolicyV4Options
      id: PostPolicyV4Options
      summary: |
        PostPolicyV4Options are used to construct a signed post policy.
        Please see https://cloud.google.com/storage/docs/xml-api/post-object
        for reference about the fields.
      parent: cloud.google.com/go/storage
      type: type
      langs:
        - go
      syntax:
        content: |-
            type PostPolicyV4Options struct {
            	// GoogleAccessID represents the authorizer of the signed post policy generation.
            	// It is typically the Google service account client email address from
            	// the Google Developers Console in the form of "xxx@developer.gserviceaccount.com".
            	// Required.
            	GoogleAccessID <a href="https://pkg.go.dev/builtin#string">string</a>

            	// PrivateKey is the Google service account private key. It is obtainable
            	// from the Google Developers Console.
            	// At https://console.developers.google.com/project/<your-project-id>/apiui/credential,
            	// create a service account client ID or reuse one of your existing service account
            	// credentials. Click on the "Generate new P12 key" to generate and download
            	// a new private key. Once you download the P12 file, use the following command
            	// to convert it into a PEM file.
            	//
            	//    $ openssl pkcs12 -in key.p12 -passin pass:notasecret -out key.pem -nodes
            	//
            	// Provide the contents of the PEM file as a byte slice.
            	// Exactly one of PrivateKey or SignBytes must be non-nil.
            	PrivateKey []<a href="https://pkg.go.dev/builtin#byte">byte</a>

            	// SignBytes is a function for implementing custom signing.
            	//
            	// Deprecated: Use SignRawBytes. If both SignBytes and SignRawBytes are defined,
            	// SignBytes will be ignored.
            	// This SignBytes function expects the bytes it receives to be hashed, while
            	// SignRawBytes accepts the raw bytes without hashing, allowing more flexibility.
            	// Add the following to the top of your signing function to hash the bytes
            	// to use SignRawBytes instead:
            	//		shaSum := sha256.Sum256(bytes)
            	//		bytes = shaSum[:]
            	//
            	SignBytes func(hashBytes []<a href="https://pkg.go.dev/builtin#byte">byte</a>) (signature []<a href="https://pkg.go.dev/builtin#byte">byte</a>, err <a href="https://pkg.go.dev/builtin#error">error</a>)

            	// SignRawBytes is a function for implementing custom signing. For example, if
            	// your application is running on Google App Engine, you can use
            	// appengine's internal signing function:
            	//		ctx := appengine.NewContext(request)
            	//     	acc, _ := appengine.ServiceAccount(ctx)
            	//     	&PostPolicyV4Options{
            	//     		GoogleAccessID: acc,
            	//     		SignRawBytes: func(b []byte) ([]byte, error) {
            	//     			_, signedBytes, err := appengine.SignBytes(ctx, b)
            	//     			return signedBytes, err
            	//     		},
            	//     		// etc.
            	//     	})
            	//
            	// SignRawBytes is equivalent to the SignBytes field on SignedURLOptions;
            	// that is, you may use the same signing function for the two.
            	//
            	// Exactly one of PrivateKey or SignRawBytes must be non-nil.
            	SignRawBytes func(bytes []<a href="https://pkg.go.dev/builtin#byte">byte</a>) (signature []<a href="https://pkg.go.dev/builtin#byte">byte</a>, err <a href="https://pkg.go.dev/builtin#error">error</a>)

            	// Expires is the expiration time on the signed post policy.
            	// It must be a time in the future.
            	// Required.
            	Expires <a href="https://pkg.go.dev/time">time</a>.<a href="https://pkg.go.dev/time#Time">Time</a>

            	// Style provides options for the type of URL to use. Options are
            	// PathStyle (default), BucketBoundHostname, and VirtualHostedStyle. See
            	// https://cloud.google.com/storage/docs/request-endpoints for details.
            	// Optional.
            	Style <a href="#cloud_google_com_go_storage_URLStyle">URLStyle</a>

            	// Insecure when set indicates that the generated URL's scheme
            	// will use "http" instead of "https" (default).
            	// Optional.
            	Insecure <a href="https://pkg.go.dev/builtin#bool">bool</a>

            	// Fields specifies the attributes of a PostPolicyV4 request.
            	// When Fields is non-nil, its attributes must match those that will
            	// passed into field Conditions.
            	// Optional.
            	Fields *<a href="#cloud_google_com_go_storage_PolicyV4Fields">PolicyV4Fields</a>

            	// The conditions that the uploaded file will be expected to conform to.
            	// When used, the failure of an upload to satisfy a condition will result in
            	// a 4XX status code, back with the message describing the problem.
            	// Optional.
            	Conditions []<a href="#cloud_google_com_go_storage_PostPolicyV4Condition">PostPolicyV4Condition</a>

            	// Hostname sets the host of the signed post policy. This field overrides
            	// any endpoint set on a storage Client or through STORAGE_EMULATOR_HOST.
            	// Only compatible with PathStyle URLStyle.
            	// Optional.
            	Hostname <a href="https://pkg.go.dev/builtin#string">string</a>
            	// contains filtered or unexported fields
            }
    - uid: cloud.google.com/go/storage.ProjectTeam
      name: ProjectTeam
      id: ProjectTeam
      summary: |
        ProjectTeam is the project team associated with the entity, if any.
      parent: cloud.google.com/go/storage
      type: type
      langs:
        - go
      syntax:
        content: |-
            type ProjectTeam struct {
            	ProjectNumber <a href="https://pkg.go.dev/builtin#string">string</a>
            	Team          <a href="https://pkg.go.dev/builtin#string">string</a>
            }
    - uid: cloud.google.com/go/storage.Projection
      name: Projection
      id: Projection
      summary: |
        Projection is enumerated type for Query.Projection.
      parent: cloud.google.com/go/storage
      type: type
      langs:
        - go
      syntax:
        content: type Projection <a href="https://pkg.go.dev/builtin#int">int</a>
    - uid: cloud.google.com/go/storage.ProjectionDefault,ProjectionFull,ProjectionNoACL
      name: ProjectionDefault, ProjectionFull, ProjectionNoACL
      id: ProjectionDefault,ProjectionFull,ProjectionNoACL
      parent: cloud.google.com/go/storage.Projection
      type: const
      langs:
        - go
      syntax:
        content: |-
            const (
            	// ProjectionDefault returns all fields of objects.
            	ProjectionDefault <a href="#cloud_google_com_go_storage_Projection">Projection</a> = <a href="https://pkg.go.dev/builtin#iota">iota</a>

            	// ProjectionFull returns all fields of objects.
            	ProjectionFull

            	// ProjectionNoACL returns all fields of objects except for Owner and ACL.
            	ProjectionNoACL
            )
    - uid: cloud.google.com/go/storage.Projection.String
      name: |
        func (Projection) String
      id: String
      parent: cloud.google.com/go/storage.Projection
      type: method
      langs:
        - go
      syntax:
        content: func (p <a href="#cloud_google_com_go_storage_Projection">Projection</a>) String() <a href="https://pkg.go.dev/builtin#string">string</a>
    - uid: cloud.google.com/go/storage.PublicAccessPrevention
      name: PublicAccessPrevention
      id: PublicAccessPrevention
      summary: |
        PublicAccessPrevention configures the Public Access Prevention feature, which
        can be used to disallow public access to any data in a bucket. See
        https://cloud.google.com/storage/docs/public-access-prevention for more
        information.
      parent: cloud.google.com/go/storage
      type: type
      langs:
        - go
      syntax:
        content: type PublicAccessPrevention <a href="https://pkg.go.dev/builtin#int">int</a>
    - uid: cloud.google.com/go/storage.PublicAccessPreventionUnknown,PublicAccessPreventionUnspecified,PublicAccessPreventionEnforced,PublicAccessPreventionInherited
      name: PublicAccessPreventionUnknown, PublicAccessPreventionUnspecified, PublicAccessPreventionEnforced, PublicAccessPreventionInherited
      id: PublicAccessPreventionUnknown,PublicAccessPreventionUnspecified,PublicAccessPreventionEnforced,PublicAccessPreventionInherited
      parent: cloud.google.com/go/storage.PublicAccessPrevention
      type: const
      langs:
        - go
      syntax:
        content: |-
            const (
            	// PublicAccessPreventionUnknown is a zero value, used only if this field is
            	// not set in a call to GCS.
            	PublicAccessPreventionUnknown <a href="#cloud_google_com_go_storage_PublicAccessPrevention">PublicAccessPrevention</a> = <a href="https://pkg.go.dev/builtin#iota">iota</a>

            	// PublicAccessPreventionUnspecified corresponds to a value of "unspecified".
            	// Deprecated: use PublicAccessPreventionInherited
            	PublicAccessPreventionUnspecified

            	// PublicAccessPreventionEnforced corresponds to a value of "enforced". This
            	// enforces Public Access Prevention on the bucket.
            	PublicAccessPreventionEnforced

            	// PublicAccessPreventionInherited corresponds to a value of "inherited"
            	// and is the default for buckets.
            	PublicAccessPreventionInherited
            )
    - uid: cloud.google.com/go/storage.PublicAccessPrevention.String
      name: |
        func (PublicAccessPrevention) String
      id: String
      parent: cloud.google.com/go/storage.PublicAccessPrevention
      type: method
      langs:
        - go
      syntax:
        content: func (p <a href="#cloud_google_com_go_storage_PublicAccessPrevention">PublicAccessPrevention</a>) String() <a href="https://pkg.go.dev/builtin#string">string</a>
    - uid: cloud.google.com/go/storage.Query
      name: Query
      id: Query
      summary: |
        Query represents a query to filter objects from a bucket.
      parent: cloud.google.com/go/storage
      type: type
      langs:
        - go
      syntax:
        content: |-
            type Query struct {
            	// Delimiter returns results in a directory-like fashion.
            	// Results will contain only objects whose names, aside from the
            	// prefix, do not contain delimiter. Objects whose names,
            	// aside from the prefix, contain delimiter will have their name,
            	// truncated after the delimiter, returned in prefixes.
            	// Duplicate prefixes are omitted.
            	// Must be set to / when used with the MatchGlob parameter to filter results
            	// in a directory-like mode.
            	// Optional.
            	Delimiter <a href="https://pkg.go.dev/builtin#string">string</a>

            	// Prefix is the prefix filter to query objects
            	// whose names begin with this prefix.
            	// Optional.
            	Prefix <a href="https://pkg.go.dev/builtin#string">string</a>

            	// Versions indicates whether multiple versions of the same
            	// object will be included in the results.
            	Versions <a href="https://pkg.go.dev/builtin#bool">bool</a>

            	// StartOffset is used to filter results to objects whose names are
            	// lexicographically equal to or after startOffset. If endOffset is also set,
            	// the objects listed will have names between startOffset (inclusive) and
            	// endOffset (exclusive).
            	StartOffset <a href="https://pkg.go.dev/builtin#string">string</a>

            	// EndOffset is used to filter results to objects whose names are
            	// lexicographically before endOffset. If startOffset is also set, the objects
            	// listed will have names between startOffset (inclusive) and endOffset (exclusive).
            	EndOffset <a href="https://pkg.go.dev/builtin#string">string</a>

            	// Projection defines the set of properties to return. It will default to ProjectionFull,
            	// which returns all properties. Passing ProjectionNoACL will omit Owner and ACL,
            	// which may improve performance when listing many objects.
            	Projection <a href="#cloud_google_com_go_storage_Projection">Projection</a>

            	// IncludeTrailingDelimiter controls how objects which end in a single
            	// instance of Delimiter (for example, if Query.Delimiter = "/" and the
            	// object name is "foo/bar/") are included in the results. By default, these
            	// objects only show up as prefixes. If IncludeTrailingDelimiter is set to
            	// true, they will also be included as objects and their metadata will be
            	// populated in the returned ObjectAttrs.
            	IncludeTrailingDelimiter <a href="https://pkg.go.dev/builtin#bool">bool</a>

            	// MatchGlob is a glob pattern used to filter results (for example, foo*bar). See
            	// https://cloud.google.com/storage/docs/json_api/v1/objects/list#list-object-glob
            	// for syntax details. When Delimiter is set in conjunction with MatchGlob,
            	// it must be set to /.
            	MatchGlob <a href="https://pkg.go.dev/builtin#string">string</a>
            	// contains filtered or unexported fields
            }
    - uid: cloud.google.com/go/storage.Query.SetAttrSelection
      name: |
        func (*Query) SetAttrSelection
      id: SetAttrSelection
      summary: |
        SetAttrSelection makes the query populate only specific attributes of
        objects. When iterating over objects, if you only need each object's name
        and size, pass []string{"Name", "Size"} to this method. Only these fields
        will be fetched for each object across the network; the other fields of
        ObjectAttr will remain at their default values. This is a performance
        optimization; for more information, see
        https://cloud.google.com/storage/docs/json_api/v1/how-tos/performance
      parent: cloud.google.com/go/storage.Query
      type: method
      langs:
        - go
      syntax:
        content: func (q *<a href="#cloud_google_com_go_storage_Query">Query</a>) SetAttrSelection(attrs []<a href="https://pkg.go.dev/builtin#string">string</a>) <a href="https://pkg.go.dev/builtin#error">error</a>
    - uid: cloud.google.com/go/storage.RPO
      name: RPO
      id: RPO
      summary: |
        RPO (Recovery Point Objective) configures the turbo replication feature. See
        https://cloud.google.com/storage/docs/managing-turbo-replication for more information.
      parent: cloud.google.com/go/storage
      type: type
      langs:
        - go
      syntax:
        content: type RPO <a href="https://pkg.go.dev/builtin#int">int</a>
    - uid: cloud.google.com/go/storage.RPOUnknown,RPODefault,RPOAsyncTurbo
      name: RPOUnknown, RPODefault, RPOAsyncTurbo
      id: RPOUnknown,RPODefault,RPOAsyncTurbo
      parent: cloud.google.com/go/storage.RPO
      type: const
      langs:
        - go
      syntax:
        content: |-
            const (
            	// RPOUnknown is a zero value. It may be returned from bucket.Attrs() if RPO
            	// is not present in the bucket metadata, that is, the bucket is not dual-region.
            	// This value is also used if the RPO field is not set in a call to GCS.
            	RPOUnknown <a href="#cloud_google_com_go_storage_RPO">RPO</a> = <a href="https://pkg.go.dev/builtin#iota">iota</a>

            	// RPODefault represents default replication. It is used to reset RPO on an
            	// existing bucket  that has this field set to RPOAsyncTurbo. Otherwise it
            	// is equivalent to RPOUnknown, and is always ignored. This value is valid
            	// for dual- or multi-region buckets.
            	RPODefault

            	// RPOAsyncTurbo represents turbo replication and is used to enable Turbo
            	// Replication on a bucket. This value is only valid for dual-region buckets.
            	RPOAsyncTurbo
            )
    - uid: cloud.google.com/go/storage.RPO.String
      name: |
        func (RPO) String
      id: String
      parent: cloud.google.com/go/storage.RPO
      type: method
      langs:
        - go
      syntax:
        content: func (rpo <a href="#cloud_google_com_go_storage_RPO">RPO</a>) String() <a href="https://pkg.go.dev/builtin#string">string</a>
    - uid: cloud.google.com/go/storage.Reader
      name: Reader
      id: Reader
      summary: |
        Reader reads a Cloud Storage object.
        It implements io.Reader.

        Typically, a Reader computes the CRC of the downloaded content and compares it to
        the stored CRC, returning an error from Read if there is a mismatch. This integrity check
        is skipped if transcoding occurs. See https://cloud.google.com/storage/docs/transcoding.
      parent: cloud.google.com/go/storage
      type: type
      langs:
        - go
      syntax:
        content: |-
            type Reader struct {
            	Attrs <a href="#cloud_google_com_go_storage_ReaderObjectAttrs">ReaderObjectAttrs</a>
            	// contains filtered or unexported fields
            }
    - uid: cloud.google.com/go/storage.Reader.CacheControl
      name: |
        func (*Reader) CacheControl
      id: CacheControl
      summary: |
        CacheControl returns the cache control of the object.

        Deprecated: use Reader.Attrs.CacheControl.
      parent: cloud.google.com/go/storage.Reader
      type: method
      langs:
        - go
      syntax:
        content: func (r *<a href="#cloud_google_com_go_storage_Reader">Reader</a>) CacheControl() <a href="https://pkg.go.dev/builtin#string">string</a>
      status: deprecated
    - uid: cloud.google.com/go/storage.Reader.Close
      name: |
        func (*Reader) Close
      id: Close
      summary: |
        Close closes the Reader. It must be called when done reading.
      parent: cloud.google.com/go/storage.Reader
      type: method
      langs:
        - go
      syntax:
        content: func (r *<a href="#cloud_google_com_go_storage_Reader">Reader</a>) Close() <a href="https://pkg.go.dev/builtin#error">error</a>
    - uid: cloud.google.com/go/storage.Reader.ContentEncoding
      name: |
        func (*Reader) ContentEncoding
      id: ContentEncoding
      summary: |
        ContentEncoding returns the content encoding of the object.

        Deprecated: use Reader.Attrs.ContentEncoding.
      parent: cloud.google.com/go/storage.Reader
      type: method
      langs:
        - go
      syntax:
        content: func (r *<a href="#cloud_google_com_go_storage_Reader">Reader</a>) ContentEncoding() <a href="https://pkg.go.dev/builtin#string">string</a>
      status: deprecated
    - uid: cloud.google.com/go/storage.Reader.ContentType
      name: |
        func (*Reader) ContentType
      id: ContentType
      summary: |
        ContentType returns the content type of the object.

        Deprecated: use Reader.Attrs.ContentType.
      parent: cloud.google.com/go/storage.Reader
      type: method
      langs:
        - go
      syntax:
        content: func (r *<a href="#cloud_google_com_go_storage_Reader">Reader</a>) ContentType() <a href="https://pkg.go.dev/builtin#string">string</a>
      status: deprecated
    - uid: cloud.google.com/go/storage.Reader.LastModified
      name: |
        func (*Reader) LastModified
      id: LastModified
      summary: |
        LastModified returns the value of the Last-Modified header.

        Deprecated: use Reader.Attrs.LastModified.
      parent: cloud.google.com/go/storage.Reader
      type: method
      langs:
        - go
      syntax:
        content: func (r *<a href="#cloud_google_com_go_storage_Reader">Reader</a>) LastModified() (<a href="https://pkg.go.dev/time">time</a>.<a href="https://pkg.go.dev/time#Time">Time</a>, <a href="https://pkg.go.dev/builtin#error">error</a>)
      status: deprecated
    - uid: cloud.google.com/go/storage.Reader.Read
      name: |
        func (*Reader) Read
      id: Read
      parent: cloud.google.com/go/storage.Reader
      type: method
      langs:
        - go
      syntax:
        content: func (r *<a href="#cloud_google_com_go_storage_Reader">Reader</a>) Read(p []<a href="https://pkg.go.dev/builtin#byte">byte</a>) (<a href="https://pkg.go.dev/builtin#int">int</a>, <a href="https://pkg.go.dev/builtin#error">error</a>)
    - uid: cloud.google.com/go/storage.Reader.Remain
      name: |
        func (*Reader) Remain
      id: Remain
      summary: |
        Remain returns the number of bytes left to read, or -1 if unknown.
      parent: cloud.google.com/go/storage.Reader
      type: method
      langs:
        - go
      syntax:
        content: func (r *<a href="#cloud_google_com_go_storage_Reader">Reader</a>) Remain() <a href="https://pkg.go.dev/builtin#int64">int64</a>
    - uid: cloud.google.com/go/storage.Reader.Size
      name: |
        func (*Reader) Size
      id: Size
      summary: |
        Size returns the size of the object in bytes.
        The returned value is always the same and is not affected by
        calls to Read or Close.

        Deprecated: use Reader.Attrs.Size.
      parent: cloud.google.com/go/storage.Reader
      type: method
      langs:
        - go
      syntax:
        content: func (r *<a href="#cloud_google_com_go_storage_Reader">Reader</a>) Size() <a href="https://pkg.go.dev/builtin#int64">int64</a>
      status: deprecated
    - uid: cloud.google.com/go/storage.ReaderObjectAttrs
      name: ReaderObjectAttrs
      id: ReaderObjectAttrs
      summary: |
        ReaderObjectAttrs are attributes about the object being read. These are populated
        during the New call. This struct only holds a subset of object attributes: to
        get the full set of attributes, use ObjectHandle.Attrs.

        Each field is read-only.
      parent: cloud.google.com/go/storage
      type: type
      langs:
        - go
      syntax:
        content: |-
            type ReaderObjectAttrs struct {
            	// Size is the length of the object's content.
            	Size <a href="https://pkg.go.dev/builtin#int64">int64</a>

            	// StartOffset is the byte offset within the object
            	// from which reading begins.
            	// This value is only non-zero for range requests.
            	StartOffset <a href="https://pkg.go.dev/builtin#int64">int64</a>

            	// ContentType is the MIME type of the object's content.
            	ContentType <a href="https://pkg.go.dev/builtin#string">string</a>

            	// ContentEncoding is the encoding of the object's content.
            	ContentEncoding <a href="https://pkg.go.dev/builtin#string">string</a>

            	// CacheControl specifies whether and for how long browser and Internet
            	// caches are allowed to cache your objects.
            	CacheControl <a href="https://pkg.go.dev/builtin#string">string</a>

            	// LastModified is the time that the object was last modified.
            	LastModified <a href="https://pkg.go.dev/time">time</a>.<a href="https://pkg.go.dev/time#Time">Time</a>

            	// Generation is the generation number of the object's content.
            	Generation <a href="https://pkg.go.dev/builtin#int64">int64</a>

            	// Metageneration is the version of the metadata for this object at
            	// this generation. This field is used for preconditions and for
            	// detecting changes in metadata. A metageneration number is only
            	// meaningful in the context of a particular generation of a
            	// particular object.
            	Metageneration <a href="https://pkg.go.dev/builtin#int64">int64</a>
            }
    - uid: cloud.google.com/go/storage.RetentionPolicy
      name: RetentionPolicy
      id: RetentionPolicy
      summary: |
        RetentionPolicy enforces a minimum retention time for all objects
        contained in the bucket.

        Any attempt to overwrite or delete objects younger than the retention
        period will result in an error. An unlocked retention policy can be
        modified or removed from the bucket via the Update method. A
        locked retention policy cannot be removed or shortened in duration
        for the lifetime of the bucket.

        This feature is in private alpha release. It is not currently available to
        most customers. It might be changed in backwards-incompatible ways and is not
        subject to any SLA or deprecation policy.
      parent: cloud.google.com/go/storage
      type: type
      langs:
        - go
      syntax:
        content: |-
            type RetentionPolicy struct {
            	// RetentionPeriod specifies the duration that objects need to be
            	// retained. Retention duration must be greater than zero and less than
            	// 100 years. Note that enforcement of retention periods less than a day
            	// is not guaranteed. Such periods should only be used for testing
            	// purposes.
            	RetentionPeriod <a href="https://pkg.go.dev/time">time</a>.<a href="https://pkg.go.dev/time#Duration">Duration</a>

            	// EffectiveTime is the time from which the policy was enforced and
            	// effective. This field is read-only.
            	EffectiveTime <a href="https://pkg.go.dev/time">time</a>.<a href="https://pkg.go.dev/time#Time">Time</a>

            	// IsLocked describes whether the bucket is locked. Once locked, an
            	// object retention policy cannot be modified.
            	// This field is read-only.
            	IsLocked <a href="https://pkg.go.dev/builtin#bool">bool</a>
            }
    - uid: cloud.google.com/go/storage.RetryOption
      name: RetryOption
      id: RetryOption
      summary: |
        RetryOption allows users to configure non-default retry behavior for API
        calls made to GCS.
      parent: cloud.google.com/go/storage
      type: type
      langs:
        - go
      syntax:
        content: |-
            type RetryOption interface {
            	// contains filtered or unexported methods
            }
    - uid: cloud.google.com/go/storage.RetryOption.WithBackoff
      name: |
        func WithBackoff
      id: WithBackoff
      summary: |
        WithBackoff allows configuration of the backoff timing used for retries.
        Available configuration options (Initial, Max and Multiplier) are described
        at https://pkg.go.dev/github.com/googleapis/gax-go/v2#Backoff. If any fields
        are not supplied by the user, gax default values will be used.
      parent: cloud.google.com/go/storage.RetryOption
      type: function
      langs:
        - go
      syntax:
        content: func WithBackoff(backoff <a href="https://pkg.go.dev/github.com/googleapis/gax-go/v2">gax</a>.<a href="https://pkg.go.dev/github.com/googleapis/gax-go/v2#Backoff">Backoff</a>) <a href="#cloud_google_com_go_storage_RetryOption">RetryOption</a>
    - uid: cloud.google.com/go/storage.RetryOption.WithErrorFunc
      name: |
        func WithErrorFunc
      id: WithErrorFunc
      summary: |
        WithErrorFunc allows users to pass a custom function to the retryer. Errors
        will be retried if and only if `shouldRetry(err)` returns true.
        By default, the following errors are retried (see ShouldRetry for the default
        function):

        - HTTP responses with codes 408, 429, 502, 503, and 504.

        - Transient network errors such as connection reset and io.ErrUnexpectedEOF.

        - Errors which are considered transient using the Temporary() interface.

        - Wrapped versions of these errors.

        This option can be used to retry on a different set of errors than the
        default. Users can use the default ShouldRetry function inside their custom
        function if they only want to make minor modifications to default behavior.
      parent: cloud.google.com/go/storage.RetryOption
      type: function
      langs:
        - go
      syntax:
        content: func WithErrorFunc(shouldRetry func(err <a href="https://pkg.go.dev/builtin#error">error</a>) <a href="https://pkg.go.dev/builtin#bool">bool</a>) <a href="#cloud_google_com_go_storage_RetryOption">RetryOption</a>
    - uid: cloud.google.com/go/storage.RetryOption.WithPolicy
      name: |
        func WithPolicy
      id: WithPolicy
      summary: |
        WithPolicy allows the configuration of which operations should be performed
        with retries for transient errors.
      parent: cloud.google.com/go/storage.RetryOption
      type: function
      langs:
        - go
      syntax:
        content: func WithPolicy(policy <a href="#cloud_google_com_go_storage_RetryPolicy">RetryPolicy</a>) <a href="#cloud_google_com_go_storage_RetryOption">RetryOption</a>
    - uid: cloud.google.com/go/storage.RetryPolicy
      name: RetryPolicy
      id: RetryPolicy
      summary: |
        RetryPolicy describes the available policies for which operations should be
        retried. The default is `RetryIdempotent`.
      parent: cloud.google.com/go/storage
      type: type
      langs:
        - go
      syntax:
        content: type RetryPolicy <a href="https://pkg.go.dev/builtin#int">int</a>
    - uid: cloud.google.com/go/storage.RetryIdempotent,RetryAlways,RetryNever
      name: RetryIdempotent, RetryAlways, RetryNever
      id: RetryIdempotent,RetryAlways,RetryNever
      parent: cloud.google.com/go/storage.RetryPolicy
      type: const
      langs:
        - go
      syntax:
        content: |-
            const (
            	// RetryIdempotent causes only idempotent operations to be retried when the
            	// service returns a transient error. Using this policy, fully idempotent
            	// operations (such as `ObjectHandle.Attrs()`) will always be retried.
            	// Conditionally idempotent operations (for example `ObjectHandle.Update()`)
            	// will be retried only if the necessary conditions have been supplied (in
            	// the case of `ObjectHandle.Update()` this would mean supplying a
            	// `Conditions.MetagenerationMatch` condition is required).
            	RetryIdempotent <a href="#cloud_google_com_go_storage_RetryPolicy">RetryPolicy</a> = <a href="https://pkg.go.dev/builtin#iota">iota</a>

            	// RetryAlways causes all operations to be retried when the service returns a
            	// transient error, regardless of idempotency considerations.
            	RetryAlways

            	// RetryNever causes the client to not perform retries on failed operations.
            	RetryNever
            )
    - uid: cloud.google.com/go/storage.SignedURLOptions
      name: SignedURLOptions
      id: SignedURLOptions
      summary: |
        SignedURLOptions allows you to restrict the access to the signed URL.
      parent: cloud.google.com/go/storage
      type: type
      langs:
        - go
      syntax:
        content: |-
            type SignedURLOptions struct {
            	// GoogleAccessID represents the authorizer of the signed URL generation.
            	// It is typically the Google service account client email address from
            	// the Google Developers Console in the form of "xxx@developer.gserviceaccount.com".
            	// Required.
            	GoogleAccessID <a href="https://pkg.go.dev/builtin#string">string</a>

            	// PrivateKey is the Google service account private key. It is obtainable
            	// from the Google Developers Console.
            	// At https://console.developers.google.com/project/<your-project-id>/apiui/credential,
            	// create a service account client ID or reuse one of your existing service account
            	// credentials. Click on the "Generate new P12 key" to generate and download
            	// a new private key. Once you download the P12 file, use the following command
            	// to convert it into a PEM file.
            	//
            	//    $ openssl pkcs12 -in key.p12 -passin pass:notasecret -out key.pem -nodes
            	//
            	// Provide the contents of the PEM file as a byte slice.
            	// Exactly one of PrivateKey or SignBytes must be non-nil.
            	PrivateKey []<a href="https://pkg.go.dev/builtin#byte">byte</a>

            	// SignBytes is a function for implementing custom signing. For example, if
            	// your application is running on Google App Engine, you can use
            	// appengine's internal signing function:
            	//     ctx := appengine.NewContext(request)
            	//     acc, _ := appengine.ServiceAccount(ctx)
            	//     url, err := SignedURL("bucket", "object", &SignedURLOptions{
            	//     	GoogleAccessID: acc,
            	//     	SignBytes: func(b []byte) ([]byte, error) {
            	//     		_, signedBytes, err := appengine.SignBytes(ctx, b)
            	//     		return signedBytes, err
            	//     	},
            	//     	// etc.
            	//     })
            	//
            	// Exactly one of PrivateKey or SignBytes must be non-nil.
            	SignBytes func([]<a href="https://pkg.go.dev/builtin#byte">byte</a>) ([]<a href="https://pkg.go.dev/builtin#byte">byte</a>, <a href="https://pkg.go.dev/builtin#error">error</a>)

            	// Method is the HTTP method to be used with the signed URL.
            	// Signed URLs can be used with GET, HEAD, PUT, and DELETE requests.
            	// Required.
            	Method <a href="https://pkg.go.dev/builtin#string">string</a>

            	// Expires is the expiration time on the signed URL. It must be
            	// a datetime in the future. For SigningSchemeV4, the expiration may be no
            	// more than seven days in the future.
            	// Required.
            	Expires <a href="https://pkg.go.dev/time">time</a>.<a href="https://pkg.go.dev/time#Time">Time</a>

            	// ContentType is the content type header the client must provide
            	// to use the generated signed URL.
            	// Optional.
            	ContentType <a href="https://pkg.go.dev/builtin#string">string</a>

            	// Headers is a list of extension headers the client must provide
            	// in order to use the generated signed URL. Each must be a string of the
            	// form "key:values", with multiple values separated by a semicolon.
            	// Optional.
            	Headers []<a href="https://pkg.go.dev/builtin#string">string</a>

            	// QueryParameters is a map of additional query parameters. When
            	// SigningScheme is V4, this is used in computing the signature, and the
            	// client must use the same query parameters when using the generated signed
            	// URL.
            	// Optional.
            	QueryParameters <a href="https://pkg.go.dev/net/url">url</a>.<a href="https://pkg.go.dev/net/url#Values">Values</a>

            	// MD5 is the base64 encoded MD5 checksum of the file.
            	// If provided, the client should provide the exact value on the request
            	// header in order to use the signed URL.
            	// Optional.
            	MD5 <a href="https://pkg.go.dev/builtin#string">string</a>

            	// Style provides options for the type of URL to use. Options are
            	// PathStyle (default), BucketBoundHostname, and VirtualHostedStyle. See
            	// https://cloud.google.com/storage/docs/request-endpoints for details.
            	// Only supported for V4 signing.
            	// Optional.
            	Style <a href="#cloud_google_com_go_storage_URLStyle">URLStyle</a>

            	// Insecure determines whether the signed URL should use HTTPS (default) or
            	// HTTP.
            	// Only supported for V4 signing.
            	// Optional.
            	Insecure <a href="https://pkg.go.dev/builtin#bool">bool</a>

            	// Scheme determines the version of URL signing to use. Default is
            	// SigningSchemeV2.
            	Scheme <a href="#cloud_google_com_go_storage_SigningScheme">SigningScheme</a>

            	// Hostname sets the host of the signed URL. This field overrides any
            	// endpoint set on a storage Client or through STORAGE_EMULATOR_HOST.
            	// Only compatible with PathStyle URLStyle.
            	// Optional.
            	Hostname <a href="https://pkg.go.dev/builtin#string">string</a>
            }
    - uid: cloud.google.com/go/storage.SigningScheme
      name: SigningScheme
      id: SigningScheme
      summary: |
        SigningScheme determines the API version to use when signing URLs.
      parent: cloud.google.com/go/storage
      type: type
      langs:
        - go
      syntax:
        content: type SigningScheme <a href="https://pkg.go.dev/builtin#int">int</a>
    - uid: cloud.google.com/go/storage.SigningSchemeDefault,SigningSchemeV2,SigningSchemeV4
      name: SigningSchemeDefault, SigningSchemeV2, SigningSchemeV4
      id: SigningSchemeDefault,SigningSchemeV2,SigningSchemeV4
      parent: cloud.google.com/go/storage.SigningScheme
      type: const
      langs:
        - go
      syntax:
        content: |-
            const (
            	// SigningSchemeDefault is presently V2 and will change to V4 in the future.
            	SigningSchemeDefault <a href="#cloud_google_com_go_storage_SigningScheme">SigningScheme</a> = <a href="https://pkg.go.dev/builtin#iota">iota</a>

            	// SigningSchemeV2 uses the V2 scheme to sign URLs.
            	SigningSchemeV2

            	// SigningSchemeV4 uses the V4 scheme to sign URLs.
            	SigningSchemeV4
            )
    - uid: cloud.google.com/go/storage.URLStyle
      name: URLStyle
      id: URLStyle
      summary: |
        URLStyle determines the style to use for the signed URL. PathStyle is the
        default. All non-default options work with V4 scheme only. See
        https://cloud.google.com/storage/docs/request-endpoints for details.
      parent: cloud.google.com/go/storage
      type: type
      langs:
        - go
      syntax:
        content: |-
            type URLStyle interface {
            	// contains filtered or unexported methods
            }
    - uid: cloud.google.com/go/storage.URLStyle.BucketBoundHostname
      name: |
        func BucketBoundHostname
      id: BucketBoundHostname
      summary: |
        BucketBoundHostname generates a URL with a custom hostname tied to a
        specific GCS bucket. The desired hostname should be passed in using the
        hostname argument. Generated urls will be of the form
        "<bucket-bound-hostname>/<object-name>". See
        https://cloud.google.com/storage/docs/request-endpoints#cname and
        https://cloud.google.com/load-balancing/docs/https/adding-backend-buckets-to-load-balancers
        for details. Note that for CNAMEs, only HTTP is supported, so Insecure must
        be set to true.
      parent: cloud.google.com/go/storage.URLStyle
      type: function
      langs:
        - go
      syntax:
        content: func BucketBoundHostname(hostname <a href="https://pkg.go.dev/builtin#string">string</a>) <a href="#cloud_google_com_go_storage_URLStyle">URLStyle</a>
    - uid: cloud.google.com/go/storage.URLStyle.PathStyle
      name: |
        func PathStyle
      id: PathStyle
      summary: |
        PathStyle is the default style, and will generate a URL of the form
        "<host-name>/<bucket-name>/<object-name>". By default, <host-name> is
        storage.googleapis.com, but setting an endpoint on the storage Client or
        through STORAGE_EMULATOR_HOST overrides this. Setting Hostname on
        SignedURLOptions or PostPolicyV4Options overrides everything else.
      parent: cloud.google.com/go/storage.URLStyle
      type: function
      langs:
        - go
      syntax:
        content: func PathStyle() <a href="#cloud_google_com_go_storage_URLStyle">URLStyle</a>
    - uid: cloud.google.com/go/storage.URLStyle.VirtualHostedStyle
      name: |
        func VirtualHostedStyle
      id: VirtualHostedStyle
      summary: |
        VirtualHostedStyle generates a URL relative to the bucket's virtual
        hostname, e.g. "<bucket-name>.storage.googleapis.com/<object-name>".
      parent: cloud.google.com/go/storage.URLStyle
      type: function
      langs:
        - go
      syntax:
        content: func VirtualHostedStyle() <a href="#cloud_google_com_go_storage_URLStyle">URLStyle</a>
    - uid: cloud.google.com/go/storage.UniformBucketLevelAccess
      name: UniformBucketLevelAccess
      id: UniformBucketLevelAccess
      summary: |
        UniformBucketLevelAccess configures access checks to use only bucket-level IAM
        policies.
      parent: cloud.google.com/go/storage
      type: type
      langs:
        - go
      syntax:
        content: |-
            type UniformBucketLevelAccess struct {
            	// Enabled specifies whether access checks use only bucket-level IAM
            	// policies. Enabled may be disabled until the locked time.
            	Enabled <a href="https://pkg.go.dev/builtin#bool">bool</a>
            	// LockedTime specifies the deadline for changing Enabled from true to
            	// false.
            	LockedTime <a href="https://pkg.go.dev/time">time</a>.<a href="https://pkg.go.dev/time#Time">Time</a>
            }
    - uid: cloud.google.com/go/storage.Writer
      name: Writer
      id: Writer
      summary: |
        A Writer writes a Cloud Storage object.
      parent: cloud.google.com/go/storage
      type: type
      langs:
        - go
      syntax:
        content: |-
            type Writer struct {
            	// ObjectAttrs are optional attributes to set on the object. Any attributes
            	// must be initialized before the first Write call. Nil or zero-valued
            	// attributes are ignored.
            	<a href="#cloud_google_com_go_storage_ObjectAttrs">ObjectAttrs</a>

            	// SendCRC32C specifies whether to transmit a CRC32C field. It should be set
            	// to true in addition to setting the Writer's CRC32C field, because zero
            	// is a valid CRC and normally a zero would not be transmitted.
            	// If a CRC32C is sent, and the data written does not match the checksum,
            	// the write will be rejected.
            	//
            	// Note: SendCRC32C must be set to true BEFORE the first call to
            	// Writer.Write() in order to send the checksum. If it is set after that
            	// point, the checksum will be ignored.
            	SendCRC32C <a href="https://pkg.go.dev/builtin#bool">bool</a>

            	// ChunkSize controls the maximum number of bytes of the object that the
            	// Writer will attempt to send to the server in a single request. Objects
            	// smaller than the size will be sent in a single request, while larger
            	// objects will be split over multiple requests. The value will be rounded up
            	// to the nearest multiple of 256K. The default ChunkSize is 16MiB.
            	//
            	// Each Writer will internally allocate a buffer of size ChunkSize. This is
            	// used to buffer input data and allow for the input to be sent again if a
            	// request must be retried.
            	//
            	// If you upload small objects (< 16MiB), you should set ChunkSize
            	// to a value slightly larger than the objects' sizes to avoid memory bloat.
            	// This is especially important if you are uploading many small objects
            	// concurrently. See
            	// https://cloud.google.com/storage/docs/json_api/v1/how-tos/upload#size
            	// for more information about performance trade-offs related to ChunkSize.
            	//
            	// If ChunkSize is set to zero, chunking will be disabled and the object will
            	// be uploaded in a single request without the use of a buffer. This will
            	// further reduce memory used during uploads, but will also prevent the writer
            	// from retrying in case of a transient error from the server or resuming an
            	// upload that fails midway through, since the buffer is required in order to
            	// retry the failed request.
            	//
            	// ChunkSize must be set before the first Write call.
            	ChunkSize <a href="https://pkg.go.dev/builtin#int">int</a>

            	// ChunkRetryDeadline sets a per-chunk retry deadline for multi-chunk
            	// resumable uploads.
            	//
            	// For uploads of larger files, the Writer will attempt to retry if the
            	// request to upload a particular chunk fails with a transient error.
            	// If a single chunk has been attempting to upload for longer than this
            	// deadline and the request fails, it will no longer be retried, and the error
            	// will be returned to the caller. This is only applicable for files which are
            	// large enough to require a multi-chunk resumable upload. The default value
            	// is 32s. Users may want to pick a longer deadline if they are using larger
            	// values for ChunkSize or if they expect to have a slow or unreliable
            	// internet connection.
            	//
            	// To set a deadline on the entire upload, use context timeout or
            	// cancellation.
            	ChunkRetryDeadline <a href="https://pkg.go.dev/time">time</a>.<a href="https://pkg.go.dev/time#Duration">Duration</a>

            	// ProgressFunc can be used to monitor the progress of a large write
            	// operation. If ProgressFunc is not nil and writing requires multiple
            	// calls to the underlying service (see
            	// https://cloud.google.com/storage/docs/json_api/v1/how-tos/resumable-upload),
            	// then ProgressFunc will be invoked after each call with the number of bytes of
            	// content copied so far.
            	//
            	// ProgressFunc should return quickly without blocking.
            	ProgressFunc func(<a href="https://pkg.go.dev/builtin#int64">int64</a>)
            	// contains filtered or unexported fields
            }
    - uid: cloud.google.com/go/storage.Writer.Attrs
      name: |
        func (*Writer) Attrs
      id: Attrs
      summary: |
        Attrs returns metadata about a successfully-written object.
        It's only valid to call it after Close returns nil.
      parent: cloud.google.com/go/storage.Writer
      type: method
      langs:
        - go
      syntax:
        content: func (w *<a href="#cloud_google_com_go_storage_Writer">Writer</a>) Attrs() *<a href="#cloud_google_com_go_storage_ObjectAttrs">ObjectAttrs</a>
    - uid: cloud.google.com/go/storage.Writer.Close
      name: |
        func (*Writer) Close
      id: Close
      summary: |
        Close completes the write operation and flushes any buffered data.
        If Close doesn't return an error, metadata about the written object
        can be retrieved by calling Attrs.
      parent: cloud.google.com/go/storage.Writer
      type: method
      langs:
        - go
      syntax:
        content: func (w *<a href="#cloud_google_com_go_storage_Writer">Writer</a>) Close() <a href="https://pkg.go.dev/builtin#error">error</a>
    - uid: cloud.google.com/go/storage.Writer.CloseWithError
      name: |
        func (*Writer) CloseWithError
      id: CloseWithError
      summary: |
        CloseWithError aborts the write operation with the provided error.
        CloseWithError always returns nil.

        Deprecated: cancel the context passed to NewWriter instead.
      parent: cloud.google.com/go/storage.Writer
      type: method
      langs:
        - go
      syntax:
        content: func (w *<a href="#cloud_google_com_go_storage_Writer">Writer</a>) CloseWithError(err <a href="https://pkg.go.dev/builtin#error">error</a>) <a href="https://pkg.go.dev/builtin#error">error</a>
      status: deprecated
    - uid: cloud.google.com/go/storage.Writer.Write
      name: |
        func (*Writer) Write
      id: Write
      summary: |
        Write appends to w. It implements the io.Writer interface.

        Since writes happen asynchronously, Write may return a nil
        error even though the write failed (or will fail). Always
        use the error returned from Writer.Close to determine if
        the upload was successful.

        Writes will be retried on transient errors from the server, unless
        Writer.ChunkSize has been set to zero.
      parent: cloud.google.com/go/storage.Writer
      type: method
      langs:
        - go
      syntax:
        content: func (w *<a href="#cloud_google_com_go_storage_Writer">Writer</a>) Write(p []<a href="https://pkg.go.dev/builtin#byte">byte</a>) (n <a href="https://pkg.go.dev/builtin#int">int</a>, err <a href="https://pkg.go.dev/builtin#error">error</a>)
      codeexamples:
        - content: |
            package main

            import (
            	"context"
            	"fmt"

            	"cloud.google.com/go/storage"
            )

            func main() {
            	ctx := context.Background()
            	client, err := storage.NewClient(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}
            	wc := client.Bucket("bucketname").Object("filename1").NewWriter(ctx)
            	wc.ContentType = "text/plain"
            	wc.ACL = []storage.ACLRule{{Entity: storage.AllUsers, Role: storage.RoleReader}}
            	if _, err := wc.Write([]byte("hello world")); err != nil {
            		// TODO: handle error.
            		// Note that Write may return nil in some error situations,
            		// so always check the error from Close.
            	}
            	if err := wc.Close(); err != nil {
            		// TODO: handle error.
            	}
            	fmt.Println("updated object:", wc.Attrs())
            }
        - content: |
            package main

            import (
            	"context"
            	"fmt"
            	"hash/crc32"

            	"cloud.google.com/go/storage"
            )

            func main() {
            	ctx := context.Background()
            	client, err := storage.NewClient(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}
            	data := []byte("verify me")
            	wc := client.Bucket("bucketname").Object("filename1").NewWriter(ctx)
            	wc.CRC32C = crc32.Checksum(data, crc32.MakeTable(crc32.Castagnoli))
            	wc.SendCRC32C = true
            	if _, err := wc.Write([]byte("hello world")); err != nil {
            		// TODO: handle error.
            		// Note that Write may return nil in some error situations,
            		// so always check the error from Close.
            	}
            	if err := wc.Close(); err != nil {
            		// TODO: handle error.
            	}
            	fmt.Println("updated object:", wc.Attrs())
            }
          name: checksum
        - content: |
            package main

            import (
            	"context"
            	"fmt"
            	"time"

            	"cloud.google.com/go/storage"
            )

            func main() {
            	ctx := context.Background()
            	client, err := storage.NewClient(ctx)
            	if err != nil {
            		// TODO: handle error.
            	}
            	tctx, cancel := context.WithTimeout(ctx, 30*time.Second)
            	defer cancel() // Cancel when done, whether we time out or not.
            	wc := client.Bucket("bucketname").Object("filename1").NewWriter(tctx)
            	wc.ContentType = "text/plain"
            	wc.ACL = []storage.ACLRule{{Entity: storage.AllUsers, Role: storage.RoleReader}}
            	if _, err := wc.Write([]byte("hello world")); err != nil {
            		// TODO: handle error.
            		// Note that Write may return nil in some error situations,
            		// so always check the error from Close.
            	}
            	if err := wc.Close(); err != nil {
            		// TODO: handle error.
            	}
            	fmt.Println("updated object:", wc.Attrs())
            }
          name: timeout
    - uid: cloud.google.com/go/storage.ShouldRetry
      name: |
        func ShouldRetry
      id: ShouldRetry
      summary: |
        ShouldRetry returns true if an error is retryable, based on best practice
        guidance from GCS. See
        https://cloud.google.com/storage/docs/retry-strategy#go for more information
        on what errors are considered retryable.

        If you would like to customize retryable errors, use the WithErrorFunc to
        supply a RetryOption to your library calls. For example, to retry additional
        errors, you can write a custom func that wraps ShouldRetry and also specifies
        additional errors that should return true.
      parent: cloud.google.com/go/storage
      type: function
      langs:
        - go
      syntax:
        content: func ShouldRetry(err <a href="https://pkg.go.dev/builtin#error">error</a>) <a href="https://pkg.go.dev/builtin#bool">bool</a>
    - uid: cloud.google.com/go/storage.SignedURL
      name: |
        func SignedURL
      id: SignedURL
      summary: |
        SignedURL returns a URL for the specified object. Signed URLs allow anyone
        access to a restricted resource for a limited time without needing a
        Google account or signing in. For more information about signed URLs, see
        https://cloud.google.com/storage/docs/accesscontrol#signed_urls_query_string_authentication
        If initializing a Storage Client, instead use the Bucket.SignedURL method
        which uses the Client's credentials to handle authentication.
      parent: cloud.google.com/go/storage
      type: function
      langs:
        - go
      syntax:
        content: func SignedURL(bucket, object <a href="https://pkg.go.dev/builtin#string">string</a>, opts *<a href="#cloud_google_com_go_storage_SignedURLOptions">SignedURLOptions</a>) (<a href="https://pkg.go.dev/builtin#string">string</a>, <a href="https://pkg.go.dev/builtin#error">error</a>)
      codeexamples:
        - content: |
            package main

            import (
            	"fmt"
            	"io/ioutil"
            	"time"

            	"cloud.google.com/go/storage"
            )

            func main() {
            	pkey, err := ioutil.ReadFile("my-private-key.pem")
            	if err != nil {
            		// TODO: handle error.
            	}
            	url, err := storage.SignedURL("my-bucket", "my-object", &storage.SignedURLOptions{
            		GoogleAccessID: "xxx@developer.gserviceaccount.com",
            		PrivateKey:     pkey,
            		Method:         "GET",
            		Expires:        time.Now().Add(48 * time.Hour),
            	})
            	if err != nil {
            		// TODO: handle error.
            	}
            	fmt.Println(url)
            }
    - uid: cloud.google.com/go/storage.WithJSONReads
      name: |
        func WithJSONReads
      id: WithJSONReads
      summary: |
        WithJSONReads is an option that may be passed to a Storage Client on creation.
        It sets the client to use the JSON API for object reads. Currently, the
        default API used for reads is XML.
        Setting this option is required to use the GenerationNotMatch condition.

        Note that when this option is set, reads will return a zero date for
        [ReaderObjectAttrs].LastModified and may return a different value for
        [ReaderObjectAttrs].CacheControl.
      parent: cloud.google.com/go/storage
      type: function
      langs:
        - go
      syntax:
        content: func WithJSONReads() <a href="https://pkg.go.dev/google.golang.org/api/option">option</a>.<a href="https://pkg.go.dev/google.golang.org/api/option#ClientOption">ClientOption</a>
    - uid: cloud.google.com/go/storage.WithXMLReads
      name: |
        func WithXMLReads
      id: WithXMLReads
      summary: |
        WithXMLReads is an option that may be passed to a Storage Client on creation.
        It sets the client to use the XML API for object reads.

        This is the current default.
      parent: cloud.google.com/go/storage
      type: function
      langs:
        - go
      syntax:
        content: func WithXMLReads() <a href="https://pkg.go.dev/google.golang.org/api/option">option</a>.<a href="https://pkg.go.dev/google.golang.org/api/option#ClientOption">ClientOption</a>
