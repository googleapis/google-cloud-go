// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package policysimulator

import (
	"bytes"
	"context"
	"fmt"
	"log/slog"
	"math"
	"net/http"
	"net/url"
	"time"

	"cloud.google.com/go/longrunning"
	lroauto "cloud.google.com/go/longrunning/autogen"
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	policysimulatorpb "cloud.google.com/go/policysimulator/apiv1/policysimulatorpb"
	gax "github.com/googleapis/gax-go/v2"
	"google.golang.org/api/iterator"
	"google.golang.org/api/option"
	"google.golang.org/api/option/internaloption"
	gtransport "google.golang.org/api/transport/grpc"
	httptransport "google.golang.org/api/transport/http"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
)

var newOrgPolicyViolationsPreviewClientHook clientHook

// OrgPolicyViolationsPreviewCallOptions contains the retry settings for each method of OrgPolicyViolationsPreviewClient.
type OrgPolicyViolationsPreviewCallOptions struct {
	ListOrgPolicyViolationsPreviews  []gax.CallOption
	GetOrgPolicyViolationsPreview    []gax.CallOption
	CreateOrgPolicyViolationsPreview []gax.CallOption
	ListOrgPolicyViolations          []gax.CallOption
	GetOperation                     []gax.CallOption
	ListOperations                   []gax.CallOption
}

func defaultOrgPolicyViolationsPreviewGRPCClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("policysimulator.googleapis.com:443"),
		internaloption.WithDefaultEndpointTemplate("policysimulator.UNIVERSE_DOMAIN:443"),
		internaloption.WithDefaultMTLSEndpoint("policysimulator.mtls.googleapis.com:443"),
		internaloption.WithDefaultUniverseDomain("googleapis.com"),
		internaloption.WithDefaultAudience("https://policysimulator.googleapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableJwtWithScope(),
		internaloption.EnableNewAuthLibrary(),
		option.WithGRPCDialOption(grpc.WithDefaultCallOptions(
			grpc.MaxCallRecvMsgSize(math.MaxInt32))),
	}
}

func defaultOrgPolicyViolationsPreviewCallOptions() *OrgPolicyViolationsPreviewCallOptions {
	return &OrgPolicyViolationsPreviewCallOptions{
		ListOrgPolicyViolationsPreviews: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		GetOrgPolicyViolationsPreview: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		CreateOrgPolicyViolationsPreview: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		ListOrgPolicyViolations: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		GetOperation:   []gax.CallOption{},
		ListOperations: []gax.CallOption{},
	}
}

func defaultOrgPolicyViolationsPreviewRESTCallOptions() *OrgPolicyViolationsPreviewCallOptions {
	return &OrgPolicyViolationsPreviewCallOptions{
		ListOrgPolicyViolationsPreviews: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnHTTPCodes(gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				},
					http.StatusServiceUnavailable)
			}),
		},
		GetOrgPolicyViolationsPreview: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnHTTPCodes(gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				},
					http.StatusServiceUnavailable)
			}),
		},
		CreateOrgPolicyViolationsPreview: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		ListOrgPolicyViolations: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnHTTPCodes(gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				},
					http.StatusServiceUnavailable)
			}),
		},
		GetOperation:   []gax.CallOption{},
		ListOperations: []gax.CallOption{},
	}
}

// internalOrgPolicyViolationsPreviewClient is an interface that defines the methods available from Policy Simulator API.
type internalOrgPolicyViolationsPreviewClient interface {
	Close() error
	setGoogleClientInfo(...string)
	Connection() *grpc.ClientConn
	ListOrgPolicyViolationsPreviews(context.Context, *policysimulatorpb.ListOrgPolicyViolationsPreviewsRequest, ...gax.CallOption) *OrgPolicyViolationsPreviewIterator
	GetOrgPolicyViolationsPreview(context.Context, *policysimulatorpb.GetOrgPolicyViolationsPreviewRequest, ...gax.CallOption) (*policysimulatorpb.OrgPolicyViolationsPreview, error)
	CreateOrgPolicyViolationsPreview(context.Context, *policysimulatorpb.CreateOrgPolicyViolationsPreviewRequest, ...gax.CallOption) (*CreateOrgPolicyViolationsPreviewOperation, error)
	CreateOrgPolicyViolationsPreviewOperation(name string) *CreateOrgPolicyViolationsPreviewOperation
	ListOrgPolicyViolations(context.Context, *policysimulatorpb.ListOrgPolicyViolationsRequest, ...gax.CallOption) *OrgPolicyViolationIterator
	GetOperation(context.Context, *longrunningpb.GetOperationRequest, ...gax.CallOption) (*longrunningpb.Operation, error)
	ListOperations(context.Context, *longrunningpb.ListOperationsRequest, ...gax.CallOption) *OperationIterator
}

// OrgPolicyViolationsPreviewClient is a client for interacting with Policy Simulator API.
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
//
// Violations Preview API service for OrgPolicy.
//
// An
// OrgPolicyViolationsPreview
// is a preview of the violations that will exist as soon as a proposed
// OrgPolicy change is submitted. To create an
// OrgPolicyViolationsPreview,
// the API user specifies the changes they wish to make and requests the
// generation of a preview via GenerateViolationsPreview. the OrgPolicy
// Simulator service then scans the API userâ€™s currently existing resources to
// determine these resources violate the newly set OrgPolicy.
type OrgPolicyViolationsPreviewClient struct {
	// The internal transport-dependent client.
	internalClient internalOrgPolicyViolationsPreviewClient

	// The call options for this service.
	CallOptions *OrgPolicyViolationsPreviewCallOptions

	// LROClient is used internally to handle long-running operations.
	// It is exposed so that its CallOptions can be modified if required.
	// Users should not Close this client.
	LROClient *lroauto.OperationsClient
}

// Wrapper methods routed to the internal client.

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *OrgPolicyViolationsPreviewClient) Close() error {
	return c.internalClient.Close()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *OrgPolicyViolationsPreviewClient) setGoogleClientInfo(keyval ...string) {
	c.internalClient.setGoogleClientInfo(keyval...)
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *OrgPolicyViolationsPreviewClient) Connection() *grpc.ClientConn {
	return c.internalClient.Connection()
}

// ListOrgPolicyViolationsPreviews listOrgPolicyViolationsPreviews lists each
// OrgPolicyViolationsPreview
// in an organization. Each
// OrgPolicyViolationsPreview
// is available for at least 7 days.
func (c *OrgPolicyViolationsPreviewClient) ListOrgPolicyViolationsPreviews(ctx context.Context, req *policysimulatorpb.ListOrgPolicyViolationsPreviewsRequest, opts ...gax.CallOption) *OrgPolicyViolationsPreviewIterator {
	return c.internalClient.ListOrgPolicyViolationsPreviews(ctx, req, opts...)
}

// GetOrgPolicyViolationsPreview getOrgPolicyViolationsPreview gets the specified
// OrgPolicyViolationsPreview.
// Each
// OrgPolicyViolationsPreview
// is available for at least 7 days.
func (c *OrgPolicyViolationsPreviewClient) GetOrgPolicyViolationsPreview(ctx context.Context, req *policysimulatorpb.GetOrgPolicyViolationsPreviewRequest, opts ...gax.CallOption) (*policysimulatorpb.OrgPolicyViolationsPreview, error) {
	return c.internalClient.GetOrgPolicyViolationsPreview(ctx, req, opts...)
}

// CreateOrgPolicyViolationsPreview createOrgPolicyViolationsPreview creates an
// OrgPolicyViolationsPreview
// for the proposed changes in the provided
// OrgPolicyViolationsPreview.OrgPolicyOverlay. The changes to OrgPolicy
// are specified by this OrgPolicyOverlay. The resources to scan are
// inferred from these specified changes.
func (c *OrgPolicyViolationsPreviewClient) CreateOrgPolicyViolationsPreview(ctx context.Context, req *policysimulatorpb.CreateOrgPolicyViolationsPreviewRequest, opts ...gax.CallOption) (*CreateOrgPolicyViolationsPreviewOperation, error) {
	return c.internalClient.CreateOrgPolicyViolationsPreview(ctx, req, opts...)
}

// CreateOrgPolicyViolationsPreviewOperation returns a new CreateOrgPolicyViolationsPreviewOperation from a given name.
// The name must be that of a previously created CreateOrgPolicyViolationsPreviewOperation, possibly from a different process.
func (c *OrgPolicyViolationsPreviewClient) CreateOrgPolicyViolationsPreviewOperation(name string) *CreateOrgPolicyViolationsPreviewOperation {
	return c.internalClient.CreateOrgPolicyViolationsPreviewOperation(name)
}

// ListOrgPolicyViolations listOrgPolicyViolations lists the OrgPolicyViolations that are present
// in an
// OrgPolicyViolationsPreview.
func (c *OrgPolicyViolationsPreviewClient) ListOrgPolicyViolations(ctx context.Context, req *policysimulatorpb.ListOrgPolicyViolationsRequest, opts ...gax.CallOption) *OrgPolicyViolationIterator {
	return c.internalClient.ListOrgPolicyViolations(ctx, req, opts...)
}

// GetOperation is a utility method from google.longrunning.Operations.
func (c *OrgPolicyViolationsPreviewClient) GetOperation(ctx context.Context, req *longrunningpb.GetOperationRequest, opts ...gax.CallOption) (*longrunningpb.Operation, error) {
	return c.internalClient.GetOperation(ctx, req, opts...)
}

// ListOperations is a utility method from google.longrunning.Operations.
func (c *OrgPolicyViolationsPreviewClient) ListOperations(ctx context.Context, req *longrunningpb.ListOperationsRequest, opts ...gax.CallOption) *OperationIterator {
	return c.internalClient.ListOperations(ctx, req, opts...)
}

// orgPolicyViolationsPreviewGRPCClient is a client for interacting with Policy Simulator API over gRPC transport.
//
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type orgPolicyViolationsPreviewGRPCClient struct {
	// Connection pool of gRPC connections to the service.
	connPool gtransport.ConnPool

	// Points back to the CallOptions field of the containing OrgPolicyViolationsPreviewClient
	CallOptions **OrgPolicyViolationsPreviewCallOptions

	// The gRPC API client.
	orgPolicyViolationsPreviewClient policysimulatorpb.OrgPolicyViolationsPreviewServiceClient

	// LROClient is used internally to handle long-running operations.
	// It is exposed so that its CallOptions can be modified if required.
	// Users should not Close this client.
	LROClient **lroauto.OperationsClient

	operationsClient longrunningpb.OperationsClient

	// The x-goog-* metadata to be sent with each request.
	xGoogHeaders []string

	logger *slog.Logger
}

// NewOrgPolicyViolationsPreviewClient creates a new org policy violations preview service client based on gRPC.
// The returned client must be Closed when it is done being used to clean up its underlying connections.
//
// Violations Preview API service for OrgPolicy.
//
// An
// OrgPolicyViolationsPreview
// is a preview of the violations that will exist as soon as a proposed
// OrgPolicy change is submitted. To create an
// OrgPolicyViolationsPreview,
// the API user specifies the changes they wish to make and requests the
// generation of a preview via GenerateViolationsPreview. the OrgPolicy
// Simulator service then scans the API userâ€™s currently existing resources to
// determine these resources violate the newly set OrgPolicy.
func NewOrgPolicyViolationsPreviewClient(ctx context.Context, opts ...option.ClientOption) (*OrgPolicyViolationsPreviewClient, error) {
	clientOpts := defaultOrgPolicyViolationsPreviewGRPCClientOptions()
	if newOrgPolicyViolationsPreviewClientHook != nil {
		hookOpts, err := newOrgPolicyViolationsPreviewClientHook(ctx, clientHookParams{})
		if err != nil {
			return nil, err
		}
		clientOpts = append(clientOpts, hookOpts...)
	}

	connPool, err := gtransport.DialPool(ctx, append(clientOpts, opts...)...)
	if err != nil {
		return nil, err
	}
	client := OrgPolicyViolationsPreviewClient{CallOptions: defaultOrgPolicyViolationsPreviewCallOptions()}

	c := &orgPolicyViolationsPreviewGRPCClient{
		connPool:                         connPool,
		orgPolicyViolationsPreviewClient: policysimulatorpb.NewOrgPolicyViolationsPreviewServiceClient(connPool),
		CallOptions:                      &client.CallOptions,
		logger:                           internaloption.GetLogger(opts),
		operationsClient:                 longrunningpb.NewOperationsClient(connPool),
	}
	c.setGoogleClientInfo()

	client.internalClient = c

	client.LROClient, err = lroauto.NewOperationsClient(ctx, gtransport.WithConnPool(connPool))
	if err != nil {
		// This error "should not happen", since we are just reusing old connection pool
		// and never actually need to dial.
		// If this does happen, we could leak connp. However, we cannot close conn:
		// If the user invoked the constructor with option.WithGRPCConn,
		// we would close a connection that's still in use.
		// TODO: investigate error conditions.
		return nil, err
	}
	c.LROClient = &client.LROClient
	return &client, nil
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *orgPolicyViolationsPreviewGRPCClient) Connection() *grpc.ClientConn {
	return c.connPool.Conn()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *orgPolicyViolationsPreviewGRPCClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", gax.GoVersion}, keyval...)
	kv = append(kv, "gapic", getVersionClient(), "gax", gax.Version, "grpc", grpc.Version, "pb", protoVersion)
	c.xGoogHeaders = []string{
		"x-goog-api-client", gax.XGoogHeader(kv...),
	}
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *orgPolicyViolationsPreviewGRPCClient) Close() error {
	return c.connPool.Close()
}

// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type orgPolicyViolationsPreviewRESTClient struct {
	// The http endpoint to connect to.
	endpoint string

	// The http client.
	httpClient *http.Client

	// LROClient is used internally to handle long-running operations.
	// It is exposed so that its CallOptions can be modified if required.
	// Users should not Close this client.
	LROClient **lroauto.OperationsClient

	// The x-goog-* headers to be sent with each request.
	xGoogHeaders []string

	// Points back to the CallOptions field of the containing OrgPolicyViolationsPreviewClient
	CallOptions **OrgPolicyViolationsPreviewCallOptions

	logger *slog.Logger
}

// NewOrgPolicyViolationsPreviewRESTClient creates a new org policy violations preview service rest client.
//
// Violations Preview API service for OrgPolicy.
//
// An
// OrgPolicyViolationsPreview
// is a preview of the violations that will exist as soon as a proposed
// OrgPolicy change is submitted. To create an
// OrgPolicyViolationsPreview,
// the API user specifies the changes they wish to make and requests the
// generation of a preview via GenerateViolationsPreview. the OrgPolicy
// Simulator service then scans the API userâ€™s currently existing resources to
// determine these resources violate the newly set OrgPolicy.
func NewOrgPolicyViolationsPreviewRESTClient(ctx context.Context, opts ...option.ClientOption) (*OrgPolicyViolationsPreviewClient, error) {
	clientOpts := append(defaultOrgPolicyViolationsPreviewRESTClientOptions(), opts...)
	httpClient, endpoint, err := httptransport.NewClient(ctx, clientOpts...)
	if err != nil {
		return nil, err
	}

	callOpts := defaultOrgPolicyViolationsPreviewRESTCallOptions()
	c := &orgPolicyViolationsPreviewRESTClient{
		endpoint:    endpoint,
		httpClient:  httpClient,
		CallOptions: &callOpts,
		logger:      internaloption.GetLogger(opts),
	}
	c.setGoogleClientInfo()

	lroOpts := []option.ClientOption{
		option.WithHTTPClient(httpClient),
		option.WithEndpoint(endpoint),
	}
	opClient, err := lroauto.NewOperationsRESTClient(ctx, lroOpts...)
	if err != nil {
		return nil, err
	}
	c.LROClient = &opClient

	return &OrgPolicyViolationsPreviewClient{internalClient: c, CallOptions: callOpts}, nil
}

func defaultOrgPolicyViolationsPreviewRESTClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("https://policysimulator.googleapis.com"),
		internaloption.WithDefaultEndpointTemplate("https://policysimulator.UNIVERSE_DOMAIN"),
		internaloption.WithDefaultMTLSEndpoint("https://policysimulator.mtls.googleapis.com"),
		internaloption.WithDefaultUniverseDomain("googleapis.com"),
		internaloption.WithDefaultAudience("https://policysimulator.googleapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableNewAuthLibrary(),
	}
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *orgPolicyViolationsPreviewRESTClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", gax.GoVersion}, keyval...)
	kv = append(kv, "gapic", getVersionClient(), "gax", gax.Version, "rest", "UNKNOWN", "pb", protoVersion)
	c.xGoogHeaders = []string{
		"x-goog-api-client", gax.XGoogHeader(kv...),
	}
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *orgPolicyViolationsPreviewRESTClient) Close() error {
	// Replace httpClient with nil to force cleanup.
	c.httpClient = nil
	return nil
}

// Connection returns a connection to the API service.
//
// Deprecated: This method always returns nil.
func (c *orgPolicyViolationsPreviewRESTClient) Connection() *grpc.ClientConn {
	return nil
}
func (c *orgPolicyViolationsPreviewGRPCClient) ListOrgPolicyViolationsPreviews(ctx context.Context, req *policysimulatorpb.ListOrgPolicyViolationsPreviewsRequest, opts ...gax.CallOption) *OrgPolicyViolationsPreviewIterator {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ListOrgPolicyViolationsPreviews[0:len((*c.CallOptions).ListOrgPolicyViolationsPreviews):len((*c.CallOptions).ListOrgPolicyViolationsPreviews)], opts...)
	it := &OrgPolicyViolationsPreviewIterator{}
	req = proto.Clone(req).(*policysimulatorpb.ListOrgPolicyViolationsPreviewsRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*policysimulatorpb.OrgPolicyViolationsPreview, string, error) {
		resp := &policysimulatorpb.ListOrgPolicyViolationsPreviewsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = executeRPC(ctx, c.orgPolicyViolationsPreviewClient.ListOrgPolicyViolationsPreviews, req, settings.GRPC, c.logger, "ListOrgPolicyViolationsPreviews")
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetOrgPolicyViolationsPreviews(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

func (c *orgPolicyViolationsPreviewGRPCClient) GetOrgPolicyViolationsPreview(ctx context.Context, req *policysimulatorpb.GetOrgPolicyViolationsPreviewRequest, opts ...gax.CallOption) (*policysimulatorpb.OrgPolicyViolationsPreview, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).GetOrgPolicyViolationsPreview[0:len((*c.CallOptions).GetOrgPolicyViolationsPreview):len((*c.CallOptions).GetOrgPolicyViolationsPreview)], opts...)
	var resp *policysimulatorpb.OrgPolicyViolationsPreview
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = executeRPC(ctx, c.orgPolicyViolationsPreviewClient.GetOrgPolicyViolationsPreview, req, settings.GRPC, c.logger, "GetOrgPolicyViolationsPreview")
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *orgPolicyViolationsPreviewGRPCClient) CreateOrgPolicyViolationsPreview(ctx context.Context, req *policysimulatorpb.CreateOrgPolicyViolationsPreviewRequest, opts ...gax.CallOption) (*CreateOrgPolicyViolationsPreviewOperation, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).CreateOrgPolicyViolationsPreview[0:len((*c.CallOptions).CreateOrgPolicyViolationsPreview):len((*c.CallOptions).CreateOrgPolicyViolationsPreview)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = executeRPC(ctx, c.orgPolicyViolationsPreviewClient.CreateOrgPolicyViolationsPreview, req, settings.GRPC, c.logger, "CreateOrgPolicyViolationsPreview")
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &CreateOrgPolicyViolationsPreviewOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *orgPolicyViolationsPreviewGRPCClient) ListOrgPolicyViolations(ctx context.Context, req *policysimulatorpb.ListOrgPolicyViolationsRequest, opts ...gax.CallOption) *OrgPolicyViolationIterator {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ListOrgPolicyViolations[0:len((*c.CallOptions).ListOrgPolicyViolations):len((*c.CallOptions).ListOrgPolicyViolations)], opts...)
	it := &OrgPolicyViolationIterator{}
	req = proto.Clone(req).(*policysimulatorpb.ListOrgPolicyViolationsRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*policysimulatorpb.OrgPolicyViolation, string, error) {
		resp := &policysimulatorpb.ListOrgPolicyViolationsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = executeRPC(ctx, c.orgPolicyViolationsPreviewClient.ListOrgPolicyViolations, req, settings.GRPC, c.logger, "ListOrgPolicyViolations")
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetOrgPolicyViolations(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

func (c *orgPolicyViolationsPreviewGRPCClient) GetOperation(ctx context.Context, req *longrunningpb.GetOperationRequest, opts ...gax.CallOption) (*longrunningpb.Operation, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).GetOperation[0:len((*c.CallOptions).GetOperation):len((*c.CallOptions).GetOperation)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = executeRPC(ctx, c.operationsClient.GetOperation, req, settings.GRPC, c.logger, "GetOperation")
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *orgPolicyViolationsPreviewGRPCClient) ListOperations(ctx context.Context, req *longrunningpb.ListOperationsRequest, opts ...gax.CallOption) *OperationIterator {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ListOperations[0:len((*c.CallOptions).ListOperations):len((*c.CallOptions).ListOperations)], opts...)
	it := &OperationIterator{}
	req = proto.Clone(req).(*longrunningpb.ListOperationsRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*longrunningpb.Operation, string, error) {
		resp := &longrunningpb.ListOperationsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = executeRPC(ctx, c.operationsClient.ListOperations, req, settings.GRPC, c.logger, "ListOperations")
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetOperations(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

// ListOrgPolicyViolationsPreviews listOrgPolicyViolationsPreviews lists each
// OrgPolicyViolationsPreview
// in an organization. Each
// OrgPolicyViolationsPreview
// is available for at least 7 days.
func (c *orgPolicyViolationsPreviewRESTClient) ListOrgPolicyViolationsPreviews(ctx context.Context, req *policysimulatorpb.ListOrgPolicyViolationsPreviewsRequest, opts ...gax.CallOption) *OrgPolicyViolationsPreviewIterator {
	it := &OrgPolicyViolationsPreviewIterator{}
	req = proto.Clone(req).(*policysimulatorpb.ListOrgPolicyViolationsPreviewsRequest)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	it.InternalFetch = func(pageSize int, pageToken string) ([]*policysimulatorpb.OrgPolicyViolationsPreview, string, error) {
		resp := &policysimulatorpb.ListOrgPolicyViolationsPreviewsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		baseUrl, err := url.Parse(c.endpoint)
		if err != nil {
			return nil, "", err
		}
		baseUrl.Path += fmt.Sprintf("/v1/%v/orgPolicyViolationsPreviews", req.GetParent())

		params := url.Values{}
		params.Add("$alt", "json;enum-encoding=int")
		if req.GetPageSize() != 0 {
			params.Add("pageSize", fmt.Sprintf("%v", req.GetPageSize()))
		}
		if req.GetPageToken() != "" {
			params.Add("pageToken", fmt.Sprintf("%v", req.GetPageToken()))
		}

		baseUrl.RawQuery = params.Encode()

		// Build HTTP headers from client and context metadata.
		hds := append(c.xGoogHeaders, "Content-Type", "application/json")
		headers := gax.BuildHeaders(ctx, hds...)
		e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			if settings.Path != "" {
				baseUrl.Path = settings.Path
			}
			httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
			if err != nil {
				return err
			}
			httpReq.Header = headers

			buf, err := executeHTTPRequest(ctx, c.httpClient, httpReq, c.logger, nil, "ListOrgPolicyViolationsPreviews")
			if err != nil {
				return err
			}
			if err := unm.Unmarshal(buf, resp); err != nil {
				return err
			}

			return nil
		}, opts...)
		if e != nil {
			return nil, "", e
		}
		it.Response = resp
		return resp.GetOrgPolicyViolationsPreviews(), resp.GetNextPageToken(), nil
	}

	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

// GetOrgPolicyViolationsPreview getOrgPolicyViolationsPreview gets the specified
// OrgPolicyViolationsPreview.
// Each
// OrgPolicyViolationsPreview
// is available for at least 7 days.
func (c *orgPolicyViolationsPreviewRESTClient) GetOrgPolicyViolationsPreview(ctx context.Context, req *policysimulatorpb.GetOrgPolicyViolationsPreviewRequest, opts ...gax.CallOption) (*policysimulatorpb.OrgPolicyViolationsPreview, error) {
	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1/%v", req.GetName())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).GetOrgPolicyViolationsPreview[0:len((*c.CallOptions).GetOrgPolicyViolationsPreview):len((*c.CallOptions).GetOrgPolicyViolationsPreview)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &policysimulatorpb.OrgPolicyViolationsPreview{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		buf, err := executeHTTPRequest(ctx, c.httpClient, httpReq, c.logger, nil, "GetOrgPolicyViolationsPreview")
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// CreateOrgPolicyViolationsPreview createOrgPolicyViolationsPreview creates an
// OrgPolicyViolationsPreview
// for the proposed changes in the provided
// OrgPolicyViolationsPreview.OrgPolicyOverlay. The changes to OrgPolicy
// are specified by this OrgPolicyOverlay. The resources to scan are
// inferred from these specified changes.
func (c *orgPolicyViolationsPreviewRESTClient) CreateOrgPolicyViolationsPreview(ctx context.Context, req *policysimulatorpb.CreateOrgPolicyViolationsPreviewRequest, opts ...gax.CallOption) (*CreateOrgPolicyViolationsPreviewOperation, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	body := req.GetOrgPolicyViolationsPreview()
	jsonReq, err := m.Marshal(body)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1/%v/orgPolicyViolationsPreviews", req.GetParent())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")
	if req.GetOrgPolicyViolationsPreviewId() != "" {
		params.Add("orgPolicyViolationsPreviewId", fmt.Sprintf("%v", req.GetOrgPolicyViolationsPreviewId()))
	}

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &longrunningpb.Operation{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		buf, err := executeHTTPRequest(ctx, c.httpClient, httpReq, c.logger, jsonReq, "CreateOrgPolicyViolationsPreview")
		if err != nil {
			return err
		}
		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}

	override := fmt.Sprintf("/v1/%s", resp.GetName())
	return &CreateOrgPolicyViolationsPreviewOperation{
		lro:      longrunning.InternalNewOperation(*c.LROClient, resp),
		pollPath: override,
	}, nil
}

// ListOrgPolicyViolations listOrgPolicyViolations lists the OrgPolicyViolations that are present
// in an
// OrgPolicyViolationsPreview.
func (c *orgPolicyViolationsPreviewRESTClient) ListOrgPolicyViolations(ctx context.Context, req *policysimulatorpb.ListOrgPolicyViolationsRequest, opts ...gax.CallOption) *OrgPolicyViolationIterator {
	it := &OrgPolicyViolationIterator{}
	req = proto.Clone(req).(*policysimulatorpb.ListOrgPolicyViolationsRequest)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	it.InternalFetch = func(pageSize int, pageToken string) ([]*policysimulatorpb.OrgPolicyViolation, string, error) {
		resp := &policysimulatorpb.ListOrgPolicyViolationsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		baseUrl, err := url.Parse(c.endpoint)
		if err != nil {
			return nil, "", err
		}
		baseUrl.Path += fmt.Sprintf("/v1/%v/orgPolicyViolations", req.GetParent())

		params := url.Values{}
		params.Add("$alt", "json;enum-encoding=int")
		if req.GetPageSize() != 0 {
			params.Add("pageSize", fmt.Sprintf("%v", req.GetPageSize()))
		}
		if req.GetPageToken() != "" {
			params.Add("pageToken", fmt.Sprintf("%v", req.GetPageToken()))
		}

		baseUrl.RawQuery = params.Encode()

		// Build HTTP headers from client and context metadata.
		hds := append(c.xGoogHeaders, "Content-Type", "application/json")
		headers := gax.BuildHeaders(ctx, hds...)
		e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			if settings.Path != "" {
				baseUrl.Path = settings.Path
			}
			httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
			if err != nil {
				return err
			}
			httpReq.Header = headers

			buf, err := executeHTTPRequest(ctx, c.httpClient, httpReq, c.logger, nil, "ListOrgPolicyViolations")
			if err != nil {
				return err
			}
			if err := unm.Unmarshal(buf, resp); err != nil {
				return err
			}

			return nil
		}, opts...)
		if e != nil {
			return nil, "", e
		}
		it.Response = resp
		return resp.GetOrgPolicyViolations(), resp.GetNextPageToken(), nil
	}

	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

// GetOperation is a utility method from google.longrunning.Operations.
func (c *orgPolicyViolationsPreviewRESTClient) GetOperation(ctx context.Context, req *longrunningpb.GetOperationRequest, opts ...gax.CallOption) (*longrunningpb.Operation, error) {
	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1/%v", req.GetName())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).GetOperation[0:len((*c.CallOptions).GetOperation):len((*c.CallOptions).GetOperation)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &longrunningpb.Operation{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		buf, err := executeHTTPRequest(ctx, c.httpClient, httpReq, c.logger, nil, "GetOperation")
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// ListOperations is a utility method from google.longrunning.Operations.
func (c *orgPolicyViolationsPreviewRESTClient) ListOperations(ctx context.Context, req *longrunningpb.ListOperationsRequest, opts ...gax.CallOption) *OperationIterator {
	it := &OperationIterator{}
	req = proto.Clone(req).(*longrunningpb.ListOperationsRequest)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	it.InternalFetch = func(pageSize int, pageToken string) ([]*longrunningpb.Operation, string, error) {
		resp := &longrunningpb.ListOperationsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		baseUrl, err := url.Parse(c.endpoint)
		if err != nil {
			return nil, "", err
		}
		baseUrl.Path += fmt.Sprintf("/v1/%v", req.GetName())

		params := url.Values{}
		params.Add("$alt", "json;enum-encoding=int")
		if req.GetFilter() != "" {
			params.Add("filter", fmt.Sprintf("%v", req.GetFilter()))
		}
		if req.GetPageSize() != 0 {
			params.Add("pageSize", fmt.Sprintf("%v", req.GetPageSize()))
		}
		if req.GetPageToken() != "" {
			params.Add("pageToken", fmt.Sprintf("%v", req.GetPageToken()))
		}

		baseUrl.RawQuery = params.Encode()

		// Build HTTP headers from client and context metadata.
		hds := append(c.xGoogHeaders, "Content-Type", "application/json")
		headers := gax.BuildHeaders(ctx, hds...)
		e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			if settings.Path != "" {
				baseUrl.Path = settings.Path
			}
			httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
			if err != nil {
				return err
			}
			httpReq.Header = headers

			buf, err := executeHTTPRequest(ctx, c.httpClient, httpReq, c.logger, nil, "ListOperations")
			if err != nil {
				return err
			}
			if err := unm.Unmarshal(buf, resp); err != nil {
				return err
			}

			return nil
		}, opts...)
		if e != nil {
			return nil, "", e
		}
		it.Response = resp
		return resp.GetOperations(), resp.GetNextPageToken(), nil
	}

	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

// CreateOrgPolicyViolationsPreviewOperation returns a new CreateOrgPolicyViolationsPreviewOperation from a given name.
// The name must be that of a previously created CreateOrgPolicyViolationsPreviewOperation, possibly from a different process.
func (c *orgPolicyViolationsPreviewGRPCClient) CreateOrgPolicyViolationsPreviewOperation(name string) *CreateOrgPolicyViolationsPreviewOperation {
	return &CreateOrgPolicyViolationsPreviewOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// CreateOrgPolicyViolationsPreviewOperation returns a new CreateOrgPolicyViolationsPreviewOperation from a given name.
// The name must be that of a previously created CreateOrgPolicyViolationsPreviewOperation, possibly from a different process.
func (c *orgPolicyViolationsPreviewRESTClient) CreateOrgPolicyViolationsPreviewOperation(name string) *CreateOrgPolicyViolationsPreviewOperation {
	override := fmt.Sprintf("/v1/%s", name)
	return &CreateOrgPolicyViolationsPreviewOperation{
		lro:      longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
		pollPath: override,
	}
}
