// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/config/v1/config.proto

package configpb

import (
	context "context"

	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Config_ListDeployments_FullMethodName           = "/google.cloud.config.v1.Config/ListDeployments"
	Config_GetDeployment_FullMethodName             = "/google.cloud.config.v1.Config/GetDeployment"
	Config_CreateDeployment_FullMethodName          = "/google.cloud.config.v1.Config/CreateDeployment"
	Config_UpdateDeployment_FullMethodName          = "/google.cloud.config.v1.Config/UpdateDeployment"
	Config_DeleteDeployment_FullMethodName          = "/google.cloud.config.v1.Config/DeleteDeployment"
	Config_ListRevisions_FullMethodName             = "/google.cloud.config.v1.Config/ListRevisions"
	Config_GetRevision_FullMethodName               = "/google.cloud.config.v1.Config/GetRevision"
	Config_GetResource_FullMethodName               = "/google.cloud.config.v1.Config/GetResource"
	Config_ListResources_FullMethodName             = "/google.cloud.config.v1.Config/ListResources"
	Config_ExportDeploymentStatefile_FullMethodName = "/google.cloud.config.v1.Config/ExportDeploymentStatefile"
	Config_ExportRevisionStatefile_FullMethodName   = "/google.cloud.config.v1.Config/ExportRevisionStatefile"
	Config_ImportStatefile_FullMethodName           = "/google.cloud.config.v1.Config/ImportStatefile"
	Config_DeleteStatefile_FullMethodName           = "/google.cloud.config.v1.Config/DeleteStatefile"
	Config_LockDeployment_FullMethodName            = "/google.cloud.config.v1.Config/LockDeployment"
	Config_UnlockDeployment_FullMethodName          = "/google.cloud.config.v1.Config/UnlockDeployment"
	Config_ExportLockInfo_FullMethodName            = "/google.cloud.config.v1.Config/ExportLockInfo"
	Config_CreatePreview_FullMethodName             = "/google.cloud.config.v1.Config/CreatePreview"
	Config_GetPreview_FullMethodName                = "/google.cloud.config.v1.Config/GetPreview"
	Config_ListPreviews_FullMethodName              = "/google.cloud.config.v1.Config/ListPreviews"
	Config_DeletePreview_FullMethodName             = "/google.cloud.config.v1.Config/DeletePreview"
	Config_ExportPreviewResult_FullMethodName       = "/google.cloud.config.v1.Config/ExportPreviewResult"
	Config_ListTerraformVersions_FullMethodName     = "/google.cloud.config.v1.Config/ListTerraformVersions"
	Config_GetTerraformVersion_FullMethodName       = "/google.cloud.config.v1.Config/GetTerraformVersion"
	Config_ListResourceChanges_FullMethodName       = "/google.cloud.config.v1.Config/ListResourceChanges"
	Config_GetResourceChange_FullMethodName         = "/google.cloud.config.v1.Config/GetResourceChange"
	Config_ListResourceDrifts_FullMethodName        = "/google.cloud.config.v1.Config/ListResourceDrifts"
	Config_GetResourceDrift_FullMethodName          = "/google.cloud.config.v1.Config/GetResourceDrift"
)

// ConfigClient is the client API for Config service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigClient interface {
	// Lists [Deployment][google.cloud.config.v1.Deployment]s in a given project
	// and location.
	ListDeployments(ctx context.Context, in *ListDeploymentsRequest, opts ...grpc.CallOption) (*ListDeploymentsResponse, error)
	// Gets details about a [Deployment][google.cloud.config.v1.Deployment].
	GetDeployment(ctx context.Context, in *GetDeploymentRequest, opts ...grpc.CallOption) (*Deployment, error)
	// Creates a [Deployment][google.cloud.config.v1.Deployment].
	CreateDeployment(ctx context.Context, in *CreateDeploymentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates a [Deployment][google.cloud.config.v1.Deployment].
	UpdateDeployment(ctx context.Context, in *UpdateDeploymentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a [Deployment][google.cloud.config.v1.Deployment].
	DeleteDeployment(ctx context.Context, in *DeleteDeploymentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists [Revision][google.cloud.config.v1.Revision]s of a deployment.
	ListRevisions(ctx context.Context, in *ListRevisionsRequest, opts ...grpc.CallOption) (*ListRevisionsResponse, error)
	// Gets details about a [Revision][google.cloud.config.v1.Revision].
	GetRevision(ctx context.Context, in *GetRevisionRequest, opts ...grpc.CallOption) (*Revision, error)
	// Gets details about a [Resource][google.cloud.config.v1.Resource] deployed
	// by Infra Manager.
	GetResource(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*Resource, error)
	// Lists [Resources][google.cloud.config.v1.Resource] in a given revision.
	ListResources(ctx context.Context, in *ListResourcesRequest, opts ...grpc.CallOption) (*ListResourcesResponse, error)
	// Exports Terraform state file from a given deployment.
	ExportDeploymentStatefile(ctx context.Context, in *ExportDeploymentStatefileRequest, opts ...grpc.CallOption) (*Statefile, error)
	// Exports Terraform state file from a given revision.
	ExportRevisionStatefile(ctx context.Context, in *ExportRevisionStatefileRequest, opts ...grpc.CallOption) (*Statefile, error)
	// Imports Terraform state file in a given deployment. The state file does not
	// take effect until the Deployment has been unlocked.
	ImportStatefile(ctx context.Context, in *ImportStatefileRequest, opts ...grpc.CallOption) (*Statefile, error)
	// Deletes Terraform state file in a given deployment.
	DeleteStatefile(ctx context.Context, in *DeleteStatefileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Locks a deployment.
	LockDeployment(ctx context.Context, in *LockDeploymentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Unlocks a locked deployment.
	UnlockDeployment(ctx context.Context, in *UnlockDeploymentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Exports the lock info on a locked deployment.
	ExportLockInfo(ctx context.Context, in *ExportLockInfoRequest, opts ...grpc.CallOption) (*LockInfo, error)
	// Creates a [Preview][google.cloud.config.v1.Preview].
	CreatePreview(ctx context.Context, in *CreatePreviewRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets details about a [Preview][google.cloud.config.v1.Preview].
	GetPreview(ctx context.Context, in *GetPreviewRequest, opts ...grpc.CallOption) (*Preview, error)
	// Lists [Preview][google.cloud.config.v1.Preview]s in a given project and
	// location.
	ListPreviews(ctx context.Context, in *ListPreviewsRequest, opts ...grpc.CallOption) (*ListPreviewsResponse, error)
	// Deletes a [Preview][google.cloud.config.v1.Preview].
	DeletePreview(ctx context.Context, in *DeletePreviewRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Export [Preview][google.cloud.config.v1.Preview] results.
	ExportPreviewResult(ctx context.Context, in *ExportPreviewResultRequest, opts ...grpc.CallOption) (*ExportPreviewResultResponse, error)
	// Lists [TerraformVersion][google.cloud.config.v1.TerraformVersion]s in a
	// given project and location.
	ListTerraformVersions(ctx context.Context, in *ListTerraformVersionsRequest, opts ...grpc.CallOption) (*ListTerraformVersionsResponse, error)
	// Gets details about a
	// [TerraformVersion][google.cloud.config.v1.TerraformVersion].
	GetTerraformVersion(ctx context.Context, in *GetTerraformVersionRequest, opts ...grpc.CallOption) (*TerraformVersion, error)
	// Lists ResourceChanges for a given preview.
	ListResourceChanges(ctx context.Context, in *ListResourceChangesRequest, opts ...grpc.CallOption) (*ListResourceChangesResponse, error)
	// Get a ResourceChange for a given preview.
	GetResourceChange(ctx context.Context, in *GetResourceChangeRequest, opts ...grpc.CallOption) (*ResourceChange, error)
	// List ResourceDrifts for a given preview.
	ListResourceDrifts(ctx context.Context, in *ListResourceDriftsRequest, opts ...grpc.CallOption) (*ListResourceDriftsResponse, error)
	// Get a ResourceDrift for a given preview.
	GetResourceDrift(ctx context.Context, in *GetResourceDriftRequest, opts ...grpc.CallOption) (*ResourceDrift, error)
}

type configClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigClient(cc grpc.ClientConnInterface) ConfigClient {
	return &configClient{cc}
}

func (c *configClient) ListDeployments(ctx context.Context, in *ListDeploymentsRequest, opts ...grpc.CallOption) (*ListDeploymentsResponse, error) {
	out := new(ListDeploymentsResponse)
	err := c.cc.Invoke(ctx, Config_ListDeployments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetDeployment(ctx context.Context, in *GetDeploymentRequest, opts ...grpc.CallOption) (*Deployment, error) {
	out := new(Deployment)
	err := c.cc.Invoke(ctx, Config_GetDeployment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CreateDeployment(ctx context.Context, in *CreateDeploymentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, Config_CreateDeployment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UpdateDeployment(ctx context.Context, in *UpdateDeploymentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, Config_UpdateDeployment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) DeleteDeployment(ctx context.Context, in *DeleteDeploymentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, Config_DeleteDeployment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListRevisions(ctx context.Context, in *ListRevisionsRequest, opts ...grpc.CallOption) (*ListRevisionsResponse, error) {
	out := new(ListRevisionsResponse)
	err := c.cc.Invoke(ctx, Config_ListRevisions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetRevision(ctx context.Context, in *GetRevisionRequest, opts ...grpc.CallOption) (*Revision, error) {
	out := new(Revision)
	err := c.cc.Invoke(ctx, Config_GetRevision_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetResource(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*Resource, error) {
	out := new(Resource)
	err := c.cc.Invoke(ctx, Config_GetResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListResources(ctx context.Context, in *ListResourcesRequest, opts ...grpc.CallOption) (*ListResourcesResponse, error) {
	out := new(ListResourcesResponse)
	err := c.cc.Invoke(ctx, Config_ListResources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ExportDeploymentStatefile(ctx context.Context, in *ExportDeploymentStatefileRequest, opts ...grpc.CallOption) (*Statefile, error) {
	out := new(Statefile)
	err := c.cc.Invoke(ctx, Config_ExportDeploymentStatefile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ExportRevisionStatefile(ctx context.Context, in *ExportRevisionStatefileRequest, opts ...grpc.CallOption) (*Statefile, error) {
	out := new(Statefile)
	err := c.cc.Invoke(ctx, Config_ExportRevisionStatefile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ImportStatefile(ctx context.Context, in *ImportStatefileRequest, opts ...grpc.CallOption) (*Statefile, error) {
	out := new(Statefile)
	err := c.cc.Invoke(ctx, Config_ImportStatefile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) DeleteStatefile(ctx context.Context, in *DeleteStatefileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Config_DeleteStatefile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) LockDeployment(ctx context.Context, in *LockDeploymentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, Config_LockDeployment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UnlockDeployment(ctx context.Context, in *UnlockDeploymentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, Config_UnlockDeployment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ExportLockInfo(ctx context.Context, in *ExportLockInfoRequest, opts ...grpc.CallOption) (*LockInfo, error) {
	out := new(LockInfo)
	err := c.cc.Invoke(ctx, Config_ExportLockInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) CreatePreview(ctx context.Context, in *CreatePreviewRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, Config_CreatePreview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetPreview(ctx context.Context, in *GetPreviewRequest, opts ...grpc.CallOption) (*Preview, error) {
	out := new(Preview)
	err := c.cc.Invoke(ctx, Config_GetPreview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListPreviews(ctx context.Context, in *ListPreviewsRequest, opts ...grpc.CallOption) (*ListPreviewsResponse, error) {
	out := new(ListPreviewsResponse)
	err := c.cc.Invoke(ctx, Config_ListPreviews_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) DeletePreview(ctx context.Context, in *DeletePreviewRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, Config_DeletePreview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ExportPreviewResult(ctx context.Context, in *ExportPreviewResultRequest, opts ...grpc.CallOption) (*ExportPreviewResultResponse, error) {
	out := new(ExportPreviewResultResponse)
	err := c.cc.Invoke(ctx, Config_ExportPreviewResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListTerraformVersions(ctx context.Context, in *ListTerraformVersionsRequest, opts ...grpc.CallOption) (*ListTerraformVersionsResponse, error) {
	out := new(ListTerraformVersionsResponse)
	err := c.cc.Invoke(ctx, Config_ListTerraformVersions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetTerraformVersion(ctx context.Context, in *GetTerraformVersionRequest, opts ...grpc.CallOption) (*TerraformVersion, error) {
	out := new(TerraformVersion)
	err := c.cc.Invoke(ctx, Config_GetTerraformVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListResourceChanges(ctx context.Context, in *ListResourceChangesRequest, opts ...grpc.CallOption) (*ListResourceChangesResponse, error) {
	out := new(ListResourceChangesResponse)
	err := c.cc.Invoke(ctx, Config_ListResourceChanges_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetResourceChange(ctx context.Context, in *GetResourceChangeRequest, opts ...grpc.CallOption) (*ResourceChange, error) {
	out := new(ResourceChange)
	err := c.cc.Invoke(ctx, Config_GetResourceChange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) ListResourceDrifts(ctx context.Context, in *ListResourceDriftsRequest, opts ...grpc.CallOption) (*ListResourceDriftsResponse, error) {
	out := new(ListResourceDriftsResponse)
	err := c.cc.Invoke(ctx, Config_ListResourceDrifts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetResourceDrift(ctx context.Context, in *GetResourceDriftRequest, opts ...grpc.CallOption) (*ResourceDrift, error) {
	out := new(ResourceDrift)
	err := c.cc.Invoke(ctx, Config_GetResourceDrift_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigServer is the server API for Config service.
// All implementations should embed UnimplementedConfigServer
// for forward compatibility
type ConfigServer interface {
	// Lists [Deployment][google.cloud.config.v1.Deployment]s in a given project
	// and location.
	ListDeployments(context.Context, *ListDeploymentsRequest) (*ListDeploymentsResponse, error)
	// Gets details about a [Deployment][google.cloud.config.v1.Deployment].
	GetDeployment(context.Context, *GetDeploymentRequest) (*Deployment, error)
	// Creates a [Deployment][google.cloud.config.v1.Deployment].
	CreateDeployment(context.Context, *CreateDeploymentRequest) (*longrunningpb.Operation, error)
	// Updates a [Deployment][google.cloud.config.v1.Deployment].
	UpdateDeployment(context.Context, *UpdateDeploymentRequest) (*longrunningpb.Operation, error)
	// Deletes a [Deployment][google.cloud.config.v1.Deployment].
	DeleteDeployment(context.Context, *DeleteDeploymentRequest) (*longrunningpb.Operation, error)
	// Lists [Revision][google.cloud.config.v1.Revision]s of a deployment.
	ListRevisions(context.Context, *ListRevisionsRequest) (*ListRevisionsResponse, error)
	// Gets details about a [Revision][google.cloud.config.v1.Revision].
	GetRevision(context.Context, *GetRevisionRequest) (*Revision, error)
	// Gets details about a [Resource][google.cloud.config.v1.Resource] deployed
	// by Infra Manager.
	GetResource(context.Context, *GetResourceRequest) (*Resource, error)
	// Lists [Resources][google.cloud.config.v1.Resource] in a given revision.
	ListResources(context.Context, *ListResourcesRequest) (*ListResourcesResponse, error)
	// Exports Terraform state file from a given deployment.
	ExportDeploymentStatefile(context.Context, *ExportDeploymentStatefileRequest) (*Statefile, error)
	// Exports Terraform state file from a given revision.
	ExportRevisionStatefile(context.Context, *ExportRevisionStatefileRequest) (*Statefile, error)
	// Imports Terraform state file in a given deployment. The state file does not
	// take effect until the Deployment has been unlocked.
	ImportStatefile(context.Context, *ImportStatefileRequest) (*Statefile, error)
	// Deletes Terraform state file in a given deployment.
	DeleteStatefile(context.Context, *DeleteStatefileRequest) (*emptypb.Empty, error)
	// Locks a deployment.
	LockDeployment(context.Context, *LockDeploymentRequest) (*longrunningpb.Operation, error)
	// Unlocks a locked deployment.
	UnlockDeployment(context.Context, *UnlockDeploymentRequest) (*longrunningpb.Operation, error)
	// Exports the lock info on a locked deployment.
	ExportLockInfo(context.Context, *ExportLockInfoRequest) (*LockInfo, error)
	// Creates a [Preview][google.cloud.config.v1.Preview].
	CreatePreview(context.Context, *CreatePreviewRequest) (*longrunningpb.Operation, error)
	// Gets details about a [Preview][google.cloud.config.v1.Preview].
	GetPreview(context.Context, *GetPreviewRequest) (*Preview, error)
	// Lists [Preview][google.cloud.config.v1.Preview]s in a given project and
	// location.
	ListPreviews(context.Context, *ListPreviewsRequest) (*ListPreviewsResponse, error)
	// Deletes a [Preview][google.cloud.config.v1.Preview].
	DeletePreview(context.Context, *DeletePreviewRequest) (*longrunningpb.Operation, error)
	// Export [Preview][google.cloud.config.v1.Preview] results.
	ExportPreviewResult(context.Context, *ExportPreviewResultRequest) (*ExportPreviewResultResponse, error)
	// Lists [TerraformVersion][google.cloud.config.v1.TerraformVersion]s in a
	// given project and location.
	ListTerraformVersions(context.Context, *ListTerraformVersionsRequest) (*ListTerraformVersionsResponse, error)
	// Gets details about a
	// [TerraformVersion][google.cloud.config.v1.TerraformVersion].
	GetTerraformVersion(context.Context, *GetTerraformVersionRequest) (*TerraformVersion, error)
	// Lists ResourceChanges for a given preview.
	ListResourceChanges(context.Context, *ListResourceChangesRequest) (*ListResourceChangesResponse, error)
	// Get a ResourceChange for a given preview.
	GetResourceChange(context.Context, *GetResourceChangeRequest) (*ResourceChange, error)
	// List ResourceDrifts for a given preview.
	ListResourceDrifts(context.Context, *ListResourceDriftsRequest) (*ListResourceDriftsResponse, error)
	// Get a ResourceDrift for a given preview.
	GetResourceDrift(context.Context, *GetResourceDriftRequest) (*ResourceDrift, error)
}

// UnimplementedConfigServer should be embedded to have forward compatible implementations.
type UnimplementedConfigServer struct {
}

func (UnimplementedConfigServer) ListDeployments(context.Context, *ListDeploymentsRequest) (*ListDeploymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeployments not implemented")
}
func (UnimplementedConfigServer) GetDeployment(context.Context, *GetDeploymentRequest) (*Deployment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeployment not implemented")
}
func (UnimplementedConfigServer) CreateDeployment(context.Context, *CreateDeploymentRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeployment not implemented")
}
func (UnimplementedConfigServer) UpdateDeployment(context.Context, *UpdateDeploymentRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeployment not implemented")
}
func (UnimplementedConfigServer) DeleteDeployment(context.Context, *DeleteDeploymentRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeployment not implemented")
}
func (UnimplementedConfigServer) ListRevisions(context.Context, *ListRevisionsRequest) (*ListRevisionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRevisions not implemented")
}
func (UnimplementedConfigServer) GetRevision(context.Context, *GetRevisionRequest) (*Revision, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRevision not implemented")
}
func (UnimplementedConfigServer) GetResource(context.Context, *GetResourceRequest) (*Resource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResource not implemented")
}
func (UnimplementedConfigServer) ListResources(context.Context, *ListResourcesRequest) (*ListResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResources not implemented")
}
func (UnimplementedConfigServer) ExportDeploymentStatefile(context.Context, *ExportDeploymentStatefileRequest) (*Statefile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportDeploymentStatefile not implemented")
}
func (UnimplementedConfigServer) ExportRevisionStatefile(context.Context, *ExportRevisionStatefileRequest) (*Statefile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportRevisionStatefile not implemented")
}
func (UnimplementedConfigServer) ImportStatefile(context.Context, *ImportStatefileRequest) (*Statefile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportStatefile not implemented")
}
func (UnimplementedConfigServer) DeleteStatefile(context.Context, *DeleteStatefileRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStatefile not implemented")
}
func (UnimplementedConfigServer) LockDeployment(context.Context, *LockDeploymentRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockDeployment not implemented")
}
func (UnimplementedConfigServer) UnlockDeployment(context.Context, *UnlockDeploymentRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockDeployment not implemented")
}
func (UnimplementedConfigServer) ExportLockInfo(context.Context, *ExportLockInfoRequest) (*LockInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportLockInfo not implemented")
}
func (UnimplementedConfigServer) CreatePreview(context.Context, *CreatePreviewRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePreview not implemented")
}
func (UnimplementedConfigServer) GetPreview(context.Context, *GetPreviewRequest) (*Preview, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPreview not implemented")
}
func (UnimplementedConfigServer) ListPreviews(context.Context, *ListPreviewsRequest) (*ListPreviewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPreviews not implemented")
}
func (UnimplementedConfigServer) DeletePreview(context.Context, *DeletePreviewRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePreview not implemented")
}
func (UnimplementedConfigServer) ExportPreviewResult(context.Context, *ExportPreviewResultRequest) (*ExportPreviewResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportPreviewResult not implemented")
}
func (UnimplementedConfigServer) ListTerraformVersions(context.Context, *ListTerraformVersionsRequest) (*ListTerraformVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTerraformVersions not implemented")
}
func (UnimplementedConfigServer) GetTerraformVersion(context.Context, *GetTerraformVersionRequest) (*TerraformVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTerraformVersion not implemented")
}
func (UnimplementedConfigServer) ListResourceChanges(context.Context, *ListResourceChangesRequest) (*ListResourceChangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResourceChanges not implemented")
}
func (UnimplementedConfigServer) GetResourceChange(context.Context, *GetResourceChangeRequest) (*ResourceChange, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceChange not implemented")
}
func (UnimplementedConfigServer) ListResourceDrifts(context.Context, *ListResourceDriftsRequest) (*ListResourceDriftsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResourceDrifts not implemented")
}
func (UnimplementedConfigServer) GetResourceDrift(context.Context, *GetResourceDriftRequest) (*ResourceDrift, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceDrift not implemented")
}

// UnsafeConfigServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigServer will
// result in compilation errors.
type UnsafeConfigServer interface {
	mustEmbedUnimplementedConfigServer()
}

func RegisterConfigServer(s grpc.ServiceRegistrar, srv ConfigServer) {
	s.RegisterService(&Config_ServiceDesc, srv)
}

func _Config_ListDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeploymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListDeployments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListDeployments(ctx, req.(*ListDeploymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_GetDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetDeployment(ctx, req.(*GetDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CreateDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CreateDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_CreateDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CreateDeployment(ctx, req.(*CreateDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UpdateDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UpdateDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_UpdateDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UpdateDeployment(ctx, req.(*UpdateDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_DeleteDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).DeleteDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_DeleteDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).DeleteDeployment(ctx, req.(*DeleteDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListRevisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRevisionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListRevisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListRevisions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListRevisions(ctx, req.(*ListRevisionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRevisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_GetRevision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetRevision(ctx, req.(*GetRevisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_GetResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetResource(ctx, req.(*GetResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListResources(ctx, req.(*ListResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ExportDeploymentStatefile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportDeploymentStatefileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ExportDeploymentStatefile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ExportDeploymentStatefile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ExportDeploymentStatefile(ctx, req.(*ExportDeploymentStatefileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ExportRevisionStatefile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportRevisionStatefileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ExportRevisionStatefile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ExportRevisionStatefile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ExportRevisionStatefile(ctx, req.(*ExportRevisionStatefileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ImportStatefile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportStatefileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ImportStatefile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ImportStatefile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ImportStatefile(ctx, req.(*ImportStatefileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_DeleteStatefile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStatefileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).DeleteStatefile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_DeleteStatefile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).DeleteStatefile(ctx, req.(*DeleteStatefileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_LockDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).LockDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_LockDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).LockDeployment(ctx, req.(*LockDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UnlockDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UnlockDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_UnlockDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UnlockDeployment(ctx, req.(*UnlockDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ExportLockInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportLockInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ExportLockInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ExportLockInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ExportLockInfo(ctx, req.(*ExportLockInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_CreatePreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePreviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CreatePreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_CreatePreview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CreatePreview(ctx, req.(*CreatePreviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetPreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPreviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetPreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_GetPreview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetPreview(ctx, req.(*GetPreviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListPreviews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPreviewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListPreviews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListPreviews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListPreviews(ctx, req.(*ListPreviewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_DeletePreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePreviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).DeletePreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_DeletePreview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).DeletePreview(ctx, req.(*DeletePreviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ExportPreviewResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportPreviewResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ExportPreviewResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ExportPreviewResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ExportPreviewResult(ctx, req.(*ExportPreviewResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListTerraformVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTerraformVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListTerraformVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListTerraformVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListTerraformVersions(ctx, req.(*ListTerraformVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetTerraformVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTerraformVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetTerraformVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_GetTerraformVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetTerraformVersion(ctx, req.(*GetTerraformVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListResourceChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResourceChangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListResourceChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListResourceChanges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListResourceChanges(ctx, req.(*ListResourceChangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetResourceChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetResourceChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_GetResourceChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetResourceChange(ctx, req.(*GetResourceChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_ListResourceDrifts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResourceDriftsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ListResourceDrifts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_ListResourceDrifts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ListResourceDrifts(ctx, req.(*ListResourceDriftsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetResourceDrift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceDriftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetResourceDrift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Config_GetResourceDrift_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetResourceDrift(ctx, req.(*GetResourceDriftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Config_ServiceDesc is the grpc.ServiceDesc for Config service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Config_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.config.v1.Config",
	HandlerType: (*ConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDeployments",
			Handler:    _Config_ListDeployments_Handler,
		},
		{
			MethodName: "GetDeployment",
			Handler:    _Config_GetDeployment_Handler,
		},
		{
			MethodName: "CreateDeployment",
			Handler:    _Config_CreateDeployment_Handler,
		},
		{
			MethodName: "UpdateDeployment",
			Handler:    _Config_UpdateDeployment_Handler,
		},
		{
			MethodName: "DeleteDeployment",
			Handler:    _Config_DeleteDeployment_Handler,
		},
		{
			MethodName: "ListRevisions",
			Handler:    _Config_ListRevisions_Handler,
		},
		{
			MethodName: "GetRevision",
			Handler:    _Config_GetRevision_Handler,
		},
		{
			MethodName: "GetResource",
			Handler:    _Config_GetResource_Handler,
		},
		{
			MethodName: "ListResources",
			Handler:    _Config_ListResources_Handler,
		},
		{
			MethodName: "ExportDeploymentStatefile",
			Handler:    _Config_ExportDeploymentStatefile_Handler,
		},
		{
			MethodName: "ExportRevisionStatefile",
			Handler:    _Config_ExportRevisionStatefile_Handler,
		},
		{
			MethodName: "ImportStatefile",
			Handler:    _Config_ImportStatefile_Handler,
		},
		{
			MethodName: "DeleteStatefile",
			Handler:    _Config_DeleteStatefile_Handler,
		},
		{
			MethodName: "LockDeployment",
			Handler:    _Config_LockDeployment_Handler,
		},
		{
			MethodName: "UnlockDeployment",
			Handler:    _Config_UnlockDeployment_Handler,
		},
		{
			MethodName: "ExportLockInfo",
			Handler:    _Config_ExportLockInfo_Handler,
		},
		{
			MethodName: "CreatePreview",
			Handler:    _Config_CreatePreview_Handler,
		},
		{
			MethodName: "GetPreview",
			Handler:    _Config_GetPreview_Handler,
		},
		{
			MethodName: "ListPreviews",
			Handler:    _Config_ListPreviews_Handler,
		},
		{
			MethodName: "DeletePreview",
			Handler:    _Config_DeletePreview_Handler,
		},
		{
			MethodName: "ExportPreviewResult",
			Handler:    _Config_ExportPreviewResult_Handler,
		},
		{
			MethodName: "ListTerraformVersions",
			Handler:    _Config_ListTerraformVersions_Handler,
		},
		{
			MethodName: "GetTerraformVersion",
			Handler:    _Config_GetTerraformVersion_Handler,
		},
		{
			MethodName: "ListResourceChanges",
			Handler:    _Config_ListResourceChanges_Handler,
		},
		{
			MethodName: "GetResourceChange",
			Handler:    _Config_GetResourceChange_Handler,
		},
		{
			MethodName: "ListResourceDrifts",
			Handler:    _Config_ListResourceDrifts_Handler,
		},
		{
			MethodName: "GetResourceDrift",
			Handler:    _Config_GetResourceDrift_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/config/v1/config.proto",
}
