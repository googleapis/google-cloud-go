// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.3
// source: google/cloud/storageinsights/v1/storageinsights.proto

package storageinsightspb

import (
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	status "google.golang.org/genproto/googleapis/rpc/status"
	date "google.golang.org/genproto/googleapis/type/date"
	datetime "google.golang.org/genproto/googleapis/type/datetime"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status1 "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This ENUM specifies possible frequencies of report generation.
type FrequencyOptions_Frequency int32

const (
	// Unspecified.
	FrequencyOptions_FREQUENCY_UNSPECIFIED FrequencyOptions_Frequency = 0
	// Report will be generated daily.
	FrequencyOptions_DAILY FrequencyOptions_Frequency = 1
	// Report will be generated weekly.
	FrequencyOptions_WEEKLY FrequencyOptions_Frequency = 2
)

// Enum value maps for FrequencyOptions_Frequency.
var (
	FrequencyOptions_Frequency_name = map[int32]string{
		0: "FREQUENCY_UNSPECIFIED",
		1: "DAILY",
		2: "WEEKLY",
	}
	FrequencyOptions_Frequency_value = map[string]int32{
		"FREQUENCY_UNSPECIFIED": 0,
		"DAILY":                 1,
		"WEEKLY":                2,
	}
)

func (x FrequencyOptions_Frequency) Enum() *FrequencyOptions_Frequency {
	p := new(FrequencyOptions_Frequency)
	*p = x
	return p
}

func (x FrequencyOptions_Frequency) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FrequencyOptions_Frequency) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_storageinsights_v1_storageinsights_proto_enumTypes[0].Descriptor()
}

func (FrequencyOptions_Frequency) Type() protoreflect.EnumType {
	return &file_google_cloud_storageinsights_v1_storageinsights_proto_enumTypes[0]
}

func (x FrequencyOptions_Frequency) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FrequencyOptions_Frequency.Descriptor instead.
func (FrequencyOptions_Frequency) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_storageinsights_v1_storageinsights_proto_rawDescGZIP(), []int{11, 0}
}

// Type of service account to use for the dataset configuration.
type Identity_IdentityType int32

const (
	// Default is unspecified and should not be used.
	Identity_IDENTITY_TYPE_UNSPECIFIED Identity_IdentityType = 0
	// Google managed service account per resource.
	Identity_IDENTITY_TYPE_PER_CONFIG Identity_IdentityType = 1
	// Google managed service account per project.
	Identity_IDENTITY_TYPE_PER_PROJECT Identity_IdentityType = 2
)

// Enum value maps for Identity_IdentityType.
var (
	Identity_IdentityType_name = map[int32]string{
		0: "IDENTITY_TYPE_UNSPECIFIED",
		1: "IDENTITY_TYPE_PER_CONFIG",
		2: "IDENTITY_TYPE_PER_PROJECT",
	}
	Identity_IdentityType_value = map[string]int32{
		"IDENTITY_TYPE_UNSPECIFIED": 0,
		"IDENTITY_TYPE_PER_CONFIG":  1,
		"IDENTITY_TYPE_PER_PROJECT": 2,
	}
)

func (x Identity_IdentityType) Enum() *Identity_IdentityType {
	p := new(Identity_IdentityType)
	*p = x
	return p
}

func (x Identity_IdentityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Identity_IdentityType) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_storageinsights_v1_storageinsights_proto_enumTypes[1].Descriptor()
}

func (Identity_IdentityType) Type() protoreflect.EnumType {
	return &file_google_cloud_storageinsights_v1_storageinsights_proto_enumTypes[1]
}

func (x Identity_IdentityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Identity_IdentityType.Descriptor instead.
func (Identity_IdentityType) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_storageinsights_v1_storageinsights_proto_rawDescGZIP(), []int{18, 0}
}

// State of the configuration.
type DatasetConfig_ConfigState int32

const (
	// Unspecified state.
	DatasetConfig_CONFIG_STATE_UNSPECIFIED DatasetConfig_ConfigState = 0
	// Active configuration indicates that the configuration is
	// actively ingesting data.
	DatasetConfig_CONFIG_STATE_ACTIVE DatasetConfig_ConfigState = 1
	// In this state, the configuration is being verified for various
	// permissions.
	DatasetConfig_CONFIG_STATE_VERIFICATION_IN_PROGRESS DatasetConfig_ConfigState = 2
	// Configuration is created and further processing needs to happen.
	DatasetConfig_CONFIG_STATE_CREATED DatasetConfig_ConfigState = 3
	// Configuration is under processing
	DatasetConfig_CONFIG_STATE_PROCESSING DatasetConfig_ConfigState = 4
)

// Enum value maps for DatasetConfig_ConfigState.
var (
	DatasetConfig_ConfigState_name = map[int32]string{
		0: "CONFIG_STATE_UNSPECIFIED",
		1: "CONFIG_STATE_ACTIVE",
		2: "CONFIG_STATE_VERIFICATION_IN_PROGRESS",
		3: "CONFIG_STATE_CREATED",
		4: "CONFIG_STATE_PROCESSING",
	}
	DatasetConfig_ConfigState_value = map[string]int32{
		"CONFIG_STATE_UNSPECIFIED":              0,
		"CONFIG_STATE_ACTIVE":                   1,
		"CONFIG_STATE_VERIFICATION_IN_PROGRESS": 2,
		"CONFIG_STATE_CREATED":                  3,
		"CONFIG_STATE_PROCESSING":               4,
	}
)

func (x DatasetConfig_ConfigState) Enum() *DatasetConfig_ConfigState {
	p := new(DatasetConfig_ConfigState)
	*p = x
	return p
}

func (x DatasetConfig_ConfigState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DatasetConfig_ConfigState) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_storageinsights_v1_storageinsights_proto_enumTypes[2].Descriptor()
}

func (DatasetConfig_ConfigState) Type() protoreflect.EnumType {
	return &file_google_cloud_storageinsights_v1_storageinsights_proto_enumTypes[2]
}

func (x DatasetConfig_ConfigState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DatasetConfig_ConfigState.Descriptor instead.
func (DatasetConfig_ConfigState) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_storageinsights_v1_storageinsights_proto_rawDescGZIP(), []int{19, 0}
}

// Request message for
// [`ListReportConfigs`][google.cloud.storageinsights.v1.StorageInsights.ListReportConfigs]
type ListReportConfigsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Parent value for ListReportConfigsRequest
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Requested page size. Server may return fewer items than requested.
	// If unspecified, server will pick an appropriate default.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A token identifying a page of results the server should return.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Filtering results
	Filter string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	// Hint for how to order the results
	OrderBy string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListReportConfigsRequest) Reset() {
	*x = ListReportConfigsRequest{}
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListReportConfigsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReportConfigsRequest) ProtoMessage() {}

func (x *ListReportConfigsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReportConfigsRequest.ProtoReflect.Descriptor instead.
func (*ListReportConfigsRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_storageinsights_v1_storageinsights_proto_rawDescGZIP(), []int{0}
}

func (x *ListReportConfigsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListReportConfigsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListReportConfigsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListReportConfigsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListReportConfigsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

// Message for response to listing ReportConfigs
type ListReportConfigsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of ReportConfig
	ReportConfigs []*ReportConfig `protobuf:"bytes,1,rep,name=report_configs,json=reportConfigs,proto3" json:"report_configs,omitempty"`
	// A token identifying a page of results the server should return.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Locations that could not be reached.
	Unreachable []string `protobuf:"bytes,3,rep,name=unreachable,proto3" json:"unreachable,omitempty"`
}

func (x *ListReportConfigsResponse) Reset() {
	*x = ListReportConfigsResponse{}
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListReportConfigsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReportConfigsResponse) ProtoMessage() {}

func (x *ListReportConfigsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReportConfigsResponse.ProtoReflect.Descriptor instead.
func (*ListReportConfigsResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_storageinsights_v1_storageinsights_proto_rawDescGZIP(), []int{1}
}

func (x *ListReportConfigsResponse) GetReportConfigs() []*ReportConfig {
	if x != nil {
		return x.ReportConfigs
	}
	return nil
}

func (x *ListReportConfigsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListReportConfigsResponse) GetUnreachable() []string {
	if x != nil {
		return x.Unreachable
	}
	return nil
}

// Message for getting a ReportConfig
type GetReportConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Name of the resource
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetReportConfigRequest) Reset() {
	*x = GetReportConfigRequest{}
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetReportConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReportConfigRequest) ProtoMessage() {}

func (x *GetReportConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReportConfigRequest.ProtoReflect.Descriptor instead.
func (*GetReportConfigRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_storageinsights_v1_storageinsights_proto_rawDescGZIP(), []int{2}
}

func (x *GetReportConfigRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Message for creating a ReportConfig
type CreateReportConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Value for parent.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Required. The resource being created
	ReportConfig *ReportConfig `protobuf:"bytes,3,opt,name=report_config,json=reportConfig,proto3" json:"report_config,omitempty"`
	// Optional. An optional request ID to identify requests. Specify a unique
	// request ID so that if you must retry your request, the server will know to
	// ignore the request if it has already been completed. The server will
	// guarantee that for at least 60 minutes since the first request.
	//
	// For example, consider a situation where you make an initial request and
	// the request times out. If you make the request again with the same request
	// ID, the server can check if original operation with the same request ID
	// was received, and if so, will ignore the second request. This prevents
	// clients from accidentally creating duplicate commitments.
	//
	// The request ID must be a valid UUID with the exception that zero UUID is
	// not supported (00000000-0000-0000-0000-000000000000).
	RequestId string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateReportConfigRequest) Reset() {
	*x = CreateReportConfigRequest{}
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateReportConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReportConfigRequest) ProtoMessage() {}

func (x *CreateReportConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReportConfigRequest.ProtoReflect.Descriptor instead.
func (*CreateReportConfigRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_storageinsights_v1_storageinsights_proto_rawDescGZIP(), []int{3}
}

func (x *CreateReportConfigRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateReportConfigRequest) GetReportConfig() *ReportConfig {
	if x != nil {
		return x.ReportConfig
	}
	return nil
}

func (x *CreateReportConfigRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

// Message for updating a ReportConfig
type UpdateReportConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Field mask is used to specify the fields to be overwritten in the
	// ReportConfig resource by the update.
	// The fields specified in the update_mask are relative to the resource, not
	// the full request. A field will be overwritten if it is in the mask. If the
	// user does not provide a mask then all fields will be overwritten.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,1,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// Required. The resource being updated
	ReportConfig *ReportConfig `protobuf:"bytes,2,opt,name=report_config,json=reportConfig,proto3" json:"report_config,omitempty"`
	// Optional. An optional request ID to identify requests. Specify a unique
	// request ID so that if you must retry your request, the server will know to
	// ignore the request if it has already been completed. The server will
	// guarantee that for at least 60 minutes since the first request.
	//
	// For example, consider a situation where you make an initial request and
	// the request times out. If you make the request again with the same request
	// ID, the server can check if original operation with the same request ID
	// was received, and if so, will ignore the second request. This prevents
	// clients from accidentally creating duplicate commitments.
	//
	// The request ID must be a valid UUID with the exception that zero UUID is
	// not supported (00000000-0000-0000-0000-000000000000).
	RequestId string `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *UpdateReportConfigRequest) Reset() {
	*x = UpdateReportConfigRequest{}
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateReportConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReportConfigRequest) ProtoMessage() {}

func (x *UpdateReportConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReportConfigRequest.ProtoReflect.Descriptor instead.
func (*UpdateReportConfigRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_storageinsights_v1_storageinsights_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateReportConfigRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateReportConfigRequest) GetReportConfig() *ReportConfig {
	if x != nil {
		return x.ReportConfig
	}
	return nil
}

func (x *UpdateReportConfigRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

// Message for deleting a ReportConfig
type DeleteReportConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Name of the resource
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. If set, all ReportDetails for this ReportConfig will be deleted.
	Force bool `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
	// Optional. An optional request ID to identify requests. Specify a unique
	// request ID so that if you must retry your request, the server will know to
	// ignore the request if it has already been completed. The server will
	// guarantee that for at least 60 minutes after the first request.
	//
	// For example, consider a situation where you make an initial request and
	// the request times out. If you make the request again with the same request
	// ID, the server can check if original operation with the same request ID
	// was received, and if so, will ignore the second request. This prevents
	// clients from accidentally creating duplicate commitments.
	//
	// The request ID must be a valid UUID with the exception that zero UUID is
	// not supported (00000000-0000-0000-0000-000000000000).
	RequestId string `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *DeleteReportConfigRequest) Reset() {
	*x = DeleteReportConfigRequest{}
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteReportConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReportConfigRequest) ProtoMessage() {}

func (x *DeleteReportConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReportConfigRequest.ProtoReflect.Descriptor instead.
func (*DeleteReportConfigRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_storageinsights_v1_storageinsights_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteReportConfigRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteReportConfigRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *DeleteReportConfigRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

// Message describing ReportDetail object. ReportDetail represents metadata of
// generated reports for a ReportConfig.
// Next ID: 10
type ReportDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of resource. It will be of form
	// projects/<project>/locations/<location>/reportConfigs/<report-config-id>/reportDetails/<report-detail-id>.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The snapshot time.
	// All the report data is referenced at this point of time.
	SnapshotTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=snapshot_time,json=snapshotTime,proto3" json:"snapshot_time,omitempty"`
	// Prefix of the object name of each report's shard. This will have full
	// prefix except the "extension" and "shard_id".
	// For example, if the `destination_path` is
	// `{{report-config-id}}/dt={{datetime}}`, the shard object name would be
	// `gs://my-insights/1A34-F2E456-12B456-1C3D/dt=2022-05-20T06:35/1A34-F2E456-12B456-1C3D_2022-05-20T06:35_5.csv`
	// and the value of `report_path_prefix` field would be
	// `gs://my-insights/1A34-F2E456-12B456-1C3D/dt=2022-05-20T06:35/1A34-F2E456-12B456-1C3D_2022-05-20T06:35_`.
	ReportPathPrefix string `protobuf:"bytes,8,opt,name=report_path_prefix,json=reportPathPrefix,proto3" json:"report_path_prefix,omitempty"`
	// Total shards generated for the report.
	ShardsCount int64 `protobuf:"varint,9,opt,name=shards_count,json=shardsCount,proto3" json:"shards_count,omitempty"`
	// Status of the ReportDetail.
	Status *status.Status `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	// Labels as key value pairs
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The date for which report is generated. The time part of target_datetime
	// will be zero till we support multiple reports per day.
	TargetDatetime *datetime.DateTime `protobuf:"bytes,6,opt,name=target_datetime,json=targetDatetime,proto3" json:"target_datetime,omitempty"`
	// Metrics of the report.
	ReportMetrics *ReportDetail_Metrics `protobuf:"bytes,7,opt,name=report_metrics,json=reportMetrics,proto3" json:"report_metrics,omitempty"`
}

func (x *ReportDetail) Reset() {
	*x = ReportDetail{}
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportDetail) ProtoMessage() {}

func (x *ReportDetail) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportDetail.ProtoReflect.Descriptor instead.
func (*ReportDetail) Descriptor() ([]byte, []int) {
	return file_google_cloud_storageinsights_v1_storageinsights_proto_rawDescGZIP(), []int{6}
}

func (x *ReportDetail) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReportDetail) GetSnapshotTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SnapshotTime
	}
	return nil
}

func (x *ReportDetail) GetReportPathPrefix() string {
	if x != nil {
		return x.ReportPathPrefix
	}
	return ""
}

func (x *ReportDetail) GetShardsCount() int64 {
	if x != nil {
		return x.ShardsCount
	}
	return 0
}

func (x *ReportDetail) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ReportDetail) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ReportDetail) GetTargetDatetime() *datetime.DateTime {
	if x != nil {
		return x.TargetDatetime
	}
	return nil
}

func (x *ReportDetail) GetReportMetrics() *ReportDetail_Metrics {
	if x != nil {
		return x.ReportMetrics
	}
	return nil
}

// Message for requesting list of ReportDetails
type ListReportDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Parent value for ListReportDetailsRequest
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Requested page size. Server may return fewer items than requested.
	// If unspecified, server will pick an appropriate default.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A token identifying a page of results the server should return.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Filtering results
	Filter string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	// Hint for how to order the results
	OrderBy string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListReportDetailsRequest) Reset() {
	*x = ListReportDetailsRequest{}
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListReportDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReportDetailsRequest) ProtoMessage() {}

func (x *ListReportDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReportDetailsRequest.ProtoReflect.Descriptor instead.
func (*ListReportDetailsRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_storageinsights_v1_storageinsights_proto_rawDescGZIP(), []int{7}
}

func (x *ListReportDetailsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListReportDetailsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListReportDetailsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListReportDetailsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListReportDetailsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

// Message for response to listing ReportDetails
type ListReportDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of ReportDetail
	ReportDetails []*ReportDetail `protobuf:"bytes,1,rep,name=report_details,json=reportDetails,proto3" json:"report_details,omitempty"`
	// A token identifying a page of results the server should return.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Locations that could not be reached.
	Unreachable []string `protobuf:"bytes,3,rep,name=unreachable,proto3" json:"unreachable,omitempty"`
}

func (x *ListReportDetailsResponse) Reset() {
	*x = ListReportDetailsResponse{}
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListReportDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReportDetailsResponse) ProtoMessage() {}

func (x *ListReportDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReportDetailsResponse.ProtoReflect.Descriptor instead.
func (*ListReportDetailsResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_storageinsights_v1_storageinsights_proto_rawDescGZIP(), []int{8}
}

func (x *ListReportDetailsResponse) GetReportDetails() []*ReportDetail {
	if x != nil {
		return x.ReportDetails
	}
	return nil
}

func (x *ListReportDetailsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListReportDetailsResponse) GetUnreachable() []string {
	if x != nil {
		return x.Unreachable
	}
	return nil
}

// Message for getting a ReportDetail
type GetReportDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Name of the resource
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetReportDetailRequest) Reset() {
	*x = GetReportDetailRequest{}
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetReportDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReportDetailRequest) ProtoMessage() {}

func (x *GetReportDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReportDetailRequest.ProtoReflect.Descriptor instead.
func (*GetReportDetailRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_storageinsights_v1_storageinsights_proto_rawDescGZIP(), []int{9}
}

func (x *GetReportDetailRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Represents the metadata of the long-running operation.
type OperationMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The time the operation was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The time the operation finished running.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Output only. Server-defined resource path for the target of the operation.
	Target string `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	// Output only. Name of the verb executed by the operation.
	Verb string `protobuf:"bytes,4,opt,name=verb,proto3" json:"verb,omitempty"`
	// Output only. Human-readable status of the operation, if any.
	StatusMessage string `protobuf:"bytes,5,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
	// Output only. Identifies whether the user has requested cancellation
	// of the operation. Operations that have been cancelled successfully
	// have [Operation.error][] value with a
	// [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
	// `Code.CANCELLED`.
	RequestedCancellation bool `protobuf:"varint,6,opt,name=requested_cancellation,json=requestedCancellation,proto3" json:"requested_cancellation,omitempty"`
	// Output only. API version used to start the operation.
	ApiVersion string `protobuf:"bytes,7,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
}

func (x *OperationMetadata) Reset() {
	*x = OperationMetadata{}
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperationMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationMetadata) ProtoMessage() {}

func (x *OperationMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationMetadata.ProtoReflect.Descriptor instead.
func (*OperationMetadata) Descriptor() ([]byte, []int) {
	return file_google_cloud_storageinsights_v1_storageinsights_proto_rawDescGZIP(), []int{10}
}

func (x *OperationMetadata) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *OperationMetadata) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *OperationMetadata) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *OperationMetadata) GetVerb() string {
	if x != nil {
		return x.Verb
	}
	return ""
}

func (x *OperationMetadata) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

func (x *OperationMetadata) GetRequestedCancellation() bool {
	if x != nil {
		return x.RequestedCancellation
	}
	return false
}

func (x *OperationMetadata) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

// ReportConfig Resource:
//
// Options to setup frequency of report generation.
type FrequencyOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Frequency of report generation.
	Frequency FrequencyOptions_Frequency `protobuf:"varint,1,opt,name=frequency,proto3,enum=google.cloud.storageinsights.v1.FrequencyOptions_Frequency" json:"frequency,omitempty"`
	// The date from which report generation should start.
	// UTC time zone.
	StartDate *date.Date `protobuf:"bytes,2,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// The date on which report generation should stop (Inclusive).
	// UTC time zone.
	EndDate *date.Date `protobuf:"bytes,3,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
}

func (x *FrequencyOptions) Reset() {
	*x = FrequencyOptions{}
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FrequencyOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrequencyOptions) ProtoMessage() {}

func (x *FrequencyOptions) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrequencyOptions.ProtoReflect.Descriptor instead.
func (*FrequencyOptions) Descriptor() ([]byte, []int) {
	return file_google_cloud_storageinsights_v1_storageinsights_proto_rawDescGZIP(), []int{11}
}

func (x *FrequencyOptions) GetFrequency() FrequencyOptions_Frequency {
	if x != nil {
		return x.Frequency
	}
	return FrequencyOptions_FREQUENCY_UNSPECIFIED
}

func (x *FrequencyOptions) GetStartDate() *date.Date {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *FrequencyOptions) GetEndDate() *date.Date {
	if x != nil {
		return x.EndDate
	}
	return nil
}

// Options to configure CSV formatted reports.
type CSVOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Record separator characters in CSV.
	RecordSeparator string `protobuf:"bytes,1,opt,name=record_separator,json=recordSeparator,proto3" json:"record_separator,omitempty"`
	// Delimiter characters in CSV.
	Delimiter string `protobuf:"bytes,2,opt,name=delimiter,proto3" json:"delimiter,omitempty"`
	// If set, will include a header row in the CSV report.
	HeaderRequired bool `protobuf:"varint,3,opt,name=header_required,json=headerRequired,proto3" json:"header_required,omitempty"`
}

func (x *CSVOptions) Reset() {
	*x = CSVOptions{}
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSVOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSVOptions) ProtoMessage() {}

func (x *CSVOptions) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSVOptions.ProtoReflect.Descriptor instead.
func (*CSVOptions) Descriptor() ([]byte, []int) {
	return file_google_cloud_storageinsights_v1_storageinsights_proto_rawDescGZIP(), []int{12}
}

func (x *CSVOptions) GetRecordSeparator() string {
	if x != nil {
		return x.RecordSeparator
	}
	return ""
}

func (x *CSVOptions) GetDelimiter() string {
	if x != nil {
		return x.Delimiter
	}
	return ""
}

func (x *CSVOptions) GetHeaderRequired() bool {
	if x != nil {
		return x.HeaderRequired
	}
	return false
}

// Options to configure Parquet formatted reports.
type ParquetOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ParquetOptions) Reset() {
	*x = ParquetOptions{}
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParquetOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParquetOptions) ProtoMessage() {}

func (x *ParquetOptions) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParquetOptions.ProtoReflect.Descriptor instead.
func (*ParquetOptions) Descriptor() ([]byte, []int) {
	return file_google_cloud_storageinsights_v1_storageinsights_proto_rawDescGZIP(), []int{13}
}

// Options to filter data on storage systems.
// Next ID: 2
type CloudStorageFilters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bucket for which the report will be generated.
	Bucket string `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
}

func (x *CloudStorageFilters) Reset() {
	*x = CloudStorageFilters{}
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloudStorageFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudStorageFilters) ProtoMessage() {}

func (x *CloudStorageFilters) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudStorageFilters.ProtoReflect.Descriptor instead.
func (*CloudStorageFilters) Descriptor() ([]byte, []int) {
	return file_google_cloud_storageinsights_v1_storageinsights_proto_rawDescGZIP(), []int{14}
}

func (x *CloudStorageFilters) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

// Options to store reports in storage systems.
// Next ID: 3
type CloudStorageDestinationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Destination bucket.
	Bucket string `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	// Destination path is the path in the bucket where the report should be
	// generated.
	DestinationPath string `protobuf:"bytes,2,opt,name=destination_path,json=destinationPath,proto3" json:"destination_path,omitempty"`
}

func (x *CloudStorageDestinationOptions) Reset() {
	*x = CloudStorageDestinationOptions{}
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloudStorageDestinationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudStorageDestinationOptions) ProtoMessage() {}

func (x *CloudStorageDestinationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudStorageDestinationOptions.ProtoReflect.Descriptor instead.
func (*CloudStorageDestinationOptions) Descriptor() ([]byte, []int) {
	return file_google_cloud_storageinsights_v1_storageinsights_proto_rawDescGZIP(), []int{15}
}

func (x *CloudStorageDestinationOptions) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *CloudStorageDestinationOptions) GetDestinationPath() string {
	if x != nil {
		return x.DestinationPath
	}
	return ""
}

// Report specification for exporting object metadata.
// Next ID: 4
type ObjectMetadataReportOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metadata fields to be included in the report.
	MetadataFields []string `protobuf:"bytes,1,rep,name=metadata_fields,json=metadataFields,proto3" json:"metadata_fields,omitempty"`
	// Filter options for storage systems.
	//
	// Types that are assignable to Filter:
	//
	//	*ObjectMetadataReportOptions_StorageFilters
	Filter isObjectMetadataReportOptions_Filter `protobuf_oneof:"filter"`
	// Options on destination for storage systems.
	//
	// Types that are assignable to DestinationOptions:
	//
	//	*ObjectMetadataReportOptions_StorageDestinationOptions
	DestinationOptions isObjectMetadataReportOptions_DestinationOptions `protobuf_oneof:"destination_options"`
}

func (x *ObjectMetadataReportOptions) Reset() {
	*x = ObjectMetadataReportOptions{}
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObjectMetadataReportOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectMetadataReportOptions) ProtoMessage() {}

func (x *ObjectMetadataReportOptions) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectMetadataReportOptions.ProtoReflect.Descriptor instead.
func (*ObjectMetadataReportOptions) Descriptor() ([]byte, []int) {
	return file_google_cloud_storageinsights_v1_storageinsights_proto_rawDescGZIP(), []int{16}
}

func (x *ObjectMetadataReportOptions) GetMetadataFields() []string {
	if x != nil {
		return x.MetadataFields
	}
	return nil
}

func (m *ObjectMetadataReportOptions) GetFilter() isObjectMetadataReportOptions_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (x *ObjectMetadataReportOptions) GetStorageFilters() *CloudStorageFilters {
	if x, ok := x.GetFilter().(*ObjectMetadataReportOptions_StorageFilters); ok {
		return x.StorageFilters
	}
	return nil
}

func (m *ObjectMetadataReportOptions) GetDestinationOptions() isObjectMetadataReportOptions_DestinationOptions {
	if m != nil {
		return m.DestinationOptions
	}
	return nil
}

func (x *ObjectMetadataReportOptions) GetStorageDestinationOptions() *CloudStorageDestinationOptions {
	if x, ok := x.GetDestinationOptions().(*ObjectMetadataReportOptions_StorageDestinationOptions); ok {
		return x.StorageDestinationOptions
	}
	return nil
}

type isObjectMetadataReportOptions_Filter interface {
	isObjectMetadataReportOptions_Filter()
}

type ObjectMetadataReportOptions_StorageFilters struct {
	// Cloud Storage as the storage system.
	StorageFilters *CloudStorageFilters `protobuf:"bytes,2,opt,name=storage_filters,json=storageFilters,proto3,oneof"`
}

func (*ObjectMetadataReportOptions_StorageFilters) isObjectMetadataReportOptions_Filter() {}

type isObjectMetadataReportOptions_DestinationOptions interface {
	isObjectMetadataReportOptions_DestinationOptions()
}

type ObjectMetadataReportOptions_StorageDestinationOptions struct {
	// Cloud Storage as the storage system.
	StorageDestinationOptions *CloudStorageDestinationOptions `protobuf:"bytes,3,opt,name=storage_destination_options,json=storageDestinationOptions,proto3,oneof"`
}

func (*ObjectMetadataReportOptions_StorageDestinationOptions) isObjectMetadataReportOptions_DestinationOptions() {
}

// Message describing ReportConfig object. ReportConfig is the configuration to
// generate reports.
// See
// https://cloud.google.com/storage/docs/insights/using-inventory-reports#create-config-rest
// for more details on how to set various fields.
// Next ID: 12
type ReportConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of resource. It will be of form
	// projects/<project>/locations/<location>/reportConfigs/<report-config-id>.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. [Output only] Create time stamp
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. [Output only] Update time stamp
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// The frequency of report generation.
	FrequencyOptions *FrequencyOptions `protobuf:"bytes,5,opt,name=frequency_options,json=frequencyOptions,proto3" json:"frequency_options,omitempty"`
	// Format in which report will be published.
	//
	// Types that are assignable to ReportFormat:
	//
	//	*ReportConfig_CsvOptions
	//	*ReportConfig_ParquetOptions
	ReportFormat isReportConfig_ReportFormat `protobuf_oneof:"report_format"`
	// Configuration options for report contents.
	//
	// Types that are assignable to ReportKind:
	//
	//	*ReportConfig_ObjectMetadataReportOptions
	ReportKind isReportConfig_ReportKind `protobuf_oneof:"report_kind"`
	// Labels as key value pairs
	Labels map[string]string `protobuf:"bytes,10,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// User provided display name which can be empty and limited to 256 characters
	// that is editable.
	DisplayName string `protobuf:"bytes,11,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
}

func (x *ReportConfig) Reset() {
	*x = ReportConfig{}
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportConfig) ProtoMessage() {}

func (x *ReportConfig) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportConfig.ProtoReflect.Descriptor instead.
func (*ReportConfig) Descriptor() ([]byte, []int) {
	return file_google_cloud_storageinsights_v1_storageinsights_proto_rawDescGZIP(), []int{17}
}

func (x *ReportConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReportConfig) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ReportConfig) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *ReportConfig) GetFrequencyOptions() *FrequencyOptions {
	if x != nil {
		return x.FrequencyOptions
	}
	return nil
}

func (m *ReportConfig) GetReportFormat() isReportConfig_ReportFormat {
	if m != nil {
		return m.ReportFormat
	}
	return nil
}

func (x *ReportConfig) GetCsvOptions() *CSVOptions {
	if x, ok := x.GetReportFormat().(*ReportConfig_CsvOptions); ok {
		return x.CsvOptions
	}
	return nil
}

func (x *ReportConfig) GetParquetOptions() *ParquetOptions {
	if x, ok := x.GetReportFormat().(*ReportConfig_ParquetOptions); ok {
		return x.ParquetOptions
	}
	return nil
}

func (m *ReportConfig) GetReportKind() isReportConfig_ReportKind {
	if m != nil {
		return m.ReportKind
	}
	return nil
}

func (x *ReportConfig) GetObjectMetadataReportOptions() *ObjectMetadataReportOptions {
	if x, ok := x.GetReportKind().(*ReportConfig_ObjectMetadataReportOptions); ok {
		return x.ObjectMetadataReportOptions
	}
	return nil
}

func (x *ReportConfig) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ReportConfig) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

type isReportConfig_ReportFormat interface {
	isReportConfig_ReportFormat()
}

type ReportConfig_CsvOptions struct {
	// Options for CSV formatted reports.
	CsvOptions *CSVOptions `protobuf:"bytes,6,opt,name=csv_options,json=csvOptions,proto3,oneof"`
}

type ReportConfig_ParquetOptions struct {
	// Options for Parquet formatted reports.
	ParquetOptions *ParquetOptions `protobuf:"bytes,7,opt,name=parquet_options,json=parquetOptions,proto3,oneof"`
}

func (*ReportConfig_CsvOptions) isReportConfig_ReportFormat() {}

func (*ReportConfig_ParquetOptions) isReportConfig_ReportFormat() {}

type isReportConfig_ReportKind interface {
	isReportConfig_ReportKind()
}

type ReportConfig_ObjectMetadataReportOptions struct {
	// Report for exporting object metadata.
	ObjectMetadataReportOptions *ObjectMetadataReportOptions `protobuf:"bytes,8,opt,name=object_metadata_report_options,json=objectMetadataReportOptions,proto3,oneof"`
}

func (*ReportConfig_ObjectMetadataReportOptions) isReportConfig_ReportKind() {}

// Identity lets the user provide the type of identity to use, and outputs
// the identity string that can be used for IAM policy changes.
type Identity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Name of the identity.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Type of identity to use for the datasetConfig.
	Type Identity_IdentityType `protobuf:"varint,2,opt,name=type,proto3,enum=google.cloud.storageinsights.v1.Identity_IdentityType" json:"type,omitempty"`
}

func (x *Identity) Reset() {
	*x = Identity{}
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Identity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity) ProtoMessage() {}

func (x *Identity) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity.ProtoReflect.Descriptor instead.
func (*Identity) Descriptor() ([]byte, []int) {
	return file_google_cloud_storageinsights_v1_storageinsights_proto_rawDescGZIP(), []int{18}
}

func (x *Identity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Identity) GetType() Identity_IdentityType {
	if x != nil {
		return x.Type
	}
	return Identity_IDENTITY_TYPE_UNSPECIFIED
}

// Message describing the dataset configuration properties. For more
// information, see [Dataset configuration
// properties](https://cloud.google.com/storage/docs/insights/datasets#dataset-config).
type DatasetConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier. name of resource
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. The UTC time at which the dataset configuration was created.
	// This is auto-populated.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The UTC time at which the dataset configuration was last
	// updated. This is auto-populated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Labels as key value pairs
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Output only. System generated unique identifier for the resource.
	Uid string `protobuf:"bytes,5,opt,name=uid,proto3" json:"uid,omitempty"`
	// Optional. Organization resource ID that the source projects should belong
	// to. Projects that do not belong to the provided organization are not
	// considered when creating the dataset.
	OrganizationNumber int64 `protobuf:"varint,22,opt,name=organization_number,json=organizationNumber,proto3" json:"organization_number,omitempty"`
	// Defines the options for providing source identifiers for the dataset.
	//
	// Types that are assignable to SourceOptions:
	//
	//	*DatasetConfig_SourceProjects_
	//	*DatasetConfig_SourceFolders_
	//	*DatasetConfig_OrganizationScope
	//	*DatasetConfig_CloudStorageObjectPath
	SourceOptions isDatasetConfig_SourceOptions `protobuf_oneof:"source_options"`
	// Cloud Storage locations to include or exclude.
	//
	// Types that are assignable to CloudStorageLocations:
	//
	//	*DatasetConfig_IncludeCloudStorageLocations
	//	*DatasetConfig_ExcludeCloudStorageLocations
	CloudStorageLocations isDatasetConfig_CloudStorageLocations `protobuf_oneof:"cloud_storage_locations"`
	// Cloud Storage buckets to include or exclude.
	//
	// Types that are assignable to CloudStorageBuckets:
	//
	//	*DatasetConfig_IncludeCloudStorageBuckets
	//	*DatasetConfig_ExcludeCloudStorageBuckets
	CloudStorageBuckets isDatasetConfig_CloudStorageBuckets `protobuf_oneof:"cloud_storage_buckets"`
	// If set to `true`, the request includes all the newly created buckets in the
	// dataset that meet the inclusion and exclusion rules.
	IncludeNewlyCreatedBuckets bool `protobuf:"varint,12,opt,name=include_newly_created_buckets,json=includeNewlyCreatedBuckets,proto3" json:"include_newly_created_buckets,omitempty"`
	// Optional. If set to `false`, then all the permission checks must be
	// successful before the system can start ingesting data. This field can only
	// be updated before the system ingests data for the first time. Any attempt
	// to modify the field after data ingestion starts results in an error.
	//
	// Deprecated: Marked as deprecated in google/cloud/storageinsights/v1/storageinsights.proto.
	SkipVerificationAndIngest bool `protobuf:"varint,19,opt,name=skip_verification_and_ingest,json=skipVerificationAndIngest,proto3" json:"skip_verification_and_ingest,omitempty"`
	// Number of days of history that must be retained.
	RetentionPeriodDays int32 `protobuf:"varint,14,opt,name=retention_period_days,json=retentionPeriodDays,proto3" json:"retention_period_days,omitempty"`
	// Details of the linked dataset.
	Link *DatasetConfig_Link `protobuf:"bytes,15,opt,name=link,proto3" json:"link,omitempty"`
	// Identity used by this `datasetConfig`.
	Identity *Identity `protobuf:"bytes,16,opt,name=identity,proto3" json:"identity,omitempty"`
	// Output only. Status of the `datasetConfig`.
	Status *status.Status `protobuf:"bytes,17,opt,name=status,proto3" json:"status,omitempty"`
	// Output only. State of the `datasetConfig`.
	DatasetConfigState DatasetConfig_ConfigState `protobuf:"varint,18,opt,name=dataset_config_state,json=datasetConfigState,proto3,enum=google.cloud.storageinsights.v1.DatasetConfig_ConfigState" json:"dataset_config_state,omitempty"`
	// Optional. A user-provided description for the dataset configuration.
	//
	// Maximum length: 256 characters.
	Description string `protobuf:"bytes,20,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *DatasetConfig) Reset() {
	*x = DatasetConfig{}
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatasetConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetConfig) ProtoMessage() {}

func (x *DatasetConfig) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetConfig.ProtoReflect.Descriptor instead.
func (*DatasetConfig) Descriptor() ([]byte, []int) {
	return file_google_cloud_storageinsights_v1_storageinsights_proto_rawDescGZIP(), []int{19}
}

func (x *DatasetConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DatasetConfig) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *DatasetConfig) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *DatasetConfig) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *DatasetConfig) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *DatasetConfig) GetOrganizationNumber() int64 {
	if x != nil {
		return x.OrganizationNumber
	}
	return 0
}

func (m *DatasetConfig) GetSourceOptions() isDatasetConfig_SourceOptions {
	if m != nil {
		return m.SourceOptions
	}
	return nil
}

func (x *DatasetConfig) GetSourceProjects() *DatasetConfig_SourceProjects {
	if x, ok := x.GetSourceOptions().(*DatasetConfig_SourceProjects_); ok {
		return x.SourceProjects
	}
	return nil
}

func (x *DatasetConfig) GetSourceFolders() *DatasetConfig_SourceFolders {
	if x, ok := x.GetSourceOptions().(*DatasetConfig_SourceFolders_); ok {
		return x.SourceFolders
	}
	return nil
}

func (x *DatasetConfig) GetOrganizationScope() bool {
	if x, ok := x.GetSourceOptions().(*DatasetConfig_OrganizationScope); ok {
		return x.OrganizationScope
	}
	return false
}

func (x *DatasetConfig) GetCloudStorageObjectPath() string {
	if x, ok := x.GetSourceOptions().(*DatasetConfig_CloudStorageObjectPath); ok {
		return x.CloudStorageObjectPath
	}
	return ""
}

func (m *DatasetConfig) GetCloudStorageLocations() isDatasetConfig_CloudStorageLocations {
	if m != nil {
		return m.CloudStorageLocations
	}
	return nil
}

func (x *DatasetConfig) GetIncludeCloudStorageLocations() *DatasetConfig_CloudStorageLocations {
	if x, ok := x.GetCloudStorageLocations().(*DatasetConfig_IncludeCloudStorageLocations); ok {
		return x.IncludeCloudStorageLocations
	}
	return nil
}

func (x *DatasetConfig) GetExcludeCloudStorageLocations() *DatasetConfig_CloudStorageLocations {
	if x, ok := x.GetCloudStorageLocations().(*DatasetConfig_ExcludeCloudStorageLocations); ok {
		return x.ExcludeCloudStorageLocations
	}
	return nil
}

func (m *DatasetConfig) GetCloudStorageBuckets() isDatasetConfig_CloudStorageBuckets {
	if m != nil {
		return m.CloudStorageBuckets
	}
	return nil
}

func (x *DatasetConfig) GetIncludeCloudStorageBuckets() *DatasetConfig_CloudStorageBuckets {
	if x, ok := x.GetCloudStorageBuckets().(*DatasetConfig_IncludeCloudStorageBuckets); ok {
		return x.IncludeCloudStorageBuckets
	}
	return nil
}

func (x *DatasetConfig) GetExcludeCloudStorageBuckets() *DatasetConfig_CloudStorageBuckets {
	if x, ok := x.GetCloudStorageBuckets().(*DatasetConfig_ExcludeCloudStorageBuckets); ok {
		return x.ExcludeCloudStorageBuckets
	}
	return nil
}

func (x *DatasetConfig) GetIncludeNewlyCreatedBuckets() bool {
	if x != nil {
		return x.IncludeNewlyCreatedBuckets
	}
	return false
}

// Deprecated: Marked as deprecated in google/cloud/storageinsights/v1/storageinsights.proto.
func (x *DatasetConfig) GetSkipVerificationAndIngest() bool {
	if x != nil {
		return x.SkipVerificationAndIngest
	}
	return false
}

func (x *DatasetConfig) GetRetentionPeriodDays() int32 {
	if x != nil {
		return x.RetentionPeriodDays
	}
	return 0
}

func (x *DatasetConfig) GetLink() *DatasetConfig_Link {
	if x != nil {
		return x.Link
	}
	return nil
}

func (x *DatasetConfig) GetIdentity() *Identity {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *DatasetConfig) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DatasetConfig) GetDatasetConfigState() DatasetConfig_ConfigState {
	if x != nil {
		return x.DatasetConfigState
	}
	return DatasetConfig_CONFIG_STATE_UNSPECIFIED
}

func (x *DatasetConfig) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type isDatasetConfig_SourceOptions interface {
	isDatasetConfig_SourceOptions()
}

type DatasetConfig_SourceProjects_ struct {
	// Defines the options for providing source projects for the dataset.
	SourceProjects *DatasetConfig_SourceProjects `protobuf:"bytes,7,opt,name=source_projects,json=sourceProjects,proto3,oneof"`
}

type DatasetConfig_SourceFolders_ struct {
	// Defines the options for providing source folders for the dataset.
	SourceFolders *DatasetConfig_SourceFolders `protobuf:"bytes,24,opt,name=source_folders,json=sourceFolders,proto3,oneof"`
}

type DatasetConfig_OrganizationScope struct {
	// Defines the options for providing a source organization for the dataset.
	OrganizationScope bool `protobuf:"varint,25,opt,name=organization_scope,json=organizationScope,proto3,oneof"`
}

type DatasetConfig_CloudStorageObjectPath struct {
	// Input only. Cloud Storage object path containing a list of
	// project or folder numbers to include in the dataset;
	// it cannot contain a mix of project and folders.
	//
	// The object must be a text file where each line has one of the following
	// entries:
	//
	// - Project number, formatted as `projects/{project_number}`, for example,
	// `projects/1234567890`.
	// - Folder identifier, formatted as `folders/{folder_number}`, for example,
	// `folders/9876543210`.
	// Path must be in the format `gs://{bucket_name}/{object_name}`.
	CloudStorageObjectPath string `protobuf:"bytes,21,opt,name=cloud_storage_object_path,json=cloudStorageObjectPath,proto3,oneof"`
}

func (*DatasetConfig_SourceProjects_) isDatasetConfig_SourceOptions() {}

func (*DatasetConfig_SourceFolders_) isDatasetConfig_SourceOptions() {}

func (*DatasetConfig_OrganizationScope) isDatasetConfig_SourceOptions() {}

func (*DatasetConfig_CloudStorageObjectPath) isDatasetConfig_SourceOptions() {}

type isDatasetConfig_CloudStorageLocations interface {
	isDatasetConfig_CloudStorageLocations()
}

type DatasetConfig_IncludeCloudStorageLocations struct {
	IncludeCloudStorageLocations *DatasetConfig_CloudStorageLocations `protobuf:"bytes,8,opt,name=include_cloud_storage_locations,json=includeCloudStorageLocations,proto3,oneof"`
}

type DatasetConfig_ExcludeCloudStorageLocations struct {
	ExcludeCloudStorageLocations *DatasetConfig_CloudStorageLocations `protobuf:"bytes,9,opt,name=exclude_cloud_storage_locations,json=excludeCloudStorageLocations,proto3,oneof"`
}

func (*DatasetConfig_IncludeCloudStorageLocations) isDatasetConfig_CloudStorageLocations() {}

func (*DatasetConfig_ExcludeCloudStorageLocations) isDatasetConfig_CloudStorageLocations() {}

type isDatasetConfig_CloudStorageBuckets interface {
	isDatasetConfig_CloudStorageBuckets()
}

type DatasetConfig_IncludeCloudStorageBuckets struct {
	IncludeCloudStorageBuckets *DatasetConfig_CloudStorageBuckets `protobuf:"bytes,10,opt,name=include_cloud_storage_buckets,json=includeCloudStorageBuckets,proto3,oneof"`
}

type DatasetConfig_ExcludeCloudStorageBuckets struct {
	ExcludeCloudStorageBuckets *DatasetConfig_CloudStorageBuckets `protobuf:"bytes,11,opt,name=exclude_cloud_storage_buckets,json=excludeCloudStorageBuckets,proto3,oneof"`
}

func (*DatasetConfig_IncludeCloudStorageBuckets) isDatasetConfig_CloudStorageBuckets() {}

func (*DatasetConfig_ExcludeCloudStorageBuckets) isDatasetConfig_CloudStorageBuckets() {}

// Request message for
// [`ListDatasetConfigs`][google.cloud.storageinsights.v1.StorageInsights.ListDatasetConfigs]
type ListDatasetConfigsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Parent value for ListDatasetConfigsRequest
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Requested page size. Server might return fewer items than requested.
	// If unspecified, server picks an appropriate default.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A token identifying a page of results the server should return.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Filtering results
	Filter string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	// Hint for how to order the results
	OrderBy string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListDatasetConfigsRequest) Reset() {
	*x = ListDatasetConfigsRequest{}
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDatasetConfigsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDatasetConfigsRequest) ProtoMessage() {}

func (x *ListDatasetConfigsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDatasetConfigsRequest.ProtoReflect.Descriptor instead.
func (*ListDatasetConfigsRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_storageinsights_v1_storageinsights_proto_rawDescGZIP(), []int{20}
}

func (x *ListDatasetConfigsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListDatasetConfigsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListDatasetConfigsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListDatasetConfigsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListDatasetConfigsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

// Response message for
// [`ListDatasetConfigs`][google.cloud.storageinsights.v1.StorageInsights.ListDatasetConfigs]
type ListDatasetConfigsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of `DatasetConfigs`
	DatasetConfigs []*DatasetConfig `protobuf:"bytes,1,rep,name=dataset_configs,json=datasetConfigs,proto3" json:"dataset_configs,omitempty"`
	// A token identifying a page of results the server should return.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Locations that could not be reached.
	Unreachable []string `protobuf:"bytes,3,rep,name=unreachable,proto3" json:"unreachable,omitempty"`
}

func (x *ListDatasetConfigsResponse) Reset() {
	*x = ListDatasetConfigsResponse{}
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDatasetConfigsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDatasetConfigsResponse) ProtoMessage() {}

func (x *ListDatasetConfigsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDatasetConfigsResponse.ProtoReflect.Descriptor instead.
func (*ListDatasetConfigsResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_storageinsights_v1_storageinsights_proto_rawDescGZIP(), []int{21}
}

func (x *ListDatasetConfigsResponse) GetDatasetConfigs() []*DatasetConfig {
	if x != nil {
		return x.DatasetConfigs
	}
	return nil
}

func (x *ListDatasetConfigsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListDatasetConfigsResponse) GetUnreachable() []string {
	if x != nil {
		return x.Unreachable
	}
	return nil
}

// Request message for
// [`GetDatasetConfig`][google.cloud.storageinsights.v1.StorageInsights.GetDatasetConfig]
type GetDatasetConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Name of the resource
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetDatasetConfigRequest) Reset() {
	*x = GetDatasetConfigRequest{}
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDatasetConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatasetConfigRequest) ProtoMessage() {}

func (x *GetDatasetConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatasetConfigRequest.ProtoReflect.Descriptor instead.
func (*GetDatasetConfigRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_storageinsights_v1_storageinsights_proto_rawDescGZIP(), []int{22}
}

func (x *GetDatasetConfigRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Request message for
// [`CreateDatasetConfig`][google.cloud.storageinsights.v1.StorageInsights.CreateDatasetConfig]
type CreateDatasetConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Value for parent.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Required. ID of the requesting object.
	// If auto-generating ID is enabled on the server-side, remove this field and
	// `dataset_config_id` from the method_signature of Create RPC
	// Note: The value should not contain any hyphens.
	DatasetConfigId string `protobuf:"bytes,2,opt,name=dataset_config_id,json=datasetConfigId,proto3" json:"dataset_config_id,omitempty"`
	// Required. The resource being created
	DatasetConfig *DatasetConfig `protobuf:"bytes,3,opt,name=dataset_config,json=datasetConfig,proto3" json:"dataset_config,omitempty"`
	// Optional. A unique identifier for your request.
	// Specify the request ID if you need to retry the request.
	// If you retry the request with the same ID within 60 minutes, the server
	// ignores the request if it has already completed the original request.
	//
	// For example, if your initial request times out and you retry the request
	// using the same request ID, the server recognizes the original request and
	// does not process the new request.
	//
	// The request ID must be a valid UUID and cannot be a zero UUID
	// (00000000-0000-0000-0000-000000000000).
	RequestId string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateDatasetConfigRequest) Reset() {
	*x = CreateDatasetConfigRequest{}
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDatasetConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDatasetConfigRequest) ProtoMessage() {}

func (x *CreateDatasetConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDatasetConfigRequest.ProtoReflect.Descriptor instead.
func (*CreateDatasetConfigRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_storageinsights_v1_storageinsights_proto_rawDescGZIP(), []int{23}
}

func (x *CreateDatasetConfigRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateDatasetConfigRequest) GetDatasetConfigId() string {
	if x != nil {
		return x.DatasetConfigId
	}
	return ""
}

func (x *CreateDatasetConfigRequest) GetDatasetConfig() *DatasetConfig {
	if x != nil {
		return x.DatasetConfig
	}
	return nil
}

func (x *CreateDatasetConfigRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

// Request message for
// [`UpdateDatasetConfig`][google.cloud.storageinsights.v1.StorageInsights.UpdateDatasetConfig]
type UpdateDatasetConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Field mask is used to specify the fields to be overwritten in the
	// `DatasetConfig` resource by the update.
	// The fields specified in the `update_mask` are relative to the resource, not
	// the full request. A field is overwritten if it is in the mask. If the
	// user does not provide a mask then it returns an "Invalid Argument" error.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,1,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// Required. The resource being updated
	DatasetConfig *DatasetConfig `protobuf:"bytes,2,opt,name=dataset_config,json=datasetConfig,proto3" json:"dataset_config,omitempty"`
	// Optional. A unique identifier for your request.
	// Specify the request ID if you need to retry the request.
	// If you retry the request with the same ID within 60 minutes, the server
	// ignores the request if it has already completed the original request.
	//
	// For example, if your initial request times out and you retry the request
	// using the same request ID, the server recognizes the original request and
	// does not process the new request.
	//
	// The request ID must be a valid UUID and cannot be a zero UUID
	// (00000000-0000-0000-0000-000000000000).
	RequestId string `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *UpdateDatasetConfigRequest) Reset() {
	*x = UpdateDatasetConfigRequest{}
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDatasetConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDatasetConfigRequest) ProtoMessage() {}

func (x *UpdateDatasetConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDatasetConfigRequest.ProtoReflect.Descriptor instead.
func (*UpdateDatasetConfigRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_storageinsights_v1_storageinsights_proto_rawDescGZIP(), []int{24}
}

func (x *UpdateDatasetConfigRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateDatasetConfigRequest) GetDatasetConfig() *DatasetConfig {
	if x != nil {
		return x.DatasetConfig
	}
	return nil
}

func (x *UpdateDatasetConfigRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

// Request message for
// [`DeleteDatasetConfig`][google.cloud.storageinsights.v1.StorageInsights.DeleteDatasetConfig]
type DeleteDatasetConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Name of the resource
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. A unique identifier for your request.
	// Specify the request ID if you need to retry the request.
	// If you retry the request with the same ID within 60 minutes, the server
	// ignores the request if it has already completed the original request.
	//
	// For example, if your initial request times out and you retry the request
	// using the same request ID, the server recognizes the original request and
	// does not process the new request.
	//
	// The request ID must be a valid UUID and cannot be a zero UUID
	// (00000000-0000-0000-0000-000000000000).
	RequestId string `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *DeleteDatasetConfigRequest) Reset() {
	*x = DeleteDatasetConfigRequest{}
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDatasetConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDatasetConfigRequest) ProtoMessage() {}

func (x *DeleteDatasetConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDatasetConfigRequest.ProtoReflect.Descriptor instead.
func (*DeleteDatasetConfigRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_storageinsights_v1_storageinsights_proto_rawDescGZIP(), []int{25}
}

func (x *DeleteDatasetConfigRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteDatasetConfigRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

// Request message for
// [`LinkDataset`][google.cloud.storageinsights.v1.StorageInsights.LinkDataset]
type LinkDatasetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Name of the resource
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *LinkDatasetRequest) Reset() {
	*x = LinkDatasetRequest{}
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinkDatasetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkDatasetRequest) ProtoMessage() {}

func (x *LinkDatasetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkDatasetRequest.ProtoReflect.Descriptor instead.
func (*LinkDatasetRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_storageinsights_v1_storageinsights_proto_rawDescGZIP(), []int{26}
}

func (x *LinkDatasetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Response message for
// [`LinkDataset`][google.cloud.storageinsights.v1.StorageInsights.LinkDataset]
type LinkDatasetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LinkDatasetResponse) Reset() {
	*x = LinkDatasetResponse{}
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinkDatasetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkDatasetResponse) ProtoMessage() {}

func (x *LinkDatasetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkDatasetResponse.ProtoReflect.Descriptor instead.
func (*LinkDatasetResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_storageinsights_v1_storageinsights_proto_rawDescGZIP(), []int{27}
}

// Request message for
// [`UnlinkDataset`][google.cloud.storageinsights.v1.StorageInsights.UnlinkDataset]
type UnlinkDatasetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Name of the resource
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UnlinkDatasetRequest) Reset() {
	*x = UnlinkDatasetRequest{}
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnlinkDatasetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlinkDatasetRequest) ProtoMessage() {}

func (x *UnlinkDatasetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlinkDatasetRequest.ProtoReflect.Descriptor instead.
func (*UnlinkDatasetRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_storageinsights_v1_storageinsights_proto_rawDescGZIP(), []int{28}
}

func (x *UnlinkDatasetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Metadata that helps discover which resources are available in a location.
type LocationMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true, `storageinsights.googleapis.com/ReportConfig` resource is
	// available at the location.
	ReportConfigAvailable bool `protobuf:"varint,1,opt,name=report_config_available,json=reportConfigAvailable,proto3" json:"report_config_available,omitempty"`
	// If true, `storageinsights.googleapis.com/DatasetConfig` resource is
	// available at the location.
	DatasetConfigAvailable bool `protobuf:"varint,2,opt,name=dataset_config_available,json=datasetConfigAvailable,proto3" json:"dataset_config_available,omitempty"`
}

func (x *LocationMetadata) Reset() {
	*x = LocationMetadata{}
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocationMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationMetadata) ProtoMessage() {}

func (x *LocationMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationMetadata.ProtoReflect.Descriptor instead.
func (*LocationMetadata) Descriptor() ([]byte, []int) {
	return file_google_cloud_storageinsights_v1_storageinsights_proto_rawDescGZIP(), []int{29}
}

func (x *LocationMetadata) GetReportConfigAvailable() bool {
	if x != nil {
		return x.ReportConfigAvailable
	}
	return false
}

func (x *LocationMetadata) GetDatasetConfigAvailable() bool {
	if x != nil {
		return x.DatasetConfigAvailable
	}
	return false
}

// Different metrics associated with the generated report.
type ReportDetail_Metrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Count of Cloud Storage objects which are part of the report.
	ProcessedRecordsCount int64 `protobuf:"varint,1,opt,name=processed_records_count,json=processedRecordsCount,proto3" json:"processed_records_count,omitempty"`
}

func (x *ReportDetail_Metrics) Reset() {
	*x = ReportDetail_Metrics{}
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportDetail_Metrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportDetail_Metrics) ProtoMessage() {}

func (x *ReportDetail_Metrics) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportDetail_Metrics.ProtoReflect.Descriptor instead.
func (*ReportDetail_Metrics) Descriptor() ([]byte, []int) {
	return file_google_cloud_storageinsights_v1_storageinsights_proto_rawDescGZIP(), []int{6, 0}
}

func (x *ReportDetail_Metrics) GetProcessedRecordsCount() int64 {
	if x != nil {
		return x.ProcessedRecordsCount
	}
	return 0
}

// Collection of project numbers
type DatasetConfig_SourceProjects struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectNumbers []int64 `protobuf:"varint,1,rep,packed,name=project_numbers,json=projectNumbers,proto3" json:"project_numbers,omitempty"`
}

func (x *DatasetConfig_SourceProjects) Reset() {
	*x = DatasetConfig_SourceProjects{}
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatasetConfig_SourceProjects) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetConfig_SourceProjects) ProtoMessage() {}

func (x *DatasetConfig_SourceProjects) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetConfig_SourceProjects.ProtoReflect.Descriptor instead.
func (*DatasetConfig_SourceProjects) Descriptor() ([]byte, []int) {
	return file_google_cloud_storageinsights_v1_storageinsights_proto_rawDescGZIP(), []int{19, 0}
}

func (x *DatasetConfig_SourceProjects) GetProjectNumbers() []int64 {
	if x != nil {
		return x.ProjectNumbers
	}
	return nil
}

// Specifies a set of folders to include in the dataset
type DatasetConfig_SourceFolders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The list of folder numbers to include in the dataset.
	FolderNumbers []int64 `protobuf:"varint,1,rep,packed,name=folder_numbers,json=folderNumbers,proto3" json:"folder_numbers,omitempty"`
}

func (x *DatasetConfig_SourceFolders) Reset() {
	*x = DatasetConfig_SourceFolders{}
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatasetConfig_SourceFolders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetConfig_SourceFolders) ProtoMessage() {}

func (x *DatasetConfig_SourceFolders) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetConfig_SourceFolders.ProtoReflect.Descriptor instead.
func (*DatasetConfig_SourceFolders) Descriptor() ([]byte, []int) {
	return file_google_cloud_storageinsights_v1_storageinsights_proto_rawDescGZIP(), []int{19, 1}
}

func (x *DatasetConfig_SourceFolders) GetFolderNumbers() []int64 {
	if x != nil {
		return x.FolderNumbers
	}
	return nil
}

// Collection of Cloud Storage locations.
type DatasetConfig_CloudStorageLocations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locations []string `protobuf:"bytes,1,rep,name=locations,proto3" json:"locations,omitempty"`
}

func (x *DatasetConfig_CloudStorageLocations) Reset() {
	*x = DatasetConfig_CloudStorageLocations{}
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatasetConfig_CloudStorageLocations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetConfig_CloudStorageLocations) ProtoMessage() {}

func (x *DatasetConfig_CloudStorageLocations) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetConfig_CloudStorageLocations.ProtoReflect.Descriptor instead.
func (*DatasetConfig_CloudStorageLocations) Descriptor() ([]byte, []int) {
	return file_google_cloud_storageinsights_v1_storageinsights_proto_rawDescGZIP(), []int{19, 2}
}

func (x *DatasetConfig_CloudStorageLocations) GetLocations() []string {
	if x != nil {
		return x.Locations
	}
	return nil
}

// Collection of Cloud Storage buckets.
type DatasetConfig_CloudStorageBuckets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudStorageBuckets []*DatasetConfig_CloudStorageBuckets_CloudStorageBucket `protobuf:"bytes,1,rep,name=cloud_storage_buckets,json=cloudStorageBuckets,proto3" json:"cloud_storage_buckets,omitempty"`
}

func (x *DatasetConfig_CloudStorageBuckets) Reset() {
	*x = DatasetConfig_CloudStorageBuckets{}
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatasetConfig_CloudStorageBuckets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetConfig_CloudStorageBuckets) ProtoMessage() {}

func (x *DatasetConfig_CloudStorageBuckets) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetConfig_CloudStorageBuckets.ProtoReflect.Descriptor instead.
func (*DatasetConfig_CloudStorageBuckets) Descriptor() ([]byte, []int) {
	return file_google_cloud_storageinsights_v1_storageinsights_proto_rawDescGZIP(), []int{19, 3}
}

func (x *DatasetConfig_CloudStorageBuckets) GetCloudStorageBuckets() []*DatasetConfig_CloudStorageBuckets_CloudStorageBucket {
	if x != nil {
		return x.CloudStorageBuckets
	}
	return nil
}

// Defines the details about the linked dataset.
type DatasetConfig_Link struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Dataset name for linked dataset.
	Dataset string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	// Output only. State of the linked dataset.
	Linked bool `protobuf:"varint,2,opt,name=linked,proto3" json:"linked,omitempty"`
}

func (x *DatasetConfig_Link) Reset() {
	*x = DatasetConfig_Link{}
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatasetConfig_Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetConfig_Link) ProtoMessage() {}

func (x *DatasetConfig_Link) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetConfig_Link.ProtoReflect.Descriptor instead.
func (*DatasetConfig_Link) Descriptor() ([]byte, []int) {
	return file_google_cloud_storageinsights_v1_storageinsights_proto_rawDescGZIP(), []int{19, 4}
}

func (x *DatasetConfig_Link) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *DatasetConfig_Link) GetLinked() bool {
	if x != nil {
		return x.Linked
	}
	return false
}

// Provides a summary of the bucket level error statistics.
type DatasetConfig_BucketErrors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Count of successfully validated buckets.
	ValidatedCount int64 `protobuf:"varint,1,opt,name=validated_count,json=validatedCount,proto3" json:"validated_count,omitempty"`
	// Optional. Count of buckets with permission denied errors.
	PermissionDeniedCount int64 `protobuf:"varint,2,opt,name=permission_denied_count,json=permissionDeniedCount,proto3" json:"permission_denied_count,omitempty"`
	// Optional. Subset of bucket names that have permission denied.
	PermissionDeniedBucketIds []string `protobuf:"bytes,3,rep,name=permission_denied_bucket_ids,json=permissionDeniedBucketIds,proto3" json:"permission_denied_bucket_ids,omitempty"`
	// Optional. Count of buckets that are not subscribed to Storage
	// Intelligence.
	//
	// Deprecated: Marked as deprecated in google/cloud/storageinsights/v1/storageinsights.proto.
	NonManagementHubEntitledCount int64 `protobuf:"varint,5,opt,name=non_management_hub_entitled_count,json=nonManagementHubEntitledCount,proto3" json:"non_management_hub_entitled_count,omitempty"`
	// Optional. Number of buckets that encountered internal errors during the
	// validation process. These buckets are automatically retried in subsequent
	// validation attempts.
	InternalErrorCount int64 `protobuf:"varint,4,opt,name=internal_error_count,json=internalErrorCount,proto3" json:"internal_error_count,omitempty"`
	// Optional. Count of buckets that are not subscribed to Storage
	// Intelligence.
	NonStorageIntelligenceEntitledCount int64 `protobuf:"varint,7,opt,name=non_storage_intelligence_entitled_count,json=nonStorageIntelligenceEntitledCount,proto3" json:"non_storage_intelligence_entitled_count,omitempty"`
	// Optional. Subset of bucket names that are not subscribed to Storage
	// Intelligence.
	NonStorageIntelligenceEntitledBucketIds []string `protobuf:"bytes,8,rep,name=non_storage_intelligence_entitled_bucket_ids,json=nonStorageIntelligenceEntitledBucketIds,proto3" json:"non_storage_intelligence_entitled_bucket_ids,omitempty"`
}

func (x *DatasetConfig_BucketErrors) Reset() {
	*x = DatasetConfig_BucketErrors{}
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatasetConfig_BucketErrors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetConfig_BucketErrors) ProtoMessage() {}

func (x *DatasetConfig_BucketErrors) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetConfig_BucketErrors.ProtoReflect.Descriptor instead.
func (*DatasetConfig_BucketErrors) Descriptor() ([]byte, []int) {
	return file_google_cloud_storageinsights_v1_storageinsights_proto_rawDescGZIP(), []int{19, 5}
}

func (x *DatasetConfig_BucketErrors) GetValidatedCount() int64 {
	if x != nil {
		return x.ValidatedCount
	}
	return 0
}

func (x *DatasetConfig_BucketErrors) GetPermissionDeniedCount() int64 {
	if x != nil {
		return x.PermissionDeniedCount
	}
	return 0
}

func (x *DatasetConfig_BucketErrors) GetPermissionDeniedBucketIds() []string {
	if x != nil {
		return x.PermissionDeniedBucketIds
	}
	return nil
}

// Deprecated: Marked as deprecated in google/cloud/storageinsights/v1/storageinsights.proto.
func (x *DatasetConfig_BucketErrors) GetNonManagementHubEntitledCount() int64 {
	if x != nil {
		return x.NonManagementHubEntitledCount
	}
	return 0
}

func (x *DatasetConfig_BucketErrors) GetInternalErrorCount() int64 {
	if x != nil {
		return x.InternalErrorCount
	}
	return 0
}

func (x *DatasetConfig_BucketErrors) GetNonStorageIntelligenceEntitledCount() int64 {
	if x != nil {
		return x.NonStorageIntelligenceEntitledCount
	}
	return 0
}

func (x *DatasetConfig_BucketErrors) GetNonStorageIntelligenceEntitledBucketIds() []string {
	if x != nil {
		return x.NonStorageIntelligenceEntitledBucketIds
	}
	return nil
}

// Provides a summary of the project level error statistics.
type DatasetConfig_ProjectErrors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Count of successfully validated projects.
	ValidatedCount *int64 `protobuf:"varint,1,opt,name=validated_count,json=validatedCount,proto3,oneof" json:"validated_count,omitempty"`
	// Optional. Count of projects which are not in the same organization.
	OutsideOrgErrorCount *int64 `protobuf:"varint,2,opt,name=outside_org_error_count,json=outsideOrgErrorCount,proto3,oneof" json:"outside_org_error_count,omitempty"`
	// Optional. Subset of project numbers which are not in the same
	// organization.
	OutsideOrgProjectNumbers []int64 `protobuf:"varint,3,rep,packed,name=outside_org_project_numbers,json=outsideOrgProjectNumbers,proto3" json:"outside_org_project_numbers,omitempty"`
	// Optional. Count of projects that are not subscribed to Storage
	// Intelligence.
	//
	// Deprecated: Marked as deprecated in google/cloud/storageinsights/v1/storageinsights.proto.
	NonManagementHubEntitledErrorCount *int64 `protobuf:"varint,7,opt,name=non_management_hub_entitled_error_count,json=nonManagementHubEntitledErrorCount,proto3,oneof" json:"non_management_hub_entitled_error_count,omitempty"`
	// Optional. Subset of project numbers that are not subscribed to Storage
	// Intelligence.
	//
	// Deprecated: Marked as deprecated in google/cloud/storageinsights/v1/storageinsights.proto.
	NonManagementHubEntitledProjectNumbers []int64 `protobuf:"varint,8,rep,packed,name=non_management_hub_entitled_project_numbers,json=nonManagementHubEntitledProjectNumbers,proto3" json:"non_management_hub_entitled_project_numbers,omitempty"`
	// Optional. Count of projects that are not subscribed to Storage
	// Intelligence.
	NonStorageIntelligenceEntitledErrorCount *int64 `protobuf:"varint,9,opt,name=non_storage_intelligence_entitled_error_count,json=nonStorageIntelligenceEntitledErrorCount,proto3,oneof" json:"non_storage_intelligence_entitled_error_count,omitempty"`
	// Optional. Subset of project numbers that are not subscribed to Storage
	// Intelligence.
	NonStorageIntelligenceEntitledProjectNumbers []int64 `protobuf:"varint,10,rep,packed,name=non_storage_intelligence_entitled_project_numbers,json=nonStorageIntelligenceEntitledProjectNumbers,proto3" json:"non_storage_intelligence_entitled_project_numbers,omitempty"`
	// Optional. Number of projects that encountered internal errors during
	// validation and are automatically retried.
	InternalErrorCount *int64 `protobuf:"varint,4,opt,name=internal_error_count,json=internalErrorCount,proto3,oneof" json:"internal_error_count,omitempty"`
	// The destination project check result. It indicates whether the project
	// is in the correct organization or if an internal error occurred during
	// the check.
	//
	// Types that are assignable to DestinationProjectCheckResult:
	//
	//	*DatasetConfig_ProjectErrors_DestinationProjectOrgError
	//	*DatasetConfig_ProjectErrors_DestinationProjectCheckHasInternalError
	DestinationProjectCheckResult isDatasetConfig_ProjectErrors_DestinationProjectCheckResult `protobuf_oneof:"destination_project_check_result"`
}

func (x *DatasetConfig_ProjectErrors) Reset() {
	*x = DatasetConfig_ProjectErrors{}
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatasetConfig_ProjectErrors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetConfig_ProjectErrors) ProtoMessage() {}

func (x *DatasetConfig_ProjectErrors) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetConfig_ProjectErrors.ProtoReflect.Descriptor instead.
func (*DatasetConfig_ProjectErrors) Descriptor() ([]byte, []int) {
	return file_google_cloud_storageinsights_v1_storageinsights_proto_rawDescGZIP(), []int{19, 6}
}

func (x *DatasetConfig_ProjectErrors) GetValidatedCount() int64 {
	if x != nil && x.ValidatedCount != nil {
		return *x.ValidatedCount
	}
	return 0
}

func (x *DatasetConfig_ProjectErrors) GetOutsideOrgErrorCount() int64 {
	if x != nil && x.OutsideOrgErrorCount != nil {
		return *x.OutsideOrgErrorCount
	}
	return 0
}

func (x *DatasetConfig_ProjectErrors) GetOutsideOrgProjectNumbers() []int64 {
	if x != nil {
		return x.OutsideOrgProjectNumbers
	}
	return nil
}

// Deprecated: Marked as deprecated in google/cloud/storageinsights/v1/storageinsights.proto.
func (x *DatasetConfig_ProjectErrors) GetNonManagementHubEntitledErrorCount() int64 {
	if x != nil && x.NonManagementHubEntitledErrorCount != nil {
		return *x.NonManagementHubEntitledErrorCount
	}
	return 0
}

// Deprecated: Marked as deprecated in google/cloud/storageinsights/v1/storageinsights.proto.
func (x *DatasetConfig_ProjectErrors) GetNonManagementHubEntitledProjectNumbers() []int64 {
	if x != nil {
		return x.NonManagementHubEntitledProjectNumbers
	}
	return nil
}

func (x *DatasetConfig_ProjectErrors) GetNonStorageIntelligenceEntitledErrorCount() int64 {
	if x != nil && x.NonStorageIntelligenceEntitledErrorCount != nil {
		return *x.NonStorageIntelligenceEntitledErrorCount
	}
	return 0
}

func (x *DatasetConfig_ProjectErrors) GetNonStorageIntelligenceEntitledProjectNumbers() []int64 {
	if x != nil {
		return x.NonStorageIntelligenceEntitledProjectNumbers
	}
	return nil
}

func (x *DatasetConfig_ProjectErrors) GetInternalErrorCount() int64 {
	if x != nil && x.InternalErrorCount != nil {
		return *x.InternalErrorCount
	}
	return 0
}

func (m *DatasetConfig_ProjectErrors) GetDestinationProjectCheckResult() isDatasetConfig_ProjectErrors_DestinationProjectCheckResult {
	if m != nil {
		return m.DestinationProjectCheckResult
	}
	return nil
}

func (x *DatasetConfig_ProjectErrors) GetDestinationProjectOrgError() bool {
	if x, ok := x.GetDestinationProjectCheckResult().(*DatasetConfig_ProjectErrors_DestinationProjectOrgError); ok {
		return x.DestinationProjectOrgError
	}
	return false
}

func (x *DatasetConfig_ProjectErrors) GetDestinationProjectCheckHasInternalError() bool {
	if x, ok := x.GetDestinationProjectCheckResult().(*DatasetConfig_ProjectErrors_DestinationProjectCheckHasInternalError); ok {
		return x.DestinationProjectCheckHasInternalError
	}
	return false
}

type isDatasetConfig_ProjectErrors_DestinationProjectCheckResult interface {
	isDatasetConfig_ProjectErrors_DestinationProjectCheckResult()
}

type DatasetConfig_ProjectErrors_DestinationProjectOrgError struct {
	// Optional. Indicates if the destination project resides within the same
	// organization as the source project.
	DestinationProjectOrgError bool `protobuf:"varint,5,opt,name=destination_project_org_error,json=destinationProjectOrgError,proto3,oneof"`
}

type DatasetConfig_ProjectErrors_DestinationProjectCheckHasInternalError struct {
	// Optional. Indicates whether the destination project check failed due to
	// an internal error. If `true`, the system automatically retries the
	// check.
	DestinationProjectCheckHasInternalError bool `protobuf:"varint,6,opt,name=destination_project_check_has_internal_error,json=destinationProjectCheckHasInternalError,proto3,oneof"`
}

func (*DatasetConfig_ProjectErrors_DestinationProjectOrgError) isDatasetConfig_ProjectErrors_DestinationProjectCheckResult() {
}

func (*DatasetConfig_ProjectErrors_DestinationProjectCheckHasInternalError) isDatasetConfig_ProjectErrors_DestinationProjectCheckResult() {
}

// Summary of validation errors that occurred during the verification phase.
type DatasetConfig_ValidationErrorsBeforeIngestion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Provides a summary of the bucket level error stats.
	BucketErrors *DatasetConfig_BucketErrors `protobuf:"bytes,1,opt,name=bucket_errors,json=bucketErrors,proto3" json:"bucket_errors,omitempty"`
	// Optional. Provides a summary of the project level error stats.
	ProjectErrors *DatasetConfig_ProjectErrors `protobuf:"bytes,2,opt,name=project_errors,json=projectErrors,proto3" json:"project_errors,omitempty"`
}

func (x *DatasetConfig_ValidationErrorsBeforeIngestion) Reset() {
	*x = DatasetConfig_ValidationErrorsBeforeIngestion{}
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatasetConfig_ValidationErrorsBeforeIngestion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetConfig_ValidationErrorsBeforeIngestion) ProtoMessage() {}

func (x *DatasetConfig_ValidationErrorsBeforeIngestion) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetConfig_ValidationErrorsBeforeIngestion.ProtoReflect.Descriptor instead.
func (*DatasetConfig_ValidationErrorsBeforeIngestion) Descriptor() ([]byte, []int) {
	return file_google_cloud_storageinsights_v1_storageinsights_proto_rawDescGZIP(), []int{19, 7}
}

func (x *DatasetConfig_ValidationErrorsBeforeIngestion) GetBucketErrors() *DatasetConfig_BucketErrors {
	if x != nil {
		return x.BucketErrors
	}
	return nil
}

func (x *DatasetConfig_ValidationErrorsBeforeIngestion) GetProjectErrors() *DatasetConfig_ProjectErrors {
	if x != nil {
		return x.ProjectErrors
	}
	return nil
}

// Defines the bucket by its name or a regex pattern to match buckets.
type DatasetConfig_CloudStorageBuckets_CloudStorageBucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to CloudStorageBucket:
	//
	//	*DatasetConfig_CloudStorageBuckets_CloudStorageBucket_BucketName
	//	*DatasetConfig_CloudStorageBuckets_CloudStorageBucket_BucketPrefixRegex
	CloudStorageBucket isDatasetConfig_CloudStorageBuckets_CloudStorageBucket_CloudStorageBucket `protobuf_oneof:"cloud_storage_bucket"`
}

func (x *DatasetConfig_CloudStorageBuckets_CloudStorageBucket) Reset() {
	*x = DatasetConfig_CloudStorageBuckets_CloudStorageBucket{}
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatasetConfig_CloudStorageBuckets_CloudStorageBucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetConfig_CloudStorageBuckets_CloudStorageBucket) ProtoMessage() {}

func (x *DatasetConfig_CloudStorageBuckets_CloudStorageBucket) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetConfig_CloudStorageBuckets_CloudStorageBucket.ProtoReflect.Descriptor instead.
func (*DatasetConfig_CloudStorageBuckets_CloudStorageBucket) Descriptor() ([]byte, []int) {
	return file_google_cloud_storageinsights_v1_storageinsights_proto_rawDescGZIP(), []int{19, 3, 0}
}

func (m *DatasetConfig_CloudStorageBuckets_CloudStorageBucket) GetCloudStorageBucket() isDatasetConfig_CloudStorageBuckets_CloudStorageBucket_CloudStorageBucket {
	if m != nil {
		return m.CloudStorageBucket
	}
	return nil
}

func (x *DatasetConfig_CloudStorageBuckets_CloudStorageBucket) GetBucketName() string {
	if x, ok := x.GetCloudStorageBucket().(*DatasetConfig_CloudStorageBuckets_CloudStorageBucket_BucketName); ok {
		return x.BucketName
	}
	return ""
}

func (x *DatasetConfig_CloudStorageBuckets_CloudStorageBucket) GetBucketPrefixRegex() string {
	if x, ok := x.GetCloudStorageBucket().(*DatasetConfig_CloudStorageBuckets_CloudStorageBucket_BucketPrefixRegex); ok {
		return x.BucketPrefixRegex
	}
	return ""
}

type isDatasetConfig_CloudStorageBuckets_CloudStorageBucket_CloudStorageBucket interface {
	isDatasetConfig_CloudStorageBuckets_CloudStorageBucket_CloudStorageBucket()
}

type DatasetConfig_CloudStorageBuckets_CloudStorageBucket_BucketName struct {
	// Cloud Storage bucket name.
	BucketName string `protobuf:"bytes,1,opt,name=bucket_name,json=bucketName,proto3,oneof"`
}

type DatasetConfig_CloudStorageBuckets_CloudStorageBucket_BucketPrefixRegex struct {
	// A regex pattern for bucket names matching the regex. Regex should
	// follow the syntax specified in `google/re2` on GitHub.
	BucketPrefixRegex string `protobuf:"bytes,2,opt,name=bucket_prefix_regex,json=bucketPrefixRegex,proto3,oneof"`
}

func (*DatasetConfig_CloudStorageBuckets_CloudStorageBucket_BucketName) isDatasetConfig_CloudStorageBuckets_CloudStorageBucket_CloudStorageBucket() {
}

func (*DatasetConfig_CloudStorageBuckets_CloudStorageBucket_BucketPrefixRegex) isDatasetConfig_CloudStorageBuckets_CloudStorageBucket_CloudStorageBucket() {
}

var File_google_cloud_storageinsights_v1_storageinsights_proto protoreflect.FileDescriptor

var file_google_cloud_storageinsights_v1_storageinsights_proto_rawDesc = []byte{
	0x0a, 0x35, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1a, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x64,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd6, 0x01,
	0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0xe0, 0x41, 0x02, 0xfa,
	0x41, 0x2d, 0x12, 0x2b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0xbb, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68,
	0x61, 0x62, 0x6c, 0x65, 0x22, 0x61, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0xe0, 0x41,
	0x02, 0xfa, 0x41, 0x2d, 0x0a, 0x2b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xe5, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2d, 0x12, 0x2b, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x57, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22, 0x0a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22,
	0xda, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12,
	0x57, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xa3, 0x01, 0x0a,
	0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2d,
	0x0a, 0x2b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x22,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x22, 0xe8, 0x05, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x51, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x3e, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x5c, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x1a, 0x41, 0x0a, 0x07, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x3a, 0x96, 0x01, 0xea, 0x41, 0x92, 0x01, 0x0a, 0x2b, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x63, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x7d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2f,
	0x7b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x7d, 0x2f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2f, 0x7b, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x7d, 0x22, 0xd6, 0x01,
	0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0xe0, 0x41, 0x02, 0xfa,
	0x41, 0x2d, 0x12, 0x2b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0xbb, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0d, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68,
	0x61, 0x62, 0x6c, 0x65, 0x22, 0x61, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0xe0, 0x41,
	0x02, 0xfa, 0x41, 0x2d, 0x0a, 0x2b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xd5, 0x02, 0x0a, 0x11, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x3a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x76, 0x65, 0x72, 0x62,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x76, 0x65, 0x72,
	0x62, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0d,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a,
	0x16, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x15, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0b, 0x61, 0x70, 0x69,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x8c, 0x02, 0x0a, 0x10, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x59, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x69, 0x6e,
	0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x30, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x2c, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22,
	0x3d, 0x0a, 0x09, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x19, 0x0a, 0x15,
	0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x41, 0x49, 0x4c, 0x59,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x45, 0x45, 0x4b, 0x4c, 0x59, 0x10, 0x02, 0x22, 0x7e,
	0x0a, 0x0a, 0x43, 0x53, 0x56, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x0a, 0x10,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x10,
	0x0a, 0x0e, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x2d, 0x0a, 0x13, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x22,
	0x63, 0x0a, 0x1e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x74, 0x68, 0x22, 0xcc, 0x02, 0x0a, 0x1b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x5f, 0x0a,
	0x0f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x0e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x81,
	0x01, 0x0a, 0x1b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x01, 0x52, 0x19, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x15, 0x0a, 0x13,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x82, 0x07, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5e, 0x0a, 0x11,
	0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x69, 0x6e,
	0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x10, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4e, 0x0a, 0x0b,
	0x63, 0x73, 0x76, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x53, 0x56, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00,
	0x52, 0x0a, 0x63, 0x73, 0x76, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5a, 0x0a, 0x0f,
	0x70, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x71, 0x75, 0x65,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x1e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48,
	0x01, 0x52, 0x1b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x51,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a,
	0x77, 0xea, 0x41, 0x74, 0x0a, 0x2b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x45, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x7d, 0x42, 0x0f, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0xdb, 0x01, 0x0a, 0x08, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4a,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x6a, 0x0a, 0x0c, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x44,
	0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x44, 0x45,
	0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x44, 0x45, 0x4e, 0x54,
	0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f,
	0x4a, 0x45, 0x43, 0x54, 0x10, 0x02, 0x22, 0xbd, 0x23, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x08, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x34, 0x0a, 0x13, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x12, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x68, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x48, 0x00,
	0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x12, 0x65, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x69,
	0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2f, 0x0a, 0x12, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x11, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x19, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x04,
	0x48, 0x00, 0x52, 0x16, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x8d, 0x01, 0x0a, 0x1f, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x01, 0x52, 0x1c, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x8d, 0x01, 0x0a, 0x1f, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x01, 0x52, 0x1c, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x87, 0x01, 0x0a, 0x1d, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x42, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x48, 0x02, 0x52, 0x1a, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x12, 0x87, 0x01, 0x0a, 0x1d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x48, 0x02, 0x52, 0x1a, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x41,
	0x0a, 0x1d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6e, 0x65, 0x77, 0x6c, 0x79, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4e, 0x65,
	0x77, 0x6c, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x12, 0x46, 0x0a, 0x1c, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x42, 0x05, 0xe0, 0x41, 0x01, 0x18, 0x01, 0x52, 0x19,
	0x73, 0x6b, 0x69, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x6e, 0x64, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x64, 0x61,
	0x79, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x44, 0x61, 0x79, 0x73, 0x12, 0x47, 0x0a,
	0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x69, 0x6e, 0x6b,
	0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x45, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x69,
	0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2f, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x71,
	0x0a, 0x14, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x12, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x39, 0x0a, 0x0e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x0e, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x0d, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x1a, 0x35, 0x0a, 0x15, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xa5, 0x02, 0x0a, 0x13, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12,
	0x89, 0x01, 0x0a, 0x15, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x55, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x13, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x1a, 0x81, 0x01, 0x0a, 0x12,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x21, 0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x11, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x52, 0x65, 0x67, 0x65, 0x78, 0x42, 0x16, 0x0a, 0x14, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x1a,
	0x42, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1d, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x07, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x6c, 0x69, 0x6e,
	0x6b, 0x65, 0x64, 0x1a, 0x86, 0x04, 0x0a, 0x0c, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x17, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x15, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x44, 0x0a, 0x1c, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65,
	0x6e, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x19, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x4f, 0x0a, 0x21, 0x6e, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x75, 0x62, 0x5f, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x05, 0xe0, 0x41, 0x01, 0x18, 0x01, 0x52, 0x1d, 0x6e, 0x6f, 0x6e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x75, 0x62, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x59, 0x0a,
	0x27, 0x6e, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x23, 0x6e, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x62, 0x0a, 0x2c, 0x6e, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x64, 0x5f, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x27, 0x6e, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x64, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x73, 0x1a, 0x9c, 0x08, 0x0a,
	0x0d, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x31,
	0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x01, 0x52, 0x0e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x3f, 0x0a, 0x17, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x6f, 0x72, 0x67,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x02, 0x52, 0x14, 0x6f, 0x75, 0x74, 0x73, 0x69,
	0x64, 0x65, 0x4f, 0x72, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x42, 0x0a, 0x1b, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x6f, 0x72,
	0x67, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x18, 0x6f, 0x75,
	0x74, 0x73, 0x69, 0x64, 0x65, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x5f, 0x0a, 0x27, 0x6e, 0x6f, 0x6e, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x75, 0x62, 0x5f, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x05, 0xe0, 0x41, 0x01, 0x18, 0x01, 0x48, 0x03,
	0x52, 0x22, 0x6e, 0x6f, 0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48,
	0x75, 0x62, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x62, 0x0a, 0x2b, 0x6e, 0x6f, 0x6e, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x75, 0x62, 0x5f, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x03, 0x42, 0x05, 0xe0, 0x41,
	0x01, 0x18, 0x01, 0x52, 0x26, 0x6e, 0x6f, 0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x48, 0x75, 0x62, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x64, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x69, 0x0a, 0x2d, 0x6e,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6c,
	0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x64,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x04, 0x52, 0x28, 0x6e, 0x6f, 0x6e, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63,
	0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x6c, 0x0a, 0x31, 0x6e, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x03, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x2c, 0x6e, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x05, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x48, 0x0a, 0x1d, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6f, 0x72, 0x67, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x1a,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x4f, 0x72, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x64, 0x0a, 0x2c, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x27, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x48, 0x61, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x42, 0x22, 0x0a, 0x20, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x6f, 0x75, 0x74,
	0x73, 0x69, 0x64, 0x65, 0x5f, 0x6f, 0x72, 0x67, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x2a, 0x0a, 0x28, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x75, 0x62, 0x5f, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x30, 0x0a, 0x2e, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0xf2, 0x01, 0x0a, 0x1f,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x65, 0x0a, 0x0d, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x68, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa6, 0x01, 0x0a, 0x0b,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x18, 0x0a,
	0x14, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49,
	0x4e, 0x47, 0x10, 0x04, 0x3a, 0x7a, 0xea, 0x41, 0x77, 0x0a, 0x2c, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x47, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2f,
	0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x7d,
	0x42, 0x10, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x42, 0x19, 0x0a, 0x17, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x17, 0x0a,
	0x15, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x22, 0xd8, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2e, 0x12, 0x2c, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x22, 0xbf, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x57, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61,
	0x62, 0x6c, 0x65, 0x22, 0x63, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0xe0, 0x41,
	0x02, 0xfa, 0x41, 0x2e, 0x0a, 0x2c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x9b, 0x02, 0x0a, 0x1a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2e, 0x12,
	0x2c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x22, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xde, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x5a, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x22, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2e, 0x0a, 0x2c, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x22, 0x5e, 0x0a, 0x12, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2e,
	0x0a, 0x2c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x60, 0x0a, 0x14, 0x55,
	0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x34, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2e, 0x0a, 0x2c, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x84, 0x01,
	0x0a, 0x10, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x15, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x32, 0x90, 0x19, 0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0xce, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x39,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x42, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x12, 0x31, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0xbb, 0x01, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x37, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x40, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x33, 0x12, 0x31, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xe0, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x5f, 0xda, 0x41, 0x14, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x2c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x42, 0x3a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x31, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0xf3, 0x01, 0x0a, 0x12, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x72, 0xda, 0x41,
	0x19, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2c, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x50,
	0x3a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32,
	0x3f, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2f, 0x2a, 0x7d,
	0x12, 0xaa, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x69, 0x6e,
	0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x40, 0xda, 0x41, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x2a, 0x31, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a,
	0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xde, 0x01,
	0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x52, 0xda, 0x41, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x43, 0x12, 0x41, 0x2f, 0x76, 0x31,
	0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2f, 0x2a, 0x7d,
	0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0xcb,
	0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x50, 0xda, 0x41, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x43, 0x12, 0x41, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xd2, 0x01, 0x0a,
	0x12, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x12, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0xda, 0x41,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x12, 0x32, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x2a, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x12, 0xbf, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x22, 0x41, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x12,
	0x32, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x2a, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x2f, 0x2a, 0x7d, 0x12, 0x8d, 0x02, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x99, 0x01, 0xca, 0x41, 0x22, 0x0a, 0x0d, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x11, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xda,
	0x41, 0x27, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x2c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x3a,
	0x0e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0x32, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x12, 0x8f, 0x02, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9b, 0x01, 0xca, 0x41, 0x22, 0x0a, 0x0d, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x11, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xda,
	0x41, 0x1a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x53, 0x3a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x32, 0x41, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xe1, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6e, 0xca, 0x41, 0x2a, 0x0a, 0x15,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x11, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x34, 0x2a, 0x32, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xde, 0x01, 0x0a, 0x0b, 0x4c, 0x69,
	0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7b, 0xca,
	0x41, 0x28, 0x0a, 0x13, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x11, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x43, 0x3a, 0x01, 0x2a, 0x22, 0x3e, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a,
	0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x6c,
	0x69, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0xe6, 0x01, 0x0a, 0x0d, 0x55,
	0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x35, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e,
	0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x7f, 0xca, 0x41, 0x2a, 0x0a, 0x15, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x11,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x45, 0x3a, 0x01,
	0x2a, 0x22, 0x40, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x75, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x1a, 0x52, 0xca, 0x41, 0x1e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x69,
	0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f,
	0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0xe8, 0x01, 0x0a, 0x23, 0x63, 0x6f, 0x6d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x42,
	0x07, 0x56, 0x31, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4d, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2f,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x70, 0x62, 0x3b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x69,
	0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x70, 0x62, 0xaa, 0x02, 0x1f, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x1f, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x5c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5c, 0x56, 0x31, 0xea, 0x02, 0x22,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x3a, 0x3a,
	0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_storageinsights_v1_storageinsights_proto_rawDescOnce sync.Once
	file_google_cloud_storageinsights_v1_storageinsights_proto_rawDescData = file_google_cloud_storageinsights_v1_storageinsights_proto_rawDesc
)

func file_google_cloud_storageinsights_v1_storageinsights_proto_rawDescGZIP() []byte {
	file_google_cloud_storageinsights_v1_storageinsights_proto_rawDescOnce.Do(func() {
		file_google_cloud_storageinsights_v1_storageinsights_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_storageinsights_v1_storageinsights_proto_rawDescData)
	})
	return file_google_cloud_storageinsights_v1_storageinsights_proto_rawDescData
}

var file_google_cloud_storageinsights_v1_storageinsights_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes = make([]protoimpl.MessageInfo, 43)
var file_google_cloud_storageinsights_v1_storageinsights_proto_goTypes = []any{
	(FrequencyOptions_Frequency)(0),                       // 0: google.cloud.storageinsights.v1.FrequencyOptions.Frequency
	(Identity_IdentityType)(0),                            // 1: google.cloud.storageinsights.v1.Identity.IdentityType
	(DatasetConfig_ConfigState)(0),                        // 2: google.cloud.storageinsights.v1.DatasetConfig.ConfigState
	(*ListReportConfigsRequest)(nil),                      // 3: google.cloud.storageinsights.v1.ListReportConfigsRequest
	(*ListReportConfigsResponse)(nil),                     // 4: google.cloud.storageinsights.v1.ListReportConfigsResponse
	(*GetReportConfigRequest)(nil),                        // 5: google.cloud.storageinsights.v1.GetReportConfigRequest
	(*CreateReportConfigRequest)(nil),                     // 6: google.cloud.storageinsights.v1.CreateReportConfigRequest
	(*UpdateReportConfigRequest)(nil),                     // 7: google.cloud.storageinsights.v1.UpdateReportConfigRequest
	(*DeleteReportConfigRequest)(nil),                     // 8: google.cloud.storageinsights.v1.DeleteReportConfigRequest
	(*ReportDetail)(nil),                                  // 9: google.cloud.storageinsights.v1.ReportDetail
	(*ListReportDetailsRequest)(nil),                      // 10: google.cloud.storageinsights.v1.ListReportDetailsRequest
	(*ListReportDetailsResponse)(nil),                     // 11: google.cloud.storageinsights.v1.ListReportDetailsResponse
	(*GetReportDetailRequest)(nil),                        // 12: google.cloud.storageinsights.v1.GetReportDetailRequest
	(*OperationMetadata)(nil),                             // 13: google.cloud.storageinsights.v1.OperationMetadata
	(*FrequencyOptions)(nil),                              // 14: google.cloud.storageinsights.v1.FrequencyOptions
	(*CSVOptions)(nil),                                    // 15: google.cloud.storageinsights.v1.CSVOptions
	(*ParquetOptions)(nil),                                // 16: google.cloud.storageinsights.v1.ParquetOptions
	(*CloudStorageFilters)(nil),                           // 17: google.cloud.storageinsights.v1.CloudStorageFilters
	(*CloudStorageDestinationOptions)(nil),                // 18: google.cloud.storageinsights.v1.CloudStorageDestinationOptions
	(*ObjectMetadataReportOptions)(nil),                   // 19: google.cloud.storageinsights.v1.ObjectMetadataReportOptions
	(*ReportConfig)(nil),                                  // 20: google.cloud.storageinsights.v1.ReportConfig
	(*Identity)(nil),                                      // 21: google.cloud.storageinsights.v1.Identity
	(*DatasetConfig)(nil),                                 // 22: google.cloud.storageinsights.v1.DatasetConfig
	(*ListDatasetConfigsRequest)(nil),                     // 23: google.cloud.storageinsights.v1.ListDatasetConfigsRequest
	(*ListDatasetConfigsResponse)(nil),                    // 24: google.cloud.storageinsights.v1.ListDatasetConfigsResponse
	(*GetDatasetConfigRequest)(nil),                       // 25: google.cloud.storageinsights.v1.GetDatasetConfigRequest
	(*CreateDatasetConfigRequest)(nil),                    // 26: google.cloud.storageinsights.v1.CreateDatasetConfigRequest
	(*UpdateDatasetConfigRequest)(nil),                    // 27: google.cloud.storageinsights.v1.UpdateDatasetConfigRequest
	(*DeleteDatasetConfigRequest)(nil),                    // 28: google.cloud.storageinsights.v1.DeleteDatasetConfigRequest
	(*LinkDatasetRequest)(nil),                            // 29: google.cloud.storageinsights.v1.LinkDatasetRequest
	(*LinkDatasetResponse)(nil),                           // 30: google.cloud.storageinsights.v1.LinkDatasetResponse
	(*UnlinkDatasetRequest)(nil),                          // 31: google.cloud.storageinsights.v1.UnlinkDatasetRequest
	(*LocationMetadata)(nil),                              // 32: google.cloud.storageinsights.v1.LocationMetadata
	(*ReportDetail_Metrics)(nil),                          // 33: google.cloud.storageinsights.v1.ReportDetail.Metrics
	nil,                                                   // 34: google.cloud.storageinsights.v1.ReportDetail.LabelsEntry
	nil,                                                   // 35: google.cloud.storageinsights.v1.ReportConfig.LabelsEntry
	(*DatasetConfig_SourceProjects)(nil),                  // 36: google.cloud.storageinsights.v1.DatasetConfig.SourceProjects
	(*DatasetConfig_SourceFolders)(nil),                   // 37: google.cloud.storageinsights.v1.DatasetConfig.SourceFolders
	(*DatasetConfig_CloudStorageLocations)(nil),           // 38: google.cloud.storageinsights.v1.DatasetConfig.CloudStorageLocations
	(*DatasetConfig_CloudStorageBuckets)(nil),             // 39: google.cloud.storageinsights.v1.DatasetConfig.CloudStorageBuckets
	(*DatasetConfig_Link)(nil),                            // 40: google.cloud.storageinsights.v1.DatasetConfig.Link
	(*DatasetConfig_BucketErrors)(nil),                    // 41: google.cloud.storageinsights.v1.DatasetConfig.BucketErrors
	(*DatasetConfig_ProjectErrors)(nil),                   // 42: google.cloud.storageinsights.v1.DatasetConfig.ProjectErrors
	(*DatasetConfig_ValidationErrorsBeforeIngestion)(nil), // 43: google.cloud.storageinsights.v1.DatasetConfig.ValidationErrorsBeforeIngestion
	nil, // 44: google.cloud.storageinsights.v1.DatasetConfig.LabelsEntry
	(*DatasetConfig_CloudStorageBuckets_CloudStorageBucket)(nil), // 45: google.cloud.storageinsights.v1.DatasetConfig.CloudStorageBuckets.CloudStorageBucket
	(*fieldmaskpb.FieldMask)(nil),                                // 46: google.protobuf.FieldMask
	(*timestamppb.Timestamp)(nil),                                // 47: google.protobuf.Timestamp
	(*status.Status)(nil),                                        // 48: google.rpc.Status
	(*datetime.DateTime)(nil),                                    // 49: google.type.DateTime
	(*date.Date)(nil),                                            // 50: google.type.Date
	(*emptypb.Empty)(nil),                                        // 51: google.protobuf.Empty
	(*longrunningpb.Operation)(nil),                              // 52: google.longrunning.Operation
}
var file_google_cloud_storageinsights_v1_storageinsights_proto_depIdxs = []int32{
	20, // 0: google.cloud.storageinsights.v1.ListReportConfigsResponse.report_configs:type_name -> google.cloud.storageinsights.v1.ReportConfig
	20, // 1: google.cloud.storageinsights.v1.CreateReportConfigRequest.report_config:type_name -> google.cloud.storageinsights.v1.ReportConfig
	46, // 2: google.cloud.storageinsights.v1.UpdateReportConfigRequest.update_mask:type_name -> google.protobuf.FieldMask
	20, // 3: google.cloud.storageinsights.v1.UpdateReportConfigRequest.report_config:type_name -> google.cloud.storageinsights.v1.ReportConfig
	47, // 4: google.cloud.storageinsights.v1.ReportDetail.snapshot_time:type_name -> google.protobuf.Timestamp
	48, // 5: google.cloud.storageinsights.v1.ReportDetail.status:type_name -> google.rpc.Status
	34, // 6: google.cloud.storageinsights.v1.ReportDetail.labels:type_name -> google.cloud.storageinsights.v1.ReportDetail.LabelsEntry
	49, // 7: google.cloud.storageinsights.v1.ReportDetail.target_datetime:type_name -> google.type.DateTime
	33, // 8: google.cloud.storageinsights.v1.ReportDetail.report_metrics:type_name -> google.cloud.storageinsights.v1.ReportDetail.Metrics
	9,  // 9: google.cloud.storageinsights.v1.ListReportDetailsResponse.report_details:type_name -> google.cloud.storageinsights.v1.ReportDetail
	47, // 10: google.cloud.storageinsights.v1.OperationMetadata.create_time:type_name -> google.protobuf.Timestamp
	47, // 11: google.cloud.storageinsights.v1.OperationMetadata.end_time:type_name -> google.protobuf.Timestamp
	0,  // 12: google.cloud.storageinsights.v1.FrequencyOptions.frequency:type_name -> google.cloud.storageinsights.v1.FrequencyOptions.Frequency
	50, // 13: google.cloud.storageinsights.v1.FrequencyOptions.start_date:type_name -> google.type.Date
	50, // 14: google.cloud.storageinsights.v1.FrequencyOptions.end_date:type_name -> google.type.Date
	17, // 15: google.cloud.storageinsights.v1.ObjectMetadataReportOptions.storage_filters:type_name -> google.cloud.storageinsights.v1.CloudStorageFilters
	18, // 16: google.cloud.storageinsights.v1.ObjectMetadataReportOptions.storage_destination_options:type_name -> google.cloud.storageinsights.v1.CloudStorageDestinationOptions
	47, // 17: google.cloud.storageinsights.v1.ReportConfig.create_time:type_name -> google.protobuf.Timestamp
	47, // 18: google.cloud.storageinsights.v1.ReportConfig.update_time:type_name -> google.protobuf.Timestamp
	14, // 19: google.cloud.storageinsights.v1.ReportConfig.frequency_options:type_name -> google.cloud.storageinsights.v1.FrequencyOptions
	15, // 20: google.cloud.storageinsights.v1.ReportConfig.csv_options:type_name -> google.cloud.storageinsights.v1.CSVOptions
	16, // 21: google.cloud.storageinsights.v1.ReportConfig.parquet_options:type_name -> google.cloud.storageinsights.v1.ParquetOptions
	19, // 22: google.cloud.storageinsights.v1.ReportConfig.object_metadata_report_options:type_name -> google.cloud.storageinsights.v1.ObjectMetadataReportOptions
	35, // 23: google.cloud.storageinsights.v1.ReportConfig.labels:type_name -> google.cloud.storageinsights.v1.ReportConfig.LabelsEntry
	1,  // 24: google.cloud.storageinsights.v1.Identity.type:type_name -> google.cloud.storageinsights.v1.Identity.IdentityType
	47, // 25: google.cloud.storageinsights.v1.DatasetConfig.create_time:type_name -> google.protobuf.Timestamp
	47, // 26: google.cloud.storageinsights.v1.DatasetConfig.update_time:type_name -> google.protobuf.Timestamp
	44, // 27: google.cloud.storageinsights.v1.DatasetConfig.labels:type_name -> google.cloud.storageinsights.v1.DatasetConfig.LabelsEntry
	36, // 28: google.cloud.storageinsights.v1.DatasetConfig.source_projects:type_name -> google.cloud.storageinsights.v1.DatasetConfig.SourceProjects
	37, // 29: google.cloud.storageinsights.v1.DatasetConfig.source_folders:type_name -> google.cloud.storageinsights.v1.DatasetConfig.SourceFolders
	38, // 30: google.cloud.storageinsights.v1.DatasetConfig.include_cloud_storage_locations:type_name -> google.cloud.storageinsights.v1.DatasetConfig.CloudStorageLocations
	38, // 31: google.cloud.storageinsights.v1.DatasetConfig.exclude_cloud_storage_locations:type_name -> google.cloud.storageinsights.v1.DatasetConfig.CloudStorageLocations
	39, // 32: google.cloud.storageinsights.v1.DatasetConfig.include_cloud_storage_buckets:type_name -> google.cloud.storageinsights.v1.DatasetConfig.CloudStorageBuckets
	39, // 33: google.cloud.storageinsights.v1.DatasetConfig.exclude_cloud_storage_buckets:type_name -> google.cloud.storageinsights.v1.DatasetConfig.CloudStorageBuckets
	40, // 34: google.cloud.storageinsights.v1.DatasetConfig.link:type_name -> google.cloud.storageinsights.v1.DatasetConfig.Link
	21, // 35: google.cloud.storageinsights.v1.DatasetConfig.identity:type_name -> google.cloud.storageinsights.v1.Identity
	48, // 36: google.cloud.storageinsights.v1.DatasetConfig.status:type_name -> google.rpc.Status
	2,  // 37: google.cloud.storageinsights.v1.DatasetConfig.dataset_config_state:type_name -> google.cloud.storageinsights.v1.DatasetConfig.ConfigState
	22, // 38: google.cloud.storageinsights.v1.ListDatasetConfigsResponse.dataset_configs:type_name -> google.cloud.storageinsights.v1.DatasetConfig
	22, // 39: google.cloud.storageinsights.v1.CreateDatasetConfigRequest.dataset_config:type_name -> google.cloud.storageinsights.v1.DatasetConfig
	46, // 40: google.cloud.storageinsights.v1.UpdateDatasetConfigRequest.update_mask:type_name -> google.protobuf.FieldMask
	22, // 41: google.cloud.storageinsights.v1.UpdateDatasetConfigRequest.dataset_config:type_name -> google.cloud.storageinsights.v1.DatasetConfig
	45, // 42: google.cloud.storageinsights.v1.DatasetConfig.CloudStorageBuckets.cloud_storage_buckets:type_name -> google.cloud.storageinsights.v1.DatasetConfig.CloudStorageBuckets.CloudStorageBucket
	41, // 43: google.cloud.storageinsights.v1.DatasetConfig.ValidationErrorsBeforeIngestion.bucket_errors:type_name -> google.cloud.storageinsights.v1.DatasetConfig.BucketErrors
	42, // 44: google.cloud.storageinsights.v1.DatasetConfig.ValidationErrorsBeforeIngestion.project_errors:type_name -> google.cloud.storageinsights.v1.DatasetConfig.ProjectErrors
	3,  // 45: google.cloud.storageinsights.v1.StorageInsights.ListReportConfigs:input_type -> google.cloud.storageinsights.v1.ListReportConfigsRequest
	5,  // 46: google.cloud.storageinsights.v1.StorageInsights.GetReportConfig:input_type -> google.cloud.storageinsights.v1.GetReportConfigRequest
	6,  // 47: google.cloud.storageinsights.v1.StorageInsights.CreateReportConfig:input_type -> google.cloud.storageinsights.v1.CreateReportConfigRequest
	7,  // 48: google.cloud.storageinsights.v1.StorageInsights.UpdateReportConfig:input_type -> google.cloud.storageinsights.v1.UpdateReportConfigRequest
	8,  // 49: google.cloud.storageinsights.v1.StorageInsights.DeleteReportConfig:input_type -> google.cloud.storageinsights.v1.DeleteReportConfigRequest
	10, // 50: google.cloud.storageinsights.v1.StorageInsights.ListReportDetails:input_type -> google.cloud.storageinsights.v1.ListReportDetailsRequest
	12, // 51: google.cloud.storageinsights.v1.StorageInsights.GetReportDetail:input_type -> google.cloud.storageinsights.v1.GetReportDetailRequest
	23, // 52: google.cloud.storageinsights.v1.StorageInsights.ListDatasetConfigs:input_type -> google.cloud.storageinsights.v1.ListDatasetConfigsRequest
	25, // 53: google.cloud.storageinsights.v1.StorageInsights.GetDatasetConfig:input_type -> google.cloud.storageinsights.v1.GetDatasetConfigRequest
	26, // 54: google.cloud.storageinsights.v1.StorageInsights.CreateDatasetConfig:input_type -> google.cloud.storageinsights.v1.CreateDatasetConfigRequest
	27, // 55: google.cloud.storageinsights.v1.StorageInsights.UpdateDatasetConfig:input_type -> google.cloud.storageinsights.v1.UpdateDatasetConfigRequest
	28, // 56: google.cloud.storageinsights.v1.StorageInsights.DeleteDatasetConfig:input_type -> google.cloud.storageinsights.v1.DeleteDatasetConfigRequest
	29, // 57: google.cloud.storageinsights.v1.StorageInsights.LinkDataset:input_type -> google.cloud.storageinsights.v1.LinkDatasetRequest
	31, // 58: google.cloud.storageinsights.v1.StorageInsights.UnlinkDataset:input_type -> google.cloud.storageinsights.v1.UnlinkDatasetRequest
	4,  // 59: google.cloud.storageinsights.v1.StorageInsights.ListReportConfigs:output_type -> google.cloud.storageinsights.v1.ListReportConfigsResponse
	20, // 60: google.cloud.storageinsights.v1.StorageInsights.GetReportConfig:output_type -> google.cloud.storageinsights.v1.ReportConfig
	20, // 61: google.cloud.storageinsights.v1.StorageInsights.CreateReportConfig:output_type -> google.cloud.storageinsights.v1.ReportConfig
	20, // 62: google.cloud.storageinsights.v1.StorageInsights.UpdateReportConfig:output_type -> google.cloud.storageinsights.v1.ReportConfig
	51, // 63: google.cloud.storageinsights.v1.StorageInsights.DeleteReportConfig:output_type -> google.protobuf.Empty
	11, // 64: google.cloud.storageinsights.v1.StorageInsights.ListReportDetails:output_type -> google.cloud.storageinsights.v1.ListReportDetailsResponse
	9,  // 65: google.cloud.storageinsights.v1.StorageInsights.GetReportDetail:output_type -> google.cloud.storageinsights.v1.ReportDetail
	24, // 66: google.cloud.storageinsights.v1.StorageInsights.ListDatasetConfigs:output_type -> google.cloud.storageinsights.v1.ListDatasetConfigsResponse
	22, // 67: google.cloud.storageinsights.v1.StorageInsights.GetDatasetConfig:output_type -> google.cloud.storageinsights.v1.DatasetConfig
	52, // 68: google.cloud.storageinsights.v1.StorageInsights.CreateDatasetConfig:output_type -> google.longrunning.Operation
	52, // 69: google.cloud.storageinsights.v1.StorageInsights.UpdateDatasetConfig:output_type -> google.longrunning.Operation
	52, // 70: google.cloud.storageinsights.v1.StorageInsights.DeleteDatasetConfig:output_type -> google.longrunning.Operation
	52, // 71: google.cloud.storageinsights.v1.StorageInsights.LinkDataset:output_type -> google.longrunning.Operation
	52, // 72: google.cloud.storageinsights.v1.StorageInsights.UnlinkDataset:output_type -> google.longrunning.Operation
	59, // [59:73] is the sub-list for method output_type
	45, // [45:59] is the sub-list for method input_type
	45, // [45:45] is the sub-list for extension type_name
	45, // [45:45] is the sub-list for extension extendee
	0,  // [0:45] is the sub-list for field type_name
}

func init() { file_google_cloud_storageinsights_v1_storageinsights_proto_init() }
func file_google_cloud_storageinsights_v1_storageinsights_proto_init() {
	if File_google_cloud_storageinsights_v1_storageinsights_proto != nil {
		return
	}
	file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[16].OneofWrappers = []any{
		(*ObjectMetadataReportOptions_StorageFilters)(nil),
		(*ObjectMetadataReportOptions_StorageDestinationOptions)(nil),
	}
	file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[17].OneofWrappers = []any{
		(*ReportConfig_CsvOptions)(nil),
		(*ReportConfig_ParquetOptions)(nil),
		(*ReportConfig_ObjectMetadataReportOptions)(nil),
	}
	file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[19].OneofWrappers = []any{
		(*DatasetConfig_SourceProjects_)(nil),
		(*DatasetConfig_SourceFolders_)(nil),
		(*DatasetConfig_OrganizationScope)(nil),
		(*DatasetConfig_CloudStorageObjectPath)(nil),
		(*DatasetConfig_IncludeCloudStorageLocations)(nil),
		(*DatasetConfig_ExcludeCloudStorageLocations)(nil),
		(*DatasetConfig_IncludeCloudStorageBuckets)(nil),
		(*DatasetConfig_ExcludeCloudStorageBuckets)(nil),
	}
	file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[39].OneofWrappers = []any{
		(*DatasetConfig_ProjectErrors_DestinationProjectOrgError)(nil),
		(*DatasetConfig_ProjectErrors_DestinationProjectCheckHasInternalError)(nil),
	}
	file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes[42].OneofWrappers = []any{
		(*DatasetConfig_CloudStorageBuckets_CloudStorageBucket_BucketName)(nil),
		(*DatasetConfig_CloudStorageBuckets_CloudStorageBucket_BucketPrefixRegex)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_storageinsights_v1_storageinsights_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   43,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_google_cloud_storageinsights_v1_storageinsights_proto_goTypes,
		DependencyIndexes: file_google_cloud_storageinsights_v1_storageinsights_proto_depIdxs,
		EnumInfos:         file_google_cloud_storageinsights_v1_storageinsights_proto_enumTypes,
		MessageInfos:      file_google_cloud_storageinsights_v1_storageinsights_proto_msgTypes,
	}.Build()
	File_google_cloud_storageinsights_v1_storageinsights_proto = out.File
	file_google_cloud_storageinsights_v1_storageinsights_proto_rawDesc = nil
	file_google_cloud_storageinsights_v1_storageinsights_proto_goTypes = nil
	file_google_cloud_storageinsights_v1_storageinsights_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// StorageInsightsClient is the client API for StorageInsights service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StorageInsightsClient interface {
	// Lists ReportConfigs in a given project and location.
	ListReportConfigs(ctx context.Context, in *ListReportConfigsRequest, opts ...grpc.CallOption) (*ListReportConfigsResponse, error)
	// Gets details of a single ReportConfig.
	GetReportConfig(ctx context.Context, in *GetReportConfigRequest, opts ...grpc.CallOption) (*ReportConfig, error)
	// Creates a new ReportConfig in a given project and location.
	CreateReportConfig(ctx context.Context, in *CreateReportConfigRequest, opts ...grpc.CallOption) (*ReportConfig, error)
	// Updates the parameters of a single ReportConfig.
	UpdateReportConfig(ctx context.Context, in *UpdateReportConfigRequest, opts ...grpc.CallOption) (*ReportConfig, error)
	// Deletes a single ReportConfig.
	DeleteReportConfig(ctx context.Context, in *DeleteReportConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Lists ReportDetails in a given project and location.
	ListReportDetails(ctx context.Context, in *ListReportDetailsRequest, opts ...grpc.CallOption) (*ListReportDetailsResponse, error)
	// Gets details of a single ReportDetail.
	GetReportDetail(ctx context.Context, in *GetReportDetailRequest, opts ...grpc.CallOption) (*ReportDetail, error)
	// Lists the dataset configurations in a given project for a given location.
	ListDatasetConfigs(ctx context.Context, in *ListDatasetConfigsRequest, opts ...grpc.CallOption) (*ListDatasetConfigsResponse, error)
	// Gets the dataset configuration in a given project for a given location.
	GetDatasetConfig(ctx context.Context, in *GetDatasetConfigRequest, opts ...grpc.CallOption) (*DatasetConfig, error)
	// Creates a dataset configuration in a given project for a given location.
	CreateDatasetConfig(ctx context.Context, in *CreateDatasetConfigRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates a dataset configuration in a given project for a given location.
	UpdateDatasetConfig(ctx context.Context, in *UpdateDatasetConfigRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a dataset configuration in a given project for a given location.
	DeleteDatasetConfig(ctx context.Context, in *DeleteDatasetConfigRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Links a dataset to BigQuery in a given project for a given location.
	LinkDataset(ctx context.Context, in *LinkDatasetRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Unlinks a dataset from BigQuery in a given project
	// for a given location.
	UnlinkDataset(ctx context.Context, in *UnlinkDatasetRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type storageInsightsClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageInsightsClient(cc grpc.ClientConnInterface) StorageInsightsClient {
	return &storageInsightsClient{cc}
}

func (c *storageInsightsClient) ListReportConfigs(ctx context.Context, in *ListReportConfigsRequest, opts ...grpc.CallOption) (*ListReportConfigsResponse, error) {
	out := new(ListReportConfigsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.storageinsights.v1.StorageInsights/ListReportConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageInsightsClient) GetReportConfig(ctx context.Context, in *GetReportConfigRequest, opts ...grpc.CallOption) (*ReportConfig, error) {
	out := new(ReportConfig)
	err := c.cc.Invoke(ctx, "/google.cloud.storageinsights.v1.StorageInsights/GetReportConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageInsightsClient) CreateReportConfig(ctx context.Context, in *CreateReportConfigRequest, opts ...grpc.CallOption) (*ReportConfig, error) {
	out := new(ReportConfig)
	err := c.cc.Invoke(ctx, "/google.cloud.storageinsights.v1.StorageInsights/CreateReportConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageInsightsClient) UpdateReportConfig(ctx context.Context, in *UpdateReportConfigRequest, opts ...grpc.CallOption) (*ReportConfig, error) {
	out := new(ReportConfig)
	err := c.cc.Invoke(ctx, "/google.cloud.storageinsights.v1.StorageInsights/UpdateReportConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageInsightsClient) DeleteReportConfig(ctx context.Context, in *DeleteReportConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/google.cloud.storageinsights.v1.StorageInsights/DeleteReportConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageInsightsClient) ListReportDetails(ctx context.Context, in *ListReportDetailsRequest, opts ...grpc.CallOption) (*ListReportDetailsResponse, error) {
	out := new(ListReportDetailsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.storageinsights.v1.StorageInsights/ListReportDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageInsightsClient) GetReportDetail(ctx context.Context, in *GetReportDetailRequest, opts ...grpc.CallOption) (*ReportDetail, error) {
	out := new(ReportDetail)
	err := c.cc.Invoke(ctx, "/google.cloud.storageinsights.v1.StorageInsights/GetReportDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageInsightsClient) ListDatasetConfigs(ctx context.Context, in *ListDatasetConfigsRequest, opts ...grpc.CallOption) (*ListDatasetConfigsResponse, error) {
	out := new(ListDatasetConfigsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.storageinsights.v1.StorageInsights/ListDatasetConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageInsightsClient) GetDatasetConfig(ctx context.Context, in *GetDatasetConfigRequest, opts ...grpc.CallOption) (*DatasetConfig, error) {
	out := new(DatasetConfig)
	err := c.cc.Invoke(ctx, "/google.cloud.storageinsights.v1.StorageInsights/GetDatasetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageInsightsClient) CreateDatasetConfig(ctx context.Context, in *CreateDatasetConfigRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.storageinsights.v1.StorageInsights/CreateDatasetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageInsightsClient) UpdateDatasetConfig(ctx context.Context, in *UpdateDatasetConfigRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.storageinsights.v1.StorageInsights/UpdateDatasetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageInsightsClient) DeleteDatasetConfig(ctx context.Context, in *DeleteDatasetConfigRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.storageinsights.v1.StorageInsights/DeleteDatasetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageInsightsClient) LinkDataset(ctx context.Context, in *LinkDatasetRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.storageinsights.v1.StorageInsights/LinkDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageInsightsClient) UnlinkDataset(ctx context.Context, in *UnlinkDatasetRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.storageinsights.v1.StorageInsights/UnlinkDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageInsightsServer is the server API for StorageInsights service.
type StorageInsightsServer interface {
	// Lists ReportConfigs in a given project and location.
	ListReportConfigs(context.Context, *ListReportConfigsRequest) (*ListReportConfigsResponse, error)
	// Gets details of a single ReportConfig.
	GetReportConfig(context.Context, *GetReportConfigRequest) (*ReportConfig, error)
	// Creates a new ReportConfig in a given project and location.
	CreateReportConfig(context.Context, *CreateReportConfigRequest) (*ReportConfig, error)
	// Updates the parameters of a single ReportConfig.
	UpdateReportConfig(context.Context, *UpdateReportConfigRequest) (*ReportConfig, error)
	// Deletes a single ReportConfig.
	DeleteReportConfig(context.Context, *DeleteReportConfigRequest) (*emptypb.Empty, error)
	// Lists ReportDetails in a given project and location.
	ListReportDetails(context.Context, *ListReportDetailsRequest) (*ListReportDetailsResponse, error)
	// Gets details of a single ReportDetail.
	GetReportDetail(context.Context, *GetReportDetailRequest) (*ReportDetail, error)
	// Lists the dataset configurations in a given project for a given location.
	ListDatasetConfigs(context.Context, *ListDatasetConfigsRequest) (*ListDatasetConfigsResponse, error)
	// Gets the dataset configuration in a given project for a given location.
	GetDatasetConfig(context.Context, *GetDatasetConfigRequest) (*DatasetConfig, error)
	// Creates a dataset configuration in a given project for a given location.
	CreateDatasetConfig(context.Context, *CreateDatasetConfigRequest) (*longrunningpb.Operation, error)
	// Updates a dataset configuration in a given project for a given location.
	UpdateDatasetConfig(context.Context, *UpdateDatasetConfigRequest) (*longrunningpb.Operation, error)
	// Deletes a dataset configuration in a given project for a given location.
	DeleteDatasetConfig(context.Context, *DeleteDatasetConfigRequest) (*longrunningpb.Operation, error)
	// Links a dataset to BigQuery in a given project for a given location.
	LinkDataset(context.Context, *LinkDatasetRequest) (*longrunningpb.Operation, error)
	// Unlinks a dataset from BigQuery in a given project
	// for a given location.
	UnlinkDataset(context.Context, *UnlinkDatasetRequest) (*longrunningpb.Operation, error)
}

// UnimplementedStorageInsightsServer can be embedded to have forward compatible implementations.
type UnimplementedStorageInsightsServer struct {
}

func (*UnimplementedStorageInsightsServer) ListReportConfigs(context.Context, *ListReportConfigsRequest) (*ListReportConfigsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListReportConfigs not implemented")
}
func (*UnimplementedStorageInsightsServer) GetReportConfig(context.Context, *GetReportConfigRequest) (*ReportConfig, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetReportConfig not implemented")
}
func (*UnimplementedStorageInsightsServer) CreateReportConfig(context.Context, *CreateReportConfigRequest) (*ReportConfig, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateReportConfig not implemented")
}
func (*UnimplementedStorageInsightsServer) UpdateReportConfig(context.Context, *UpdateReportConfigRequest) (*ReportConfig, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateReportConfig not implemented")
}
func (*UnimplementedStorageInsightsServer) DeleteReportConfig(context.Context, *DeleteReportConfigRequest) (*emptypb.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteReportConfig not implemented")
}
func (*UnimplementedStorageInsightsServer) ListReportDetails(context.Context, *ListReportDetailsRequest) (*ListReportDetailsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListReportDetails not implemented")
}
func (*UnimplementedStorageInsightsServer) GetReportDetail(context.Context, *GetReportDetailRequest) (*ReportDetail, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetReportDetail not implemented")
}
func (*UnimplementedStorageInsightsServer) ListDatasetConfigs(context.Context, *ListDatasetConfigsRequest) (*ListDatasetConfigsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListDatasetConfigs not implemented")
}
func (*UnimplementedStorageInsightsServer) GetDatasetConfig(context.Context, *GetDatasetConfigRequest) (*DatasetConfig, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetDatasetConfig not implemented")
}
func (*UnimplementedStorageInsightsServer) CreateDatasetConfig(context.Context, *CreateDatasetConfigRequest) (*longrunningpb.Operation, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateDatasetConfig not implemented")
}
func (*UnimplementedStorageInsightsServer) UpdateDatasetConfig(context.Context, *UpdateDatasetConfigRequest) (*longrunningpb.Operation, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateDatasetConfig not implemented")
}
func (*UnimplementedStorageInsightsServer) DeleteDatasetConfig(context.Context, *DeleteDatasetConfigRequest) (*longrunningpb.Operation, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteDatasetConfig not implemented")
}
func (*UnimplementedStorageInsightsServer) LinkDataset(context.Context, *LinkDatasetRequest) (*longrunningpb.Operation, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method LinkDataset not implemented")
}
func (*UnimplementedStorageInsightsServer) UnlinkDataset(context.Context, *UnlinkDatasetRequest) (*longrunningpb.Operation, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UnlinkDataset not implemented")
}

func RegisterStorageInsightsServer(s *grpc.Server, srv StorageInsightsServer) {
	s.RegisterService(&_StorageInsights_serviceDesc, srv)
}

func _StorageInsights_ListReportConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReportConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageInsightsServer).ListReportConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.storageinsights.v1.StorageInsights/ListReportConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageInsightsServer).ListReportConfigs(ctx, req.(*ListReportConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageInsights_GetReportConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReportConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageInsightsServer).GetReportConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.storageinsights.v1.StorageInsights/GetReportConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageInsightsServer).GetReportConfig(ctx, req.(*GetReportConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageInsights_CreateReportConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReportConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageInsightsServer).CreateReportConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.storageinsights.v1.StorageInsights/CreateReportConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageInsightsServer).CreateReportConfig(ctx, req.(*CreateReportConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageInsights_UpdateReportConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReportConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageInsightsServer).UpdateReportConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.storageinsights.v1.StorageInsights/UpdateReportConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageInsightsServer).UpdateReportConfig(ctx, req.(*UpdateReportConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageInsights_DeleteReportConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReportConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageInsightsServer).DeleteReportConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.storageinsights.v1.StorageInsights/DeleteReportConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageInsightsServer).DeleteReportConfig(ctx, req.(*DeleteReportConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageInsights_ListReportDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReportDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageInsightsServer).ListReportDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.storageinsights.v1.StorageInsights/ListReportDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageInsightsServer).ListReportDetails(ctx, req.(*ListReportDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageInsights_GetReportDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReportDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageInsightsServer).GetReportDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.storageinsights.v1.StorageInsights/GetReportDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageInsightsServer).GetReportDetail(ctx, req.(*GetReportDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageInsights_ListDatasetConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDatasetConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageInsightsServer).ListDatasetConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.storageinsights.v1.StorageInsights/ListDatasetConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageInsightsServer).ListDatasetConfigs(ctx, req.(*ListDatasetConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageInsights_GetDatasetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatasetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageInsightsServer).GetDatasetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.storageinsights.v1.StorageInsights/GetDatasetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageInsightsServer).GetDatasetConfig(ctx, req.(*GetDatasetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageInsights_CreateDatasetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDatasetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageInsightsServer).CreateDatasetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.storageinsights.v1.StorageInsights/CreateDatasetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageInsightsServer).CreateDatasetConfig(ctx, req.(*CreateDatasetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageInsights_UpdateDatasetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDatasetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageInsightsServer).UpdateDatasetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.storageinsights.v1.StorageInsights/UpdateDatasetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageInsightsServer).UpdateDatasetConfig(ctx, req.(*UpdateDatasetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageInsights_DeleteDatasetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDatasetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageInsightsServer).DeleteDatasetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.storageinsights.v1.StorageInsights/DeleteDatasetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageInsightsServer).DeleteDatasetConfig(ctx, req.(*DeleteDatasetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageInsights_LinkDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageInsightsServer).LinkDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.storageinsights.v1.StorageInsights/LinkDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageInsightsServer).LinkDataset(ctx, req.(*LinkDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageInsights_UnlinkDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlinkDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageInsightsServer).UnlinkDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.storageinsights.v1.StorageInsights/UnlinkDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageInsightsServer).UnlinkDataset(ctx, req.(*UnlinkDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StorageInsights_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.storageinsights.v1.StorageInsights",
	HandlerType: (*StorageInsightsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListReportConfigs",
			Handler:    _StorageInsights_ListReportConfigs_Handler,
		},
		{
			MethodName: "GetReportConfig",
			Handler:    _StorageInsights_GetReportConfig_Handler,
		},
		{
			MethodName: "CreateReportConfig",
			Handler:    _StorageInsights_CreateReportConfig_Handler,
		},
		{
			MethodName: "UpdateReportConfig",
			Handler:    _StorageInsights_UpdateReportConfig_Handler,
		},
		{
			MethodName: "DeleteReportConfig",
			Handler:    _StorageInsights_DeleteReportConfig_Handler,
		},
		{
			MethodName: "ListReportDetails",
			Handler:    _StorageInsights_ListReportDetails_Handler,
		},
		{
			MethodName: "GetReportDetail",
			Handler:    _StorageInsights_GetReportDetail_Handler,
		},
		{
			MethodName: "ListDatasetConfigs",
			Handler:    _StorageInsights_ListDatasetConfigs_Handler,
		},
		{
			MethodName: "GetDatasetConfig",
			Handler:    _StorageInsights_GetDatasetConfig_Handler,
		},
		{
			MethodName: "CreateDatasetConfig",
			Handler:    _StorageInsights_CreateDatasetConfig_Handler,
		},
		{
			MethodName: "UpdateDatasetConfig",
			Handler:    _StorageInsights_UpdateDatasetConfig_Handler,
		},
		{
			MethodName: "DeleteDatasetConfig",
			Handler:    _StorageInsights_DeleteDatasetConfig_Handler,
		},
		{
			MethodName: "LinkDataset",
			Handler:    _StorageInsights_LinkDataset_Handler,
		},
		{
			MethodName: "UnlinkDataset",
			Handler:    _StorageInsights_UnlinkDataset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/storageinsights/v1/storageinsights.proto",
}
