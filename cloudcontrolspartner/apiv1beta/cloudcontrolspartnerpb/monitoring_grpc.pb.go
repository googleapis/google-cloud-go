// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/cloudcontrolspartner/v1beta/monitoring.proto

package cloudcontrolspartnerpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CloudControlsPartnerMonitoring_ListViolations_FullMethodName = "/google.cloud.cloudcontrolspartner.v1beta.CloudControlsPartnerMonitoring/ListViolations"
	CloudControlsPartnerMonitoring_GetViolation_FullMethodName   = "/google.cloud.cloudcontrolspartner.v1beta.CloudControlsPartnerMonitoring/GetViolation"
)

// CloudControlsPartnerMonitoringClient is the client API for CloudControlsPartnerMonitoring service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudControlsPartnerMonitoringClient interface {
	// Lists Violations for a workload
	// Callers may also choose to read across multiple Customers or for a single
	// customer as per
	// [AIP-159](https://google.aip.dev/159) by using '-' (the hyphen or dash
	// character) as a wildcard character instead of {customer} & {workload}.
	// Format:
	// `organizations/{organization}/locations/{location}/customers/{customer}/workloads/{workload}`
	ListViolations(ctx context.Context, in *ListViolationsRequest, opts ...grpc.CallOption) (*ListViolationsResponse, error)
	// Gets details of a single Violation.
	GetViolation(ctx context.Context, in *GetViolationRequest, opts ...grpc.CallOption) (*Violation, error)
}

type cloudControlsPartnerMonitoringClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudControlsPartnerMonitoringClient(cc grpc.ClientConnInterface) CloudControlsPartnerMonitoringClient {
	return &cloudControlsPartnerMonitoringClient{cc}
}

func (c *cloudControlsPartnerMonitoringClient) ListViolations(ctx context.Context, in *ListViolationsRequest, opts ...grpc.CallOption) (*ListViolationsResponse, error) {
	out := new(ListViolationsResponse)
	err := c.cc.Invoke(ctx, CloudControlsPartnerMonitoring_ListViolations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudControlsPartnerMonitoringClient) GetViolation(ctx context.Context, in *GetViolationRequest, opts ...grpc.CallOption) (*Violation, error) {
	out := new(Violation)
	err := c.cc.Invoke(ctx, CloudControlsPartnerMonitoring_GetViolation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudControlsPartnerMonitoringServer is the server API for CloudControlsPartnerMonitoring service.
// All implementations should embed UnimplementedCloudControlsPartnerMonitoringServer
// for forward compatibility
type CloudControlsPartnerMonitoringServer interface {
	// Lists Violations for a workload
	// Callers may also choose to read across multiple Customers or for a single
	// customer as per
	// [AIP-159](https://google.aip.dev/159) by using '-' (the hyphen or dash
	// character) as a wildcard character instead of {customer} & {workload}.
	// Format:
	// `organizations/{organization}/locations/{location}/customers/{customer}/workloads/{workload}`
	ListViolations(context.Context, *ListViolationsRequest) (*ListViolationsResponse, error)
	// Gets details of a single Violation.
	GetViolation(context.Context, *GetViolationRequest) (*Violation, error)
}

// UnimplementedCloudControlsPartnerMonitoringServer should be embedded to have forward compatible implementations.
type UnimplementedCloudControlsPartnerMonitoringServer struct {
}

func (UnimplementedCloudControlsPartnerMonitoringServer) ListViolations(context.Context, *ListViolationsRequest) (*ListViolationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListViolations not implemented")
}
func (UnimplementedCloudControlsPartnerMonitoringServer) GetViolation(context.Context, *GetViolationRequest) (*Violation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetViolation not implemented")
}

// UnsafeCloudControlsPartnerMonitoringServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudControlsPartnerMonitoringServer will
// result in compilation errors.
type UnsafeCloudControlsPartnerMonitoringServer interface {
	mustEmbedUnimplementedCloudControlsPartnerMonitoringServer()
}

func RegisterCloudControlsPartnerMonitoringServer(s grpc.ServiceRegistrar, srv CloudControlsPartnerMonitoringServer) {
	s.RegisterService(&CloudControlsPartnerMonitoring_ServiceDesc, srv)
}

func _CloudControlsPartnerMonitoring_ListViolations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListViolationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudControlsPartnerMonitoringServer).ListViolations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudControlsPartnerMonitoring_ListViolations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudControlsPartnerMonitoringServer).ListViolations(ctx, req.(*ListViolationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudControlsPartnerMonitoring_GetViolation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetViolationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudControlsPartnerMonitoringServer).GetViolation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudControlsPartnerMonitoring_GetViolation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudControlsPartnerMonitoringServer).GetViolation(ctx, req.(*GetViolationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudControlsPartnerMonitoring_ServiceDesc is the grpc.ServiceDesc for CloudControlsPartnerMonitoring service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudControlsPartnerMonitoring_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.cloudcontrolspartner.v1beta.CloudControlsPartnerMonitoring",
	HandlerType: (*CloudControlsPartnerMonitoringServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListViolations",
			Handler:    _CloudControlsPartnerMonitoring_ListViolations_Handler,
		},
		{
			MethodName: "GetViolation",
			Handler:    _CloudControlsPartnerMonitoring_GetViolation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/cloudcontrolspartner/v1beta/monitoring.proto",
}
