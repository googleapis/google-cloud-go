// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package retail

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"math"
	"net/http"
	"net/url"
	"time"

	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	retailpb "cloud.google.com/go/retail/apiv2beta/retailpb"
	gax "github.com/googleapis/gax-go/v2"
	"google.golang.org/api/googleapi"
	"google.golang.org/api/iterator"
	"google.golang.org/api/option"
	"google.golang.org/api/option/internaloption"
	gtransport "google.golang.org/api/transport/grpc"
	httptransport "google.golang.org/api/transport/http"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
)

var newGenerativeQuestionClientHook clientHook

// GenerativeQuestionCallOptions contains the retry settings for each method of GenerativeQuestionClient.
type GenerativeQuestionCallOptions struct {
	UpdateGenerativeQuestionsFeatureConfig []gax.CallOption
	GetGenerativeQuestionsFeatureConfig    []gax.CallOption
	ListGenerativeQuestionConfigs          []gax.CallOption
	UpdateGenerativeQuestionConfig         []gax.CallOption
	BatchUpdateGenerativeQuestionConfigs   []gax.CallOption
	GetOperation                           []gax.CallOption
	ListOperations                         []gax.CallOption
}

func defaultGenerativeQuestionGRPCClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("retail.googleapis.com:443"),
		internaloption.WithDefaultEndpointTemplate("retail.UNIVERSE_DOMAIN:443"),
		internaloption.WithDefaultMTLSEndpoint("retail.mtls.googleapis.com:443"),
		internaloption.WithDefaultUniverseDomain("googleapis.com"),
		internaloption.WithDefaultAudience("https://retail.googleapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableJwtWithScope(),
		internaloption.EnableNewAuthLibrary(),
		option.WithGRPCDialOption(grpc.WithDefaultCallOptions(
			grpc.MaxCallRecvMsgSize(math.MaxInt32))),
	}
}

func defaultGenerativeQuestionCallOptions() *GenerativeQuestionCallOptions {
	return &GenerativeQuestionCallOptions{
		UpdateGenerativeQuestionsFeatureConfig: []gax.CallOption{},
		GetGenerativeQuestionsFeatureConfig:    []gax.CallOption{},
		ListGenerativeQuestionConfigs:          []gax.CallOption{},
		UpdateGenerativeQuestionConfig:         []gax.CallOption{},
		BatchUpdateGenerativeQuestionConfigs:   []gax.CallOption{},
		GetOperation:                           []gax.CallOption{},
		ListOperations: []gax.CallOption{
			gax.WithTimeout(300000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
					codes.DeadlineExceeded,
				}, gax.Backoff{
					Initial:    100 * time.Millisecond,
					Max:        300000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
	}
}

func defaultGenerativeQuestionRESTCallOptions() *GenerativeQuestionCallOptions {
	return &GenerativeQuestionCallOptions{
		UpdateGenerativeQuestionsFeatureConfig: []gax.CallOption{},
		GetGenerativeQuestionsFeatureConfig:    []gax.CallOption{},
		ListGenerativeQuestionConfigs:          []gax.CallOption{},
		UpdateGenerativeQuestionConfig:         []gax.CallOption{},
		BatchUpdateGenerativeQuestionConfigs:   []gax.CallOption{},
		GetOperation:                           []gax.CallOption{},
		ListOperations: []gax.CallOption{
			gax.WithTimeout(300000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnHTTPCodes(gax.Backoff{
					Initial:    100 * time.Millisecond,
					Max:        300000 * time.Millisecond,
					Multiplier: 1.30,
				},
					http.StatusServiceUnavailable,
					http.StatusGatewayTimeout)
			}),
		},
	}
}

// internalGenerativeQuestionClient is an interface that defines the methods available from Vertex AI Search for Retail API.
type internalGenerativeQuestionClient interface {
	Close() error
	setGoogleClientInfo(...string)
	Connection() *grpc.ClientConn
	UpdateGenerativeQuestionsFeatureConfig(context.Context, *retailpb.UpdateGenerativeQuestionsFeatureConfigRequest, ...gax.CallOption) (*retailpb.GenerativeQuestionsFeatureConfig, error)
	GetGenerativeQuestionsFeatureConfig(context.Context, *retailpb.GetGenerativeQuestionsFeatureConfigRequest, ...gax.CallOption) (*retailpb.GenerativeQuestionsFeatureConfig, error)
	ListGenerativeQuestionConfigs(context.Context, *retailpb.ListGenerativeQuestionConfigsRequest, ...gax.CallOption) (*retailpb.ListGenerativeQuestionConfigsResponse, error)
	UpdateGenerativeQuestionConfig(context.Context, *retailpb.UpdateGenerativeQuestionConfigRequest, ...gax.CallOption) (*retailpb.GenerativeQuestionConfig, error)
	BatchUpdateGenerativeQuestionConfigs(context.Context, *retailpb.BatchUpdateGenerativeQuestionConfigsRequest, ...gax.CallOption) (*retailpb.BatchUpdateGenerativeQuestionConfigsResponse, error)
	GetOperation(context.Context, *longrunningpb.GetOperationRequest, ...gax.CallOption) (*longrunningpb.Operation, error)
	ListOperations(context.Context, *longrunningpb.ListOperationsRequest, ...gax.CallOption) *OperationIterator
}

// GenerativeQuestionClient is a client for interacting with Vertex AI Search for Retail API.
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
//
// Service for managing LLM generated questions in search serving.
type GenerativeQuestionClient struct {
	// The internal transport-dependent client.
	internalClient internalGenerativeQuestionClient

	// The call options for this service.
	CallOptions *GenerativeQuestionCallOptions
}

// Wrapper methods routed to the internal client.

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *GenerativeQuestionClient) Close() error {
	return c.internalClient.Close()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *GenerativeQuestionClient) setGoogleClientInfo(keyval ...string) {
	c.internalClient.setGoogleClientInfo(keyval...)
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *GenerativeQuestionClient) Connection() *grpc.ClientConn {
	return c.internalClient.Connection()
}

// UpdateGenerativeQuestionsFeatureConfig manages overal generative question feature state – enables toggling
// feature on and off.
func (c *GenerativeQuestionClient) UpdateGenerativeQuestionsFeatureConfig(ctx context.Context, req *retailpb.UpdateGenerativeQuestionsFeatureConfigRequest, opts ...gax.CallOption) (*retailpb.GenerativeQuestionsFeatureConfig, error) {
	return c.internalClient.UpdateGenerativeQuestionsFeatureConfig(ctx, req, opts...)
}

// GetGenerativeQuestionsFeatureConfig manages overal generative question feature state – enables toggling
// feature on and off.
func (c *GenerativeQuestionClient) GetGenerativeQuestionsFeatureConfig(ctx context.Context, req *retailpb.GetGenerativeQuestionsFeatureConfigRequest, opts ...gax.CallOption) (*retailpb.GenerativeQuestionsFeatureConfig, error) {
	return c.internalClient.GetGenerativeQuestionsFeatureConfig(ctx, req, opts...)
}

// ListGenerativeQuestionConfigs returns all questions for a given catalog.
func (c *GenerativeQuestionClient) ListGenerativeQuestionConfigs(ctx context.Context, req *retailpb.ListGenerativeQuestionConfigsRequest, opts ...gax.CallOption) (*retailpb.ListGenerativeQuestionConfigsResponse, error) {
	return c.internalClient.ListGenerativeQuestionConfigs(ctx, req, opts...)
}

// UpdateGenerativeQuestionConfig allows management of individual questions.
func (c *GenerativeQuestionClient) UpdateGenerativeQuestionConfig(ctx context.Context, req *retailpb.UpdateGenerativeQuestionConfigRequest, opts ...gax.CallOption) (*retailpb.GenerativeQuestionConfig, error) {
	return c.internalClient.UpdateGenerativeQuestionConfig(ctx, req, opts...)
}

// BatchUpdateGenerativeQuestionConfigs allows management of multiple questions.
func (c *GenerativeQuestionClient) BatchUpdateGenerativeQuestionConfigs(ctx context.Context, req *retailpb.BatchUpdateGenerativeQuestionConfigsRequest, opts ...gax.CallOption) (*retailpb.BatchUpdateGenerativeQuestionConfigsResponse, error) {
	return c.internalClient.BatchUpdateGenerativeQuestionConfigs(ctx, req, opts...)
}

// GetOperation is a utility method from google.longrunning.Operations.
func (c *GenerativeQuestionClient) GetOperation(ctx context.Context, req *longrunningpb.GetOperationRequest, opts ...gax.CallOption) (*longrunningpb.Operation, error) {
	return c.internalClient.GetOperation(ctx, req, opts...)
}

// ListOperations is a utility method from google.longrunning.Operations.
func (c *GenerativeQuestionClient) ListOperations(ctx context.Context, req *longrunningpb.ListOperationsRequest, opts ...gax.CallOption) *OperationIterator {
	return c.internalClient.ListOperations(ctx, req, opts...)
}

// generativeQuestionGRPCClient is a client for interacting with Vertex AI Search for Retail API over gRPC transport.
//
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type generativeQuestionGRPCClient struct {
	// Connection pool of gRPC connections to the service.
	connPool gtransport.ConnPool

	// Points back to the CallOptions field of the containing GenerativeQuestionClient
	CallOptions **GenerativeQuestionCallOptions

	// The gRPC API client.
	generativeQuestionClient retailpb.GenerativeQuestionServiceClient

	operationsClient longrunningpb.OperationsClient

	// The x-goog-* metadata to be sent with each request.
	xGoogHeaders []string
}

// NewGenerativeQuestionClient creates a new generative question service client based on gRPC.
// The returned client must be Closed when it is done being used to clean up its underlying connections.
//
// Service for managing LLM generated questions in search serving.
func NewGenerativeQuestionClient(ctx context.Context, opts ...option.ClientOption) (*GenerativeQuestionClient, error) {
	clientOpts := defaultGenerativeQuestionGRPCClientOptions()
	if newGenerativeQuestionClientHook != nil {
		hookOpts, err := newGenerativeQuestionClientHook(ctx, clientHookParams{})
		if err != nil {
			return nil, err
		}
		clientOpts = append(clientOpts, hookOpts...)
	}

	connPool, err := gtransport.DialPool(ctx, append(clientOpts, opts...)...)
	if err != nil {
		return nil, err
	}
	client := GenerativeQuestionClient{CallOptions: defaultGenerativeQuestionCallOptions()}

	c := &generativeQuestionGRPCClient{
		connPool:                 connPool,
		generativeQuestionClient: retailpb.NewGenerativeQuestionServiceClient(connPool),
		CallOptions:              &client.CallOptions,
		operationsClient:         longrunningpb.NewOperationsClient(connPool),
	}
	c.setGoogleClientInfo()

	client.internalClient = c

	return &client, nil
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *generativeQuestionGRPCClient) Connection() *grpc.ClientConn {
	return c.connPool.Conn()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *generativeQuestionGRPCClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", gax.GoVersion}, keyval...)
	kv = append(kv, "gapic", getVersionClient(), "gax", gax.Version, "grpc", grpc.Version)
	c.xGoogHeaders = []string{
		"x-goog-api-client", gax.XGoogHeader(kv...),
	}
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *generativeQuestionGRPCClient) Close() error {
	return c.connPool.Close()
}

// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type generativeQuestionRESTClient struct {
	// The http endpoint to connect to.
	endpoint string

	// The http client.
	httpClient *http.Client

	// The x-goog-* headers to be sent with each request.
	xGoogHeaders []string

	// Points back to the CallOptions field of the containing GenerativeQuestionClient
	CallOptions **GenerativeQuestionCallOptions
}

// NewGenerativeQuestionRESTClient creates a new generative question service rest client.
//
// Service for managing LLM generated questions in search serving.
func NewGenerativeQuestionRESTClient(ctx context.Context, opts ...option.ClientOption) (*GenerativeQuestionClient, error) {
	clientOpts := append(defaultGenerativeQuestionRESTClientOptions(), opts...)
	httpClient, endpoint, err := httptransport.NewClient(ctx, clientOpts...)
	if err != nil {
		return nil, err
	}

	callOpts := defaultGenerativeQuestionRESTCallOptions()
	c := &generativeQuestionRESTClient{
		endpoint:    endpoint,
		httpClient:  httpClient,
		CallOptions: &callOpts,
	}
	c.setGoogleClientInfo()

	return &GenerativeQuestionClient{internalClient: c, CallOptions: callOpts}, nil
}

func defaultGenerativeQuestionRESTClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("https://retail.googleapis.com"),
		internaloption.WithDefaultEndpointTemplate("https://retail.UNIVERSE_DOMAIN"),
		internaloption.WithDefaultMTLSEndpoint("https://retail.mtls.googleapis.com"),
		internaloption.WithDefaultUniverseDomain("googleapis.com"),
		internaloption.WithDefaultAudience("https://retail.googleapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableNewAuthLibrary(),
	}
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *generativeQuestionRESTClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", gax.GoVersion}, keyval...)
	kv = append(kv, "gapic", getVersionClient(), "gax", gax.Version, "rest", "UNKNOWN")
	c.xGoogHeaders = []string{
		"x-goog-api-client", gax.XGoogHeader(kv...),
	}
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *generativeQuestionRESTClient) Close() error {
	// Replace httpClient with nil to force cleanup.
	c.httpClient = nil
	return nil
}

// Connection returns a connection to the API service.
//
// Deprecated: This method always returns nil.
func (c *generativeQuestionRESTClient) Connection() *grpc.ClientConn {
	return nil
}
func (c *generativeQuestionGRPCClient) UpdateGenerativeQuestionsFeatureConfig(ctx context.Context, req *retailpb.UpdateGenerativeQuestionsFeatureConfigRequest, opts ...gax.CallOption) (*retailpb.GenerativeQuestionsFeatureConfig, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "generative_questions_feature_config.catalog", url.QueryEscape(req.GetGenerativeQuestionsFeatureConfig().GetCatalog()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).UpdateGenerativeQuestionsFeatureConfig[0:len((*c.CallOptions).UpdateGenerativeQuestionsFeatureConfig):len((*c.CallOptions).UpdateGenerativeQuestionsFeatureConfig)], opts...)
	var resp *retailpb.GenerativeQuestionsFeatureConfig
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.generativeQuestionClient.UpdateGenerativeQuestionsFeatureConfig(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *generativeQuestionGRPCClient) GetGenerativeQuestionsFeatureConfig(ctx context.Context, req *retailpb.GetGenerativeQuestionsFeatureConfigRequest, opts ...gax.CallOption) (*retailpb.GenerativeQuestionsFeatureConfig, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "catalog", url.QueryEscape(req.GetCatalog()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).GetGenerativeQuestionsFeatureConfig[0:len((*c.CallOptions).GetGenerativeQuestionsFeatureConfig):len((*c.CallOptions).GetGenerativeQuestionsFeatureConfig)], opts...)
	var resp *retailpb.GenerativeQuestionsFeatureConfig
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.generativeQuestionClient.GetGenerativeQuestionsFeatureConfig(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *generativeQuestionGRPCClient) ListGenerativeQuestionConfigs(ctx context.Context, req *retailpb.ListGenerativeQuestionConfigsRequest, opts ...gax.CallOption) (*retailpb.ListGenerativeQuestionConfigsResponse, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ListGenerativeQuestionConfigs[0:len((*c.CallOptions).ListGenerativeQuestionConfigs):len((*c.CallOptions).ListGenerativeQuestionConfigs)], opts...)
	var resp *retailpb.ListGenerativeQuestionConfigsResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.generativeQuestionClient.ListGenerativeQuestionConfigs(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *generativeQuestionGRPCClient) UpdateGenerativeQuestionConfig(ctx context.Context, req *retailpb.UpdateGenerativeQuestionConfigRequest, opts ...gax.CallOption) (*retailpb.GenerativeQuestionConfig, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "generative_question_config.catalog", url.QueryEscape(req.GetGenerativeQuestionConfig().GetCatalog()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).UpdateGenerativeQuestionConfig[0:len((*c.CallOptions).UpdateGenerativeQuestionConfig):len((*c.CallOptions).UpdateGenerativeQuestionConfig)], opts...)
	var resp *retailpb.GenerativeQuestionConfig
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.generativeQuestionClient.UpdateGenerativeQuestionConfig(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *generativeQuestionGRPCClient) BatchUpdateGenerativeQuestionConfigs(ctx context.Context, req *retailpb.BatchUpdateGenerativeQuestionConfigsRequest, opts ...gax.CallOption) (*retailpb.BatchUpdateGenerativeQuestionConfigsResponse, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).BatchUpdateGenerativeQuestionConfigs[0:len((*c.CallOptions).BatchUpdateGenerativeQuestionConfigs):len((*c.CallOptions).BatchUpdateGenerativeQuestionConfigs)], opts...)
	var resp *retailpb.BatchUpdateGenerativeQuestionConfigsResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.generativeQuestionClient.BatchUpdateGenerativeQuestionConfigs(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *generativeQuestionGRPCClient) GetOperation(ctx context.Context, req *longrunningpb.GetOperationRequest, opts ...gax.CallOption) (*longrunningpb.Operation, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).GetOperation[0:len((*c.CallOptions).GetOperation):len((*c.CallOptions).GetOperation)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.operationsClient.GetOperation(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *generativeQuestionGRPCClient) ListOperations(ctx context.Context, req *longrunningpb.ListOperationsRequest, opts ...gax.CallOption) *OperationIterator {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ListOperations[0:len((*c.CallOptions).ListOperations):len((*c.CallOptions).ListOperations)], opts...)
	it := &OperationIterator{}
	req = proto.Clone(req).(*longrunningpb.ListOperationsRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*longrunningpb.Operation, string, error) {
		resp := &longrunningpb.ListOperationsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = c.operationsClient.ListOperations(ctx, req, settings.GRPC...)
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetOperations(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

// UpdateGenerativeQuestionsFeatureConfig manages overal generative question feature state – enables toggling
// feature on and off.
func (c *generativeQuestionRESTClient) UpdateGenerativeQuestionsFeatureConfig(ctx context.Context, req *retailpb.UpdateGenerativeQuestionsFeatureConfigRequest, opts ...gax.CallOption) (*retailpb.GenerativeQuestionsFeatureConfig, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	body := req.GetGenerativeQuestionsFeatureConfig()
	jsonReq, err := m.Marshal(body)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v2beta/%v/generativeQuestionFeature", req.GetGenerativeQuestionsFeatureConfig().GetCatalog())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")
	if req.GetUpdateMask() != nil {
		field, err := protojson.Marshal(req.GetUpdateMask())
		if err != nil {
			return nil, err
		}
		params.Add("updateMask", string(field[1:len(field)-1]))
	}

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "generative_questions_feature_config.catalog", url.QueryEscape(req.GetGenerativeQuestionsFeatureConfig().GetCatalog()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).UpdateGenerativeQuestionsFeatureConfig[0:len((*c.CallOptions).UpdateGenerativeQuestionsFeatureConfig):len((*c.CallOptions).UpdateGenerativeQuestionsFeatureConfig)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &retailpb.GenerativeQuestionsFeatureConfig{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("PATCH", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := io.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// GetGenerativeQuestionsFeatureConfig manages overal generative question feature state – enables toggling
// feature on and off.
func (c *generativeQuestionRESTClient) GetGenerativeQuestionsFeatureConfig(ctx context.Context, req *retailpb.GetGenerativeQuestionsFeatureConfigRequest, opts ...gax.CallOption) (*retailpb.GenerativeQuestionsFeatureConfig, error) {
	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v2beta/%v/generativeQuestionFeature", req.GetCatalog())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "catalog", url.QueryEscape(req.GetCatalog()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).GetGenerativeQuestionsFeatureConfig[0:len((*c.CallOptions).GetGenerativeQuestionsFeatureConfig):len((*c.CallOptions).GetGenerativeQuestionsFeatureConfig)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &retailpb.GenerativeQuestionsFeatureConfig{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := io.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// ListGenerativeQuestionConfigs returns all questions for a given catalog.
func (c *generativeQuestionRESTClient) ListGenerativeQuestionConfigs(ctx context.Context, req *retailpb.ListGenerativeQuestionConfigsRequest, opts ...gax.CallOption) (*retailpb.ListGenerativeQuestionConfigsResponse, error) {
	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v2beta/%v/generativeQuestions", req.GetParent())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).ListGenerativeQuestionConfigs[0:len((*c.CallOptions).ListGenerativeQuestionConfigs):len((*c.CallOptions).ListGenerativeQuestionConfigs)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &retailpb.ListGenerativeQuestionConfigsResponse{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := io.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// UpdateGenerativeQuestionConfig allows management of individual questions.
func (c *generativeQuestionRESTClient) UpdateGenerativeQuestionConfig(ctx context.Context, req *retailpb.UpdateGenerativeQuestionConfigRequest, opts ...gax.CallOption) (*retailpb.GenerativeQuestionConfig, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	body := req.GetGenerativeQuestionConfig()
	jsonReq, err := m.Marshal(body)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v2beta/%v/generativeQuestion", req.GetGenerativeQuestionConfig().GetCatalog())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")
	if req.GetUpdateMask() != nil {
		field, err := protojson.Marshal(req.GetUpdateMask())
		if err != nil {
			return nil, err
		}
		params.Add("updateMask", string(field[1:len(field)-1]))
	}

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "generative_question_config.catalog", url.QueryEscape(req.GetGenerativeQuestionConfig().GetCatalog()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).UpdateGenerativeQuestionConfig[0:len((*c.CallOptions).UpdateGenerativeQuestionConfig):len((*c.CallOptions).UpdateGenerativeQuestionConfig)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &retailpb.GenerativeQuestionConfig{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("PATCH", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := io.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// BatchUpdateGenerativeQuestionConfigs allows management of multiple questions.
func (c *generativeQuestionRESTClient) BatchUpdateGenerativeQuestionConfigs(ctx context.Context, req *retailpb.BatchUpdateGenerativeQuestionConfigsRequest, opts ...gax.CallOption) (*retailpb.BatchUpdateGenerativeQuestionConfigsResponse, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	jsonReq, err := m.Marshal(req)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v2beta/%v/generativeQuestion:batchUpdate", req.GetParent())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).BatchUpdateGenerativeQuestionConfigs[0:len((*c.CallOptions).BatchUpdateGenerativeQuestionConfigs):len((*c.CallOptions).BatchUpdateGenerativeQuestionConfigs)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &retailpb.BatchUpdateGenerativeQuestionConfigsResponse{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := io.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// GetOperation is a utility method from google.longrunning.Operations.
func (c *generativeQuestionRESTClient) GetOperation(ctx context.Context, req *longrunningpb.GetOperationRequest, opts ...gax.CallOption) (*longrunningpb.Operation, error) {
	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v2beta/%v", req.GetName())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).GetOperation[0:len((*c.CallOptions).GetOperation):len((*c.CallOptions).GetOperation)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &longrunningpb.Operation{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := io.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// ListOperations is a utility method from google.longrunning.Operations.
func (c *generativeQuestionRESTClient) ListOperations(ctx context.Context, req *longrunningpb.ListOperationsRequest, opts ...gax.CallOption) *OperationIterator {
	it := &OperationIterator{}
	req = proto.Clone(req).(*longrunningpb.ListOperationsRequest)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	it.InternalFetch = func(pageSize int, pageToken string) ([]*longrunningpb.Operation, string, error) {
		resp := &longrunningpb.ListOperationsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		baseUrl, err := url.Parse(c.endpoint)
		if err != nil {
			return nil, "", err
		}
		baseUrl.Path += fmt.Sprintf("/v2beta/%v/operations", req.GetName())

		params := url.Values{}
		params.Add("$alt", "json;enum-encoding=int")
		if req.GetFilter() != "" {
			params.Add("filter", fmt.Sprintf("%v", req.GetFilter()))
		}
		if req.GetPageSize() != 0 {
			params.Add("pageSize", fmt.Sprintf("%v", req.GetPageSize()))
		}
		if req.GetPageToken() != "" {
			params.Add("pageToken", fmt.Sprintf("%v", req.GetPageToken()))
		}

		baseUrl.RawQuery = params.Encode()

		// Build HTTP headers from client and context metadata.
		hds := append(c.xGoogHeaders, "Content-Type", "application/json")
		headers := gax.BuildHeaders(ctx, hds...)
		e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			if settings.Path != "" {
				baseUrl.Path = settings.Path
			}
			httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
			if err != nil {
				return err
			}
			httpReq.Header = headers

			httpRsp, err := c.httpClient.Do(httpReq)
			if err != nil {
				return err
			}
			defer httpRsp.Body.Close()

			if err = googleapi.CheckResponse(httpRsp); err != nil {
				return err
			}

			buf, err := io.ReadAll(httpRsp.Body)
			if err != nil {
				return err
			}

			if err := unm.Unmarshal(buf, resp); err != nil {
				return err
			}

			return nil
		}, opts...)
		if e != nil {
			return nil, "", e
		}
		it.Response = resp
		return resp.GetOperations(), resp.GetNextPageToken(), nil
	}

	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}
