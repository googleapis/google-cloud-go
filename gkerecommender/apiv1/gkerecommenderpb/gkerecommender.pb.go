// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.7
// source: google/cloud/gkerecommender/v1/gkerecommender.proto

package gkerecommenderpb

import (
	reflect "reflect"
	sync "sync"

	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for
// [GkeInferenceQuickstart.FetchModels][google.cloud.gkerecommender.v1.GkeInferenceQuickstart.FetchModels].
type FetchModelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The target number of results to return in a single response.
	// If not specified, a default value will be chosen by the service.
	// Note that the response may include a partial list and a caller should
	// only rely on the response's
	// [next_page_token][google.cloud.gkerecommender.v1.FetchModelsResponse.next_page_token]
	// to determine if there are more instances left to be queried.
	PageSize *int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	// Optional. The value of
	// [next_page_token][google.cloud.gkerecommender.v1.FetchModelsResponse.next_page_token]
	// received from a previous `FetchModelsRequest` call.
	// Provide this to retrieve the subsequent page in a multi-page list of
	// results. When paginating, all other parameters provided to
	// `FetchModelsRequest` must match the call that provided the page token.
	PageToken *string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
}

func (x *FetchModelsRequest) Reset() {
	*x = FetchModelsRequest{}
	mi := &file_google_cloud_gkerecommender_v1_gkerecommender_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchModelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchModelsRequest) ProtoMessage() {}

func (x *FetchModelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_gkerecommender_v1_gkerecommender_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchModelsRequest.ProtoReflect.Descriptor instead.
func (*FetchModelsRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_gkerecommender_v1_gkerecommender_proto_rawDescGZIP(), []int{0}
}

func (x *FetchModelsRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *FetchModelsRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

// Response message for
// [GkeInferenceQuickstart.FetchModels][google.cloud.gkerecommender.v1.GkeInferenceQuickstart.FetchModels].
type FetchModelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. List of available models. Open-source models follow the
	// Huggingface Hub `owner/model_name` format.
	Models []string `protobuf:"bytes,1,rep,name=models,proto3" json:"models,omitempty"`
	// Output only. A token which may be sent as
	// [page_token][FetchModelsResponse.page_token] in a subsequent
	// `FetchModelsResponse` call to retrieve the next page of results.
	// If this field is omitted or empty, then there are no more results to
	// return.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *FetchModelsResponse) Reset() {
	*x = FetchModelsResponse{}
	mi := &file_google_cloud_gkerecommender_v1_gkerecommender_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchModelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchModelsResponse) ProtoMessage() {}

func (x *FetchModelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_gkerecommender_v1_gkerecommender_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchModelsResponse.ProtoReflect.Descriptor instead.
func (*FetchModelsResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_gkerecommender_v1_gkerecommender_proto_rawDescGZIP(), []int{1}
}

func (x *FetchModelsResponse) GetModels() []string {
	if x != nil {
		return x.Models
	}
	return nil
}

func (x *FetchModelsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Request message for
// [GkeInferenceQuickstart.FetchModelServers][google.cloud.gkerecommender.v1.GkeInferenceQuickstart.FetchModelServers].
type FetchModelServersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The model for which to list model servers. Open-source models
	// follow the Huggingface Hub `owner/model_name` format. Use
	// [GkeInferenceQuickstart.FetchModels][google.cloud.gkerecommender.v1.GkeInferenceQuickstart.FetchModels]
	// to find available models.
	Model string `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
	// Optional. The target number of results to return in a single response.
	// If not specified, a default value will be chosen by the service.
	// Note that the response may include a partial list and a caller should
	// only rely on the response's
	// [next_page_token][google.cloud.gkerecommender.v1.FetchModelServersResponse.next_page_token]
	// to determine if there are more instances left to be queried.
	PageSize *int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	// Optional. The value of
	// [next_page_token][google.cloud.gkerecommender.v1.FetchModelServersResponse.next_page_token]
	// received from a previous `FetchModelServersRequest` call.
	// Provide this to retrieve the subsequent page in a multi-page list of
	// results. When paginating, all other parameters provided to
	// `FetchModelServersRequest` must match the call that provided the page
	// token.
	PageToken *string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
}

func (x *FetchModelServersRequest) Reset() {
	*x = FetchModelServersRequest{}
	mi := &file_google_cloud_gkerecommender_v1_gkerecommender_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchModelServersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchModelServersRequest) ProtoMessage() {}

func (x *FetchModelServersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_gkerecommender_v1_gkerecommender_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchModelServersRequest.ProtoReflect.Descriptor instead.
func (*FetchModelServersRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_gkerecommender_v1_gkerecommender_proto_rawDescGZIP(), []int{2}
}

func (x *FetchModelServersRequest) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *FetchModelServersRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *FetchModelServersRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

// Response message for
// [GkeInferenceQuickstart.FetchModelServers][google.cloud.gkerecommender.v1.GkeInferenceQuickstart.FetchModelServers].
type FetchModelServersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. List of available model servers. Open-source model servers use
	// simplified, lowercase names (e.g., `vllm`).
	ModelServers []string `protobuf:"bytes,1,rep,name=model_servers,json=modelServers,proto3" json:"model_servers,omitempty"`
	// Output only. A token which may be sent as
	// [page_token][FetchModelServersResponse.page_token] in a subsequent
	// `FetchModelServersResponse` call to retrieve the next page of results.
	// If this field is omitted or empty, then there are no more results to
	// return.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *FetchModelServersResponse) Reset() {
	*x = FetchModelServersResponse{}
	mi := &file_google_cloud_gkerecommender_v1_gkerecommender_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchModelServersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchModelServersResponse) ProtoMessage() {}

func (x *FetchModelServersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_gkerecommender_v1_gkerecommender_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchModelServersResponse.ProtoReflect.Descriptor instead.
func (*FetchModelServersResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_gkerecommender_v1_gkerecommender_proto_rawDescGZIP(), []int{3}
}

func (x *FetchModelServersResponse) GetModelServers() []string {
	if x != nil {
		return x.ModelServers
	}
	return nil
}

func (x *FetchModelServersResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Request message for
// [GkeInferenceQuickstart.FetchModelServerVersions][google.cloud.gkerecommender.v1.GkeInferenceQuickstart.FetchModelServerVersions].
type FetchModelServerVersionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The model for which to list model server versions. Open-source
	// models follow the Huggingface Hub `owner/model_name` format. Use
	// [GkeInferenceQuickstart.FetchModels][google.cloud.gkerecommender.v1.GkeInferenceQuickstart.FetchModels]
	// to find available models.
	Model string `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
	// Required. The model server for which to list versions. Open-source model
	// servers use simplified, lowercase names (e.g., `vllm`). Use
	// [GkeInferenceQuickstart.FetchModelServers][google.cloud.gkerecommender.v1.GkeInferenceQuickstart.FetchModelServers]
	// to find available model servers.
	ModelServer string `protobuf:"bytes,2,opt,name=model_server,json=modelServer,proto3" json:"model_server,omitempty"`
	// Optional. The target number of results to return in a single response.
	// If not specified, a default value will be chosen by the service.
	// Note that the response may include a partial list and a caller should
	// only rely on the response's
	// [next_page_token][google.cloud.gkerecommender.v1.FetchModelServerVersionsResponse.next_page_token]
	// to determine if there are more instances left to be queried.
	PageSize *int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	// Optional. The value of
	// [next_page_token][google.cloud.gkerecommender.v1.FetchModelServerVersionsResponse.next_page_token]
	// received from a previous `FetchModelServerVersionsRequest` call.
	// Provide this to retrieve the subsequent page in a multi-page list of
	// results. When paginating, all other parameters provided to
	// `FetchModelServerVersionsRequest` must match the call that provided the
	// page token.
	PageToken *string `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
}

func (x *FetchModelServerVersionsRequest) Reset() {
	*x = FetchModelServerVersionsRequest{}
	mi := &file_google_cloud_gkerecommender_v1_gkerecommender_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchModelServerVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchModelServerVersionsRequest) ProtoMessage() {}

func (x *FetchModelServerVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_gkerecommender_v1_gkerecommender_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchModelServerVersionsRequest.ProtoReflect.Descriptor instead.
func (*FetchModelServerVersionsRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_gkerecommender_v1_gkerecommender_proto_rawDescGZIP(), []int{4}
}

func (x *FetchModelServerVersionsRequest) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *FetchModelServerVersionsRequest) GetModelServer() string {
	if x != nil {
		return x.ModelServer
	}
	return ""
}

func (x *FetchModelServerVersionsRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *FetchModelServerVersionsRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

// Response message for
// [GkeInferenceQuickstart.FetchModelServerVersions][google.cloud.gkerecommender.v1.GkeInferenceQuickstart.FetchModelServerVersions].
type FetchModelServerVersionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. A list of available model server versions.
	ModelServerVersions []string `protobuf:"bytes,1,rep,name=model_server_versions,json=modelServerVersions,proto3" json:"model_server_versions,omitempty"`
	// Output only. A token which may be sent as
	// [page_token][FetchModelServerVersionsResponse.page_token] in a subsequent
	// `FetchModelServerVersionsResponse` call to retrieve the next page of
	// results. If this field is omitted or empty, then there are no more results
	// to return.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *FetchModelServerVersionsResponse) Reset() {
	*x = FetchModelServerVersionsResponse{}
	mi := &file_google_cloud_gkerecommender_v1_gkerecommender_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchModelServerVersionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchModelServerVersionsResponse) ProtoMessage() {}

func (x *FetchModelServerVersionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_gkerecommender_v1_gkerecommender_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchModelServerVersionsResponse.ProtoReflect.Descriptor instead.
func (*FetchModelServerVersionsResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_gkerecommender_v1_gkerecommender_proto_rawDescGZIP(), []int{5}
}

func (x *FetchModelServerVersionsResponse) GetModelServerVersions() []string {
	if x != nil {
		return x.ModelServerVersions
	}
	return nil
}

func (x *FetchModelServerVersionsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Request message for
// [GkeInferenceQuickstart.FetchBenchmarkingData][google.cloud.gkerecommender.v1.GkeInferenceQuickstart.FetchBenchmarkingData].
type FetchBenchmarkingDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The model server configuration to get benchmarking data for. Use
	// [GkeInferenceQuickstart.FetchProfiles][google.cloud.gkerecommender.v1.GkeInferenceQuickstart.FetchProfiles]
	// to find valid configurations.
	ModelServerInfo *ModelServerInfo `protobuf:"bytes,1,opt,name=model_server_info,json=modelServerInfo,proto3" json:"model_server_info,omitempty"`
	// Optional. The instance type to filter benchmarking data. Instance types are
	// in the format `a2-highgpu-1g`. If not provided, all instance types for the
	// given profile's `model_server_info` will be returned. Use
	// [GkeInferenceQuickstart.FetchProfiles][google.cloud.gkerecommender.v1.GkeInferenceQuickstart.FetchProfiles]
	// to find available instance types.
	InstanceType string `protobuf:"bytes,3,opt,name=instance_type,json=instanceType,proto3" json:"instance_type,omitempty"`
	// Optional. The pricing model to use for the benchmarking data. Defaults to
	// `spot`.
	PricingModel string `protobuf:"bytes,4,opt,name=pricing_model,json=pricingModel,proto3" json:"pricing_model,omitempty"`
}

func (x *FetchBenchmarkingDataRequest) Reset() {
	*x = FetchBenchmarkingDataRequest{}
	mi := &file_google_cloud_gkerecommender_v1_gkerecommender_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchBenchmarkingDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchBenchmarkingDataRequest) ProtoMessage() {}

func (x *FetchBenchmarkingDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_gkerecommender_v1_gkerecommender_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchBenchmarkingDataRequest.ProtoReflect.Descriptor instead.
func (*FetchBenchmarkingDataRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_gkerecommender_v1_gkerecommender_proto_rawDescGZIP(), []int{6}
}

func (x *FetchBenchmarkingDataRequest) GetModelServerInfo() *ModelServerInfo {
	if x != nil {
		return x.ModelServerInfo
	}
	return nil
}

func (x *FetchBenchmarkingDataRequest) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *FetchBenchmarkingDataRequest) GetPricingModel() string {
	if x != nil {
		return x.PricingModel
	}
	return ""
}

// Response message for
// [GkeInferenceQuickstart.FetchBenchmarkingData][google.cloud.gkerecommender.v1.GkeInferenceQuickstart.FetchBenchmarkingData].
type FetchBenchmarkingDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. List of profiles containing their respective benchmarking
	// data.
	Profile []*Profile `protobuf:"bytes,1,rep,name=profile,proto3" json:"profile,omitempty"`
}

func (x *FetchBenchmarkingDataResponse) Reset() {
	*x = FetchBenchmarkingDataResponse{}
	mi := &file_google_cloud_gkerecommender_v1_gkerecommender_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchBenchmarkingDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchBenchmarkingDataResponse) ProtoMessage() {}

func (x *FetchBenchmarkingDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_gkerecommender_v1_gkerecommender_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchBenchmarkingDataResponse.ProtoReflect.Descriptor instead.
func (*FetchBenchmarkingDataResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_gkerecommender_v1_gkerecommender_proto_rawDescGZIP(), []int{7}
}

func (x *FetchBenchmarkingDataResponse) GetProfile() []*Profile {
	if x != nil {
		return x.Profile
	}
	return nil
}

// Request message for
// [GkeInferenceQuickstart.FetchProfiles][google.cloud.gkerecommender.v1.GkeInferenceQuickstart.FetchProfiles].
type FetchProfilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The model to filter profiles by. Open-source models follow the
	// Huggingface Hub `owner/model_name` format. If not provided, all models are
	// returned. Use
	// [GkeInferenceQuickstart.FetchModels][google.cloud.gkerecommender.v1.GkeInferenceQuickstart.FetchModels]
	// to find available models.
	Model string `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
	// Optional. The model server to filter profiles by. If not provided, all
	// model servers are returned. Use
	// [GkeInferenceQuickstart.FetchModelServers][google.cloud.gkerecommender.v1.GkeInferenceQuickstart.FetchModelServers]
	// to find available model servers for a given model.
	ModelServer string `protobuf:"bytes,2,opt,name=model_server,json=modelServer,proto3" json:"model_server,omitempty"`
	// Optional. The model server version to filter profiles by. If not provided,
	// all model server versions are returned. Use
	// [GkeInferenceQuickstart.FetchModelServerVersions][google.cloud.gkerecommender.v1.GkeInferenceQuickstart.FetchModelServerVersions]
	// to find available versions for a given model and server.
	ModelServerVersion string `protobuf:"bytes,3,opt,name=model_server_version,json=modelServerVersion,proto3" json:"model_server_version,omitempty"`
	// Optional. The performance requirements to filter profiles. Profiles that do
	// not meet these requirements are filtered out. If not provided, all profiles
	// are returned.
	PerformanceRequirements *PerformanceRequirements `protobuf:"bytes,4,opt,name=performance_requirements,json=performanceRequirements,proto3" json:"performance_requirements,omitempty"`
	// Optional. The target number of results to return in a single response. If
	// not specified, a default value will be chosen by the service. Note that the
	// response may include a partial list and a caller should only rely on the
	// response's
	// [next_page_token][google.cloud.gkerecommender.v1.FetchProfilesResponse.next_page_token]
	// to determine if there are more instances left to be queried.
	PageSize *int32 `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	// Optional. The value of
	// [next_page_token][google.cloud.gkerecommender.v1.FetchProfilesResponse.next_page_token]
	// received from a previous `FetchProfilesRequest` call.
	// Provide this to retrieve the subsequent page in a multi-page list of
	// results. When paginating, all other parameters provided to
	// `FetchProfilesRequest` must match the call that provided the page
	// token.
	PageToken *string `protobuf:"bytes,6,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
}

func (x *FetchProfilesRequest) Reset() {
	*x = FetchProfilesRequest{}
	mi := &file_google_cloud_gkerecommender_v1_gkerecommender_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchProfilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchProfilesRequest) ProtoMessage() {}

func (x *FetchProfilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_gkerecommender_v1_gkerecommender_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchProfilesRequest.ProtoReflect.Descriptor instead.
func (*FetchProfilesRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_gkerecommender_v1_gkerecommender_proto_rawDescGZIP(), []int{8}
}

func (x *FetchProfilesRequest) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *FetchProfilesRequest) GetModelServer() string {
	if x != nil {
		return x.ModelServer
	}
	return ""
}

func (x *FetchProfilesRequest) GetModelServerVersion() string {
	if x != nil {
		return x.ModelServerVersion
	}
	return ""
}

func (x *FetchProfilesRequest) GetPerformanceRequirements() *PerformanceRequirements {
	if x != nil {
		return x.PerformanceRequirements
	}
	return nil
}

func (x *FetchProfilesRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *FetchProfilesRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

// Performance requirements for a profile and or model deployment.
type PerformanceRequirements struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The target Normalized Time Per Output Token (NTPOT) in
	// milliseconds. NTPOT is calculated as `request_latency /
	// total_output_tokens`. If not provided, this target will not be enforced.
	TargetNtpotMilliseconds *int32 `protobuf:"varint,1,opt,name=target_ntpot_milliseconds,json=targetNtpotMilliseconds,proto3,oneof" json:"target_ntpot_milliseconds,omitempty"`
	// Optional. The target Time To First Token (TTFT) in milliseconds. TTFT is
	// the time it takes to generate the first token for a request.  If not
	// provided, this target will not be enforced.
	TargetTtftMilliseconds *int32 `protobuf:"varint,2,opt,name=target_ttft_milliseconds,json=targetTtftMilliseconds,proto3,oneof" json:"target_ttft_milliseconds,omitempty"`
	// Optional. The target cost for running a profile's model server. If not
	// provided, this requirement will not be enforced.
	TargetCost *Cost `protobuf:"bytes,3,opt,name=target_cost,json=targetCost,proto3" json:"target_cost,omitempty"`
}

func (x *PerformanceRequirements) Reset() {
	*x = PerformanceRequirements{}
	mi := &file_google_cloud_gkerecommender_v1_gkerecommender_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PerformanceRequirements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformanceRequirements) ProtoMessage() {}

func (x *PerformanceRequirements) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_gkerecommender_v1_gkerecommender_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformanceRequirements.ProtoReflect.Descriptor instead.
func (*PerformanceRequirements) Descriptor() ([]byte, []int) {
	return file_google_cloud_gkerecommender_v1_gkerecommender_proto_rawDescGZIP(), []int{9}
}

func (x *PerformanceRequirements) GetTargetNtpotMilliseconds() int32 {
	if x != nil && x.TargetNtpotMilliseconds != nil {
		return *x.TargetNtpotMilliseconds
	}
	return 0
}

func (x *PerformanceRequirements) GetTargetTtftMilliseconds() int32 {
	if x != nil && x.TargetTtftMilliseconds != nil {
		return *x.TargetTtftMilliseconds
	}
	return 0
}

func (x *PerformanceRequirements) GetTargetCost() *Cost {
	if x != nil {
		return x.TargetCost
	}
	return nil
}

// Represents an amount of money in a specific currency.
type Amount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The whole units of the amount.
	// For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar.
	Units int64 `protobuf:"varint,1,opt,name=units,proto3" json:"units,omitempty"`
	// Output only. Number of nano (10^-9) units of the amount.
	// The value must be between -999,999,999 and +999,999,999 inclusive.
	// If `units` is positive, `nanos` must be positive or zero.
	// If `units` is zero, `nanos` can be positive, zero, or negative.
	// If `units` is negative, `nanos` must be negative or zero.
	// For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.
	Nanos int32 `protobuf:"varint,2,opt,name=nanos,proto3" json:"nanos,omitempty"`
}

func (x *Amount) Reset() {
	*x = Amount{}
	mi := &file_google_cloud_gkerecommender_v1_gkerecommender_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Amount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Amount) ProtoMessage() {}

func (x *Amount) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_gkerecommender_v1_gkerecommender_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Amount.ProtoReflect.Descriptor instead.
func (*Amount) Descriptor() ([]byte, []int) {
	return file_google_cloud_gkerecommender_v1_gkerecommender_proto_rawDescGZIP(), []int{10}
}

func (x *Amount) GetUnits() int64 {
	if x != nil {
		return x.Units
	}
	return 0
}

func (x *Amount) GetNanos() int32 {
	if x != nil {
		return x.Nanos
	}
	return 0
}

// Cost for running a model deployment on a given instance type. Currently, only
// USD currency code is supported.
type Cost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The cost per million output tokens, calculated as:
	// $/output token = GPU $/s / (1/output-to-input-cost-ratio * input tokens/s +
	// output tokens/s)
	CostPerMillionOutputTokens *Amount `protobuf:"bytes,1,opt,name=cost_per_million_output_tokens,json=costPerMillionOutputTokens,proto3" json:"cost_per_million_output_tokens,omitempty"`
	// Optional. The cost per million input tokens. $/input token = ($/output
	// token) / output-to-input-cost-ratio.
	CostPerMillionInputTokens *Amount `protobuf:"bytes,2,opt,name=cost_per_million_input_tokens,json=costPerMillionInputTokens,proto3" json:"cost_per_million_input_tokens,omitempty"`
	// Optional. The pricing model used to calculate the cost. Can be one of:
	// `3-years-cud`, `1-year-cud`, `on-demand`, `spot`. If not provided, `spot`
	// will be used.
	PricingModel string `protobuf:"bytes,3,opt,name=pricing_model,json=pricingModel,proto3" json:"pricing_model,omitempty"`
	// Optional. The output-to-input cost ratio. This determines how the total GPU
	// cost is split between input and output tokens. If not provided, `4.0` is
	// used, assuming a 4:1 output:input cost ratio.
	OutputInputCostRatio *float32 `protobuf:"fixed32,4,opt,name=output_input_cost_ratio,json=outputInputCostRatio,proto3,oneof" json:"output_input_cost_ratio,omitempty"`
}

func (x *Cost) Reset() {
	*x = Cost{}
	mi := &file_google_cloud_gkerecommender_v1_gkerecommender_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Cost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cost) ProtoMessage() {}

func (x *Cost) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_gkerecommender_v1_gkerecommender_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cost.ProtoReflect.Descriptor instead.
func (*Cost) Descriptor() ([]byte, []int) {
	return file_google_cloud_gkerecommender_v1_gkerecommender_proto_rawDescGZIP(), []int{11}
}

func (x *Cost) GetCostPerMillionOutputTokens() *Amount {
	if x != nil {
		return x.CostPerMillionOutputTokens
	}
	return nil
}

func (x *Cost) GetCostPerMillionInputTokens() *Amount {
	if x != nil {
		return x.CostPerMillionInputTokens
	}
	return nil
}

func (x *Cost) GetPricingModel() string {
	if x != nil {
		return x.PricingModel
	}
	return ""
}

func (x *Cost) GetOutputInputCostRatio() float32 {
	if x != nil && x.OutputInputCostRatio != nil {
		return *x.OutputInputCostRatio
	}
	return 0
}

// Represents a range of throughput values in tokens per second.
type TokensPerSecondRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The minimum value of the range.
	Min int32 `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	// Output only. The maximum value of the range.
	Max int32 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *TokensPerSecondRange) Reset() {
	*x = TokensPerSecondRange{}
	mi := &file_google_cloud_gkerecommender_v1_gkerecommender_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokensPerSecondRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokensPerSecondRange) ProtoMessage() {}

func (x *TokensPerSecondRange) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_gkerecommender_v1_gkerecommender_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokensPerSecondRange.ProtoReflect.Descriptor instead.
func (*TokensPerSecondRange) Descriptor() ([]byte, []int) {
	return file_google_cloud_gkerecommender_v1_gkerecommender_proto_rawDescGZIP(), []int{12}
}

func (x *TokensPerSecondRange) GetMin() int32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *TokensPerSecondRange) GetMax() int32 {
	if x != nil {
		return x.Max
	}
	return 0
}

// Represents a range of latency values in milliseconds.
type MillisecondRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The minimum value of the range.
	Min int32 `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	// Output only. The maximum value of the range.
	Max int32 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *MillisecondRange) Reset() {
	*x = MillisecondRange{}
	mi := &file_google_cloud_gkerecommender_v1_gkerecommender_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MillisecondRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MillisecondRange) ProtoMessage() {}

func (x *MillisecondRange) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_gkerecommender_v1_gkerecommender_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MillisecondRange.ProtoReflect.Descriptor instead.
func (*MillisecondRange) Descriptor() ([]byte, []int) {
	return file_google_cloud_gkerecommender_v1_gkerecommender_proto_rawDescGZIP(), []int{13}
}

func (x *MillisecondRange) GetMin() int32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *MillisecondRange) GetMax() int32 {
	if x != nil {
		return x.Max
	}
	return 0
}

// Performance range for a model deployment.
type PerformanceRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The range of throughput in output tokens per second. This is
	// measured as total_output_tokens_generated_by_server /
	// elapsed_time_in_seconds.
	ThroughputOutputRange *TokensPerSecondRange `protobuf:"bytes,1,opt,name=throughput_output_range,json=throughputOutputRange,proto3" json:"throughput_output_range,omitempty"`
	// Output only. The range of TTFT (Time To First Token) in milliseconds. TTFT
	// is the time it takes to generate the first token for a request.
	TtftRange *MillisecondRange `protobuf:"bytes,2,opt,name=ttft_range,json=ttftRange,proto3" json:"ttft_range,omitempty"`
	// Output only. The range of NTPOT (Normalized Time Per Output Token) in
	// milliseconds. NTPOT is the request latency normalized by the number of
	// output tokens, measured as request_latency / total_output_tokens.
	NtpotRange *MillisecondRange `protobuf:"bytes,3,opt,name=ntpot_range,json=ntpotRange,proto3" json:"ntpot_range,omitempty"`
}

func (x *PerformanceRange) Reset() {
	*x = PerformanceRange{}
	mi := &file_google_cloud_gkerecommender_v1_gkerecommender_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PerformanceRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformanceRange) ProtoMessage() {}

func (x *PerformanceRange) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_gkerecommender_v1_gkerecommender_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformanceRange.ProtoReflect.Descriptor instead.
func (*PerformanceRange) Descriptor() ([]byte, []int) {
	return file_google_cloud_gkerecommender_v1_gkerecommender_proto_rawDescGZIP(), []int{14}
}

func (x *PerformanceRange) GetThroughputOutputRange() *TokensPerSecondRange {
	if x != nil {
		return x.ThroughputOutputRange
	}
	return nil
}

func (x *PerformanceRange) GetTtftRange() *MillisecondRange {
	if x != nil {
		return x.TtftRange
	}
	return nil
}

func (x *PerformanceRange) GetNtpotRange() *MillisecondRange {
	if x != nil {
		return x.NtpotRange
	}
	return nil
}

// Response message for
// [GkeInferenceQuickstart.FetchProfiles][google.cloud.gkerecommender.v1.GkeInferenceQuickstart.FetchProfiles].
type FetchProfilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. List of profiles that match the given model server info and
	// performance requirements (if provided).
	Profile []*Profile `protobuf:"bytes,1,rep,name=profile,proto3" json:"profile,omitempty"`
	// Output only. The combined range of performance values observed across all
	// profiles in this response.
	PerformanceRange *PerformanceRange `protobuf:"bytes,2,opt,name=performance_range,json=performanceRange,proto3" json:"performance_range,omitempty"`
	// Output only. Additional comments related to the response.
	Comments string `protobuf:"bytes,3,opt,name=comments,proto3" json:"comments,omitempty"`
	// Output only. A token which may be sent as
	// [page_token][FetchProfilesResponse.page_token] in a subsequent
	// `FetchProfilesResponse` call to retrieve the next page of results. If this
	// field is omitted or empty, then there are no more results to return.
	NextPageToken string `protobuf:"bytes,4,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *FetchProfilesResponse) Reset() {
	*x = FetchProfilesResponse{}
	mi := &file_google_cloud_gkerecommender_v1_gkerecommender_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchProfilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchProfilesResponse) ProtoMessage() {}

func (x *FetchProfilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_gkerecommender_v1_gkerecommender_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchProfilesResponse.ProtoReflect.Descriptor instead.
func (*FetchProfilesResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_gkerecommender_v1_gkerecommender_proto_rawDescGZIP(), []int{15}
}

func (x *FetchProfilesResponse) GetProfile() []*Profile {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *FetchProfilesResponse) GetPerformanceRange() *PerformanceRange {
	if x != nil {
		return x.PerformanceRange
	}
	return nil
}

func (x *FetchProfilesResponse) GetComments() string {
	if x != nil {
		return x.Comments
	}
	return ""
}

func (x *FetchProfilesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Model server information gives. Valid model server info combinations can
// be found using
// [GkeInferenceQuickstart.FetchProfiles][google.cloud.gkerecommender.v1.GkeInferenceQuickstart.FetchProfiles].
type ModelServerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The model. Open-source models follow the Huggingface Hub
	// `owner/model_name` format. Use
	// [GkeInferenceQuickstart.FetchModels][google.cloud.gkerecommender.v1.GkeInferenceQuickstart.FetchModels]
	// to find available models.
	Model string `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
	// Required. The model server. Open-source model servers use simplified,
	// lowercase names (e.g., `vllm`). Use
	// [GkeInferenceQuickstart.FetchModelServers][google.cloud.gkerecommender.v1.GkeInferenceQuickstart.FetchModelServers]
	// to find available servers.
	ModelServer string `protobuf:"bytes,2,opt,name=model_server,json=modelServer,proto3" json:"model_server,omitempty"`
	// Optional. The model server version. Use
	// [GkeInferenceQuickstart.FetchModelServerVersions][google.cloud.gkerecommender.v1.GkeInferenceQuickstart.FetchModelServerVersions]
	// to find available versions. If not provided, the latest available version
	// is used.
	ModelServerVersion string `protobuf:"bytes,3,opt,name=model_server_version,json=modelServerVersion,proto3" json:"model_server_version,omitempty"`
}

func (x *ModelServerInfo) Reset() {
	*x = ModelServerInfo{}
	mi := &file_google_cloud_gkerecommender_v1_gkerecommender_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModelServerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelServerInfo) ProtoMessage() {}

func (x *ModelServerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_gkerecommender_v1_gkerecommender_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelServerInfo.ProtoReflect.Descriptor instead.
func (*ModelServerInfo) Descriptor() ([]byte, []int) {
	return file_google_cloud_gkerecommender_v1_gkerecommender_proto_rawDescGZIP(), []int{16}
}

func (x *ModelServerInfo) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *ModelServerInfo) GetModelServer() string {
	if x != nil {
		return x.ModelServer
	}
	return ""
}

func (x *ModelServerInfo) GetModelServerVersion() string {
	if x != nil {
		return x.ModelServerVersion
	}
	return ""
}

// Resources used by a model deployment.
type ResourcesUsed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The number of accelerators (e.g., GPUs or TPUs) used by the
	// model deployment on the Kubernetes node.
	AcceleratorCount int32 `protobuf:"varint,1,opt,name=accelerator_count,json=acceleratorCount,proto3" json:"accelerator_count,omitempty"`
}

func (x *ResourcesUsed) Reset() {
	*x = ResourcesUsed{}
	mi := &file_google_cloud_gkerecommender_v1_gkerecommender_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourcesUsed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourcesUsed) ProtoMessage() {}

func (x *ResourcesUsed) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_gkerecommender_v1_gkerecommender_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourcesUsed.ProtoReflect.Descriptor instead.
func (*ResourcesUsed) Descriptor() ([]byte, []int) {
	return file_google_cloud_gkerecommender_v1_gkerecommender_proto_rawDescGZIP(), []int{17}
}

func (x *ResourcesUsed) GetAcceleratorCount() int32 {
	if x != nil {
		return x.AcceleratorCount
	}
	return 0
}

// Performance statistics for a model deployment.
type PerformanceStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The number of queries per second.
	// Note: This metric can vary widely based on context length and may not be a
	// reliable measure of LLM throughput.
	QueriesPerSecond float32 `protobuf:"fixed32,1,opt,name=queries_per_second,json=queriesPerSecond,proto3" json:"queries_per_second,omitempty"`
	// Output only. The number of output tokens per second. This is the throughput
	// measured as total_output_tokens_generated_by_server /
	// elapsed_time_in_seconds.
	OutputTokensPerSecond int32 `protobuf:"varint,2,opt,name=output_tokens_per_second,json=outputTokensPerSecond,proto3" json:"output_tokens_per_second,omitempty"`
	// Output only. The Normalized Time Per Output Token (NTPOT) in milliseconds.
	// This is the request latency normalized by the number of output tokens,
	// measured as request_latency / total_output_tokens.
	NtpotMilliseconds int32 `protobuf:"varint,3,opt,name=ntpot_milliseconds,json=ntpotMilliseconds,proto3" json:"ntpot_milliseconds,omitempty"`
	// Output only. The Time To First Token (TTFT) in milliseconds. This is the
	// time it takes to generate the first token for a request.
	TtftMilliseconds int32 `protobuf:"varint,4,opt,name=ttft_milliseconds,json=ttftMilliseconds,proto3" json:"ttft_milliseconds,omitempty"`
	// Output only. The cost of running the model deployment.
	Cost []*Cost `protobuf:"bytes,5,rep,name=cost,proto3" json:"cost,omitempty"`
}

func (x *PerformanceStats) Reset() {
	*x = PerformanceStats{}
	mi := &file_google_cloud_gkerecommender_v1_gkerecommender_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PerformanceStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformanceStats) ProtoMessage() {}

func (x *PerformanceStats) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_gkerecommender_v1_gkerecommender_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformanceStats.ProtoReflect.Descriptor instead.
func (*PerformanceStats) Descriptor() ([]byte, []int) {
	return file_google_cloud_gkerecommender_v1_gkerecommender_proto_rawDescGZIP(), []int{18}
}

func (x *PerformanceStats) GetQueriesPerSecond() float32 {
	if x != nil {
		return x.QueriesPerSecond
	}
	return 0
}

func (x *PerformanceStats) GetOutputTokensPerSecond() int32 {
	if x != nil {
		return x.OutputTokensPerSecond
	}
	return 0
}

func (x *PerformanceStats) GetNtpotMilliseconds() int32 {
	if x != nil {
		return x.NtpotMilliseconds
	}
	return 0
}

func (x *PerformanceStats) GetTtftMilliseconds() int32 {
	if x != nil {
		return x.TtftMilliseconds
	}
	return 0
}

func (x *PerformanceStats) GetCost() []*Cost {
	if x != nil {
		return x.Cost
	}
	return nil
}

// A profile containing information about a model deployment.
type Profile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The model server configuration. Use
	// [GkeInferenceQuickstart.FetchProfiles][google.cloud.gkerecommender.v1.GkeInferenceQuickstart.FetchProfiles]
	// to find valid configurations.
	ModelServerInfo *ModelServerInfo `protobuf:"bytes,1,opt,name=model_server_info,json=modelServerInfo,proto3" json:"model_server_info,omitempty"`
	// Output only. The accelerator type. Expected format: `nvidia-h100-80gb`.
	AcceleratorType string `protobuf:"bytes,2,opt,name=accelerator_type,json=acceleratorType,proto3" json:"accelerator_type,omitempty"`
	// Output only. The TPU topology (if applicable).
	TpuTopology string `protobuf:"bytes,3,opt,name=tpu_topology,json=tpuTopology,proto3" json:"tpu_topology,omitempty"`
	// Output only. The instance type. Expected format: `a2-highgpu-1g`.
	InstanceType string `protobuf:"bytes,4,opt,name=instance_type,json=instanceType,proto3" json:"instance_type,omitempty"`
	// Output only. The resources used by the model deployment.
	ResourcesUsed *ResourcesUsed `protobuf:"bytes,5,opt,name=resources_used,json=resourcesUsed,proto3" json:"resources_used,omitempty"`
	// Output only. The performance statistics for this profile.
	PerformanceStats []*PerformanceStats `protobuf:"bytes,6,rep,name=performance_stats,json=performanceStats,proto3" json:"performance_stats,omitempty"`
}

func (x *Profile) Reset() {
	*x = Profile{}
	mi := &file_google_cloud_gkerecommender_v1_gkerecommender_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Profile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Profile) ProtoMessage() {}

func (x *Profile) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_gkerecommender_v1_gkerecommender_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Profile.ProtoReflect.Descriptor instead.
func (*Profile) Descriptor() ([]byte, []int) {
	return file_google_cloud_gkerecommender_v1_gkerecommender_proto_rawDescGZIP(), []int{19}
}

func (x *Profile) GetModelServerInfo() *ModelServerInfo {
	if x != nil {
		return x.ModelServerInfo
	}
	return nil
}

func (x *Profile) GetAcceleratorType() string {
	if x != nil {
		return x.AcceleratorType
	}
	return ""
}

func (x *Profile) GetTpuTopology() string {
	if x != nil {
		return x.TpuTopology
	}
	return ""
}

func (x *Profile) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *Profile) GetResourcesUsed() *ResourcesUsed {
	if x != nil {
		return x.ResourcesUsed
	}
	return nil
}

func (x *Profile) GetPerformanceStats() []*PerformanceStats {
	if x != nil {
		return x.PerformanceStats
	}
	return nil
}

// Request message for
// [GkeInferenceQuickstart.GenerateOptimizedManifest][google.cloud.gkerecommender.v1.GkeInferenceQuickstart.GenerateOptimizedManifest].
type GenerateOptimizedManifestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The model server configuration to generate the manifest for. Use
	// [GkeInferenceQuickstart.FetchProfiles][google.cloud.gkerecommender.v1.GkeInferenceQuickstart.FetchProfiles]
	// to find valid configurations.
	ModelServerInfo *ModelServerInfo `protobuf:"bytes,1,opt,name=model_server_info,json=modelServerInfo,proto3" json:"model_server_info,omitempty"`
	// Required. The accelerator type. Use
	// [GkeInferenceQuickstart.FetchProfiles][google.cloud.gkerecommender.v1.GkeInferenceQuickstart.FetchProfiles]
	// to find valid accelerators for a given `model_server_info`.
	AcceleratorType string `protobuf:"bytes,2,opt,name=accelerator_type,json=acceleratorType,proto3" json:"accelerator_type,omitempty"`
	// Optional. The kubernetes namespace to deploy the manifests in.
	KubernetesNamespace string `protobuf:"bytes,3,opt,name=kubernetes_namespace,json=kubernetesNamespace,proto3" json:"kubernetes_namespace,omitempty"`
	// Optional. The performance requirements to use for generating Horizontal Pod
	// Autoscaler (HPA) resources. If provided, the manifest includes HPA
	// resources to adjust the model server replica count to maintain the
	// specified targets (e.g., NTPOT, TTFT) at a P50 latency. Cost targets are
	// not currently supported for HPA generation. If the specified targets are
	// not achievable, the HPA manifest will not be generated.
	PerformanceRequirements *PerformanceRequirements `protobuf:"bytes,4,opt,name=performance_requirements,json=performanceRequirements,proto3" json:"performance_requirements,omitempty"`
	// Optional. The storage configuration for the model. If not provided, the
	// model is loaded from Huggingface.
	StorageConfig *StorageConfig `protobuf:"bytes,5,opt,name=storage_config,json=storageConfig,proto3" json:"storage_config,omitempty"`
}

func (x *GenerateOptimizedManifestRequest) Reset() {
	*x = GenerateOptimizedManifestRequest{}
	mi := &file_google_cloud_gkerecommender_v1_gkerecommender_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateOptimizedManifestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateOptimizedManifestRequest) ProtoMessage() {}

func (x *GenerateOptimizedManifestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_gkerecommender_v1_gkerecommender_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateOptimizedManifestRequest.ProtoReflect.Descriptor instead.
func (*GenerateOptimizedManifestRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_gkerecommender_v1_gkerecommender_proto_rawDescGZIP(), []int{20}
}

func (x *GenerateOptimizedManifestRequest) GetModelServerInfo() *ModelServerInfo {
	if x != nil {
		return x.ModelServerInfo
	}
	return nil
}

func (x *GenerateOptimizedManifestRequest) GetAcceleratorType() string {
	if x != nil {
		return x.AcceleratorType
	}
	return ""
}

func (x *GenerateOptimizedManifestRequest) GetKubernetesNamespace() string {
	if x != nil {
		return x.KubernetesNamespace
	}
	return ""
}

func (x *GenerateOptimizedManifestRequest) GetPerformanceRequirements() *PerformanceRequirements {
	if x != nil {
		return x.PerformanceRequirements
	}
	return nil
}

func (x *GenerateOptimizedManifestRequest) GetStorageConfig() *StorageConfig {
	if x != nil {
		return x.StorageConfig
	}
	return nil
}

// A Kubernetes manifest.
type KubernetesManifest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Kubernetes resource kind.
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	// Output only. Kubernetes API version.
	ApiVersion string `protobuf:"bytes,2,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	// Output only. YAML content.
	Content string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *KubernetesManifest) Reset() {
	*x = KubernetesManifest{}
	mi := &file_google_cloud_gkerecommender_v1_gkerecommender_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KubernetesManifest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesManifest) ProtoMessage() {}

func (x *KubernetesManifest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_gkerecommender_v1_gkerecommender_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesManifest.ProtoReflect.Descriptor instead.
func (*KubernetesManifest) Descriptor() ([]byte, []int) {
	return file_google_cloud_gkerecommender_v1_gkerecommender_proto_rawDescGZIP(), []int{21}
}

func (x *KubernetesManifest) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *KubernetesManifest) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *KubernetesManifest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

// Response message for
// [GkeInferenceQuickstart.GenerateOptimizedManifest][google.cloud.gkerecommender.v1.GkeInferenceQuickstart.GenerateOptimizedManifest].
type GenerateOptimizedManifestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. A list of generated Kubernetes manifests.
	KubernetesManifests []*KubernetesManifest `protobuf:"bytes,1,rep,name=kubernetes_manifests,json=kubernetesManifests,proto3" json:"kubernetes_manifests,omitempty"`
	// Output only. Comments related to deploying the generated manifests.
	Comments []string `protobuf:"bytes,2,rep,name=comments,proto3" json:"comments,omitempty"`
	// Output only. Additional information about the versioned dependencies used
	// to generate the manifests. See [Run best practice inference with GKE
	// Inference Quickstart
	// recipes](https://cloud.google.com/kubernetes-engine/docs/how-to/machine-learning/inference/inference-quickstart)
	// for details.
	ManifestVersion string `protobuf:"bytes,3,opt,name=manifest_version,json=manifestVersion,proto3" json:"manifest_version,omitempty"`
}

func (x *GenerateOptimizedManifestResponse) Reset() {
	*x = GenerateOptimizedManifestResponse{}
	mi := &file_google_cloud_gkerecommender_v1_gkerecommender_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateOptimizedManifestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateOptimizedManifestResponse) ProtoMessage() {}

func (x *GenerateOptimizedManifestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_gkerecommender_v1_gkerecommender_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateOptimizedManifestResponse.ProtoReflect.Descriptor instead.
func (*GenerateOptimizedManifestResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_gkerecommender_v1_gkerecommender_proto_rawDescGZIP(), []int{22}
}

func (x *GenerateOptimizedManifestResponse) GetKubernetesManifests() []*KubernetesManifest {
	if x != nil {
		return x.KubernetesManifests
	}
	return nil
}

func (x *GenerateOptimizedManifestResponse) GetComments() []string {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *GenerateOptimizedManifestResponse) GetManifestVersion() string {
	if x != nil {
		return x.ManifestVersion
	}
	return ""
}

// Storage configuration for a model deployment.
type StorageConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The Google Cloud Storage bucket URI to load the model from. This
	// URI must point to the directory containing the model's config file
	// (`config.json`) and model weights. A tuned GCSFuse setup can improve
	// LLM Pod startup time by more than 7x. Expected format:
	// `gs://<bucket-name>/<path-to-model>`.
	ModelBucketUri string `protobuf:"bytes,1,opt,name=model_bucket_uri,json=modelBucketUri,proto3" json:"model_bucket_uri,omitempty"`
	// Optional. The URI for the GCS bucket containing the XLA compilation cache.
	// If using TPUs, the XLA cache will be written to the same path as
	// `model_bucket_uri`. This can speed up vLLM model preparation for repeated
	// deployments.
	XlaCacheBucketUri string `protobuf:"bytes,2,opt,name=xla_cache_bucket_uri,json=xlaCacheBucketUri,proto3" json:"xla_cache_bucket_uri,omitempty"`
}

func (x *StorageConfig) Reset() {
	*x = StorageConfig{}
	mi := &file_google_cloud_gkerecommender_v1_gkerecommender_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StorageConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageConfig) ProtoMessage() {}

func (x *StorageConfig) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_gkerecommender_v1_gkerecommender_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageConfig.ProtoReflect.Descriptor instead.
func (*StorageConfig) Descriptor() ([]byte, []int) {
	return file_google_cloud_gkerecommender_v1_gkerecommender_proto_rawDescGZIP(), []int{23}
}

func (x *StorageConfig) GetModelBucketUri() string {
	if x != nil {
		return x.ModelBucketUri
	}
	return ""
}

func (x *StorageConfig) GetXlaCacheBucketUri() string {
	if x != nil {
		return x.XlaCacheBucketUri
	}
	return ""
}

var File_google_cloud_gkerecommender_v1_gkerecommender_proto protoreflect.FileDescriptor

var file_google_cloud_gkerecommender_v1_gkerecommender_proto_rawDesc = []byte{
	0x0a, 0x33, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67,
	0x6b, 0x65, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x2f, 0x67, 0x6b, 0x65, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6b, 0x65, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x81, 0x01,
	0x0a, 0x12, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x48, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x5f, 0x0a, 0x13, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x2b, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0xa2, 0x01, 0x0a, 0x18, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x27, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x01, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x72, 0x0a, 0x19, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x2b,
	0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0d, 0x6e, 0x65,
	0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xd1, 0x01, 0x0a, 0x1f,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0x25, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x48, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88,
	0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x88, 0x01, 0x0a, 0x20, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x15, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x13, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a,
	0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xd4, 0x01, 0x0a, 0x1c, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x60, 0x0a, 0x11, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6b, 0x65, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a,
	0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x69,
	0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x22, 0x67, 0x0a, 0x1d, 0x46, 0x65, 0x74, 0x63, 0x68, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d,
	0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x46, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x67, 0x6b, 0x65, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xf6, 0x02, 0x0a, 0x14, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x26,
	0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x14, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x12, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x77, 0x0a,
	0x18, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67,
	0x6b, 0x65, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x17, 0x70,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0xaa, 0x02, 0x0a, 0x17, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x44, 0x0a, 0x19, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x74, 0x70, 0x6f, 0x74, 0x5f,
	0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x17, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x4e, 0x74, 0x70, 0x6f, 0x74, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x18, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x74, 0x74, 0x66, 0x74, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x01, 0x52, 0x16,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x74, 0x66, 0x74, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0b, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6b,
	0x65, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x73, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x43, 0x6f, 0x73, 0x74, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x6e, 0x74, 0x70, 0x6f, 0x74, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74,
	0x74, 0x66, 0x74, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x22, 0x3e, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x75, 0x6e,
	0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05,
	0x75, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x6e, 0x61, 0x6e, 0x6f, 0x73,
	0x22, 0xed, 0x02, 0x0a, 0x04, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x6f, 0x0a, 0x1e, 0x63, 0x6f, 0x73,
	0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x67, 0x6b, 0x65, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x1a,
	0x63, 0x6f, 0x73, 0x74, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x6f, 0x6e, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x6d, 0x0a, 0x1d, 0x63, 0x6f,
	0x73, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x67, 0x6b, 0x65, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x19,
	0x63, 0x6f, 0x73, 0x74, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x0d, 0x70, 0x72, 0x69,
	0x63, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x3f, 0x0a, 0x17, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x14, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x88, 0x01, 0x01, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x22, 0x44, 0x0a, 0x14, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x15, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12,
	0x15, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x22, 0x40, 0x0a, 0x10, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x15, 0x0a, 0x03, 0x6d, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x03, 0x6d, 0x69,
	0x6e, 0x12, 0x15, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x22, 0xb3, 0x02, 0x0a, 0x10, 0x50, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x71, 0x0a,
	0x17, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6b,
	0x65, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x15, 0x74, 0x68, 0x72, 0x6f, 0x75,
	0x67, 0x68, 0x70, 0x75, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x54, 0x0a, 0x0a, 0x74, 0x74, 0x66, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6b, 0x65, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x74, 0x74, 0x66,
	0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x56, 0x0a, 0x0b, 0x6e, 0x74, 0x70, 0x6f, 0x74, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6b, 0x65, 0x72, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x6c,
	0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x0a, 0x6e, 0x74, 0x70, 0x6f, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x91,
	0x02, 0x0a, 0x15, 0x46, 0x65, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6b, 0x65, 0x72, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x62, 0x0a, 0x11, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6b, 0x65, 0x72, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x10, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x8b, 0x01, 0x0a, 0x0f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x14, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x12, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x41, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x55, 0x73, 0x65,
	0x64, 0x12, 0x30, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x10, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xa8, 0x02, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x12, 0x71, 0x75, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x10, 0x71, 0x75, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x3c, 0x0a, 0x18, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x15, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x32, 0x0a, 0x12, 0x6e, 0x74, 0x70,
	0x6f, 0x74, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x11, 0x6e, 0x74, 0x70, 0x6f,
	0x74, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x30, 0x0a,
	0x11, 0x74, 0x74, 0x66, 0x74, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x10, 0x74,
	0x74, 0x66, 0x74, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x3d, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6b, 0x65,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x73, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x22, 0xac,
	0x03, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x60, 0x0a, 0x11, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6b, 0x65, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x10,
	0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0f, 0x61, 0x63, 0x63,
	0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0c,
	0x74, 0x70, 0x75, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x74, 0x70, 0x75, 0x54, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x12, 0x28, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x59,
	0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6b, 0x65, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x55, 0x73, 0x65, 0x64, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x62, 0x0a, 0x11, 0x70, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6b, 0x65, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x10, 0x70, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0xc0, 0x03,
	0x0a, 0x20, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69,
	0x7a, 0x65, 0x64, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x60, 0x0a, 0x11, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6b, 0x65,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x0f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x14, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x13, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x77, 0x0a, 0x18,
	0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6b,
	0x65, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x17, 0x70, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x59, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6b, 0x65,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x22, 0x72, 0x0a, 0x12, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x4d, 0x61,
	0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12,
	0x24, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x22, 0xe0, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x14, 0x6b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6b, 0x65, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x13, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x4d, 0x61, 0x6e,
	0x69, 0x66, 0x65, 0x73, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x10, 0x6d, 0x61, 0x6e, 0x69, 0x66,
	0x65, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0f, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x74, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2d, 0x0a, 0x10, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x55, 0x72, 0x69, 0x12, 0x34, 0x0a, 0x14, 0x78, 0x6c, 0x61, 0x5f, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x11, 0x78, 0x6c, 0x61, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x55, 0x72, 0x69, 0x32, 0x9a, 0x09,
	0x0a, 0x16, 0x47, 0x6b, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x51, 0x75,
	0x69, 0x63, 0x6b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x90, 0x01, 0x0a, 0x0b, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6b, 0x65, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6b, 0x65, 0x72,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x3a, 0x66, 0x65, 0x74, 0x63, 0x68, 0x12, 0xa8, 0x01, 0x0a, 0x11,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x12, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x67, 0x6b, 0x65, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6b, 0x65, 0x72, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16,
	0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x3a, 0x66, 0x65, 0x74, 0x63, 0x68, 0x12, 0xc4, 0x01, 0x0a, 0x18, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x67, 0x6b, 0x65, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6b, 0x65, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d,
	0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x66, 0x65, 0x74, 0x63, 0x68, 0x12, 0x9b, 0x01,
	0x0a, 0x0d, 0x46, 0x65, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12,
	0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67,
	0x6b, 0x65, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6b, 0x65, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x17, 0x3a, 0x01, 0x2a, 0x22, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x3a, 0x66, 0x65, 0x74, 0x63, 0x68, 0x12, 0xcb, 0x01, 0x0a, 0x19,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65,
	0x64, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x12, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6b, 0x65, 0x72, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x4d, 0x61, 0x6e, 0x69,
	0x66, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6b, 0x65, 0x72, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x4d, 0x61,
	0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74,
	0x3a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0xbb, 0x01, 0x0a, 0x15, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x67, 0x6b, 0x65, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d,
	0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x67, 0x6b, 0x65, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x22, 0x1a, 0x2f, 0x76, 0x31,
	0x2f, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x3a, 0x66, 0x65, 0x74, 0x63, 0x68, 0x1a, 0x51, 0xca, 0x41, 0x1d, 0x67, 0x6b, 0x65, 0x72,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x2e, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0xed, 0x01, 0x0a, 0x22, 0x63,
	0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x67, 0x6b, 0x65, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x42, 0x13, 0x47, 0x6b, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4a, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x67, 0x6b,
	0x65, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2f, 0x67, 0x6b, 0x65, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x70, 0x62, 0x3b, 0x67, 0x6b, 0x65, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x70, 0x62, 0xaa, 0x02, 0x1e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x47, 0x6b, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x1e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5c, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x47, 0x6b, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x5c, 0x56, 0x31, 0xea, 0x02, 0x21, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a,
	0x3a, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x47, 0x6b, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_google_cloud_gkerecommender_v1_gkerecommender_proto_rawDescOnce sync.Once
	file_google_cloud_gkerecommender_v1_gkerecommender_proto_rawDescData = file_google_cloud_gkerecommender_v1_gkerecommender_proto_rawDesc
)

func file_google_cloud_gkerecommender_v1_gkerecommender_proto_rawDescGZIP() []byte {
	file_google_cloud_gkerecommender_v1_gkerecommender_proto_rawDescOnce.Do(func() {
		file_google_cloud_gkerecommender_v1_gkerecommender_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_gkerecommender_v1_gkerecommender_proto_rawDescData)
	})
	return file_google_cloud_gkerecommender_v1_gkerecommender_proto_rawDescData
}

var file_google_cloud_gkerecommender_v1_gkerecommender_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_google_cloud_gkerecommender_v1_gkerecommender_proto_goTypes = []any{
	(*FetchModelsRequest)(nil),                // 0: google.cloud.gkerecommender.v1.FetchModelsRequest
	(*FetchModelsResponse)(nil),               // 1: google.cloud.gkerecommender.v1.FetchModelsResponse
	(*FetchModelServersRequest)(nil),          // 2: google.cloud.gkerecommender.v1.FetchModelServersRequest
	(*FetchModelServersResponse)(nil),         // 3: google.cloud.gkerecommender.v1.FetchModelServersResponse
	(*FetchModelServerVersionsRequest)(nil),   // 4: google.cloud.gkerecommender.v1.FetchModelServerVersionsRequest
	(*FetchModelServerVersionsResponse)(nil),  // 5: google.cloud.gkerecommender.v1.FetchModelServerVersionsResponse
	(*FetchBenchmarkingDataRequest)(nil),      // 6: google.cloud.gkerecommender.v1.FetchBenchmarkingDataRequest
	(*FetchBenchmarkingDataResponse)(nil),     // 7: google.cloud.gkerecommender.v1.FetchBenchmarkingDataResponse
	(*FetchProfilesRequest)(nil),              // 8: google.cloud.gkerecommender.v1.FetchProfilesRequest
	(*PerformanceRequirements)(nil),           // 9: google.cloud.gkerecommender.v1.PerformanceRequirements
	(*Amount)(nil),                            // 10: google.cloud.gkerecommender.v1.Amount
	(*Cost)(nil),                              // 11: google.cloud.gkerecommender.v1.Cost
	(*TokensPerSecondRange)(nil),              // 12: google.cloud.gkerecommender.v1.TokensPerSecondRange
	(*MillisecondRange)(nil),                  // 13: google.cloud.gkerecommender.v1.MillisecondRange
	(*PerformanceRange)(nil),                  // 14: google.cloud.gkerecommender.v1.PerformanceRange
	(*FetchProfilesResponse)(nil),             // 15: google.cloud.gkerecommender.v1.FetchProfilesResponse
	(*ModelServerInfo)(nil),                   // 16: google.cloud.gkerecommender.v1.ModelServerInfo
	(*ResourcesUsed)(nil),                     // 17: google.cloud.gkerecommender.v1.ResourcesUsed
	(*PerformanceStats)(nil),                  // 18: google.cloud.gkerecommender.v1.PerformanceStats
	(*Profile)(nil),                           // 19: google.cloud.gkerecommender.v1.Profile
	(*GenerateOptimizedManifestRequest)(nil),  // 20: google.cloud.gkerecommender.v1.GenerateOptimizedManifestRequest
	(*KubernetesManifest)(nil),                // 21: google.cloud.gkerecommender.v1.KubernetesManifest
	(*GenerateOptimizedManifestResponse)(nil), // 22: google.cloud.gkerecommender.v1.GenerateOptimizedManifestResponse
	(*StorageConfig)(nil),                     // 23: google.cloud.gkerecommender.v1.StorageConfig
}
var file_google_cloud_gkerecommender_v1_gkerecommender_proto_depIdxs = []int32{
	16, // 0: google.cloud.gkerecommender.v1.FetchBenchmarkingDataRequest.model_server_info:type_name -> google.cloud.gkerecommender.v1.ModelServerInfo
	19, // 1: google.cloud.gkerecommender.v1.FetchBenchmarkingDataResponse.profile:type_name -> google.cloud.gkerecommender.v1.Profile
	9,  // 2: google.cloud.gkerecommender.v1.FetchProfilesRequest.performance_requirements:type_name -> google.cloud.gkerecommender.v1.PerformanceRequirements
	11, // 3: google.cloud.gkerecommender.v1.PerformanceRequirements.target_cost:type_name -> google.cloud.gkerecommender.v1.Cost
	10, // 4: google.cloud.gkerecommender.v1.Cost.cost_per_million_output_tokens:type_name -> google.cloud.gkerecommender.v1.Amount
	10, // 5: google.cloud.gkerecommender.v1.Cost.cost_per_million_input_tokens:type_name -> google.cloud.gkerecommender.v1.Amount
	12, // 6: google.cloud.gkerecommender.v1.PerformanceRange.throughput_output_range:type_name -> google.cloud.gkerecommender.v1.TokensPerSecondRange
	13, // 7: google.cloud.gkerecommender.v1.PerformanceRange.ttft_range:type_name -> google.cloud.gkerecommender.v1.MillisecondRange
	13, // 8: google.cloud.gkerecommender.v1.PerformanceRange.ntpot_range:type_name -> google.cloud.gkerecommender.v1.MillisecondRange
	19, // 9: google.cloud.gkerecommender.v1.FetchProfilesResponse.profile:type_name -> google.cloud.gkerecommender.v1.Profile
	14, // 10: google.cloud.gkerecommender.v1.FetchProfilesResponse.performance_range:type_name -> google.cloud.gkerecommender.v1.PerformanceRange
	11, // 11: google.cloud.gkerecommender.v1.PerformanceStats.cost:type_name -> google.cloud.gkerecommender.v1.Cost
	16, // 12: google.cloud.gkerecommender.v1.Profile.model_server_info:type_name -> google.cloud.gkerecommender.v1.ModelServerInfo
	17, // 13: google.cloud.gkerecommender.v1.Profile.resources_used:type_name -> google.cloud.gkerecommender.v1.ResourcesUsed
	18, // 14: google.cloud.gkerecommender.v1.Profile.performance_stats:type_name -> google.cloud.gkerecommender.v1.PerformanceStats
	16, // 15: google.cloud.gkerecommender.v1.GenerateOptimizedManifestRequest.model_server_info:type_name -> google.cloud.gkerecommender.v1.ModelServerInfo
	9,  // 16: google.cloud.gkerecommender.v1.GenerateOptimizedManifestRequest.performance_requirements:type_name -> google.cloud.gkerecommender.v1.PerformanceRequirements
	23, // 17: google.cloud.gkerecommender.v1.GenerateOptimizedManifestRequest.storage_config:type_name -> google.cloud.gkerecommender.v1.StorageConfig
	21, // 18: google.cloud.gkerecommender.v1.GenerateOptimizedManifestResponse.kubernetes_manifests:type_name -> google.cloud.gkerecommender.v1.KubernetesManifest
	0,  // 19: google.cloud.gkerecommender.v1.GkeInferenceQuickstart.FetchModels:input_type -> google.cloud.gkerecommender.v1.FetchModelsRequest
	2,  // 20: google.cloud.gkerecommender.v1.GkeInferenceQuickstart.FetchModelServers:input_type -> google.cloud.gkerecommender.v1.FetchModelServersRequest
	4,  // 21: google.cloud.gkerecommender.v1.GkeInferenceQuickstart.FetchModelServerVersions:input_type -> google.cloud.gkerecommender.v1.FetchModelServerVersionsRequest
	8,  // 22: google.cloud.gkerecommender.v1.GkeInferenceQuickstart.FetchProfiles:input_type -> google.cloud.gkerecommender.v1.FetchProfilesRequest
	20, // 23: google.cloud.gkerecommender.v1.GkeInferenceQuickstart.GenerateOptimizedManifest:input_type -> google.cloud.gkerecommender.v1.GenerateOptimizedManifestRequest
	6,  // 24: google.cloud.gkerecommender.v1.GkeInferenceQuickstart.FetchBenchmarkingData:input_type -> google.cloud.gkerecommender.v1.FetchBenchmarkingDataRequest
	1,  // 25: google.cloud.gkerecommender.v1.GkeInferenceQuickstart.FetchModels:output_type -> google.cloud.gkerecommender.v1.FetchModelsResponse
	3,  // 26: google.cloud.gkerecommender.v1.GkeInferenceQuickstart.FetchModelServers:output_type -> google.cloud.gkerecommender.v1.FetchModelServersResponse
	5,  // 27: google.cloud.gkerecommender.v1.GkeInferenceQuickstart.FetchModelServerVersions:output_type -> google.cloud.gkerecommender.v1.FetchModelServerVersionsResponse
	15, // 28: google.cloud.gkerecommender.v1.GkeInferenceQuickstart.FetchProfiles:output_type -> google.cloud.gkerecommender.v1.FetchProfilesResponse
	22, // 29: google.cloud.gkerecommender.v1.GkeInferenceQuickstart.GenerateOptimizedManifest:output_type -> google.cloud.gkerecommender.v1.GenerateOptimizedManifestResponse
	7,  // 30: google.cloud.gkerecommender.v1.GkeInferenceQuickstart.FetchBenchmarkingData:output_type -> google.cloud.gkerecommender.v1.FetchBenchmarkingDataResponse
	25, // [25:31] is the sub-list for method output_type
	19, // [19:25] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_google_cloud_gkerecommender_v1_gkerecommender_proto_init() }
func file_google_cloud_gkerecommender_v1_gkerecommender_proto_init() {
	if File_google_cloud_gkerecommender_v1_gkerecommender_proto != nil {
		return
	}
	file_google_cloud_gkerecommender_v1_gkerecommender_proto_msgTypes[0].OneofWrappers = []any{}
	file_google_cloud_gkerecommender_v1_gkerecommender_proto_msgTypes[2].OneofWrappers = []any{}
	file_google_cloud_gkerecommender_v1_gkerecommender_proto_msgTypes[4].OneofWrappers = []any{}
	file_google_cloud_gkerecommender_v1_gkerecommender_proto_msgTypes[8].OneofWrappers = []any{}
	file_google_cloud_gkerecommender_v1_gkerecommender_proto_msgTypes[9].OneofWrappers = []any{}
	file_google_cloud_gkerecommender_v1_gkerecommender_proto_msgTypes[11].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_gkerecommender_v1_gkerecommender_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_google_cloud_gkerecommender_v1_gkerecommender_proto_goTypes,
		DependencyIndexes: file_google_cloud_gkerecommender_v1_gkerecommender_proto_depIdxs,
		MessageInfos:      file_google_cloud_gkerecommender_v1_gkerecommender_proto_msgTypes,
	}.Build()
	File_google_cloud_gkerecommender_v1_gkerecommender_proto = out.File
	file_google_cloud_gkerecommender_v1_gkerecommender_proto_rawDesc = nil
	file_google_cloud_gkerecommender_v1_gkerecommender_proto_goTypes = nil
	file_google_cloud_gkerecommender_v1_gkerecommender_proto_depIdxs = nil
}
