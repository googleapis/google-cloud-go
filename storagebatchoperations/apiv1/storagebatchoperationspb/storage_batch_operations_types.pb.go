// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.3
// source: google/cloud/storagebatchoperations/v1/storage_batch_operations_types.proto

package storagebatchoperationspb

import (
	reflect "reflect"
	sync "sync"

	_ "google.golang.org/genproto/googleapis/api/annotations"
	code "google.golang.org/genproto/googleapis/rpc/code"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Describes state of a job.
type Job_State int32

const (
	// Default value. This value is unused.
	Job_STATE_UNSPECIFIED Job_State = 0
	// In progress.
	Job_RUNNING Job_State = 1
	// Completed successfully.
	Job_SUCCEEDED Job_State = 2
	// Cancelled by the user.
	Job_CANCELED Job_State = 3
	// Terminated due to an unrecoverable failure.
	Job_FAILED Job_State = 4
)

// Enum value maps for Job_State.
var (
	Job_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "RUNNING",
		2: "SUCCEEDED",
		3: "CANCELED",
		4: "FAILED",
	}
	Job_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"RUNNING":           1,
		"SUCCEEDED":         2,
		"CANCELED":          3,
		"FAILED":            4,
	}
)

func (x Job_State) Enum() *Job_State {
	p := new(Job_State)
	*p = x
	return p
}

func (x Job_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Job_State) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_enumTypes[0].Descriptor()
}

func (Job_State) Type() protoreflect.EnumType {
	return &file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_enumTypes[0]
}

func (x Job_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Job_State.Descriptor instead.
func (Job_State) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_rawDescGZIP(), []int{0, 0}
}

// Describes the status of the hold.
type PutObjectHold_HoldStatus int32

const (
	// Default value, Object hold status will not be changed.
	PutObjectHold_HOLD_STATUS_UNSPECIFIED PutObjectHold_HoldStatus = 0
	// Places the hold.
	PutObjectHold_SET PutObjectHold_HoldStatus = 1
	// Releases the hold.
	PutObjectHold_UNSET PutObjectHold_HoldStatus = 2
)

// Enum value maps for PutObjectHold_HoldStatus.
var (
	PutObjectHold_HoldStatus_name = map[int32]string{
		0: "HOLD_STATUS_UNSPECIFIED",
		1: "SET",
		2: "UNSET",
	}
	PutObjectHold_HoldStatus_value = map[string]int32{
		"HOLD_STATUS_UNSPECIFIED": 0,
		"SET":                     1,
		"UNSET":                   2,
	}
)

func (x PutObjectHold_HoldStatus) Enum() *PutObjectHold_HoldStatus {
	p := new(PutObjectHold_HoldStatus)
	*p = x
	return p
}

func (x PutObjectHold_HoldStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PutObjectHold_HoldStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_enumTypes[1].Descriptor()
}

func (PutObjectHold_HoldStatus) Type() protoreflect.EnumType {
	return &file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_enumTypes[1]
}

func (x PutObjectHold_HoldStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PutObjectHold_HoldStatus.Descriptor instead.
func (PutObjectHold_HoldStatus) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_rawDescGZIP(), []int{4, 0}
}

// Loggable actions types.
type LoggingConfig_LoggableAction int32

const (
	// Illegal value, to avoid allowing a default.
	LoggingConfig_LOGGABLE_ACTION_UNSPECIFIED LoggingConfig_LoggableAction = 0
	// The corresponding transform action in this job.
	LoggingConfig_TRANSFORM LoggingConfig_LoggableAction = 6
)

// Enum value maps for LoggingConfig_LoggableAction.
var (
	LoggingConfig_LoggableAction_name = map[int32]string{
		0: "LOGGABLE_ACTION_UNSPECIFIED",
		6: "TRANSFORM",
	}
	LoggingConfig_LoggableAction_value = map[string]int32{
		"LOGGABLE_ACTION_UNSPECIFIED": 0,
		"TRANSFORM":                   6,
	}
)

func (x LoggingConfig_LoggableAction) Enum() *LoggingConfig_LoggableAction {
	p := new(LoggingConfig_LoggableAction)
	*p = x
	return p
}

func (x LoggingConfig_LoggableAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoggingConfig_LoggableAction) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_enumTypes[2].Descriptor()
}

func (LoggingConfig_LoggableAction) Type() protoreflect.EnumType {
	return &file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_enumTypes[2]
}

func (x LoggingConfig_LoggableAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoggingConfig_LoggableAction.Descriptor instead.
func (LoggingConfig_LoggableAction) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_rawDescGZIP(), []int{11, 0}
}

// Loggable action states filter.
type LoggingConfig_LoggableActionState int32

const (
	// Illegal value, to avoid allowing a default.
	LoggingConfig_LOGGABLE_ACTION_STATE_UNSPECIFIED LoggingConfig_LoggableActionState = 0
	// `LoggableAction` completed successfully. `SUCCEEDED` actions are
	// logged as [INFO][google.logging.type.LogSeverity.INFO].
	LoggingConfig_SUCCEEDED LoggingConfig_LoggableActionState = 1
	// `LoggableAction` terminated in an error state. `FAILED` actions
	// are logged as [ERROR][google.logging.type.LogSeverity.ERROR].
	LoggingConfig_FAILED LoggingConfig_LoggableActionState = 2
)

// Enum value maps for LoggingConfig_LoggableActionState.
var (
	LoggingConfig_LoggableActionState_name = map[int32]string{
		0: "LOGGABLE_ACTION_STATE_UNSPECIFIED",
		1: "SUCCEEDED",
		2: "FAILED",
	}
	LoggingConfig_LoggableActionState_value = map[string]int32{
		"LOGGABLE_ACTION_STATE_UNSPECIFIED": 0,
		"SUCCEEDED":                         1,
		"FAILED":                            2,
	}
)

func (x LoggingConfig_LoggableActionState) Enum() *LoggingConfig_LoggableActionState {
	p := new(LoggingConfig_LoggableActionState)
	*p = x
	return p
}

func (x LoggingConfig_LoggableActionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoggingConfig_LoggableActionState) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_enumTypes[3].Descriptor()
}

func (LoggingConfig_LoggableActionState) Type() protoreflect.EnumType {
	return &file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_enumTypes[3]
}

func (x LoggingConfig_LoggableActionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoggingConfig_LoggableActionState.Descriptor instead.
func (LoggingConfig_LoggableActionState) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_rawDescGZIP(), []int{11, 1}
}

// The Storage Batch Operations Job description.
type Job struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier. The resource name of the Job. job_id is unique
	// within the project, that is either set by the customer or
	// defined by the service. Format:
	// projects/{project}/locations/global/jobs/{job_id} .
	// For example: "projects/123456/locations/global/jobs/job01".
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. A description provided by the user for the job. Its max length is
	// 1024 bytes when Unicode-encoded.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Specifies objects to be transformed.
	//
	// Types that are assignable to Source:
	//
	//	*Job_BucketList
	Source isJob_Source `protobuf_oneof:"source"`
	// Operation to be performed on the objects.
	//
	// Types that are assignable to Transformation:
	//
	//	*Job_PutObjectHold
	//	*Job_DeleteObject
	//	*Job_PutMetadata
	//	*Job_RewriteObject
	Transformation isJob_Transformation `protobuf_oneof:"transformation"`
	// Optional. Logging configuration.
	LoggingConfig *LoggingConfig `protobuf:"bytes,9,opt,name=logging_config,json=loggingConfig,proto3" json:"logging_config,omitempty"`
	// Output only. The time that the job was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The time that the job was scheduled.
	ScheduleTime *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=schedule_time,json=scheduleTime,proto3" json:"schedule_time,omitempty"`
	// Output only. The time that the job was completed.
	CompleteTime *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=complete_time,json=completeTime,proto3" json:"complete_time,omitempty"`
	// Output only. Information about the progress of the job.
	Counters *Counters `protobuf:"bytes,13,opt,name=counters,proto3" json:"counters,omitempty"`
	// Output only. Summarizes errors encountered with sample error log entries.
	ErrorSummaries []*ErrorSummary `protobuf:"bytes,14,rep,name=error_summaries,json=errorSummaries,proto3" json:"error_summaries,omitempty"`
	// Output only. State of the job.
	State Job_State `protobuf:"varint,15,opt,name=state,proto3,enum=google.cloud.storagebatchoperations.v1.Job_State" json:"state,omitempty"`
}

func (x *Job) Reset() {
	*x = Job{}
	mi := &file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_rawDescGZIP(), []int{0}
}

func (x *Job) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Job) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (m *Job) GetSource() isJob_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *Job) GetBucketList() *BucketList {
	if x, ok := x.GetSource().(*Job_BucketList); ok {
		return x.BucketList
	}
	return nil
}

func (m *Job) GetTransformation() isJob_Transformation {
	if m != nil {
		return m.Transformation
	}
	return nil
}

func (x *Job) GetPutObjectHold() *PutObjectHold {
	if x, ok := x.GetTransformation().(*Job_PutObjectHold); ok {
		return x.PutObjectHold
	}
	return nil
}

func (x *Job) GetDeleteObject() *DeleteObject {
	if x, ok := x.GetTransformation().(*Job_DeleteObject); ok {
		return x.DeleteObject
	}
	return nil
}

func (x *Job) GetPutMetadata() *PutMetadata {
	if x, ok := x.GetTransformation().(*Job_PutMetadata); ok {
		return x.PutMetadata
	}
	return nil
}

func (x *Job) GetRewriteObject() *RewriteObject {
	if x, ok := x.GetTransformation().(*Job_RewriteObject); ok {
		return x.RewriteObject
	}
	return nil
}

func (x *Job) GetLoggingConfig() *LoggingConfig {
	if x != nil {
		return x.LoggingConfig
	}
	return nil
}

func (x *Job) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Job) GetScheduleTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduleTime
	}
	return nil
}

func (x *Job) GetCompleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CompleteTime
	}
	return nil
}

func (x *Job) GetCounters() *Counters {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *Job) GetErrorSummaries() []*ErrorSummary {
	if x != nil {
		return x.ErrorSummaries
	}
	return nil
}

func (x *Job) GetState() Job_State {
	if x != nil {
		return x.State
	}
	return Job_STATE_UNSPECIFIED
}

type isJob_Source interface {
	isJob_Source()
}

type Job_BucketList struct {
	// Specifies a list of buckets and their objects to be transformed.
	BucketList *BucketList `protobuf:"bytes,19,opt,name=bucket_list,json=bucketList,proto3,oneof"`
}

func (*Job_BucketList) isJob_Source() {}

type isJob_Transformation interface {
	isJob_Transformation()
}

type Job_PutObjectHold struct {
	// Changes object hold status.
	PutObjectHold *PutObjectHold `protobuf:"bytes,5,opt,name=put_object_hold,json=putObjectHold,proto3,oneof"`
}

type Job_DeleteObject struct {
	// Delete objects.
	DeleteObject *DeleteObject `protobuf:"bytes,6,opt,name=delete_object,json=deleteObject,proto3,oneof"`
}

type Job_PutMetadata struct {
	// Updates object metadata. Allows updating fixed-key and custom metadata
	// and fixed-key metadata i.e. Cache-Control, Content-Disposition,
	// Content-Encoding, Content-Language, Content-Type, Custom-Time.
	PutMetadata *PutMetadata `protobuf:"bytes,8,opt,name=put_metadata,json=putMetadata,proto3,oneof"`
}

type Job_RewriteObject struct {
	// Rewrite the object and updates metadata like KMS key.
	RewriteObject *RewriteObject `protobuf:"bytes,20,opt,name=rewrite_object,json=rewriteObject,proto3,oneof"`
}

func (*Job_PutObjectHold) isJob_Transformation() {}

func (*Job_DeleteObject) isJob_Transformation() {}

func (*Job_PutMetadata) isJob_Transformation() {}

func (*Job_RewriteObject) isJob_Transformation() {}

// Describes list of buckets and their objects to be transformed.
type BucketList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. List of buckets and their objects to be transformed. Currently,
	// only one bucket configuration is supported. If multiple buckets are
	// specified, an error will be returned.
	Buckets []*BucketList_Bucket `protobuf:"bytes,1,rep,name=buckets,proto3" json:"buckets,omitempty"`
}

func (x *BucketList) Reset() {
	*x = BucketList{}
	mi := &file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BucketList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketList) ProtoMessage() {}

func (x *BucketList) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketList.ProtoReflect.Descriptor instead.
func (*BucketList) Descriptor() ([]byte, []int) {
	return file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_rawDescGZIP(), []int{1}
}

func (x *BucketList) GetBuckets() []*BucketList_Bucket {
	if x != nil {
		return x.Buckets
	}
	return nil
}

// Describes list of objects to be transformed.
type Manifest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. `manifest_location` must contain the manifest source file that is
	// a CSV file in a Google Cloud Storage bucket. Each row in the file must
	// include the object details i.e. BucketId and Name. Generation may
	// optionally be specified. When it is not specified the live object is acted
	// upon.
	//
	//	`manifest_location` should either be
	//
	// 1) An absolute path to the object in the format of
	// `gs://bucket_name/path/file_name.csv`.
	// 2) An absolute path with a single wildcard character in the file name, for
	// example `gs://bucket_name/path/file_name*.csv`.
	// If manifest location is specified with a wildcard, objects in all manifest
	// files matching the pattern will be acted upon.
	ManifestLocation string `protobuf:"bytes,2,opt,name=manifest_location,json=manifestLocation,proto3" json:"manifest_location,omitempty"`
}

func (x *Manifest) Reset() {
	*x = Manifest{}
	mi := &file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Manifest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Manifest) ProtoMessage() {}

func (x *Manifest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Manifest.ProtoReflect.Descriptor instead.
func (*Manifest) Descriptor() ([]byte, []int) {
	return file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_rawDescGZIP(), []int{2}
}

func (x *Manifest) GetManifestLocation() string {
	if x != nil {
		return x.ManifestLocation
	}
	return ""
}

// Describes prefixes of objects to be transformed.
type PrefixList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Include prefixes of the objects to be transformed.
	// * Supports full object name
	// * Supports prefix of the object name
	// * Wildcards are not supported
	// * Supports empty string for all objects in a bucket.
	IncludedObjectPrefixes []string `protobuf:"bytes,2,rep,name=included_object_prefixes,json=includedObjectPrefixes,proto3" json:"included_object_prefixes,omitempty"`
}

func (x *PrefixList) Reset() {
	*x = PrefixList{}
	mi := &file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrefixList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrefixList) ProtoMessage() {}

func (x *PrefixList) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrefixList.ProtoReflect.Descriptor instead.
func (*PrefixList) Descriptor() ([]byte, []int) {
	return file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_rawDescGZIP(), []int{3}
}

func (x *PrefixList) GetIncludedObjectPrefixes() []string {
	if x != nil {
		return x.IncludedObjectPrefixes
	}
	return nil
}

// Describes options to update object hold.
type PutObjectHold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Updates object temporary holds state. When object temporary hold
	// is set, object cannot be deleted or replaced.
	TemporaryHold PutObjectHold_HoldStatus `protobuf:"varint,1,opt,name=temporary_hold,json=temporaryHold,proto3,enum=google.cloud.storagebatchoperations.v1.PutObjectHold_HoldStatus" json:"temporary_hold,omitempty"`
	// Required. Updates object event based holds state. When object event based
	// hold is set, object cannot be deleted or replaced. Resets object's time in
	// the bucket for the purposes of the retention period.
	EventBasedHold PutObjectHold_HoldStatus `protobuf:"varint,2,opt,name=event_based_hold,json=eventBasedHold,proto3,enum=google.cloud.storagebatchoperations.v1.PutObjectHold_HoldStatus" json:"event_based_hold,omitempty"`
}

func (x *PutObjectHold) Reset() {
	*x = PutObjectHold{}
	mi := &file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PutObjectHold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutObjectHold) ProtoMessage() {}

func (x *PutObjectHold) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutObjectHold.ProtoReflect.Descriptor instead.
func (*PutObjectHold) Descriptor() ([]byte, []int) {
	return file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_rawDescGZIP(), []int{4}
}

func (x *PutObjectHold) GetTemporaryHold() PutObjectHold_HoldStatus {
	if x != nil {
		return x.TemporaryHold
	}
	return PutObjectHold_HOLD_STATUS_UNSPECIFIED
}

func (x *PutObjectHold) GetEventBasedHold() PutObjectHold_HoldStatus {
	if x != nil {
		return x.EventBasedHold
	}
	return PutObjectHold_HOLD_STATUS_UNSPECIFIED
}

// Describes options to delete an object.
type DeleteObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Controls deletion behavior when versioning is enabled for the
	// object's bucket. If true both live and noncurrent objects will be
	// permanently deleted. Otherwise live objects in versioned buckets will
	// become noncurrent and objects that were already noncurrent will be skipped.
	// This setting doesn't have any impact on the Soft Delete feature. All
	// objects deleted by this service can be be restored for the duration of the
	// Soft Delete retention duration if enabled. If enabled and the manifest
	// doesn't specify an object's generation, a GetObjectMetadata call (a Class B
	// operation) will be made to determine the live object generation.
	PermanentObjectDeletionEnabled bool `protobuf:"varint,1,opt,name=permanent_object_deletion_enabled,json=permanentObjectDeletionEnabled,proto3" json:"permanent_object_deletion_enabled,omitempty"`
}

func (x *DeleteObject) Reset() {
	*x = DeleteObject{}
	mi := &file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteObject) ProtoMessage() {}

func (x *DeleteObject) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteObject.ProtoReflect.Descriptor instead.
func (*DeleteObject) Descriptor() ([]byte, []int) {
	return file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteObject) GetPermanentObjectDeletionEnabled() bool {
	if x != nil {
		return x.PermanentObjectDeletionEnabled
	}
	return false
}

// Describes options for object rewrite.
type RewriteObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Resource name of the Cloud KMS key that will be used to encrypt
	// the object. The Cloud KMS key must be located in same location as the
	// object. Refer to
	// https://cloud.google.com/storage/docs/encryption/using-customer-managed-keys#add-object-key
	// for additional documentation. Format:
	// projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}
	// For example:
	// "projects/123456/locations/us-central1/keyRings/my-keyring/cryptoKeys/my-key".
	// The object will be rewritten and set with the specified KMS key.
	KmsKey *string `protobuf:"bytes,1,opt,name=kms_key,json=kmsKey,proto3,oneof" json:"kms_key,omitempty"`
}

func (x *RewriteObject) Reset() {
	*x = RewriteObject{}
	mi := &file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RewriteObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewriteObject) ProtoMessage() {}

func (x *RewriteObject) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewriteObject.ProtoReflect.Descriptor instead.
func (*RewriteObject) Descriptor() ([]byte, []int) {
	return file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_rawDescGZIP(), []int{6}
}

func (x *RewriteObject) GetKmsKey() string {
	if x != nil && x.KmsKey != nil {
		return *x.KmsKey
	}
	return ""
}

// Describes options for object metadata update.
type PutMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Updates objects Content-Disposition fixed metadata. Unset values
	// will be ignored. Set empty values to clear the metadata. Refer
	// https://cloud.google.com/storage/docs/metadata#content-disposition for
	// additional documentation.
	ContentDisposition *string `protobuf:"bytes,1,opt,name=content_disposition,json=contentDisposition,proto3,oneof" json:"content_disposition,omitempty"`
	// Optional. Updates objects Content-Encoding fixed metadata. Unset values
	// will be ignored. Set empty values to clear the metadata. Refer to
	// documentation in
	// https://cloud.google.com/storage/docs/metadata#content-encoding.
	ContentEncoding *string `protobuf:"bytes,2,opt,name=content_encoding,json=contentEncoding,proto3,oneof" json:"content_encoding,omitempty"`
	// Optional. Updates objects Content-Language fixed metadata. Refer to ISO
	// 639-1 language codes for typical values of this metadata. Max length 100
	// characters. Unset values will be ignored. Set empty values to clear the
	// metadata. Refer to documentation in
	// https://cloud.google.com/storage/docs/metadata#content-language.
	ContentLanguage *string `protobuf:"bytes,3,opt,name=content_language,json=contentLanguage,proto3,oneof" json:"content_language,omitempty"`
	// Optional. Updates objects Content-Type fixed metadata. Unset values will be
	// ignored.
	//
	//	Set empty values to clear the metadata. Refer to documentation in
	//	https://cloud.google.com/storage/docs/metadata#content-type
	ContentType *string `protobuf:"bytes,4,opt,name=content_type,json=contentType,proto3,oneof" json:"content_type,omitempty"`
	// Optional. Updates objects Cache-Control fixed metadata. Unset values will
	// be
	//
	//	ignored. Set empty values to clear the metadata.
	//	Additionally, the value for Custom-Time cannot decrease. Refer to
	//	documentation in
	//
	// https://cloud.google.com/storage/docs/metadata#caching_data.
	CacheControl *string `protobuf:"bytes,5,opt,name=cache_control,json=cacheControl,proto3,oneof" json:"cache_control,omitempty"`
	// Optional. Updates objects Custom-Time fixed metadata. Unset values will be
	// ignored. Set empty values to clear the metadata. Refer to documentation in
	// https://cloud.google.com/storage/docs/metadata#custom-time.
	CustomTime *string `protobuf:"bytes,6,opt,name=custom_time,json=customTime,proto3,oneof" json:"custom_time,omitempty"`
	// Optional. Updates objects custom metadata. Adds or sets individual custom
	// metadata key value pairs on objects. Keys that are set with empty custom
	// metadata values will have its value cleared. Existing custom metadata not
	// specified with this flag is not changed. Refer to documentation in
	// https://cloud.google.com/storage/docs/metadata#custom-metadata
	CustomMetadata map[string]string `protobuf:"bytes,7,rep,name=custom_metadata,json=customMetadata,proto3" json:"custom_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PutMetadata) Reset() {
	*x = PutMetadata{}
	mi := &file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PutMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutMetadata) ProtoMessage() {}

func (x *PutMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutMetadata.ProtoReflect.Descriptor instead.
func (*PutMetadata) Descriptor() ([]byte, []int) {
	return file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_rawDescGZIP(), []int{7}
}

func (x *PutMetadata) GetContentDisposition() string {
	if x != nil && x.ContentDisposition != nil {
		return *x.ContentDisposition
	}
	return ""
}

func (x *PutMetadata) GetContentEncoding() string {
	if x != nil && x.ContentEncoding != nil {
		return *x.ContentEncoding
	}
	return ""
}

func (x *PutMetadata) GetContentLanguage() string {
	if x != nil && x.ContentLanguage != nil {
		return *x.ContentLanguage
	}
	return ""
}

func (x *PutMetadata) GetContentType() string {
	if x != nil && x.ContentType != nil {
		return *x.ContentType
	}
	return ""
}

func (x *PutMetadata) GetCacheControl() string {
	if x != nil && x.CacheControl != nil {
		return *x.CacheControl
	}
	return ""
}

func (x *PutMetadata) GetCustomTime() string {
	if x != nil && x.CustomTime != nil {
		return *x.CustomTime
	}
	return ""
}

func (x *PutMetadata) GetCustomMetadata() map[string]string {
	if x != nil {
		return x.CustomMetadata
	}
	return nil
}

// A summary of errors by error code, plus a count and sample error log
// entries.
type ErrorSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The canonical error code.
	ErrorCode code.Code `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=google.rpc.Code" json:"error_code,omitempty"`
	// Required. Number of errors encountered per `error_code`.
	ErrorCount int64 `protobuf:"varint,2,opt,name=error_count,json=errorCount,proto3" json:"error_count,omitempty"`
	// Required. Sample error logs.
	ErrorLogEntries []*ErrorLogEntry `protobuf:"bytes,3,rep,name=error_log_entries,json=errorLogEntries,proto3" json:"error_log_entries,omitempty"`
}

func (x *ErrorSummary) Reset() {
	*x = ErrorSummary{}
	mi := &file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorSummary) ProtoMessage() {}

func (x *ErrorSummary) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorSummary.ProtoReflect.Descriptor instead.
func (*ErrorSummary) Descriptor() ([]byte, []int) {
	return file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_rawDescGZIP(), []int{8}
}

func (x *ErrorSummary) GetErrorCode() code.Code {
	if x != nil {
		return x.ErrorCode
	}
	return code.Code(0)
}

func (x *ErrorSummary) GetErrorCount() int64 {
	if x != nil {
		return x.ErrorCount
	}
	return 0
}

func (x *ErrorSummary) GetErrorLogEntries() []*ErrorLogEntry {
	if x != nil {
		return x.ErrorLogEntries
	}
	return nil
}

// An entry describing an error that has occurred.
type ErrorLogEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Output only. Object URL. e.g. gs://my_bucket/object.txt
	ObjectUri string `protobuf:"bytes,1,opt,name=object_uri,json=objectUri,proto3" json:"object_uri,omitempty"`
	// Optional. Output only. At most 5 error log entries are recorded for a given
	// error code for a job.
	ErrorDetails []string `protobuf:"bytes,3,rep,name=error_details,json=errorDetails,proto3" json:"error_details,omitempty"`
}

func (x *ErrorLogEntry) Reset() {
	*x = ErrorLogEntry{}
	mi := &file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorLogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorLogEntry) ProtoMessage() {}

func (x *ErrorLogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorLogEntry.ProtoReflect.Descriptor instead.
func (*ErrorLogEntry) Descriptor() ([]byte, []int) {
	return file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_rawDescGZIP(), []int{9}
}

func (x *ErrorLogEntry) GetObjectUri() string {
	if x != nil {
		return x.ObjectUri
	}
	return ""
}

func (x *ErrorLogEntry) GetErrorDetails() []string {
	if x != nil {
		return x.ErrorDetails
	}
	return nil
}

// Describes details about the progress of the job.
type Counters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Number of objects listed.
	TotalObjectCount int64 `protobuf:"varint,1,opt,name=total_object_count,json=totalObjectCount,proto3" json:"total_object_count,omitempty"`
	// Output only. Number of objects completed.
	SucceededObjectCount int64 `protobuf:"varint,2,opt,name=succeeded_object_count,json=succeededObjectCount,proto3" json:"succeeded_object_count,omitempty"`
	// Output only. Number of objects failed.
	FailedObjectCount int64 `protobuf:"varint,3,opt,name=failed_object_count,json=failedObjectCount,proto3" json:"failed_object_count,omitempty"`
}

func (x *Counters) Reset() {
	*x = Counters{}
	mi := &file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Counters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Counters) ProtoMessage() {}

func (x *Counters) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Counters.ProtoReflect.Descriptor instead.
func (*Counters) Descriptor() ([]byte, []int) {
	return file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_rawDescGZIP(), []int{10}
}

func (x *Counters) GetTotalObjectCount() int64 {
	if x != nil {
		return x.TotalObjectCount
	}
	return 0
}

func (x *Counters) GetSucceededObjectCount() int64 {
	if x != nil {
		return x.SucceededObjectCount
	}
	return 0
}

func (x *Counters) GetFailedObjectCount() int64 {
	if x != nil {
		return x.FailedObjectCount
	}
	return 0
}

// Specifies the Cloud Logging behavior.
type LoggingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Specifies the actions to be logged.
	LogActions []LoggingConfig_LoggableAction `protobuf:"varint,1,rep,packed,name=log_actions,json=logActions,proto3,enum=google.cloud.storagebatchoperations.v1.LoggingConfig_LoggableAction" json:"log_actions,omitempty"`
	// Required. States in which Action are logged.If empty, no logs are
	// generated.
	LogActionStates []LoggingConfig_LoggableActionState `protobuf:"varint,2,rep,packed,name=log_action_states,json=logActionStates,proto3,enum=google.cloud.storagebatchoperations.v1.LoggingConfig_LoggableActionState" json:"log_action_states,omitempty"`
}

func (x *LoggingConfig) Reset() {
	*x = LoggingConfig{}
	mi := &file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoggingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoggingConfig) ProtoMessage() {}

func (x *LoggingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoggingConfig.ProtoReflect.Descriptor instead.
func (*LoggingConfig) Descriptor() ([]byte, []int) {
	return file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_rawDescGZIP(), []int{11}
}

func (x *LoggingConfig) GetLogActions() []LoggingConfig_LoggableAction {
	if x != nil {
		return x.LogActions
	}
	return nil
}

func (x *LoggingConfig) GetLogActionStates() []LoggingConfig_LoggableActionState {
	if x != nil {
		return x.LogActionStates
	}
	return nil
}

// Describes configuration of a single bucket and its objects to be
// transformed.
type BucketList_Bucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Bucket name for the objects to be transformed.
	Bucket string `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	// Specifies objects to be transformed.
	//
	// Types that are assignable to ObjectConfiguration:
	//
	//	*BucketList_Bucket_PrefixList
	//	*BucketList_Bucket_Manifest
	ObjectConfiguration isBucketList_Bucket_ObjectConfiguration `protobuf_oneof:"object_configuration"`
}

func (x *BucketList_Bucket) Reset() {
	*x = BucketList_Bucket{}
	mi := &file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BucketList_Bucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketList_Bucket) ProtoMessage() {}

func (x *BucketList_Bucket) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketList_Bucket.ProtoReflect.Descriptor instead.
func (*BucketList_Bucket) Descriptor() ([]byte, []int) {
	return file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_rawDescGZIP(), []int{1, 0}
}

func (x *BucketList_Bucket) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (m *BucketList_Bucket) GetObjectConfiguration() isBucketList_Bucket_ObjectConfiguration {
	if m != nil {
		return m.ObjectConfiguration
	}
	return nil
}

func (x *BucketList_Bucket) GetPrefixList() *PrefixList {
	if x, ok := x.GetObjectConfiguration().(*BucketList_Bucket_PrefixList); ok {
		return x.PrefixList
	}
	return nil
}

func (x *BucketList_Bucket) GetManifest() *Manifest {
	if x, ok := x.GetObjectConfiguration().(*BucketList_Bucket_Manifest); ok {
		return x.Manifest
	}
	return nil
}

type isBucketList_Bucket_ObjectConfiguration interface {
	isBucketList_Bucket_ObjectConfiguration()
}

type BucketList_Bucket_PrefixList struct {
	// Specifies objects matching a prefix set.
	PrefixList *PrefixList `protobuf:"bytes,2,opt,name=prefix_list,json=prefixList,proto3,oneof"`
}

type BucketList_Bucket_Manifest struct {
	// Specifies objects in a manifest file.
	Manifest *Manifest `protobuf:"bytes,3,opt,name=manifest,proto3,oneof"`
}

func (*BucketList_Bucket_PrefixList) isBucketList_Bucket_ObjectConfiguration() {}

func (*BucketList_Bucket_Manifest) isBucketList_Bucket_ObjectConfiguration() {}

var File_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto protoreflect.FileDescriptor

var file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_rawDesc = []byte{
	0x0a, 0x4b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x62, 0x61, 0x74, 0x63, 0x68, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x26, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x62, 0x61, 0x74, 0x63, 0x68, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x15, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xab, 0x0a, 0x0a, 0x03, 0x4a, 0x6f,
	0x62, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x08, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x55, 0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x0f, 0x70, 0x75, 0x74, 0x5f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x62, 0x61, 0x74, 0x63, 0x68, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x74, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x48, 0x01, 0x52, 0x0d, 0x70, 0x75, 0x74, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x6f, 0x6c, 0x64, 0x12, 0x5b, 0x0a, 0x0d, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x62, 0x61, 0x74, 0x63, 0x68, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x01, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x58, 0x0a, 0x0c, 0x70, 0x75, 0x74, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x62, 0x61, 0x74, 0x63, 0x68, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x48, 0x01, 0x52, 0x0b, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x5e, 0x0a, 0x0e, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x48,
	0x01, 0x52, 0x0d, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x61, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0c, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x51, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x62, 0x61, 0x74, 0x63, 0x68, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x62, 0x0a, 0x0f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x62, 0x61, 0x74, 0x63, 0x68, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x54, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e,
	0x47, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x3a, 0x6d, 0xea, 0x41,
	0x6a, 0x0a, 0x29, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x62, 0x61, 0x74, 0x63, 0x68, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4a, 0x6f, 0x62, 0x12, 0x32, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d,
	0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x2f, 0x7b, 0x6a, 0x6f, 0x62, 0x7d,
	0x2a, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x32, 0x03, 0x6a, 0x6f, 0x62, 0x42, 0x08, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xcd, 0x02, 0x0a, 0x0a, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x1a, 0xe4, 0x01, 0x0a, 0x06, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x55, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x62, 0x61, 0x74, 0x63, 0x68, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x4e, 0x0a, 0x08, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x62, 0x61, 0x74, 0x63, 0x68, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x69, 0x66,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x42,
	0x16, 0x0a, 0x14, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3c, 0x0a, 0x08, 0x4d, 0x61, 0x6e, 0x69, 0x66,
	0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x11, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x10, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4b, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x18, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x16, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x65, 0x73, 0x22, 0xad, 0x02, 0x0a, 0x0d, 0x50, 0x75, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x48, 0x6f, 0x6c, 0x64, 0x12, 0x6c, 0x0a, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72,
	0x79, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x62, 0x61, 0x74, 0x63, 0x68, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x48,
	0x6f, 0x6c, 0x64, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x48, 0x6f,
	0x6c, 0x64, 0x12, 0x6f, 0x0a, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x64, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x62, 0x61, 0x74, 0x63, 0x68, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x48,
	0x6f, 0x6c, 0x64, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x65, 0x64, 0x48,
	0x6f, 0x6c, 0x64, 0x22, 0x3d, 0x0a, 0x0a, 0x48, 0x6f, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1b, 0x0a, 0x17, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x03, 0x53, 0x45, 0x54, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x4e, 0x53, 0x45, 0x54,
	0x10, 0x02, 0x22, 0x5e, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x4e, 0x0a, 0x21, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x5f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x1e, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x22, 0x64, 0x0a, 0x0d, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x47, 0x0a, 0x07, 0x6b, 0x6d, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x23, 0x0a, 0x21, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x6b, 0x6d, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x4b, 0x65, 0x79, 0x48,
	0x00, 0x52, 0x06, 0x6b, 0x6d, 0x73, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x6b, 0x6d, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x22, 0xe8, 0x04, 0x0a, 0x0b, 0x50, 0x75, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x12, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x65,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x48, 0x01, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x02, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0d, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x04, 0x52, 0x0c, 0x63, 0x61, 0x63, 0x68, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0b, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x48, 0x05, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x75, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x62, 0x61, 0x74, 0x63, 0x68, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x41, 0x0a, 0x13, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x16,
	0x0a, 0x14, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x22, 0xd2, 0x01, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x34, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x66, 0x0a, 0x11, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x62, 0x61, 0x74, 0x63, 0x68, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4c, 0x6f,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x63, 0x0a, 0x0d, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x0a, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe0,
	0x41, 0x02, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x72, 0x69,
	0x12, 0x2b, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x06, 0xe0, 0x41, 0x01, 0xe0, 0x41, 0x03, 0x52,
	0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xad, 0x01,
	0x0a, 0x08, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x31, 0x0a, 0x12, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x10, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a,
	0x16, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x14, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x13, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x11, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x92, 0x03,
	0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x6a, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x44, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x67,
	0x61, 0x62, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x0a, 0x6c, 0x6f, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x7a, 0x0a, 0x11, 0x6c,
	0x6f, 0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x49, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x6f,
	0x67, 0x67, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x22, 0x40, 0x0a, 0x0e, 0x4c, 0x6f, 0x67, 0x67, 0x61,
	0x62, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x1b, 0x4c, 0x4f, 0x47,
	0x47, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x06, 0x22, 0x57, 0x0a, 0x13, 0x4c, 0x6f, 0x67,
	0x67, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x25, 0x0a, 0x21, 0x4c, 0x4f, 0x47, 0x47, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x45, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x02, 0x42, 0xad, 0x03, 0xea, 0x41, 0x78, 0x0a, 0x21, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x6b,
	0x6d, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x4b, 0x65, 0x79, 0x12, 0x53, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x6b, 0x65, 0x79, 0x52, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x7b, 0x6b,
	0x65, 0x79, 0x5f, 0x72, 0x69, 0x6e, 0x67, 0x7d, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x4b,
	0x65, 0x79, 0x73, 0x2f, 0x7b, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x6b, 0x65, 0x79, 0x7d,
	0x0a, 0x2a, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x62, 0x61, 0x74, 0x63, 0x68, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x20, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x62, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x62, 0x61, 0x74, 0x63, 0x68, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x62, 0x3b, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x62, 0x61, 0x74, 0x63, 0x68, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x70, 0x62, 0xaa, 0x02, 0x26, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x26,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5c, 0x56, 0x31, 0xea, 0x02, 0x29, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a,
	0x3a, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x3a,
	0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_rawDescOnce sync.Once
	file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_rawDescData = file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_rawDesc
)

func file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_rawDescGZIP() []byte {
	file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_rawDescOnce.Do(func() {
		file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_rawDescData)
	})
	return file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_rawDescData
}

var file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_goTypes = []any{
	(Job_State)(0),                         // 0: google.cloud.storagebatchoperations.v1.Job.State
	(PutObjectHold_HoldStatus)(0),          // 1: google.cloud.storagebatchoperations.v1.PutObjectHold.HoldStatus
	(LoggingConfig_LoggableAction)(0),      // 2: google.cloud.storagebatchoperations.v1.LoggingConfig.LoggableAction
	(LoggingConfig_LoggableActionState)(0), // 3: google.cloud.storagebatchoperations.v1.LoggingConfig.LoggableActionState
	(*Job)(nil),                            // 4: google.cloud.storagebatchoperations.v1.Job
	(*BucketList)(nil),                     // 5: google.cloud.storagebatchoperations.v1.BucketList
	(*Manifest)(nil),                       // 6: google.cloud.storagebatchoperations.v1.Manifest
	(*PrefixList)(nil),                     // 7: google.cloud.storagebatchoperations.v1.PrefixList
	(*PutObjectHold)(nil),                  // 8: google.cloud.storagebatchoperations.v1.PutObjectHold
	(*DeleteObject)(nil),                   // 9: google.cloud.storagebatchoperations.v1.DeleteObject
	(*RewriteObject)(nil),                  // 10: google.cloud.storagebatchoperations.v1.RewriteObject
	(*PutMetadata)(nil),                    // 11: google.cloud.storagebatchoperations.v1.PutMetadata
	(*ErrorSummary)(nil),                   // 12: google.cloud.storagebatchoperations.v1.ErrorSummary
	(*ErrorLogEntry)(nil),                  // 13: google.cloud.storagebatchoperations.v1.ErrorLogEntry
	(*Counters)(nil),                       // 14: google.cloud.storagebatchoperations.v1.Counters
	(*LoggingConfig)(nil),                  // 15: google.cloud.storagebatchoperations.v1.LoggingConfig
	(*BucketList_Bucket)(nil),              // 16: google.cloud.storagebatchoperations.v1.BucketList.Bucket
	nil,                                    // 17: google.cloud.storagebatchoperations.v1.PutMetadata.CustomMetadataEntry
	(*timestamppb.Timestamp)(nil),          // 18: google.protobuf.Timestamp
	(code.Code)(0),                         // 19: google.rpc.Code
}
var file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_depIdxs = []int32{
	5,  // 0: google.cloud.storagebatchoperations.v1.Job.bucket_list:type_name -> google.cloud.storagebatchoperations.v1.BucketList
	8,  // 1: google.cloud.storagebatchoperations.v1.Job.put_object_hold:type_name -> google.cloud.storagebatchoperations.v1.PutObjectHold
	9,  // 2: google.cloud.storagebatchoperations.v1.Job.delete_object:type_name -> google.cloud.storagebatchoperations.v1.DeleteObject
	11, // 3: google.cloud.storagebatchoperations.v1.Job.put_metadata:type_name -> google.cloud.storagebatchoperations.v1.PutMetadata
	10, // 4: google.cloud.storagebatchoperations.v1.Job.rewrite_object:type_name -> google.cloud.storagebatchoperations.v1.RewriteObject
	15, // 5: google.cloud.storagebatchoperations.v1.Job.logging_config:type_name -> google.cloud.storagebatchoperations.v1.LoggingConfig
	18, // 6: google.cloud.storagebatchoperations.v1.Job.create_time:type_name -> google.protobuf.Timestamp
	18, // 7: google.cloud.storagebatchoperations.v1.Job.schedule_time:type_name -> google.protobuf.Timestamp
	18, // 8: google.cloud.storagebatchoperations.v1.Job.complete_time:type_name -> google.protobuf.Timestamp
	14, // 9: google.cloud.storagebatchoperations.v1.Job.counters:type_name -> google.cloud.storagebatchoperations.v1.Counters
	12, // 10: google.cloud.storagebatchoperations.v1.Job.error_summaries:type_name -> google.cloud.storagebatchoperations.v1.ErrorSummary
	0,  // 11: google.cloud.storagebatchoperations.v1.Job.state:type_name -> google.cloud.storagebatchoperations.v1.Job.State
	16, // 12: google.cloud.storagebatchoperations.v1.BucketList.buckets:type_name -> google.cloud.storagebatchoperations.v1.BucketList.Bucket
	1,  // 13: google.cloud.storagebatchoperations.v1.PutObjectHold.temporary_hold:type_name -> google.cloud.storagebatchoperations.v1.PutObjectHold.HoldStatus
	1,  // 14: google.cloud.storagebatchoperations.v1.PutObjectHold.event_based_hold:type_name -> google.cloud.storagebatchoperations.v1.PutObjectHold.HoldStatus
	17, // 15: google.cloud.storagebatchoperations.v1.PutMetadata.custom_metadata:type_name -> google.cloud.storagebatchoperations.v1.PutMetadata.CustomMetadataEntry
	19, // 16: google.cloud.storagebatchoperations.v1.ErrorSummary.error_code:type_name -> google.rpc.Code
	13, // 17: google.cloud.storagebatchoperations.v1.ErrorSummary.error_log_entries:type_name -> google.cloud.storagebatchoperations.v1.ErrorLogEntry
	2,  // 18: google.cloud.storagebatchoperations.v1.LoggingConfig.log_actions:type_name -> google.cloud.storagebatchoperations.v1.LoggingConfig.LoggableAction
	3,  // 19: google.cloud.storagebatchoperations.v1.LoggingConfig.log_action_states:type_name -> google.cloud.storagebatchoperations.v1.LoggingConfig.LoggableActionState
	7,  // 20: google.cloud.storagebatchoperations.v1.BucketList.Bucket.prefix_list:type_name -> google.cloud.storagebatchoperations.v1.PrefixList
	6,  // 21: google.cloud.storagebatchoperations.v1.BucketList.Bucket.manifest:type_name -> google.cloud.storagebatchoperations.v1.Manifest
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_init() }
func file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_init() {
	if File_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto != nil {
		return
	}
	file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_msgTypes[0].OneofWrappers = []any{
		(*Job_BucketList)(nil),
		(*Job_PutObjectHold)(nil),
		(*Job_DeleteObject)(nil),
		(*Job_PutMetadata)(nil),
		(*Job_RewriteObject)(nil),
	}
	file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_msgTypes[6].OneofWrappers = []any{}
	file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_msgTypes[7].OneofWrappers = []any{}
	file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_msgTypes[12].OneofWrappers = []any{
		(*BucketList_Bucket_PrefixList)(nil),
		(*BucketList_Bucket_Manifest)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_goTypes,
		DependencyIndexes: file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_depIdxs,
		EnumInfos:         file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_enumTypes,
		MessageInfos:      file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_msgTypes,
	}.Build()
	File_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto = out.File
	file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_rawDesc = nil
	file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_goTypes = nil
	file_google_cloud_storagebatchoperations_v1_storage_batch_operations_types_proto_depIdxs = nil
}
