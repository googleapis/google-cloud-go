// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/storagebatchoperations/v1/storage_batch_operations.proto

package storagebatchoperationspb

import (
	context "context"

	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StorageBatchOperations_ListJobs_FullMethodName  = "/google.cloud.storagebatchoperations.v1.StorageBatchOperations/ListJobs"
	StorageBatchOperations_GetJob_FullMethodName    = "/google.cloud.storagebatchoperations.v1.StorageBatchOperations/GetJob"
	StorageBatchOperations_CreateJob_FullMethodName = "/google.cloud.storagebatchoperations.v1.StorageBatchOperations/CreateJob"
	StorageBatchOperations_DeleteJob_FullMethodName = "/google.cloud.storagebatchoperations.v1.StorageBatchOperations/DeleteJob"
	StorageBatchOperations_CancelJob_FullMethodName = "/google.cloud.storagebatchoperations.v1.StorageBatchOperations/CancelJob"
)

// StorageBatchOperationsClient is the client API for StorageBatchOperations service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageBatchOperationsClient interface {
	// Lists Jobs in a given project.
	ListJobs(ctx context.Context, in *ListJobsRequest, opts ...grpc.CallOption) (*ListJobsResponse, error)
	// Gets a batch job.
	GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*Job, error)
	// Creates a batch job.
	CreateJob(ctx context.Context, in *CreateJobRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a batch job.
	DeleteJob(ctx context.Context, in *DeleteJobRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Cancels a batch job.
	CancelJob(ctx context.Context, in *CancelJobRequest, opts ...grpc.CallOption) (*CancelJobResponse, error)
}

type storageBatchOperationsClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageBatchOperationsClient(cc grpc.ClientConnInterface) StorageBatchOperationsClient {
	return &storageBatchOperationsClient{cc}
}

func (c *storageBatchOperationsClient) ListJobs(ctx context.Context, in *ListJobsRequest, opts ...grpc.CallOption) (*ListJobsResponse, error) {
	out := new(ListJobsResponse)
	err := c.cc.Invoke(ctx, StorageBatchOperations_ListJobs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageBatchOperationsClient) GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, StorageBatchOperations_GetJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageBatchOperationsClient) CreateJob(ctx context.Context, in *CreateJobRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, StorageBatchOperations_CreateJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageBatchOperationsClient) DeleteJob(ctx context.Context, in *DeleteJobRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StorageBatchOperations_DeleteJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageBatchOperationsClient) CancelJob(ctx context.Context, in *CancelJobRequest, opts ...grpc.CallOption) (*CancelJobResponse, error) {
	out := new(CancelJobResponse)
	err := c.cc.Invoke(ctx, StorageBatchOperations_CancelJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageBatchOperationsServer is the server API for StorageBatchOperations service.
// All implementations should embed UnimplementedStorageBatchOperationsServer
// for forward compatibility
type StorageBatchOperationsServer interface {
	// Lists Jobs in a given project.
	ListJobs(context.Context, *ListJobsRequest) (*ListJobsResponse, error)
	// Gets a batch job.
	GetJob(context.Context, *GetJobRequest) (*Job, error)
	// Creates a batch job.
	CreateJob(context.Context, *CreateJobRequest) (*longrunningpb.Operation, error)
	// Deletes a batch job.
	DeleteJob(context.Context, *DeleteJobRequest) (*emptypb.Empty, error)
	// Cancels a batch job.
	CancelJob(context.Context, *CancelJobRequest) (*CancelJobResponse, error)
}

// UnimplementedStorageBatchOperationsServer should be embedded to have forward compatible implementations.
type UnimplementedStorageBatchOperationsServer struct {
}

func (UnimplementedStorageBatchOperationsServer) ListJobs(context.Context, *ListJobsRequest) (*ListJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJobs not implemented")
}
func (UnimplementedStorageBatchOperationsServer) GetJob(context.Context, *GetJobRequest) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJob not implemented")
}
func (UnimplementedStorageBatchOperationsServer) CreateJob(context.Context, *CreateJobRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJob not implemented")
}
func (UnimplementedStorageBatchOperationsServer) DeleteJob(context.Context, *DeleteJobRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJob not implemented")
}
func (UnimplementedStorageBatchOperationsServer) CancelJob(context.Context, *CancelJobRequest) (*CancelJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelJob not implemented")
}

// UnsafeStorageBatchOperationsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageBatchOperationsServer will
// result in compilation errors.
type UnsafeStorageBatchOperationsServer interface {
	mustEmbedUnimplementedStorageBatchOperationsServer()
}

func RegisterStorageBatchOperationsServer(s grpc.ServiceRegistrar, srv StorageBatchOperationsServer) {
	s.RegisterService(&StorageBatchOperations_ServiceDesc, srv)
}

func _StorageBatchOperations_ListJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageBatchOperationsServer).ListJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageBatchOperations_ListJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageBatchOperationsServer).ListJobs(ctx, req.(*ListJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageBatchOperations_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageBatchOperationsServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageBatchOperations_GetJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageBatchOperationsServer).GetJob(ctx, req.(*GetJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageBatchOperations_CreateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageBatchOperationsServer).CreateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageBatchOperations_CreateJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageBatchOperationsServer).CreateJob(ctx, req.(*CreateJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageBatchOperations_DeleteJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageBatchOperationsServer).DeleteJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageBatchOperations_DeleteJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageBatchOperationsServer).DeleteJob(ctx, req.(*DeleteJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageBatchOperations_CancelJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageBatchOperationsServer).CancelJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageBatchOperations_CancelJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageBatchOperationsServer).CancelJob(ctx, req.(*CancelJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StorageBatchOperations_ServiceDesc is the grpc.ServiceDesc for StorageBatchOperations service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorageBatchOperations_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.storagebatchoperations.v1.StorageBatchOperations",
	HandlerType: (*StorageBatchOperationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListJobs",
			Handler:    _StorageBatchOperations_ListJobs_Handler,
		},
		{
			MethodName: "GetJob",
			Handler:    _StorageBatchOperations_GetJob_Handler,
		},
		{
			MethodName: "CreateJob",
			Handler:    _StorageBatchOperations_CreateJob_Handler,
		},
		{
			MethodName: "DeleteJob",
			Handler:    _StorageBatchOperations_DeleteJob_Handler,
		},
		{
			MethodName: "CancelJob",
			Handler:    _StorageBatchOperations_CancelJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/storagebatchoperations/v1/storage_batch_operations.proto",
}
