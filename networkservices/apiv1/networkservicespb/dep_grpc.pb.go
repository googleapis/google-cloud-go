// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/networkservices/v1/dep.proto

package networkservicespb

import (
	context "context"

	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DepService_ListLbTrafficExtensions_FullMethodName  = "/google.cloud.networkservices.v1.DepService/ListLbTrafficExtensions"
	DepService_GetLbTrafficExtension_FullMethodName    = "/google.cloud.networkservices.v1.DepService/GetLbTrafficExtension"
	DepService_CreateLbTrafficExtension_FullMethodName = "/google.cloud.networkservices.v1.DepService/CreateLbTrafficExtension"
	DepService_UpdateLbTrafficExtension_FullMethodName = "/google.cloud.networkservices.v1.DepService/UpdateLbTrafficExtension"
	DepService_DeleteLbTrafficExtension_FullMethodName = "/google.cloud.networkservices.v1.DepService/DeleteLbTrafficExtension"
	DepService_ListLbRouteExtensions_FullMethodName    = "/google.cloud.networkservices.v1.DepService/ListLbRouteExtensions"
	DepService_GetLbRouteExtension_FullMethodName      = "/google.cloud.networkservices.v1.DepService/GetLbRouteExtension"
	DepService_CreateLbRouteExtension_FullMethodName   = "/google.cloud.networkservices.v1.DepService/CreateLbRouteExtension"
	DepService_UpdateLbRouteExtension_FullMethodName   = "/google.cloud.networkservices.v1.DepService/UpdateLbRouteExtension"
	DepService_DeleteLbRouteExtension_FullMethodName   = "/google.cloud.networkservices.v1.DepService/DeleteLbRouteExtension"
	DepService_ListAuthzExtensions_FullMethodName      = "/google.cloud.networkservices.v1.DepService/ListAuthzExtensions"
	DepService_GetAuthzExtension_FullMethodName        = "/google.cloud.networkservices.v1.DepService/GetAuthzExtension"
	DepService_CreateAuthzExtension_FullMethodName     = "/google.cloud.networkservices.v1.DepService/CreateAuthzExtension"
	DepService_UpdateAuthzExtension_FullMethodName     = "/google.cloud.networkservices.v1.DepService/UpdateAuthzExtension"
	DepService_DeleteAuthzExtension_FullMethodName     = "/google.cloud.networkservices.v1.DepService/DeleteAuthzExtension"
)

// DepServiceClient is the client API for DepService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DepServiceClient interface {
	// Lists `LbTrafficExtension` resources in a given project and location.
	ListLbTrafficExtensions(ctx context.Context, in *ListLbTrafficExtensionsRequest, opts ...grpc.CallOption) (*ListLbTrafficExtensionsResponse, error)
	// Gets details of the specified `LbTrafficExtension` resource.
	GetLbTrafficExtension(ctx context.Context, in *GetLbTrafficExtensionRequest, opts ...grpc.CallOption) (*LbTrafficExtension, error)
	// Creates a new `LbTrafficExtension` resource in a given project and
	// location.
	CreateLbTrafficExtension(ctx context.Context, in *CreateLbTrafficExtensionRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates the parameters of the specified `LbTrafficExtension` resource.
	UpdateLbTrafficExtension(ctx context.Context, in *UpdateLbTrafficExtensionRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes the specified `LbTrafficExtension` resource.
	DeleteLbTrafficExtension(ctx context.Context, in *DeleteLbTrafficExtensionRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists `LbRouteExtension` resources in a given project and location.
	ListLbRouteExtensions(ctx context.Context, in *ListLbRouteExtensionsRequest, opts ...grpc.CallOption) (*ListLbRouteExtensionsResponse, error)
	// Gets details of the specified `LbRouteExtension` resource.
	GetLbRouteExtension(ctx context.Context, in *GetLbRouteExtensionRequest, opts ...grpc.CallOption) (*LbRouteExtension, error)
	// Creates a new `LbRouteExtension` resource in a given project and location.
	CreateLbRouteExtension(ctx context.Context, in *CreateLbRouteExtensionRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates the parameters of the specified `LbRouteExtension` resource.
	UpdateLbRouteExtension(ctx context.Context, in *UpdateLbRouteExtensionRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes the specified `LbRouteExtension` resource.
	DeleteLbRouteExtension(ctx context.Context, in *DeleteLbRouteExtensionRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists `AuthzExtension` resources in a given project and location.
	ListAuthzExtensions(ctx context.Context, in *ListAuthzExtensionsRequest, opts ...grpc.CallOption) (*ListAuthzExtensionsResponse, error)
	// Gets details of the specified `AuthzExtension` resource.
	GetAuthzExtension(ctx context.Context, in *GetAuthzExtensionRequest, opts ...grpc.CallOption) (*AuthzExtension, error)
	// Creates a new `AuthzExtension` resource in a given project
	// and location.
	CreateAuthzExtension(ctx context.Context, in *CreateAuthzExtensionRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates the parameters of the specified `AuthzExtension`
	// resource.
	UpdateAuthzExtension(ctx context.Context, in *UpdateAuthzExtensionRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes the specified `AuthzExtension` resource.
	DeleteAuthzExtension(ctx context.Context, in *DeleteAuthzExtensionRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type depServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDepServiceClient(cc grpc.ClientConnInterface) DepServiceClient {
	return &depServiceClient{cc}
}

func (c *depServiceClient) ListLbTrafficExtensions(ctx context.Context, in *ListLbTrafficExtensionsRequest, opts ...grpc.CallOption) (*ListLbTrafficExtensionsResponse, error) {
	out := new(ListLbTrafficExtensionsResponse)
	err := c.cc.Invoke(ctx, DepService_ListLbTrafficExtensions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depServiceClient) GetLbTrafficExtension(ctx context.Context, in *GetLbTrafficExtensionRequest, opts ...grpc.CallOption) (*LbTrafficExtension, error) {
	out := new(LbTrafficExtension)
	err := c.cc.Invoke(ctx, DepService_GetLbTrafficExtension_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depServiceClient) CreateLbTrafficExtension(ctx context.Context, in *CreateLbTrafficExtensionRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, DepService_CreateLbTrafficExtension_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depServiceClient) UpdateLbTrafficExtension(ctx context.Context, in *UpdateLbTrafficExtensionRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, DepService_UpdateLbTrafficExtension_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depServiceClient) DeleteLbTrafficExtension(ctx context.Context, in *DeleteLbTrafficExtensionRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, DepService_DeleteLbTrafficExtension_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depServiceClient) ListLbRouteExtensions(ctx context.Context, in *ListLbRouteExtensionsRequest, opts ...grpc.CallOption) (*ListLbRouteExtensionsResponse, error) {
	out := new(ListLbRouteExtensionsResponse)
	err := c.cc.Invoke(ctx, DepService_ListLbRouteExtensions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depServiceClient) GetLbRouteExtension(ctx context.Context, in *GetLbRouteExtensionRequest, opts ...grpc.CallOption) (*LbRouteExtension, error) {
	out := new(LbRouteExtension)
	err := c.cc.Invoke(ctx, DepService_GetLbRouteExtension_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depServiceClient) CreateLbRouteExtension(ctx context.Context, in *CreateLbRouteExtensionRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, DepService_CreateLbRouteExtension_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depServiceClient) UpdateLbRouteExtension(ctx context.Context, in *UpdateLbRouteExtensionRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, DepService_UpdateLbRouteExtension_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depServiceClient) DeleteLbRouteExtension(ctx context.Context, in *DeleteLbRouteExtensionRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, DepService_DeleteLbRouteExtension_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depServiceClient) ListAuthzExtensions(ctx context.Context, in *ListAuthzExtensionsRequest, opts ...grpc.CallOption) (*ListAuthzExtensionsResponse, error) {
	out := new(ListAuthzExtensionsResponse)
	err := c.cc.Invoke(ctx, DepService_ListAuthzExtensions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depServiceClient) GetAuthzExtension(ctx context.Context, in *GetAuthzExtensionRequest, opts ...grpc.CallOption) (*AuthzExtension, error) {
	out := new(AuthzExtension)
	err := c.cc.Invoke(ctx, DepService_GetAuthzExtension_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depServiceClient) CreateAuthzExtension(ctx context.Context, in *CreateAuthzExtensionRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, DepService_CreateAuthzExtension_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depServiceClient) UpdateAuthzExtension(ctx context.Context, in *UpdateAuthzExtensionRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, DepService_UpdateAuthzExtension_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depServiceClient) DeleteAuthzExtension(ctx context.Context, in *DeleteAuthzExtensionRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, DepService_DeleteAuthzExtension_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DepServiceServer is the server API for DepService service.
// All implementations should embed UnimplementedDepServiceServer
// for forward compatibility
type DepServiceServer interface {
	// Lists `LbTrafficExtension` resources in a given project and location.
	ListLbTrafficExtensions(context.Context, *ListLbTrafficExtensionsRequest) (*ListLbTrafficExtensionsResponse, error)
	// Gets details of the specified `LbTrafficExtension` resource.
	GetLbTrafficExtension(context.Context, *GetLbTrafficExtensionRequest) (*LbTrafficExtension, error)
	// Creates a new `LbTrafficExtension` resource in a given project and
	// location.
	CreateLbTrafficExtension(context.Context, *CreateLbTrafficExtensionRequest) (*longrunningpb.Operation, error)
	// Updates the parameters of the specified `LbTrafficExtension` resource.
	UpdateLbTrafficExtension(context.Context, *UpdateLbTrafficExtensionRequest) (*longrunningpb.Operation, error)
	// Deletes the specified `LbTrafficExtension` resource.
	DeleteLbTrafficExtension(context.Context, *DeleteLbTrafficExtensionRequest) (*longrunningpb.Operation, error)
	// Lists `LbRouteExtension` resources in a given project and location.
	ListLbRouteExtensions(context.Context, *ListLbRouteExtensionsRequest) (*ListLbRouteExtensionsResponse, error)
	// Gets details of the specified `LbRouteExtension` resource.
	GetLbRouteExtension(context.Context, *GetLbRouteExtensionRequest) (*LbRouteExtension, error)
	// Creates a new `LbRouteExtension` resource in a given project and location.
	CreateLbRouteExtension(context.Context, *CreateLbRouteExtensionRequest) (*longrunningpb.Operation, error)
	// Updates the parameters of the specified `LbRouteExtension` resource.
	UpdateLbRouteExtension(context.Context, *UpdateLbRouteExtensionRequest) (*longrunningpb.Operation, error)
	// Deletes the specified `LbRouteExtension` resource.
	DeleteLbRouteExtension(context.Context, *DeleteLbRouteExtensionRequest) (*longrunningpb.Operation, error)
	// Lists `AuthzExtension` resources in a given project and location.
	ListAuthzExtensions(context.Context, *ListAuthzExtensionsRequest) (*ListAuthzExtensionsResponse, error)
	// Gets details of the specified `AuthzExtension` resource.
	GetAuthzExtension(context.Context, *GetAuthzExtensionRequest) (*AuthzExtension, error)
	// Creates a new `AuthzExtension` resource in a given project
	// and location.
	CreateAuthzExtension(context.Context, *CreateAuthzExtensionRequest) (*longrunningpb.Operation, error)
	// Updates the parameters of the specified `AuthzExtension`
	// resource.
	UpdateAuthzExtension(context.Context, *UpdateAuthzExtensionRequest) (*longrunningpb.Operation, error)
	// Deletes the specified `AuthzExtension` resource.
	DeleteAuthzExtension(context.Context, *DeleteAuthzExtensionRequest) (*longrunningpb.Operation, error)
}

// UnimplementedDepServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDepServiceServer struct {
}

func (UnimplementedDepServiceServer) ListLbTrafficExtensions(context.Context, *ListLbTrafficExtensionsRequest) (*ListLbTrafficExtensionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLbTrafficExtensions not implemented")
}
func (UnimplementedDepServiceServer) GetLbTrafficExtension(context.Context, *GetLbTrafficExtensionRequest) (*LbTrafficExtension, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLbTrafficExtension not implemented")
}
func (UnimplementedDepServiceServer) CreateLbTrafficExtension(context.Context, *CreateLbTrafficExtensionRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLbTrafficExtension not implemented")
}
func (UnimplementedDepServiceServer) UpdateLbTrafficExtension(context.Context, *UpdateLbTrafficExtensionRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLbTrafficExtension not implemented")
}
func (UnimplementedDepServiceServer) DeleteLbTrafficExtension(context.Context, *DeleteLbTrafficExtensionRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLbTrafficExtension not implemented")
}
func (UnimplementedDepServiceServer) ListLbRouteExtensions(context.Context, *ListLbRouteExtensionsRequest) (*ListLbRouteExtensionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLbRouteExtensions not implemented")
}
func (UnimplementedDepServiceServer) GetLbRouteExtension(context.Context, *GetLbRouteExtensionRequest) (*LbRouteExtension, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLbRouteExtension not implemented")
}
func (UnimplementedDepServiceServer) CreateLbRouteExtension(context.Context, *CreateLbRouteExtensionRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLbRouteExtension not implemented")
}
func (UnimplementedDepServiceServer) UpdateLbRouteExtension(context.Context, *UpdateLbRouteExtensionRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLbRouteExtension not implemented")
}
func (UnimplementedDepServiceServer) DeleteLbRouteExtension(context.Context, *DeleteLbRouteExtensionRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLbRouteExtension not implemented")
}
func (UnimplementedDepServiceServer) ListAuthzExtensions(context.Context, *ListAuthzExtensionsRequest) (*ListAuthzExtensionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuthzExtensions not implemented")
}
func (UnimplementedDepServiceServer) GetAuthzExtension(context.Context, *GetAuthzExtensionRequest) (*AuthzExtension, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthzExtension not implemented")
}
func (UnimplementedDepServiceServer) CreateAuthzExtension(context.Context, *CreateAuthzExtensionRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuthzExtension not implemented")
}
func (UnimplementedDepServiceServer) UpdateAuthzExtension(context.Context, *UpdateAuthzExtensionRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAuthzExtension not implemented")
}
func (UnimplementedDepServiceServer) DeleteAuthzExtension(context.Context, *DeleteAuthzExtensionRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuthzExtension not implemented")
}

// UnsafeDepServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DepServiceServer will
// result in compilation errors.
type UnsafeDepServiceServer interface {
	mustEmbedUnimplementedDepServiceServer()
}

func RegisterDepServiceServer(s grpc.ServiceRegistrar, srv DepServiceServer) {
	s.RegisterService(&DepService_ServiceDesc, srv)
}

func _DepService_ListLbTrafficExtensions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLbTrafficExtensionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepServiceServer).ListLbTrafficExtensions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepService_ListLbTrafficExtensions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepServiceServer).ListLbTrafficExtensions(ctx, req.(*ListLbTrafficExtensionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepService_GetLbTrafficExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLbTrafficExtensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepServiceServer).GetLbTrafficExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepService_GetLbTrafficExtension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepServiceServer).GetLbTrafficExtension(ctx, req.(*GetLbTrafficExtensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepService_CreateLbTrafficExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLbTrafficExtensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepServiceServer).CreateLbTrafficExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepService_CreateLbTrafficExtension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepServiceServer).CreateLbTrafficExtension(ctx, req.(*CreateLbTrafficExtensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepService_UpdateLbTrafficExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLbTrafficExtensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepServiceServer).UpdateLbTrafficExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepService_UpdateLbTrafficExtension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepServiceServer).UpdateLbTrafficExtension(ctx, req.(*UpdateLbTrafficExtensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepService_DeleteLbTrafficExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLbTrafficExtensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepServiceServer).DeleteLbTrafficExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepService_DeleteLbTrafficExtension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepServiceServer).DeleteLbTrafficExtension(ctx, req.(*DeleteLbTrafficExtensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepService_ListLbRouteExtensions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLbRouteExtensionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepServiceServer).ListLbRouteExtensions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepService_ListLbRouteExtensions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepServiceServer).ListLbRouteExtensions(ctx, req.(*ListLbRouteExtensionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepService_GetLbRouteExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLbRouteExtensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepServiceServer).GetLbRouteExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepService_GetLbRouteExtension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepServiceServer).GetLbRouteExtension(ctx, req.(*GetLbRouteExtensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepService_CreateLbRouteExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLbRouteExtensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepServiceServer).CreateLbRouteExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepService_CreateLbRouteExtension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepServiceServer).CreateLbRouteExtension(ctx, req.(*CreateLbRouteExtensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepService_UpdateLbRouteExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLbRouteExtensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepServiceServer).UpdateLbRouteExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepService_UpdateLbRouteExtension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepServiceServer).UpdateLbRouteExtension(ctx, req.(*UpdateLbRouteExtensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepService_DeleteLbRouteExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLbRouteExtensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepServiceServer).DeleteLbRouteExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepService_DeleteLbRouteExtension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepServiceServer).DeleteLbRouteExtension(ctx, req.(*DeleteLbRouteExtensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepService_ListAuthzExtensions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuthzExtensionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepServiceServer).ListAuthzExtensions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepService_ListAuthzExtensions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepServiceServer).ListAuthzExtensions(ctx, req.(*ListAuthzExtensionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepService_GetAuthzExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthzExtensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepServiceServer).GetAuthzExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepService_GetAuthzExtension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepServiceServer).GetAuthzExtension(ctx, req.(*GetAuthzExtensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepService_CreateAuthzExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAuthzExtensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepServiceServer).CreateAuthzExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepService_CreateAuthzExtension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepServiceServer).CreateAuthzExtension(ctx, req.(*CreateAuthzExtensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepService_UpdateAuthzExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAuthzExtensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepServiceServer).UpdateAuthzExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepService_UpdateAuthzExtension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepServiceServer).UpdateAuthzExtension(ctx, req.(*UpdateAuthzExtensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepService_DeleteAuthzExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAuthzExtensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepServiceServer).DeleteAuthzExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepService_DeleteAuthzExtension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepServiceServer).DeleteAuthzExtension(ctx, req.(*DeleteAuthzExtensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DepService_ServiceDesc is the grpc.ServiceDesc for DepService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DepService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.networkservices.v1.DepService",
	HandlerType: (*DepServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListLbTrafficExtensions",
			Handler:    _DepService_ListLbTrafficExtensions_Handler,
		},
		{
			MethodName: "GetLbTrafficExtension",
			Handler:    _DepService_GetLbTrafficExtension_Handler,
		},
		{
			MethodName: "CreateLbTrafficExtension",
			Handler:    _DepService_CreateLbTrafficExtension_Handler,
		},
		{
			MethodName: "UpdateLbTrafficExtension",
			Handler:    _DepService_UpdateLbTrafficExtension_Handler,
		},
		{
			MethodName: "DeleteLbTrafficExtension",
			Handler:    _DepService_DeleteLbTrafficExtension_Handler,
		},
		{
			MethodName: "ListLbRouteExtensions",
			Handler:    _DepService_ListLbRouteExtensions_Handler,
		},
		{
			MethodName: "GetLbRouteExtension",
			Handler:    _DepService_GetLbRouteExtension_Handler,
		},
		{
			MethodName: "CreateLbRouteExtension",
			Handler:    _DepService_CreateLbRouteExtension_Handler,
		},
		{
			MethodName: "UpdateLbRouteExtension",
			Handler:    _DepService_UpdateLbRouteExtension_Handler,
		},
		{
			MethodName: "DeleteLbRouteExtension",
			Handler:    _DepService_DeleteLbRouteExtension_Handler,
		},
		{
			MethodName: "ListAuthzExtensions",
			Handler:    _DepService_ListAuthzExtensions_Handler,
		},
		{
			MethodName: "GetAuthzExtension",
			Handler:    _DepService_GetAuthzExtension_Handler,
		},
		{
			MethodName: "CreateAuthzExtension",
			Handler:    _DepService_CreateAuthzExtension_Handler,
		},
		{
			MethodName: "UpdateAuthzExtension",
			Handler:    _DepService_UpdateAuthzExtension_Handler,
		},
		{
			MethodName: "DeleteAuthzExtension",
			Handler:    _DepService_DeleteAuthzExtension_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/networkservices/v1/dep.proto",
}
