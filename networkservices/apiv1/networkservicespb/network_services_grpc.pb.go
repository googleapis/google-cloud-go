// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/networkservices/v1/network_services.proto

package networkservicespb

import (
	context "context"

	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NetworkServices_ListEndpointPolicies_FullMethodName    = "/google.cloud.networkservices.v1.NetworkServices/ListEndpointPolicies"
	NetworkServices_GetEndpointPolicy_FullMethodName       = "/google.cloud.networkservices.v1.NetworkServices/GetEndpointPolicy"
	NetworkServices_CreateEndpointPolicy_FullMethodName    = "/google.cloud.networkservices.v1.NetworkServices/CreateEndpointPolicy"
	NetworkServices_UpdateEndpointPolicy_FullMethodName    = "/google.cloud.networkservices.v1.NetworkServices/UpdateEndpointPolicy"
	NetworkServices_DeleteEndpointPolicy_FullMethodName    = "/google.cloud.networkservices.v1.NetworkServices/DeleteEndpointPolicy"
	NetworkServices_ListWasmPluginVersions_FullMethodName  = "/google.cloud.networkservices.v1.NetworkServices/ListWasmPluginVersions"
	NetworkServices_GetWasmPluginVersion_FullMethodName    = "/google.cloud.networkservices.v1.NetworkServices/GetWasmPluginVersion"
	NetworkServices_CreateWasmPluginVersion_FullMethodName = "/google.cloud.networkservices.v1.NetworkServices/CreateWasmPluginVersion"
	NetworkServices_DeleteWasmPluginVersion_FullMethodName = "/google.cloud.networkservices.v1.NetworkServices/DeleteWasmPluginVersion"
	NetworkServices_ListWasmPlugins_FullMethodName         = "/google.cloud.networkservices.v1.NetworkServices/ListWasmPlugins"
	NetworkServices_GetWasmPlugin_FullMethodName           = "/google.cloud.networkservices.v1.NetworkServices/GetWasmPlugin"
	NetworkServices_CreateWasmPlugin_FullMethodName        = "/google.cloud.networkservices.v1.NetworkServices/CreateWasmPlugin"
	NetworkServices_UpdateWasmPlugin_FullMethodName        = "/google.cloud.networkservices.v1.NetworkServices/UpdateWasmPlugin"
	NetworkServices_DeleteWasmPlugin_FullMethodName        = "/google.cloud.networkservices.v1.NetworkServices/DeleteWasmPlugin"
	NetworkServices_ListGateways_FullMethodName            = "/google.cloud.networkservices.v1.NetworkServices/ListGateways"
	NetworkServices_GetGateway_FullMethodName              = "/google.cloud.networkservices.v1.NetworkServices/GetGateway"
	NetworkServices_CreateGateway_FullMethodName           = "/google.cloud.networkservices.v1.NetworkServices/CreateGateway"
	NetworkServices_UpdateGateway_FullMethodName           = "/google.cloud.networkservices.v1.NetworkServices/UpdateGateway"
	NetworkServices_DeleteGateway_FullMethodName           = "/google.cloud.networkservices.v1.NetworkServices/DeleteGateway"
	NetworkServices_ListGrpcRoutes_FullMethodName          = "/google.cloud.networkservices.v1.NetworkServices/ListGrpcRoutes"
	NetworkServices_GetGrpcRoute_FullMethodName            = "/google.cloud.networkservices.v1.NetworkServices/GetGrpcRoute"
	NetworkServices_CreateGrpcRoute_FullMethodName         = "/google.cloud.networkservices.v1.NetworkServices/CreateGrpcRoute"
	NetworkServices_UpdateGrpcRoute_FullMethodName         = "/google.cloud.networkservices.v1.NetworkServices/UpdateGrpcRoute"
	NetworkServices_DeleteGrpcRoute_FullMethodName         = "/google.cloud.networkservices.v1.NetworkServices/DeleteGrpcRoute"
	NetworkServices_ListHttpRoutes_FullMethodName          = "/google.cloud.networkservices.v1.NetworkServices/ListHttpRoutes"
	NetworkServices_GetHttpRoute_FullMethodName            = "/google.cloud.networkservices.v1.NetworkServices/GetHttpRoute"
	NetworkServices_CreateHttpRoute_FullMethodName         = "/google.cloud.networkservices.v1.NetworkServices/CreateHttpRoute"
	NetworkServices_UpdateHttpRoute_FullMethodName         = "/google.cloud.networkservices.v1.NetworkServices/UpdateHttpRoute"
	NetworkServices_DeleteHttpRoute_FullMethodName         = "/google.cloud.networkservices.v1.NetworkServices/DeleteHttpRoute"
	NetworkServices_ListTcpRoutes_FullMethodName           = "/google.cloud.networkservices.v1.NetworkServices/ListTcpRoutes"
	NetworkServices_GetTcpRoute_FullMethodName             = "/google.cloud.networkservices.v1.NetworkServices/GetTcpRoute"
	NetworkServices_CreateTcpRoute_FullMethodName          = "/google.cloud.networkservices.v1.NetworkServices/CreateTcpRoute"
	NetworkServices_UpdateTcpRoute_FullMethodName          = "/google.cloud.networkservices.v1.NetworkServices/UpdateTcpRoute"
	NetworkServices_DeleteTcpRoute_FullMethodName          = "/google.cloud.networkservices.v1.NetworkServices/DeleteTcpRoute"
	NetworkServices_ListTlsRoutes_FullMethodName           = "/google.cloud.networkservices.v1.NetworkServices/ListTlsRoutes"
	NetworkServices_GetTlsRoute_FullMethodName             = "/google.cloud.networkservices.v1.NetworkServices/GetTlsRoute"
	NetworkServices_CreateTlsRoute_FullMethodName          = "/google.cloud.networkservices.v1.NetworkServices/CreateTlsRoute"
	NetworkServices_UpdateTlsRoute_FullMethodName          = "/google.cloud.networkservices.v1.NetworkServices/UpdateTlsRoute"
	NetworkServices_DeleteTlsRoute_FullMethodName          = "/google.cloud.networkservices.v1.NetworkServices/DeleteTlsRoute"
	NetworkServices_ListServiceBindings_FullMethodName     = "/google.cloud.networkservices.v1.NetworkServices/ListServiceBindings"
	NetworkServices_GetServiceBinding_FullMethodName       = "/google.cloud.networkservices.v1.NetworkServices/GetServiceBinding"
	NetworkServices_CreateServiceBinding_FullMethodName    = "/google.cloud.networkservices.v1.NetworkServices/CreateServiceBinding"
	NetworkServices_UpdateServiceBinding_FullMethodName    = "/google.cloud.networkservices.v1.NetworkServices/UpdateServiceBinding"
	NetworkServices_DeleteServiceBinding_FullMethodName    = "/google.cloud.networkservices.v1.NetworkServices/DeleteServiceBinding"
	NetworkServices_ListMeshes_FullMethodName              = "/google.cloud.networkservices.v1.NetworkServices/ListMeshes"
	NetworkServices_GetMesh_FullMethodName                 = "/google.cloud.networkservices.v1.NetworkServices/GetMesh"
	NetworkServices_CreateMesh_FullMethodName              = "/google.cloud.networkservices.v1.NetworkServices/CreateMesh"
	NetworkServices_UpdateMesh_FullMethodName              = "/google.cloud.networkservices.v1.NetworkServices/UpdateMesh"
	NetworkServices_DeleteMesh_FullMethodName              = "/google.cloud.networkservices.v1.NetworkServices/DeleteMesh"
	NetworkServices_ListServiceLbPolicies_FullMethodName   = "/google.cloud.networkservices.v1.NetworkServices/ListServiceLbPolicies"
	NetworkServices_GetServiceLbPolicy_FullMethodName      = "/google.cloud.networkservices.v1.NetworkServices/GetServiceLbPolicy"
	NetworkServices_CreateServiceLbPolicy_FullMethodName   = "/google.cloud.networkservices.v1.NetworkServices/CreateServiceLbPolicy"
	NetworkServices_UpdateServiceLbPolicy_FullMethodName   = "/google.cloud.networkservices.v1.NetworkServices/UpdateServiceLbPolicy"
	NetworkServices_DeleteServiceLbPolicy_FullMethodName   = "/google.cloud.networkservices.v1.NetworkServices/DeleteServiceLbPolicy"
	NetworkServices_GetGatewayRouteView_FullMethodName     = "/google.cloud.networkservices.v1.NetworkServices/GetGatewayRouteView"
	NetworkServices_GetMeshRouteView_FullMethodName        = "/google.cloud.networkservices.v1.NetworkServices/GetMeshRouteView"
	NetworkServices_ListGatewayRouteViews_FullMethodName   = "/google.cloud.networkservices.v1.NetworkServices/ListGatewayRouteViews"
	NetworkServices_ListMeshRouteViews_FullMethodName      = "/google.cloud.networkservices.v1.NetworkServices/ListMeshRouteViews"
)

// NetworkServicesClient is the client API for NetworkServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetworkServicesClient interface {
	// Lists EndpointPolicies in a given project and location.
	ListEndpointPolicies(ctx context.Context, in *ListEndpointPoliciesRequest, opts ...grpc.CallOption) (*ListEndpointPoliciesResponse, error)
	// Gets details of a single EndpointPolicy.
	GetEndpointPolicy(ctx context.Context, in *GetEndpointPolicyRequest, opts ...grpc.CallOption) (*EndpointPolicy, error)
	// Creates a new EndpointPolicy in a given project and location.
	CreateEndpointPolicy(ctx context.Context, in *CreateEndpointPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates the parameters of a single EndpointPolicy.
	UpdateEndpointPolicy(ctx context.Context, in *UpdateEndpointPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single EndpointPolicy.
	DeleteEndpointPolicy(ctx context.Context, in *DeleteEndpointPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists `WasmPluginVersion` resources in a given project and
	// location.
	ListWasmPluginVersions(ctx context.Context, in *ListWasmPluginVersionsRequest, opts ...grpc.CallOption) (*ListWasmPluginVersionsResponse, error)
	// Gets details of the specified `WasmPluginVersion` resource.
	GetWasmPluginVersion(ctx context.Context, in *GetWasmPluginVersionRequest, opts ...grpc.CallOption) (*WasmPluginVersion, error)
	// Creates a new `WasmPluginVersion` resource in a given project
	// and location.
	CreateWasmPluginVersion(ctx context.Context, in *CreateWasmPluginVersionRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes the specified `WasmPluginVersion` resource.
	DeleteWasmPluginVersion(ctx context.Context, in *DeleteWasmPluginVersionRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists `WasmPlugin` resources in a given project and
	// location.
	ListWasmPlugins(ctx context.Context, in *ListWasmPluginsRequest, opts ...grpc.CallOption) (*ListWasmPluginsResponse, error)
	// Gets details of the specified `WasmPlugin` resource.
	GetWasmPlugin(ctx context.Context, in *GetWasmPluginRequest, opts ...grpc.CallOption) (*WasmPlugin, error)
	// Creates a new `WasmPlugin` resource in a given project
	// and location.
	CreateWasmPlugin(ctx context.Context, in *CreateWasmPluginRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates the parameters of the specified `WasmPlugin` resource.
	UpdateWasmPlugin(ctx context.Context, in *UpdateWasmPluginRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes the specified `WasmPlugin` resource.
	DeleteWasmPlugin(ctx context.Context, in *DeleteWasmPluginRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists Gateways in a given project and location.
	ListGateways(ctx context.Context, in *ListGatewaysRequest, opts ...grpc.CallOption) (*ListGatewaysResponse, error)
	// Gets details of a single Gateway.
	GetGateway(ctx context.Context, in *GetGatewayRequest, opts ...grpc.CallOption) (*Gateway, error)
	// Creates a new Gateway in a given project and location.
	CreateGateway(ctx context.Context, in *CreateGatewayRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates the parameters of a single Gateway.
	UpdateGateway(ctx context.Context, in *UpdateGatewayRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single Gateway.
	DeleteGateway(ctx context.Context, in *DeleteGatewayRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists GrpcRoutes in a given project and location.
	ListGrpcRoutes(ctx context.Context, in *ListGrpcRoutesRequest, opts ...grpc.CallOption) (*ListGrpcRoutesResponse, error)
	// Gets details of a single GrpcRoute.
	GetGrpcRoute(ctx context.Context, in *GetGrpcRouteRequest, opts ...grpc.CallOption) (*GrpcRoute, error)
	// Creates a new GrpcRoute in a given project and location.
	CreateGrpcRoute(ctx context.Context, in *CreateGrpcRouteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates the parameters of a single GrpcRoute.
	UpdateGrpcRoute(ctx context.Context, in *UpdateGrpcRouteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single GrpcRoute.
	DeleteGrpcRoute(ctx context.Context, in *DeleteGrpcRouteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists HttpRoute in a given project and location.
	ListHttpRoutes(ctx context.Context, in *ListHttpRoutesRequest, opts ...grpc.CallOption) (*ListHttpRoutesResponse, error)
	// Gets details of a single HttpRoute.
	GetHttpRoute(ctx context.Context, in *GetHttpRouteRequest, opts ...grpc.CallOption) (*HttpRoute, error)
	// Creates a new HttpRoute in a given project and location.
	CreateHttpRoute(ctx context.Context, in *CreateHttpRouteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates the parameters of a single HttpRoute.
	UpdateHttpRoute(ctx context.Context, in *UpdateHttpRouteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single HttpRoute.
	DeleteHttpRoute(ctx context.Context, in *DeleteHttpRouteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists TcpRoute in a given project and location.
	ListTcpRoutes(ctx context.Context, in *ListTcpRoutesRequest, opts ...grpc.CallOption) (*ListTcpRoutesResponse, error)
	// Gets details of a single TcpRoute.
	GetTcpRoute(ctx context.Context, in *GetTcpRouteRequest, opts ...grpc.CallOption) (*TcpRoute, error)
	// Creates a new TcpRoute in a given project and location.
	CreateTcpRoute(ctx context.Context, in *CreateTcpRouteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates the parameters of a single TcpRoute.
	UpdateTcpRoute(ctx context.Context, in *UpdateTcpRouteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single TcpRoute.
	DeleteTcpRoute(ctx context.Context, in *DeleteTcpRouteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists TlsRoute in a given project and location.
	ListTlsRoutes(ctx context.Context, in *ListTlsRoutesRequest, opts ...grpc.CallOption) (*ListTlsRoutesResponse, error)
	// Gets details of a single TlsRoute.
	GetTlsRoute(ctx context.Context, in *GetTlsRouteRequest, opts ...grpc.CallOption) (*TlsRoute, error)
	// Creates a new TlsRoute in a given project and location.
	CreateTlsRoute(ctx context.Context, in *CreateTlsRouteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates the parameters of a single TlsRoute.
	UpdateTlsRoute(ctx context.Context, in *UpdateTlsRouteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single TlsRoute.
	DeleteTlsRoute(ctx context.Context, in *DeleteTlsRouteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists ServiceBinding in a given project and location.
	ListServiceBindings(ctx context.Context, in *ListServiceBindingsRequest, opts ...grpc.CallOption) (*ListServiceBindingsResponse, error)
	// Gets details of a single ServiceBinding.
	GetServiceBinding(ctx context.Context, in *GetServiceBindingRequest, opts ...grpc.CallOption) (*ServiceBinding, error)
	// Creates a new ServiceBinding in a given project and location.
	CreateServiceBinding(ctx context.Context, in *CreateServiceBindingRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates the parameters of a single ServiceBinding.
	UpdateServiceBinding(ctx context.Context, in *UpdateServiceBindingRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single ServiceBinding.
	DeleteServiceBinding(ctx context.Context, in *DeleteServiceBindingRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists Meshes in a given project and location.
	ListMeshes(ctx context.Context, in *ListMeshesRequest, opts ...grpc.CallOption) (*ListMeshesResponse, error)
	// Gets details of a single Mesh.
	GetMesh(ctx context.Context, in *GetMeshRequest, opts ...grpc.CallOption) (*Mesh, error)
	// Creates a new Mesh in a given project and location.
	CreateMesh(ctx context.Context, in *CreateMeshRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates the parameters of a single Mesh.
	UpdateMesh(ctx context.Context, in *UpdateMeshRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single Mesh.
	DeleteMesh(ctx context.Context, in *DeleteMeshRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists ServiceLbPolicies in a given project and location.
	ListServiceLbPolicies(ctx context.Context, in *ListServiceLbPoliciesRequest, opts ...grpc.CallOption) (*ListServiceLbPoliciesResponse, error)
	// Gets details of a single ServiceLbPolicy.
	GetServiceLbPolicy(ctx context.Context, in *GetServiceLbPolicyRequest, opts ...grpc.CallOption) (*ServiceLbPolicy, error)
	// Creates a new ServiceLbPolicy in a given project and location.
	CreateServiceLbPolicy(ctx context.Context, in *CreateServiceLbPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates the parameters of a single ServiceLbPolicy.
	UpdateServiceLbPolicy(ctx context.Context, in *UpdateServiceLbPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single ServiceLbPolicy.
	DeleteServiceLbPolicy(ctx context.Context, in *DeleteServiceLbPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Get a single RouteView of a Gateway.
	GetGatewayRouteView(ctx context.Context, in *GetGatewayRouteViewRequest, opts ...grpc.CallOption) (*GatewayRouteView, error)
	// Get a single RouteView of a Mesh.
	GetMeshRouteView(ctx context.Context, in *GetMeshRouteViewRequest, opts ...grpc.CallOption) (*MeshRouteView, error)
	// Lists RouteViews
	ListGatewayRouteViews(ctx context.Context, in *ListGatewayRouteViewsRequest, opts ...grpc.CallOption) (*ListGatewayRouteViewsResponse, error)
	// Lists RouteViews
	ListMeshRouteViews(ctx context.Context, in *ListMeshRouteViewsRequest, opts ...grpc.CallOption) (*ListMeshRouteViewsResponse, error)
}

type networkServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkServicesClient(cc grpc.ClientConnInterface) NetworkServicesClient {
	return &networkServicesClient{cc}
}

func (c *networkServicesClient) ListEndpointPolicies(ctx context.Context, in *ListEndpointPoliciesRequest, opts ...grpc.CallOption) (*ListEndpointPoliciesResponse, error) {
	out := new(ListEndpointPoliciesResponse)
	err := c.cc.Invoke(ctx, NetworkServices_ListEndpointPolicies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) GetEndpointPolicy(ctx context.Context, in *GetEndpointPolicyRequest, opts ...grpc.CallOption) (*EndpointPolicy, error) {
	out := new(EndpointPolicy)
	err := c.cc.Invoke(ctx, NetworkServices_GetEndpointPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) CreateEndpointPolicy(ctx context.Context, in *CreateEndpointPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetworkServices_CreateEndpointPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) UpdateEndpointPolicy(ctx context.Context, in *UpdateEndpointPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetworkServices_UpdateEndpointPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) DeleteEndpointPolicy(ctx context.Context, in *DeleteEndpointPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetworkServices_DeleteEndpointPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) ListWasmPluginVersions(ctx context.Context, in *ListWasmPluginVersionsRequest, opts ...grpc.CallOption) (*ListWasmPluginVersionsResponse, error) {
	out := new(ListWasmPluginVersionsResponse)
	err := c.cc.Invoke(ctx, NetworkServices_ListWasmPluginVersions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) GetWasmPluginVersion(ctx context.Context, in *GetWasmPluginVersionRequest, opts ...grpc.CallOption) (*WasmPluginVersion, error) {
	out := new(WasmPluginVersion)
	err := c.cc.Invoke(ctx, NetworkServices_GetWasmPluginVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) CreateWasmPluginVersion(ctx context.Context, in *CreateWasmPluginVersionRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetworkServices_CreateWasmPluginVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) DeleteWasmPluginVersion(ctx context.Context, in *DeleteWasmPluginVersionRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetworkServices_DeleteWasmPluginVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) ListWasmPlugins(ctx context.Context, in *ListWasmPluginsRequest, opts ...grpc.CallOption) (*ListWasmPluginsResponse, error) {
	out := new(ListWasmPluginsResponse)
	err := c.cc.Invoke(ctx, NetworkServices_ListWasmPlugins_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) GetWasmPlugin(ctx context.Context, in *GetWasmPluginRequest, opts ...grpc.CallOption) (*WasmPlugin, error) {
	out := new(WasmPlugin)
	err := c.cc.Invoke(ctx, NetworkServices_GetWasmPlugin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) CreateWasmPlugin(ctx context.Context, in *CreateWasmPluginRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetworkServices_CreateWasmPlugin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) UpdateWasmPlugin(ctx context.Context, in *UpdateWasmPluginRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetworkServices_UpdateWasmPlugin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) DeleteWasmPlugin(ctx context.Context, in *DeleteWasmPluginRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetworkServices_DeleteWasmPlugin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) ListGateways(ctx context.Context, in *ListGatewaysRequest, opts ...grpc.CallOption) (*ListGatewaysResponse, error) {
	out := new(ListGatewaysResponse)
	err := c.cc.Invoke(ctx, NetworkServices_ListGateways_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) GetGateway(ctx context.Context, in *GetGatewayRequest, opts ...grpc.CallOption) (*Gateway, error) {
	out := new(Gateway)
	err := c.cc.Invoke(ctx, NetworkServices_GetGateway_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) CreateGateway(ctx context.Context, in *CreateGatewayRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetworkServices_CreateGateway_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) UpdateGateway(ctx context.Context, in *UpdateGatewayRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetworkServices_UpdateGateway_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) DeleteGateway(ctx context.Context, in *DeleteGatewayRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetworkServices_DeleteGateway_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) ListGrpcRoutes(ctx context.Context, in *ListGrpcRoutesRequest, opts ...grpc.CallOption) (*ListGrpcRoutesResponse, error) {
	out := new(ListGrpcRoutesResponse)
	err := c.cc.Invoke(ctx, NetworkServices_ListGrpcRoutes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) GetGrpcRoute(ctx context.Context, in *GetGrpcRouteRequest, opts ...grpc.CallOption) (*GrpcRoute, error) {
	out := new(GrpcRoute)
	err := c.cc.Invoke(ctx, NetworkServices_GetGrpcRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) CreateGrpcRoute(ctx context.Context, in *CreateGrpcRouteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetworkServices_CreateGrpcRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) UpdateGrpcRoute(ctx context.Context, in *UpdateGrpcRouteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetworkServices_UpdateGrpcRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) DeleteGrpcRoute(ctx context.Context, in *DeleteGrpcRouteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetworkServices_DeleteGrpcRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) ListHttpRoutes(ctx context.Context, in *ListHttpRoutesRequest, opts ...grpc.CallOption) (*ListHttpRoutesResponse, error) {
	out := new(ListHttpRoutesResponse)
	err := c.cc.Invoke(ctx, NetworkServices_ListHttpRoutes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) GetHttpRoute(ctx context.Context, in *GetHttpRouteRequest, opts ...grpc.CallOption) (*HttpRoute, error) {
	out := new(HttpRoute)
	err := c.cc.Invoke(ctx, NetworkServices_GetHttpRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) CreateHttpRoute(ctx context.Context, in *CreateHttpRouteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetworkServices_CreateHttpRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) UpdateHttpRoute(ctx context.Context, in *UpdateHttpRouteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetworkServices_UpdateHttpRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) DeleteHttpRoute(ctx context.Context, in *DeleteHttpRouteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetworkServices_DeleteHttpRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) ListTcpRoutes(ctx context.Context, in *ListTcpRoutesRequest, opts ...grpc.CallOption) (*ListTcpRoutesResponse, error) {
	out := new(ListTcpRoutesResponse)
	err := c.cc.Invoke(ctx, NetworkServices_ListTcpRoutes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) GetTcpRoute(ctx context.Context, in *GetTcpRouteRequest, opts ...grpc.CallOption) (*TcpRoute, error) {
	out := new(TcpRoute)
	err := c.cc.Invoke(ctx, NetworkServices_GetTcpRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) CreateTcpRoute(ctx context.Context, in *CreateTcpRouteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetworkServices_CreateTcpRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) UpdateTcpRoute(ctx context.Context, in *UpdateTcpRouteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetworkServices_UpdateTcpRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) DeleteTcpRoute(ctx context.Context, in *DeleteTcpRouteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetworkServices_DeleteTcpRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) ListTlsRoutes(ctx context.Context, in *ListTlsRoutesRequest, opts ...grpc.CallOption) (*ListTlsRoutesResponse, error) {
	out := new(ListTlsRoutesResponse)
	err := c.cc.Invoke(ctx, NetworkServices_ListTlsRoutes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) GetTlsRoute(ctx context.Context, in *GetTlsRouteRequest, opts ...grpc.CallOption) (*TlsRoute, error) {
	out := new(TlsRoute)
	err := c.cc.Invoke(ctx, NetworkServices_GetTlsRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) CreateTlsRoute(ctx context.Context, in *CreateTlsRouteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetworkServices_CreateTlsRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) UpdateTlsRoute(ctx context.Context, in *UpdateTlsRouteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetworkServices_UpdateTlsRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) DeleteTlsRoute(ctx context.Context, in *DeleteTlsRouteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetworkServices_DeleteTlsRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) ListServiceBindings(ctx context.Context, in *ListServiceBindingsRequest, opts ...grpc.CallOption) (*ListServiceBindingsResponse, error) {
	out := new(ListServiceBindingsResponse)
	err := c.cc.Invoke(ctx, NetworkServices_ListServiceBindings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) GetServiceBinding(ctx context.Context, in *GetServiceBindingRequest, opts ...grpc.CallOption) (*ServiceBinding, error) {
	out := new(ServiceBinding)
	err := c.cc.Invoke(ctx, NetworkServices_GetServiceBinding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) CreateServiceBinding(ctx context.Context, in *CreateServiceBindingRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetworkServices_CreateServiceBinding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) UpdateServiceBinding(ctx context.Context, in *UpdateServiceBindingRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetworkServices_UpdateServiceBinding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) DeleteServiceBinding(ctx context.Context, in *DeleteServiceBindingRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetworkServices_DeleteServiceBinding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) ListMeshes(ctx context.Context, in *ListMeshesRequest, opts ...grpc.CallOption) (*ListMeshesResponse, error) {
	out := new(ListMeshesResponse)
	err := c.cc.Invoke(ctx, NetworkServices_ListMeshes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) GetMesh(ctx context.Context, in *GetMeshRequest, opts ...grpc.CallOption) (*Mesh, error) {
	out := new(Mesh)
	err := c.cc.Invoke(ctx, NetworkServices_GetMesh_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) CreateMesh(ctx context.Context, in *CreateMeshRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetworkServices_CreateMesh_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) UpdateMesh(ctx context.Context, in *UpdateMeshRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetworkServices_UpdateMesh_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) DeleteMesh(ctx context.Context, in *DeleteMeshRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetworkServices_DeleteMesh_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) ListServiceLbPolicies(ctx context.Context, in *ListServiceLbPoliciesRequest, opts ...grpc.CallOption) (*ListServiceLbPoliciesResponse, error) {
	out := new(ListServiceLbPoliciesResponse)
	err := c.cc.Invoke(ctx, NetworkServices_ListServiceLbPolicies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) GetServiceLbPolicy(ctx context.Context, in *GetServiceLbPolicyRequest, opts ...grpc.CallOption) (*ServiceLbPolicy, error) {
	out := new(ServiceLbPolicy)
	err := c.cc.Invoke(ctx, NetworkServices_GetServiceLbPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) CreateServiceLbPolicy(ctx context.Context, in *CreateServiceLbPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetworkServices_CreateServiceLbPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) UpdateServiceLbPolicy(ctx context.Context, in *UpdateServiceLbPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetworkServices_UpdateServiceLbPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) DeleteServiceLbPolicy(ctx context.Context, in *DeleteServiceLbPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetworkServices_DeleteServiceLbPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) GetGatewayRouteView(ctx context.Context, in *GetGatewayRouteViewRequest, opts ...grpc.CallOption) (*GatewayRouteView, error) {
	out := new(GatewayRouteView)
	err := c.cc.Invoke(ctx, NetworkServices_GetGatewayRouteView_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) GetMeshRouteView(ctx context.Context, in *GetMeshRouteViewRequest, opts ...grpc.CallOption) (*MeshRouteView, error) {
	out := new(MeshRouteView)
	err := c.cc.Invoke(ctx, NetworkServices_GetMeshRouteView_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) ListGatewayRouteViews(ctx context.Context, in *ListGatewayRouteViewsRequest, opts ...grpc.CallOption) (*ListGatewayRouteViewsResponse, error) {
	out := new(ListGatewayRouteViewsResponse)
	err := c.cc.Invoke(ctx, NetworkServices_ListGatewayRouteViews_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) ListMeshRouteViews(ctx context.Context, in *ListMeshRouteViewsRequest, opts ...grpc.CallOption) (*ListMeshRouteViewsResponse, error) {
	out := new(ListMeshRouteViewsResponse)
	err := c.cc.Invoke(ctx, NetworkServices_ListMeshRouteViews_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkServicesServer is the server API for NetworkServices service.
// All implementations should embed UnimplementedNetworkServicesServer
// for forward compatibility
type NetworkServicesServer interface {
	// Lists EndpointPolicies in a given project and location.
	ListEndpointPolicies(context.Context, *ListEndpointPoliciesRequest) (*ListEndpointPoliciesResponse, error)
	// Gets details of a single EndpointPolicy.
	GetEndpointPolicy(context.Context, *GetEndpointPolicyRequest) (*EndpointPolicy, error)
	// Creates a new EndpointPolicy in a given project and location.
	CreateEndpointPolicy(context.Context, *CreateEndpointPolicyRequest) (*longrunningpb.Operation, error)
	// Updates the parameters of a single EndpointPolicy.
	UpdateEndpointPolicy(context.Context, *UpdateEndpointPolicyRequest) (*longrunningpb.Operation, error)
	// Deletes a single EndpointPolicy.
	DeleteEndpointPolicy(context.Context, *DeleteEndpointPolicyRequest) (*longrunningpb.Operation, error)
	// Lists `WasmPluginVersion` resources in a given project and
	// location.
	ListWasmPluginVersions(context.Context, *ListWasmPluginVersionsRequest) (*ListWasmPluginVersionsResponse, error)
	// Gets details of the specified `WasmPluginVersion` resource.
	GetWasmPluginVersion(context.Context, *GetWasmPluginVersionRequest) (*WasmPluginVersion, error)
	// Creates a new `WasmPluginVersion` resource in a given project
	// and location.
	CreateWasmPluginVersion(context.Context, *CreateWasmPluginVersionRequest) (*longrunningpb.Operation, error)
	// Deletes the specified `WasmPluginVersion` resource.
	DeleteWasmPluginVersion(context.Context, *DeleteWasmPluginVersionRequest) (*longrunningpb.Operation, error)
	// Lists `WasmPlugin` resources in a given project and
	// location.
	ListWasmPlugins(context.Context, *ListWasmPluginsRequest) (*ListWasmPluginsResponse, error)
	// Gets details of the specified `WasmPlugin` resource.
	GetWasmPlugin(context.Context, *GetWasmPluginRequest) (*WasmPlugin, error)
	// Creates a new `WasmPlugin` resource in a given project
	// and location.
	CreateWasmPlugin(context.Context, *CreateWasmPluginRequest) (*longrunningpb.Operation, error)
	// Updates the parameters of the specified `WasmPlugin` resource.
	UpdateWasmPlugin(context.Context, *UpdateWasmPluginRequest) (*longrunningpb.Operation, error)
	// Deletes the specified `WasmPlugin` resource.
	DeleteWasmPlugin(context.Context, *DeleteWasmPluginRequest) (*longrunningpb.Operation, error)
	// Lists Gateways in a given project and location.
	ListGateways(context.Context, *ListGatewaysRequest) (*ListGatewaysResponse, error)
	// Gets details of a single Gateway.
	GetGateway(context.Context, *GetGatewayRequest) (*Gateway, error)
	// Creates a new Gateway in a given project and location.
	CreateGateway(context.Context, *CreateGatewayRequest) (*longrunningpb.Operation, error)
	// Updates the parameters of a single Gateway.
	UpdateGateway(context.Context, *UpdateGatewayRequest) (*longrunningpb.Operation, error)
	// Deletes a single Gateway.
	DeleteGateway(context.Context, *DeleteGatewayRequest) (*longrunningpb.Operation, error)
	// Lists GrpcRoutes in a given project and location.
	ListGrpcRoutes(context.Context, *ListGrpcRoutesRequest) (*ListGrpcRoutesResponse, error)
	// Gets details of a single GrpcRoute.
	GetGrpcRoute(context.Context, *GetGrpcRouteRequest) (*GrpcRoute, error)
	// Creates a new GrpcRoute in a given project and location.
	CreateGrpcRoute(context.Context, *CreateGrpcRouteRequest) (*longrunningpb.Operation, error)
	// Updates the parameters of a single GrpcRoute.
	UpdateGrpcRoute(context.Context, *UpdateGrpcRouteRequest) (*longrunningpb.Operation, error)
	// Deletes a single GrpcRoute.
	DeleteGrpcRoute(context.Context, *DeleteGrpcRouteRequest) (*longrunningpb.Operation, error)
	// Lists HttpRoute in a given project and location.
	ListHttpRoutes(context.Context, *ListHttpRoutesRequest) (*ListHttpRoutesResponse, error)
	// Gets details of a single HttpRoute.
	GetHttpRoute(context.Context, *GetHttpRouteRequest) (*HttpRoute, error)
	// Creates a new HttpRoute in a given project and location.
	CreateHttpRoute(context.Context, *CreateHttpRouteRequest) (*longrunningpb.Operation, error)
	// Updates the parameters of a single HttpRoute.
	UpdateHttpRoute(context.Context, *UpdateHttpRouteRequest) (*longrunningpb.Operation, error)
	// Deletes a single HttpRoute.
	DeleteHttpRoute(context.Context, *DeleteHttpRouteRequest) (*longrunningpb.Operation, error)
	// Lists TcpRoute in a given project and location.
	ListTcpRoutes(context.Context, *ListTcpRoutesRequest) (*ListTcpRoutesResponse, error)
	// Gets details of a single TcpRoute.
	GetTcpRoute(context.Context, *GetTcpRouteRequest) (*TcpRoute, error)
	// Creates a new TcpRoute in a given project and location.
	CreateTcpRoute(context.Context, *CreateTcpRouteRequest) (*longrunningpb.Operation, error)
	// Updates the parameters of a single TcpRoute.
	UpdateTcpRoute(context.Context, *UpdateTcpRouteRequest) (*longrunningpb.Operation, error)
	// Deletes a single TcpRoute.
	DeleteTcpRoute(context.Context, *DeleteTcpRouteRequest) (*longrunningpb.Operation, error)
	// Lists TlsRoute in a given project and location.
	ListTlsRoutes(context.Context, *ListTlsRoutesRequest) (*ListTlsRoutesResponse, error)
	// Gets details of a single TlsRoute.
	GetTlsRoute(context.Context, *GetTlsRouteRequest) (*TlsRoute, error)
	// Creates a new TlsRoute in a given project and location.
	CreateTlsRoute(context.Context, *CreateTlsRouteRequest) (*longrunningpb.Operation, error)
	// Updates the parameters of a single TlsRoute.
	UpdateTlsRoute(context.Context, *UpdateTlsRouteRequest) (*longrunningpb.Operation, error)
	// Deletes a single TlsRoute.
	DeleteTlsRoute(context.Context, *DeleteTlsRouteRequest) (*longrunningpb.Operation, error)
	// Lists ServiceBinding in a given project and location.
	ListServiceBindings(context.Context, *ListServiceBindingsRequest) (*ListServiceBindingsResponse, error)
	// Gets details of a single ServiceBinding.
	GetServiceBinding(context.Context, *GetServiceBindingRequest) (*ServiceBinding, error)
	// Creates a new ServiceBinding in a given project and location.
	CreateServiceBinding(context.Context, *CreateServiceBindingRequest) (*longrunningpb.Operation, error)
	// Updates the parameters of a single ServiceBinding.
	UpdateServiceBinding(context.Context, *UpdateServiceBindingRequest) (*longrunningpb.Operation, error)
	// Deletes a single ServiceBinding.
	DeleteServiceBinding(context.Context, *DeleteServiceBindingRequest) (*longrunningpb.Operation, error)
	// Lists Meshes in a given project and location.
	ListMeshes(context.Context, *ListMeshesRequest) (*ListMeshesResponse, error)
	// Gets details of a single Mesh.
	GetMesh(context.Context, *GetMeshRequest) (*Mesh, error)
	// Creates a new Mesh in a given project and location.
	CreateMesh(context.Context, *CreateMeshRequest) (*longrunningpb.Operation, error)
	// Updates the parameters of a single Mesh.
	UpdateMesh(context.Context, *UpdateMeshRequest) (*longrunningpb.Operation, error)
	// Deletes a single Mesh.
	DeleteMesh(context.Context, *DeleteMeshRequest) (*longrunningpb.Operation, error)
	// Lists ServiceLbPolicies in a given project and location.
	ListServiceLbPolicies(context.Context, *ListServiceLbPoliciesRequest) (*ListServiceLbPoliciesResponse, error)
	// Gets details of a single ServiceLbPolicy.
	GetServiceLbPolicy(context.Context, *GetServiceLbPolicyRequest) (*ServiceLbPolicy, error)
	// Creates a new ServiceLbPolicy in a given project and location.
	CreateServiceLbPolicy(context.Context, *CreateServiceLbPolicyRequest) (*longrunningpb.Operation, error)
	// Updates the parameters of a single ServiceLbPolicy.
	UpdateServiceLbPolicy(context.Context, *UpdateServiceLbPolicyRequest) (*longrunningpb.Operation, error)
	// Deletes a single ServiceLbPolicy.
	DeleteServiceLbPolicy(context.Context, *DeleteServiceLbPolicyRequest) (*longrunningpb.Operation, error)
	// Get a single RouteView of a Gateway.
	GetGatewayRouteView(context.Context, *GetGatewayRouteViewRequest) (*GatewayRouteView, error)
	// Get a single RouteView of a Mesh.
	GetMeshRouteView(context.Context, *GetMeshRouteViewRequest) (*MeshRouteView, error)
	// Lists RouteViews
	ListGatewayRouteViews(context.Context, *ListGatewayRouteViewsRequest) (*ListGatewayRouteViewsResponse, error)
	// Lists RouteViews
	ListMeshRouteViews(context.Context, *ListMeshRouteViewsRequest) (*ListMeshRouteViewsResponse, error)
}

// UnimplementedNetworkServicesServer should be embedded to have forward compatible implementations.
type UnimplementedNetworkServicesServer struct {
}

func (UnimplementedNetworkServicesServer) ListEndpointPolicies(context.Context, *ListEndpointPoliciesRequest) (*ListEndpointPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEndpointPolicies not implemented")
}
func (UnimplementedNetworkServicesServer) GetEndpointPolicy(context.Context, *GetEndpointPolicyRequest) (*EndpointPolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEndpointPolicy not implemented")
}
func (UnimplementedNetworkServicesServer) CreateEndpointPolicy(context.Context, *CreateEndpointPolicyRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEndpointPolicy not implemented")
}
func (UnimplementedNetworkServicesServer) UpdateEndpointPolicy(context.Context, *UpdateEndpointPolicyRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEndpointPolicy not implemented")
}
func (UnimplementedNetworkServicesServer) DeleteEndpointPolicy(context.Context, *DeleteEndpointPolicyRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEndpointPolicy not implemented")
}
func (UnimplementedNetworkServicesServer) ListWasmPluginVersions(context.Context, *ListWasmPluginVersionsRequest) (*ListWasmPluginVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWasmPluginVersions not implemented")
}
func (UnimplementedNetworkServicesServer) GetWasmPluginVersion(context.Context, *GetWasmPluginVersionRequest) (*WasmPluginVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWasmPluginVersion not implemented")
}
func (UnimplementedNetworkServicesServer) CreateWasmPluginVersion(context.Context, *CreateWasmPluginVersionRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWasmPluginVersion not implemented")
}
func (UnimplementedNetworkServicesServer) DeleteWasmPluginVersion(context.Context, *DeleteWasmPluginVersionRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWasmPluginVersion not implemented")
}
func (UnimplementedNetworkServicesServer) ListWasmPlugins(context.Context, *ListWasmPluginsRequest) (*ListWasmPluginsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWasmPlugins not implemented")
}
func (UnimplementedNetworkServicesServer) GetWasmPlugin(context.Context, *GetWasmPluginRequest) (*WasmPlugin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWasmPlugin not implemented")
}
func (UnimplementedNetworkServicesServer) CreateWasmPlugin(context.Context, *CreateWasmPluginRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWasmPlugin not implemented")
}
func (UnimplementedNetworkServicesServer) UpdateWasmPlugin(context.Context, *UpdateWasmPluginRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWasmPlugin not implemented")
}
func (UnimplementedNetworkServicesServer) DeleteWasmPlugin(context.Context, *DeleteWasmPluginRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWasmPlugin not implemented")
}
func (UnimplementedNetworkServicesServer) ListGateways(context.Context, *ListGatewaysRequest) (*ListGatewaysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGateways not implemented")
}
func (UnimplementedNetworkServicesServer) GetGateway(context.Context, *GetGatewayRequest) (*Gateway, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGateway not implemented")
}
func (UnimplementedNetworkServicesServer) CreateGateway(context.Context, *CreateGatewayRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGateway not implemented")
}
func (UnimplementedNetworkServicesServer) UpdateGateway(context.Context, *UpdateGatewayRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGateway not implemented")
}
func (UnimplementedNetworkServicesServer) DeleteGateway(context.Context, *DeleteGatewayRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGateway not implemented")
}
func (UnimplementedNetworkServicesServer) ListGrpcRoutes(context.Context, *ListGrpcRoutesRequest) (*ListGrpcRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGrpcRoutes not implemented")
}
func (UnimplementedNetworkServicesServer) GetGrpcRoute(context.Context, *GetGrpcRouteRequest) (*GrpcRoute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGrpcRoute not implemented")
}
func (UnimplementedNetworkServicesServer) CreateGrpcRoute(context.Context, *CreateGrpcRouteRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGrpcRoute not implemented")
}
func (UnimplementedNetworkServicesServer) UpdateGrpcRoute(context.Context, *UpdateGrpcRouteRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGrpcRoute not implemented")
}
func (UnimplementedNetworkServicesServer) DeleteGrpcRoute(context.Context, *DeleteGrpcRouteRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGrpcRoute not implemented")
}
func (UnimplementedNetworkServicesServer) ListHttpRoutes(context.Context, *ListHttpRoutesRequest) (*ListHttpRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHttpRoutes not implemented")
}
func (UnimplementedNetworkServicesServer) GetHttpRoute(context.Context, *GetHttpRouteRequest) (*HttpRoute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHttpRoute not implemented")
}
func (UnimplementedNetworkServicesServer) CreateHttpRoute(context.Context, *CreateHttpRouteRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHttpRoute not implemented")
}
func (UnimplementedNetworkServicesServer) UpdateHttpRoute(context.Context, *UpdateHttpRouteRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHttpRoute not implemented")
}
func (UnimplementedNetworkServicesServer) DeleteHttpRoute(context.Context, *DeleteHttpRouteRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHttpRoute not implemented")
}
func (UnimplementedNetworkServicesServer) ListTcpRoutes(context.Context, *ListTcpRoutesRequest) (*ListTcpRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTcpRoutes not implemented")
}
func (UnimplementedNetworkServicesServer) GetTcpRoute(context.Context, *GetTcpRouteRequest) (*TcpRoute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTcpRoute not implemented")
}
func (UnimplementedNetworkServicesServer) CreateTcpRoute(context.Context, *CreateTcpRouteRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTcpRoute not implemented")
}
func (UnimplementedNetworkServicesServer) UpdateTcpRoute(context.Context, *UpdateTcpRouteRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTcpRoute not implemented")
}
func (UnimplementedNetworkServicesServer) DeleteTcpRoute(context.Context, *DeleteTcpRouteRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTcpRoute not implemented")
}
func (UnimplementedNetworkServicesServer) ListTlsRoutes(context.Context, *ListTlsRoutesRequest) (*ListTlsRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTlsRoutes not implemented")
}
func (UnimplementedNetworkServicesServer) GetTlsRoute(context.Context, *GetTlsRouteRequest) (*TlsRoute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTlsRoute not implemented")
}
func (UnimplementedNetworkServicesServer) CreateTlsRoute(context.Context, *CreateTlsRouteRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTlsRoute not implemented")
}
func (UnimplementedNetworkServicesServer) UpdateTlsRoute(context.Context, *UpdateTlsRouteRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTlsRoute not implemented")
}
func (UnimplementedNetworkServicesServer) DeleteTlsRoute(context.Context, *DeleteTlsRouteRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTlsRoute not implemented")
}
func (UnimplementedNetworkServicesServer) ListServiceBindings(context.Context, *ListServiceBindingsRequest) (*ListServiceBindingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServiceBindings not implemented")
}
func (UnimplementedNetworkServicesServer) GetServiceBinding(context.Context, *GetServiceBindingRequest) (*ServiceBinding, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceBinding not implemented")
}
func (UnimplementedNetworkServicesServer) CreateServiceBinding(context.Context, *CreateServiceBindingRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServiceBinding not implemented")
}
func (UnimplementedNetworkServicesServer) UpdateServiceBinding(context.Context, *UpdateServiceBindingRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServiceBinding not implemented")
}
func (UnimplementedNetworkServicesServer) DeleteServiceBinding(context.Context, *DeleteServiceBindingRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServiceBinding not implemented")
}
func (UnimplementedNetworkServicesServer) ListMeshes(context.Context, *ListMeshesRequest) (*ListMeshesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMeshes not implemented")
}
func (UnimplementedNetworkServicesServer) GetMesh(context.Context, *GetMeshRequest) (*Mesh, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMesh not implemented")
}
func (UnimplementedNetworkServicesServer) CreateMesh(context.Context, *CreateMeshRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMesh not implemented")
}
func (UnimplementedNetworkServicesServer) UpdateMesh(context.Context, *UpdateMeshRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMesh not implemented")
}
func (UnimplementedNetworkServicesServer) DeleteMesh(context.Context, *DeleteMeshRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMesh not implemented")
}
func (UnimplementedNetworkServicesServer) ListServiceLbPolicies(context.Context, *ListServiceLbPoliciesRequest) (*ListServiceLbPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServiceLbPolicies not implemented")
}
func (UnimplementedNetworkServicesServer) GetServiceLbPolicy(context.Context, *GetServiceLbPolicyRequest) (*ServiceLbPolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceLbPolicy not implemented")
}
func (UnimplementedNetworkServicesServer) CreateServiceLbPolicy(context.Context, *CreateServiceLbPolicyRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServiceLbPolicy not implemented")
}
func (UnimplementedNetworkServicesServer) UpdateServiceLbPolicy(context.Context, *UpdateServiceLbPolicyRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServiceLbPolicy not implemented")
}
func (UnimplementedNetworkServicesServer) DeleteServiceLbPolicy(context.Context, *DeleteServiceLbPolicyRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServiceLbPolicy not implemented")
}
func (UnimplementedNetworkServicesServer) GetGatewayRouteView(context.Context, *GetGatewayRouteViewRequest) (*GatewayRouteView, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGatewayRouteView not implemented")
}
func (UnimplementedNetworkServicesServer) GetMeshRouteView(context.Context, *GetMeshRouteViewRequest) (*MeshRouteView, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeshRouteView not implemented")
}
func (UnimplementedNetworkServicesServer) ListGatewayRouteViews(context.Context, *ListGatewayRouteViewsRequest) (*ListGatewayRouteViewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGatewayRouteViews not implemented")
}
func (UnimplementedNetworkServicesServer) ListMeshRouteViews(context.Context, *ListMeshRouteViewsRequest) (*ListMeshRouteViewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMeshRouteViews not implemented")
}

// UnsafeNetworkServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkServicesServer will
// result in compilation errors.
type UnsafeNetworkServicesServer interface {
	mustEmbedUnimplementedNetworkServicesServer()
}

func RegisterNetworkServicesServer(s grpc.ServiceRegistrar, srv NetworkServicesServer) {
	s.RegisterService(&NetworkServices_ServiceDesc, srv)
}

func _NetworkServices_ListEndpointPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEndpointPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).ListEndpointPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_ListEndpointPolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).ListEndpointPolicies(ctx, req.(*ListEndpointPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_GetEndpointPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEndpointPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).GetEndpointPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_GetEndpointPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).GetEndpointPolicy(ctx, req.(*GetEndpointPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_CreateEndpointPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEndpointPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).CreateEndpointPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_CreateEndpointPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).CreateEndpointPolicy(ctx, req.(*CreateEndpointPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_UpdateEndpointPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEndpointPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).UpdateEndpointPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_UpdateEndpointPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).UpdateEndpointPolicy(ctx, req.(*UpdateEndpointPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_DeleteEndpointPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEndpointPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).DeleteEndpointPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_DeleteEndpointPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).DeleteEndpointPolicy(ctx, req.(*DeleteEndpointPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_ListWasmPluginVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWasmPluginVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).ListWasmPluginVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_ListWasmPluginVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).ListWasmPluginVersions(ctx, req.(*ListWasmPluginVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_GetWasmPluginVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWasmPluginVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).GetWasmPluginVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_GetWasmPluginVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).GetWasmPluginVersion(ctx, req.(*GetWasmPluginVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_CreateWasmPluginVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWasmPluginVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).CreateWasmPluginVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_CreateWasmPluginVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).CreateWasmPluginVersion(ctx, req.(*CreateWasmPluginVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_DeleteWasmPluginVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWasmPluginVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).DeleteWasmPluginVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_DeleteWasmPluginVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).DeleteWasmPluginVersion(ctx, req.(*DeleteWasmPluginVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_ListWasmPlugins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWasmPluginsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).ListWasmPlugins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_ListWasmPlugins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).ListWasmPlugins(ctx, req.(*ListWasmPluginsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_GetWasmPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWasmPluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).GetWasmPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_GetWasmPlugin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).GetWasmPlugin(ctx, req.(*GetWasmPluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_CreateWasmPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWasmPluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).CreateWasmPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_CreateWasmPlugin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).CreateWasmPlugin(ctx, req.(*CreateWasmPluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_UpdateWasmPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWasmPluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).UpdateWasmPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_UpdateWasmPlugin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).UpdateWasmPlugin(ctx, req.(*UpdateWasmPluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_DeleteWasmPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWasmPluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).DeleteWasmPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_DeleteWasmPlugin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).DeleteWasmPlugin(ctx, req.(*DeleteWasmPluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_ListGateways_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGatewaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).ListGateways(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_ListGateways_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).ListGateways(ctx, req.(*ListGatewaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_GetGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).GetGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_GetGateway_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).GetGateway(ctx, req.(*GetGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_CreateGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).CreateGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_CreateGateway_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).CreateGateway(ctx, req.(*CreateGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_UpdateGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).UpdateGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_UpdateGateway_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).UpdateGateway(ctx, req.(*UpdateGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_DeleteGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).DeleteGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_DeleteGateway_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).DeleteGateway(ctx, req.(*DeleteGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_ListGrpcRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGrpcRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).ListGrpcRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_ListGrpcRoutes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).ListGrpcRoutes(ctx, req.(*ListGrpcRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_GetGrpcRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGrpcRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).GetGrpcRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_GetGrpcRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).GetGrpcRoute(ctx, req.(*GetGrpcRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_CreateGrpcRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGrpcRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).CreateGrpcRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_CreateGrpcRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).CreateGrpcRoute(ctx, req.(*CreateGrpcRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_UpdateGrpcRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGrpcRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).UpdateGrpcRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_UpdateGrpcRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).UpdateGrpcRoute(ctx, req.(*UpdateGrpcRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_DeleteGrpcRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGrpcRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).DeleteGrpcRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_DeleteGrpcRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).DeleteGrpcRoute(ctx, req.(*DeleteGrpcRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_ListHttpRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHttpRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).ListHttpRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_ListHttpRoutes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).ListHttpRoutes(ctx, req.(*ListHttpRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_GetHttpRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHttpRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).GetHttpRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_GetHttpRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).GetHttpRoute(ctx, req.(*GetHttpRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_CreateHttpRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHttpRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).CreateHttpRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_CreateHttpRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).CreateHttpRoute(ctx, req.(*CreateHttpRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_UpdateHttpRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHttpRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).UpdateHttpRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_UpdateHttpRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).UpdateHttpRoute(ctx, req.(*UpdateHttpRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_DeleteHttpRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHttpRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).DeleteHttpRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_DeleteHttpRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).DeleteHttpRoute(ctx, req.(*DeleteHttpRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_ListTcpRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTcpRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).ListTcpRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_ListTcpRoutes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).ListTcpRoutes(ctx, req.(*ListTcpRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_GetTcpRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTcpRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).GetTcpRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_GetTcpRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).GetTcpRoute(ctx, req.(*GetTcpRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_CreateTcpRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTcpRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).CreateTcpRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_CreateTcpRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).CreateTcpRoute(ctx, req.(*CreateTcpRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_UpdateTcpRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTcpRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).UpdateTcpRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_UpdateTcpRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).UpdateTcpRoute(ctx, req.(*UpdateTcpRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_DeleteTcpRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTcpRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).DeleteTcpRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_DeleteTcpRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).DeleteTcpRoute(ctx, req.(*DeleteTcpRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_ListTlsRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTlsRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).ListTlsRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_ListTlsRoutes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).ListTlsRoutes(ctx, req.(*ListTlsRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_GetTlsRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTlsRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).GetTlsRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_GetTlsRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).GetTlsRoute(ctx, req.(*GetTlsRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_CreateTlsRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTlsRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).CreateTlsRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_CreateTlsRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).CreateTlsRoute(ctx, req.(*CreateTlsRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_UpdateTlsRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTlsRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).UpdateTlsRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_UpdateTlsRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).UpdateTlsRoute(ctx, req.(*UpdateTlsRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_DeleteTlsRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTlsRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).DeleteTlsRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_DeleteTlsRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).DeleteTlsRoute(ctx, req.(*DeleteTlsRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_ListServiceBindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServiceBindingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).ListServiceBindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_ListServiceBindings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).ListServiceBindings(ctx, req.(*ListServiceBindingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_GetServiceBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).GetServiceBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_GetServiceBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).GetServiceBinding(ctx, req.(*GetServiceBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_CreateServiceBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).CreateServiceBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_CreateServiceBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).CreateServiceBinding(ctx, req.(*CreateServiceBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_UpdateServiceBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServiceBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).UpdateServiceBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_UpdateServiceBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).UpdateServiceBinding(ctx, req.(*UpdateServiceBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_DeleteServiceBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServiceBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).DeleteServiceBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_DeleteServiceBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).DeleteServiceBinding(ctx, req.(*DeleteServiceBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_ListMeshes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMeshesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).ListMeshes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_ListMeshes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).ListMeshes(ctx, req.(*ListMeshesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_GetMesh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMeshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).GetMesh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_GetMesh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).GetMesh(ctx, req.(*GetMeshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_CreateMesh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMeshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).CreateMesh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_CreateMesh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).CreateMesh(ctx, req.(*CreateMeshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_UpdateMesh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMeshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).UpdateMesh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_UpdateMesh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).UpdateMesh(ctx, req.(*UpdateMeshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_DeleteMesh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMeshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).DeleteMesh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_DeleteMesh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).DeleteMesh(ctx, req.(*DeleteMeshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_ListServiceLbPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServiceLbPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).ListServiceLbPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_ListServiceLbPolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).ListServiceLbPolicies(ctx, req.(*ListServiceLbPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_GetServiceLbPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceLbPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).GetServiceLbPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_GetServiceLbPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).GetServiceLbPolicy(ctx, req.(*GetServiceLbPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_CreateServiceLbPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceLbPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).CreateServiceLbPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_CreateServiceLbPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).CreateServiceLbPolicy(ctx, req.(*CreateServiceLbPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_UpdateServiceLbPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServiceLbPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).UpdateServiceLbPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_UpdateServiceLbPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).UpdateServiceLbPolicy(ctx, req.(*UpdateServiceLbPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_DeleteServiceLbPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServiceLbPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).DeleteServiceLbPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_DeleteServiceLbPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).DeleteServiceLbPolicy(ctx, req.(*DeleteServiceLbPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_GetGatewayRouteView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGatewayRouteViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).GetGatewayRouteView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_GetGatewayRouteView_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).GetGatewayRouteView(ctx, req.(*GetGatewayRouteViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_GetMeshRouteView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMeshRouteViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).GetMeshRouteView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_GetMeshRouteView_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).GetMeshRouteView(ctx, req.(*GetMeshRouteViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_ListGatewayRouteViews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGatewayRouteViewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).ListGatewayRouteViews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_ListGatewayRouteViews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).ListGatewayRouteViews(ctx, req.(*ListGatewayRouteViewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_ListMeshRouteViews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMeshRouteViewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).ListMeshRouteViews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServices_ListMeshRouteViews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).ListMeshRouteViews(ctx, req.(*ListMeshRouteViewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NetworkServices_ServiceDesc is the grpc.ServiceDesc for NetworkServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetworkServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.networkservices.v1.NetworkServices",
	HandlerType: (*NetworkServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListEndpointPolicies",
			Handler:    _NetworkServices_ListEndpointPolicies_Handler,
		},
		{
			MethodName: "GetEndpointPolicy",
			Handler:    _NetworkServices_GetEndpointPolicy_Handler,
		},
		{
			MethodName: "CreateEndpointPolicy",
			Handler:    _NetworkServices_CreateEndpointPolicy_Handler,
		},
		{
			MethodName: "UpdateEndpointPolicy",
			Handler:    _NetworkServices_UpdateEndpointPolicy_Handler,
		},
		{
			MethodName: "DeleteEndpointPolicy",
			Handler:    _NetworkServices_DeleteEndpointPolicy_Handler,
		},
		{
			MethodName: "ListWasmPluginVersions",
			Handler:    _NetworkServices_ListWasmPluginVersions_Handler,
		},
		{
			MethodName: "GetWasmPluginVersion",
			Handler:    _NetworkServices_GetWasmPluginVersion_Handler,
		},
		{
			MethodName: "CreateWasmPluginVersion",
			Handler:    _NetworkServices_CreateWasmPluginVersion_Handler,
		},
		{
			MethodName: "DeleteWasmPluginVersion",
			Handler:    _NetworkServices_DeleteWasmPluginVersion_Handler,
		},
		{
			MethodName: "ListWasmPlugins",
			Handler:    _NetworkServices_ListWasmPlugins_Handler,
		},
		{
			MethodName: "GetWasmPlugin",
			Handler:    _NetworkServices_GetWasmPlugin_Handler,
		},
		{
			MethodName: "CreateWasmPlugin",
			Handler:    _NetworkServices_CreateWasmPlugin_Handler,
		},
		{
			MethodName: "UpdateWasmPlugin",
			Handler:    _NetworkServices_UpdateWasmPlugin_Handler,
		},
		{
			MethodName: "DeleteWasmPlugin",
			Handler:    _NetworkServices_DeleteWasmPlugin_Handler,
		},
		{
			MethodName: "ListGateways",
			Handler:    _NetworkServices_ListGateways_Handler,
		},
		{
			MethodName: "GetGateway",
			Handler:    _NetworkServices_GetGateway_Handler,
		},
		{
			MethodName: "CreateGateway",
			Handler:    _NetworkServices_CreateGateway_Handler,
		},
		{
			MethodName: "UpdateGateway",
			Handler:    _NetworkServices_UpdateGateway_Handler,
		},
		{
			MethodName: "DeleteGateway",
			Handler:    _NetworkServices_DeleteGateway_Handler,
		},
		{
			MethodName: "ListGrpcRoutes",
			Handler:    _NetworkServices_ListGrpcRoutes_Handler,
		},
		{
			MethodName: "GetGrpcRoute",
			Handler:    _NetworkServices_GetGrpcRoute_Handler,
		},
		{
			MethodName: "CreateGrpcRoute",
			Handler:    _NetworkServices_CreateGrpcRoute_Handler,
		},
		{
			MethodName: "UpdateGrpcRoute",
			Handler:    _NetworkServices_UpdateGrpcRoute_Handler,
		},
		{
			MethodName: "DeleteGrpcRoute",
			Handler:    _NetworkServices_DeleteGrpcRoute_Handler,
		},
		{
			MethodName: "ListHttpRoutes",
			Handler:    _NetworkServices_ListHttpRoutes_Handler,
		},
		{
			MethodName: "GetHttpRoute",
			Handler:    _NetworkServices_GetHttpRoute_Handler,
		},
		{
			MethodName: "CreateHttpRoute",
			Handler:    _NetworkServices_CreateHttpRoute_Handler,
		},
		{
			MethodName: "UpdateHttpRoute",
			Handler:    _NetworkServices_UpdateHttpRoute_Handler,
		},
		{
			MethodName: "DeleteHttpRoute",
			Handler:    _NetworkServices_DeleteHttpRoute_Handler,
		},
		{
			MethodName: "ListTcpRoutes",
			Handler:    _NetworkServices_ListTcpRoutes_Handler,
		},
		{
			MethodName: "GetTcpRoute",
			Handler:    _NetworkServices_GetTcpRoute_Handler,
		},
		{
			MethodName: "CreateTcpRoute",
			Handler:    _NetworkServices_CreateTcpRoute_Handler,
		},
		{
			MethodName: "UpdateTcpRoute",
			Handler:    _NetworkServices_UpdateTcpRoute_Handler,
		},
		{
			MethodName: "DeleteTcpRoute",
			Handler:    _NetworkServices_DeleteTcpRoute_Handler,
		},
		{
			MethodName: "ListTlsRoutes",
			Handler:    _NetworkServices_ListTlsRoutes_Handler,
		},
		{
			MethodName: "GetTlsRoute",
			Handler:    _NetworkServices_GetTlsRoute_Handler,
		},
		{
			MethodName: "CreateTlsRoute",
			Handler:    _NetworkServices_CreateTlsRoute_Handler,
		},
		{
			MethodName: "UpdateTlsRoute",
			Handler:    _NetworkServices_UpdateTlsRoute_Handler,
		},
		{
			MethodName: "DeleteTlsRoute",
			Handler:    _NetworkServices_DeleteTlsRoute_Handler,
		},
		{
			MethodName: "ListServiceBindings",
			Handler:    _NetworkServices_ListServiceBindings_Handler,
		},
		{
			MethodName: "GetServiceBinding",
			Handler:    _NetworkServices_GetServiceBinding_Handler,
		},
		{
			MethodName: "CreateServiceBinding",
			Handler:    _NetworkServices_CreateServiceBinding_Handler,
		},
		{
			MethodName: "UpdateServiceBinding",
			Handler:    _NetworkServices_UpdateServiceBinding_Handler,
		},
		{
			MethodName: "DeleteServiceBinding",
			Handler:    _NetworkServices_DeleteServiceBinding_Handler,
		},
		{
			MethodName: "ListMeshes",
			Handler:    _NetworkServices_ListMeshes_Handler,
		},
		{
			MethodName: "GetMesh",
			Handler:    _NetworkServices_GetMesh_Handler,
		},
		{
			MethodName: "CreateMesh",
			Handler:    _NetworkServices_CreateMesh_Handler,
		},
		{
			MethodName: "UpdateMesh",
			Handler:    _NetworkServices_UpdateMesh_Handler,
		},
		{
			MethodName: "DeleteMesh",
			Handler:    _NetworkServices_DeleteMesh_Handler,
		},
		{
			MethodName: "ListServiceLbPolicies",
			Handler:    _NetworkServices_ListServiceLbPolicies_Handler,
		},
		{
			MethodName: "GetServiceLbPolicy",
			Handler:    _NetworkServices_GetServiceLbPolicy_Handler,
		},
		{
			MethodName: "CreateServiceLbPolicy",
			Handler:    _NetworkServices_CreateServiceLbPolicy_Handler,
		},
		{
			MethodName: "UpdateServiceLbPolicy",
			Handler:    _NetworkServices_UpdateServiceLbPolicy_Handler,
		},
		{
			MethodName: "DeleteServiceLbPolicy",
			Handler:    _NetworkServices_DeleteServiceLbPolicy_Handler,
		},
		{
			MethodName: "GetGatewayRouteView",
			Handler:    _NetworkServices_GetGatewayRouteView_Handler,
		},
		{
			MethodName: "GetMeshRouteView",
			Handler:    _NetworkServices_GetMeshRouteView_Handler,
		},
		{
			MethodName: "ListGatewayRouteViews",
			Handler:    _NetworkServices_ListGatewayRouteViews_Handler,
		},
		{
			MethodName: "ListMeshRouteViews",
			Handler:    _NetworkServices_ListMeshRouteViews_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/networkservices/v1/network_services.proto",
}
