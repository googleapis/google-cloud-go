// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.7
// source: google/cloud/networkservices/v1/service_lb_policy.proto

package networkservicespb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The global load balancing algorithm to be used.
type ServiceLbPolicy_LoadBalancingAlgorithm int32

const (
	// The type of the loadbalancing algorithm is unspecified.
	ServiceLbPolicy_LOAD_BALANCING_ALGORITHM_UNSPECIFIED ServiceLbPolicy_LoadBalancingAlgorithm = 0
	// Balance traffic across all backends across the world proportionally based
	// on capacity.
	ServiceLbPolicy_SPRAY_TO_WORLD ServiceLbPolicy_LoadBalancingAlgorithm = 3
	// Direct traffic to the nearest region with endpoints and capacity before
	// spilling over to other regions and spread the traffic from each client to
	// all the MIGs/NEGs in a region.
	ServiceLbPolicy_SPRAY_TO_REGION ServiceLbPolicy_LoadBalancingAlgorithm = 4
	// Direct traffic to the nearest region with endpoints and capacity before
	// spilling over to other regions. All MIGs/NEGs within a region are evenly
	// loaded but each client might not spread the traffic to all the MIGs/NEGs
	// in the region.
	ServiceLbPolicy_WATERFALL_BY_REGION ServiceLbPolicy_LoadBalancingAlgorithm = 5
	// Attempt to keep traffic in a single zone closest to the client, before
	// spilling over to other zones.
	ServiceLbPolicy_WATERFALL_BY_ZONE ServiceLbPolicy_LoadBalancingAlgorithm = 6
)

// Enum value maps for ServiceLbPolicy_LoadBalancingAlgorithm.
var (
	ServiceLbPolicy_LoadBalancingAlgorithm_name = map[int32]string{
		0: "LOAD_BALANCING_ALGORITHM_UNSPECIFIED",
		3: "SPRAY_TO_WORLD",
		4: "SPRAY_TO_REGION",
		5: "WATERFALL_BY_REGION",
		6: "WATERFALL_BY_ZONE",
	}
	ServiceLbPolicy_LoadBalancingAlgorithm_value = map[string]int32{
		"LOAD_BALANCING_ALGORITHM_UNSPECIFIED": 0,
		"SPRAY_TO_WORLD":                       3,
		"SPRAY_TO_REGION":                      4,
		"WATERFALL_BY_REGION":                  5,
		"WATERFALL_BY_ZONE":                    6,
	}
)

func (x ServiceLbPolicy_LoadBalancingAlgorithm) Enum() *ServiceLbPolicy_LoadBalancingAlgorithm {
	p := new(ServiceLbPolicy_LoadBalancingAlgorithm)
	*p = x
	return p
}

func (x ServiceLbPolicy_LoadBalancingAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceLbPolicy_LoadBalancingAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_networkservices_v1_service_lb_policy_proto_enumTypes[0].Descriptor()
}

func (ServiceLbPolicy_LoadBalancingAlgorithm) Type() protoreflect.EnumType {
	return &file_google_cloud_networkservices_v1_service_lb_policy_proto_enumTypes[0]
}

func (x ServiceLbPolicy_LoadBalancingAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceLbPolicy_LoadBalancingAlgorithm.Descriptor instead.
func (ServiceLbPolicy_LoadBalancingAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_networkservices_v1_service_lb_policy_proto_rawDescGZIP(), []int{0, 0}
}

// ServiceLbPolicy holds global load balancing and traffic distribution
// configuration that can be applied to a BackendService.
type ServiceLbPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier. Name of the ServiceLbPolicy resource. It matches pattern
	// `projects/{project}/locations/{location}/serviceLbPolicies/{service_lb_policy_name}`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. The timestamp when this resource was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The timestamp when this resource was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Optional. Set of label tags associated with the ServiceLbPolicy resource.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Optional. A free-text description of the resource. Max length 1024
	// characters.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Optional. The type of load balancing algorithm to be used. The default
	// behavior is WATERFALL_BY_REGION.
	LoadBalancingAlgorithm ServiceLbPolicy_LoadBalancingAlgorithm `protobuf:"varint,6,opt,name=load_balancing_algorithm,json=loadBalancingAlgorithm,proto3,enum=google.cloud.networkservices.v1.ServiceLbPolicy_LoadBalancingAlgorithm" json:"load_balancing_algorithm,omitempty"`
	// Optional. Configuration to automatically move traffic away for unhealthy
	// IG/NEG for the associated Backend Service.
	AutoCapacityDrain *ServiceLbPolicy_AutoCapacityDrain `protobuf:"bytes,8,opt,name=auto_capacity_drain,json=autoCapacityDrain,proto3" json:"auto_capacity_drain,omitempty"`
	// Optional. Configuration related to health based failover.
	FailoverConfig *ServiceLbPolicy_FailoverConfig `protobuf:"bytes,10,opt,name=failover_config,json=failoverConfig,proto3" json:"failover_config,omitempty"`
}

func (x *ServiceLbPolicy) Reset() {
	*x = ServiceLbPolicy{}
	mi := &file_google_cloud_networkservices_v1_service_lb_policy_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceLbPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceLbPolicy) ProtoMessage() {}

func (x *ServiceLbPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_networkservices_v1_service_lb_policy_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceLbPolicy.ProtoReflect.Descriptor instead.
func (*ServiceLbPolicy) Descriptor() ([]byte, []int) {
	return file_google_cloud_networkservices_v1_service_lb_policy_proto_rawDescGZIP(), []int{0}
}

func (x *ServiceLbPolicy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServiceLbPolicy) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ServiceLbPolicy) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *ServiceLbPolicy) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ServiceLbPolicy) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ServiceLbPolicy) GetLoadBalancingAlgorithm() ServiceLbPolicy_LoadBalancingAlgorithm {
	if x != nil {
		return x.LoadBalancingAlgorithm
	}
	return ServiceLbPolicy_LOAD_BALANCING_ALGORITHM_UNSPECIFIED
}

func (x *ServiceLbPolicy) GetAutoCapacityDrain() *ServiceLbPolicy_AutoCapacityDrain {
	if x != nil {
		return x.AutoCapacityDrain
	}
	return nil
}

func (x *ServiceLbPolicy) GetFailoverConfig() *ServiceLbPolicy_FailoverConfig {
	if x != nil {
		return x.FailoverConfig
	}
	return nil
}

// Request used with the ListServiceLbPolicies method.
type ListServiceLbPoliciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The project and location from which the ServiceLbPolicies should
	// be listed, specified in the format
	// `projects/{project}/locations/{location}`.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Maximum number of ServiceLbPolicies to return per call.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The value returned by the last `ListServiceLbPoliciesResponse`
	// Indicates that this is a continuation of a prior `ListRouters` call,
	// and that the system should return the next page of data.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListServiceLbPoliciesRequest) Reset() {
	*x = ListServiceLbPoliciesRequest{}
	mi := &file_google_cloud_networkservices_v1_service_lb_policy_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListServiceLbPoliciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListServiceLbPoliciesRequest) ProtoMessage() {}

func (x *ListServiceLbPoliciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_networkservices_v1_service_lb_policy_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListServiceLbPoliciesRequest.ProtoReflect.Descriptor instead.
func (*ListServiceLbPoliciesRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_networkservices_v1_service_lb_policy_proto_rawDescGZIP(), []int{1}
}

func (x *ListServiceLbPoliciesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListServiceLbPoliciesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListServiceLbPoliciesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// Response returned by the ListServiceLbPolicies method.
type ListServiceLbPoliciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of ServiceLbPolicy resources.
	ServiceLbPolicies []*ServiceLbPolicy `protobuf:"bytes,1,rep,name=service_lb_policies,json=serviceLbPolicies,proto3" json:"service_lb_policies,omitempty"`
	// If there might be more results than those appearing in this response, then
	// `next_page_token` is included. To get the next set of results, call this
	// method again using the value of `next_page_token` as `page_token`.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Unreachable resources. Populated when the request attempts to list all
	// resources across all supported locations, while some locations are
	// temporarily unavailable.
	Unreachable []string `protobuf:"bytes,3,rep,name=unreachable,proto3" json:"unreachable,omitempty"`
}

func (x *ListServiceLbPoliciesResponse) Reset() {
	*x = ListServiceLbPoliciesResponse{}
	mi := &file_google_cloud_networkservices_v1_service_lb_policy_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListServiceLbPoliciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListServiceLbPoliciesResponse) ProtoMessage() {}

func (x *ListServiceLbPoliciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_networkservices_v1_service_lb_policy_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListServiceLbPoliciesResponse.ProtoReflect.Descriptor instead.
func (*ListServiceLbPoliciesResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_networkservices_v1_service_lb_policy_proto_rawDescGZIP(), []int{2}
}

func (x *ListServiceLbPoliciesResponse) GetServiceLbPolicies() []*ServiceLbPolicy {
	if x != nil {
		return x.ServiceLbPolicies
	}
	return nil
}

func (x *ListServiceLbPoliciesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListServiceLbPoliciesResponse) GetUnreachable() []string {
	if x != nil {
		return x.Unreachable
	}
	return nil
}

// Request used by the GetServiceLbPolicy method.
type GetServiceLbPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. A name of the ServiceLbPolicy to get. Must be in the format
	// `projects/{project}/locations/{location}/serviceLbPolicies/*`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetServiceLbPolicyRequest) Reset() {
	*x = GetServiceLbPolicyRequest{}
	mi := &file_google_cloud_networkservices_v1_service_lb_policy_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetServiceLbPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceLbPolicyRequest) ProtoMessage() {}

func (x *GetServiceLbPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_networkservices_v1_service_lb_policy_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceLbPolicyRequest.ProtoReflect.Descriptor instead.
func (*GetServiceLbPolicyRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_networkservices_v1_service_lb_policy_proto_rawDescGZIP(), []int{3}
}

func (x *GetServiceLbPolicyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Request used by the ServiceLbPolicy method.
type CreateServiceLbPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent resource of the ServiceLbPolicy. Must be in the
	// format `projects/{project}/locations/{location}`.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Required. Short name of the ServiceLbPolicy resource to be created.
	// E.g. for resource name
	// `projects/{project}/locations/{location}/serviceLbPolicies/{service_lb_policy_name}`.
	// the id is value of {service_lb_policy_name}
	ServiceLbPolicyId string `protobuf:"bytes,2,opt,name=service_lb_policy_id,json=serviceLbPolicyId,proto3" json:"service_lb_policy_id,omitempty"`
	// Required. ServiceLbPolicy resource to be created.
	ServiceLbPolicy *ServiceLbPolicy `protobuf:"bytes,3,opt,name=service_lb_policy,json=serviceLbPolicy,proto3" json:"service_lb_policy,omitempty"`
}

func (x *CreateServiceLbPolicyRequest) Reset() {
	*x = CreateServiceLbPolicyRequest{}
	mi := &file_google_cloud_networkservices_v1_service_lb_policy_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateServiceLbPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateServiceLbPolicyRequest) ProtoMessage() {}

func (x *CreateServiceLbPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_networkservices_v1_service_lb_policy_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateServiceLbPolicyRequest.ProtoReflect.Descriptor instead.
func (*CreateServiceLbPolicyRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_networkservices_v1_service_lb_policy_proto_rawDescGZIP(), []int{4}
}

func (x *CreateServiceLbPolicyRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateServiceLbPolicyRequest) GetServiceLbPolicyId() string {
	if x != nil {
		return x.ServiceLbPolicyId
	}
	return ""
}

func (x *CreateServiceLbPolicyRequest) GetServiceLbPolicy() *ServiceLbPolicy {
	if x != nil {
		return x.ServiceLbPolicy
	}
	return nil
}

// Request used by the UpdateServiceLbPolicy method.
type UpdateServiceLbPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Field mask is used to specify the fields to be overwritten in the
	// ServiceLbPolicy resource by the update.
	// The fields specified in the update_mask are relative to the resource, not
	// the full request. A field will be overwritten if it is in the mask. If the
	// user does not provide a mask then all fields will be overwritten.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,1,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// Required. Updated ServiceLbPolicy resource.
	ServiceLbPolicy *ServiceLbPolicy `protobuf:"bytes,2,opt,name=service_lb_policy,json=serviceLbPolicy,proto3" json:"service_lb_policy,omitempty"`
}

func (x *UpdateServiceLbPolicyRequest) Reset() {
	*x = UpdateServiceLbPolicyRequest{}
	mi := &file_google_cloud_networkservices_v1_service_lb_policy_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateServiceLbPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServiceLbPolicyRequest) ProtoMessage() {}

func (x *UpdateServiceLbPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_networkservices_v1_service_lb_policy_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServiceLbPolicyRequest.ProtoReflect.Descriptor instead.
func (*UpdateServiceLbPolicyRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_networkservices_v1_service_lb_policy_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateServiceLbPolicyRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateServiceLbPolicyRequest) GetServiceLbPolicy() *ServiceLbPolicy {
	if x != nil {
		return x.ServiceLbPolicy
	}
	return nil
}

// Request used by the DeleteServiceLbPolicy method.
type DeleteServiceLbPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. A name of the ServiceLbPolicy to delete. Must be in the format
	// `projects/{project}/locations/{location}/serviceLbPolicies/*`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteServiceLbPolicyRequest) Reset() {
	*x = DeleteServiceLbPolicyRequest{}
	mi := &file_google_cloud_networkservices_v1_service_lb_policy_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteServiceLbPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteServiceLbPolicyRequest) ProtoMessage() {}

func (x *DeleteServiceLbPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_networkservices_v1_service_lb_policy_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteServiceLbPolicyRequest.ProtoReflect.Descriptor instead.
func (*DeleteServiceLbPolicyRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_networkservices_v1_service_lb_policy_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteServiceLbPolicyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Option to specify if an unhealthy IG/NEG should be considered for global
// load balancing and traffic routing.
type ServiceLbPolicy_AutoCapacityDrain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. If set to 'True', an unhealthy IG/NEG will be set as drained.
	// - An IG/NEG is considered unhealthy if less than 25% of the
	// instances/endpoints in the IG/NEG are healthy.
	// - This option will never result in draining more than 50% of the
	// configured IGs/NEGs for the Backend Service.
	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *ServiceLbPolicy_AutoCapacityDrain) Reset() {
	*x = ServiceLbPolicy_AutoCapacityDrain{}
	mi := &file_google_cloud_networkservices_v1_service_lb_policy_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceLbPolicy_AutoCapacityDrain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceLbPolicy_AutoCapacityDrain) ProtoMessage() {}

func (x *ServiceLbPolicy_AutoCapacityDrain) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_networkservices_v1_service_lb_policy_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceLbPolicy_AutoCapacityDrain.ProtoReflect.Descriptor instead.
func (*ServiceLbPolicy_AutoCapacityDrain) Descriptor() ([]byte, []int) {
	return file_google_cloud_networkservices_v1_service_lb_policy_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ServiceLbPolicy_AutoCapacityDrain) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

// Option to specify health based failover behavior.
// This is not related to Network load balancer FailoverPolicy.
type ServiceLbPolicy_FailoverConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The percentage threshold that a load balancer will begin to
	// send traffic to failover backends. If the percentage of endpoints in a
	// MIG/NEG is smaller than this value, traffic would be sent to failover
	// backends if possible. This field should be set to a value between 1
	// and 99. The default value is 50 for Global external HTTP(S) load balancer
	// (classic) and Proxyless service mesh, and 70 for others.
	FailoverHealthThreshold int32 `protobuf:"varint,1,opt,name=failover_health_threshold,json=failoverHealthThreshold,proto3" json:"failover_health_threshold,omitempty"`
}

func (x *ServiceLbPolicy_FailoverConfig) Reset() {
	*x = ServiceLbPolicy_FailoverConfig{}
	mi := &file_google_cloud_networkservices_v1_service_lb_policy_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceLbPolicy_FailoverConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceLbPolicy_FailoverConfig) ProtoMessage() {}

func (x *ServiceLbPolicy_FailoverConfig) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_networkservices_v1_service_lb_policy_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceLbPolicy_FailoverConfig.ProtoReflect.Descriptor instead.
func (*ServiceLbPolicy_FailoverConfig) Descriptor() ([]byte, []int) {
	return file_google_cloud_networkservices_v1_service_lb_policy_proto_rawDescGZIP(), []int{0, 1}
}

func (x *ServiceLbPolicy_FailoverConfig) GetFailoverHealthThreshold() int32 {
	if x != nil {
		return x.FailoverHealthThreshold
	}
	return 0
}

var File_google_cloud_networkservices_v1_service_lb_policy_proto protoreflect.FileDescriptor

var file_google_cloud_networkservices_v1_service_lb_policy_proto_rawDesc = []byte{
	0x0a, 0x37, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x62, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x84, 0x09, 0x0a, 0x0f, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x62, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x17, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x08,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x59, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x62, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x86, 0x01, 0x0a,
	0x18, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x47, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x62, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x41,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x16, 0x6c,
	0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x77, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x63, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x72, 0x61, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x42, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x62, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x11, 0x61, 0x75, 0x74,
	0x6f, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x12, 0x6d,
	0x0a, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4c, 0x62, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x66,
	0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x30, 0x0a,
	0x11, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x44, 0x72, 0x61,
	0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x1a,
	0x51, 0x0a, 0x0e, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x3f, 0x0a, 0x19, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x17, 0x66, 0x61, 0x69, 0x6c, 0x6f,
	0x76, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9b, 0x01,
	0x0a, 0x16, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x41,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x28, 0x0a, 0x24, 0x4c, 0x4f, 0x41, 0x44,
	0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52,
	0x49, 0x54, 0x48, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x50, 0x52, 0x41, 0x59, 0x5f, 0x54, 0x4f, 0x5f, 0x57,
	0x4f, 0x52, 0x4c, 0x44, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x50, 0x52, 0x41, 0x59, 0x5f,
	0x54, 0x4f, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x57,
	0x41, 0x54, 0x45, 0x52, 0x46, 0x41, 0x4c, 0x4c, 0x5f, 0x42, 0x59, 0x5f, 0x52, 0x45, 0x47, 0x49,
	0x4f, 0x4e, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x57, 0x41, 0x54, 0x45, 0x52, 0x46, 0x41, 0x4c,
	0x4c, 0x5f, 0x42, 0x59, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x10, 0x06, 0x3a, 0x82, 0x01, 0xea, 0x41,
	0x7f, 0x0a, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x62, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x4d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x62, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x62, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x7d,
	0x22, 0xaa, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4c, 0x62, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x4e, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x36, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x30, 0x12, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4c, 0x62, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xcb, 0x01,
	0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x62, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x60, 0x0a, 0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x62, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x62, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x11,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x62, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x6e, 0x72,
	0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x67, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x62, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x30, 0x0a, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x62, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x87, 0x02, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x62, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x30, 0x12, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x62, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x62, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4c, 0x62, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x12, 0x61, 0x0a, 0x11, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x62, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4c, 0x62, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x62, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0xc3,
	0x01, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4c, 0x62, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73,
	0x6b, 0x12, 0x61, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x62, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x62, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x62, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x22, 0x6a, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x62, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x36, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x30, 0x0a, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x62, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0xf5, 0x01, 0x0a, 0x23, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x14, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4c, 0x62, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x4d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x70, 0x62, 0x3b, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x70, 0x62, 0xaa,
	0x02, 0x1f, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x56,
	0x31, 0xca, 0x02, 0x1f, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5c, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x5c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x5c, 0x56, 0x31, 0xea, 0x02, 0x22, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_networkservices_v1_service_lb_policy_proto_rawDescOnce sync.Once
	file_google_cloud_networkservices_v1_service_lb_policy_proto_rawDescData = file_google_cloud_networkservices_v1_service_lb_policy_proto_rawDesc
)

func file_google_cloud_networkservices_v1_service_lb_policy_proto_rawDescGZIP() []byte {
	file_google_cloud_networkservices_v1_service_lb_policy_proto_rawDescOnce.Do(func() {
		file_google_cloud_networkservices_v1_service_lb_policy_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_networkservices_v1_service_lb_policy_proto_rawDescData)
	})
	return file_google_cloud_networkservices_v1_service_lb_policy_proto_rawDescData
}

var file_google_cloud_networkservices_v1_service_lb_policy_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_google_cloud_networkservices_v1_service_lb_policy_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_google_cloud_networkservices_v1_service_lb_policy_proto_goTypes = []any{
	(ServiceLbPolicy_LoadBalancingAlgorithm)(0), // 0: google.cloud.networkservices.v1.ServiceLbPolicy.LoadBalancingAlgorithm
	(*ServiceLbPolicy)(nil),                     // 1: google.cloud.networkservices.v1.ServiceLbPolicy
	(*ListServiceLbPoliciesRequest)(nil),        // 2: google.cloud.networkservices.v1.ListServiceLbPoliciesRequest
	(*ListServiceLbPoliciesResponse)(nil),       // 3: google.cloud.networkservices.v1.ListServiceLbPoliciesResponse
	(*GetServiceLbPolicyRequest)(nil),           // 4: google.cloud.networkservices.v1.GetServiceLbPolicyRequest
	(*CreateServiceLbPolicyRequest)(nil),        // 5: google.cloud.networkservices.v1.CreateServiceLbPolicyRequest
	(*UpdateServiceLbPolicyRequest)(nil),        // 6: google.cloud.networkservices.v1.UpdateServiceLbPolicyRequest
	(*DeleteServiceLbPolicyRequest)(nil),        // 7: google.cloud.networkservices.v1.DeleteServiceLbPolicyRequest
	(*ServiceLbPolicy_AutoCapacityDrain)(nil),   // 8: google.cloud.networkservices.v1.ServiceLbPolicy.AutoCapacityDrain
	(*ServiceLbPolicy_FailoverConfig)(nil),      // 9: google.cloud.networkservices.v1.ServiceLbPolicy.FailoverConfig
	nil,                                         // 10: google.cloud.networkservices.v1.ServiceLbPolicy.LabelsEntry
	(*timestamppb.Timestamp)(nil),               // 11: google.protobuf.Timestamp
	(*fieldmaskpb.FieldMask)(nil),               // 12: google.protobuf.FieldMask
}
var file_google_cloud_networkservices_v1_service_lb_policy_proto_depIdxs = []int32{
	11, // 0: google.cloud.networkservices.v1.ServiceLbPolicy.create_time:type_name -> google.protobuf.Timestamp
	11, // 1: google.cloud.networkservices.v1.ServiceLbPolicy.update_time:type_name -> google.protobuf.Timestamp
	10, // 2: google.cloud.networkservices.v1.ServiceLbPolicy.labels:type_name -> google.cloud.networkservices.v1.ServiceLbPolicy.LabelsEntry
	0,  // 3: google.cloud.networkservices.v1.ServiceLbPolicy.load_balancing_algorithm:type_name -> google.cloud.networkservices.v1.ServiceLbPolicy.LoadBalancingAlgorithm
	8,  // 4: google.cloud.networkservices.v1.ServiceLbPolicy.auto_capacity_drain:type_name -> google.cloud.networkservices.v1.ServiceLbPolicy.AutoCapacityDrain
	9,  // 5: google.cloud.networkservices.v1.ServiceLbPolicy.failover_config:type_name -> google.cloud.networkservices.v1.ServiceLbPolicy.FailoverConfig
	1,  // 6: google.cloud.networkservices.v1.ListServiceLbPoliciesResponse.service_lb_policies:type_name -> google.cloud.networkservices.v1.ServiceLbPolicy
	1,  // 7: google.cloud.networkservices.v1.CreateServiceLbPolicyRequest.service_lb_policy:type_name -> google.cloud.networkservices.v1.ServiceLbPolicy
	12, // 8: google.cloud.networkservices.v1.UpdateServiceLbPolicyRequest.update_mask:type_name -> google.protobuf.FieldMask
	1,  // 9: google.cloud.networkservices.v1.UpdateServiceLbPolicyRequest.service_lb_policy:type_name -> google.cloud.networkservices.v1.ServiceLbPolicy
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_google_cloud_networkservices_v1_service_lb_policy_proto_init() }
func file_google_cloud_networkservices_v1_service_lb_policy_proto_init() {
	if File_google_cloud_networkservices_v1_service_lb_policy_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_networkservices_v1_service_lb_policy_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_cloud_networkservices_v1_service_lb_policy_proto_goTypes,
		DependencyIndexes: file_google_cloud_networkservices_v1_service_lb_policy_proto_depIdxs,
		EnumInfos:         file_google_cloud_networkservices_v1_service_lb_policy_proto_enumTypes,
		MessageInfos:      file_google_cloud_networkservices_v1_service_lb_policy_proto_msgTypes,
	}.Build()
	File_google_cloud_networkservices_v1_service_lb_policy_proto = out.File
	file_google_cloud_networkservices_v1_service_lb_policy_proto_rawDesc = nil
	file_google_cloud_networkservices_v1_service_lb_policy_proto_goTypes = nil
	file_google_cloud_networkservices_v1_service_lb_policy_proto_depIdxs = nil
}
