// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/oracledatabase/v1/oracledatabase.proto

package oracledatabasepb

import (
	context "context"

	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OracleDatabase_ListCloudExadataInfrastructures_FullMethodName     = "/google.cloud.oracledatabase.v1.OracleDatabase/ListCloudExadataInfrastructures"
	OracleDatabase_GetCloudExadataInfrastructure_FullMethodName       = "/google.cloud.oracledatabase.v1.OracleDatabase/GetCloudExadataInfrastructure"
	OracleDatabase_CreateCloudExadataInfrastructure_FullMethodName    = "/google.cloud.oracledatabase.v1.OracleDatabase/CreateCloudExadataInfrastructure"
	OracleDatabase_DeleteCloudExadataInfrastructure_FullMethodName    = "/google.cloud.oracledatabase.v1.OracleDatabase/DeleteCloudExadataInfrastructure"
	OracleDatabase_ListCloudVmClusters_FullMethodName                 = "/google.cloud.oracledatabase.v1.OracleDatabase/ListCloudVmClusters"
	OracleDatabase_GetCloudVmCluster_FullMethodName                   = "/google.cloud.oracledatabase.v1.OracleDatabase/GetCloudVmCluster"
	OracleDatabase_CreateCloudVmCluster_FullMethodName                = "/google.cloud.oracledatabase.v1.OracleDatabase/CreateCloudVmCluster"
	OracleDatabase_DeleteCloudVmCluster_FullMethodName                = "/google.cloud.oracledatabase.v1.OracleDatabase/DeleteCloudVmCluster"
	OracleDatabase_ListEntitlements_FullMethodName                    = "/google.cloud.oracledatabase.v1.OracleDatabase/ListEntitlements"
	OracleDatabase_ListDbServers_FullMethodName                       = "/google.cloud.oracledatabase.v1.OracleDatabase/ListDbServers"
	OracleDatabase_ListDbNodes_FullMethodName                         = "/google.cloud.oracledatabase.v1.OracleDatabase/ListDbNodes"
	OracleDatabase_ListGiVersions_FullMethodName                      = "/google.cloud.oracledatabase.v1.OracleDatabase/ListGiVersions"
	OracleDatabase_ListDbSystemShapes_FullMethodName                  = "/google.cloud.oracledatabase.v1.OracleDatabase/ListDbSystemShapes"
	OracleDatabase_ListAutonomousDatabases_FullMethodName             = "/google.cloud.oracledatabase.v1.OracleDatabase/ListAutonomousDatabases"
	OracleDatabase_GetAutonomousDatabase_FullMethodName               = "/google.cloud.oracledatabase.v1.OracleDatabase/GetAutonomousDatabase"
	OracleDatabase_CreateAutonomousDatabase_FullMethodName            = "/google.cloud.oracledatabase.v1.OracleDatabase/CreateAutonomousDatabase"
	OracleDatabase_DeleteAutonomousDatabase_FullMethodName            = "/google.cloud.oracledatabase.v1.OracleDatabase/DeleteAutonomousDatabase"
	OracleDatabase_RestoreAutonomousDatabase_FullMethodName           = "/google.cloud.oracledatabase.v1.OracleDatabase/RestoreAutonomousDatabase"
	OracleDatabase_GenerateAutonomousDatabaseWallet_FullMethodName    = "/google.cloud.oracledatabase.v1.OracleDatabase/GenerateAutonomousDatabaseWallet"
	OracleDatabase_ListAutonomousDbVersions_FullMethodName            = "/google.cloud.oracledatabase.v1.OracleDatabase/ListAutonomousDbVersions"
	OracleDatabase_ListAutonomousDatabaseCharacterSets_FullMethodName = "/google.cloud.oracledatabase.v1.OracleDatabase/ListAutonomousDatabaseCharacterSets"
	OracleDatabase_ListAutonomousDatabaseBackups_FullMethodName       = "/google.cloud.oracledatabase.v1.OracleDatabase/ListAutonomousDatabaseBackups"
	OracleDatabase_StopAutonomousDatabase_FullMethodName              = "/google.cloud.oracledatabase.v1.OracleDatabase/StopAutonomousDatabase"
	OracleDatabase_StartAutonomousDatabase_FullMethodName             = "/google.cloud.oracledatabase.v1.OracleDatabase/StartAutonomousDatabase"
	OracleDatabase_RestartAutonomousDatabase_FullMethodName           = "/google.cloud.oracledatabase.v1.OracleDatabase/RestartAutonomousDatabase"
)

// OracleDatabaseClient is the client API for OracleDatabase service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OracleDatabaseClient interface {
	// Lists Exadata Infrastructures in a given project and location.
	ListCloudExadataInfrastructures(ctx context.Context, in *ListCloudExadataInfrastructuresRequest, opts ...grpc.CallOption) (*ListCloudExadataInfrastructuresResponse, error)
	// Gets details of a single Exadata Infrastructure.
	GetCloudExadataInfrastructure(ctx context.Context, in *GetCloudExadataInfrastructureRequest, opts ...grpc.CallOption) (*CloudExadataInfrastructure, error)
	// Creates a new Exadata Infrastructure in a given project and location.
	CreateCloudExadataInfrastructure(ctx context.Context, in *CreateCloudExadataInfrastructureRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single Exadata Infrastructure.
	DeleteCloudExadataInfrastructure(ctx context.Context, in *DeleteCloudExadataInfrastructureRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists the VM Clusters in a given project and location.
	ListCloudVmClusters(ctx context.Context, in *ListCloudVmClustersRequest, opts ...grpc.CallOption) (*ListCloudVmClustersResponse, error)
	// Gets details of a single VM Cluster.
	GetCloudVmCluster(ctx context.Context, in *GetCloudVmClusterRequest, opts ...grpc.CallOption) (*CloudVmCluster, error)
	// Creates a new VM Cluster in a given project and location.
	CreateCloudVmCluster(ctx context.Context, in *CreateCloudVmClusterRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single VM Cluster.
	DeleteCloudVmCluster(ctx context.Context, in *DeleteCloudVmClusterRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists the entitlements in a given project.
	ListEntitlements(ctx context.Context, in *ListEntitlementsRequest, opts ...grpc.CallOption) (*ListEntitlementsResponse, error)
	// Lists the database servers of an Exadata Infrastructure instance.
	ListDbServers(ctx context.Context, in *ListDbServersRequest, opts ...grpc.CallOption) (*ListDbServersResponse, error)
	// Lists the database nodes of a VM Cluster.
	ListDbNodes(ctx context.Context, in *ListDbNodesRequest, opts ...grpc.CallOption) (*ListDbNodesResponse, error)
	// Lists all the valid Oracle Grid Infrastructure (GI) versions for the given
	// project and location.
	ListGiVersions(ctx context.Context, in *ListGiVersionsRequest, opts ...grpc.CallOption) (*ListGiVersionsResponse, error)
	// Lists the database system shapes available for the project and location.
	ListDbSystemShapes(ctx context.Context, in *ListDbSystemShapesRequest, opts ...grpc.CallOption) (*ListDbSystemShapesResponse, error)
	// Lists the Autonomous Databases in a given project and location.
	ListAutonomousDatabases(ctx context.Context, in *ListAutonomousDatabasesRequest, opts ...grpc.CallOption) (*ListAutonomousDatabasesResponse, error)
	// Gets the details of a single Autonomous Database.
	GetAutonomousDatabase(ctx context.Context, in *GetAutonomousDatabaseRequest, opts ...grpc.CallOption) (*AutonomousDatabase, error)
	// Creates a new Autonomous Database in a given project and location.
	CreateAutonomousDatabase(ctx context.Context, in *CreateAutonomousDatabaseRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single Autonomous Database.
	DeleteAutonomousDatabase(ctx context.Context, in *DeleteAutonomousDatabaseRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Restores a single Autonomous Database.
	RestoreAutonomousDatabase(ctx context.Context, in *RestoreAutonomousDatabaseRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Generates a wallet for an Autonomous Database.
	GenerateAutonomousDatabaseWallet(ctx context.Context, in *GenerateAutonomousDatabaseWalletRequest, opts ...grpc.CallOption) (*GenerateAutonomousDatabaseWalletResponse, error)
	// Lists all the available Autonomous Database versions for a project and
	// location.
	ListAutonomousDbVersions(ctx context.Context, in *ListAutonomousDbVersionsRequest, opts ...grpc.CallOption) (*ListAutonomousDbVersionsResponse, error)
	// Lists Autonomous Database Character Sets in a given project and location.
	ListAutonomousDatabaseCharacterSets(ctx context.Context, in *ListAutonomousDatabaseCharacterSetsRequest, opts ...grpc.CallOption) (*ListAutonomousDatabaseCharacterSetsResponse, error)
	// Lists the long-term and automatic backups of an Autonomous Database.
	ListAutonomousDatabaseBackups(ctx context.Context, in *ListAutonomousDatabaseBackupsRequest, opts ...grpc.CallOption) (*ListAutonomousDatabaseBackupsResponse, error)
	// Stops an Autonomous Database.
	StopAutonomousDatabase(ctx context.Context, in *StopAutonomousDatabaseRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Starts an Autonomous Database.
	StartAutonomousDatabase(ctx context.Context, in *StartAutonomousDatabaseRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Restarts an Autonomous Database.
	RestartAutonomousDatabase(ctx context.Context, in *RestartAutonomousDatabaseRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type oracleDatabaseClient struct {
	cc grpc.ClientConnInterface
}

func NewOracleDatabaseClient(cc grpc.ClientConnInterface) OracleDatabaseClient {
	return &oracleDatabaseClient{cc}
}

func (c *oracleDatabaseClient) ListCloudExadataInfrastructures(ctx context.Context, in *ListCloudExadataInfrastructuresRequest, opts ...grpc.CallOption) (*ListCloudExadataInfrastructuresResponse, error) {
	out := new(ListCloudExadataInfrastructuresResponse)
	err := c.cc.Invoke(ctx, OracleDatabase_ListCloudExadataInfrastructures_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oracleDatabaseClient) GetCloudExadataInfrastructure(ctx context.Context, in *GetCloudExadataInfrastructureRequest, opts ...grpc.CallOption) (*CloudExadataInfrastructure, error) {
	out := new(CloudExadataInfrastructure)
	err := c.cc.Invoke(ctx, OracleDatabase_GetCloudExadataInfrastructure_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oracleDatabaseClient) CreateCloudExadataInfrastructure(ctx context.Context, in *CreateCloudExadataInfrastructureRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, OracleDatabase_CreateCloudExadataInfrastructure_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oracleDatabaseClient) DeleteCloudExadataInfrastructure(ctx context.Context, in *DeleteCloudExadataInfrastructureRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, OracleDatabase_DeleteCloudExadataInfrastructure_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oracleDatabaseClient) ListCloudVmClusters(ctx context.Context, in *ListCloudVmClustersRequest, opts ...grpc.CallOption) (*ListCloudVmClustersResponse, error) {
	out := new(ListCloudVmClustersResponse)
	err := c.cc.Invoke(ctx, OracleDatabase_ListCloudVmClusters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oracleDatabaseClient) GetCloudVmCluster(ctx context.Context, in *GetCloudVmClusterRequest, opts ...grpc.CallOption) (*CloudVmCluster, error) {
	out := new(CloudVmCluster)
	err := c.cc.Invoke(ctx, OracleDatabase_GetCloudVmCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oracleDatabaseClient) CreateCloudVmCluster(ctx context.Context, in *CreateCloudVmClusterRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, OracleDatabase_CreateCloudVmCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oracleDatabaseClient) DeleteCloudVmCluster(ctx context.Context, in *DeleteCloudVmClusterRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, OracleDatabase_DeleteCloudVmCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oracleDatabaseClient) ListEntitlements(ctx context.Context, in *ListEntitlementsRequest, opts ...grpc.CallOption) (*ListEntitlementsResponse, error) {
	out := new(ListEntitlementsResponse)
	err := c.cc.Invoke(ctx, OracleDatabase_ListEntitlements_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oracleDatabaseClient) ListDbServers(ctx context.Context, in *ListDbServersRequest, opts ...grpc.CallOption) (*ListDbServersResponse, error) {
	out := new(ListDbServersResponse)
	err := c.cc.Invoke(ctx, OracleDatabase_ListDbServers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oracleDatabaseClient) ListDbNodes(ctx context.Context, in *ListDbNodesRequest, opts ...grpc.CallOption) (*ListDbNodesResponse, error) {
	out := new(ListDbNodesResponse)
	err := c.cc.Invoke(ctx, OracleDatabase_ListDbNodes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oracleDatabaseClient) ListGiVersions(ctx context.Context, in *ListGiVersionsRequest, opts ...grpc.CallOption) (*ListGiVersionsResponse, error) {
	out := new(ListGiVersionsResponse)
	err := c.cc.Invoke(ctx, OracleDatabase_ListGiVersions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oracleDatabaseClient) ListDbSystemShapes(ctx context.Context, in *ListDbSystemShapesRequest, opts ...grpc.CallOption) (*ListDbSystemShapesResponse, error) {
	out := new(ListDbSystemShapesResponse)
	err := c.cc.Invoke(ctx, OracleDatabase_ListDbSystemShapes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oracleDatabaseClient) ListAutonomousDatabases(ctx context.Context, in *ListAutonomousDatabasesRequest, opts ...grpc.CallOption) (*ListAutonomousDatabasesResponse, error) {
	out := new(ListAutonomousDatabasesResponse)
	err := c.cc.Invoke(ctx, OracleDatabase_ListAutonomousDatabases_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oracleDatabaseClient) GetAutonomousDatabase(ctx context.Context, in *GetAutonomousDatabaseRequest, opts ...grpc.CallOption) (*AutonomousDatabase, error) {
	out := new(AutonomousDatabase)
	err := c.cc.Invoke(ctx, OracleDatabase_GetAutonomousDatabase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oracleDatabaseClient) CreateAutonomousDatabase(ctx context.Context, in *CreateAutonomousDatabaseRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, OracleDatabase_CreateAutonomousDatabase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oracleDatabaseClient) DeleteAutonomousDatabase(ctx context.Context, in *DeleteAutonomousDatabaseRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, OracleDatabase_DeleteAutonomousDatabase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oracleDatabaseClient) RestoreAutonomousDatabase(ctx context.Context, in *RestoreAutonomousDatabaseRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, OracleDatabase_RestoreAutonomousDatabase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oracleDatabaseClient) GenerateAutonomousDatabaseWallet(ctx context.Context, in *GenerateAutonomousDatabaseWalletRequest, opts ...grpc.CallOption) (*GenerateAutonomousDatabaseWalletResponse, error) {
	out := new(GenerateAutonomousDatabaseWalletResponse)
	err := c.cc.Invoke(ctx, OracleDatabase_GenerateAutonomousDatabaseWallet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oracleDatabaseClient) ListAutonomousDbVersions(ctx context.Context, in *ListAutonomousDbVersionsRequest, opts ...grpc.CallOption) (*ListAutonomousDbVersionsResponse, error) {
	out := new(ListAutonomousDbVersionsResponse)
	err := c.cc.Invoke(ctx, OracleDatabase_ListAutonomousDbVersions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oracleDatabaseClient) ListAutonomousDatabaseCharacterSets(ctx context.Context, in *ListAutonomousDatabaseCharacterSetsRequest, opts ...grpc.CallOption) (*ListAutonomousDatabaseCharacterSetsResponse, error) {
	out := new(ListAutonomousDatabaseCharacterSetsResponse)
	err := c.cc.Invoke(ctx, OracleDatabase_ListAutonomousDatabaseCharacterSets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oracleDatabaseClient) ListAutonomousDatabaseBackups(ctx context.Context, in *ListAutonomousDatabaseBackupsRequest, opts ...grpc.CallOption) (*ListAutonomousDatabaseBackupsResponse, error) {
	out := new(ListAutonomousDatabaseBackupsResponse)
	err := c.cc.Invoke(ctx, OracleDatabase_ListAutonomousDatabaseBackups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oracleDatabaseClient) StopAutonomousDatabase(ctx context.Context, in *StopAutonomousDatabaseRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, OracleDatabase_StopAutonomousDatabase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oracleDatabaseClient) StartAutonomousDatabase(ctx context.Context, in *StartAutonomousDatabaseRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, OracleDatabase_StartAutonomousDatabase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oracleDatabaseClient) RestartAutonomousDatabase(ctx context.Context, in *RestartAutonomousDatabaseRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, OracleDatabase_RestartAutonomousDatabase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OracleDatabaseServer is the server API for OracleDatabase service.
// All implementations should embed UnimplementedOracleDatabaseServer
// for forward compatibility
type OracleDatabaseServer interface {
	// Lists Exadata Infrastructures in a given project and location.
	ListCloudExadataInfrastructures(context.Context, *ListCloudExadataInfrastructuresRequest) (*ListCloudExadataInfrastructuresResponse, error)
	// Gets details of a single Exadata Infrastructure.
	GetCloudExadataInfrastructure(context.Context, *GetCloudExadataInfrastructureRequest) (*CloudExadataInfrastructure, error)
	// Creates a new Exadata Infrastructure in a given project and location.
	CreateCloudExadataInfrastructure(context.Context, *CreateCloudExadataInfrastructureRequest) (*longrunningpb.Operation, error)
	// Deletes a single Exadata Infrastructure.
	DeleteCloudExadataInfrastructure(context.Context, *DeleteCloudExadataInfrastructureRequest) (*longrunningpb.Operation, error)
	// Lists the VM Clusters in a given project and location.
	ListCloudVmClusters(context.Context, *ListCloudVmClustersRequest) (*ListCloudVmClustersResponse, error)
	// Gets details of a single VM Cluster.
	GetCloudVmCluster(context.Context, *GetCloudVmClusterRequest) (*CloudVmCluster, error)
	// Creates a new VM Cluster in a given project and location.
	CreateCloudVmCluster(context.Context, *CreateCloudVmClusterRequest) (*longrunningpb.Operation, error)
	// Deletes a single VM Cluster.
	DeleteCloudVmCluster(context.Context, *DeleteCloudVmClusterRequest) (*longrunningpb.Operation, error)
	// Lists the entitlements in a given project.
	ListEntitlements(context.Context, *ListEntitlementsRequest) (*ListEntitlementsResponse, error)
	// Lists the database servers of an Exadata Infrastructure instance.
	ListDbServers(context.Context, *ListDbServersRequest) (*ListDbServersResponse, error)
	// Lists the database nodes of a VM Cluster.
	ListDbNodes(context.Context, *ListDbNodesRequest) (*ListDbNodesResponse, error)
	// Lists all the valid Oracle Grid Infrastructure (GI) versions for the given
	// project and location.
	ListGiVersions(context.Context, *ListGiVersionsRequest) (*ListGiVersionsResponse, error)
	// Lists the database system shapes available for the project and location.
	ListDbSystemShapes(context.Context, *ListDbSystemShapesRequest) (*ListDbSystemShapesResponse, error)
	// Lists the Autonomous Databases in a given project and location.
	ListAutonomousDatabases(context.Context, *ListAutonomousDatabasesRequest) (*ListAutonomousDatabasesResponse, error)
	// Gets the details of a single Autonomous Database.
	GetAutonomousDatabase(context.Context, *GetAutonomousDatabaseRequest) (*AutonomousDatabase, error)
	// Creates a new Autonomous Database in a given project and location.
	CreateAutonomousDatabase(context.Context, *CreateAutonomousDatabaseRequest) (*longrunningpb.Operation, error)
	// Deletes a single Autonomous Database.
	DeleteAutonomousDatabase(context.Context, *DeleteAutonomousDatabaseRequest) (*longrunningpb.Operation, error)
	// Restores a single Autonomous Database.
	RestoreAutonomousDatabase(context.Context, *RestoreAutonomousDatabaseRequest) (*longrunningpb.Operation, error)
	// Generates a wallet for an Autonomous Database.
	GenerateAutonomousDatabaseWallet(context.Context, *GenerateAutonomousDatabaseWalletRequest) (*GenerateAutonomousDatabaseWalletResponse, error)
	// Lists all the available Autonomous Database versions for a project and
	// location.
	ListAutonomousDbVersions(context.Context, *ListAutonomousDbVersionsRequest) (*ListAutonomousDbVersionsResponse, error)
	// Lists Autonomous Database Character Sets in a given project and location.
	ListAutonomousDatabaseCharacterSets(context.Context, *ListAutonomousDatabaseCharacterSetsRequest) (*ListAutonomousDatabaseCharacterSetsResponse, error)
	// Lists the long-term and automatic backups of an Autonomous Database.
	ListAutonomousDatabaseBackups(context.Context, *ListAutonomousDatabaseBackupsRequest) (*ListAutonomousDatabaseBackupsResponse, error)
	// Stops an Autonomous Database.
	StopAutonomousDatabase(context.Context, *StopAutonomousDatabaseRequest) (*longrunningpb.Operation, error)
	// Starts an Autonomous Database.
	StartAutonomousDatabase(context.Context, *StartAutonomousDatabaseRequest) (*longrunningpb.Operation, error)
	// Restarts an Autonomous Database.
	RestartAutonomousDatabase(context.Context, *RestartAutonomousDatabaseRequest) (*longrunningpb.Operation, error)
}

// UnimplementedOracleDatabaseServer should be embedded to have forward compatible implementations.
type UnimplementedOracleDatabaseServer struct {
}

func (UnimplementedOracleDatabaseServer) ListCloudExadataInfrastructures(context.Context, *ListCloudExadataInfrastructuresRequest) (*ListCloudExadataInfrastructuresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCloudExadataInfrastructures not implemented")
}
func (UnimplementedOracleDatabaseServer) GetCloudExadataInfrastructure(context.Context, *GetCloudExadataInfrastructureRequest) (*CloudExadataInfrastructure, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCloudExadataInfrastructure not implemented")
}
func (UnimplementedOracleDatabaseServer) CreateCloudExadataInfrastructure(context.Context, *CreateCloudExadataInfrastructureRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCloudExadataInfrastructure not implemented")
}
func (UnimplementedOracleDatabaseServer) DeleteCloudExadataInfrastructure(context.Context, *DeleteCloudExadataInfrastructureRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCloudExadataInfrastructure not implemented")
}
func (UnimplementedOracleDatabaseServer) ListCloudVmClusters(context.Context, *ListCloudVmClustersRequest) (*ListCloudVmClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCloudVmClusters not implemented")
}
func (UnimplementedOracleDatabaseServer) GetCloudVmCluster(context.Context, *GetCloudVmClusterRequest) (*CloudVmCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCloudVmCluster not implemented")
}
func (UnimplementedOracleDatabaseServer) CreateCloudVmCluster(context.Context, *CreateCloudVmClusterRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCloudVmCluster not implemented")
}
func (UnimplementedOracleDatabaseServer) DeleteCloudVmCluster(context.Context, *DeleteCloudVmClusterRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCloudVmCluster not implemented")
}
func (UnimplementedOracleDatabaseServer) ListEntitlements(context.Context, *ListEntitlementsRequest) (*ListEntitlementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEntitlements not implemented")
}
func (UnimplementedOracleDatabaseServer) ListDbServers(context.Context, *ListDbServersRequest) (*ListDbServersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDbServers not implemented")
}
func (UnimplementedOracleDatabaseServer) ListDbNodes(context.Context, *ListDbNodesRequest) (*ListDbNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDbNodes not implemented")
}
func (UnimplementedOracleDatabaseServer) ListGiVersions(context.Context, *ListGiVersionsRequest) (*ListGiVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGiVersions not implemented")
}
func (UnimplementedOracleDatabaseServer) ListDbSystemShapes(context.Context, *ListDbSystemShapesRequest) (*ListDbSystemShapesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDbSystemShapes not implemented")
}
func (UnimplementedOracleDatabaseServer) ListAutonomousDatabases(context.Context, *ListAutonomousDatabasesRequest) (*ListAutonomousDatabasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAutonomousDatabases not implemented")
}
func (UnimplementedOracleDatabaseServer) GetAutonomousDatabase(context.Context, *GetAutonomousDatabaseRequest) (*AutonomousDatabase, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAutonomousDatabase not implemented")
}
func (UnimplementedOracleDatabaseServer) CreateAutonomousDatabase(context.Context, *CreateAutonomousDatabaseRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAutonomousDatabase not implemented")
}
func (UnimplementedOracleDatabaseServer) DeleteAutonomousDatabase(context.Context, *DeleteAutonomousDatabaseRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAutonomousDatabase not implemented")
}
func (UnimplementedOracleDatabaseServer) RestoreAutonomousDatabase(context.Context, *RestoreAutonomousDatabaseRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreAutonomousDatabase not implemented")
}
func (UnimplementedOracleDatabaseServer) GenerateAutonomousDatabaseWallet(context.Context, *GenerateAutonomousDatabaseWalletRequest) (*GenerateAutonomousDatabaseWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateAutonomousDatabaseWallet not implemented")
}
func (UnimplementedOracleDatabaseServer) ListAutonomousDbVersions(context.Context, *ListAutonomousDbVersionsRequest) (*ListAutonomousDbVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAutonomousDbVersions not implemented")
}
func (UnimplementedOracleDatabaseServer) ListAutonomousDatabaseCharacterSets(context.Context, *ListAutonomousDatabaseCharacterSetsRequest) (*ListAutonomousDatabaseCharacterSetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAutonomousDatabaseCharacterSets not implemented")
}
func (UnimplementedOracleDatabaseServer) ListAutonomousDatabaseBackups(context.Context, *ListAutonomousDatabaseBackupsRequest) (*ListAutonomousDatabaseBackupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAutonomousDatabaseBackups not implemented")
}
func (UnimplementedOracleDatabaseServer) StopAutonomousDatabase(context.Context, *StopAutonomousDatabaseRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopAutonomousDatabase not implemented")
}
func (UnimplementedOracleDatabaseServer) StartAutonomousDatabase(context.Context, *StartAutonomousDatabaseRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartAutonomousDatabase not implemented")
}
func (UnimplementedOracleDatabaseServer) RestartAutonomousDatabase(context.Context, *RestartAutonomousDatabaseRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartAutonomousDatabase not implemented")
}

// UnsafeOracleDatabaseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OracleDatabaseServer will
// result in compilation errors.
type UnsafeOracleDatabaseServer interface {
	mustEmbedUnimplementedOracleDatabaseServer()
}

func RegisterOracleDatabaseServer(s grpc.ServiceRegistrar, srv OracleDatabaseServer) {
	s.RegisterService(&OracleDatabase_ServiceDesc, srv)
}

func _OracleDatabase_ListCloudExadataInfrastructures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCloudExadataInfrastructuresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OracleDatabaseServer).ListCloudExadataInfrastructures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OracleDatabase_ListCloudExadataInfrastructures_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OracleDatabaseServer).ListCloudExadataInfrastructures(ctx, req.(*ListCloudExadataInfrastructuresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OracleDatabase_GetCloudExadataInfrastructure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCloudExadataInfrastructureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OracleDatabaseServer).GetCloudExadataInfrastructure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OracleDatabase_GetCloudExadataInfrastructure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OracleDatabaseServer).GetCloudExadataInfrastructure(ctx, req.(*GetCloudExadataInfrastructureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OracleDatabase_CreateCloudExadataInfrastructure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCloudExadataInfrastructureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OracleDatabaseServer).CreateCloudExadataInfrastructure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OracleDatabase_CreateCloudExadataInfrastructure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OracleDatabaseServer).CreateCloudExadataInfrastructure(ctx, req.(*CreateCloudExadataInfrastructureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OracleDatabase_DeleteCloudExadataInfrastructure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCloudExadataInfrastructureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OracleDatabaseServer).DeleteCloudExadataInfrastructure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OracleDatabase_DeleteCloudExadataInfrastructure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OracleDatabaseServer).DeleteCloudExadataInfrastructure(ctx, req.(*DeleteCloudExadataInfrastructureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OracleDatabase_ListCloudVmClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCloudVmClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OracleDatabaseServer).ListCloudVmClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OracleDatabase_ListCloudVmClusters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OracleDatabaseServer).ListCloudVmClusters(ctx, req.(*ListCloudVmClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OracleDatabase_GetCloudVmCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCloudVmClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OracleDatabaseServer).GetCloudVmCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OracleDatabase_GetCloudVmCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OracleDatabaseServer).GetCloudVmCluster(ctx, req.(*GetCloudVmClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OracleDatabase_CreateCloudVmCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCloudVmClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OracleDatabaseServer).CreateCloudVmCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OracleDatabase_CreateCloudVmCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OracleDatabaseServer).CreateCloudVmCluster(ctx, req.(*CreateCloudVmClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OracleDatabase_DeleteCloudVmCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCloudVmClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OracleDatabaseServer).DeleteCloudVmCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OracleDatabase_DeleteCloudVmCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OracleDatabaseServer).DeleteCloudVmCluster(ctx, req.(*DeleteCloudVmClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OracleDatabase_ListEntitlements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEntitlementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OracleDatabaseServer).ListEntitlements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OracleDatabase_ListEntitlements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OracleDatabaseServer).ListEntitlements(ctx, req.(*ListEntitlementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OracleDatabase_ListDbServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDbServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OracleDatabaseServer).ListDbServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OracleDatabase_ListDbServers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OracleDatabaseServer).ListDbServers(ctx, req.(*ListDbServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OracleDatabase_ListDbNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDbNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OracleDatabaseServer).ListDbNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OracleDatabase_ListDbNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OracleDatabaseServer).ListDbNodes(ctx, req.(*ListDbNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OracleDatabase_ListGiVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGiVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OracleDatabaseServer).ListGiVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OracleDatabase_ListGiVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OracleDatabaseServer).ListGiVersions(ctx, req.(*ListGiVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OracleDatabase_ListDbSystemShapes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDbSystemShapesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OracleDatabaseServer).ListDbSystemShapes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OracleDatabase_ListDbSystemShapes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OracleDatabaseServer).ListDbSystemShapes(ctx, req.(*ListDbSystemShapesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OracleDatabase_ListAutonomousDatabases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAutonomousDatabasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OracleDatabaseServer).ListAutonomousDatabases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OracleDatabase_ListAutonomousDatabases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OracleDatabaseServer).ListAutonomousDatabases(ctx, req.(*ListAutonomousDatabasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OracleDatabase_GetAutonomousDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAutonomousDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OracleDatabaseServer).GetAutonomousDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OracleDatabase_GetAutonomousDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OracleDatabaseServer).GetAutonomousDatabase(ctx, req.(*GetAutonomousDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OracleDatabase_CreateAutonomousDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAutonomousDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OracleDatabaseServer).CreateAutonomousDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OracleDatabase_CreateAutonomousDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OracleDatabaseServer).CreateAutonomousDatabase(ctx, req.(*CreateAutonomousDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OracleDatabase_DeleteAutonomousDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAutonomousDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OracleDatabaseServer).DeleteAutonomousDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OracleDatabase_DeleteAutonomousDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OracleDatabaseServer).DeleteAutonomousDatabase(ctx, req.(*DeleteAutonomousDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OracleDatabase_RestoreAutonomousDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreAutonomousDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OracleDatabaseServer).RestoreAutonomousDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OracleDatabase_RestoreAutonomousDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OracleDatabaseServer).RestoreAutonomousDatabase(ctx, req.(*RestoreAutonomousDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OracleDatabase_GenerateAutonomousDatabaseWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateAutonomousDatabaseWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OracleDatabaseServer).GenerateAutonomousDatabaseWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OracleDatabase_GenerateAutonomousDatabaseWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OracleDatabaseServer).GenerateAutonomousDatabaseWallet(ctx, req.(*GenerateAutonomousDatabaseWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OracleDatabase_ListAutonomousDbVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAutonomousDbVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OracleDatabaseServer).ListAutonomousDbVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OracleDatabase_ListAutonomousDbVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OracleDatabaseServer).ListAutonomousDbVersions(ctx, req.(*ListAutonomousDbVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OracleDatabase_ListAutonomousDatabaseCharacterSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAutonomousDatabaseCharacterSetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OracleDatabaseServer).ListAutonomousDatabaseCharacterSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OracleDatabase_ListAutonomousDatabaseCharacterSets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OracleDatabaseServer).ListAutonomousDatabaseCharacterSets(ctx, req.(*ListAutonomousDatabaseCharacterSetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OracleDatabase_ListAutonomousDatabaseBackups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAutonomousDatabaseBackupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OracleDatabaseServer).ListAutonomousDatabaseBackups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OracleDatabase_ListAutonomousDatabaseBackups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OracleDatabaseServer).ListAutonomousDatabaseBackups(ctx, req.(*ListAutonomousDatabaseBackupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OracleDatabase_StopAutonomousDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopAutonomousDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OracleDatabaseServer).StopAutonomousDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OracleDatabase_StopAutonomousDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OracleDatabaseServer).StopAutonomousDatabase(ctx, req.(*StopAutonomousDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OracleDatabase_StartAutonomousDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartAutonomousDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OracleDatabaseServer).StartAutonomousDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OracleDatabase_StartAutonomousDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OracleDatabaseServer).StartAutonomousDatabase(ctx, req.(*StartAutonomousDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OracleDatabase_RestartAutonomousDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartAutonomousDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OracleDatabaseServer).RestartAutonomousDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OracleDatabase_RestartAutonomousDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OracleDatabaseServer).RestartAutonomousDatabase(ctx, req.(*RestartAutonomousDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OracleDatabase_ServiceDesc is the grpc.ServiceDesc for OracleDatabase service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OracleDatabase_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.oracledatabase.v1.OracleDatabase",
	HandlerType: (*OracleDatabaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCloudExadataInfrastructures",
			Handler:    _OracleDatabase_ListCloudExadataInfrastructures_Handler,
		},
		{
			MethodName: "GetCloudExadataInfrastructure",
			Handler:    _OracleDatabase_GetCloudExadataInfrastructure_Handler,
		},
		{
			MethodName: "CreateCloudExadataInfrastructure",
			Handler:    _OracleDatabase_CreateCloudExadataInfrastructure_Handler,
		},
		{
			MethodName: "DeleteCloudExadataInfrastructure",
			Handler:    _OracleDatabase_DeleteCloudExadataInfrastructure_Handler,
		},
		{
			MethodName: "ListCloudVmClusters",
			Handler:    _OracleDatabase_ListCloudVmClusters_Handler,
		},
		{
			MethodName: "GetCloudVmCluster",
			Handler:    _OracleDatabase_GetCloudVmCluster_Handler,
		},
		{
			MethodName: "CreateCloudVmCluster",
			Handler:    _OracleDatabase_CreateCloudVmCluster_Handler,
		},
		{
			MethodName: "DeleteCloudVmCluster",
			Handler:    _OracleDatabase_DeleteCloudVmCluster_Handler,
		},
		{
			MethodName: "ListEntitlements",
			Handler:    _OracleDatabase_ListEntitlements_Handler,
		},
		{
			MethodName: "ListDbServers",
			Handler:    _OracleDatabase_ListDbServers_Handler,
		},
		{
			MethodName: "ListDbNodes",
			Handler:    _OracleDatabase_ListDbNodes_Handler,
		},
		{
			MethodName: "ListGiVersions",
			Handler:    _OracleDatabase_ListGiVersions_Handler,
		},
		{
			MethodName: "ListDbSystemShapes",
			Handler:    _OracleDatabase_ListDbSystemShapes_Handler,
		},
		{
			MethodName: "ListAutonomousDatabases",
			Handler:    _OracleDatabase_ListAutonomousDatabases_Handler,
		},
		{
			MethodName: "GetAutonomousDatabase",
			Handler:    _OracleDatabase_GetAutonomousDatabase_Handler,
		},
		{
			MethodName: "CreateAutonomousDatabase",
			Handler:    _OracleDatabase_CreateAutonomousDatabase_Handler,
		},
		{
			MethodName: "DeleteAutonomousDatabase",
			Handler:    _OracleDatabase_DeleteAutonomousDatabase_Handler,
		},
		{
			MethodName: "RestoreAutonomousDatabase",
			Handler:    _OracleDatabase_RestoreAutonomousDatabase_Handler,
		},
		{
			MethodName: "GenerateAutonomousDatabaseWallet",
			Handler:    _OracleDatabase_GenerateAutonomousDatabaseWallet_Handler,
		},
		{
			MethodName: "ListAutonomousDbVersions",
			Handler:    _OracleDatabase_ListAutonomousDbVersions_Handler,
		},
		{
			MethodName: "ListAutonomousDatabaseCharacterSets",
			Handler:    _OracleDatabase_ListAutonomousDatabaseCharacterSets_Handler,
		},
		{
			MethodName: "ListAutonomousDatabaseBackups",
			Handler:    _OracleDatabase_ListAutonomousDatabaseBackups_Handler,
		},
		{
			MethodName: "StopAutonomousDatabase",
			Handler:    _OracleDatabase_StopAutonomousDatabase_Handler,
		},
		{
			MethodName: "StartAutonomousDatabase",
			Handler:    _OracleDatabase_StartAutonomousDatabase_Handler,
		},
		{
			MethodName: "RestartAutonomousDatabase",
			Handler:    _OracleDatabase_RestartAutonomousDatabase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/oracledatabase/v1/oracledatabase.proto",
}
