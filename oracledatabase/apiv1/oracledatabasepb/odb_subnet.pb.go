// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.7
// source: google/cloud/oracledatabase/v1/odb_subnet.proto

package oracledatabasepb

import (
	reflect "reflect"
	sync "sync"

	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Purpose available for the subnet.
type OdbSubnet_Purpose int32

const (
	// Default unspecified value.
	OdbSubnet_PURPOSE_UNSPECIFIED OdbSubnet_Purpose = 0
	// Subnet to be used for client connections.
	OdbSubnet_CLIENT_SUBNET OdbSubnet_Purpose = 1
	// Subnet to be used for backup.
	OdbSubnet_BACKUP_SUBNET OdbSubnet_Purpose = 2
)

// Enum value maps for OdbSubnet_Purpose.
var (
	OdbSubnet_Purpose_name = map[int32]string{
		0: "PURPOSE_UNSPECIFIED",
		1: "CLIENT_SUBNET",
		2: "BACKUP_SUBNET",
	}
	OdbSubnet_Purpose_value = map[string]int32{
		"PURPOSE_UNSPECIFIED": 0,
		"CLIENT_SUBNET":       1,
		"BACKUP_SUBNET":       2,
	}
)

func (x OdbSubnet_Purpose) Enum() *OdbSubnet_Purpose {
	p := new(OdbSubnet_Purpose)
	*p = x
	return p
}

func (x OdbSubnet_Purpose) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OdbSubnet_Purpose) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_oracledatabase_v1_odb_subnet_proto_enumTypes[0].Descriptor()
}

func (OdbSubnet_Purpose) Type() protoreflect.EnumType {
	return &file_google_cloud_oracledatabase_v1_odb_subnet_proto_enumTypes[0]
}

func (x OdbSubnet_Purpose) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OdbSubnet_Purpose.Descriptor instead.
func (OdbSubnet_Purpose) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_odb_subnet_proto_rawDescGZIP(), []int{0, 0}
}

// The various lifecycle states of the ODB Subnet.
type OdbSubnet_State int32

const (
	// Default unspecified value.
	OdbSubnet_STATE_UNSPECIFIED OdbSubnet_State = 0
	// Indicates that the resource is in provisioning state.
	OdbSubnet_PROVISIONING OdbSubnet_State = 1
	// Indicates that the resource is in available state.
	OdbSubnet_AVAILABLE OdbSubnet_State = 2
	// Indicates that the resource is in terminating state.
	OdbSubnet_TERMINATING OdbSubnet_State = 3
	// Indicates that the resource is in failed state.
	OdbSubnet_FAILED OdbSubnet_State = 4
)

// Enum value maps for OdbSubnet_State.
var (
	OdbSubnet_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "PROVISIONING",
		2: "AVAILABLE",
		3: "TERMINATING",
		4: "FAILED",
	}
	OdbSubnet_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"PROVISIONING":      1,
		"AVAILABLE":         2,
		"TERMINATING":       3,
		"FAILED":            4,
	}
)

func (x OdbSubnet_State) Enum() *OdbSubnet_State {
	p := new(OdbSubnet_State)
	*p = x
	return p
}

func (x OdbSubnet_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OdbSubnet_State) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_oracledatabase_v1_odb_subnet_proto_enumTypes[1].Descriptor()
}

func (OdbSubnet_State) Type() protoreflect.EnumType {
	return &file_google_cloud_oracledatabase_v1_odb_subnet_proto_enumTypes[1]
}

func (x OdbSubnet_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OdbSubnet_State.Descriptor instead.
func (OdbSubnet_State) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_odb_subnet_proto_rawDescGZIP(), []int{0, 1}
}

// Represents OdbSubnet resource.
type OdbSubnet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier. The name of the OdbSubnet resource in the following format:
	// projects/{project}/locations/{location}/odbNetworks/{odb_network}/odbSubnets/{odb_subnet}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Required. The CIDR range of the subnet.
	CidrRange string `protobuf:"bytes,2,opt,name=cidr_range,json=cidrRange,proto3" json:"cidr_range,omitempty"`
	// Required. Purpose of the subnet.
	Purpose OdbSubnet_Purpose `protobuf:"varint,3,opt,name=purpose,proto3,enum=google.cloud.oracledatabase.v1.OdbSubnet_Purpose" json:"purpose,omitempty"`
	// Optional. Labels or tags associated with the resource.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Output only. The date and time that the OdbNetwork was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. State of the ODB Subnet.
	State OdbSubnet_State `protobuf:"varint,6,opt,name=state,proto3,enum=google.cloud.oracledatabase.v1.OdbSubnet_State" json:"state,omitempty"`
}

func (x *OdbSubnet) Reset() {
	*x = OdbSubnet{}
	mi := &file_google_cloud_oracledatabase_v1_odb_subnet_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OdbSubnet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OdbSubnet) ProtoMessage() {}

func (x *OdbSubnet) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_oracledatabase_v1_odb_subnet_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OdbSubnet.ProtoReflect.Descriptor instead.
func (*OdbSubnet) Descriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_odb_subnet_proto_rawDescGZIP(), []int{0}
}

func (x *OdbSubnet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OdbSubnet) GetCidrRange() string {
	if x != nil {
		return x.CidrRange
	}
	return ""
}

func (x *OdbSubnet) GetPurpose() OdbSubnet_Purpose {
	if x != nil {
		return x.Purpose
	}
	return OdbSubnet_PURPOSE_UNSPECIFIED
}

func (x *OdbSubnet) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *OdbSubnet) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *OdbSubnet) GetState() OdbSubnet_State {
	if x != nil {
		return x.State
	}
	return OdbSubnet_STATE_UNSPECIFIED
}

// The request for `OdbSubnet.Create`.
type CreateOdbSubnetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent value for the OdbSubnet in the following format:
	// projects/{project}/locations/{location}/odbNetworks/{odb_network}.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Required. The ID of the OdbSubnet to create. This value is restricted
	// to (^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$) and must be a maximum of 63
	// characters in length. The value must start with a letter and end with
	// a letter or a number.
	OdbSubnetId string `protobuf:"bytes,2,opt,name=odb_subnet_id,json=odbSubnetId,proto3" json:"odb_subnet_id,omitempty"`
	// Required. Details of the OdbSubnet instance to create.
	OdbSubnet *OdbSubnet `protobuf:"bytes,3,opt,name=odb_subnet,json=odbSubnet,proto3" json:"odb_subnet,omitempty"`
	// Optional. An optional ID to identify the request. This value is used to
	// identify duplicate requests. If you make a request with the same request ID
	// and the original request is still in progress or completed, the server
	// ignores the second request. This prevents clients from
	// accidentally creating duplicate commitments.
	//
	// The request ID must be a valid UUID with the exception that zero UUID is
	// not supported (00000000-0000-0000-0000-000000000000).
	RequestId string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateOdbSubnetRequest) Reset() {
	*x = CreateOdbSubnetRequest{}
	mi := &file_google_cloud_oracledatabase_v1_odb_subnet_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOdbSubnetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOdbSubnetRequest) ProtoMessage() {}

func (x *CreateOdbSubnetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_oracledatabase_v1_odb_subnet_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOdbSubnetRequest.ProtoReflect.Descriptor instead.
func (*CreateOdbSubnetRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_odb_subnet_proto_rawDescGZIP(), []int{1}
}

func (x *CreateOdbSubnetRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateOdbSubnetRequest) GetOdbSubnetId() string {
	if x != nil {
		return x.OdbSubnetId
	}
	return ""
}

func (x *CreateOdbSubnetRequest) GetOdbSubnet() *OdbSubnet {
	if x != nil {
		return x.OdbSubnet
	}
	return nil
}

func (x *CreateOdbSubnetRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

// The request for `OdbSubnet.Delete`.
type DeleteOdbSubnetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the resource in the following format:
	// projects/{project}/locations/{region}/odbNetworks/{odb_network}/odbSubnets/{odb_subnet}.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. An optional ID to identify the request. This value is used to
	// identify duplicate requests. If you make a request with the same request ID
	// and the original request is still in progress or completed, the server
	// ignores the second request. This prevents clients from
	// accidentally creating duplicate commitments.
	//
	// The request ID must be a valid UUID with the exception that zero UUID is
	// not supported (00000000-0000-0000-0000-000000000000).
	RequestId string `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *DeleteOdbSubnetRequest) Reset() {
	*x = DeleteOdbSubnetRequest{}
	mi := &file_google_cloud_oracledatabase_v1_odb_subnet_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteOdbSubnetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOdbSubnetRequest) ProtoMessage() {}

func (x *DeleteOdbSubnetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_oracledatabase_v1_odb_subnet_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOdbSubnetRequest.ProtoReflect.Descriptor instead.
func (*DeleteOdbSubnetRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_odb_subnet_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteOdbSubnetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteOdbSubnetRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

// The request for `OdbSubnet.List`.
type ListOdbSubnetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent value for the OdbSubnet in the following format:
	// projects/{project}/locations/{location}/odbNetworks/{odb_network}.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Optional. The maximum number of items to return.
	// If unspecified, at most 50 ODB Networks will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Optional. A token identifying a page of results the server should return.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Optional. An expression for filtering the results of the request.
	Filter string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	// Optional. An expression for ordering the results of the request.
	OrderBy string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListOdbSubnetsRequest) Reset() {
	*x = ListOdbSubnetsRequest{}
	mi := &file_google_cloud_oracledatabase_v1_odb_subnet_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListOdbSubnetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOdbSubnetsRequest) ProtoMessage() {}

func (x *ListOdbSubnetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_oracledatabase_v1_odb_subnet_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOdbSubnetsRequest.ProtoReflect.Descriptor instead.
func (*ListOdbSubnetsRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_odb_subnet_proto_rawDescGZIP(), []int{3}
}

func (x *ListOdbSubnetsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListOdbSubnetsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListOdbSubnetsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListOdbSubnetsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListOdbSubnetsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

// The response for `OdbSubnet.List`.
type ListOdbSubnetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of ODB Subnets.
	OdbSubnets []*OdbSubnet `protobuf:"bytes,1,rep,name=odb_subnets,json=odbSubnets,proto3" json:"odb_subnets,omitempty"`
	// A token identifying a page of results the server should return.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Unreachable locations when listing resources across all locations using
	// wildcard location '-'.
	Unreachable []string `protobuf:"bytes,3,rep,name=unreachable,proto3" json:"unreachable,omitempty"`
}

func (x *ListOdbSubnetsResponse) Reset() {
	*x = ListOdbSubnetsResponse{}
	mi := &file_google_cloud_oracledatabase_v1_odb_subnet_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListOdbSubnetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOdbSubnetsResponse) ProtoMessage() {}

func (x *ListOdbSubnetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_oracledatabase_v1_odb_subnet_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOdbSubnetsResponse.ProtoReflect.Descriptor instead.
func (*ListOdbSubnetsResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_odb_subnet_proto_rawDescGZIP(), []int{4}
}

func (x *ListOdbSubnetsResponse) GetOdbSubnets() []*OdbSubnet {
	if x != nil {
		return x.OdbSubnets
	}
	return nil
}

func (x *ListOdbSubnetsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListOdbSubnetsResponse) GetUnreachable() []string {
	if x != nil {
		return x.Unreachable
	}
	return nil
}

// The request for `OdbSubnet.Get`.
type GetOdbSubnetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the OdbSubnet in the following format:
	// projects/{project}/locations/{location}/odbNetworks/{odb_network}/odbSubnets/{odb_subnet}.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOdbSubnetRequest) Reset() {
	*x = GetOdbSubnetRequest{}
	mi := &file_google_cloud_oracledatabase_v1_odb_subnet_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOdbSubnetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOdbSubnetRequest) ProtoMessage() {}

func (x *GetOdbSubnetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_oracledatabase_v1_odb_subnet_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOdbSubnetRequest.ProtoReflect.Descriptor instead.
func (*GetOdbSubnetRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_odb_subnet_proto_rawDescGZIP(), []int{5}
}

func (x *GetOdbSubnetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_google_cloud_oracledatabase_v1_odb_subnet_proto protoreflect.FileDescriptor

var file_google_cloud_oracledatabase_v1_odb_subnet_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x6f, 0x64, 0x62, 0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x81, 0x06, 0x0a, 0x09,
	0x4f, 0x64, 0x62, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x08, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x69, 0x64, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x63, 0x69, 0x64,
	0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x50, 0x0a, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x64, 0x62, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x2e, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x64, 0x62, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x40, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4a,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x64, 0x62, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x48, 0x0a, 0x07, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65,
	0x12, 0x17, 0x0a, 0x13, 0x50, 0x55, 0x52, 0x50, 0x4f, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4c, 0x49,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x4e, 0x45, 0x54, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d,
	0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x5f, 0x53, 0x55, 0x42, 0x4e, 0x45, 0x54, 0x10, 0x02, 0x22,
	0x5c, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x10, 0x0a, 0x0c, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x49, 0x4e, 0x47, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02,
	0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10,
	0x03, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x3a, 0x9f, 0x01,
	0xea, 0x41, 0x9b, 0x01, 0x0a, 0x27, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x4f, 0x64, 0x62, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x59, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x6f, 0x64, 0x62, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x2f, 0x7b, 0x6f, 0x64, 0x62, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x7d,
	0x2f, 0x6f, 0x64, 0x62, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x6f, 0x64, 0x62,
	0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x7d, 0x2a, 0x0a, 0x6f, 0x64, 0x62, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x73, 0x32, 0x09, 0x6f, 0x64, 0x62, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x22,
	0x85, 0x02, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x64, 0x62, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xe0, 0x41, 0x02, 0xfa,
	0x41, 0x29, 0x12, 0x27, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x4f, 0x64, 0x62, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0d, 0x6f, 0x64, 0x62, 0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x0b, 0x6f, 0x64, 0x62, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x0a,
	0x6f, 0x64, 0x62, 0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x64, 0x62, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x09, 0x6f, 0x64, 0x62, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0b, 0xe0, 0x41, 0x01, 0xe2, 0x8c, 0xcf, 0xd7, 0x08, 0x02, 0x08, 0x01, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4f, 0x64, 0x62, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x43, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2f, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x29, 0x0a, 0x27, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4f, 0x64, 0x62, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xe0, 0x41, 0x01,
	0xe2, 0x8c, 0xcf, 0xd7, 0x08, 0x02, 0x08, 0x01, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x22, 0xe3, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x64, 0x62, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xe0,
	0x41, 0x02, 0xfa, 0x41, 0x29, 0x12, 0x27, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4f, 0x64, 0x62, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0xae, 0x01, 0x0a, 0x16, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x64, 0x62, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x6f, 0x64, 0x62, 0x5f, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x64, 0x62, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x52, 0x0a, 0x6f, 0x64, 0x62, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x6e, 0x72, 0x65,
	0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x75,
	0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x5a, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x4f, 0x64, 0x62, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x43, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2f, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x29, 0x0a, 0x27, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4f, 0x64, 0x62, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0xe8, 0x01, 0x0a, 0x22, 0x63, 0x6f, 0x6d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x0e, 0x4f,
	0x64, 0x62, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x4a, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x70, 0x62, 0x3b, 0x6f, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x70, 0x62, 0xaa, 0x02, 0x1e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4f, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x1e, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x4f, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5c, 0x56, 0x31, 0xea, 0x02, 0x21,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x4f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x3a, 0x3a, 0x56,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_oracledatabase_v1_odb_subnet_proto_rawDescOnce sync.Once
	file_google_cloud_oracledatabase_v1_odb_subnet_proto_rawDescData = file_google_cloud_oracledatabase_v1_odb_subnet_proto_rawDesc
)

func file_google_cloud_oracledatabase_v1_odb_subnet_proto_rawDescGZIP() []byte {
	file_google_cloud_oracledatabase_v1_odb_subnet_proto_rawDescOnce.Do(func() {
		file_google_cloud_oracledatabase_v1_odb_subnet_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_oracledatabase_v1_odb_subnet_proto_rawDescData)
	})
	return file_google_cloud_oracledatabase_v1_odb_subnet_proto_rawDescData
}

var file_google_cloud_oracledatabase_v1_odb_subnet_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_google_cloud_oracledatabase_v1_odb_subnet_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_google_cloud_oracledatabase_v1_odb_subnet_proto_goTypes = []any{
	(OdbSubnet_Purpose)(0),         // 0: google.cloud.oracledatabase.v1.OdbSubnet.Purpose
	(OdbSubnet_State)(0),           // 1: google.cloud.oracledatabase.v1.OdbSubnet.State
	(*OdbSubnet)(nil),              // 2: google.cloud.oracledatabase.v1.OdbSubnet
	(*CreateOdbSubnetRequest)(nil), // 3: google.cloud.oracledatabase.v1.CreateOdbSubnetRequest
	(*DeleteOdbSubnetRequest)(nil), // 4: google.cloud.oracledatabase.v1.DeleteOdbSubnetRequest
	(*ListOdbSubnetsRequest)(nil),  // 5: google.cloud.oracledatabase.v1.ListOdbSubnetsRequest
	(*ListOdbSubnetsResponse)(nil), // 6: google.cloud.oracledatabase.v1.ListOdbSubnetsResponse
	(*GetOdbSubnetRequest)(nil),    // 7: google.cloud.oracledatabase.v1.GetOdbSubnetRequest
	nil,                            // 8: google.cloud.oracledatabase.v1.OdbSubnet.LabelsEntry
	(*timestamppb.Timestamp)(nil),  // 9: google.protobuf.Timestamp
}
var file_google_cloud_oracledatabase_v1_odb_subnet_proto_depIdxs = []int32{
	0, // 0: google.cloud.oracledatabase.v1.OdbSubnet.purpose:type_name -> google.cloud.oracledatabase.v1.OdbSubnet.Purpose
	8, // 1: google.cloud.oracledatabase.v1.OdbSubnet.labels:type_name -> google.cloud.oracledatabase.v1.OdbSubnet.LabelsEntry
	9, // 2: google.cloud.oracledatabase.v1.OdbSubnet.create_time:type_name -> google.protobuf.Timestamp
	1, // 3: google.cloud.oracledatabase.v1.OdbSubnet.state:type_name -> google.cloud.oracledatabase.v1.OdbSubnet.State
	2, // 4: google.cloud.oracledatabase.v1.CreateOdbSubnetRequest.odb_subnet:type_name -> google.cloud.oracledatabase.v1.OdbSubnet
	2, // 5: google.cloud.oracledatabase.v1.ListOdbSubnetsResponse.odb_subnets:type_name -> google.cloud.oracledatabase.v1.OdbSubnet
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_google_cloud_oracledatabase_v1_odb_subnet_proto_init() }
func file_google_cloud_oracledatabase_v1_odb_subnet_proto_init() {
	if File_google_cloud_oracledatabase_v1_odb_subnet_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_oracledatabase_v1_odb_subnet_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_cloud_oracledatabase_v1_odb_subnet_proto_goTypes,
		DependencyIndexes: file_google_cloud_oracledatabase_v1_odb_subnet_proto_depIdxs,
		EnumInfos:         file_google_cloud_oracledatabase_v1_odb_subnet_proto_enumTypes,
		MessageInfos:      file_google_cloud_oracledatabase_v1_odb_subnet_proto_msgTypes,
	}.Build()
	File_google_cloud_oracledatabase_v1_odb_subnet_proto = out.File
	file_google_cloud_oracledatabase_v1_odb_subnet_proto_rawDesc = nil
	file_google_cloud_oracledatabase_v1_odb_subnet_proto_goTypes = nil
	file_google_cloud_oracledatabase_v1_odb_subnet_proto_depIdxs = nil
}
