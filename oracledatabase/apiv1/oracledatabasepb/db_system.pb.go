// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.7
// source: google/cloud/oracledatabase/v1/db_system.proto

package oracledatabasepb

import (
	reflect "reflect"
	sync "sync"

	_ "google.golang.org/genproto/googleapis/api/annotations"
	datetime "google.golang.org/genproto/googleapis/type/datetime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The editions available for DbSystem.
type DbSystemProperties_DbSystemDatabaseEdition int32

const (
	// The database edition is unspecified.
	DbSystemProperties_DB_SYSTEM_DATABASE_EDITION_UNSPECIFIED DbSystemProperties_DbSystemDatabaseEdition = 0
	// The database edition is Standard.
	DbSystemProperties_STANDARD_EDITION DbSystemProperties_DbSystemDatabaseEdition = 1
	// The database edition is Enterprise.
	DbSystemProperties_ENTERPRISE_EDITION DbSystemProperties_DbSystemDatabaseEdition = 2
	// The database edition is Enterprise Edition.
	DbSystemProperties_ENTERPRISE_EDITION_HIGH_PERFORMANCE DbSystemProperties_DbSystemDatabaseEdition = 3
)

// Enum value maps for DbSystemProperties_DbSystemDatabaseEdition.
var (
	DbSystemProperties_DbSystemDatabaseEdition_name = map[int32]string{
		0: "DB_SYSTEM_DATABASE_EDITION_UNSPECIFIED",
		1: "STANDARD_EDITION",
		2: "ENTERPRISE_EDITION",
		3: "ENTERPRISE_EDITION_HIGH_PERFORMANCE",
	}
	DbSystemProperties_DbSystemDatabaseEdition_value = map[string]int32{
		"DB_SYSTEM_DATABASE_EDITION_UNSPECIFIED": 0,
		"STANDARD_EDITION":                       1,
		"ENTERPRISE_EDITION":                     2,
		"ENTERPRISE_EDITION_HIGH_PERFORMANCE":    3,
	}
)

func (x DbSystemProperties_DbSystemDatabaseEdition) Enum() *DbSystemProperties_DbSystemDatabaseEdition {
	p := new(DbSystemProperties_DbSystemDatabaseEdition)
	*p = x
	return p
}

func (x DbSystemProperties_DbSystemDatabaseEdition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DbSystemProperties_DbSystemDatabaseEdition) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_oracledatabase_v1_db_system_proto_enumTypes[0].Descriptor()
}

func (DbSystemProperties_DbSystemDatabaseEdition) Type() protoreflect.EnumType {
	return &file_google_cloud_oracledatabase_v1_db_system_proto_enumTypes[0]
}

func (x DbSystemProperties_DbSystemDatabaseEdition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DbSystemProperties_DbSystemDatabaseEdition.Descriptor instead.
func (DbSystemProperties_DbSystemDatabaseEdition) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_db_system_proto_rawDescGZIP(), []int{1, 0}
}

// The license model of the DbSystem.
type DbSystemProperties_LicenseModel int32

const (
	// The license model is unspecified.
	DbSystemProperties_LICENSE_MODEL_UNSPECIFIED DbSystemProperties_LicenseModel = 0
	// The license model is included.
	DbSystemProperties_LICENSE_INCLUDED DbSystemProperties_LicenseModel = 1
	// The license model is bring your own license.
	DbSystemProperties_BRING_YOUR_OWN_LICENSE DbSystemProperties_LicenseModel = 2
)

// Enum value maps for DbSystemProperties_LicenseModel.
var (
	DbSystemProperties_LicenseModel_name = map[int32]string{
		0: "LICENSE_MODEL_UNSPECIFIED",
		1: "LICENSE_INCLUDED",
		2: "BRING_YOUR_OWN_LICENSE",
	}
	DbSystemProperties_LicenseModel_value = map[string]int32{
		"LICENSE_MODEL_UNSPECIFIED": 0,
		"LICENSE_INCLUDED":          1,
		"BRING_YOUR_OWN_LICENSE":    2,
	}
)

func (x DbSystemProperties_LicenseModel) Enum() *DbSystemProperties_LicenseModel {
	p := new(DbSystemProperties_LicenseModel)
	*p = x
	return p
}

func (x DbSystemProperties_LicenseModel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DbSystemProperties_LicenseModel) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_oracledatabase_v1_db_system_proto_enumTypes[1].Descriptor()
}

func (DbSystemProperties_LicenseModel) Type() protoreflect.EnumType {
	return &file_google_cloud_oracledatabase_v1_db_system_proto_enumTypes[1]
}

func (x DbSystemProperties_LicenseModel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DbSystemProperties_LicenseModel.Descriptor instead.
func (DbSystemProperties_LicenseModel) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_db_system_proto_rawDescGZIP(), []int{1, 1}
}

// The various lifecycle states of the DbSystem.
type DbSystemProperties_DbSystemLifecycleState int32

const (
	// Default unspecified value.
	DbSystemProperties_DB_SYSTEM_LIFECYCLE_STATE_UNSPECIFIED DbSystemProperties_DbSystemLifecycleState = 0
	// Indicates that the resource is in provisioning state.
	DbSystemProperties_PROVISIONING DbSystemProperties_DbSystemLifecycleState = 1
	// Indicates that the resource is in available state.
	DbSystemProperties_AVAILABLE DbSystemProperties_DbSystemLifecycleState = 2
	// Indicates that the resource is in updating state.
	DbSystemProperties_UPDATING DbSystemProperties_DbSystemLifecycleState = 3
	// Indicates that the resource is in terminating state.
	DbSystemProperties_TERMINATING DbSystemProperties_DbSystemLifecycleState = 4
	// Indicates that the resource is in terminated state.
	DbSystemProperties_TERMINATED DbSystemProperties_DbSystemLifecycleState = 5
	// Indicates that the resource is in failed state.
	DbSystemProperties_FAILED DbSystemProperties_DbSystemLifecycleState = 6
	// Indicates that the resource has been migrated.
	DbSystemProperties_MIGRATED DbSystemProperties_DbSystemLifecycleState = 7
	// Indicates that the resource is in maintenance in progress state.
	DbSystemProperties_MAINTENANCE_IN_PROGRESS DbSystemProperties_DbSystemLifecycleState = 8
	// Indicates that the resource needs attention.
	DbSystemProperties_NEEDS_ATTENTION DbSystemProperties_DbSystemLifecycleState = 9
	// Indicates that the resource is upgrading.
	DbSystemProperties_UPGRADING DbSystemProperties_DbSystemLifecycleState = 10
)

// Enum value maps for DbSystemProperties_DbSystemLifecycleState.
var (
	DbSystemProperties_DbSystemLifecycleState_name = map[int32]string{
		0:  "DB_SYSTEM_LIFECYCLE_STATE_UNSPECIFIED",
		1:  "PROVISIONING",
		2:  "AVAILABLE",
		3:  "UPDATING",
		4:  "TERMINATING",
		5:  "TERMINATED",
		6:  "FAILED",
		7:  "MIGRATED",
		8:  "MAINTENANCE_IN_PROGRESS",
		9:  "NEEDS_ATTENTION",
		10: "UPGRADING",
	}
	DbSystemProperties_DbSystemLifecycleState_value = map[string]int32{
		"DB_SYSTEM_LIFECYCLE_STATE_UNSPECIFIED": 0,
		"PROVISIONING":                          1,
		"AVAILABLE":                             2,
		"UPDATING":                              3,
		"TERMINATING":                           4,
		"TERMINATED":                            5,
		"FAILED":                                6,
		"MIGRATED":                              7,
		"MAINTENANCE_IN_PROGRESS":               8,
		"NEEDS_ATTENTION":                       9,
		"UPGRADING":                             10,
	}
)

func (x DbSystemProperties_DbSystemLifecycleState) Enum() *DbSystemProperties_DbSystemLifecycleState {
	p := new(DbSystemProperties_DbSystemLifecycleState)
	*p = x
	return p
}

func (x DbSystemProperties_DbSystemLifecycleState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DbSystemProperties_DbSystemLifecycleState) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_oracledatabase_v1_db_system_proto_enumTypes[2].Descriptor()
}

func (DbSystemProperties_DbSystemLifecycleState) Type() protoreflect.EnumType {
	return &file_google_cloud_oracledatabase_v1_db_system_proto_enumTypes[2]
}

func (x DbSystemProperties_DbSystemLifecycleState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DbSystemProperties_DbSystemLifecycleState.Descriptor instead.
func (DbSystemProperties_DbSystemLifecycleState) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_db_system_proto_rawDescGZIP(), []int{1, 2}
}

// The compute model of the DbSystem.
type DbSystemProperties_ComputeModel int32

const (
	// The compute model is unspecified.
	DbSystemProperties_COMPUTE_MODEL_UNSPECIFIED DbSystemProperties_ComputeModel = 0
	// The compute model is virtual.
	DbSystemProperties_ECPU DbSystemProperties_ComputeModel = 1
	// The compute model is physical.
	DbSystemProperties_OCPU DbSystemProperties_ComputeModel = 2
)

// Enum value maps for DbSystemProperties_ComputeModel.
var (
	DbSystemProperties_ComputeModel_name = map[int32]string{
		0: "COMPUTE_MODEL_UNSPECIFIED",
		1: "ECPU",
		2: "OCPU",
	}
	DbSystemProperties_ComputeModel_value = map[string]int32{
		"COMPUTE_MODEL_UNSPECIFIED": 0,
		"ECPU":                      1,
		"OCPU":                      2,
	}
)

func (x DbSystemProperties_ComputeModel) Enum() *DbSystemProperties_ComputeModel {
	p := new(DbSystemProperties_ComputeModel)
	*p = x
	return p
}

func (x DbSystemProperties_ComputeModel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DbSystemProperties_ComputeModel) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_oracledatabase_v1_db_system_proto_enumTypes[3].Descriptor()
}

func (DbSystemProperties_ComputeModel) Type() protoreflect.EnumType {
	return &file_google_cloud_oracledatabase_v1_db_system_proto_enumTypes[3]
}

func (x DbSystemProperties_ComputeModel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DbSystemProperties_ComputeModel.Descriptor instead.
func (DbSystemProperties_ComputeModel) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_db_system_proto_rawDescGZIP(), []int{1, 3}
}

// The storage option used in DB system.
type DbSystemOptions_StorageManagement int32

const (
	// The storage management is unspecified.
	DbSystemOptions_STORAGE_MANAGEMENT_UNSPECIFIED DbSystemOptions_StorageManagement = 0
	// Automatic storage management.
	DbSystemOptions_ASM DbSystemOptions_StorageManagement = 1
	// Logical Volume management.
	DbSystemOptions_LVM DbSystemOptions_StorageManagement = 2
)

// Enum value maps for DbSystemOptions_StorageManagement.
var (
	DbSystemOptions_StorageManagement_name = map[int32]string{
		0: "STORAGE_MANAGEMENT_UNSPECIFIED",
		1: "ASM",
		2: "LVM",
	}
	DbSystemOptions_StorageManagement_value = map[string]int32{
		"STORAGE_MANAGEMENT_UNSPECIFIED": 0,
		"ASM":                            1,
		"LVM":                            2,
	}
)

func (x DbSystemOptions_StorageManagement) Enum() *DbSystemOptions_StorageManagement {
	p := new(DbSystemOptions_StorageManagement)
	*p = x
	return p
}

func (x DbSystemOptions_StorageManagement) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DbSystemOptions_StorageManagement) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_oracledatabase_v1_db_system_proto_enumTypes[4].Descriptor()
}

func (DbSystemOptions_StorageManagement) Type() protoreflect.EnumType {
	return &file_google_cloud_oracledatabase_v1_db_system_proto_enumTypes[4]
}

func (x DbSystemOptions_StorageManagement) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DbSystemOptions_StorageManagement.Descriptor instead.
func (DbSystemOptions_StorageManagement) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_db_system_proto_rawDescGZIP(), []int{3, 0}
}

// Details of the DbSystem (BaseDB) resource.
// https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/DbSystem/
type DbSystem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier. The name of the DbSystem resource in the following format:
	// projects/{project}/locations/{region}/dbSystems/{db_system}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. The properties of the DbSystem.
	Properties *DbSystemProperties `protobuf:"bytes,2,opt,name=properties,proto3" json:"properties,omitempty"`
	// Optional. The GCP Oracle zone where Oracle DbSystem is hosted.
	// Example: us-east4-b-r2.
	// If not specified, the system will pick a zone based on availability.
	GcpOracleZone string `protobuf:"bytes,3,opt,name=gcp_oracle_zone,json=gcpOracleZone,proto3" json:"gcp_oracle_zone,omitempty"`
	// Optional. The labels or tags associated with the DbSystem.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Optional. The name of the OdbNetwork associated with the DbSystem.
	// Format: projects/{project}/locations/{location}/odbNetworks/{odb_network}
	// It is optional but if specified, this should match the parent ODBNetwork of
	// the OdbSubnet.
	OdbNetwork string `protobuf:"bytes,5,opt,name=odb_network,json=odbNetwork,proto3" json:"odb_network,omitempty"`
	// Required. The name of the OdbSubnet associated with the DbSystem for IP
	// allocation. Format:
	// projects/{project}/locations/{location}/odbNetworks/{odb_network}/odbSubnets/{odb_subnet}
	OdbSubnet string `protobuf:"bytes,6,opt,name=odb_subnet,json=odbSubnet,proto3" json:"odb_subnet,omitempty"`
	// Output only. The ID of the subscription entitlement associated with the
	// DbSystem
	EntitlementId string `protobuf:"bytes,7,opt,name=entitlement_id,json=entitlementId,proto3" json:"entitlement_id,omitempty"`
	// Required. The display name for the System db. The name does not have to
	// be unique within your project.
	DisplayName string `protobuf:"bytes,8,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Output only. The date and time that the DbSystem was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. HTTPS link to OCI resources exposed to Customer via UI
	// Interface.
	OciUrl string `protobuf:"bytes,10,opt,name=oci_url,json=ociUrl,proto3" json:"oci_url,omitempty"`
}

func (x *DbSystem) Reset() {
	*x = DbSystem{}
	mi := &file_google_cloud_oracledatabase_v1_db_system_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DbSystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbSystem) ProtoMessage() {}

func (x *DbSystem) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_oracledatabase_v1_db_system_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbSystem.ProtoReflect.Descriptor instead.
func (*DbSystem) Descriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_db_system_proto_rawDescGZIP(), []int{0}
}

func (x *DbSystem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DbSystem) GetProperties() *DbSystemProperties {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *DbSystem) GetGcpOracleZone() string {
	if x != nil {
		return x.GcpOracleZone
	}
	return ""
}

func (x *DbSystem) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *DbSystem) GetOdbNetwork() string {
	if x != nil {
		return x.OdbNetwork
	}
	return ""
}

func (x *DbSystem) GetOdbSubnet() string {
	if x != nil {
		return x.OdbSubnet
	}
	return ""
}

func (x *DbSystem) GetEntitlementId() string {
	if x != nil {
		return x.EntitlementId
	}
	return ""
}

func (x *DbSystem) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *DbSystem) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *DbSystem) GetOciUrl() string {
	if x != nil {
		return x.OciUrl
	}
	return ""
}

// The properties of a DbSystem.
type DbSystemProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Shape of DB System.
	Shape string `protobuf:"bytes,1,opt,name=shape,proto3" json:"shape,omitempty"`
	// Required. The number of CPU cores to enable for the DbSystem.
	ComputeCount int32 `protobuf:"varint,2,opt,name=compute_count,json=computeCount,proto3" json:"compute_count,omitempty"`
	// Required. The initial data storage size in GB.
	InitialDataStorageSizeGb int32 `protobuf:"varint,3,opt,name=initial_data_storage_size_gb,json=initialDataStorageSizeGb,proto3" json:"initial_data_storage_size_gb,omitempty"`
	// Required. The database edition of the DbSystem.
	DatabaseEdition DbSystemProperties_DbSystemDatabaseEdition `protobuf:"varint,4,opt,name=database_edition,json=databaseEdition,proto3,enum=google.cloud.oracledatabase.v1.DbSystemProperties_DbSystemDatabaseEdition" json:"database_edition,omitempty"`
	// Required. The license model of the DbSystem.
	LicenseModel DbSystemProperties_LicenseModel `protobuf:"varint,5,opt,name=license_model,json=licenseModel,proto3,enum=google.cloud.oracledatabase.v1.DbSystemProperties_LicenseModel" json:"license_model,omitempty"`
	// Required. SSH public keys to be stored with the DbSystem.
	SshPublicKeys []string `protobuf:"bytes,6,rep,name=ssh_public_keys,json=sshPublicKeys,proto3" json:"ssh_public_keys,omitempty"`
	// Optional. Prefix for DB System host names.
	HostnamePrefix string `protobuf:"bytes,7,opt,name=hostname_prefix,json=hostnamePrefix,proto3" json:"hostname_prefix,omitempty"`
	// Output only. The hostname of the DbSystem.
	Hostname string `protobuf:"bytes,8,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// Optional. The private IP address of the DbSystem.
	PrivateIp string `protobuf:"bytes,9,opt,name=private_ip,json=privateIp,proto3" json:"private_ip,omitempty"`
	// Optional. Data collection options for diagnostics.
	DataCollectionOptions *DataCollectionOptionsDbSystem `protobuf:"bytes,10,opt,name=data_collection_options,json=dataCollectionOptions,proto3" json:"data_collection_options,omitempty"`
	// Optional. Time zone of the DbSystem.
	TimeZone *datetime.TimeZone `protobuf:"bytes,11,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
	// Output only. State of the DbSystem.
	LifecycleState DbSystemProperties_DbSystemLifecycleState `protobuf:"varint,12,opt,name=lifecycle_state,json=lifecycleState,proto3,enum=google.cloud.oracledatabase.v1.DbSystemProperties_DbSystemLifecycleState" json:"lifecycle_state,omitempty"`
	// Optional. Details for creating a Database Home.
	DbHome *DbHome `protobuf:"bytes,13,opt,name=db_home,json=dbHome,proto3" json:"db_home,omitempty"`
	// Output only. OCID of the DbSystem.
	Ocid string `protobuf:"bytes,14,opt,name=ocid,proto3" json:"ocid,omitempty"`
	// Optional. The memory size in GB.
	MemorySizeGb int32 `protobuf:"varint,15,opt,name=memory_size_gb,json=memorySizeGb,proto3" json:"memory_size_gb,omitempty"`
	// Optional. The compute model of the DbSystem.
	ComputeModel DbSystemProperties_ComputeModel `protobuf:"varint,16,opt,name=compute_model,json=computeModel,proto3,enum=google.cloud.oracledatabase.v1.DbSystemProperties_ComputeModel" json:"compute_model,omitempty"`
	// Optional. The data storage size in GB that is currently available to
	// DbSystems.
	DataStorageSizeGb int32 `protobuf:"varint,17,opt,name=data_storage_size_gb,json=dataStorageSizeGb,proto3" json:"data_storage_size_gb,omitempty"`
	// Optional. The reco/redo storage size in GB.
	RecoStorageSizeGb int32 `protobuf:"varint,18,opt,name=reco_storage_size_gb,json=recoStorageSizeGb,proto3" json:"reco_storage_size_gb,omitempty"`
	// Optional. The host domain name of the DbSystem.
	Domain string `protobuf:"bytes,19,opt,name=domain,proto3" json:"domain,omitempty"`
	// Optional. The number of nodes in the DbSystem.
	NodeCount int32 `protobuf:"varint,20,opt,name=node_count,json=nodeCount,proto3" json:"node_count,omitempty"`
	// Optional. The options for the DbSystem.
	DbSystemOptions *DbSystemOptions `protobuf:"bytes,21,opt,name=db_system_options,json=dbSystemOptions,proto3" json:"db_system_options,omitempty"`
}

func (x *DbSystemProperties) Reset() {
	*x = DbSystemProperties{}
	mi := &file_google_cloud_oracledatabase_v1_db_system_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DbSystemProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbSystemProperties) ProtoMessage() {}

func (x *DbSystemProperties) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_oracledatabase_v1_db_system_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbSystemProperties.ProtoReflect.Descriptor instead.
func (*DbSystemProperties) Descriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_db_system_proto_rawDescGZIP(), []int{1}
}

func (x *DbSystemProperties) GetShape() string {
	if x != nil {
		return x.Shape
	}
	return ""
}

func (x *DbSystemProperties) GetComputeCount() int32 {
	if x != nil {
		return x.ComputeCount
	}
	return 0
}

func (x *DbSystemProperties) GetInitialDataStorageSizeGb() int32 {
	if x != nil {
		return x.InitialDataStorageSizeGb
	}
	return 0
}

func (x *DbSystemProperties) GetDatabaseEdition() DbSystemProperties_DbSystemDatabaseEdition {
	if x != nil {
		return x.DatabaseEdition
	}
	return DbSystemProperties_DB_SYSTEM_DATABASE_EDITION_UNSPECIFIED
}

func (x *DbSystemProperties) GetLicenseModel() DbSystemProperties_LicenseModel {
	if x != nil {
		return x.LicenseModel
	}
	return DbSystemProperties_LICENSE_MODEL_UNSPECIFIED
}

func (x *DbSystemProperties) GetSshPublicKeys() []string {
	if x != nil {
		return x.SshPublicKeys
	}
	return nil
}

func (x *DbSystemProperties) GetHostnamePrefix() string {
	if x != nil {
		return x.HostnamePrefix
	}
	return ""
}

func (x *DbSystemProperties) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *DbSystemProperties) GetPrivateIp() string {
	if x != nil {
		return x.PrivateIp
	}
	return ""
}

func (x *DbSystemProperties) GetDataCollectionOptions() *DataCollectionOptionsDbSystem {
	if x != nil {
		return x.DataCollectionOptions
	}
	return nil
}

func (x *DbSystemProperties) GetTimeZone() *datetime.TimeZone {
	if x != nil {
		return x.TimeZone
	}
	return nil
}

func (x *DbSystemProperties) GetLifecycleState() DbSystemProperties_DbSystemLifecycleState {
	if x != nil {
		return x.LifecycleState
	}
	return DbSystemProperties_DB_SYSTEM_LIFECYCLE_STATE_UNSPECIFIED
}

func (x *DbSystemProperties) GetDbHome() *DbHome {
	if x != nil {
		return x.DbHome
	}
	return nil
}

func (x *DbSystemProperties) GetOcid() string {
	if x != nil {
		return x.Ocid
	}
	return ""
}

func (x *DbSystemProperties) GetMemorySizeGb() int32 {
	if x != nil {
		return x.MemorySizeGb
	}
	return 0
}

func (x *DbSystemProperties) GetComputeModel() DbSystemProperties_ComputeModel {
	if x != nil {
		return x.ComputeModel
	}
	return DbSystemProperties_COMPUTE_MODEL_UNSPECIFIED
}

func (x *DbSystemProperties) GetDataStorageSizeGb() int32 {
	if x != nil {
		return x.DataStorageSizeGb
	}
	return 0
}

func (x *DbSystemProperties) GetRecoStorageSizeGb() int32 {
	if x != nil {
		return x.RecoStorageSizeGb
	}
	return 0
}

func (x *DbSystemProperties) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *DbSystemProperties) GetNodeCount() int32 {
	if x != nil {
		return x.NodeCount
	}
	return 0
}

func (x *DbSystemProperties) GetDbSystemOptions() *DbSystemOptions {
	if x != nil {
		return x.DbSystemOptions
	}
	return nil
}

// Data collection options for DbSystem.
type DataCollectionOptionsDbSystem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Indicates whether to enable data collection for diagnostics.
	IsDiagnosticsEventsEnabled bool `protobuf:"varint,1,opt,name=is_diagnostics_events_enabled,json=isDiagnosticsEventsEnabled,proto3" json:"is_diagnostics_events_enabled,omitempty"`
	// Optional. Indicates whether to enable incident logs and trace collection.
	IsIncidentLogsEnabled bool `protobuf:"varint,2,opt,name=is_incident_logs_enabled,json=isIncidentLogsEnabled,proto3" json:"is_incident_logs_enabled,omitempty"`
}

func (x *DataCollectionOptionsDbSystem) Reset() {
	*x = DataCollectionOptionsDbSystem{}
	mi := &file_google_cloud_oracledatabase_v1_db_system_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataCollectionOptionsDbSystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataCollectionOptionsDbSystem) ProtoMessage() {}

func (x *DataCollectionOptionsDbSystem) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_oracledatabase_v1_db_system_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataCollectionOptionsDbSystem.ProtoReflect.Descriptor instead.
func (*DataCollectionOptionsDbSystem) Descriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_db_system_proto_rawDescGZIP(), []int{2}
}

func (x *DataCollectionOptionsDbSystem) GetIsDiagnosticsEventsEnabled() bool {
	if x != nil {
		return x.IsDiagnosticsEventsEnabled
	}
	return false
}

func (x *DataCollectionOptionsDbSystem) GetIsIncidentLogsEnabled() bool {
	if x != nil {
		return x.IsIncidentLogsEnabled
	}
	return false
}

// Details of the DbSystem Options.
type DbSystemOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The storage option used in DB system.
	StorageManagement DbSystemOptions_StorageManagement `protobuf:"varint,1,opt,name=storage_management,json=storageManagement,proto3,enum=google.cloud.oracledatabase.v1.DbSystemOptions_StorageManagement" json:"storage_management,omitempty"`
}

func (x *DbSystemOptions) Reset() {
	*x = DbSystemOptions{}
	mi := &file_google_cloud_oracledatabase_v1_db_system_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DbSystemOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbSystemOptions) ProtoMessage() {}

func (x *DbSystemOptions) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_oracledatabase_v1_db_system_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbSystemOptions.ProtoReflect.Descriptor instead.
func (*DbSystemOptions) Descriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_db_system_proto_rawDescGZIP(), []int{3}
}

func (x *DbSystemOptions) GetStorageManagement() DbSystemOptions_StorageManagement {
	if x != nil {
		return x.StorageManagement
	}
	return DbSystemOptions_STORAGE_MANAGEMENT_UNSPECIFIED
}

// Details of the Database Home resource.
type DbHome struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The display name for the Database Home. The name does not have to
	// be unique within your project.
	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Required. A valid Oracle Database version. For a list of supported
	// versions, use the ListDbVersions operation.
	DbVersion string `protobuf:"bytes,2,opt,name=db_version,json=dbVersion,proto3" json:"db_version,omitempty"`
	// Required. The Database resource.
	Database *Database `protobuf:"bytes,3,opt,name=database,proto3" json:"database,omitempty"`
	// Optional. Whether unified auditing is enabled for the Database Home.
	IsUnifiedAuditingEnabled bool `protobuf:"varint,4,opt,name=is_unified_auditing_enabled,json=isUnifiedAuditingEnabled,proto3" json:"is_unified_auditing_enabled,omitempty"`
}

func (x *DbHome) Reset() {
	*x = DbHome{}
	mi := &file_google_cloud_oracledatabase_v1_db_system_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DbHome) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbHome) ProtoMessage() {}

func (x *DbHome) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_oracledatabase_v1_db_system_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbHome.ProtoReflect.Descriptor instead.
func (*DbHome) Descriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_db_system_proto_rawDescGZIP(), []int{4}
}

func (x *DbHome) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *DbHome) GetDbVersion() string {
	if x != nil {
		return x.DbVersion
	}
	return ""
}

func (x *DbHome) GetDatabase() *Database {
	if x != nil {
		return x.Database
	}
	return nil
}

func (x *DbHome) GetIsUnifiedAuditingEnabled() bool {
	if x != nil {
		return x.IsUnifiedAuditingEnabled
	}
	return false
}

// The request for `DbSystem.Create`.
type CreateDbSystemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The value for parent of the DbSystem in the following format:
	// projects/{project}/locations/{location}.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Required. The ID of the DbSystem to create. This value is
	// restricted to (^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$) and must be a maximum of
	// 63 characters in length. The value must start with a letter and end with a
	// letter or a number.
	DbSystemId string `protobuf:"bytes,2,opt,name=db_system_id,json=dbSystemId,proto3" json:"db_system_id,omitempty"`
	// Required. The resource being created.
	DbSystem *DbSystem `protobuf:"bytes,3,opt,name=db_system,json=dbSystem,proto3" json:"db_system,omitempty"`
	// Optional. An optional request ID to identify requests. Specify a unique
	// request ID so that if you must retry your request, the server will know to
	// ignore the request if it has already been completed. The server will
	// guarantee that for at least 60 minutes since the first request.
	//
	// For example, consider a situation where you make an initial request and the
	// request times out. If you make the request again with the same request
	// ID, the server can check if original operation with the same request ID
	// was received, and if so, will ignore the second request. This prevents
	// clients from accidentally creating duplicate commitments.
	//
	// The request ID must be a valid UUID with the exception that zero UUID is
	// not supported (00000000-0000-0000-0000-000000000000).
	RequestId string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateDbSystemRequest) Reset() {
	*x = CreateDbSystemRequest{}
	mi := &file_google_cloud_oracledatabase_v1_db_system_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDbSystemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDbSystemRequest) ProtoMessage() {}

func (x *CreateDbSystemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_oracledatabase_v1_db_system_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDbSystemRequest.ProtoReflect.Descriptor instead.
func (*CreateDbSystemRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_db_system_proto_rawDescGZIP(), []int{5}
}

func (x *CreateDbSystemRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateDbSystemRequest) GetDbSystemId() string {
	if x != nil {
		return x.DbSystemId
	}
	return ""
}

func (x *CreateDbSystemRequest) GetDbSystem() *DbSystem {
	if x != nil {
		return x.DbSystem
	}
	return nil
}

func (x *CreateDbSystemRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

// The request for `DbSystem.Delete`.
type DeleteDbSystemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the DbSystem in the following format:
	// projects/{project}/locations/{location}/dbSystems/{db_system}.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. An optional ID to identify the request. This value is used to
	// identify duplicate requests. If you make a request with the same request ID
	// and the original request is still in progress or completed, the server
	// ignores the second request. This prevents clients from
	// accidentally creating duplicate commitments.
	//
	// The request ID must be a valid UUID with the exception that zero UUID is
	// not supported (00000000-0000-0000-0000-000000000000).
	RequestId string `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *DeleteDbSystemRequest) Reset() {
	*x = DeleteDbSystemRequest{}
	mi := &file_google_cloud_oracledatabase_v1_db_system_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDbSystemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDbSystemRequest) ProtoMessage() {}

func (x *DeleteDbSystemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_oracledatabase_v1_db_system_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDbSystemRequest.ProtoReflect.Descriptor instead.
func (*DeleteDbSystemRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_db_system_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteDbSystemRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteDbSystemRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

// The request for `DbSystem.Get`.
type GetDbSystemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the DbSystem in the following format:
	// projects/{project}/locations/{location}/dbSystems/{db_system}.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetDbSystemRequest) Reset() {
	*x = GetDbSystemRequest{}
	mi := &file_google_cloud_oracledatabase_v1_db_system_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDbSystemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDbSystemRequest) ProtoMessage() {}

func (x *GetDbSystemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_oracledatabase_v1_db_system_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDbSystemRequest.ProtoReflect.Descriptor instead.
func (*GetDbSystemRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_db_system_proto_rawDescGZIP(), []int{7}
}

func (x *GetDbSystemRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// The request for `DbSystem.List`.
type ListDbSystemsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent value for DbSystems in the following format:
	// projects/{project}/locations/{location}.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Optional. The maximum number of items to return.
	// If unspecified, at most 50 DbSystems will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Optional. A token identifying a page of results the server should return.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Optional. An expression for filtering the results of the request.
	Filter string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	// Optional. An expression for ordering the results of the request.
	OrderBy string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListDbSystemsRequest) Reset() {
	*x = ListDbSystemsRequest{}
	mi := &file_google_cloud_oracledatabase_v1_db_system_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDbSystemsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDbSystemsRequest) ProtoMessage() {}

func (x *ListDbSystemsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_oracledatabase_v1_db_system_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDbSystemsRequest.ProtoReflect.Descriptor instead.
func (*ListDbSystemsRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_db_system_proto_rawDescGZIP(), []int{8}
}

func (x *ListDbSystemsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListDbSystemsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListDbSystemsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListDbSystemsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListDbSystemsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

// The response for `DbSystem.List`.
type ListDbSystemsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of DbSystems.
	DbSystems []*DbSystem `protobuf:"bytes,1,rep,name=db_systems,json=dbSystems,proto3" json:"db_systems,omitempty"`
	// A token identifying a page of results the server should return.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListDbSystemsResponse) Reset() {
	*x = ListDbSystemsResponse{}
	mi := &file_google_cloud_oracledatabase_v1_db_system_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDbSystemsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDbSystemsResponse) ProtoMessage() {}

func (x *ListDbSystemsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_oracledatabase_v1_db_system_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDbSystemsResponse.ProtoReflect.Descriptor instead.
func (*ListDbSystemsResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_db_system_proto_rawDescGZIP(), []int{9}
}

func (x *ListDbSystemsResponse) GetDbSystems() []*DbSystem {
	if x != nil {
		return x.DbSystems
	}
	return nil
}

func (x *ListDbSystemsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

var File_google_cloud_oracledatabase_v1_db_system_proto protoreflect.FileDescriptor

var file_google_cloud_oracledatabase_v1_db_system_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x64, 0x62, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8f, 0x06, 0x0a, 0x08, 0x44, 0x62, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x08, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x57, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x62, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x0f, 0x67, 0x63, 0x70, 0x5f, 0x6f, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x0d, 0x67, 0x63, 0x70, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x5a, 0x6f, 0x6e,
	0x65, 0x12, 0x51, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x62, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x51, 0x0a, 0x0b, 0x6f, 0x64, 0x62, 0x5f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xe0, 0x41, 0x01, 0xfa, 0x41,
	0x2a, 0x0a, 0x28, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x4f, 0x64, 0x62, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x0a, 0x6f, 0x64, 0x62,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x4e, 0x0a, 0x0a, 0x6f, 0x64, 0x62, 0x5f, 0x73,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xe0, 0x41, 0x02,
	0xfa, 0x41, 0x29, 0x0a, 0x27, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x4f, 0x64, 0x62, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x09, 0x6f, 0x64,
	0x62, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x0e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x0d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x07, 0x6f, 0x63, 0x69, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x06, 0x6f, 0x63, 0x69, 0x55, 0x72, 0x6c, 0x1a, 0x39, 0x0a, 0x0b, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x7f, 0xea, 0x41, 0x7c, 0x0a, 0x26, 0x6f, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x62, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x12, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x64, 0x62, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x64, 0x62, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x7d, 0x2a, 0x09, 0x64, 0x62, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x32, 0x08, 0x64,
	0x62, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22, 0x8b, 0x0f, 0x0a, 0x12, 0x44, 0x62, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x19,
	0x0a, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x1c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x5f, 0x67, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x18,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x47, 0x62, 0x12, 0x7a, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x4a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x62, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x44, 0x62, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x45, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x69, 0x0a, 0x0d, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x62, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0c, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12,
	0x2b, 0x0a, 0x0f, 0x73, 0x73, 0x68, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65,
	0x79, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x73,
	0x73, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x2c, 0x0a, 0x0f,
	0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x68, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1f, 0x0a, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x70, 0x12,
	0x7a, 0x0a, 0x17, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x62, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x15, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65,
	0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x77, 0x0a, 0x0f, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x49, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x62, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x2e, 0x44, 0x62, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79,
	0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0e, 0x6c,
	0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a,
	0x07, 0x64, 0x62, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x62, 0x48, 0x6f, 0x6d, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x64, 0x62, 0x48,
	0x6f, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6f, 0x63, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x6f, 0x63, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0e,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x67, 0x62, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x53, 0x69, 0x7a, 0x65, 0x47, 0x62, 0x12, 0x69, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x62, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x12, 0x34, 0x0a, 0x14, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x67, 0x62, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x11, 0x64, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x47, 0x62, 0x12, 0x34, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x6f,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x67, 0x62,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x11, 0x72, 0x65, 0x63,
	0x6f, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x47, 0x62, 0x12, 0x1b,
	0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0a, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x60, 0x0a, 0x11, 0x64, 0x62, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x62, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x0f, 0x64, 0x62, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x9c, 0x01, 0x0a, 0x17, 0x44, 0x62, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a,
	0x26, 0x44, 0x42, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42,
	0x41, 0x53, 0x45, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41,
	0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12,
	0x16, 0x0a, 0x12, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x52, 0x49, 0x53, 0x45, 0x5f, 0x45, 0x44,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x4e, 0x54, 0x45, 0x52,
	0x50, 0x52, 0x49, 0x53, 0x45, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x49,
	0x47, 0x48, 0x5f, 0x50, 0x45, 0x52, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x03,
	0x22, 0x5f, 0x0a, 0x0c, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x12, 0x1d, 0x0a, 0x19, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x10, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x4c, 0x55,
	0x44, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x59,
	0x4f, 0x55, 0x52, 0x5f, 0x4f, 0x57, 0x4e, 0x5f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x10,
	0x02, 0x22, 0xee, 0x01, 0x0a, 0x16, 0x44, 0x62, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x69,
	0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x25,
	0x44, 0x42, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59,
	0x43, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x4f, 0x56, 0x49,
	0x53, 0x49, 0x4f, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x56, 0x41,
	0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e,
	0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x45, 0x52, 0x4d, 0x49,
	0x4e, 0x41, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x49, 0x47, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10,
	0x07, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x08, 0x12, 0x13,
	0x0a, 0x0f, 0x4e, 0x45, 0x45, 0x44, 0x53, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x4e, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47,
	0x10, 0x0a, 0x22, 0x41, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x43, 0x50, 0x55, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4f,
	0x43, 0x50, 0x55, 0x10, 0x02, 0x22, 0xa5, 0x01, 0x0a, 0x1d, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44,
	0x62, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x46, 0x0a, 0x1d, 0x69, 0x73, 0x5f, 0x64, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x1a, 0x69, 0x73, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x3c, 0x0a, 0x18, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x6c,
	0x6f, 0x67, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x15, 0x69, 0x73, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xd3, 0x01,
	0x0a, 0x0f, 0x44, 0x62, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x75, 0x0a, 0x12, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x62, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x49, 0x0a, 0x11, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a,
	0x1e, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x53, 0x4d, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x56,
	0x4d, 0x10, 0x02, 0x22, 0xe3, 0x01, 0x0a, 0x06, 0x44, 0x62, 0x48, 0x6f, 0x6d, 0x65, 0x12, 0x26,
	0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x64, 0x62, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x09, 0x64, 0x62, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x08, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x1b, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x18, 0x69, 0x73, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x75, 0x64, 0x69, 0x74, 0x69,
	0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xfe, 0x01, 0x0a, 0x15, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x62, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2e, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x28, 0x12, 0x26, 0x6f, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x62, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0c, 0x64,
	0x62, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x64, 0x62, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x12, 0x4a, 0x0a, 0x09, 0x64, 0x62, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x62, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x64, 0x62, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x2a,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0b, 0xe0, 0x41, 0x01, 0xe2, 0x8c, 0xcf, 0xd7, 0x08, 0x02, 0x08, 0x01, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x87, 0x01, 0x0a, 0x15, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x62, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2e, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x28, 0x0a, 0x26, 0x6f, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x62, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xe0, 0x41,
	0x01, 0xe2, 0x8c, 0xcf, 0xd7, 0x08, 0x02, 0x08, 0x01, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x22, 0x58, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x44, 0x62, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x28,
	0x0a, 0x26, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x44, 0x62, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xe1,
	0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x62, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x28, 0x12,
	0x26, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44,
	0x62, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x79, 0x22, 0x88, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x62, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0a,
	0x64, 0x62, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x62, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x64, 0x62, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0xe7, 0x01,
	0x0a, 0x22, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x42, 0x0d, 0x44, 0x62, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4a, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x6f, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2f,
	0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x70, 0x62,
	0x3b, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x70,
	0x62, 0xaa, 0x02, 0x1e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x56, 0x31, 0xca, 0x02, 0x1e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5c, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x5c, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x5c, 0x56, 0x31, 0xea, 0x02, 0x21, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_oracledatabase_v1_db_system_proto_rawDescOnce sync.Once
	file_google_cloud_oracledatabase_v1_db_system_proto_rawDescData = file_google_cloud_oracledatabase_v1_db_system_proto_rawDesc
)

func file_google_cloud_oracledatabase_v1_db_system_proto_rawDescGZIP() []byte {
	file_google_cloud_oracledatabase_v1_db_system_proto_rawDescOnce.Do(func() {
		file_google_cloud_oracledatabase_v1_db_system_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_oracledatabase_v1_db_system_proto_rawDescData)
	})
	return file_google_cloud_oracledatabase_v1_db_system_proto_rawDescData
}

var file_google_cloud_oracledatabase_v1_db_system_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_google_cloud_oracledatabase_v1_db_system_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_google_cloud_oracledatabase_v1_db_system_proto_goTypes = []any{
	(DbSystemProperties_DbSystemDatabaseEdition)(0), // 0: google.cloud.oracledatabase.v1.DbSystemProperties.DbSystemDatabaseEdition
	(DbSystemProperties_LicenseModel)(0),            // 1: google.cloud.oracledatabase.v1.DbSystemProperties.LicenseModel
	(DbSystemProperties_DbSystemLifecycleState)(0),  // 2: google.cloud.oracledatabase.v1.DbSystemProperties.DbSystemLifecycleState
	(DbSystemProperties_ComputeModel)(0),            // 3: google.cloud.oracledatabase.v1.DbSystemProperties.ComputeModel
	(DbSystemOptions_StorageManagement)(0),          // 4: google.cloud.oracledatabase.v1.DbSystemOptions.StorageManagement
	(*DbSystem)(nil),                                // 5: google.cloud.oracledatabase.v1.DbSystem
	(*DbSystemProperties)(nil),                      // 6: google.cloud.oracledatabase.v1.DbSystemProperties
	(*DataCollectionOptionsDbSystem)(nil),           // 7: google.cloud.oracledatabase.v1.DataCollectionOptionsDbSystem
	(*DbSystemOptions)(nil),                         // 8: google.cloud.oracledatabase.v1.DbSystemOptions
	(*DbHome)(nil),                                  // 9: google.cloud.oracledatabase.v1.DbHome
	(*CreateDbSystemRequest)(nil),                   // 10: google.cloud.oracledatabase.v1.CreateDbSystemRequest
	(*DeleteDbSystemRequest)(nil),                   // 11: google.cloud.oracledatabase.v1.DeleteDbSystemRequest
	(*GetDbSystemRequest)(nil),                      // 12: google.cloud.oracledatabase.v1.GetDbSystemRequest
	(*ListDbSystemsRequest)(nil),                    // 13: google.cloud.oracledatabase.v1.ListDbSystemsRequest
	(*ListDbSystemsResponse)(nil),                   // 14: google.cloud.oracledatabase.v1.ListDbSystemsResponse
	nil,                                             // 15: google.cloud.oracledatabase.v1.DbSystem.LabelsEntry
	(*timestamppb.Timestamp)(nil),                   // 16: google.protobuf.Timestamp
	(*datetime.TimeZone)(nil),                       // 17: google.type.TimeZone
	(*Database)(nil),                                // 18: google.cloud.oracledatabase.v1.Database
}
var file_google_cloud_oracledatabase_v1_db_system_proto_depIdxs = []int32{
	6,  // 0: google.cloud.oracledatabase.v1.DbSystem.properties:type_name -> google.cloud.oracledatabase.v1.DbSystemProperties
	15, // 1: google.cloud.oracledatabase.v1.DbSystem.labels:type_name -> google.cloud.oracledatabase.v1.DbSystem.LabelsEntry
	16, // 2: google.cloud.oracledatabase.v1.DbSystem.create_time:type_name -> google.protobuf.Timestamp
	0,  // 3: google.cloud.oracledatabase.v1.DbSystemProperties.database_edition:type_name -> google.cloud.oracledatabase.v1.DbSystemProperties.DbSystemDatabaseEdition
	1,  // 4: google.cloud.oracledatabase.v1.DbSystemProperties.license_model:type_name -> google.cloud.oracledatabase.v1.DbSystemProperties.LicenseModel
	7,  // 5: google.cloud.oracledatabase.v1.DbSystemProperties.data_collection_options:type_name -> google.cloud.oracledatabase.v1.DataCollectionOptionsDbSystem
	17, // 6: google.cloud.oracledatabase.v1.DbSystemProperties.time_zone:type_name -> google.type.TimeZone
	2,  // 7: google.cloud.oracledatabase.v1.DbSystemProperties.lifecycle_state:type_name -> google.cloud.oracledatabase.v1.DbSystemProperties.DbSystemLifecycleState
	9,  // 8: google.cloud.oracledatabase.v1.DbSystemProperties.db_home:type_name -> google.cloud.oracledatabase.v1.DbHome
	3,  // 9: google.cloud.oracledatabase.v1.DbSystemProperties.compute_model:type_name -> google.cloud.oracledatabase.v1.DbSystemProperties.ComputeModel
	8,  // 10: google.cloud.oracledatabase.v1.DbSystemProperties.db_system_options:type_name -> google.cloud.oracledatabase.v1.DbSystemOptions
	4,  // 11: google.cloud.oracledatabase.v1.DbSystemOptions.storage_management:type_name -> google.cloud.oracledatabase.v1.DbSystemOptions.StorageManagement
	18, // 12: google.cloud.oracledatabase.v1.DbHome.database:type_name -> google.cloud.oracledatabase.v1.Database
	5,  // 13: google.cloud.oracledatabase.v1.CreateDbSystemRequest.db_system:type_name -> google.cloud.oracledatabase.v1.DbSystem
	5,  // 14: google.cloud.oracledatabase.v1.ListDbSystemsResponse.db_systems:type_name -> google.cloud.oracledatabase.v1.DbSystem
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_google_cloud_oracledatabase_v1_db_system_proto_init() }
func file_google_cloud_oracledatabase_v1_db_system_proto_init() {
	if File_google_cloud_oracledatabase_v1_db_system_proto != nil {
		return
	}
	file_google_cloud_oracledatabase_v1_database_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_oracledatabase_v1_db_system_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_cloud_oracledatabase_v1_db_system_proto_goTypes,
		DependencyIndexes: file_google_cloud_oracledatabase_v1_db_system_proto_depIdxs,
		EnumInfos:         file_google_cloud_oracledatabase_v1_db_system_proto_enumTypes,
		MessageInfos:      file_google_cloud_oracledatabase_v1_db_system_proto_msgTypes,
	}.Build()
	File_google_cloud_oracledatabase_v1_db_system_proto = out.File
	file_google_cloud_oracledatabase_v1_db_system_proto_rawDesc = nil
	file_google_cloud_oracledatabase_v1_db_system_proto_goTypes = nil
	file_google_cloud_oracledatabase_v1_db_system_proto_depIdxs = nil
}
