// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.7
// source: google/cloud/oracledatabase/v1/pluggable_database.proto

package oracledatabasepb

import (
	reflect "reflect"
	sync "sync"

	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The various lifecycle states of the PluggableDatabase.
type PluggableDatabaseProperties_PluggableDatabaseLifecycleState int32

const (
	// The lifecycle state is unspecified.
	PluggableDatabaseProperties_PLUGGABLE_DATABASE_LIFECYCLE_STATE_UNSPECIFIED PluggableDatabaseProperties_PluggableDatabaseLifecycleState = 0
	// The pluggable database is provisioning.
	PluggableDatabaseProperties_PROVISIONING PluggableDatabaseProperties_PluggableDatabaseLifecycleState = 1
	// The pluggable database is available.
	PluggableDatabaseProperties_AVAILABLE PluggableDatabaseProperties_PluggableDatabaseLifecycleState = 2
	// The pluggable database is terminating.
	PluggableDatabaseProperties_TERMINATING PluggableDatabaseProperties_PluggableDatabaseLifecycleState = 3
	// The pluggable database is terminated.
	PluggableDatabaseProperties_TERMINATED PluggableDatabaseProperties_PluggableDatabaseLifecycleState = 4
	// The pluggable database is updating.
	PluggableDatabaseProperties_UPDATING PluggableDatabaseProperties_PluggableDatabaseLifecycleState = 5
	// The pluggable database is in a failed state.
	PluggableDatabaseProperties_FAILED PluggableDatabaseProperties_PluggableDatabaseLifecycleState = 6
	// The pluggable database is relocating.
	PluggableDatabaseProperties_RELOCATING PluggableDatabaseProperties_PluggableDatabaseLifecycleState = 7
	// The pluggable database is relocated.
	PluggableDatabaseProperties_RELOCATED PluggableDatabaseProperties_PluggableDatabaseLifecycleState = 8
	// The pluggable database is refreshing.
	PluggableDatabaseProperties_REFRESHING PluggableDatabaseProperties_PluggableDatabaseLifecycleState = 9
	// The pluggable database is restoring.
	PluggableDatabaseProperties_RESTORE_IN_PROGRESS PluggableDatabaseProperties_PluggableDatabaseLifecycleState = 10
	// The pluggable database restore failed.
	PluggableDatabaseProperties_RESTORE_FAILED PluggableDatabaseProperties_PluggableDatabaseLifecycleState = 11
	// The pluggable database is backing up.
	PluggableDatabaseProperties_BACKUP_IN_PROGRESS PluggableDatabaseProperties_PluggableDatabaseLifecycleState = 12
	// The pluggable database is disabled.
	PluggableDatabaseProperties_DISABLED PluggableDatabaseProperties_PluggableDatabaseLifecycleState = 13
)

// Enum value maps for PluggableDatabaseProperties_PluggableDatabaseLifecycleState.
var (
	PluggableDatabaseProperties_PluggableDatabaseLifecycleState_name = map[int32]string{
		0:  "PLUGGABLE_DATABASE_LIFECYCLE_STATE_UNSPECIFIED",
		1:  "PROVISIONING",
		2:  "AVAILABLE",
		3:  "TERMINATING",
		4:  "TERMINATED",
		5:  "UPDATING",
		6:  "FAILED",
		7:  "RELOCATING",
		8:  "RELOCATED",
		9:  "REFRESHING",
		10: "RESTORE_IN_PROGRESS",
		11: "RESTORE_FAILED",
		12: "BACKUP_IN_PROGRESS",
		13: "DISABLED",
	}
	PluggableDatabaseProperties_PluggableDatabaseLifecycleState_value = map[string]int32{
		"PLUGGABLE_DATABASE_LIFECYCLE_STATE_UNSPECIFIED": 0,
		"PROVISIONING":        1,
		"AVAILABLE":           2,
		"TERMINATING":         3,
		"TERMINATED":          4,
		"UPDATING":            5,
		"FAILED":              6,
		"RELOCATING":          7,
		"RELOCATED":           8,
		"REFRESHING":          9,
		"RESTORE_IN_PROGRESS": 10,
		"RESTORE_FAILED":      11,
		"BACKUP_IN_PROGRESS":  12,
		"DISABLED":            13,
	}
)

func (x PluggableDatabaseProperties_PluggableDatabaseLifecycleState) Enum() *PluggableDatabaseProperties_PluggableDatabaseLifecycleState {
	p := new(PluggableDatabaseProperties_PluggableDatabaseLifecycleState)
	*p = x
	return p
}

func (x PluggableDatabaseProperties_PluggableDatabaseLifecycleState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PluggableDatabaseProperties_PluggableDatabaseLifecycleState) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_oracledatabase_v1_pluggable_database_proto_enumTypes[0].Descriptor()
}

func (PluggableDatabaseProperties_PluggableDatabaseLifecycleState) Type() protoreflect.EnumType {
	return &file_google_cloud_oracledatabase_v1_pluggable_database_proto_enumTypes[0]
}

func (x PluggableDatabaseProperties_PluggableDatabaseLifecycleState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PluggableDatabaseProperties_PluggableDatabaseLifecycleState.Descriptor instead.
func (PluggableDatabaseProperties_PluggableDatabaseLifecycleState) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_pluggable_database_proto_rawDescGZIP(), []int{1, 0}
}

// The status of Operations Insights for this Database.
type PluggableDatabaseProperties_OperationsInsightsState int32

const (
	// The status is not specified.
	PluggableDatabaseProperties_OPERATIONS_INSIGHTS_STATE_UNSPECIFIED PluggableDatabaseProperties_OperationsInsightsState = 0
	// Operations Insights is enabling.
	PluggableDatabaseProperties_ENABLING PluggableDatabaseProperties_OperationsInsightsState = 1
	// Operations Insights is enabled.
	PluggableDatabaseProperties_ENABLED PluggableDatabaseProperties_OperationsInsightsState = 2
	// Operations Insights is disabling.
	PluggableDatabaseProperties_DISABLING PluggableDatabaseProperties_OperationsInsightsState = 3
	// Operations Insights is not enabled.
	PluggableDatabaseProperties_NOT_ENABLED PluggableDatabaseProperties_OperationsInsightsState = 4
	// Operations Insights failed to enable.
	PluggableDatabaseProperties_FAILED_ENABLING PluggableDatabaseProperties_OperationsInsightsState = 5
	// Operations Insights failed to disable.
	PluggableDatabaseProperties_FAILED_DISABLING PluggableDatabaseProperties_OperationsInsightsState = 6
)

// Enum value maps for PluggableDatabaseProperties_OperationsInsightsState.
var (
	PluggableDatabaseProperties_OperationsInsightsState_name = map[int32]string{
		0: "OPERATIONS_INSIGHTS_STATE_UNSPECIFIED",
		1: "ENABLING",
		2: "ENABLED",
		3: "DISABLING",
		4: "NOT_ENABLED",
		5: "FAILED_ENABLING",
		6: "FAILED_DISABLING",
	}
	PluggableDatabaseProperties_OperationsInsightsState_value = map[string]int32{
		"OPERATIONS_INSIGHTS_STATE_UNSPECIFIED": 0,
		"ENABLING":                              1,
		"ENABLED":                               2,
		"DISABLING":                             3,
		"NOT_ENABLED":                           4,
		"FAILED_ENABLING":                       5,
		"FAILED_DISABLING":                      6,
	}
)

func (x PluggableDatabaseProperties_OperationsInsightsState) Enum() *PluggableDatabaseProperties_OperationsInsightsState {
	p := new(PluggableDatabaseProperties_OperationsInsightsState)
	*p = x
	return p
}

func (x PluggableDatabaseProperties_OperationsInsightsState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PluggableDatabaseProperties_OperationsInsightsState) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_oracledatabase_v1_pluggable_database_proto_enumTypes[1].Descriptor()
}

func (PluggableDatabaseProperties_OperationsInsightsState) Type() protoreflect.EnumType {
	return &file_google_cloud_oracledatabase_v1_pluggable_database_proto_enumTypes[1]
}

func (x PluggableDatabaseProperties_OperationsInsightsState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PluggableDatabaseProperties_OperationsInsightsState.Descriptor instead.
func (PluggableDatabaseProperties_OperationsInsightsState) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_pluggable_database_proto_rawDescGZIP(), []int{1, 1}
}

// The mode that the pluggable database is in to open it.
type PluggableDatabaseNodeLevelDetails_PluggableDatabaseOpenMode int32

const (
	// The open mode is unspecified.
	PluggableDatabaseNodeLevelDetails_PLUGGABLE_DATABASE_OPEN_MODE_UNSPECIFIED PluggableDatabaseNodeLevelDetails_PluggableDatabaseOpenMode = 0
	// The pluggable database is opened in read-only mode.
	PluggableDatabaseNodeLevelDetails_READ_ONLY PluggableDatabaseNodeLevelDetails_PluggableDatabaseOpenMode = 1
	// The pluggable database is opened in read-write mode.
	PluggableDatabaseNodeLevelDetails_READ_WRITE PluggableDatabaseNodeLevelDetails_PluggableDatabaseOpenMode = 2
	// The pluggable database is mounted.
	PluggableDatabaseNodeLevelDetails_MOUNTED PluggableDatabaseNodeLevelDetails_PluggableDatabaseOpenMode = 3
	// The pluggable database is migrated.
	PluggableDatabaseNodeLevelDetails_MIGRATE PluggableDatabaseNodeLevelDetails_PluggableDatabaseOpenMode = 4
)

// Enum value maps for PluggableDatabaseNodeLevelDetails_PluggableDatabaseOpenMode.
var (
	PluggableDatabaseNodeLevelDetails_PluggableDatabaseOpenMode_name = map[int32]string{
		0: "PLUGGABLE_DATABASE_OPEN_MODE_UNSPECIFIED",
		1: "READ_ONLY",
		2: "READ_WRITE",
		3: "MOUNTED",
		4: "MIGRATE",
	}
	PluggableDatabaseNodeLevelDetails_PluggableDatabaseOpenMode_value = map[string]int32{
		"PLUGGABLE_DATABASE_OPEN_MODE_UNSPECIFIED": 0,
		"READ_ONLY":  1,
		"READ_WRITE": 2,
		"MOUNTED":    3,
		"MIGRATE":    4,
	}
)

func (x PluggableDatabaseNodeLevelDetails_PluggableDatabaseOpenMode) Enum() *PluggableDatabaseNodeLevelDetails_PluggableDatabaseOpenMode {
	p := new(PluggableDatabaseNodeLevelDetails_PluggableDatabaseOpenMode)
	*p = x
	return p
}

func (x PluggableDatabaseNodeLevelDetails_PluggableDatabaseOpenMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PluggableDatabaseNodeLevelDetails_PluggableDatabaseOpenMode) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_oracledatabase_v1_pluggable_database_proto_enumTypes[2].Descriptor()
}

func (PluggableDatabaseNodeLevelDetails_PluggableDatabaseOpenMode) Type() protoreflect.EnumType {
	return &file_google_cloud_oracledatabase_v1_pluggable_database_proto_enumTypes[2]
}

func (x PluggableDatabaseNodeLevelDetails_PluggableDatabaseOpenMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PluggableDatabaseNodeLevelDetails_PluggableDatabaseOpenMode.Descriptor instead.
func (PluggableDatabaseNodeLevelDetails_PluggableDatabaseOpenMode) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_pluggable_database_proto_rawDescGZIP(), []int{3, 0}
}

// The status of the Database Management service.
type DatabaseManagementConfig_ManagementState int32

const (
	// The status is not specified.
	DatabaseManagementConfig_MANAGEMENT_STATE_UNSPECIFIED DatabaseManagementConfig_ManagementState = 0
	// The Database Management service is enabling.
	DatabaseManagementConfig_ENABLING DatabaseManagementConfig_ManagementState = 1
	// The Database Management service is enabled.
	DatabaseManagementConfig_ENABLED DatabaseManagementConfig_ManagementState = 2
	// The Database Management service is disabling.
	DatabaseManagementConfig_DISABLING DatabaseManagementConfig_ManagementState = 3
	// The Database Management service is disabled.
	DatabaseManagementConfig_DISABLED DatabaseManagementConfig_ManagementState = 4
	// The Database Management service is updating.
	DatabaseManagementConfig_UPDATING DatabaseManagementConfig_ManagementState = 5
	// The Database Management service failed to enable.
	DatabaseManagementConfig_FAILED_ENABLING DatabaseManagementConfig_ManagementState = 6
	// The Database Management service failed to disable.
	DatabaseManagementConfig_FAILED_DISABLING DatabaseManagementConfig_ManagementState = 7
	// The Database Management service failed to update.
	DatabaseManagementConfig_FAILED_UPDATING DatabaseManagementConfig_ManagementState = 8
)

// Enum value maps for DatabaseManagementConfig_ManagementState.
var (
	DatabaseManagementConfig_ManagementState_name = map[int32]string{
		0: "MANAGEMENT_STATE_UNSPECIFIED",
		1: "ENABLING",
		2: "ENABLED",
		3: "DISABLING",
		4: "DISABLED",
		5: "UPDATING",
		6: "FAILED_ENABLING",
		7: "FAILED_DISABLING",
		8: "FAILED_UPDATING",
	}
	DatabaseManagementConfig_ManagementState_value = map[string]int32{
		"MANAGEMENT_STATE_UNSPECIFIED": 0,
		"ENABLING":                     1,
		"ENABLED":                      2,
		"DISABLING":                    3,
		"DISABLED":                     4,
		"UPDATING":                     5,
		"FAILED_ENABLING":              6,
		"FAILED_DISABLING":             7,
		"FAILED_UPDATING":              8,
	}
)

func (x DatabaseManagementConfig_ManagementState) Enum() *DatabaseManagementConfig_ManagementState {
	p := new(DatabaseManagementConfig_ManagementState)
	*p = x
	return p
}

func (x DatabaseManagementConfig_ManagementState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DatabaseManagementConfig_ManagementState) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_oracledatabase_v1_pluggable_database_proto_enumTypes[3].Descriptor()
}

func (DatabaseManagementConfig_ManagementState) Type() protoreflect.EnumType {
	return &file_google_cloud_oracledatabase_v1_pluggable_database_proto_enumTypes[3]
}

func (x DatabaseManagementConfig_ManagementState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DatabaseManagementConfig_ManagementState.Descriptor instead.
func (DatabaseManagementConfig_ManagementState) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_pluggable_database_proto_rawDescGZIP(), []int{4, 0}
}

// The Database Management type.
type DatabaseManagementConfig_ManagementType int32

const (
	// The type is not specified.
	DatabaseManagementConfig_MANAGEMENT_TYPE_UNSPECIFIED DatabaseManagementConfig_ManagementType = 0
	// Basic Database Management.
	DatabaseManagementConfig_BASIC DatabaseManagementConfig_ManagementType = 1
	// Advanced Database Management.
	DatabaseManagementConfig_ADVANCED DatabaseManagementConfig_ManagementType = 2
)

// Enum value maps for DatabaseManagementConfig_ManagementType.
var (
	DatabaseManagementConfig_ManagementType_name = map[int32]string{
		0: "MANAGEMENT_TYPE_UNSPECIFIED",
		1: "BASIC",
		2: "ADVANCED",
	}
	DatabaseManagementConfig_ManagementType_value = map[string]int32{
		"MANAGEMENT_TYPE_UNSPECIFIED": 0,
		"BASIC":                       1,
		"ADVANCED":                    2,
	}
)

func (x DatabaseManagementConfig_ManagementType) Enum() *DatabaseManagementConfig_ManagementType {
	p := new(DatabaseManagementConfig_ManagementType)
	*p = x
	return p
}

func (x DatabaseManagementConfig_ManagementType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DatabaseManagementConfig_ManagementType) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_oracledatabase_v1_pluggable_database_proto_enumTypes[4].Descriptor()
}

func (DatabaseManagementConfig_ManagementType) Type() protoreflect.EnumType {
	return &file_google_cloud_oracledatabase_v1_pluggable_database_proto_enumTypes[4]
}

func (x DatabaseManagementConfig_ManagementType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DatabaseManagementConfig_ManagementType.Descriptor instead.
func (DatabaseManagementConfig_ManagementType) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_pluggable_database_proto_rawDescGZIP(), []int{4, 1}
}

// The PluggableDatabase resource.
// https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/PluggableDatabase/
type PluggableDatabase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier. The name of the PluggableDatabase resource in the following
	// format:
	// projects/{project}/locations/{region}/pluggableDatabases/{pluggable_database}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. The properties of the PluggableDatabase.
	Properties *PluggableDatabaseProperties `protobuf:"bytes,2,opt,name=properties,proto3" json:"properties,omitempty"`
	// Output only. HTTPS link to OCI resources exposed to Customer via UI
	// Interface.
	OciUrl string `protobuf:"bytes,3,opt,name=oci_url,json=ociUrl,proto3" json:"oci_url,omitempty"`
	// Output only. The date and time that the PluggableDatabase was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *PluggableDatabase) Reset() {
	*x = PluggableDatabase{}
	mi := &file_google_cloud_oracledatabase_v1_pluggable_database_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PluggableDatabase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluggableDatabase) ProtoMessage() {}

func (x *PluggableDatabase) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_oracledatabase_v1_pluggable_database_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluggableDatabase.ProtoReflect.Descriptor instead.
func (*PluggableDatabase) Descriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_pluggable_database_proto_rawDescGZIP(), []int{0}
}

func (x *PluggableDatabase) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PluggableDatabase) GetProperties() *PluggableDatabaseProperties {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *PluggableDatabase) GetOciUrl() string {
	if x != nil {
		return x.OciUrl
	}
	return ""
}

func (x *PluggableDatabase) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

// The properties of a PluggableDatabase.
type PluggableDatabaseProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The OCID of the compartment.
	CompartmentId string `protobuf:"bytes,1,opt,name=compartment_id,json=compartmentId,proto3" json:"compartment_id,omitempty"`
	// Optional. The Connection strings used to connect to the Oracle Database.
	ConnectionStrings *PluggableDatabaseConnectionStrings `protobuf:"bytes,2,opt,name=connection_strings,json=connectionStrings,proto3" json:"connection_strings,omitempty"`
	// Required. The OCID of the CDB.
	ContainerDatabaseOcid string `protobuf:"bytes,3,opt,name=container_database_ocid,json=containerDatabaseOcid,proto3" json:"container_database_ocid,omitempty"`
	// Optional. Defined tags for this resource. Each key is predefined and scoped
	// to a namespace.
	DefinedTags map[string]*PluggableDatabaseProperties_DefinedTagValue `protobuf:"bytes,4,rep,name=defined_tags,json=definedTags,proto3" json:"defined_tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Optional. Free-form tags for this resource. Each tag is a simple key-value
	// pair with no predefined name, type, or namespace.
	FreeformTags map[string]string `protobuf:"bytes,5,rep,name=freeform_tags,json=freeformTags,proto3" json:"freeform_tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Output only. The OCID of the pluggable database.
	Ocid string `protobuf:"bytes,6,opt,name=ocid,proto3" json:"ocid,omitempty"`
	// Optional. The restricted mode of the pluggable database. If a pluggable
	// database is opened in restricted mode, the user needs both create a session
	// and have restricted session privileges to connect to it.
	IsRestricted bool `protobuf:"varint,7,opt,name=is_restricted,json=isRestricted,proto3" json:"is_restricted,omitempty"`
	// Output only. Additional information about the current lifecycle state.
	LifecycleDetails string `protobuf:"bytes,8,opt,name=lifecycle_details,json=lifecycleDetails,proto3" json:"lifecycle_details,omitempty"`
	// Output only. The current state of the pluggable database.
	LifecycleState PluggableDatabaseProperties_PluggableDatabaseLifecycleState `protobuf:"varint,9,opt,name=lifecycle_state,json=lifecycleState,proto3,enum=google.cloud.oracledatabase.v1.PluggableDatabaseProperties_PluggableDatabaseLifecycleState" json:"lifecycle_state,omitempty"`
	// Required. The database name.
	PdbName string `protobuf:"bytes,10,opt,name=pdb_name,json=pdbName,proto3" json:"pdb_name,omitempty"`
	// Optional. Pluggable Database Node Level Details
	PdbNodeLevelDetails []*PluggableDatabaseNodeLevelDetails `protobuf:"bytes,11,rep,name=pdb_node_level_details,json=pdbNodeLevelDetails,proto3" json:"pdb_node_level_details,omitempty"`
	// Output only. The configuration of the Database Management service.
	DatabaseManagementConfig *DatabaseManagementConfig `protobuf:"bytes,13,opt,name=database_management_config,json=databaseManagementConfig,proto3" json:"database_management_config,omitempty"`
	// Output only. The status of Operations Insights for this Database.
	OperationsInsightsState PluggableDatabaseProperties_OperationsInsightsState `protobuf:"varint,14,opt,name=operations_insights_state,json=operationsInsightsState,proto3,enum=google.cloud.oracledatabase.v1.PluggableDatabaseProperties_OperationsInsightsState" json:"operations_insights_state,omitempty"`
}

func (x *PluggableDatabaseProperties) Reset() {
	*x = PluggableDatabaseProperties{}
	mi := &file_google_cloud_oracledatabase_v1_pluggable_database_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PluggableDatabaseProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluggableDatabaseProperties) ProtoMessage() {}

func (x *PluggableDatabaseProperties) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_oracledatabase_v1_pluggable_database_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluggableDatabaseProperties.ProtoReflect.Descriptor instead.
func (*PluggableDatabaseProperties) Descriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_pluggable_database_proto_rawDescGZIP(), []int{1}
}

func (x *PluggableDatabaseProperties) GetCompartmentId() string {
	if x != nil {
		return x.CompartmentId
	}
	return ""
}

func (x *PluggableDatabaseProperties) GetConnectionStrings() *PluggableDatabaseConnectionStrings {
	if x != nil {
		return x.ConnectionStrings
	}
	return nil
}

func (x *PluggableDatabaseProperties) GetContainerDatabaseOcid() string {
	if x != nil {
		return x.ContainerDatabaseOcid
	}
	return ""
}

func (x *PluggableDatabaseProperties) GetDefinedTags() map[string]*PluggableDatabaseProperties_DefinedTagValue {
	if x != nil {
		return x.DefinedTags
	}
	return nil
}

func (x *PluggableDatabaseProperties) GetFreeformTags() map[string]string {
	if x != nil {
		return x.FreeformTags
	}
	return nil
}

func (x *PluggableDatabaseProperties) GetOcid() string {
	if x != nil {
		return x.Ocid
	}
	return ""
}

func (x *PluggableDatabaseProperties) GetIsRestricted() bool {
	if x != nil {
		return x.IsRestricted
	}
	return false
}

func (x *PluggableDatabaseProperties) GetLifecycleDetails() string {
	if x != nil {
		return x.LifecycleDetails
	}
	return ""
}

func (x *PluggableDatabaseProperties) GetLifecycleState() PluggableDatabaseProperties_PluggableDatabaseLifecycleState {
	if x != nil {
		return x.LifecycleState
	}
	return PluggableDatabaseProperties_PLUGGABLE_DATABASE_LIFECYCLE_STATE_UNSPECIFIED
}

func (x *PluggableDatabaseProperties) GetPdbName() string {
	if x != nil {
		return x.PdbName
	}
	return ""
}

func (x *PluggableDatabaseProperties) GetPdbNodeLevelDetails() []*PluggableDatabaseNodeLevelDetails {
	if x != nil {
		return x.PdbNodeLevelDetails
	}
	return nil
}

func (x *PluggableDatabaseProperties) GetDatabaseManagementConfig() *DatabaseManagementConfig {
	if x != nil {
		return x.DatabaseManagementConfig
	}
	return nil
}

func (x *PluggableDatabaseProperties) GetOperationsInsightsState() PluggableDatabaseProperties_OperationsInsightsState {
	if x != nil {
		return x.OperationsInsightsState
	}
	return PluggableDatabaseProperties_OPERATIONS_INSIGHTS_STATE_UNSPECIFIED
}

// The connection strings used to connect to the Oracle Database.
type PluggableDatabaseConnectionStrings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. All connection strings to use to connect to the pluggable
	// database.
	AllConnectionStrings map[string]string `protobuf:"bytes,1,rep,name=all_connection_strings,json=allConnectionStrings,proto3" json:"all_connection_strings,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Optional. The default connection string to use to connect to the pluggable
	// database.
	PdbDefault string `protobuf:"bytes,2,opt,name=pdb_default,json=pdbDefault,proto3" json:"pdb_default,omitempty"`
	// Optional. The default connection string to use to connect to the pluggable
	// database using IP.
	PdbIpDefault string `protobuf:"bytes,3,opt,name=pdb_ip_default,json=pdbIpDefault,proto3" json:"pdb_ip_default,omitempty"`
}

func (x *PluggableDatabaseConnectionStrings) Reset() {
	*x = PluggableDatabaseConnectionStrings{}
	mi := &file_google_cloud_oracledatabase_v1_pluggable_database_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PluggableDatabaseConnectionStrings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluggableDatabaseConnectionStrings) ProtoMessage() {}

func (x *PluggableDatabaseConnectionStrings) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_oracledatabase_v1_pluggable_database_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluggableDatabaseConnectionStrings.ProtoReflect.Descriptor instead.
func (*PluggableDatabaseConnectionStrings) Descriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_pluggable_database_proto_rawDescGZIP(), []int{2}
}

func (x *PluggableDatabaseConnectionStrings) GetAllConnectionStrings() map[string]string {
	if x != nil {
		return x.AllConnectionStrings
	}
	return nil
}

func (x *PluggableDatabaseConnectionStrings) GetPdbDefault() string {
	if x != nil {
		return x.PdbDefault
	}
	return ""
}

func (x *PluggableDatabaseConnectionStrings) GetPdbIpDefault() string {
	if x != nil {
		return x.PdbIpDefault
	}
	return ""
}

// The Pluggable Database Node Level Details.
type PluggableDatabaseNodeLevelDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The Node name of the Database home.
	NodeName string `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// Required. The mode that the pluggable database is in to open it.
	OpenMode PluggableDatabaseNodeLevelDetails_PluggableDatabaseOpenMode `protobuf:"varint,2,opt,name=open_mode,json=openMode,proto3,enum=google.cloud.oracledatabase.v1.PluggableDatabaseNodeLevelDetails_PluggableDatabaseOpenMode" json:"open_mode,omitempty"`
	// Required. The OCID of the Pluggable Database.
	PluggableDatabaseId string `protobuf:"bytes,3,opt,name=pluggable_database_id,json=pluggableDatabaseId,proto3" json:"pluggable_database_id,omitempty"`
}

func (x *PluggableDatabaseNodeLevelDetails) Reset() {
	*x = PluggableDatabaseNodeLevelDetails{}
	mi := &file_google_cloud_oracledatabase_v1_pluggable_database_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PluggableDatabaseNodeLevelDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluggableDatabaseNodeLevelDetails) ProtoMessage() {}

func (x *PluggableDatabaseNodeLevelDetails) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_oracledatabase_v1_pluggable_database_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluggableDatabaseNodeLevelDetails.ProtoReflect.Descriptor instead.
func (*PluggableDatabaseNodeLevelDetails) Descriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_pluggable_database_proto_rawDescGZIP(), []int{3}
}

func (x *PluggableDatabaseNodeLevelDetails) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *PluggableDatabaseNodeLevelDetails) GetOpenMode() PluggableDatabaseNodeLevelDetails_PluggableDatabaseOpenMode {
	if x != nil {
		return x.OpenMode
	}
	return PluggableDatabaseNodeLevelDetails_PLUGGABLE_DATABASE_OPEN_MODE_UNSPECIFIED
}

func (x *PluggableDatabaseNodeLevelDetails) GetPluggableDatabaseId() string {
	if x != nil {
		return x.PluggableDatabaseId
	}
	return ""
}

// The configuration of the Database Management service.
type DatabaseManagementConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The status of the Database Management service.
	ManagementState DatabaseManagementConfig_ManagementState `protobuf:"varint,1,opt,name=management_state,json=managementState,proto3,enum=google.cloud.oracledatabase.v1.DatabaseManagementConfig_ManagementState" json:"management_state,omitempty"`
	// Output only. The Database Management type.
	ManagementType DatabaseManagementConfig_ManagementType `protobuf:"varint,2,opt,name=management_type,json=managementType,proto3,enum=google.cloud.oracledatabase.v1.DatabaseManagementConfig_ManagementType" json:"management_type,omitempty"`
}

func (x *DatabaseManagementConfig) Reset() {
	*x = DatabaseManagementConfig{}
	mi := &file_google_cloud_oracledatabase_v1_pluggable_database_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseManagementConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseManagementConfig) ProtoMessage() {}

func (x *DatabaseManagementConfig) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_oracledatabase_v1_pluggable_database_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseManagementConfig.ProtoReflect.Descriptor instead.
func (*DatabaseManagementConfig) Descriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_pluggable_database_proto_rawDescGZIP(), []int{4}
}

func (x *DatabaseManagementConfig) GetManagementState() DatabaseManagementConfig_ManagementState {
	if x != nil {
		return x.ManagementState
	}
	return DatabaseManagementConfig_MANAGEMENT_STATE_UNSPECIFIED
}

func (x *DatabaseManagementConfig) GetManagementType() DatabaseManagementConfig_ManagementType {
	if x != nil {
		return x.ManagementType
	}
	return DatabaseManagementConfig_MANAGEMENT_TYPE_UNSPECIFIED
}

// The request for `PluggableDatabase.Get`.
type GetPluggableDatabaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the PluggableDatabase resource in the following
	// format:
	// projects/{project}/locations/{region}/pluggableDatabases/{pluggable_database}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetPluggableDatabaseRequest) Reset() {
	*x = GetPluggableDatabaseRequest{}
	mi := &file_google_cloud_oracledatabase_v1_pluggable_database_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPluggableDatabaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPluggableDatabaseRequest) ProtoMessage() {}

func (x *GetPluggableDatabaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_oracledatabase_v1_pluggable_database_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPluggableDatabaseRequest.ProtoReflect.Descriptor instead.
func (*GetPluggableDatabaseRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_pluggable_database_proto_rawDescGZIP(), []int{5}
}

func (x *GetPluggableDatabaseRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// The request for `PluggableDatabase.List`.
type ListPluggableDatabasesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent, which owns this collection of PluggableDatabases.
	// Format: projects/{project}/locations/{location}
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Optional. The maximum number of PluggableDatabases to return. The service
	// may return fewer than this value.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Optional. A page token, received from a previous `ListPluggableDatabases`
	// call. Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListPluggableDatabases`
	// must match the call that provided the page token.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Optional. An expression for filtering the results of the request. List for
	// pluggable databases is supported only with a valid container database (full
	// resource name) filter in this format:
	// `database="projects/{project}/locations/{location}/databases/{database}"`
	Filter string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListPluggableDatabasesRequest) Reset() {
	*x = ListPluggableDatabasesRequest{}
	mi := &file_google_cloud_oracledatabase_v1_pluggable_database_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPluggableDatabasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPluggableDatabasesRequest) ProtoMessage() {}

func (x *ListPluggableDatabasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_oracledatabase_v1_pluggable_database_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPluggableDatabasesRequest.ProtoReflect.Descriptor instead.
func (*ListPluggableDatabasesRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_pluggable_database_proto_rawDescGZIP(), []int{6}
}

func (x *ListPluggableDatabasesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListPluggableDatabasesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListPluggableDatabasesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListPluggableDatabasesRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// The response for `PluggableDatabase.List`.
type ListPluggableDatabasesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of PluggableDatabases.
	PluggableDatabases []*PluggableDatabase `protobuf:"bytes,1,rep,name=pluggable_databases,json=pluggableDatabases,proto3" json:"pluggable_databases,omitempty"`
	// A token identifying a page of results the server should return.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListPluggableDatabasesResponse) Reset() {
	*x = ListPluggableDatabasesResponse{}
	mi := &file_google_cloud_oracledatabase_v1_pluggable_database_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPluggableDatabasesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPluggableDatabasesResponse) ProtoMessage() {}

func (x *ListPluggableDatabasesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_oracledatabase_v1_pluggable_database_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPluggableDatabasesResponse.ProtoReflect.Descriptor instead.
func (*ListPluggableDatabasesResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_pluggable_database_proto_rawDescGZIP(), []int{7}
}

func (x *ListPluggableDatabasesResponse) GetPluggableDatabases() []*PluggableDatabase {
	if x != nil {
		return x.PluggableDatabases
	}
	return nil
}

func (x *ListPluggableDatabasesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Wrapper message for the value of a defined tag.
type PluggableDatabaseProperties_DefinedTagValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The tags within the namespace.
	Tags map[string]string `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PluggableDatabaseProperties_DefinedTagValue) Reset() {
	*x = PluggableDatabaseProperties_DefinedTagValue{}
	mi := &file_google_cloud_oracledatabase_v1_pluggable_database_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PluggableDatabaseProperties_DefinedTagValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluggableDatabaseProperties_DefinedTagValue) ProtoMessage() {}

func (x *PluggableDatabaseProperties_DefinedTagValue) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_oracledatabase_v1_pluggable_database_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluggableDatabaseProperties_DefinedTagValue.ProtoReflect.Descriptor instead.
func (*PluggableDatabaseProperties_DefinedTagValue) Descriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_pluggable_database_proto_rawDescGZIP(), []int{1, 0}
}

func (x *PluggableDatabaseProperties_DefinedTagValue) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

var File_google_cloud_oracledatabase_v1_pluggable_database_proto protoreflect.FileDescriptor

var file_google_cloud_oracledatabase_v1_pluggable_database_proto_rawDesc = []byte{
	0x0a, 0x37, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x70, 0x6c, 0x75, 0x67, 0x67, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9e, 0x03, 0x0a, 0x11, 0x50, 0x6c, 0x75, 0x67, 0x67,
	0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x08, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x60, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x67,
	0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x07, 0x6f, 0x63, 0x69, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x6f,
	0x63, 0x69, 0x55, 0x72, 0x6c, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x3a, 0xad, 0x01, 0xea, 0x41, 0xa9, 0x01, 0x0a, 0x2f,
	0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x50, 0x6c,
	0x75, 0x67, 0x67, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12,
	0x4f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x67, 0x61, 0x62,
	0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x6c, 0x75,
	0x67, 0x67, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x7d,
	0x2a, 0x12, 0x70, 0x6c, 0x75, 0x67, 0x67, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x73, 0x32, 0x11, 0x70, 0x6c, 0x75, 0x67, 0x67, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x22, 0x89, 0x10, 0x0a, 0x1b, 0x50, 0x6c, 0x75, 0x67,
	0x67, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x76, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x42, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6c, 0x75, 0x67, 0x67, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3b, 0x0a, 0x17, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x6f, 0x63, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x4f, 0x63, 0x69, 0x64, 0x12, 0x74, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6c, 0x75, 0x67, 0x67, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x0b, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x12, 0x77,
	0x0a, 0x0d, 0x66, 0x72, 0x65, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x67, 0x61, 0x62, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x2e, 0x46, 0x72, 0x65, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x61, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x66, 0x72, 0x65, 0x65, 0x66,
	0x6f, 0x72, 0x6d, 0x54, 0x61, 0x67, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x6f, 0x63, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x6f, 0x63, 0x69, 0x64,
	0x12, 0x28, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x69, 0x73,
	0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x11, 0x6c, 0x69,
	0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x10, 0x6c, 0x69, 0x66, 0x65,
	0x63, 0x79, 0x63, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x89, 0x01, 0x0a,
	0x0f, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x67, 0x61, 0x62, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x67, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0e, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79,
	0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x64, 0x62, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x07, 0x70, 0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x7b, 0x0a, 0x16, 0x70, 0x64, 0x62, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x67, 0x61,
	0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x13, 0x70, 0x64, 0x62, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x7b, 0x0a, 0x1a, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x18, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x94, 0x01, 0x0a, 0x19, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x53, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x67, 0x61, 0x62, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e,
	0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x17, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x73, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xb5, 0x01, 0x0a, 0x0f, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x69, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75,
	0x67, 0x67, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x54, 0x61, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x8b, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x61, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x67, 0x61, 0x62,
	0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3f, 0x0a, 0x11, 0x46, 0x72, 0x65, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x61, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xb3, 0x02, 0x0a, 0x1f, 0x50, 0x6c, 0x75, 0x67, 0x67, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x2e, 0x50, 0x4c, 0x55, 0x47, 0x47, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43,
	0x59, 0x43, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x4f, 0x56,
	0x49, 0x53, 0x49, 0x4f, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x56,
	0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x45, 0x52,
	0x4d, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x45,
	0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49,
	0x4e, 0x47, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x45,
	0x44, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x49, 0x4e,
	0x47, 0x10, 0x09, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x49,
	0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x0a, 0x12, 0x12, 0x0a, 0x0e,
	0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x0b,
	0x12, 0x16, 0x0a, 0x12, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52,
	0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x0c, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x41,
	0x42, 0x4c, 0x45, 0x44, 0x10, 0x0d, 0x22, 0xaa, 0x01, 0x0a, 0x17, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x29, 0x0a, 0x25, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53,
	0x5f, 0x49, 0x4e, 0x53, 0x49, 0x47, 0x48, 0x54, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x45,
	0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x49, 0x53, 0x41,
	0x42, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x54, 0x5f, 0x45,
	0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x14, 0x0a,
	0x10, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x49, 0x4e,
	0x47, 0x10, 0x06, 0x22, 0xd8, 0x02, 0x0a, 0x22, 0x50, 0x6c, 0x75, 0x67, 0x67, 0x61, 0x62, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x97, 0x01, 0x0a, 0x16, 0x61,
	0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75,
	0x67, 0x67, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x14,
	0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x64, 0x62, 0x5f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a,
	0x70, 0x64, 0x62, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x29, 0x0a, 0x0e, 0x70, 0x64,
	0x62, 0x5f, 0x69, 0x70, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x70, 0x64, 0x62, 0x49, 0x70, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x1a, 0x47, 0x0a, 0x19, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x82,
	0x03, 0x0a, 0x21, 0x50, 0x6c, 0x75, 0x67, 0x67, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x6e, 0x6f,
	0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x7d, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x67,
	0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x50, 0x6c, 0x75,
	0x67, 0x67, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x70,
	0x65, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x6f, 0x70, 0x65,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x15, 0x70, 0x6c, 0x75, 0x67, 0x67, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x13, 0x70, 0x6c, 0x75, 0x67, 0x67,
	0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x49, 0x64, 0x22, 0x82,
	0x01, 0x0a, 0x19, 0x50, 0x6c, 0x75, 0x67, 0x67, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x28,
	0x50, 0x4c, 0x55, 0x47, 0x47, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41,
	0x53, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45,
	0x41, 0x44, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x41,
	0x44, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x4f, 0x55,
	0x4e, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x49, 0x47, 0x52, 0x41, 0x54,
	0x45, 0x10, 0x04, 0x22, 0x93, 0x04, 0x0a, 0x18, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x78, 0x0a, 0x10, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x75, 0x0a, 0x0f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x47, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x0e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x22, 0xb9, 0x01, 0x0a, 0x0f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x4e, 0x41, 0x42, 0x4c,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x49, 0x4e, 0x47, 0x10,
	0x03, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12,
	0x0c, 0x0a, 0x08, 0x55, 0x50, 0x44, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x13, 0x0a,
	0x0f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x49, 0x4e, 0x47,
	0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x44, 0x49, 0x53,
	0x41, 0x42, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x22, 0x4a, 0x0a,
	0x0e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1f, 0x0a, 0x1b, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41,
	0x44, 0x56, 0x41, 0x4e, 0x43, 0x45, 0x44, 0x10, 0x02, 0x22, 0x6a, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x50, 0x6c, 0x75, 0x67, 0x67, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x31, 0x0a, 0x2f,
	0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x50, 0x6c,
	0x75, 0x67, 0x67, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xd3, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c,
	0x75, 0x67, 0x67, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x31, 0x12,
	0x2f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x50,
	0x6c, 0x75, 0x67, 0x67, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b,
	0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xac, 0x01, 0x0a, 0x1e,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x67, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62,
	0x0a, 0x13, 0x70, 0x6c, 0x75, 0x67, 0x67, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x75,
	0x67, 0x67, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x12,
	0x70, 0x6c, 0x75, 0x67, 0x67, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0xf0, 0x01, 0x0a, 0x22, 0x63,
	0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x42, 0x16, 0x50, 0x6c, 0x75, 0x67, 0x67, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4a, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f,
	0x2f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x70, 0x62, 0x3b, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x70, 0x62, 0xaa, 0x02, 0x1e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x1e, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x5c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5c, 0x56, 0x31, 0xea, 0x02, 0x21, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x3a, 0x3a, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x4f, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_oracledatabase_v1_pluggable_database_proto_rawDescOnce sync.Once
	file_google_cloud_oracledatabase_v1_pluggable_database_proto_rawDescData = file_google_cloud_oracledatabase_v1_pluggable_database_proto_rawDesc
)

func file_google_cloud_oracledatabase_v1_pluggable_database_proto_rawDescGZIP() []byte {
	file_google_cloud_oracledatabase_v1_pluggable_database_proto_rawDescOnce.Do(func() {
		file_google_cloud_oracledatabase_v1_pluggable_database_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_oracledatabase_v1_pluggable_database_proto_rawDescData)
	})
	return file_google_cloud_oracledatabase_v1_pluggable_database_proto_rawDescData
}

var file_google_cloud_oracledatabase_v1_pluggable_database_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_google_cloud_oracledatabase_v1_pluggable_database_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_google_cloud_oracledatabase_v1_pluggable_database_proto_goTypes = []any{
	(PluggableDatabaseProperties_PluggableDatabaseLifecycleState)(0), // 0: google.cloud.oracledatabase.v1.PluggableDatabaseProperties.PluggableDatabaseLifecycleState
	(PluggableDatabaseProperties_OperationsInsightsState)(0),         // 1: google.cloud.oracledatabase.v1.PluggableDatabaseProperties.OperationsInsightsState
	(PluggableDatabaseNodeLevelDetails_PluggableDatabaseOpenMode)(0), // 2: google.cloud.oracledatabase.v1.PluggableDatabaseNodeLevelDetails.PluggableDatabaseOpenMode
	(DatabaseManagementConfig_ManagementState)(0),                    // 3: google.cloud.oracledatabase.v1.DatabaseManagementConfig.ManagementState
	(DatabaseManagementConfig_ManagementType)(0),                     // 4: google.cloud.oracledatabase.v1.DatabaseManagementConfig.ManagementType
	(*PluggableDatabase)(nil),                                        // 5: google.cloud.oracledatabase.v1.PluggableDatabase
	(*PluggableDatabaseProperties)(nil),                              // 6: google.cloud.oracledatabase.v1.PluggableDatabaseProperties
	(*PluggableDatabaseConnectionStrings)(nil),                       // 7: google.cloud.oracledatabase.v1.PluggableDatabaseConnectionStrings
	(*PluggableDatabaseNodeLevelDetails)(nil),                        // 8: google.cloud.oracledatabase.v1.PluggableDatabaseNodeLevelDetails
	(*DatabaseManagementConfig)(nil),                                 // 9: google.cloud.oracledatabase.v1.DatabaseManagementConfig
	(*GetPluggableDatabaseRequest)(nil),                              // 10: google.cloud.oracledatabase.v1.GetPluggableDatabaseRequest
	(*ListPluggableDatabasesRequest)(nil),                            // 11: google.cloud.oracledatabase.v1.ListPluggableDatabasesRequest
	(*ListPluggableDatabasesResponse)(nil),                           // 12: google.cloud.oracledatabase.v1.ListPluggableDatabasesResponse
	(*PluggableDatabaseProperties_DefinedTagValue)(nil),              // 13: google.cloud.oracledatabase.v1.PluggableDatabaseProperties.DefinedTagValue
	nil,                           // 14: google.cloud.oracledatabase.v1.PluggableDatabaseProperties.DefinedTagsEntry
	nil,                           // 15: google.cloud.oracledatabase.v1.PluggableDatabaseProperties.FreeformTagsEntry
	nil,                           // 16: google.cloud.oracledatabase.v1.PluggableDatabaseProperties.DefinedTagValue.TagsEntry
	nil,                           // 17: google.cloud.oracledatabase.v1.PluggableDatabaseConnectionStrings.AllConnectionStringsEntry
	(*timestamppb.Timestamp)(nil), // 18: google.protobuf.Timestamp
}
var file_google_cloud_oracledatabase_v1_pluggable_database_proto_depIdxs = []int32{
	6,  // 0: google.cloud.oracledatabase.v1.PluggableDatabase.properties:type_name -> google.cloud.oracledatabase.v1.PluggableDatabaseProperties
	18, // 1: google.cloud.oracledatabase.v1.PluggableDatabase.create_time:type_name -> google.protobuf.Timestamp
	7,  // 2: google.cloud.oracledatabase.v1.PluggableDatabaseProperties.connection_strings:type_name -> google.cloud.oracledatabase.v1.PluggableDatabaseConnectionStrings
	14, // 3: google.cloud.oracledatabase.v1.PluggableDatabaseProperties.defined_tags:type_name -> google.cloud.oracledatabase.v1.PluggableDatabaseProperties.DefinedTagsEntry
	15, // 4: google.cloud.oracledatabase.v1.PluggableDatabaseProperties.freeform_tags:type_name -> google.cloud.oracledatabase.v1.PluggableDatabaseProperties.FreeformTagsEntry
	0,  // 5: google.cloud.oracledatabase.v1.PluggableDatabaseProperties.lifecycle_state:type_name -> google.cloud.oracledatabase.v1.PluggableDatabaseProperties.PluggableDatabaseLifecycleState
	8,  // 6: google.cloud.oracledatabase.v1.PluggableDatabaseProperties.pdb_node_level_details:type_name -> google.cloud.oracledatabase.v1.PluggableDatabaseNodeLevelDetails
	9,  // 7: google.cloud.oracledatabase.v1.PluggableDatabaseProperties.database_management_config:type_name -> google.cloud.oracledatabase.v1.DatabaseManagementConfig
	1,  // 8: google.cloud.oracledatabase.v1.PluggableDatabaseProperties.operations_insights_state:type_name -> google.cloud.oracledatabase.v1.PluggableDatabaseProperties.OperationsInsightsState
	17, // 9: google.cloud.oracledatabase.v1.PluggableDatabaseConnectionStrings.all_connection_strings:type_name -> google.cloud.oracledatabase.v1.PluggableDatabaseConnectionStrings.AllConnectionStringsEntry
	2,  // 10: google.cloud.oracledatabase.v1.PluggableDatabaseNodeLevelDetails.open_mode:type_name -> google.cloud.oracledatabase.v1.PluggableDatabaseNodeLevelDetails.PluggableDatabaseOpenMode
	3,  // 11: google.cloud.oracledatabase.v1.DatabaseManagementConfig.management_state:type_name -> google.cloud.oracledatabase.v1.DatabaseManagementConfig.ManagementState
	4,  // 12: google.cloud.oracledatabase.v1.DatabaseManagementConfig.management_type:type_name -> google.cloud.oracledatabase.v1.DatabaseManagementConfig.ManagementType
	5,  // 13: google.cloud.oracledatabase.v1.ListPluggableDatabasesResponse.pluggable_databases:type_name -> google.cloud.oracledatabase.v1.PluggableDatabase
	16, // 14: google.cloud.oracledatabase.v1.PluggableDatabaseProperties.DefinedTagValue.tags:type_name -> google.cloud.oracledatabase.v1.PluggableDatabaseProperties.DefinedTagValue.TagsEntry
	13, // 15: google.cloud.oracledatabase.v1.PluggableDatabaseProperties.DefinedTagsEntry.value:type_name -> google.cloud.oracledatabase.v1.PluggableDatabaseProperties.DefinedTagValue
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_google_cloud_oracledatabase_v1_pluggable_database_proto_init() }
func file_google_cloud_oracledatabase_v1_pluggable_database_proto_init() {
	if File_google_cloud_oracledatabase_v1_pluggable_database_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_oracledatabase_v1_pluggable_database_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_cloud_oracledatabase_v1_pluggable_database_proto_goTypes,
		DependencyIndexes: file_google_cloud_oracledatabase_v1_pluggable_database_proto_depIdxs,
		EnumInfos:         file_google_cloud_oracledatabase_v1_pluggable_database_proto_enumTypes,
		MessageInfos:      file_google_cloud_oracledatabase_v1_pluggable_database_proto_msgTypes,
	}.Build()
	File_google_cloud_oracledatabase_v1_pluggable_database_proto = out.File
	file_google_cloud_oracledatabase_v1_pluggable_database_proto_rawDesc = nil
	file_google_cloud_oracledatabase_v1_pluggable_database_proto_goTypes = nil
	file_google_cloud_oracledatabase_v1_pluggable_database_proto_depIdxs = nil
}
