// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.7
// source: google/cloud/oracledatabase/v1/exascale_db_storage_vault.proto

package oracledatabasepb

import (
	reflect "reflect"
	sync "sync"

	_ "google.golang.org/genproto/googleapis/api/annotations"
	datetime "google.golang.org/genproto/googleapis/type/datetime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The state of the ExascaleDbStorageVault.
type ExascaleDbStorageVaultProperties_State int32

const (
	// The state of the ExascaleDbStorageVault is unspecified.
	ExascaleDbStorageVaultProperties_STATE_UNSPECIFIED ExascaleDbStorageVaultProperties_State = 0
	// The ExascaleDbStorageVault is being provisioned.
	ExascaleDbStorageVaultProperties_PROVISIONING ExascaleDbStorageVaultProperties_State = 1
	// The ExascaleDbStorageVault is available.
	ExascaleDbStorageVaultProperties_AVAILABLE ExascaleDbStorageVaultProperties_State = 2
	// The ExascaleDbStorageVault is being updated.
	ExascaleDbStorageVaultProperties_UPDATING ExascaleDbStorageVaultProperties_State = 3
	// The ExascaleDbStorageVault is being deleted.
	ExascaleDbStorageVaultProperties_TERMINATING ExascaleDbStorageVaultProperties_State = 4
	// The ExascaleDbStorageVault has been deleted.
	ExascaleDbStorageVaultProperties_TERMINATED ExascaleDbStorageVaultProperties_State = 5
	// The ExascaleDbStorageVault has failed.
	ExascaleDbStorageVaultProperties_FAILED ExascaleDbStorageVaultProperties_State = 6
)

// Enum value maps for ExascaleDbStorageVaultProperties_State.
var (
	ExascaleDbStorageVaultProperties_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "PROVISIONING",
		2: "AVAILABLE",
		3: "UPDATING",
		4: "TERMINATING",
		5: "TERMINATED",
		6: "FAILED",
	}
	ExascaleDbStorageVaultProperties_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"PROVISIONING":      1,
		"AVAILABLE":         2,
		"UPDATING":          3,
		"TERMINATING":       4,
		"TERMINATED":        5,
		"FAILED":            6,
	}
)

func (x ExascaleDbStorageVaultProperties_State) Enum() *ExascaleDbStorageVaultProperties_State {
	p := new(ExascaleDbStorageVaultProperties_State)
	*p = x
	return p
}

func (x ExascaleDbStorageVaultProperties_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExascaleDbStorageVaultProperties_State) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_oracledatabase_v1_exascale_db_storage_vault_proto_enumTypes[0].Descriptor()
}

func (ExascaleDbStorageVaultProperties_State) Type() protoreflect.EnumType {
	return &file_google_cloud_oracledatabase_v1_exascale_db_storage_vault_proto_enumTypes[0]
}

func (x ExascaleDbStorageVaultProperties_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExascaleDbStorageVaultProperties_State.Descriptor instead.
func (ExascaleDbStorageVaultProperties_State) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_exascale_db_storage_vault_proto_rawDescGZIP(), []int{1, 0}
}

// The shape attribute of the VM clusters attached to the
// ExascaleDbStorageVault.
type ExascaleDbStorageVaultProperties_ShapeAttribute int32

const (
	// Default unspecified value.
	ExascaleDbStorageVaultProperties_SHAPE_ATTRIBUTE_UNSPECIFIED ExascaleDbStorageVaultProperties_ShapeAttribute = 0
	// Indicates that the resource is in smart storage.
	ExascaleDbStorageVaultProperties_SMART_STORAGE ExascaleDbStorageVaultProperties_ShapeAttribute = 1
	// Indicates that the resource is in block storage.
	ExascaleDbStorageVaultProperties_BLOCK_STORAGE ExascaleDbStorageVaultProperties_ShapeAttribute = 2
)

// Enum value maps for ExascaleDbStorageVaultProperties_ShapeAttribute.
var (
	ExascaleDbStorageVaultProperties_ShapeAttribute_name = map[int32]string{
		0: "SHAPE_ATTRIBUTE_UNSPECIFIED",
		1: "SMART_STORAGE",
		2: "BLOCK_STORAGE",
	}
	ExascaleDbStorageVaultProperties_ShapeAttribute_value = map[string]int32{
		"SHAPE_ATTRIBUTE_UNSPECIFIED": 0,
		"SMART_STORAGE":               1,
		"BLOCK_STORAGE":               2,
	}
)

func (x ExascaleDbStorageVaultProperties_ShapeAttribute) Enum() *ExascaleDbStorageVaultProperties_ShapeAttribute {
	p := new(ExascaleDbStorageVaultProperties_ShapeAttribute)
	*p = x
	return p
}

func (x ExascaleDbStorageVaultProperties_ShapeAttribute) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExascaleDbStorageVaultProperties_ShapeAttribute) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_oracledatabase_v1_exascale_db_storage_vault_proto_enumTypes[1].Descriptor()
}

func (ExascaleDbStorageVaultProperties_ShapeAttribute) Type() protoreflect.EnumType {
	return &file_google_cloud_oracledatabase_v1_exascale_db_storage_vault_proto_enumTypes[1]
}

func (x ExascaleDbStorageVaultProperties_ShapeAttribute) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExascaleDbStorageVaultProperties_ShapeAttribute.Descriptor instead.
func (ExascaleDbStorageVaultProperties_ShapeAttribute) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_exascale_db_storage_vault_proto_rawDescGZIP(), []int{1, 1}
}

// ExascaleDbStorageVault represents a storage vault exadb vm cluster resource.
// https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/ExascaleDbStorageVault/
type ExascaleDbStorageVault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier. The resource name of the ExascaleDbStorageVault.
	// Format:
	// projects/{project}/locations/{location}/exascaleDbStorageVaults/{exascale_db_storage_vault}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Required. The display name for the ExascaleDbStorageVault. The name does
	// not have to be unique within your project. The name must be 1-255
	// characters long and can only contain alphanumeric characters.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Optional. The GCP Oracle zone where Oracle ExascaleDbStorageVault is
	// hosted. Example: us-east4-b-r2. If not specified, the system will pick a
	// zone based on availability.
	GcpOracleZone string `protobuf:"bytes,3,opt,name=gcp_oracle_zone,json=gcpOracleZone,proto3" json:"gcp_oracle_zone,omitempty"`
	// Required. The properties of the ExascaleDbStorageVault.
	Properties *ExascaleDbStorageVaultProperties `protobuf:"bytes,4,opt,name=properties,proto3" json:"properties,omitempty"`
	// Output only. The date and time when the ExascaleDbStorageVault was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The ID of the subscription entitlement associated with the
	// ExascaleDbStorageVault.
	EntitlementId string `protobuf:"bytes,6,opt,name=entitlement_id,json=entitlementId,proto3" json:"entitlement_id,omitempty"`
	// Optional. The labels or tags associated with the ExascaleDbStorageVault.
	Labels map[string]string `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ExascaleDbStorageVault) Reset() {
	*x = ExascaleDbStorageVault{}
	mi := &file_google_cloud_oracledatabase_v1_exascale_db_storage_vault_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExascaleDbStorageVault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExascaleDbStorageVault) ProtoMessage() {}

func (x *ExascaleDbStorageVault) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_oracledatabase_v1_exascale_db_storage_vault_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExascaleDbStorageVault.ProtoReflect.Descriptor instead.
func (*ExascaleDbStorageVault) Descriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_exascale_db_storage_vault_proto_rawDescGZIP(), []int{0}
}

func (x *ExascaleDbStorageVault) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExascaleDbStorageVault) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ExascaleDbStorageVault) GetGcpOracleZone() string {
	if x != nil {
		return x.GcpOracleZone
	}
	return ""
}

func (x *ExascaleDbStorageVault) GetProperties() *ExascaleDbStorageVaultProperties {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *ExascaleDbStorageVault) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ExascaleDbStorageVault) GetEntitlementId() string {
	if x != nil {
		return x.EntitlementId
	}
	return ""
}

func (x *ExascaleDbStorageVault) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// The properties of the ExascaleDbStorageVault.
// next ID: 12
type ExascaleDbStorageVaultProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The OCID for the ExascaleDbStorageVault.
	Ocid string `protobuf:"bytes,1,opt,name=ocid,proto3" json:"ocid,omitempty"`
	// Output only. The time zone of the ExascaleDbStorageVault.
	TimeZone *datetime.TimeZone `protobuf:"bytes,2,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
	// Required. The storage details of the ExascaleDbStorageVault.
	ExascaleDbStorageDetails *ExascaleDbStorageDetails `protobuf:"bytes,3,opt,name=exascale_db_storage_details,json=exascaleDbStorageDetails,proto3" json:"exascale_db_storage_details,omitempty"`
	// Output only. The state of the ExascaleDbStorageVault.
	State ExascaleDbStorageVaultProperties_State `protobuf:"varint,4,opt,name=state,proto3,enum=google.cloud.oracledatabase.v1.ExascaleDbStorageVaultProperties_State" json:"state,omitempty"`
	// Optional. The description of the ExascaleDbStorageVault.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Output only. The list of VM cluster OCIDs associated with the
	// ExascaleDbStorageVault.
	VmClusterIds []string `protobuf:"bytes,6,rep,name=vm_cluster_ids,json=vmClusterIds,proto3" json:"vm_cluster_ids,omitempty"`
	// Output only. The number of VM clusters associated with the
	// ExascaleDbStorageVault.
	VmClusterCount int32 `protobuf:"varint,9,opt,name=vm_cluster_count,json=vmClusterCount,proto3" json:"vm_cluster_count,omitempty"`
	// Optional. The size of additional flash cache in percentage of high capacity
	// database storage.
	AdditionalFlashCachePercent int32 `protobuf:"varint,7,opt,name=additional_flash_cache_percent,json=additionalFlashCachePercent,proto3" json:"additional_flash_cache_percent,omitempty"`
	// Output only. Deep link to the OCI console to view this resource.
	OciUri string `protobuf:"bytes,8,opt,name=oci_uri,json=ociUri,proto3" json:"oci_uri,omitempty"`
	// Output only. The shape attributes of the VM clusters attached to the
	// ExascaleDbStorageVault.
	AttachedShapeAttributes []ExascaleDbStorageVaultProperties_ShapeAttribute `protobuf:"varint,10,rep,packed,name=attached_shape_attributes,json=attachedShapeAttributes,proto3,enum=google.cloud.oracledatabase.v1.ExascaleDbStorageVaultProperties_ShapeAttribute" json:"attached_shape_attributes,omitempty"`
	// Output only. The shape attributes available for the VM clusters to be
	// attached to the ExascaleDbStorageVault.
	AvailableShapeAttributes []ExascaleDbStorageVaultProperties_ShapeAttribute `protobuf:"varint,11,rep,packed,name=available_shape_attributes,json=availableShapeAttributes,proto3,enum=google.cloud.oracledatabase.v1.ExascaleDbStorageVaultProperties_ShapeAttribute" json:"available_shape_attributes,omitempty"`
}

func (x *ExascaleDbStorageVaultProperties) Reset() {
	*x = ExascaleDbStorageVaultProperties{}
	mi := &file_google_cloud_oracledatabase_v1_exascale_db_storage_vault_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExascaleDbStorageVaultProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExascaleDbStorageVaultProperties) ProtoMessage() {}

func (x *ExascaleDbStorageVaultProperties) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_oracledatabase_v1_exascale_db_storage_vault_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExascaleDbStorageVaultProperties.ProtoReflect.Descriptor instead.
func (*ExascaleDbStorageVaultProperties) Descriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_exascale_db_storage_vault_proto_rawDescGZIP(), []int{1}
}

func (x *ExascaleDbStorageVaultProperties) GetOcid() string {
	if x != nil {
		return x.Ocid
	}
	return ""
}

func (x *ExascaleDbStorageVaultProperties) GetTimeZone() *datetime.TimeZone {
	if x != nil {
		return x.TimeZone
	}
	return nil
}

func (x *ExascaleDbStorageVaultProperties) GetExascaleDbStorageDetails() *ExascaleDbStorageDetails {
	if x != nil {
		return x.ExascaleDbStorageDetails
	}
	return nil
}

func (x *ExascaleDbStorageVaultProperties) GetState() ExascaleDbStorageVaultProperties_State {
	if x != nil {
		return x.State
	}
	return ExascaleDbStorageVaultProperties_STATE_UNSPECIFIED
}

func (x *ExascaleDbStorageVaultProperties) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ExascaleDbStorageVaultProperties) GetVmClusterIds() []string {
	if x != nil {
		return x.VmClusterIds
	}
	return nil
}

func (x *ExascaleDbStorageVaultProperties) GetVmClusterCount() int32 {
	if x != nil {
		return x.VmClusterCount
	}
	return 0
}

func (x *ExascaleDbStorageVaultProperties) GetAdditionalFlashCachePercent() int32 {
	if x != nil {
		return x.AdditionalFlashCachePercent
	}
	return 0
}

func (x *ExascaleDbStorageVaultProperties) GetOciUri() string {
	if x != nil {
		return x.OciUri
	}
	return ""
}

func (x *ExascaleDbStorageVaultProperties) GetAttachedShapeAttributes() []ExascaleDbStorageVaultProperties_ShapeAttribute {
	if x != nil {
		return x.AttachedShapeAttributes
	}
	return nil
}

func (x *ExascaleDbStorageVaultProperties) GetAvailableShapeAttributes() []ExascaleDbStorageVaultProperties_ShapeAttribute {
	if x != nil {
		return x.AvailableShapeAttributes
	}
	return nil
}

// The storage details of the ExascaleDbStorageVault.
type ExascaleDbStorageDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The available storage capacity for the ExascaleDbStorageVault,
	// in gigabytes (GB).
	AvailableSizeGbs int32 `protobuf:"varint,1,opt,name=available_size_gbs,json=availableSizeGbs,proto3" json:"available_size_gbs,omitempty"`
	// Required. The total storage allocation for the ExascaleDbStorageVault, in
	// gigabytes (GB).
	TotalSizeGbs int32 `protobuf:"varint,2,opt,name=total_size_gbs,json=totalSizeGbs,proto3" json:"total_size_gbs,omitempty"`
}

func (x *ExascaleDbStorageDetails) Reset() {
	*x = ExascaleDbStorageDetails{}
	mi := &file_google_cloud_oracledatabase_v1_exascale_db_storage_vault_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExascaleDbStorageDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExascaleDbStorageDetails) ProtoMessage() {}

func (x *ExascaleDbStorageDetails) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_oracledatabase_v1_exascale_db_storage_vault_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExascaleDbStorageDetails.ProtoReflect.Descriptor instead.
func (*ExascaleDbStorageDetails) Descriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_exascale_db_storage_vault_proto_rawDescGZIP(), []int{2}
}

func (x *ExascaleDbStorageDetails) GetAvailableSizeGbs() int32 {
	if x != nil {
		return x.AvailableSizeGbs
	}
	return 0
}

func (x *ExascaleDbStorageDetails) GetTotalSizeGbs() int32 {
	if x != nil {
		return x.TotalSizeGbs
	}
	return 0
}

// The request for `ExascaleDbStorageVault.Get`.
type GetExascaleDbStorageVaultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the ExascaleDbStorageVault in the following format:
	// projects/{project}/locations/{location}/exascaleDbStorageVaults/{exascale_db_storage_vault}.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetExascaleDbStorageVaultRequest) Reset() {
	*x = GetExascaleDbStorageVaultRequest{}
	mi := &file_google_cloud_oracledatabase_v1_exascale_db_storage_vault_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetExascaleDbStorageVaultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExascaleDbStorageVaultRequest) ProtoMessage() {}

func (x *GetExascaleDbStorageVaultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_oracledatabase_v1_exascale_db_storage_vault_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExascaleDbStorageVaultRequest.ProtoReflect.Descriptor instead.
func (*GetExascaleDbStorageVaultRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_exascale_db_storage_vault_proto_rawDescGZIP(), []int{3}
}

func (x *GetExascaleDbStorageVaultRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// The request for `ExascaleDbStorageVault.List`.
type ListExascaleDbStorageVaultsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent value for ExascaleDbStorageVault in the following
	// format: projects/{project}/locations/{location}.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Optional. The maximum number of items to return.
	// If unspecified, at most 50 ExascaleDbStorageVaults will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Optional. A token identifying a page of results the server should return.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Optional. An expression for filtering the results of the request. Filter
	// the list as specified in https://google.aip.dev/160.
	Filter string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	// Optional. An expression for ordering the results of the request. Order
	// results as specified in https://google.aip.dev/132.
	OrderBy string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListExascaleDbStorageVaultsRequest) Reset() {
	*x = ListExascaleDbStorageVaultsRequest{}
	mi := &file_google_cloud_oracledatabase_v1_exascale_db_storage_vault_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListExascaleDbStorageVaultsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExascaleDbStorageVaultsRequest) ProtoMessage() {}

func (x *ListExascaleDbStorageVaultsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_oracledatabase_v1_exascale_db_storage_vault_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExascaleDbStorageVaultsRequest.ProtoReflect.Descriptor instead.
func (*ListExascaleDbStorageVaultsRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_exascale_db_storage_vault_proto_rawDescGZIP(), []int{4}
}

func (x *ListExascaleDbStorageVaultsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListExascaleDbStorageVaultsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListExascaleDbStorageVaultsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListExascaleDbStorageVaultsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListExascaleDbStorageVaultsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

// The response for `ExascaleDbStorageVault.List`.
type ListExascaleDbStorageVaultsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ExascaleDbStorageVaults.
	ExascaleDbStorageVaults []*ExascaleDbStorageVault `protobuf:"bytes,1,rep,name=exascale_db_storage_vaults,json=exascaleDbStorageVaults,proto3" json:"exascale_db_storage_vaults,omitempty"`
	// A token identifying a page of results the server should return. If present,
	// the next page token can be provided to a subsequent
	// ListExascaleDbStorageVaults call to list the next page.
	// If empty, there are no more pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListExascaleDbStorageVaultsResponse) Reset() {
	*x = ListExascaleDbStorageVaultsResponse{}
	mi := &file_google_cloud_oracledatabase_v1_exascale_db_storage_vault_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListExascaleDbStorageVaultsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExascaleDbStorageVaultsResponse) ProtoMessage() {}

func (x *ListExascaleDbStorageVaultsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_oracledatabase_v1_exascale_db_storage_vault_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExascaleDbStorageVaultsResponse.ProtoReflect.Descriptor instead.
func (*ListExascaleDbStorageVaultsResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_exascale_db_storage_vault_proto_rawDescGZIP(), []int{5}
}

func (x *ListExascaleDbStorageVaultsResponse) GetExascaleDbStorageVaults() []*ExascaleDbStorageVault {
	if x != nil {
		return x.ExascaleDbStorageVaults
	}
	return nil
}

func (x *ListExascaleDbStorageVaultsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// The request for `ExascaleDbStorageVault.Create`.
type CreateExascaleDbStorageVaultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The value for parent of the ExascaleDbStorageVault in the
	// following format: projects/{project}/locations/{location}.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Required. The ID of the ExascaleDbStorageVault to create. This value is
	// restricted to (^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$) and must be a maximum of
	// 63 characters in length. The value must start with a letter and end with a
	// letter or a number.
	ExascaleDbStorageVaultId string `protobuf:"bytes,2,opt,name=exascale_db_storage_vault_id,json=exascaleDbStorageVaultId,proto3" json:"exascale_db_storage_vault_id,omitempty"`
	// Required. The resource being created.
	ExascaleDbStorageVault *ExascaleDbStorageVault `protobuf:"bytes,3,opt,name=exascale_db_storage_vault,json=exascaleDbStorageVault,proto3" json:"exascale_db_storage_vault,omitempty"`
	// Optional. An optional request ID to identify requests. Specify a unique
	// request ID so that if you must retry your request, the server will know to
	// ignore the request if it has already been completed. The server will
	// guarantee that for at least 60 minutes since the first request.
	//
	// For example, consider a situation where you make an initial request and the
	// request times out. If you make the request again with the same request
	// ID, the server can check if original operation with the same request ID
	// was received, and if so, will ignore the second request. This prevents
	// clients from accidentally creating duplicate commitments.
	//
	// The request ID must be a valid UUID with the exception that zero UUID is
	// not supported (00000000-0000-0000-0000-000000000000).
	RequestId string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateExascaleDbStorageVaultRequest) Reset() {
	*x = CreateExascaleDbStorageVaultRequest{}
	mi := &file_google_cloud_oracledatabase_v1_exascale_db_storage_vault_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateExascaleDbStorageVaultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateExascaleDbStorageVaultRequest) ProtoMessage() {}

func (x *CreateExascaleDbStorageVaultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_oracledatabase_v1_exascale_db_storage_vault_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateExascaleDbStorageVaultRequest.ProtoReflect.Descriptor instead.
func (*CreateExascaleDbStorageVaultRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_exascale_db_storage_vault_proto_rawDescGZIP(), []int{6}
}

func (x *CreateExascaleDbStorageVaultRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateExascaleDbStorageVaultRequest) GetExascaleDbStorageVaultId() string {
	if x != nil {
		return x.ExascaleDbStorageVaultId
	}
	return ""
}

func (x *CreateExascaleDbStorageVaultRequest) GetExascaleDbStorageVault() *ExascaleDbStorageVault {
	if x != nil {
		return x.ExascaleDbStorageVault
	}
	return nil
}

func (x *CreateExascaleDbStorageVaultRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

// The request message for `ExascaleDbStorageVault.Delete`.
type DeleteExascaleDbStorageVaultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the ExascaleDbStorageVault in the following format:
	// projects/{project}/locations/{location}/exascaleDbStorageVaults/{exascale_db_storage_vault}.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. An optional ID to identify the request. This value is used to
	// identify duplicate requests. If you make a request with the same request ID
	// and the original request is still in progress or completed, the server
	// ignores the second request. This prevents clients from
	// accidentally creating duplicate commitments.
	//
	// The request ID must be a valid UUID with the exception that zero UUID is
	// not supported (00000000-0000-0000-0000-000000000000).
	RequestId string `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *DeleteExascaleDbStorageVaultRequest) Reset() {
	*x = DeleteExascaleDbStorageVaultRequest{}
	mi := &file_google_cloud_oracledatabase_v1_exascale_db_storage_vault_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteExascaleDbStorageVaultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteExascaleDbStorageVaultRequest) ProtoMessage() {}

func (x *DeleteExascaleDbStorageVaultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_oracledatabase_v1_exascale_db_storage_vault_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteExascaleDbStorageVaultRequest.ProtoReflect.Descriptor instead.
func (*DeleteExascaleDbStorageVaultRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_exascale_db_storage_vault_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteExascaleDbStorageVaultRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteExascaleDbStorageVaultRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

var File_google_cloud_oracledatabase_v1_exascale_db_storage_vault_proto protoreflect.FileDescriptor

var file_google_cloud_oracledatabase_v1_exascale_db_storage_vault_proto_rawDesc = []byte{
	0x0a, 0x3e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x65, 0x78, 0x61, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x64, 0x62, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc2, 0x05, 0x0a, 0x16, 0x45, 0x78, 0x61, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x44, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x56, 0x61, 0x75, 0x6c,
	0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x08, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x0f, 0x67, 0x63, 0x70, 0x5f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65,
	0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x0d, 0x67, 0x63, 0x70, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12,
	0x65, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x61, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x62, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x0e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x5f, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x61, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x62,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x3a, 0xc8, 0x01, 0xea, 0x41, 0xc4, 0x01, 0x0a, 0x34, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x45, 0x78, 0x61, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44,
	0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x5b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x65, 0x78, 0x61, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44,
	0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x2f, 0x7b,
	0x65, 0x78, 0x61, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x64, 0x62, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x7d, 0x2a, 0x17, 0x65, 0x78, 0x61, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x44, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x56, 0x61, 0x75,
	0x6c, 0x74, 0x73, 0x32, 0x16, 0x65, 0x78, 0x61, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x62, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x22, 0xbb, 0x08, 0x0a, 0x20,
	0x45, 0x78, 0x61, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x17, 0x0a, 0x04, 0x6f, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x04, 0x6f, 0x63, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x5a,
	0x6f, 0x6e, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f,
	0x6e, 0x65, 0x12, 0x7c, 0x0a, 0x1b, 0x65, 0x78, 0x61, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x64,
	0x62, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x61, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x44, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x18, 0x65, 0x78, 0x61, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x44, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x61, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x46, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x61, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x0e, 0x76, 0x6d,
	0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0c, 0x76, 0x6d, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x10, 0x76, 0x6d, 0x5f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x0e, 0x76, 0x6d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x1e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x1b, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x6c, 0x61,
	0x73, 0x68, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1c,
	0x0a, 0x07, 0x6f, 0x63, 0x69, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x6f, 0x63, 0x69, 0x55, 0x72, 0x69, 0x12, 0x90, 0x01, 0x0a,
	0x19, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x4f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x61, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x62, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x17, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64,
	0x53, 0x68, 0x61, 0x70, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x92, 0x01, 0x0a, 0x1a, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x68,
	0x61, 0x70, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x4f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x61, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x62,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x18, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x70, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x22, 0x7a, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a,
	0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f,
	0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x50, 0x44, 0x41, 0x54, 0x49, 0x4e,
	0x47, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x49,
	0x4e, 0x47, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x06,
	0x22, 0x57, 0x0a, 0x0e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x48, 0x41, 0x50, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x4d, 0x41, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x4f,
	0x52, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f,
	0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x10, 0x02, 0x22, 0x78, 0x0a, 0x18, 0x45, 0x78, 0x61,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x31, 0x0a, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x67, 0x62, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x47, 0x62, 0x73, 0x12, 0x29, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x67, 0x62, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65,
	0x47, 0x62, 0x73, 0x22, 0x74, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x44, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x56, 0x61, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x36, 0x0a, 0x34, 0x6f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x45, 0x78, 0x61,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x56, 0x61,
	0x75, 0x6c, 0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xfd, 0x01, 0x0a, 0x22, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x78, 0x61, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x62, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x54, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x3c, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x36, 0x12, 0x34, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x45, 0x78, 0x61, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x44, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0xc2, 0x01, 0x0a, 0x23, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x78, 0x61, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x62, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x73, 0x0a, 0x1a, 0x65, 0x78, 0x61, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x64, 0x62,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x61, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44,
	0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x17, 0x65,
	0x78, 0x61, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x56, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xe4,
	0x02, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x61, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x44, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x36, 0x12, 0x34,
	0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x45, 0x78,
	0x61, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x56,
	0x61, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x1c,
	0x65, 0x78, 0x61, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x64, 0x62, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x18, 0x65, 0x78, 0x61, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x44, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x49,
	0x64, 0x12, 0x76, 0x0a, 0x19, 0x65, 0x78, 0x61, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x64, 0x62,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x61, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x62,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x16, 0x65, 0x78, 0x61, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x62, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x2a, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xe0,
	0x41, 0x01, 0xe2, 0x8c, 0xcf, 0xd7, 0x08, 0x02, 0x08, 0x01, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xa3, 0x01, 0x0a, 0x23, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x45, 0x78, 0x61, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c, 0xe0, 0x41, 0x02,
	0xfa, 0x41, 0x36, 0x0a, 0x34, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x45, 0x78, 0x61, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x62, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0b, 0xe0, 0x41, 0x01, 0xe2, 0x8c, 0xcf, 0xd7, 0x08, 0x02, 0x08, 0x01,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x42, 0xf5, 0x01, 0x0a, 0x22,
	0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x42, 0x1b, 0x45, 0x78, 0x61, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x62, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x4a, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x70, 0x62, 0x3b, 0x6f, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x70, 0x62, 0xaa, 0x02, 0x1e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4f, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02,
	0x1e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x4f, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5c, 0x56, 0x31, 0xea,
	0x02, 0x21, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a,
	0x3a, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x3a,
	0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_oracledatabase_v1_exascale_db_storage_vault_proto_rawDescOnce sync.Once
	file_google_cloud_oracledatabase_v1_exascale_db_storage_vault_proto_rawDescData = file_google_cloud_oracledatabase_v1_exascale_db_storage_vault_proto_rawDesc
)

func file_google_cloud_oracledatabase_v1_exascale_db_storage_vault_proto_rawDescGZIP() []byte {
	file_google_cloud_oracledatabase_v1_exascale_db_storage_vault_proto_rawDescOnce.Do(func() {
		file_google_cloud_oracledatabase_v1_exascale_db_storage_vault_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_oracledatabase_v1_exascale_db_storage_vault_proto_rawDescData)
	})
	return file_google_cloud_oracledatabase_v1_exascale_db_storage_vault_proto_rawDescData
}

var file_google_cloud_oracledatabase_v1_exascale_db_storage_vault_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_google_cloud_oracledatabase_v1_exascale_db_storage_vault_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_google_cloud_oracledatabase_v1_exascale_db_storage_vault_proto_goTypes = []any{
	(ExascaleDbStorageVaultProperties_State)(0),          // 0: google.cloud.oracledatabase.v1.ExascaleDbStorageVaultProperties.State
	(ExascaleDbStorageVaultProperties_ShapeAttribute)(0), // 1: google.cloud.oracledatabase.v1.ExascaleDbStorageVaultProperties.ShapeAttribute
	(*ExascaleDbStorageVault)(nil),                       // 2: google.cloud.oracledatabase.v1.ExascaleDbStorageVault
	(*ExascaleDbStorageVaultProperties)(nil),             // 3: google.cloud.oracledatabase.v1.ExascaleDbStorageVaultProperties
	(*ExascaleDbStorageDetails)(nil),                     // 4: google.cloud.oracledatabase.v1.ExascaleDbStorageDetails
	(*GetExascaleDbStorageVaultRequest)(nil),             // 5: google.cloud.oracledatabase.v1.GetExascaleDbStorageVaultRequest
	(*ListExascaleDbStorageVaultsRequest)(nil),           // 6: google.cloud.oracledatabase.v1.ListExascaleDbStorageVaultsRequest
	(*ListExascaleDbStorageVaultsResponse)(nil),          // 7: google.cloud.oracledatabase.v1.ListExascaleDbStorageVaultsResponse
	(*CreateExascaleDbStorageVaultRequest)(nil),          // 8: google.cloud.oracledatabase.v1.CreateExascaleDbStorageVaultRequest
	(*DeleteExascaleDbStorageVaultRequest)(nil),          // 9: google.cloud.oracledatabase.v1.DeleteExascaleDbStorageVaultRequest
	nil,                           // 10: google.cloud.oracledatabase.v1.ExascaleDbStorageVault.LabelsEntry
	(*timestamppb.Timestamp)(nil), // 11: google.protobuf.Timestamp
	(*datetime.TimeZone)(nil),     // 12: google.type.TimeZone
}
var file_google_cloud_oracledatabase_v1_exascale_db_storage_vault_proto_depIdxs = []int32{
	3,  // 0: google.cloud.oracledatabase.v1.ExascaleDbStorageVault.properties:type_name -> google.cloud.oracledatabase.v1.ExascaleDbStorageVaultProperties
	11, // 1: google.cloud.oracledatabase.v1.ExascaleDbStorageVault.create_time:type_name -> google.protobuf.Timestamp
	10, // 2: google.cloud.oracledatabase.v1.ExascaleDbStorageVault.labels:type_name -> google.cloud.oracledatabase.v1.ExascaleDbStorageVault.LabelsEntry
	12, // 3: google.cloud.oracledatabase.v1.ExascaleDbStorageVaultProperties.time_zone:type_name -> google.type.TimeZone
	4,  // 4: google.cloud.oracledatabase.v1.ExascaleDbStorageVaultProperties.exascale_db_storage_details:type_name -> google.cloud.oracledatabase.v1.ExascaleDbStorageDetails
	0,  // 5: google.cloud.oracledatabase.v1.ExascaleDbStorageVaultProperties.state:type_name -> google.cloud.oracledatabase.v1.ExascaleDbStorageVaultProperties.State
	1,  // 6: google.cloud.oracledatabase.v1.ExascaleDbStorageVaultProperties.attached_shape_attributes:type_name -> google.cloud.oracledatabase.v1.ExascaleDbStorageVaultProperties.ShapeAttribute
	1,  // 7: google.cloud.oracledatabase.v1.ExascaleDbStorageVaultProperties.available_shape_attributes:type_name -> google.cloud.oracledatabase.v1.ExascaleDbStorageVaultProperties.ShapeAttribute
	2,  // 8: google.cloud.oracledatabase.v1.ListExascaleDbStorageVaultsResponse.exascale_db_storage_vaults:type_name -> google.cloud.oracledatabase.v1.ExascaleDbStorageVault
	2,  // 9: google.cloud.oracledatabase.v1.CreateExascaleDbStorageVaultRequest.exascale_db_storage_vault:type_name -> google.cloud.oracledatabase.v1.ExascaleDbStorageVault
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_google_cloud_oracledatabase_v1_exascale_db_storage_vault_proto_init() }
func file_google_cloud_oracledatabase_v1_exascale_db_storage_vault_proto_init() {
	if File_google_cloud_oracledatabase_v1_exascale_db_storage_vault_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_oracledatabase_v1_exascale_db_storage_vault_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_cloud_oracledatabase_v1_exascale_db_storage_vault_proto_goTypes,
		DependencyIndexes: file_google_cloud_oracledatabase_v1_exascale_db_storage_vault_proto_depIdxs,
		EnumInfos:         file_google_cloud_oracledatabase_v1_exascale_db_storage_vault_proto_enumTypes,
		MessageInfos:      file_google_cloud_oracledatabase_v1_exascale_db_storage_vault_proto_msgTypes,
	}.Build()
	File_google_cloud_oracledatabase_v1_exascale_db_storage_vault_proto = out.File
	file_google_cloud_oracledatabase_v1_exascale_db_storage_vault_proto_rawDesc = nil
	file_google_cloud_oracledatabase_v1_exascale_db_storage_vault_proto_goTypes = nil
	file_google_cloud_oracledatabase_v1_exascale_db_storage_vault_proto_depIdxs = nil
}
