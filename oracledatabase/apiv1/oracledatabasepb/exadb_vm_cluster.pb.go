// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.7
// source: google/cloud/oracledatabase/v1/exadb_vm_cluster.proto

package oracledatabasepb

import (
	reflect "reflect"
	sync "sync"

	_ "google.golang.org/genproto/googleapis/api/annotations"
	datetime "google.golang.org/genproto/googleapis/type/datetime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The Oracle license model that applies to the ExaScale VM cluster
type ExadbVmClusterProperties_LicenseModel int32

const (
	// Unspecified.
	ExadbVmClusterProperties_LICENSE_MODEL_UNSPECIFIED ExadbVmClusterProperties_LicenseModel = 0
	// Default is license included.
	ExadbVmClusterProperties_LICENSE_INCLUDED ExadbVmClusterProperties_LicenseModel = 1
	// Bring your own license.
	ExadbVmClusterProperties_BRING_YOUR_OWN_LICENSE ExadbVmClusterProperties_LicenseModel = 2
)

// Enum value maps for ExadbVmClusterProperties_LicenseModel.
var (
	ExadbVmClusterProperties_LicenseModel_name = map[int32]string{
		0: "LICENSE_MODEL_UNSPECIFIED",
		1: "LICENSE_INCLUDED",
		2: "BRING_YOUR_OWN_LICENSE",
	}
	ExadbVmClusterProperties_LicenseModel_value = map[string]int32{
		"LICENSE_MODEL_UNSPECIFIED": 0,
		"LICENSE_INCLUDED":          1,
		"BRING_YOUR_OWN_LICENSE":    2,
	}
)

func (x ExadbVmClusterProperties_LicenseModel) Enum() *ExadbVmClusterProperties_LicenseModel {
	p := new(ExadbVmClusterProperties_LicenseModel)
	*p = x
	return p
}

func (x ExadbVmClusterProperties_LicenseModel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExadbVmClusterProperties_LicenseModel) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_oracledatabase_v1_exadb_vm_cluster_proto_enumTypes[0].Descriptor()
}

func (ExadbVmClusterProperties_LicenseModel) Type() protoreflect.EnumType {
	return &file_google_cloud_oracledatabase_v1_exadb_vm_cluster_proto_enumTypes[0]
}

func (x ExadbVmClusterProperties_LicenseModel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExadbVmClusterProperties_LicenseModel.Descriptor instead.
func (ExadbVmClusterProperties_LicenseModel) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_exadb_vm_cluster_proto_rawDescGZIP(), []int{2, 0}
}

// The various lifecycle states of the VM cluster.
type ExadbVmClusterProperties_ExadbVmClusterLifecycleState int32

const (
	// Default unspecified value.
	ExadbVmClusterProperties_EXADB_VM_CLUSTER_LIFECYCLE_STATE_UNSPECIFIED ExadbVmClusterProperties_ExadbVmClusterLifecycleState = 0
	// Indicates that the resource is in provisioning state.
	ExadbVmClusterProperties_PROVISIONING ExadbVmClusterProperties_ExadbVmClusterLifecycleState = 1
	// Indicates that the resource is in available state.
	ExadbVmClusterProperties_AVAILABLE ExadbVmClusterProperties_ExadbVmClusterLifecycleState = 2
	// Indicates that the resource is in updating state.
	ExadbVmClusterProperties_UPDATING ExadbVmClusterProperties_ExadbVmClusterLifecycleState = 3
	// Indicates that the resource is in terminating state.
	ExadbVmClusterProperties_TERMINATING ExadbVmClusterProperties_ExadbVmClusterLifecycleState = 4
	// Indicates that the resource is in terminated state.
	ExadbVmClusterProperties_TERMINATED ExadbVmClusterProperties_ExadbVmClusterLifecycleState = 5
	// Indicates that the resource is in failed state.
	ExadbVmClusterProperties_FAILED ExadbVmClusterProperties_ExadbVmClusterLifecycleState = 6
	// Indicates that the resource is in maintenance in progress state.
	ExadbVmClusterProperties_MAINTENANCE_IN_PROGRESS ExadbVmClusterProperties_ExadbVmClusterLifecycleState = 7
)

// Enum value maps for ExadbVmClusterProperties_ExadbVmClusterLifecycleState.
var (
	ExadbVmClusterProperties_ExadbVmClusterLifecycleState_name = map[int32]string{
		0: "EXADB_VM_CLUSTER_LIFECYCLE_STATE_UNSPECIFIED",
		1: "PROVISIONING",
		2: "AVAILABLE",
		3: "UPDATING",
		4: "TERMINATING",
		5: "TERMINATED",
		6: "FAILED",
		7: "MAINTENANCE_IN_PROGRESS",
	}
	ExadbVmClusterProperties_ExadbVmClusterLifecycleState_value = map[string]int32{
		"EXADB_VM_CLUSTER_LIFECYCLE_STATE_UNSPECIFIED": 0,
		"PROVISIONING":            1,
		"AVAILABLE":               2,
		"UPDATING":                3,
		"TERMINATING":             4,
		"TERMINATED":              5,
		"FAILED":                  6,
		"MAINTENANCE_IN_PROGRESS": 7,
	}
)

func (x ExadbVmClusterProperties_ExadbVmClusterLifecycleState) Enum() *ExadbVmClusterProperties_ExadbVmClusterLifecycleState {
	p := new(ExadbVmClusterProperties_ExadbVmClusterLifecycleState)
	*p = x
	return p
}

func (x ExadbVmClusterProperties_ExadbVmClusterLifecycleState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExadbVmClusterProperties_ExadbVmClusterLifecycleState) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_oracledatabase_v1_exadb_vm_cluster_proto_enumTypes[1].Descriptor()
}

func (ExadbVmClusterProperties_ExadbVmClusterLifecycleState) Type() protoreflect.EnumType {
	return &file_google_cloud_oracledatabase_v1_exadb_vm_cluster_proto_enumTypes[1]
}

func (x ExadbVmClusterProperties_ExadbVmClusterLifecycleState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExadbVmClusterProperties_ExadbVmClusterLifecycleState.Descriptor instead.
func (ExadbVmClusterProperties_ExadbVmClusterLifecycleState) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_exadb_vm_cluster_proto_rawDescGZIP(), []int{2, 1}
}

// The shape attribute of the VM cluster. The type of Exascale storage used
// for Exadata VM cluster. The default is SMART_STORAGE which supports Oracle
// Database 23ai and later
type ExadbVmClusterProperties_ShapeAttribute int32

const (
	// Default unspecified value.
	ExadbVmClusterProperties_SHAPE_ATTRIBUTE_UNSPECIFIED ExadbVmClusterProperties_ShapeAttribute = 0
	// Indicates that the resource is in smart storage.
	ExadbVmClusterProperties_SMART_STORAGE ExadbVmClusterProperties_ShapeAttribute = 1
	// Indicates that the resource is in block storage.
	ExadbVmClusterProperties_BLOCK_STORAGE ExadbVmClusterProperties_ShapeAttribute = 2
)

// Enum value maps for ExadbVmClusterProperties_ShapeAttribute.
var (
	ExadbVmClusterProperties_ShapeAttribute_name = map[int32]string{
		0: "SHAPE_ATTRIBUTE_UNSPECIFIED",
		1: "SMART_STORAGE",
		2: "BLOCK_STORAGE",
	}
	ExadbVmClusterProperties_ShapeAttribute_value = map[string]int32{
		"SHAPE_ATTRIBUTE_UNSPECIFIED": 0,
		"SMART_STORAGE":               1,
		"BLOCK_STORAGE":               2,
	}
)

func (x ExadbVmClusterProperties_ShapeAttribute) Enum() *ExadbVmClusterProperties_ShapeAttribute {
	p := new(ExadbVmClusterProperties_ShapeAttribute)
	*p = x
	return p
}

func (x ExadbVmClusterProperties_ShapeAttribute) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExadbVmClusterProperties_ShapeAttribute) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_oracledatabase_v1_exadb_vm_cluster_proto_enumTypes[2].Descriptor()
}

func (ExadbVmClusterProperties_ShapeAttribute) Type() protoreflect.EnumType {
	return &file_google_cloud_oracledatabase_v1_exadb_vm_cluster_proto_enumTypes[2]
}

func (x ExadbVmClusterProperties_ShapeAttribute) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExadbVmClusterProperties_ShapeAttribute.Descriptor instead.
func (ExadbVmClusterProperties_ShapeAttribute) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_exadb_vm_cluster_proto_rawDescGZIP(), []int{2, 2}
}

// ExadbVmCluster represents a cluster of VMs that are used to run Exadata
// workloads.
// https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/ExadbVmCluster/
type ExadbVmCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier. The name of the ExadbVmCluster resource in the following
	// format:
	// projects/{project}/locations/{region}/exadbVmClusters/{exadb_vm_cluster}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Required. The properties of the ExadbVmCluster.
	Properties *ExadbVmClusterProperties `protobuf:"bytes,2,opt,name=properties,proto3" json:"properties,omitempty"`
	// Output only. Immutable. The GCP Oracle zone where Oracle ExadbVmCluster is
	// hosted. Example: us-east4-b-r2. During creation, the system will pick the
	// zone assigned to the ExascaleDbStorageVault.
	GcpOracleZone string `protobuf:"bytes,3,opt,name=gcp_oracle_zone,json=gcpOracleZone,proto3" json:"gcp_oracle_zone,omitempty"`
	// Optional. The labels or tags associated with the ExadbVmCluster.
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Optional. Immutable. The name of the OdbNetwork associated with the
	// ExadbVmCluster. Format:
	// projects/{project}/locations/{location}/odbNetworks/{odb_network} It is
	// optional but if specified, this should match the parent ODBNetwork of the
	// OdbSubnet.
	OdbNetwork string `protobuf:"bytes,6,opt,name=odb_network,json=odbNetwork,proto3" json:"odb_network,omitempty"`
	// Required. Immutable. The name of the OdbSubnet associated with the
	// ExadbVmCluster for IP allocation. Format:
	// projects/{project}/locations/{location}/odbNetworks/{odb_network}/odbSubnets/{odb_subnet}
	OdbSubnet string `protobuf:"bytes,7,opt,name=odb_subnet,json=odbSubnet,proto3" json:"odb_subnet,omitempty"`
	// Required. Immutable. The name of the backup OdbSubnet associated with the
	// ExadbVmCluster. Format:
	// projects/{project}/locations/{location}/odbNetworks/{odb_network}/odbSubnets/{odb_subnet}
	BackupOdbSubnet string `protobuf:"bytes,8,opt,name=backup_odb_subnet,json=backupOdbSubnet,proto3" json:"backup_odb_subnet,omitempty"`
	// Required. Immutable. The display name for the ExadbVmCluster. The name does
	// not have to be unique within your project. The name must be 1-255
	// characters long and can only contain alphanumeric characters.
	DisplayName string `protobuf:"bytes,9,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Output only. The date and time that the ExadbVmCluster was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The ID of the subscription entitlement associated with the
	// ExadbVmCluster.
	EntitlementId string `protobuf:"bytes,11,opt,name=entitlement_id,json=entitlementId,proto3" json:"entitlement_id,omitempty"`
}

func (x *ExadbVmCluster) Reset() {
	*x = ExadbVmCluster{}
	mi := &file_google_cloud_oracledatabase_v1_exadb_vm_cluster_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExadbVmCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExadbVmCluster) ProtoMessage() {}

func (x *ExadbVmCluster) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_oracledatabase_v1_exadb_vm_cluster_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExadbVmCluster.ProtoReflect.Descriptor instead.
func (*ExadbVmCluster) Descriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_exadb_vm_cluster_proto_rawDescGZIP(), []int{0}
}

func (x *ExadbVmCluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExadbVmCluster) GetProperties() *ExadbVmClusterProperties {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *ExadbVmCluster) GetGcpOracleZone() string {
	if x != nil {
		return x.GcpOracleZone
	}
	return ""
}

func (x *ExadbVmCluster) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ExadbVmCluster) GetOdbNetwork() string {
	if x != nil {
		return x.OdbNetwork
	}
	return ""
}

func (x *ExadbVmCluster) GetOdbSubnet() string {
	if x != nil {
		return x.OdbSubnet
	}
	return ""
}

func (x *ExadbVmCluster) GetBackupOdbSubnet() string {
	if x != nil {
		return x.BackupOdbSubnet
	}
	return ""
}

func (x *ExadbVmCluster) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ExadbVmCluster) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ExadbVmCluster) GetEntitlementId() string {
	if x != nil {
		return x.EntitlementId
	}
	return ""
}

// The storage allocation for the exadbvmcluster, in gigabytes (GB).
type ExadbVmClusterStorageDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The storage allocation for the exadbvmcluster per node, in
	// gigabytes (GB). This field is used to calculate the total storage
	// allocation for the exadbvmcluster.
	SizeInGbsPerNode int32 `protobuf:"varint,2,opt,name=size_in_gbs_per_node,json=sizeInGbsPerNode,proto3" json:"size_in_gbs_per_node,omitempty"`
}

func (x *ExadbVmClusterStorageDetails) Reset() {
	*x = ExadbVmClusterStorageDetails{}
	mi := &file_google_cloud_oracledatabase_v1_exadb_vm_cluster_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExadbVmClusterStorageDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExadbVmClusterStorageDetails) ProtoMessage() {}

func (x *ExadbVmClusterStorageDetails) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_oracledatabase_v1_exadb_vm_cluster_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExadbVmClusterStorageDetails.ProtoReflect.Descriptor instead.
func (*ExadbVmClusterStorageDetails) Descriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_exadb_vm_cluster_proto_rawDescGZIP(), []int{1}
}

func (x *ExadbVmClusterStorageDetails) GetSizeInGbsPerNode() int32 {
	if x != nil {
		return x.SizeInGbsPerNode
	}
	return 0
}

// The properties of an ExadbVmCluster.
type ExadbVmClusterProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Immutable. The cluster name for Exascale vm cluster. The cluster
	// name must begin with an alphabetic character and may contain hyphens(-) but
	// can not contain underscores(_). It should be not more than 11 characters
	// and is not case sensitive. OCI Cluster name.
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	// Required. Immutable. Grid Infrastructure Version.
	GridImageId string `protobuf:"bytes,2,opt,name=grid_image_id,json=gridImageId,proto3" json:"grid_image_id,omitempty"`
	// Required. The number of nodes/VMs in the ExadbVmCluster.
	NodeCount int32 `protobuf:"varint,3,opt,name=node_count,json=nodeCount,proto3" json:"node_count,omitempty"`
	// Required. Immutable. The number of ECPUs enabled per node for an exadata vm
	// cluster on exascale infrastructure.
	EnabledEcpuCountPerNode int32 `protobuf:"varint,20,opt,name=enabled_ecpu_count_per_node,json=enabledEcpuCountPerNode,proto3" json:"enabled_ecpu_count_per_node,omitempty"`
	// Optional. Immutable. The number of additional ECPUs per node for an Exadata
	// VM cluster on exascale infrastructure.
	AdditionalEcpuCountPerNode int32 `protobuf:"varint,21,opt,name=additional_ecpu_count_per_node,json=additionalEcpuCountPerNode,proto3" json:"additional_ecpu_count_per_node,omitempty"`
	// Required. Immutable. Total storage details for the ExadbVmCluster.
	VmFileSystemStorage *ExadbVmClusterStorageDetails `protobuf:"bytes,6,opt,name=vm_file_system_storage,json=vmFileSystemStorage,proto3" json:"vm_file_system_storage,omitempty"`
	// Optional. Immutable. The license type of the ExadbVmCluster.
	LicenseModel ExadbVmClusterProperties_LicenseModel `protobuf:"varint,7,opt,name=license_model,json=licenseModel,proto3,enum=google.cloud.oracledatabase.v1.ExadbVmClusterProperties_LicenseModel" json:"license_model,omitempty"`
	// Required. Immutable. The name of ExascaleDbStorageVault associated with the
	// ExadbVmCluster. It can refer to an existing ExascaleDbStorageVault. Or a
	// new one can be created during the ExadbVmCluster creation (requires
	// storage_vault_properties to be set).
	// Format:
	// projects/{project}/locations/{location}/exascaleDbStorageVaults/{exascale_db_storage_vault}
	ExascaleDbStorageVault string `protobuf:"bytes,8,opt,name=exascale_db_storage_vault,json=exascaleDbStorageVault,proto3" json:"exascale_db_storage_vault,omitempty"`
	// Required. Immutable. Prefix for VM cluster host names.
	HostnamePrefix string `protobuf:"bytes,9,opt,name=hostname_prefix,json=hostnamePrefix,proto3" json:"hostname_prefix,omitempty"`
	// Output only. The hostname of the ExadbVmCluster.
	Hostname string `protobuf:"bytes,10,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// Required. Immutable. The SSH public keys for the ExadbVmCluster.
	SshPublicKeys []string `protobuf:"bytes,11,rep,name=ssh_public_keys,json=sshPublicKeys,proto3" json:"ssh_public_keys,omitempty"`
	// Optional. Immutable. Indicates user preference for data collection options.
	DataCollectionOptions *DataCollectionOptionsCommon `protobuf:"bytes,12,opt,name=data_collection_options,json=dataCollectionOptions,proto3" json:"data_collection_options,omitempty"`
	// Optional. Immutable. The time zone of the ExadbVmCluster.
	TimeZone *datetime.TimeZone `protobuf:"bytes,13,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
	// Output only. State of the cluster.
	LifecycleState ExadbVmClusterProperties_ExadbVmClusterLifecycleState `protobuf:"varint,14,opt,name=lifecycle_state,json=lifecycleState,proto3,enum=google.cloud.oracledatabase.v1.ExadbVmClusterProperties_ExadbVmClusterLifecycleState" json:"lifecycle_state,omitempty"`
	// Required. Immutable. The shape attribute of the VM cluster. The type of
	// Exascale storage used for Exadata VM cluster. The default is SMART_STORAGE
	// which supports Oracle Database 23ai and later
	ShapeAttribute ExadbVmClusterProperties_ShapeAttribute `protobuf:"varint,15,opt,name=shape_attribute,json=shapeAttribute,proto3,enum=google.cloud.oracledatabase.v1.ExadbVmClusterProperties_ShapeAttribute" json:"shape_attribute,omitempty"`
	// Output only. Memory per VM (GB) (Read-only): Shows the amount of memory
	// allocated to each VM. Memory is calculated based on 2.75 GB per Total
	// ECPUs.
	MemorySizeGb int32 `protobuf:"varint,16,opt,name=memory_size_gb,json=memorySizeGb,proto3" json:"memory_size_gb,omitempty"`
	// Optional. Immutable. SCAN listener port - TCP
	ScanListenerPortTcp int32 `protobuf:"varint,17,opt,name=scan_listener_port_tcp,json=scanListenerPortTcp,proto3" json:"scan_listener_port_tcp,omitempty"`
	// Output only. Deep link to the OCI console to view this resource.
	OciUri string `protobuf:"bytes,18,opt,name=oci_uri,json=ociUri,proto3" json:"oci_uri,omitempty"`
	// Output only. The Oracle Grid Infrastructure (GI) software version.
	GiVersion string `protobuf:"bytes,19,opt,name=gi_version,json=giVersion,proto3" json:"gi_version,omitempty"`
}

func (x *ExadbVmClusterProperties) Reset() {
	*x = ExadbVmClusterProperties{}
	mi := &file_google_cloud_oracledatabase_v1_exadb_vm_cluster_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExadbVmClusterProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExadbVmClusterProperties) ProtoMessage() {}

func (x *ExadbVmClusterProperties) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_oracledatabase_v1_exadb_vm_cluster_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExadbVmClusterProperties.ProtoReflect.Descriptor instead.
func (*ExadbVmClusterProperties) Descriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_exadb_vm_cluster_proto_rawDescGZIP(), []int{2}
}

func (x *ExadbVmClusterProperties) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ExadbVmClusterProperties) GetGridImageId() string {
	if x != nil {
		return x.GridImageId
	}
	return ""
}

func (x *ExadbVmClusterProperties) GetNodeCount() int32 {
	if x != nil {
		return x.NodeCount
	}
	return 0
}

func (x *ExadbVmClusterProperties) GetEnabledEcpuCountPerNode() int32 {
	if x != nil {
		return x.EnabledEcpuCountPerNode
	}
	return 0
}

func (x *ExadbVmClusterProperties) GetAdditionalEcpuCountPerNode() int32 {
	if x != nil {
		return x.AdditionalEcpuCountPerNode
	}
	return 0
}

func (x *ExadbVmClusterProperties) GetVmFileSystemStorage() *ExadbVmClusterStorageDetails {
	if x != nil {
		return x.VmFileSystemStorage
	}
	return nil
}

func (x *ExadbVmClusterProperties) GetLicenseModel() ExadbVmClusterProperties_LicenseModel {
	if x != nil {
		return x.LicenseModel
	}
	return ExadbVmClusterProperties_LICENSE_MODEL_UNSPECIFIED
}

func (x *ExadbVmClusterProperties) GetExascaleDbStorageVault() string {
	if x != nil {
		return x.ExascaleDbStorageVault
	}
	return ""
}

func (x *ExadbVmClusterProperties) GetHostnamePrefix() string {
	if x != nil {
		return x.HostnamePrefix
	}
	return ""
}

func (x *ExadbVmClusterProperties) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *ExadbVmClusterProperties) GetSshPublicKeys() []string {
	if x != nil {
		return x.SshPublicKeys
	}
	return nil
}

func (x *ExadbVmClusterProperties) GetDataCollectionOptions() *DataCollectionOptionsCommon {
	if x != nil {
		return x.DataCollectionOptions
	}
	return nil
}

func (x *ExadbVmClusterProperties) GetTimeZone() *datetime.TimeZone {
	if x != nil {
		return x.TimeZone
	}
	return nil
}

func (x *ExadbVmClusterProperties) GetLifecycleState() ExadbVmClusterProperties_ExadbVmClusterLifecycleState {
	if x != nil {
		return x.LifecycleState
	}
	return ExadbVmClusterProperties_EXADB_VM_CLUSTER_LIFECYCLE_STATE_UNSPECIFIED
}

func (x *ExadbVmClusterProperties) GetShapeAttribute() ExadbVmClusterProperties_ShapeAttribute {
	if x != nil {
		return x.ShapeAttribute
	}
	return ExadbVmClusterProperties_SHAPE_ATTRIBUTE_UNSPECIFIED
}

func (x *ExadbVmClusterProperties) GetMemorySizeGb() int32 {
	if x != nil {
		return x.MemorySizeGb
	}
	return 0
}

func (x *ExadbVmClusterProperties) GetScanListenerPortTcp() int32 {
	if x != nil {
		return x.ScanListenerPortTcp
	}
	return 0
}

func (x *ExadbVmClusterProperties) GetOciUri() string {
	if x != nil {
		return x.OciUri
	}
	return ""
}

func (x *ExadbVmClusterProperties) GetGiVersion() string {
	if x != nil {
		return x.GiVersion
	}
	return ""
}

var File_google_cloud_oracledatabase_v1_exadb_vm_cluster_proto protoreflect.FileDescriptor

var file_google_cloud_oracledatabase_v1_exadb_vm_cluster_proto_rawDesc = []byte{
	0x0a, 0x35, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x65, 0x78, 0x61, 0x64, 0x62, 0x5f, 0x76, 0x6d, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1a, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x64,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x90, 0x07,
	0x0a, 0x0e, 0x45, 0x78, 0x61, 0x64, 0x62, 0x56, 0x6d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x08, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x78, 0x61, 0x64, 0x62, 0x56, 0x6d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x0f, 0x67, 0x63, 0x70, 0x5f,
	0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xe0, 0x41, 0x03, 0xe0, 0x41, 0x05, 0x52, 0x0d, 0x67, 0x63, 0x70, 0x4f, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x57, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x61, 0x64, 0x62, 0x56,
	0x6d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x54, 0x0a, 0x0b, 0x6f, 0x64, 0x62, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0xe0, 0x41, 0x01, 0xe0, 0x41, 0x05, 0xfa, 0x41,
	0x2a, 0x0a, 0x28, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x4f, 0x64, 0x62, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x0a, 0x6f, 0x64, 0x62,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x51, 0x0a, 0x0a, 0x6f, 0x64, 0x62, 0x5f, 0x73,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0xe0, 0x41, 0x02,
	0xe0, 0x41, 0x05, 0xfa, 0x41, 0x29, 0x0a, 0x27, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4f, 0x64, 0x62, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52,
	0x09, 0x6f, 0x64, 0x62, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x5e, 0x0a, 0x11, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x5f, 0x6f, 0x64, 0x62, 0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0xe0, 0x41, 0x02, 0xe0, 0x41, 0x05, 0xfa, 0x41, 0x29,
	0x0a, 0x27, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x4f, 0x64, 0x62, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x4f, 0x64, 0x62, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x29, 0x0a, 0x0c, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xe0, 0x41, 0x02, 0xe0, 0x41, 0x05, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x0e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x0d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x9f,
	0x01, 0xea, 0x41, 0x9b, 0x01, 0x0a, 0x2c, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x45, 0x78, 0x61, 0x64, 0x62, 0x56, 0x6d, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x4a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x65, 0x78, 0x61,
	0x64, 0x62, 0x56, 0x6d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x65, 0x78,
	0x61, 0x64, 0x62, 0x5f, 0x76, 0x6d, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x7d, 0x2a,
	0x0f, 0x65, 0x78, 0x61, 0x64, 0x62, 0x56, 0x6d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x32, 0x0e, 0x65, 0x78, 0x61, 0x64, 0x62, 0x56, 0x6d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x22, 0x53, 0x0a, 0x1c, 0x45, 0x78, 0x61, 0x64, 0x62, 0x56, 0x6d, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x33, 0x0a, 0x14, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x67, 0x62, 0x73, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x10, 0x73, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x47, 0x62, 0x73, 0x50, 0x65,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0xfd, 0x0d, 0x0a, 0x18, 0x45, 0x78, 0x61, 0x64, 0x62, 0x56,
	0x6d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x29, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe0, 0x41, 0x01, 0xe0, 0x41, 0x05,
	0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a,
	0x0d, 0x67, 0x72, 0x69, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe0, 0x41, 0x02, 0xe0, 0x41, 0x05, 0x52, 0x0b, 0x67, 0x72,
	0x69, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a,
	0x1b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x65, 0x63, 0x70, 0x75, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x06, 0xe0, 0x41, 0x02, 0xe0, 0x41, 0x05, 0x52, 0x17, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x45, 0x63, 0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x4a, 0x0a, 0x1e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x65, 0x63, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x42, 0x06, 0xe0, 0x41, 0x01,
	0xe0, 0x41, 0x05, 0x52, 0x1a, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45,
	0x63, 0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x79, 0x0a, 0x16, 0x76, 0x6d, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x61, 0x64, 0x62, 0x56, 0x6d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x06, 0xe0,
	0x41, 0x02, 0xe0, 0x41, 0x05, 0x52, 0x13, 0x76, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x72, 0x0a, 0x0d, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x45, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x78, 0x61, 0x64, 0x62, 0x56, 0x6d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x06, 0xe0, 0x41, 0x01, 0xe0, 0x41, 0x05,
	0x52, 0x0c, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x7a,
	0x0a, 0x19, 0x65, 0x78, 0x61, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x64, 0x62, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x3f, 0xe0, 0x41, 0x02, 0xe0, 0x41, 0x05, 0xfa, 0x41, 0x36, 0x0a, 0x34, 0x6f, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x45, 0x78, 0x61, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x44, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x56, 0x61, 0x75,
	0x6c, 0x74, 0x52, 0x16, 0x65, 0x78, 0x61, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x62, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x2f, 0x0a, 0x0f, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xe0, 0x41, 0x02, 0xe0, 0x41, 0x05, 0x52, 0x0e, 0x68, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1f, 0x0a, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x0f,
	0x73, 0x73, 0x68, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x09, 0x42, 0x06, 0xe0, 0x41, 0x02, 0xe0, 0x41, 0x05, 0x52, 0x0d, 0x73,
	0x73, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x7b, 0x0a, 0x17,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x42, 0x06, 0xe0, 0x41, 0x01, 0xe0,
	0x41, 0x05, 0x52, 0x15, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x5a,
	0x6f, 0x6e, 0x65, 0x42, 0x06, 0xe0, 0x41, 0x01, 0xe0, 0x41, 0x05, 0x52, 0x08, 0x74, 0x69, 0x6d,
	0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x0f, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79,
	0x63, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x55, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x61, 0x64, 0x62, 0x56, 0x6d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x61, 0x64, 0x62, 0x56,
	0x6d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0e, 0x6c, 0x69, 0x66,
	0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x78, 0x0a, 0x0f, 0x73,
	0x68, 0x61, 0x70, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x47, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x61, 0x64, 0x62, 0x56, 0x6d, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x53,
	0x68, 0x61, 0x70, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x42, 0x06, 0xe0,
	0x41, 0x02, 0xe0, 0x41, 0x05, 0x52, 0x0e, 0x73, 0x68, 0x61, 0x70, 0x65, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x0e, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x5f, 0x67, 0x62, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x47, 0x62,
	0x12, 0x3b, 0x0a, 0x16, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65,
	0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x63, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x06, 0xe0, 0x41, 0x01, 0xe0, 0x41, 0x05, 0x52, 0x13, 0x73, 0x63, 0x61, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x63, 0x70, 0x12, 0x1c, 0x0a,
	0x07, 0x6f, 0x63, 0x69, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x06, 0x6f, 0x63, 0x69, 0x55, 0x72, 0x69, 0x12, 0x22, 0x0a, 0x0a, 0x67,
	0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x67, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x5f, 0x0a, 0x0c, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12,
	0x1d, 0x0a, 0x19, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x4c, 0x55, 0x44,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x59, 0x4f,
	0x55, 0x52, 0x5f, 0x4f, 0x57, 0x4e, 0x5f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x10, 0x02,
	0x22, 0xc9, 0x01, 0x0a, 0x1c, 0x45, 0x78, 0x61, 0x64, 0x62, 0x56, 0x6d, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x30, 0x0a, 0x2c, 0x45, 0x58, 0x41, 0x44, 0x42, 0x5f, 0x56, 0x4d, 0x5f, 0x43, 0x4c,
	0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x50, 0x44, 0x41, 0x54, 0x49, 0x4e, 0x47,
	0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4e,
	0x47, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45,
	0x44, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x12,
	0x1b, 0x0a, 0x17, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x49,
	0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x07, 0x22, 0x57, 0x0a, 0x0e,
	0x53, 0x68, 0x61, 0x70, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x1f,
	0x0a, 0x1b, 0x53, 0x48, 0x41, 0x50, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x11, 0x0a, 0x0d, 0x53, 0x4d, 0x41, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45,
	0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x4f, 0x52,
	0x41, 0x47, 0x45, 0x10, 0x02, 0x42, 0xed, 0x01, 0x0a, 0x22, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x13, 0x45, 0x78,
	0x61, 0x64, 0x62, 0x56, 0x6d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x4a, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2f, 0x6f, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x70, 0x62, 0x3b, 0x6f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x70, 0x62, 0xaa,
	0x02, 0x1e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x56, 0x31,
	0xca, 0x02, 0x1e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c,
	0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5c, 0x56,
	0x31, 0xea, 0x02, 0x21, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x3a, 0x3a, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_oracledatabase_v1_exadb_vm_cluster_proto_rawDescOnce sync.Once
	file_google_cloud_oracledatabase_v1_exadb_vm_cluster_proto_rawDescData = file_google_cloud_oracledatabase_v1_exadb_vm_cluster_proto_rawDesc
)

func file_google_cloud_oracledatabase_v1_exadb_vm_cluster_proto_rawDescGZIP() []byte {
	file_google_cloud_oracledatabase_v1_exadb_vm_cluster_proto_rawDescOnce.Do(func() {
		file_google_cloud_oracledatabase_v1_exadb_vm_cluster_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_oracledatabase_v1_exadb_vm_cluster_proto_rawDescData)
	})
	return file_google_cloud_oracledatabase_v1_exadb_vm_cluster_proto_rawDescData
}

var file_google_cloud_oracledatabase_v1_exadb_vm_cluster_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_google_cloud_oracledatabase_v1_exadb_vm_cluster_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_google_cloud_oracledatabase_v1_exadb_vm_cluster_proto_goTypes = []any{
	(ExadbVmClusterProperties_LicenseModel)(0),                 // 0: google.cloud.oracledatabase.v1.ExadbVmClusterProperties.LicenseModel
	(ExadbVmClusterProperties_ExadbVmClusterLifecycleState)(0), // 1: google.cloud.oracledatabase.v1.ExadbVmClusterProperties.ExadbVmClusterLifecycleState
	(ExadbVmClusterProperties_ShapeAttribute)(0),               // 2: google.cloud.oracledatabase.v1.ExadbVmClusterProperties.ShapeAttribute
	(*ExadbVmCluster)(nil),                                     // 3: google.cloud.oracledatabase.v1.ExadbVmCluster
	(*ExadbVmClusterStorageDetails)(nil),                       // 4: google.cloud.oracledatabase.v1.ExadbVmClusterStorageDetails
	(*ExadbVmClusterProperties)(nil),                           // 5: google.cloud.oracledatabase.v1.ExadbVmClusterProperties
	nil,                                                        // 6: google.cloud.oracledatabase.v1.ExadbVmCluster.LabelsEntry
	(*timestamppb.Timestamp)(nil),                              // 7: google.protobuf.Timestamp
	(*DataCollectionOptionsCommon)(nil),                        // 8: google.cloud.oracledatabase.v1.DataCollectionOptionsCommon
	(*datetime.TimeZone)(nil),                                  // 9: google.type.TimeZone
}
var file_google_cloud_oracledatabase_v1_exadb_vm_cluster_proto_depIdxs = []int32{
	5, // 0: google.cloud.oracledatabase.v1.ExadbVmCluster.properties:type_name -> google.cloud.oracledatabase.v1.ExadbVmClusterProperties
	6, // 1: google.cloud.oracledatabase.v1.ExadbVmCluster.labels:type_name -> google.cloud.oracledatabase.v1.ExadbVmCluster.LabelsEntry
	7, // 2: google.cloud.oracledatabase.v1.ExadbVmCluster.create_time:type_name -> google.protobuf.Timestamp
	4, // 3: google.cloud.oracledatabase.v1.ExadbVmClusterProperties.vm_file_system_storage:type_name -> google.cloud.oracledatabase.v1.ExadbVmClusterStorageDetails
	0, // 4: google.cloud.oracledatabase.v1.ExadbVmClusterProperties.license_model:type_name -> google.cloud.oracledatabase.v1.ExadbVmClusterProperties.LicenseModel
	8, // 5: google.cloud.oracledatabase.v1.ExadbVmClusterProperties.data_collection_options:type_name -> google.cloud.oracledatabase.v1.DataCollectionOptionsCommon
	9, // 6: google.cloud.oracledatabase.v1.ExadbVmClusterProperties.time_zone:type_name -> google.type.TimeZone
	1, // 7: google.cloud.oracledatabase.v1.ExadbVmClusterProperties.lifecycle_state:type_name -> google.cloud.oracledatabase.v1.ExadbVmClusterProperties.ExadbVmClusterLifecycleState
	2, // 8: google.cloud.oracledatabase.v1.ExadbVmClusterProperties.shape_attribute:type_name -> google.cloud.oracledatabase.v1.ExadbVmClusterProperties.ShapeAttribute
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_google_cloud_oracledatabase_v1_exadb_vm_cluster_proto_init() }
func file_google_cloud_oracledatabase_v1_exadb_vm_cluster_proto_init() {
	if File_google_cloud_oracledatabase_v1_exadb_vm_cluster_proto != nil {
		return
	}
	file_google_cloud_oracledatabase_v1_common_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_oracledatabase_v1_exadb_vm_cluster_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_cloud_oracledatabase_v1_exadb_vm_cluster_proto_goTypes,
		DependencyIndexes: file_google_cloud_oracledatabase_v1_exadb_vm_cluster_proto_depIdxs,
		EnumInfos:         file_google_cloud_oracledatabase_v1_exadb_vm_cluster_proto_enumTypes,
		MessageInfos:      file_google_cloud_oracledatabase_v1_exadb_vm_cluster_proto_msgTypes,
	}.Build()
	File_google_cloud_oracledatabase_v1_exadb_vm_cluster_proto = out.File
	file_google_cloud_oracledatabase_v1_exadb_vm_cluster_proto_rawDesc = nil
	file_google_cloud_oracledatabase_v1_exadb_vm_cluster_proto_goTypes = nil
	file_google_cloud_oracledatabase_v1_exadb_vm_cluster_proto_depIdxs = nil
}
