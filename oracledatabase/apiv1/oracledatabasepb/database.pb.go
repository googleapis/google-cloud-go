// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.7
// source: google/cloud/oracledatabase/v1/database.proto

package oracledatabasepb

import (
	reflect "reflect"
	sync "sync"

	_ "google.golang.org/genproto/googleapis/api/annotations"
	dayofweek "google.golang.org/genproto/googleapis/type/dayofweek"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The Status of Operations Insights for this Database.
type Database_OperationsInsightsStatus int32

const (
	// Default unspecified value.
	Database_OPERATIONS_INSIGHTS_STATUS_UNSPECIFIED Database_OperationsInsightsStatus = 0
	// Indicates that the operations insights are being enabled.
	Database_ENABLING Database_OperationsInsightsStatus = 1
	// Indicates that the operations insights are enabled.
	Database_ENABLED Database_OperationsInsightsStatus = 2
	// Indicates that the operations insights are being disabled.
	Database_DISABLING Database_OperationsInsightsStatus = 3
	// Indicates that the operations insights are not enabled.
	Database_NOT_ENABLED Database_OperationsInsightsStatus = 4
	// Indicates that the operations insights failed to enable.
	Database_FAILED_ENABLING Database_OperationsInsightsStatus = 5
	// Indicates that the operations insights failed to disable.
	Database_FAILED_DISABLING Database_OperationsInsightsStatus = 6
)

// Enum value maps for Database_OperationsInsightsStatus.
var (
	Database_OperationsInsightsStatus_name = map[int32]string{
		0: "OPERATIONS_INSIGHTS_STATUS_UNSPECIFIED",
		1: "ENABLING",
		2: "ENABLED",
		3: "DISABLING",
		4: "NOT_ENABLED",
		5: "FAILED_ENABLING",
		6: "FAILED_DISABLING",
	}
	Database_OperationsInsightsStatus_value = map[string]int32{
		"OPERATIONS_INSIGHTS_STATUS_UNSPECIFIED": 0,
		"ENABLING":                               1,
		"ENABLED":                                2,
		"DISABLING":                              3,
		"NOT_ENABLED":                            4,
		"FAILED_ENABLING":                        5,
		"FAILED_DISABLING":                       6,
	}
)

func (x Database_OperationsInsightsStatus) Enum() *Database_OperationsInsightsStatus {
	p := new(Database_OperationsInsightsStatus)
	*p = x
	return p
}

func (x Database_OperationsInsightsStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Database_OperationsInsightsStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_oracledatabase_v1_database_proto_enumTypes[0].Descriptor()
}

func (Database_OperationsInsightsStatus) Type() protoreflect.EnumType {
	return &file_google_cloud_oracledatabase_v1_database_proto_enumTypes[0]
}

func (x Database_OperationsInsightsStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Database_OperationsInsightsStatus.Descriptor instead.
func (Database_OperationsInsightsStatus) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_database_proto_rawDescGZIP(), []int{0, 0}
}

// The various lifecycle states of the Database.
type DatabaseProperties_DatabaseLifecycleState int32

const (
	// Default unspecified value.
	DatabaseProperties_DATABASE_LIFECYCLE_STATE_UNSPECIFIED DatabaseProperties_DatabaseLifecycleState = 0
	// Indicates that the resource is in provisioning state.
	DatabaseProperties_PROVISIONING DatabaseProperties_DatabaseLifecycleState = 1
	// Indicates that the resource is in available state.
	DatabaseProperties_AVAILABLE DatabaseProperties_DatabaseLifecycleState = 2
	// Indicates that the resource is in updating state.
	DatabaseProperties_UPDATING DatabaseProperties_DatabaseLifecycleState = 3
	// Indicates that the resource is in backup in progress state.
	DatabaseProperties_BACKUP_IN_PROGRESS DatabaseProperties_DatabaseLifecycleState = 4
	// Indicates that the resource is in upgrading state.
	DatabaseProperties_UPGRADING DatabaseProperties_DatabaseLifecycleState = 5
	// Indicates that the resource is in converting state.
	DatabaseProperties_CONVERTING DatabaseProperties_DatabaseLifecycleState = 6
	// Indicates that the resource is in terminating state.
	DatabaseProperties_TERMINATING DatabaseProperties_DatabaseLifecycleState = 7
	// Indicates that the resource is in terminated state.
	DatabaseProperties_TERMINATED DatabaseProperties_DatabaseLifecycleState = 8
	// Indicates that the resource is in restore failed state.
	DatabaseProperties_RESTORE_FAILED DatabaseProperties_DatabaseLifecycleState = 9
	// Indicates that the resource is in failed state.
	DatabaseProperties_FAILED DatabaseProperties_DatabaseLifecycleState = 10
)

// Enum value maps for DatabaseProperties_DatabaseLifecycleState.
var (
	DatabaseProperties_DatabaseLifecycleState_name = map[int32]string{
		0:  "DATABASE_LIFECYCLE_STATE_UNSPECIFIED",
		1:  "PROVISIONING",
		2:  "AVAILABLE",
		3:  "UPDATING",
		4:  "BACKUP_IN_PROGRESS",
		5:  "UPGRADING",
		6:  "CONVERTING",
		7:  "TERMINATING",
		8:  "TERMINATED",
		9:  "RESTORE_FAILED",
		10: "FAILED",
	}
	DatabaseProperties_DatabaseLifecycleState_value = map[string]int32{
		"DATABASE_LIFECYCLE_STATE_UNSPECIFIED": 0,
		"PROVISIONING":                         1,
		"AVAILABLE":                            2,
		"UPDATING":                             3,
		"BACKUP_IN_PROGRESS":                   4,
		"UPGRADING":                            5,
		"CONVERTING":                           6,
		"TERMINATING":                          7,
		"TERMINATED":                           8,
		"RESTORE_FAILED":                       9,
		"FAILED":                               10,
	}
)

func (x DatabaseProperties_DatabaseLifecycleState) Enum() *DatabaseProperties_DatabaseLifecycleState {
	p := new(DatabaseProperties_DatabaseLifecycleState)
	*p = x
	return p
}

func (x DatabaseProperties_DatabaseLifecycleState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DatabaseProperties_DatabaseLifecycleState) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_oracledatabase_v1_database_proto_enumTypes[1].Descriptor()
}

func (DatabaseProperties_DatabaseLifecycleState) Type() protoreflect.EnumType {
	return &file_google_cloud_oracledatabase_v1_database_proto_enumTypes[1]
}

func (x DatabaseProperties_DatabaseLifecycleState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DatabaseProperties_DatabaseLifecycleState.Descriptor instead.
func (DatabaseProperties_DatabaseLifecycleState) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_database_proto_rawDescGZIP(), []int{1, 0}
}

// The type of the database backup destination.
type DbBackupConfig_BackupDestinationType int32

const (
	// Default unspecified value.
	DbBackupConfig_BACKUP_DESTINATION_TYPE_UNSPECIFIED DbBackupConfig_BackupDestinationType = 0
	// Backup destination type is NFS.
	DbBackupConfig_NFS DbBackupConfig_BackupDestinationType = 1
	// Backup destination type is Recovery Appliance.
	DbBackupConfig_RECOVERY_APPLIANCE DbBackupConfig_BackupDestinationType = 2
	// Backup destination type is Object Store.
	DbBackupConfig_OBJECT_STORE DbBackupConfig_BackupDestinationType = 3
	// Backup destination type is Local.
	DbBackupConfig_LOCAL DbBackupConfig_BackupDestinationType = 4
	// Backup destination type is DBRS.
	DbBackupConfig_DBRS DbBackupConfig_BackupDestinationType = 5
)

// Enum value maps for DbBackupConfig_BackupDestinationType.
var (
	DbBackupConfig_BackupDestinationType_name = map[int32]string{
		0: "BACKUP_DESTINATION_TYPE_UNSPECIFIED",
		1: "NFS",
		2: "RECOVERY_APPLIANCE",
		3: "OBJECT_STORE",
		4: "LOCAL",
		5: "DBRS",
	}
	DbBackupConfig_BackupDestinationType_value = map[string]int32{
		"BACKUP_DESTINATION_TYPE_UNSPECIFIED": 0,
		"NFS":                                 1,
		"RECOVERY_APPLIANCE":                  2,
		"OBJECT_STORE":                        3,
		"LOCAL":                               4,
		"DBRS":                                5,
	}
)

func (x DbBackupConfig_BackupDestinationType) Enum() *DbBackupConfig_BackupDestinationType {
	p := new(DbBackupConfig_BackupDestinationType)
	*p = x
	return p
}

func (x DbBackupConfig_BackupDestinationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DbBackupConfig_BackupDestinationType) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_oracledatabase_v1_database_proto_enumTypes[2].Descriptor()
}

func (DbBackupConfig_BackupDestinationType) Type() protoreflect.EnumType {
	return &file_google_cloud_oracledatabase_v1_database_proto_enumTypes[2]
}

func (x DbBackupConfig_BackupDestinationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DbBackupConfig_BackupDestinationType.Descriptor instead.
func (DbBackupConfig_BackupDestinationType) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_database_proto_rawDescGZIP(), []int{2, 0}
}

// The 2 hour window in which the backup should be performed on the database.
type DbBackupConfig_BackupWindow int32

const (
	// Default unspecified value.
	DbBackupConfig_BACKUP_WINDOW_UNSPECIFIED DbBackupConfig_BackupWindow = 0
	// 12:00 AM - 2:00 AM
	DbBackupConfig_SLOT_ONE DbBackupConfig_BackupWindow = 1
	// 2:00 AM - 4:00 AM
	DbBackupConfig_SLOT_TWO DbBackupConfig_BackupWindow = 2
	// 4:00 AM - 6:00 AM
	DbBackupConfig_SLOT_THREE DbBackupConfig_BackupWindow = 3
	// 6:00 AM - 8:00 AM
	DbBackupConfig_SLOT_FOUR DbBackupConfig_BackupWindow = 4
	// 8:00 AM - 10:00 AM
	DbBackupConfig_SLOT_FIVE DbBackupConfig_BackupWindow = 5
	// 10:00 AM - 12:00 PM
	DbBackupConfig_SLOT_SIX DbBackupConfig_BackupWindow = 6
	// 12:00 PM - 2:00 PM
	DbBackupConfig_SLOT_SEVEN DbBackupConfig_BackupWindow = 7
	// 2:00 PM - 4:00 PM
	DbBackupConfig_SLOT_EIGHT DbBackupConfig_BackupWindow = 8
	// 4:00 PM - 6:00 PM
	DbBackupConfig_SLOT_NINE DbBackupConfig_BackupWindow = 9
	// 6:00 PM - 8:00 PM
	DbBackupConfig_SLOT_TEN DbBackupConfig_BackupWindow = 10
	// 8:00 PM - 10:00 PM
	DbBackupConfig_SLOT_ELEVEN DbBackupConfig_BackupWindow = 11
	// 10:00 PM - 12:00 AM
	DbBackupConfig_SLOT_TWELVE DbBackupConfig_BackupWindow = 12
)

// Enum value maps for DbBackupConfig_BackupWindow.
var (
	DbBackupConfig_BackupWindow_name = map[int32]string{
		0:  "BACKUP_WINDOW_UNSPECIFIED",
		1:  "SLOT_ONE",
		2:  "SLOT_TWO",
		3:  "SLOT_THREE",
		4:  "SLOT_FOUR",
		5:  "SLOT_FIVE",
		6:  "SLOT_SIX",
		7:  "SLOT_SEVEN",
		8:  "SLOT_EIGHT",
		9:  "SLOT_NINE",
		10: "SLOT_TEN",
		11: "SLOT_ELEVEN",
		12: "SLOT_TWELVE",
	}
	DbBackupConfig_BackupWindow_value = map[string]int32{
		"BACKUP_WINDOW_UNSPECIFIED": 0,
		"SLOT_ONE":                  1,
		"SLOT_TWO":                  2,
		"SLOT_THREE":                3,
		"SLOT_FOUR":                 4,
		"SLOT_FIVE":                 5,
		"SLOT_SIX":                  6,
		"SLOT_SEVEN":                7,
		"SLOT_EIGHT":                8,
		"SLOT_NINE":                 9,
		"SLOT_TEN":                  10,
		"SLOT_ELEVEN":               11,
		"SLOT_TWELVE":               12,
	}
)

func (x DbBackupConfig_BackupWindow) Enum() *DbBackupConfig_BackupWindow {
	p := new(DbBackupConfig_BackupWindow)
	*p = x
	return p
}

func (x DbBackupConfig_BackupWindow) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DbBackupConfig_BackupWindow) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_oracledatabase_v1_database_proto_enumTypes[3].Descriptor()
}

func (DbBackupConfig_BackupWindow) Type() protoreflect.EnumType {
	return &file_google_cloud_oracledatabase_v1_database_proto_enumTypes[3]
}

func (x DbBackupConfig_BackupWindow) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DbBackupConfig_BackupWindow.Descriptor instead.
func (DbBackupConfig_BackupWindow) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_database_proto_rawDescGZIP(), []int{2, 1}
}

// This defines when the backups will be deleted after Database termination.
type DbBackupConfig_BackupDeletionPolicy int32

const (
	// Default unspecified value.
	DbBackupConfig_BACKUP_DELETION_POLICY_UNSPECIFIED DbBackupConfig_BackupDeletionPolicy = 0
	// Keeps the backup for predefined time
	// i.e. 72 hours and then delete permanently.
	DbBackupConfig_DELETE_IMMEDIATELY DbBackupConfig_BackupDeletionPolicy = 1
	// Keeps the backups as per the policy defined
	// for database backups.
	DbBackupConfig_DELETE_AFTER_RETENTION_PERIOD DbBackupConfig_BackupDeletionPolicy = 2
)

// Enum value maps for DbBackupConfig_BackupDeletionPolicy.
var (
	DbBackupConfig_BackupDeletionPolicy_name = map[int32]string{
		0: "BACKUP_DELETION_POLICY_UNSPECIFIED",
		1: "DELETE_IMMEDIATELY",
		2: "DELETE_AFTER_RETENTION_PERIOD",
	}
	DbBackupConfig_BackupDeletionPolicy_value = map[string]int32{
		"BACKUP_DELETION_POLICY_UNSPECIFIED": 0,
		"DELETE_IMMEDIATELY":                 1,
		"DELETE_AFTER_RETENTION_PERIOD":      2,
	}
)

func (x DbBackupConfig_BackupDeletionPolicy) Enum() *DbBackupConfig_BackupDeletionPolicy {
	p := new(DbBackupConfig_BackupDeletionPolicy)
	*p = x
	return p
}

func (x DbBackupConfig_BackupDeletionPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DbBackupConfig_BackupDeletionPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_oracledatabase_v1_database_proto_enumTypes[4].Descriptor()
}

func (DbBackupConfig_BackupDeletionPolicy) Type() protoreflect.EnumType {
	return &file_google_cloud_oracledatabase_v1_database_proto_enumTypes[4]
}

func (x DbBackupConfig_BackupDeletionPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DbBackupConfig_BackupDeletionPolicy.Descriptor instead.
func (DbBackupConfig_BackupDeletionPolicy) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_database_proto_rawDescGZIP(), []int{2, 2}
}

// Details of the Database resource.
// https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/Database/
type Database struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier. The name of the Database resource in the following format:
	// projects/{project}/locations/{region}/databases/{database}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. The database name. The name must begin with an alphabetic
	// character and can contain a maximum of eight alphanumeric characters.
	// Special characters are not permitted.
	DbName string `protobuf:"bytes,2,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`
	// Optional. The DB_UNIQUE_NAME of the Oracle Database being backed up.
	DbUniqueName string `protobuf:"bytes,3,opt,name=db_unique_name,json=dbUniqueName,proto3" json:"db_unique_name,omitempty"`
	// Required. The password for the default ADMIN user.
	AdminPassword string `protobuf:"bytes,4,opt,name=admin_password,json=adminPassword,proto3" json:"admin_password,omitempty"`
	// Optional. The TDE wallet password for the database.
	TdeWalletPassword string `protobuf:"bytes,5,opt,name=tde_wallet_password,json=tdeWalletPassword,proto3" json:"tde_wallet_password,omitempty"`
	// Optional. The character set for the database. The default is AL32UTF8.
	CharacterSet string `protobuf:"bytes,6,opt,name=character_set,json=characterSet,proto3" json:"character_set,omitempty"`
	// Optional. The national character set for the database. The default is
	// AL16UTF16.
	NcharacterSet string `protobuf:"bytes,7,opt,name=ncharacter_set,json=ncharacterSet,proto3" json:"ncharacter_set,omitempty"`
	// Output only. HTTPS link to OCI resources exposed to Customer via UI
	// Interface.
	OciUrl string `protobuf:"bytes,8,opt,name=oci_url,json=ociUrl,proto3" json:"oci_url,omitempty"`
	// Output only. The date and time that the Database was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Optional. The properties of the Database.
	Properties *DatabaseProperties `protobuf:"bytes,10,opt,name=properties,proto3" json:"properties,omitempty"`
	// Optional. The database ID of the Database.
	DatabaseId string `protobuf:"bytes,11,opt,name=database_id,json=databaseId,proto3" json:"database_id,omitempty"`
	// Optional. The name of the DbHome resource associated with the Database.
	DbHomeName string `protobuf:"bytes,12,opt,name=db_home_name,json=dbHomeName,proto3" json:"db_home_name,omitempty"`
	// Output only. The GCP Oracle zone where the Database is created.
	GcpOracleZone string `protobuf:"bytes,13,opt,name=gcp_oracle_zone,json=gcpOracleZone,proto3" json:"gcp_oracle_zone,omitempty"`
	// Output only. The Status of Operations Insights for this Database.
	OpsInsightsStatus Database_OperationsInsightsStatus `protobuf:"varint,14,opt,name=ops_insights_status,json=opsInsightsStatus,proto3,enum=google.cloud.oracledatabase.v1.Database_OperationsInsightsStatus" json:"ops_insights_status,omitempty"`
}

func (x *Database) Reset() {
	*x = Database{}
	mi := &file_google_cloud_oracledatabase_v1_database_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Database) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Database) ProtoMessage() {}

func (x *Database) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_oracledatabase_v1_database_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Database.ProtoReflect.Descriptor instead.
func (*Database) Descriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_database_proto_rawDescGZIP(), []int{0}
}

func (x *Database) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Database) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

func (x *Database) GetDbUniqueName() string {
	if x != nil {
		return x.DbUniqueName
	}
	return ""
}

func (x *Database) GetAdminPassword() string {
	if x != nil {
		return x.AdminPassword
	}
	return ""
}

func (x *Database) GetTdeWalletPassword() string {
	if x != nil {
		return x.TdeWalletPassword
	}
	return ""
}

func (x *Database) GetCharacterSet() string {
	if x != nil {
		return x.CharacterSet
	}
	return ""
}

func (x *Database) GetNcharacterSet() string {
	if x != nil {
		return x.NcharacterSet
	}
	return ""
}

func (x *Database) GetOciUrl() string {
	if x != nil {
		return x.OciUrl
	}
	return ""
}

func (x *Database) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Database) GetProperties() *DatabaseProperties {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *Database) GetDatabaseId() string {
	if x != nil {
		return x.DatabaseId
	}
	return ""
}

func (x *Database) GetDbHomeName() string {
	if x != nil {
		return x.DbHomeName
	}
	return ""
}

func (x *Database) GetGcpOracleZone() string {
	if x != nil {
		return x.GcpOracleZone
	}
	return ""
}

func (x *Database) GetOpsInsightsStatus() Database_OperationsInsightsStatus {
	if x != nil {
		return x.OpsInsightsStatus
	}
	return Database_OPERATIONS_INSIGHTS_STATUS_UNSPECIFIED
}

// The properties of a Database.
type DatabaseProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. State of the Database.
	State DatabaseProperties_DatabaseLifecycleState `protobuf:"varint,1,opt,name=state,proto3,enum=google.cloud.oracledatabase.v1.DatabaseProperties_DatabaseLifecycleState" json:"state,omitempty"`
	// Required. The Oracle Database version.
	DbVersion string `protobuf:"bytes,2,opt,name=db_version,json=dbVersion,proto3" json:"db_version,omitempty"`
	// Optional. Backup options for the Database.
	DbBackupConfig *DbBackupConfig `protobuf:"bytes,3,opt,name=db_backup_config,json=dbBackupConfig,proto3" json:"db_backup_config,omitempty"`
	// Output only. The Database Management config.
	DatabaseManagementConfig *DatabaseManagementConfig `protobuf:"bytes,4,opt,name=database_management_config,json=databaseManagementConfig,proto3" json:"database_management_config,omitempty"`
}

func (x *DatabaseProperties) Reset() {
	*x = DatabaseProperties{}
	mi := &file_google_cloud_oracledatabase_v1_database_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseProperties) ProtoMessage() {}

func (x *DatabaseProperties) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_oracledatabase_v1_database_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseProperties.ProtoReflect.Descriptor instead.
func (*DatabaseProperties) Descriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_database_proto_rawDescGZIP(), []int{1}
}

func (x *DatabaseProperties) GetState() DatabaseProperties_DatabaseLifecycleState {
	if x != nil {
		return x.State
	}
	return DatabaseProperties_DATABASE_LIFECYCLE_STATE_UNSPECIFIED
}

func (x *DatabaseProperties) GetDbVersion() string {
	if x != nil {
		return x.DbVersion
	}
	return ""
}

func (x *DatabaseProperties) GetDbBackupConfig() *DbBackupConfig {
	if x != nil {
		return x.DbBackupConfig
	}
	return nil
}

func (x *DatabaseProperties) GetDatabaseManagementConfig() *DatabaseManagementConfig {
	if x != nil {
		return x.DatabaseManagementConfig
	}
	return nil
}

// Backup Options for the Database.
type DbBackupConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. If set to true, enables automatic backups on the database.
	AutoBackupEnabled bool `protobuf:"varint,1,opt,name=auto_backup_enabled,json=autoBackupEnabled,proto3" json:"auto_backup_enabled,omitempty"`
	// Optional. Details of the database backup destinations.
	BackupDestinationDetails []*DbBackupConfig_BackupDestinationDetails `protobuf:"bytes,2,rep,name=backup_destination_details,json=backupDestinationDetails,proto3" json:"backup_destination_details,omitempty"`
	// Optional. The number of days an automatic backup is retained before being
	// automatically deleted. This value determines the earliest point in time to
	// which a database can be restored. Min: 1, Max: 60.
	RetentionPeriodDays int32 `protobuf:"varint,3,opt,name=retention_period_days,json=retentionPeriodDays,proto3" json:"retention_period_days,omitempty"`
	// Optional. This defines when the backups will be deleted after Database
	// termination.
	BackupDeletionPolicy DbBackupConfig_BackupDeletionPolicy `protobuf:"varint,4,opt,name=backup_deletion_policy,json=backupDeletionPolicy,proto3,enum=google.cloud.oracledatabase.v1.DbBackupConfig_BackupDeletionPolicy" json:"backup_deletion_policy,omitempty"`
	// Optional. The day of the week on which the full backup should be performed
	// on the database. If no value is provided, it will default to Sunday.
	AutoFullBackupDay dayofweek.DayOfWeek `protobuf:"varint,5,opt,name=auto_full_backup_day,json=autoFullBackupDay,proto3,enum=google.type.DayOfWeek" json:"auto_full_backup_day,omitempty"`
	// Optional. The window in which the full backup should be performed on the
	// database. If no value is provided, the default is anytime.
	AutoFullBackupWindow DbBackupConfig_BackupWindow `protobuf:"varint,6,opt,name=auto_full_backup_window,json=autoFullBackupWindow,proto3,enum=google.cloud.oracledatabase.v1.DbBackupConfig_BackupWindow" json:"auto_full_backup_window,omitempty"`
	// Optional. The window in which the incremental backup should be performed on
	// the database. If no value is provided, the default is anytime except the
	// auto full backup day.
	AutoIncrementalBackupWindow DbBackupConfig_BackupWindow `protobuf:"varint,7,opt,name=auto_incremental_backup_window,json=autoIncrementalBackupWindow,proto3,enum=google.cloud.oracledatabase.v1.DbBackupConfig_BackupWindow" json:"auto_incremental_backup_window,omitempty"`
}

func (x *DbBackupConfig) Reset() {
	*x = DbBackupConfig{}
	mi := &file_google_cloud_oracledatabase_v1_database_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DbBackupConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbBackupConfig) ProtoMessage() {}

func (x *DbBackupConfig) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_oracledatabase_v1_database_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbBackupConfig.ProtoReflect.Descriptor instead.
func (*DbBackupConfig) Descriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_database_proto_rawDescGZIP(), []int{2}
}

func (x *DbBackupConfig) GetAutoBackupEnabled() bool {
	if x != nil {
		return x.AutoBackupEnabled
	}
	return false
}

func (x *DbBackupConfig) GetBackupDestinationDetails() []*DbBackupConfig_BackupDestinationDetails {
	if x != nil {
		return x.BackupDestinationDetails
	}
	return nil
}

func (x *DbBackupConfig) GetRetentionPeriodDays() int32 {
	if x != nil {
		return x.RetentionPeriodDays
	}
	return 0
}

func (x *DbBackupConfig) GetBackupDeletionPolicy() DbBackupConfig_BackupDeletionPolicy {
	if x != nil {
		return x.BackupDeletionPolicy
	}
	return DbBackupConfig_BACKUP_DELETION_POLICY_UNSPECIFIED
}

func (x *DbBackupConfig) GetAutoFullBackupDay() dayofweek.DayOfWeek {
	if x != nil {
		return x.AutoFullBackupDay
	}
	return dayofweek.DayOfWeek(0)
}

func (x *DbBackupConfig) GetAutoFullBackupWindow() DbBackupConfig_BackupWindow {
	if x != nil {
		return x.AutoFullBackupWindow
	}
	return DbBackupConfig_BACKUP_WINDOW_UNSPECIFIED
}

func (x *DbBackupConfig) GetAutoIncrementalBackupWindow() DbBackupConfig_BackupWindow {
	if x != nil {
		return x.AutoIncrementalBackupWindow
	}
	return DbBackupConfig_BACKUP_WINDOW_UNSPECIFIED
}

// The request for `Database.Get`.
type GetDatabaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the Database resource in the following format:
	// projects/{project}/locations/{region}/databases/{database}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetDatabaseRequest) Reset() {
	*x = GetDatabaseRequest{}
	mi := &file_google_cloud_oracledatabase_v1_database_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDatabaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatabaseRequest) ProtoMessage() {}

func (x *GetDatabaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_oracledatabase_v1_database_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatabaseRequest.ProtoReflect.Descriptor instead.
func (*GetDatabaseRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_database_proto_rawDescGZIP(), []int{3}
}

func (x *GetDatabaseRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// The request for `Database.List`.
type ListDatabasesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent resource name in the following format:
	// projects/{project}/locations/{region}
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Optional. The maximum number of items to return.
	// If unspecified, a maximum of 50 Databases will be returned.
	// The maximum value is 1000; values above 1000 will be reset to 1000.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Optional. A token identifying the requested page of results to return. All
	// fields except the filter should remain the same as in the request that
	// provided this page token.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Optional. An expression for filtering the results of the request. list for
	// container databases is supported only with a valid dbSystem (full resource
	// name) filter in this format:
	// `dbSystem="projects/{project}/locations/{location}/dbSystems/{dbSystemId}"`
	Filter string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListDatabasesRequest) Reset() {
	*x = ListDatabasesRequest{}
	mi := &file_google_cloud_oracledatabase_v1_database_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDatabasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDatabasesRequest) ProtoMessage() {}

func (x *ListDatabasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_oracledatabase_v1_database_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDatabasesRequest.ProtoReflect.Descriptor instead.
func (*ListDatabasesRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_database_proto_rawDescGZIP(), []int{4}
}

func (x *ListDatabasesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListDatabasesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListDatabasesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListDatabasesRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// The response for `Database.List`.
type ListDatabasesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of Databases.
	Databases []*Database `protobuf:"bytes,1,rep,name=databases,proto3" json:"databases,omitempty"`
	// A token identifying a page of results the server should return.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListDatabasesResponse) Reset() {
	*x = ListDatabasesResponse{}
	mi := &file_google_cloud_oracledatabase_v1_database_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDatabasesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDatabasesResponse) ProtoMessage() {}

func (x *ListDatabasesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_oracledatabase_v1_database_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDatabasesResponse.ProtoReflect.Descriptor instead.
func (*ListDatabasesResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_database_proto_rawDescGZIP(), []int{5}
}

func (x *ListDatabasesResponse) GetDatabases() []*Database {
	if x != nil {
		return x.Databases
	}
	return nil
}

func (x *ListDatabasesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// The details of the database backup destination.
type DbBackupConfig_BackupDestinationDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The type of the database backup destination.
	Type DbBackupConfig_BackupDestinationType `protobuf:"varint,1,opt,name=type,proto3,enum=google.cloud.oracledatabase.v1.DbBackupConfig_BackupDestinationType" json:"type,omitempty"`
}

func (x *DbBackupConfig_BackupDestinationDetails) Reset() {
	*x = DbBackupConfig_BackupDestinationDetails{}
	mi := &file_google_cloud_oracledatabase_v1_database_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DbBackupConfig_BackupDestinationDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbBackupConfig_BackupDestinationDetails) ProtoMessage() {}

func (x *DbBackupConfig_BackupDestinationDetails) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_oracledatabase_v1_database_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbBackupConfig_BackupDestinationDetails.ProtoReflect.Descriptor instead.
func (*DbBackupConfig_BackupDestinationDetails) Descriptor() ([]byte, []int) {
	return file_google_cloud_oracledatabase_v1_database_proto_rawDescGZIP(), []int{2, 0}
}

func (x *DbBackupConfig_BackupDestinationDetails) GetType() DbBackupConfig_BackupDestinationType {
	if x != nil {
		return x.Type
	}
	return DbBackupConfig_BACKUP_DESTINATION_TYPE_UNSPECIFIED
}

var File_google_cloud_oracledatabase_v1_database_proto protoreflect.FileDescriptor

var file_google_cloud_oracledatabase_v1_database_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x37, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x75, 0x67,
	0x67, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x2f, 0x64, 0x61, 0x79, 0x6f, 0x66, 0x77, 0x65, 0x65, 0x6b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xfd, 0x07, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12,
	0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x08, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x07, 0x64, 0x62, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06,
	0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x0e, 0x64, 0x62, 0x5f, 0x75, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x0c, 0x64, 0x62, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x33, 0x0a,
	0x13, 0x74, 0x64, 0x65, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x11, 0x74, 0x64, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c,
	0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x0e,
	0x6e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0d, 0x6e, 0x63, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x07, 0x6f, 0x63, 0x69, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06,
	0x6f, 0x63, 0x69, 0x55, 0x72, 0x6c, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x57, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x24, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0c, 0x64, 0x62, 0x5f, 0x68, 0x6f,
	0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x0a, 0x64, 0x62, 0x48, 0x6f, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b,
	0x0a, 0x0f, 0x67, 0x63, 0x70, 0x5f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x7a, 0x6f, 0x6e,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0d, 0x67, 0x63,
	0x70, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x76, 0x0a, 0x13, 0x6f,
	0x70, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x11, 0x6f, 0x70, 0x73, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xac, 0x01, 0x0a, 0x18, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2a, 0x0a, 0x26, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x49,
	0x4e, 0x53, 0x49, 0x47, 0x48, 0x54, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x45, 0x4e, 0x41, 0x42, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4e,
	0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x49, 0x53, 0x41, 0x42,
	0x4c, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4e,
	0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x49, 0x4e, 0x47,
	0x10, 0x06, 0x3a, 0x7e, 0xea, 0x41, 0x7b, 0x0a, 0x26, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12,
	0x3c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x7d, 0x2a, 0x09, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x32, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x22, 0xe6, 0x04, 0x0a, 0x12, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x64, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x49, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x22, 0x0a, 0x0a, 0x64, 0x62, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x64, 0x62, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x10, 0x64, 0x62, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x62, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x0e, 0x64, 0x62, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x7b, 0x0a, 0x1a, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x18, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0xe9, 0x01, 0x0a, 0x16, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x66, 0x65,
	0x63, 0x79, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x24, 0x44, 0x41,
	0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f,
	0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x50, 0x44, 0x41, 0x54, 0x49, 0x4e,
	0x47, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x5f, 0x49, 0x4e,
	0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x55,
	0x50, 0x47, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f,
	0x4e, 0x56, 0x45, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x45,
	0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x54,
	0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x52,
	0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x09, 0x12,
	0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x0a, 0x22, 0xc2, 0x0a, 0x0a, 0x0e,
	0x44, 0x62, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x33,
	0x0a, 0x13, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x11, 0x61, 0x75, 0x74, 0x6f, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x8a, 0x01, 0x0a, 0x1a, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x62, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x18, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x37, 0x0a, 0x15, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x13, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x44, 0x61, 0x79, 0x73, 0x12, 0x7e, 0x0a, 0x16, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x62, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x14, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x4c, 0x0a, 0x14, 0x61, 0x75, 0x74,
	0x6f, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x64, 0x61,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x11, 0x61, 0x75, 0x74, 0x6f, 0x46, 0x75, 0x6c, 0x6c, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x44, 0x61, 0x79, 0x12, 0x77, 0x0a, 0x17, 0x61, 0x75, 0x74, 0x6f, 0x5f,
	0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x77, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x62, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x14, 0x61, 0x75, 0x74, 0x6f,
	0x46, 0x75, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x12, 0x85, 0x01, 0x0a, 0x1e, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x62, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x1b, 0x61, 0x75, 0x74,
	0x6f, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x1a, 0x79, 0x0a, 0x18, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x5d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x44, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x62, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x15, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a,
	0x23, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x46, 0x53, 0x10, 0x01, 0x12,
	0x16, 0x0a, 0x12, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x50, 0x50, 0x4c,
	0x49, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x42, 0x4a, 0x45, 0x43,
	0x54, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x4f, 0x43,
	0x41, 0x4c, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x42, 0x52, 0x53, 0x10, 0x05, 0x22, 0xe4,
	0x01, 0x0a, 0x0c, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12,
	0x1d, 0x0a, 0x19, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x53, 0x4c, 0x4f, 0x54, 0x5f, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x53, 0x4c, 0x4f, 0x54, 0x5f, 0x54, 0x57, 0x4f, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x4c,
	0x4f, 0x54, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x45, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x4c,
	0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x52, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x4c, 0x4f,
	0x54, 0x5f, 0x46, 0x49, 0x56, 0x45, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x4c, 0x4f, 0x54,
	0x5f, 0x53, 0x49, 0x58, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x4c, 0x4f, 0x54, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x4e, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x4c, 0x4f, 0x54, 0x5f, 0x45,
	0x49, 0x47, 0x48, 0x54, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x4c, 0x4f, 0x54, 0x5f, 0x4e,
	0x49, 0x4e, 0x45, 0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x4c, 0x4f, 0x54, 0x5f, 0x54, 0x45,
	0x4e, 0x10, 0x0a, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x4c, 0x4f, 0x54, 0x5f, 0x45, 0x4c, 0x45, 0x56,
	0x45, 0x4e, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x4c, 0x4f, 0x54, 0x5f, 0x54, 0x57, 0x45,
	0x4c, 0x56, 0x45, 0x10, 0x0c, 0x22, 0x79, 0x0a, 0x14, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x26, 0x0a,
	0x22, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f,
	0x49, 0x4d, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x21, 0x0a,
	0x1d, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45,
	0x54, 0x45, 0x4e, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x10, 0x02,
	0x22, 0x58, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x28, 0x0a, 0x26, 0x6f, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc1, 0x01, 0x0a, 0x14, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2e, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x28, 0x12, 0x26, 0x6f, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x1b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x87,
	0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0xe7, 0x01, 0x0a, 0x22, 0x63, 0x6f, 0x6d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x42,
	0x0d, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x4a, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x70, 0x62, 0x3b, 0x6f, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x70, 0x62, 0xaa, 0x02, 0x1e, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4f, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x1e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x4f, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5c, 0x56, 0x31, 0xea, 0x02,
	0x21, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a,
	0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x3a, 0x3a,
	0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_oracledatabase_v1_database_proto_rawDescOnce sync.Once
	file_google_cloud_oracledatabase_v1_database_proto_rawDescData = file_google_cloud_oracledatabase_v1_database_proto_rawDesc
)

func file_google_cloud_oracledatabase_v1_database_proto_rawDescGZIP() []byte {
	file_google_cloud_oracledatabase_v1_database_proto_rawDescOnce.Do(func() {
		file_google_cloud_oracledatabase_v1_database_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_oracledatabase_v1_database_proto_rawDescData)
	})
	return file_google_cloud_oracledatabase_v1_database_proto_rawDescData
}

var file_google_cloud_oracledatabase_v1_database_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_google_cloud_oracledatabase_v1_database_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_google_cloud_oracledatabase_v1_database_proto_goTypes = []any{
	(Database_OperationsInsightsStatus)(0),          // 0: google.cloud.oracledatabase.v1.Database.OperationsInsightsStatus
	(DatabaseProperties_DatabaseLifecycleState)(0),  // 1: google.cloud.oracledatabase.v1.DatabaseProperties.DatabaseLifecycleState
	(DbBackupConfig_BackupDestinationType)(0),       // 2: google.cloud.oracledatabase.v1.DbBackupConfig.BackupDestinationType
	(DbBackupConfig_BackupWindow)(0),                // 3: google.cloud.oracledatabase.v1.DbBackupConfig.BackupWindow
	(DbBackupConfig_BackupDeletionPolicy)(0),        // 4: google.cloud.oracledatabase.v1.DbBackupConfig.BackupDeletionPolicy
	(*Database)(nil),                                // 5: google.cloud.oracledatabase.v1.Database
	(*DatabaseProperties)(nil),                      // 6: google.cloud.oracledatabase.v1.DatabaseProperties
	(*DbBackupConfig)(nil),                          // 7: google.cloud.oracledatabase.v1.DbBackupConfig
	(*GetDatabaseRequest)(nil),                      // 8: google.cloud.oracledatabase.v1.GetDatabaseRequest
	(*ListDatabasesRequest)(nil),                    // 9: google.cloud.oracledatabase.v1.ListDatabasesRequest
	(*ListDatabasesResponse)(nil),                   // 10: google.cloud.oracledatabase.v1.ListDatabasesResponse
	(*DbBackupConfig_BackupDestinationDetails)(nil), // 11: google.cloud.oracledatabase.v1.DbBackupConfig.BackupDestinationDetails
	(*timestamppb.Timestamp)(nil),                   // 12: google.protobuf.Timestamp
	(*DatabaseManagementConfig)(nil),                // 13: google.cloud.oracledatabase.v1.DatabaseManagementConfig
	(dayofweek.DayOfWeek)(0),                        // 14: google.type.DayOfWeek
}
var file_google_cloud_oracledatabase_v1_database_proto_depIdxs = []int32{
	12, // 0: google.cloud.oracledatabase.v1.Database.create_time:type_name -> google.protobuf.Timestamp
	6,  // 1: google.cloud.oracledatabase.v1.Database.properties:type_name -> google.cloud.oracledatabase.v1.DatabaseProperties
	0,  // 2: google.cloud.oracledatabase.v1.Database.ops_insights_status:type_name -> google.cloud.oracledatabase.v1.Database.OperationsInsightsStatus
	1,  // 3: google.cloud.oracledatabase.v1.DatabaseProperties.state:type_name -> google.cloud.oracledatabase.v1.DatabaseProperties.DatabaseLifecycleState
	7,  // 4: google.cloud.oracledatabase.v1.DatabaseProperties.db_backup_config:type_name -> google.cloud.oracledatabase.v1.DbBackupConfig
	13, // 5: google.cloud.oracledatabase.v1.DatabaseProperties.database_management_config:type_name -> google.cloud.oracledatabase.v1.DatabaseManagementConfig
	11, // 6: google.cloud.oracledatabase.v1.DbBackupConfig.backup_destination_details:type_name -> google.cloud.oracledatabase.v1.DbBackupConfig.BackupDestinationDetails
	4,  // 7: google.cloud.oracledatabase.v1.DbBackupConfig.backup_deletion_policy:type_name -> google.cloud.oracledatabase.v1.DbBackupConfig.BackupDeletionPolicy
	14, // 8: google.cloud.oracledatabase.v1.DbBackupConfig.auto_full_backup_day:type_name -> google.type.DayOfWeek
	3,  // 9: google.cloud.oracledatabase.v1.DbBackupConfig.auto_full_backup_window:type_name -> google.cloud.oracledatabase.v1.DbBackupConfig.BackupWindow
	3,  // 10: google.cloud.oracledatabase.v1.DbBackupConfig.auto_incremental_backup_window:type_name -> google.cloud.oracledatabase.v1.DbBackupConfig.BackupWindow
	5,  // 11: google.cloud.oracledatabase.v1.ListDatabasesResponse.databases:type_name -> google.cloud.oracledatabase.v1.Database
	2,  // 12: google.cloud.oracledatabase.v1.DbBackupConfig.BackupDestinationDetails.type:type_name -> google.cloud.oracledatabase.v1.DbBackupConfig.BackupDestinationType
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_google_cloud_oracledatabase_v1_database_proto_init() }
func file_google_cloud_oracledatabase_v1_database_proto_init() {
	if File_google_cloud_oracledatabase_v1_database_proto != nil {
		return
	}
	file_google_cloud_oracledatabase_v1_pluggable_database_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_oracledatabase_v1_database_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_cloud_oracledatabase_v1_database_proto_goTypes,
		DependencyIndexes: file_google_cloud_oracledatabase_v1_database_proto_depIdxs,
		EnumInfos:         file_google_cloud_oracledatabase_v1_database_proto_enumTypes,
		MessageInfos:      file_google_cloud_oracledatabase_v1_database_proto_msgTypes,
	}.Build()
	File_google_cloud_oracledatabase_v1_database_proto = out.File
	file_google_cloud_oracledatabase_v1_database_proto_rawDesc = nil
	file_google_cloud_oracledatabase_v1_database_proto_goTypes = nil
	file_google_cloud_oracledatabase_v1_database_proto_depIdxs = nil
}
