// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/apps/meet/v2beta/service.proto

package meetpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SpacesService_CreateSpace_FullMethodName             = "/google.apps.meet.v2beta.SpacesService/CreateSpace"
	SpacesService_GetSpace_FullMethodName                = "/google.apps.meet.v2beta.SpacesService/GetSpace"
	SpacesService_UpdateSpace_FullMethodName             = "/google.apps.meet.v2beta.SpacesService/UpdateSpace"
	SpacesService_ConnectActiveConference_FullMethodName = "/google.apps.meet.v2beta.SpacesService/ConnectActiveConference"
	SpacesService_EndActiveConference_FullMethodName     = "/google.apps.meet.v2beta.SpacesService/EndActiveConference"
	SpacesService_CreateMember_FullMethodName            = "/google.apps.meet.v2beta.SpacesService/CreateMember"
	SpacesService_GetMember_FullMethodName               = "/google.apps.meet.v2beta.SpacesService/GetMember"
	SpacesService_ListMembers_FullMethodName             = "/google.apps.meet.v2beta.SpacesService/ListMembers"
	SpacesService_DeleteMember_FullMethodName            = "/google.apps.meet.v2beta.SpacesService/DeleteMember"
)

// SpacesServiceClient is the client API for SpacesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpacesServiceClient interface {
	// Creates a space.
	CreateSpace(ctx context.Context, in *CreateSpaceRequest, opts ...grpc.CallOption) (*Space, error)
	// Gets details about a meeting space.
	//
	// For an example, see [Get a meeting
	// space](https://developers.google.com/meet/api/guides/meeting-spaces#get-meeting-space).
	GetSpace(ctx context.Context, in *GetSpaceRequest, opts ...grpc.CallOption) (*Space, error)
	// Updates details about a meeting space.
	//
	// For an example, see [Update a meeting
	// space](https://developers.google.com/meet/api/guides/meeting-spaces#update-meeting-space).
	UpdateSpace(ctx context.Context, in *UpdateSpaceRequest, opts ...grpc.CallOption) (*Space, error)
	// [Developer Preview](https://developers.google.com/workspace/preview):
	// Broker a WebRTC connection to the active conference of a space.
	//
	// On success, clients must use the resulting SDP (Session Description
	// Protocol) answer to establish a WebRTC connection. Once connected,
	// additional functionality is available across WebRTC data channels.
	//
	// See [Meet Media API
	// overview](https://developers.google.com/meet/media-api/guides/overview) for
	// more details about this connection.
	ConnectActiveConference(ctx context.Context, in *ConnectActiveConferenceRequest, opts ...grpc.CallOption) (*ConnectActiveConferenceResponse, error)
	// Ends an active conference (if there's one).
	//
	// For an example, see [End active
	// conference](https://developers.google.com/meet/api/guides/meeting-spaces#end-active-conference).
	EndActiveConference(ctx context.Context, in *EndActiveConferenceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// [Developer Preview](https://developers.google.com/workspace/preview):
	// Create a member.
	//
	// This API supports the `fields` parameter in
	// [SystemParameterContext](https://cloud.google.com/apis/docs/system-parameters).
	// When the `fields` parameter is omitted, this API response will default to
	// "name,email,role,user".
	CreateMember(ctx context.Context, in *CreateMemberRequest, opts ...grpc.CallOption) (*Member, error)
	// [Developer Preview](https://developers.google.com/workspace/preview):
	// Get a member.
	//
	// This API supports the `fields` parameter in
	// [SystemParameterContext](https://cloud.google.com/apis/docs/system-parameters).
	// When the `fields` parameter is omitted, this API response will default to
	// "name,email,role,user".
	GetMember(ctx context.Context, in *GetMemberRequest, opts ...grpc.CallOption) (*Member, error)
	// [Developer Preview](https://developers.google.com/workspace/preview):
	// List members.
	//
	// This API supports the `fields` parameter in
	// [SystemParameterContext](https://cloud.google.com/apis/docs/system-parameters).
	// When the `fields` parameter is omitted this API response will default to
	// "name,email,role,user".
	ListMembers(ctx context.Context, in *ListMembersRequest, opts ...grpc.CallOption) (*ListMembersResponse, error)
	// [Developer Preview](https://developers.google.com/workspace/preview):
	// Delete the member who was previously assigned roles in the space.
	DeleteMember(ctx context.Context, in *DeleteMemberRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type spacesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSpacesServiceClient(cc grpc.ClientConnInterface) SpacesServiceClient {
	return &spacesServiceClient{cc}
}

func (c *spacesServiceClient) CreateSpace(ctx context.Context, in *CreateSpaceRequest, opts ...grpc.CallOption) (*Space, error) {
	out := new(Space)
	err := c.cc.Invoke(ctx, SpacesService_CreateSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesServiceClient) GetSpace(ctx context.Context, in *GetSpaceRequest, opts ...grpc.CallOption) (*Space, error) {
	out := new(Space)
	err := c.cc.Invoke(ctx, SpacesService_GetSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesServiceClient) UpdateSpace(ctx context.Context, in *UpdateSpaceRequest, opts ...grpc.CallOption) (*Space, error) {
	out := new(Space)
	err := c.cc.Invoke(ctx, SpacesService_UpdateSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesServiceClient) ConnectActiveConference(ctx context.Context, in *ConnectActiveConferenceRequest, opts ...grpc.CallOption) (*ConnectActiveConferenceResponse, error) {
	out := new(ConnectActiveConferenceResponse)
	err := c.cc.Invoke(ctx, SpacesService_ConnectActiveConference_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesServiceClient) EndActiveConference(ctx context.Context, in *EndActiveConferenceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SpacesService_EndActiveConference_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesServiceClient) CreateMember(ctx context.Context, in *CreateMemberRequest, opts ...grpc.CallOption) (*Member, error) {
	out := new(Member)
	err := c.cc.Invoke(ctx, SpacesService_CreateMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesServiceClient) GetMember(ctx context.Context, in *GetMemberRequest, opts ...grpc.CallOption) (*Member, error) {
	out := new(Member)
	err := c.cc.Invoke(ctx, SpacesService_GetMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesServiceClient) ListMembers(ctx context.Context, in *ListMembersRequest, opts ...grpc.CallOption) (*ListMembersResponse, error) {
	out := new(ListMembersResponse)
	err := c.cc.Invoke(ctx, SpacesService_ListMembers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesServiceClient) DeleteMember(ctx context.Context, in *DeleteMemberRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SpacesService_DeleteMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpacesServiceServer is the server API for SpacesService service.
// All implementations should embed UnimplementedSpacesServiceServer
// for forward compatibility
type SpacesServiceServer interface {
	// Creates a space.
	CreateSpace(context.Context, *CreateSpaceRequest) (*Space, error)
	// Gets details about a meeting space.
	//
	// For an example, see [Get a meeting
	// space](https://developers.google.com/meet/api/guides/meeting-spaces#get-meeting-space).
	GetSpace(context.Context, *GetSpaceRequest) (*Space, error)
	// Updates details about a meeting space.
	//
	// For an example, see [Update a meeting
	// space](https://developers.google.com/meet/api/guides/meeting-spaces#update-meeting-space).
	UpdateSpace(context.Context, *UpdateSpaceRequest) (*Space, error)
	// [Developer Preview](https://developers.google.com/workspace/preview):
	// Broker a WebRTC connection to the active conference of a space.
	//
	// On success, clients must use the resulting SDP (Session Description
	// Protocol) answer to establish a WebRTC connection. Once connected,
	// additional functionality is available across WebRTC data channels.
	//
	// See [Meet Media API
	// overview](https://developers.google.com/meet/media-api/guides/overview) for
	// more details about this connection.
	ConnectActiveConference(context.Context, *ConnectActiveConferenceRequest) (*ConnectActiveConferenceResponse, error)
	// Ends an active conference (if there's one).
	//
	// For an example, see [End active
	// conference](https://developers.google.com/meet/api/guides/meeting-spaces#end-active-conference).
	EndActiveConference(context.Context, *EndActiveConferenceRequest) (*emptypb.Empty, error)
	// [Developer Preview](https://developers.google.com/workspace/preview):
	// Create a member.
	//
	// This API supports the `fields` parameter in
	// [SystemParameterContext](https://cloud.google.com/apis/docs/system-parameters).
	// When the `fields` parameter is omitted, this API response will default to
	// "name,email,role,user".
	CreateMember(context.Context, *CreateMemberRequest) (*Member, error)
	// [Developer Preview](https://developers.google.com/workspace/preview):
	// Get a member.
	//
	// This API supports the `fields` parameter in
	// [SystemParameterContext](https://cloud.google.com/apis/docs/system-parameters).
	// When the `fields` parameter is omitted, this API response will default to
	// "name,email,role,user".
	GetMember(context.Context, *GetMemberRequest) (*Member, error)
	// [Developer Preview](https://developers.google.com/workspace/preview):
	// List members.
	//
	// This API supports the `fields` parameter in
	// [SystemParameterContext](https://cloud.google.com/apis/docs/system-parameters).
	// When the `fields` parameter is omitted this API response will default to
	// "name,email,role,user".
	ListMembers(context.Context, *ListMembersRequest) (*ListMembersResponse, error)
	// [Developer Preview](https://developers.google.com/workspace/preview):
	// Delete the member who was previously assigned roles in the space.
	DeleteMember(context.Context, *DeleteMemberRequest) (*emptypb.Empty, error)
}

// UnimplementedSpacesServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSpacesServiceServer struct {
}

func (UnimplementedSpacesServiceServer) CreateSpace(context.Context, *CreateSpaceRequest) (*Space, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSpace not implemented")
}
func (UnimplementedSpacesServiceServer) GetSpace(context.Context, *GetSpaceRequest) (*Space, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpace not implemented")
}
func (UnimplementedSpacesServiceServer) UpdateSpace(context.Context, *UpdateSpaceRequest) (*Space, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSpace not implemented")
}
func (UnimplementedSpacesServiceServer) ConnectActiveConference(context.Context, *ConnectActiveConferenceRequest) (*ConnectActiveConferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectActiveConference not implemented")
}
func (UnimplementedSpacesServiceServer) EndActiveConference(context.Context, *EndActiveConferenceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndActiveConference not implemented")
}
func (UnimplementedSpacesServiceServer) CreateMember(context.Context, *CreateMemberRequest) (*Member, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMember not implemented")
}
func (UnimplementedSpacesServiceServer) GetMember(context.Context, *GetMemberRequest) (*Member, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMember not implemented")
}
func (UnimplementedSpacesServiceServer) ListMembers(context.Context, *ListMembersRequest) (*ListMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMembers not implemented")
}
func (UnimplementedSpacesServiceServer) DeleteMember(context.Context, *DeleteMemberRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMember not implemented")
}

// UnsafeSpacesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpacesServiceServer will
// result in compilation errors.
type UnsafeSpacesServiceServer interface {
	mustEmbedUnimplementedSpacesServiceServer()
}

func RegisterSpacesServiceServer(s grpc.ServiceRegistrar, srv SpacesServiceServer) {
	s.RegisterService(&SpacesService_ServiceDesc, srv)
}

func _SpacesService_CreateSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServiceServer).CreateSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpacesService_CreateSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServiceServer).CreateSpace(ctx, req.(*CreateSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpacesService_GetSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServiceServer).GetSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpacesService_GetSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServiceServer).GetSpace(ctx, req.(*GetSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpacesService_UpdateSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServiceServer).UpdateSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpacesService_UpdateSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServiceServer).UpdateSpace(ctx, req.(*UpdateSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpacesService_ConnectActiveConference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectActiveConferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServiceServer).ConnectActiveConference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpacesService_ConnectActiveConference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServiceServer).ConnectActiveConference(ctx, req.(*ConnectActiveConferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpacesService_EndActiveConference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndActiveConferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServiceServer).EndActiveConference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpacesService_EndActiveConference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServiceServer).EndActiveConference(ctx, req.(*EndActiveConferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpacesService_CreateMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServiceServer).CreateMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpacesService_CreateMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServiceServer).CreateMember(ctx, req.(*CreateMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpacesService_GetMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServiceServer).GetMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpacesService_GetMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServiceServer).GetMember(ctx, req.(*GetMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpacesService_ListMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServiceServer).ListMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpacesService_ListMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServiceServer).ListMembers(ctx, req.(*ListMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpacesService_DeleteMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServiceServer).DeleteMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpacesService_DeleteMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServiceServer).DeleteMember(ctx, req.(*DeleteMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SpacesService_ServiceDesc is the grpc.ServiceDesc for SpacesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpacesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.apps.meet.v2beta.SpacesService",
	HandlerType: (*SpacesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSpace",
			Handler:    _SpacesService_CreateSpace_Handler,
		},
		{
			MethodName: "GetSpace",
			Handler:    _SpacesService_GetSpace_Handler,
		},
		{
			MethodName: "UpdateSpace",
			Handler:    _SpacesService_UpdateSpace_Handler,
		},
		{
			MethodName: "ConnectActiveConference",
			Handler:    _SpacesService_ConnectActiveConference_Handler,
		},
		{
			MethodName: "EndActiveConference",
			Handler:    _SpacesService_EndActiveConference_Handler,
		},
		{
			MethodName: "CreateMember",
			Handler:    _SpacesService_CreateMember_Handler,
		},
		{
			MethodName: "GetMember",
			Handler:    _SpacesService_GetMember_Handler,
		},
		{
			MethodName: "ListMembers",
			Handler:    _SpacesService_ListMembers_Handler,
		},
		{
			MethodName: "DeleteMember",
			Handler:    _SpacesService_DeleteMember_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/apps/meet/v2beta/service.proto",
}

const (
	ConferenceRecordsService_GetConferenceRecord_FullMethodName     = "/google.apps.meet.v2beta.ConferenceRecordsService/GetConferenceRecord"
	ConferenceRecordsService_ListConferenceRecords_FullMethodName   = "/google.apps.meet.v2beta.ConferenceRecordsService/ListConferenceRecords"
	ConferenceRecordsService_GetParticipant_FullMethodName          = "/google.apps.meet.v2beta.ConferenceRecordsService/GetParticipant"
	ConferenceRecordsService_ListParticipants_FullMethodName        = "/google.apps.meet.v2beta.ConferenceRecordsService/ListParticipants"
	ConferenceRecordsService_GetParticipantSession_FullMethodName   = "/google.apps.meet.v2beta.ConferenceRecordsService/GetParticipantSession"
	ConferenceRecordsService_ListParticipantSessions_FullMethodName = "/google.apps.meet.v2beta.ConferenceRecordsService/ListParticipantSessions"
	ConferenceRecordsService_GetRecording_FullMethodName            = "/google.apps.meet.v2beta.ConferenceRecordsService/GetRecording"
	ConferenceRecordsService_ListRecordings_FullMethodName          = "/google.apps.meet.v2beta.ConferenceRecordsService/ListRecordings"
	ConferenceRecordsService_GetTranscript_FullMethodName           = "/google.apps.meet.v2beta.ConferenceRecordsService/GetTranscript"
	ConferenceRecordsService_ListTranscripts_FullMethodName         = "/google.apps.meet.v2beta.ConferenceRecordsService/ListTranscripts"
	ConferenceRecordsService_GetTranscriptEntry_FullMethodName      = "/google.apps.meet.v2beta.ConferenceRecordsService/GetTranscriptEntry"
	ConferenceRecordsService_ListTranscriptEntries_FullMethodName   = "/google.apps.meet.v2beta.ConferenceRecordsService/ListTranscriptEntries"
)

// ConferenceRecordsServiceClient is the client API for ConferenceRecordsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConferenceRecordsServiceClient interface {
	// Gets a conference record by conference ID.
	GetConferenceRecord(ctx context.Context, in *GetConferenceRecordRequest, opts ...grpc.CallOption) (*ConferenceRecord, error)
	// Lists the conference records. By default, ordered by start time and in
	// descending order.
	ListConferenceRecords(ctx context.Context, in *ListConferenceRecordsRequest, opts ...grpc.CallOption) (*ListConferenceRecordsResponse, error)
	// Gets a participant by participant ID.
	GetParticipant(ctx context.Context, in *GetParticipantRequest, opts ...grpc.CallOption) (*Participant, error)
	// Lists the participants in a conference record. By default, ordered by join
	// time and in descending order. This API supports `fields` as standard
	// parameters like every other API. However, when the `fields` request
	// parameter is omitted, this API defaults to `'participants/*,
	// next_page_token'`.
	ListParticipants(ctx context.Context, in *ListParticipantsRequest, opts ...grpc.CallOption) (*ListParticipantsResponse, error)
	// Gets a participant session by participant session ID.
	GetParticipantSession(ctx context.Context, in *GetParticipantSessionRequest, opts ...grpc.CallOption) (*ParticipantSession, error)
	// Lists the participant sessions of a participant in a conference record. By
	// default, ordered by join time and in descending order. This API supports
	// `fields` as standard parameters like every other API. However, when the
	// `fields` request parameter is omitted this API defaults to
	// `'participantsessions/*, next_page_token'`.
	ListParticipantSessions(ctx context.Context, in *ListParticipantSessionsRequest, opts ...grpc.CallOption) (*ListParticipantSessionsResponse, error)
	// Gets a recording by recording ID.
	GetRecording(ctx context.Context, in *GetRecordingRequest, opts ...grpc.CallOption) (*Recording, error)
	// Lists the recording resources from the conference record. By default,
	// ordered by start time and in ascending order.
	ListRecordings(ctx context.Context, in *ListRecordingsRequest, opts ...grpc.CallOption) (*ListRecordingsResponse, error)
	// Gets a transcript by transcript ID.
	GetTranscript(ctx context.Context, in *GetTranscriptRequest, opts ...grpc.CallOption) (*Transcript, error)
	// Lists the set of transcripts from the conference record. By default,
	// ordered by start time and in ascending order.
	ListTranscripts(ctx context.Context, in *ListTranscriptsRequest, opts ...grpc.CallOption) (*ListTranscriptsResponse, error)
	// Gets a `TranscriptEntry` resource by entry ID.
	//
	// Note: The transcript entries returned by the Google Meet API might not
	// match the transcription found in the Google Docs transcript file. This can
	// occur when the Google Docs transcript file is modified after generation.
	GetTranscriptEntry(ctx context.Context, in *GetTranscriptEntryRequest, opts ...grpc.CallOption) (*TranscriptEntry, error)
	// Lists the structured transcript entries per transcript. By default, ordered
	// by start time and in ascending order.
	//
	// Note: The transcript entries returned by the Google Meet API might not
	// match the transcription found in the Google Docs transcript file. This can
	// occur when the Google Docs transcript file is modified after generation.
	ListTranscriptEntries(ctx context.Context, in *ListTranscriptEntriesRequest, opts ...grpc.CallOption) (*ListTranscriptEntriesResponse, error)
}

type conferenceRecordsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConferenceRecordsServiceClient(cc grpc.ClientConnInterface) ConferenceRecordsServiceClient {
	return &conferenceRecordsServiceClient{cc}
}

func (c *conferenceRecordsServiceClient) GetConferenceRecord(ctx context.Context, in *GetConferenceRecordRequest, opts ...grpc.CallOption) (*ConferenceRecord, error) {
	out := new(ConferenceRecord)
	err := c.cc.Invoke(ctx, ConferenceRecordsService_GetConferenceRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceRecordsServiceClient) ListConferenceRecords(ctx context.Context, in *ListConferenceRecordsRequest, opts ...grpc.CallOption) (*ListConferenceRecordsResponse, error) {
	out := new(ListConferenceRecordsResponse)
	err := c.cc.Invoke(ctx, ConferenceRecordsService_ListConferenceRecords_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceRecordsServiceClient) GetParticipant(ctx context.Context, in *GetParticipantRequest, opts ...grpc.CallOption) (*Participant, error) {
	out := new(Participant)
	err := c.cc.Invoke(ctx, ConferenceRecordsService_GetParticipant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceRecordsServiceClient) ListParticipants(ctx context.Context, in *ListParticipantsRequest, opts ...grpc.CallOption) (*ListParticipantsResponse, error) {
	out := new(ListParticipantsResponse)
	err := c.cc.Invoke(ctx, ConferenceRecordsService_ListParticipants_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceRecordsServiceClient) GetParticipantSession(ctx context.Context, in *GetParticipantSessionRequest, opts ...grpc.CallOption) (*ParticipantSession, error) {
	out := new(ParticipantSession)
	err := c.cc.Invoke(ctx, ConferenceRecordsService_GetParticipantSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceRecordsServiceClient) ListParticipantSessions(ctx context.Context, in *ListParticipantSessionsRequest, opts ...grpc.CallOption) (*ListParticipantSessionsResponse, error) {
	out := new(ListParticipantSessionsResponse)
	err := c.cc.Invoke(ctx, ConferenceRecordsService_ListParticipantSessions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceRecordsServiceClient) GetRecording(ctx context.Context, in *GetRecordingRequest, opts ...grpc.CallOption) (*Recording, error) {
	out := new(Recording)
	err := c.cc.Invoke(ctx, ConferenceRecordsService_GetRecording_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceRecordsServiceClient) ListRecordings(ctx context.Context, in *ListRecordingsRequest, opts ...grpc.CallOption) (*ListRecordingsResponse, error) {
	out := new(ListRecordingsResponse)
	err := c.cc.Invoke(ctx, ConferenceRecordsService_ListRecordings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceRecordsServiceClient) GetTranscript(ctx context.Context, in *GetTranscriptRequest, opts ...grpc.CallOption) (*Transcript, error) {
	out := new(Transcript)
	err := c.cc.Invoke(ctx, ConferenceRecordsService_GetTranscript_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceRecordsServiceClient) ListTranscripts(ctx context.Context, in *ListTranscriptsRequest, opts ...grpc.CallOption) (*ListTranscriptsResponse, error) {
	out := new(ListTranscriptsResponse)
	err := c.cc.Invoke(ctx, ConferenceRecordsService_ListTranscripts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceRecordsServiceClient) GetTranscriptEntry(ctx context.Context, in *GetTranscriptEntryRequest, opts ...grpc.CallOption) (*TranscriptEntry, error) {
	out := new(TranscriptEntry)
	err := c.cc.Invoke(ctx, ConferenceRecordsService_GetTranscriptEntry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conferenceRecordsServiceClient) ListTranscriptEntries(ctx context.Context, in *ListTranscriptEntriesRequest, opts ...grpc.CallOption) (*ListTranscriptEntriesResponse, error) {
	out := new(ListTranscriptEntriesResponse)
	err := c.cc.Invoke(ctx, ConferenceRecordsService_ListTranscriptEntries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConferenceRecordsServiceServer is the server API for ConferenceRecordsService service.
// All implementations should embed UnimplementedConferenceRecordsServiceServer
// for forward compatibility
type ConferenceRecordsServiceServer interface {
	// Gets a conference record by conference ID.
	GetConferenceRecord(context.Context, *GetConferenceRecordRequest) (*ConferenceRecord, error)
	// Lists the conference records. By default, ordered by start time and in
	// descending order.
	ListConferenceRecords(context.Context, *ListConferenceRecordsRequest) (*ListConferenceRecordsResponse, error)
	// Gets a participant by participant ID.
	GetParticipant(context.Context, *GetParticipantRequest) (*Participant, error)
	// Lists the participants in a conference record. By default, ordered by join
	// time and in descending order. This API supports `fields` as standard
	// parameters like every other API. However, when the `fields` request
	// parameter is omitted, this API defaults to `'participants/*,
	// next_page_token'`.
	ListParticipants(context.Context, *ListParticipantsRequest) (*ListParticipantsResponse, error)
	// Gets a participant session by participant session ID.
	GetParticipantSession(context.Context, *GetParticipantSessionRequest) (*ParticipantSession, error)
	// Lists the participant sessions of a participant in a conference record. By
	// default, ordered by join time and in descending order. This API supports
	// `fields` as standard parameters like every other API. However, when the
	// `fields` request parameter is omitted this API defaults to
	// `'participantsessions/*, next_page_token'`.
	ListParticipantSessions(context.Context, *ListParticipantSessionsRequest) (*ListParticipantSessionsResponse, error)
	// Gets a recording by recording ID.
	GetRecording(context.Context, *GetRecordingRequest) (*Recording, error)
	// Lists the recording resources from the conference record. By default,
	// ordered by start time and in ascending order.
	ListRecordings(context.Context, *ListRecordingsRequest) (*ListRecordingsResponse, error)
	// Gets a transcript by transcript ID.
	GetTranscript(context.Context, *GetTranscriptRequest) (*Transcript, error)
	// Lists the set of transcripts from the conference record. By default,
	// ordered by start time and in ascending order.
	ListTranscripts(context.Context, *ListTranscriptsRequest) (*ListTranscriptsResponse, error)
	// Gets a `TranscriptEntry` resource by entry ID.
	//
	// Note: The transcript entries returned by the Google Meet API might not
	// match the transcription found in the Google Docs transcript file. This can
	// occur when the Google Docs transcript file is modified after generation.
	GetTranscriptEntry(context.Context, *GetTranscriptEntryRequest) (*TranscriptEntry, error)
	// Lists the structured transcript entries per transcript. By default, ordered
	// by start time and in ascending order.
	//
	// Note: The transcript entries returned by the Google Meet API might not
	// match the transcription found in the Google Docs transcript file. This can
	// occur when the Google Docs transcript file is modified after generation.
	ListTranscriptEntries(context.Context, *ListTranscriptEntriesRequest) (*ListTranscriptEntriesResponse, error)
}

// UnimplementedConferenceRecordsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedConferenceRecordsServiceServer struct {
}

func (UnimplementedConferenceRecordsServiceServer) GetConferenceRecord(context.Context, *GetConferenceRecordRequest) (*ConferenceRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConferenceRecord not implemented")
}
func (UnimplementedConferenceRecordsServiceServer) ListConferenceRecords(context.Context, *ListConferenceRecordsRequest) (*ListConferenceRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConferenceRecords not implemented")
}
func (UnimplementedConferenceRecordsServiceServer) GetParticipant(context.Context, *GetParticipantRequest) (*Participant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParticipant not implemented")
}
func (UnimplementedConferenceRecordsServiceServer) ListParticipants(context.Context, *ListParticipantsRequest) (*ListParticipantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListParticipants not implemented")
}
func (UnimplementedConferenceRecordsServiceServer) GetParticipantSession(context.Context, *GetParticipantSessionRequest) (*ParticipantSession, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParticipantSession not implemented")
}
func (UnimplementedConferenceRecordsServiceServer) ListParticipantSessions(context.Context, *ListParticipantSessionsRequest) (*ListParticipantSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListParticipantSessions not implemented")
}
func (UnimplementedConferenceRecordsServiceServer) GetRecording(context.Context, *GetRecordingRequest) (*Recording, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecording not implemented")
}
func (UnimplementedConferenceRecordsServiceServer) ListRecordings(context.Context, *ListRecordingsRequest) (*ListRecordingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRecordings not implemented")
}
func (UnimplementedConferenceRecordsServiceServer) GetTranscript(context.Context, *GetTranscriptRequest) (*Transcript, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTranscript not implemented")
}
func (UnimplementedConferenceRecordsServiceServer) ListTranscripts(context.Context, *ListTranscriptsRequest) (*ListTranscriptsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTranscripts not implemented")
}
func (UnimplementedConferenceRecordsServiceServer) GetTranscriptEntry(context.Context, *GetTranscriptEntryRequest) (*TranscriptEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTranscriptEntry not implemented")
}
func (UnimplementedConferenceRecordsServiceServer) ListTranscriptEntries(context.Context, *ListTranscriptEntriesRequest) (*ListTranscriptEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTranscriptEntries not implemented")
}

// UnsafeConferenceRecordsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConferenceRecordsServiceServer will
// result in compilation errors.
type UnsafeConferenceRecordsServiceServer interface {
	mustEmbedUnimplementedConferenceRecordsServiceServer()
}

func RegisterConferenceRecordsServiceServer(s grpc.ServiceRegistrar, srv ConferenceRecordsServiceServer) {
	s.RegisterService(&ConferenceRecordsService_ServiceDesc, srv)
}

func _ConferenceRecordsService_GetConferenceRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConferenceRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceRecordsServiceServer).GetConferenceRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConferenceRecordsService_GetConferenceRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceRecordsServiceServer).GetConferenceRecord(ctx, req.(*GetConferenceRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConferenceRecordsService_ListConferenceRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConferenceRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceRecordsServiceServer).ListConferenceRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConferenceRecordsService_ListConferenceRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceRecordsServiceServer).ListConferenceRecords(ctx, req.(*ListConferenceRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConferenceRecordsService_GetParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetParticipantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceRecordsServiceServer).GetParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConferenceRecordsService_GetParticipant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceRecordsServiceServer).GetParticipant(ctx, req.(*GetParticipantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConferenceRecordsService_ListParticipants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListParticipantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceRecordsServiceServer).ListParticipants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConferenceRecordsService_ListParticipants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceRecordsServiceServer).ListParticipants(ctx, req.(*ListParticipantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConferenceRecordsService_GetParticipantSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetParticipantSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceRecordsServiceServer).GetParticipantSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConferenceRecordsService_GetParticipantSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceRecordsServiceServer).GetParticipantSession(ctx, req.(*GetParticipantSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConferenceRecordsService_ListParticipantSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListParticipantSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceRecordsServiceServer).ListParticipantSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConferenceRecordsService_ListParticipantSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceRecordsServiceServer).ListParticipantSessions(ctx, req.(*ListParticipantSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConferenceRecordsService_GetRecording_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceRecordsServiceServer).GetRecording(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConferenceRecordsService_GetRecording_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceRecordsServiceServer).GetRecording(ctx, req.(*GetRecordingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConferenceRecordsService_ListRecordings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRecordingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceRecordsServiceServer).ListRecordings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConferenceRecordsService_ListRecordings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceRecordsServiceServer).ListRecordings(ctx, req.(*ListRecordingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConferenceRecordsService_GetTranscript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTranscriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceRecordsServiceServer).GetTranscript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConferenceRecordsService_GetTranscript_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceRecordsServiceServer).GetTranscript(ctx, req.(*GetTranscriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConferenceRecordsService_ListTranscripts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTranscriptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceRecordsServiceServer).ListTranscripts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConferenceRecordsService_ListTranscripts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceRecordsServiceServer).ListTranscripts(ctx, req.(*ListTranscriptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConferenceRecordsService_GetTranscriptEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTranscriptEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceRecordsServiceServer).GetTranscriptEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConferenceRecordsService_GetTranscriptEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceRecordsServiceServer).GetTranscriptEntry(ctx, req.(*GetTranscriptEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConferenceRecordsService_ListTranscriptEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTranscriptEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConferenceRecordsServiceServer).ListTranscriptEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConferenceRecordsService_ListTranscriptEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConferenceRecordsServiceServer).ListTranscriptEntries(ctx, req.(*ListTranscriptEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConferenceRecordsService_ServiceDesc is the grpc.ServiceDesc for ConferenceRecordsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConferenceRecordsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.apps.meet.v2beta.ConferenceRecordsService",
	HandlerType: (*ConferenceRecordsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConferenceRecord",
			Handler:    _ConferenceRecordsService_GetConferenceRecord_Handler,
		},
		{
			MethodName: "ListConferenceRecords",
			Handler:    _ConferenceRecordsService_ListConferenceRecords_Handler,
		},
		{
			MethodName: "GetParticipant",
			Handler:    _ConferenceRecordsService_GetParticipant_Handler,
		},
		{
			MethodName: "ListParticipants",
			Handler:    _ConferenceRecordsService_ListParticipants_Handler,
		},
		{
			MethodName: "GetParticipantSession",
			Handler:    _ConferenceRecordsService_GetParticipantSession_Handler,
		},
		{
			MethodName: "ListParticipantSessions",
			Handler:    _ConferenceRecordsService_ListParticipantSessions_Handler,
		},
		{
			MethodName: "GetRecording",
			Handler:    _ConferenceRecordsService_GetRecording_Handler,
		},
		{
			MethodName: "ListRecordings",
			Handler:    _ConferenceRecordsService_ListRecordings_Handler,
		},
		{
			MethodName: "GetTranscript",
			Handler:    _ConferenceRecordsService_GetTranscript_Handler,
		},
		{
			MethodName: "ListTranscripts",
			Handler:    _ConferenceRecordsService_ListTranscripts_Handler,
		},
		{
			MethodName: "GetTranscriptEntry",
			Handler:    _ConferenceRecordsService_GetTranscriptEntry_Handler,
		},
		{
			MethodName: "ListTranscriptEntries",
			Handler:    _ConferenceRecordsService_ListTranscriptEntries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/apps/meet/v2beta/service.proto",
}
