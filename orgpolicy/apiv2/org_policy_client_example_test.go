// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package orgpolicy_test

import (
	"context"

	orgpolicy "cloud.google.com/go/orgpolicy/apiv2"
	"google.golang.org/api/iterator"
	orgpolicypb "google.golang.org/genproto/googleapis/cloud/orgpolicy/v2"
)

func ExampleNewClient() {
	ctx := context.Background()
	c, err := orgpolicy.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use client.
	_ = c
}

func ExampleClient_ListConstraints() {
	// import orgpolicypb "google.golang.org/genproto/googleapis/cloud/orgpolicy/v2"
	// import "google.golang.org/api/iterator"

	ctx := context.Background()
	c, err := orgpolicy.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &orgpolicypb.ListConstraintsRequest{
		// TODO: Fill request struct fields.
	}
	it := c.ListConstraints(ctx, req)
	for {
		resp, err := it.Next()
		if err == iterator.Done {
			break
		}
		if err != nil {
			// TODO: Handle error.
		}
		// TODO: Use resp.
		_ = resp
	}
}

func ExampleClient_ListPolicies() {
	// import orgpolicypb "google.golang.org/genproto/googleapis/cloud/orgpolicy/v2"
	// import "google.golang.org/api/iterator"

	ctx := context.Background()
	c, err := orgpolicy.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &orgpolicypb.ListPoliciesRequest{
		// TODO: Fill request struct fields.
	}
	it := c.ListPolicies(ctx, req)
	for {
		resp, err := it.Next()
		if err == iterator.Done {
			break
		}
		if err != nil {
			// TODO: Handle error.
		}
		// TODO: Use resp.
		_ = resp
	}
}

func ExampleClient_GetPolicy() {
	// import orgpolicypb "google.golang.org/genproto/googleapis/cloud/orgpolicy/v2"

	ctx := context.Background()
	c, err := orgpolicy.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &orgpolicypb.GetPolicyRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.GetPolicy(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleClient_GetEffectivePolicy() {
	// import orgpolicypb "google.golang.org/genproto/googleapis/cloud/orgpolicy/v2"

	ctx := context.Background()
	c, err := orgpolicy.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &orgpolicypb.GetEffectivePolicyRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.GetEffectivePolicy(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleClient_CreatePolicy() {
	// import orgpolicypb "google.golang.org/genproto/googleapis/cloud/orgpolicy/v2"

	ctx := context.Background()
	c, err := orgpolicy.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &orgpolicypb.CreatePolicyRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.CreatePolicy(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleClient_UpdatePolicy() {
	// import orgpolicypb "google.golang.org/genproto/googleapis/cloud/orgpolicy/v2"

	ctx := context.Background()
	c, err := orgpolicy.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &orgpolicypb.UpdatePolicyRequest{
		// TODO: Fill request struct fields.
	}
	resp, err := c.UpdatePolicy(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleClient_DeletePolicy() {
	ctx := context.Background()
	c, err := orgpolicy.NewClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}

	req := &orgpolicypb.DeletePolicyRequest{
		// TODO: Fill request struct fields.
	}
	err = c.DeletePolicy(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
}
