// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.7
// source: google/cloud/lustre/v1/transfer.proto

package lustrepb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	code "google.golang.org/genproto/googleapis/rpc/code"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Type of transfer that occurred.
type TransferType int32

const (
	// Zero is an illegal value.
	TransferType_TRANSFER_TYPE_UNSPECIFIED TransferType = 0
	// Imports to Lustre.
	TransferType_IMPORT TransferType = 1
	// Exports from Lustre.
	TransferType_EXPORT TransferType = 2
)

// Enum value maps for TransferType.
var (
	TransferType_name = map[int32]string{
		0: "TRANSFER_TYPE_UNSPECIFIED",
		1: "IMPORT",
		2: "EXPORT",
	}
	TransferType_value = map[string]int32{
		"TRANSFER_TYPE_UNSPECIFIED": 0,
		"IMPORT":                    1,
		"EXPORT":                    2,
	}
)

func (x TransferType) Enum() *TransferType {
	p := new(TransferType)
	*p = x
	return p
}

func (x TransferType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransferType) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_lustre_v1_transfer_proto_enumTypes[0].Descriptor()
}

func (TransferType) Type() protoreflect.EnumType {
	return &file_google_cloud_lustre_v1_transfer_proto_enumTypes[0]
}

func (x TransferType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransferType.Descriptor instead.
func (TransferType) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_lustre_v1_transfer_proto_rawDescGZIP(), []int{0}
}

// Message for importing data to Lustre.
type ImportDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A Cloud Storage URI of a folder to import file data from, in the
	// form of `gs://<bucket_name>/<path_inside_bucket>/`.
	//
	// Types that are assignable to Source:
	//
	//	*ImportDataRequest_GcsPath
	Source isImportDataRequest_Source `protobuf_oneof:"source"`
	// The destination of the data transfer.
	//
	// Types that are assignable to Destination:
	//
	//	*ImportDataRequest_LustrePath
	Destination isImportDataRequest_Destination `protobuf_oneof:"destination"`
	// Required. The name of the Managed Lustre instance in the format
	// `projects/{project}/locations/{location}/instances/{instance}`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. UUID to identify requests.
	RequestId string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Optional. User-specified service account used to perform the transfer.
	// If unspecified, the default Managed Lustre service agent will be used.
	ServiceAccount string `protobuf:"bytes,5,opt,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty"`
}

func (x *ImportDataRequest) Reset() {
	*x = ImportDataRequest{}
	mi := &file_google_cloud_lustre_v1_transfer_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportDataRequest) ProtoMessage() {}

func (x *ImportDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_lustre_v1_transfer_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportDataRequest.ProtoReflect.Descriptor instead.
func (*ImportDataRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_lustre_v1_transfer_proto_rawDescGZIP(), []int{0}
}

func (m *ImportDataRequest) GetSource() isImportDataRequest_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *ImportDataRequest) GetGcsPath() *GcsPath {
	if x, ok := x.GetSource().(*ImportDataRequest_GcsPath); ok {
		return x.GcsPath
	}
	return nil
}

func (m *ImportDataRequest) GetDestination() isImportDataRequest_Destination {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (x *ImportDataRequest) GetLustrePath() *LustrePath {
	if x, ok := x.GetDestination().(*ImportDataRequest_LustrePath); ok {
		return x.LustrePath
	}
	return nil
}

func (x *ImportDataRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ImportDataRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ImportDataRequest) GetServiceAccount() string {
	if x != nil {
		return x.ServiceAccount
	}
	return ""
}

type isImportDataRequest_Source interface {
	isImportDataRequest_Source()
}

type ImportDataRequest_GcsPath struct {
	// The Cloud Storage source bucket and, optionally, path inside the bucket.
	// If a path inside the bucket is specified, it must end with a forward
	// slash (`/`).
	GcsPath *GcsPath `protobuf:"bytes,2,opt,name=gcs_path,json=gcsPath,proto3,oneof"`
}

func (*ImportDataRequest_GcsPath) isImportDataRequest_Source() {}

type isImportDataRequest_Destination interface {
	isImportDataRequest_Destination()
}

type ImportDataRequest_LustrePath struct {
	// Lustre path destination.
	LustrePath *LustrePath `protobuf:"bytes,3,opt,name=lustre_path,json=lustrePath,proto3,oneof"`
}

func (*ImportDataRequest_LustrePath) isImportDataRequest_Destination() {}

// Export data from Managed Lustre to a Cloud Storage bucket.
type ExportDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The source of the data transfer.
	//
	// Types that are assignable to Source:
	//
	//	*ExportDataRequest_LustrePath
	Source isExportDataRequest_Source `protobuf_oneof:"source"`
	// The destination of the data transfer.
	//
	// Types that are assignable to Destination:
	//
	//	*ExportDataRequest_GcsPath
	Destination isExportDataRequest_Destination `protobuf_oneof:"destination"`
	// Required. The name of the Managed Lustre instance in the format
	// `projects/{project}/locations/{location}/instances/{instance}`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. UUID to identify requests.
	RequestId string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Optional. User-specified service account used to perform the transfer.
	// If unspecified, the Managed Lustre service agent is used.
	ServiceAccount string `protobuf:"bytes,5,opt,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty"`
}

func (x *ExportDataRequest) Reset() {
	*x = ExportDataRequest{}
	mi := &file_google_cloud_lustre_v1_transfer_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportDataRequest) ProtoMessage() {}

func (x *ExportDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_lustre_v1_transfer_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportDataRequest.ProtoReflect.Descriptor instead.
func (*ExportDataRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_lustre_v1_transfer_proto_rawDescGZIP(), []int{1}
}

func (m *ExportDataRequest) GetSource() isExportDataRequest_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *ExportDataRequest) GetLustrePath() *LustrePath {
	if x, ok := x.GetSource().(*ExportDataRequest_LustrePath); ok {
		return x.LustrePath
	}
	return nil
}

func (m *ExportDataRequest) GetDestination() isExportDataRequest_Destination {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (x *ExportDataRequest) GetGcsPath() *GcsPath {
	if x, ok := x.GetDestination().(*ExportDataRequest_GcsPath); ok {
		return x.GcsPath
	}
	return nil
}

func (x *ExportDataRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExportDataRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ExportDataRequest) GetServiceAccount() string {
	if x != nil {
		return x.ServiceAccount
	}
	return ""
}

type isExportDataRequest_Source interface {
	isExportDataRequest_Source()
}

type ExportDataRequest_LustrePath struct {
	// The root directory path to the Managed Lustre file system. Must start
	// with `/`. Default is `/`.
	LustrePath *LustrePath `protobuf:"bytes,2,opt,name=lustre_path,json=lustrePath,proto3,oneof"`
}

func (*ExportDataRequest_LustrePath) isExportDataRequest_Source() {}

type isExportDataRequest_Destination interface {
	isExportDataRequest_Destination()
}

type ExportDataRequest_GcsPath struct {
	// The URI to a Cloud Storage bucket, or a path within a bucket, using
	// the format `gs://<bucket_name>/<optional_path_inside_bucket>/`. If a
	// path inside the bucket is specified, it must end with a forward slash
	// (`/`).
	GcsPath *GcsPath `protobuf:"bytes,3,opt,name=gcs_path,json=gcsPath,proto3,oneof"`
}

func (*ExportDataRequest_GcsPath) isExportDataRequest_Destination() {}

// Response message for ExportData.
type ExportDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExportDataResponse) Reset() {
	*x = ExportDataResponse{}
	mi := &file_google_cloud_lustre_v1_transfer_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportDataResponse) ProtoMessage() {}

func (x *ExportDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_lustre_v1_transfer_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportDataResponse.ProtoReflect.Descriptor instead.
func (*ExportDataResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_lustre_v1_transfer_proto_rawDescGZIP(), []int{2}
}

// Response message for ImportData.
type ImportDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ImportDataResponse) Reset() {
	*x = ImportDataResponse{}
	mi := &file_google_cloud_lustre_v1_transfer_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportDataResponse) ProtoMessage() {}

func (x *ImportDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_lustre_v1_transfer_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportDataResponse.ProtoReflect.Descriptor instead.
func (*ImportDataResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_lustre_v1_transfer_proto_rawDescGZIP(), []int{3}
}

// Metadata of the export data operation.
type ExportDataMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Data transfer operation metadata.
	OperationMetadata *TransferOperationMetadata `protobuf:"bytes,1,opt,name=operation_metadata,json=operationMetadata,proto3" json:"operation_metadata,omitempty"`
	// Output only. The time the operation was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The time the operation finished running.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Output only. Server-defined resource path for the target of the operation.
	Target string `protobuf:"bytes,4,opt,name=target,proto3" json:"target,omitempty"`
	// Output only. Name of the verb executed by the operation.
	Verb string `protobuf:"bytes,5,opt,name=verb,proto3" json:"verb,omitempty"`
	// Output only. Human-readable status of the operation, if any.
	StatusMessage string `protobuf:"bytes,6,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
	// Output only. Identifies whether the user has requested cancellation
	// of the operation. Operations that have successfully been cancelled
	// have
	// [google.longrunning.Operation.error][google.longrunning.Operation.error]
	// value with a [google.rpc.Status.code][google.rpc.Status.code] of 1,
	// corresponding to `Code.CANCELLED`.
	RequestedCancellation bool `protobuf:"varint,7,opt,name=requested_cancellation,json=requestedCancellation,proto3" json:"requested_cancellation,omitempty"`
	// Output only. API version used to start the operation.
	ApiVersion string `protobuf:"bytes,8,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
}

func (x *ExportDataMetadata) Reset() {
	*x = ExportDataMetadata{}
	mi := &file_google_cloud_lustre_v1_transfer_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportDataMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportDataMetadata) ProtoMessage() {}

func (x *ExportDataMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_lustre_v1_transfer_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportDataMetadata.ProtoReflect.Descriptor instead.
func (*ExportDataMetadata) Descriptor() ([]byte, []int) {
	return file_google_cloud_lustre_v1_transfer_proto_rawDescGZIP(), []int{4}
}

func (x *ExportDataMetadata) GetOperationMetadata() *TransferOperationMetadata {
	if x != nil {
		return x.OperationMetadata
	}
	return nil
}

func (x *ExportDataMetadata) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ExportDataMetadata) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *ExportDataMetadata) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *ExportDataMetadata) GetVerb() string {
	if x != nil {
		return x.Verb
	}
	return ""
}

func (x *ExportDataMetadata) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

func (x *ExportDataMetadata) GetRequestedCancellation() bool {
	if x != nil {
		return x.RequestedCancellation
	}
	return false
}

func (x *ExportDataMetadata) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

// Metadata of the import data operation.
type ImportDataMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Data transfer operation metadata.
	OperationMetadata *TransferOperationMetadata `protobuf:"bytes,1,opt,name=operation_metadata,json=operationMetadata,proto3" json:"operation_metadata,omitempty"`
	// Output only. The time the operation was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The time the operation finished running.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Output only. Server-defined resource path for the target of the operation.
	Target string `protobuf:"bytes,4,opt,name=target,proto3" json:"target,omitempty"`
	// Output only. Name of the verb executed by the operation.
	StatusMessage string `protobuf:"bytes,6,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
	// Output only. Identifies whether the user has requested cancellation
	// of the operation. Operations that have successfully been cancelled
	// have
	// [google.longrunning.Operation.error][google.longrunning.Operation.error]
	// value with a [google.rpc.Status.code][google.rpc.Status.code] of 1,
	// corresponding to `Code.CANCELLED`.
	RequestedCancellation bool `protobuf:"varint,7,opt,name=requested_cancellation,json=requestedCancellation,proto3" json:"requested_cancellation,omitempty"`
	// Output only. API version used to start the operation.
	ApiVersion string `protobuf:"bytes,8,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
}

func (x *ImportDataMetadata) Reset() {
	*x = ImportDataMetadata{}
	mi := &file_google_cloud_lustre_v1_transfer_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportDataMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportDataMetadata) ProtoMessage() {}

func (x *ImportDataMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_lustre_v1_transfer_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportDataMetadata.ProtoReflect.Descriptor instead.
func (*ImportDataMetadata) Descriptor() ([]byte, []int) {
	return file_google_cloud_lustre_v1_transfer_proto_rawDescGZIP(), []int{5}
}

func (x *ImportDataMetadata) GetOperationMetadata() *TransferOperationMetadata {
	if x != nil {
		return x.OperationMetadata
	}
	return nil
}

func (x *ImportDataMetadata) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ImportDataMetadata) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *ImportDataMetadata) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *ImportDataMetadata) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

func (x *ImportDataMetadata) GetRequestedCancellation() bool {
	if x != nil {
		return x.RequestedCancellation
	}
	return false
}

func (x *ImportDataMetadata) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

// Specifies a Cloud Storage bucket and, optionally, a path inside the bucket.
type GcsPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The URI to a Cloud Storage bucket, or a path within a bucket,
	// using the format `gs://<bucket_name>/<optional_path_inside_bucket>/`. If a
	// path inside the bucket is specified, it must end with a forward slash
	// (`/`).
	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (x *GcsPath) Reset() {
	*x = GcsPath{}
	mi := &file_google_cloud_lustre_v1_transfer_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GcsPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcsPath) ProtoMessage() {}

func (x *GcsPath) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_lustre_v1_transfer_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcsPath.ProtoReflect.Descriptor instead.
func (*GcsPath) Descriptor() ([]byte, []int) {
	return file_google_cloud_lustre_v1_transfer_proto_rawDescGZIP(), []int{6}
}

func (x *GcsPath) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

// The root directory path to the Lustre file system.
type LustrePath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The root directory path to the Managed Lustre file system. Must
	// start with
	// `/`. Default is `/`. If you're importing data into Managed Lustre, any
	// path other than the default must already exist on the file system.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *LustrePath) Reset() {
	*x = LustrePath{}
	mi := &file_google_cloud_lustre_v1_transfer_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LustrePath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LustrePath) ProtoMessage() {}

func (x *LustrePath) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_lustre_v1_transfer_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LustrePath.ProtoReflect.Descriptor instead.
func (*LustrePath) Descriptor() ([]byte, []int) {
	return file_google_cloud_lustre_v1_transfer_proto_rawDescGZIP(), []int{7}
}

func (x *LustrePath) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// A collection of counters that report the progress of a transfer operation.
type TransferCounters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Objects found in the data source that are scheduled to be transferred,
	// excluding any that are filtered based on object conditions or skipped due
	// to sync.
	FoundObjectsCount int64 `protobuf:"varint,1,opt,name=found_objects_count,json=foundObjectsCount,proto3" json:"found_objects_count,omitempty"`
	// Total number of bytes found in the data source that are scheduled to be
	// transferred, excluding any that are filtered based on object conditions or
	// skipped due to sync.
	BytesFoundCount int64 `protobuf:"varint,2,opt,name=bytes_found_count,json=bytesFoundCount,proto3" json:"bytes_found_count,omitempty"`
	// Objects in the data source that are not transferred because they already
	// exist in the data destination.
	ObjectsSkippedCount int64 `protobuf:"varint,3,opt,name=objects_skipped_count,json=objectsSkippedCount,proto3" json:"objects_skipped_count,omitempty"`
	// Bytes in the data source that are not transferred because they already
	// exist in the data destination.
	BytesSkippedCount int64 `protobuf:"varint,4,opt,name=bytes_skipped_count,json=bytesSkippedCount,proto3" json:"bytes_skipped_count,omitempty"`
	// Objects that are copied to the data destination.
	ObjectsCopiedCount int64 `protobuf:"varint,5,opt,name=objects_copied_count,json=objectsCopiedCount,proto3" json:"objects_copied_count,omitempty"`
	// Bytes that are copied to the data destination.
	BytesCopiedCount int64 `protobuf:"varint,6,opt,name=bytes_copied_count,json=bytesCopiedCount,proto3" json:"bytes_copied_count,omitempty"`
	// Output only. Objects that are failed to write to the data destination.
	ObjectsFailedCount int64 `protobuf:"varint,7,opt,name=objects_failed_count,json=objectsFailedCount,proto3" json:"objects_failed_count,omitempty"`
	// Output only. Bytes that are failed to write to the data destination.
	BytesFailedCount int64 `protobuf:"varint,8,opt,name=bytes_failed_count,json=bytesFailedCount,proto3" json:"bytes_failed_count,omitempty"`
}

func (x *TransferCounters) Reset() {
	*x = TransferCounters{}
	mi := &file_google_cloud_lustre_v1_transfer_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferCounters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferCounters) ProtoMessage() {}

func (x *TransferCounters) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_lustre_v1_transfer_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferCounters.ProtoReflect.Descriptor instead.
func (*TransferCounters) Descriptor() ([]byte, []int) {
	return file_google_cloud_lustre_v1_transfer_proto_rawDescGZIP(), []int{8}
}

func (x *TransferCounters) GetFoundObjectsCount() int64 {
	if x != nil {
		return x.FoundObjectsCount
	}
	return 0
}

func (x *TransferCounters) GetBytesFoundCount() int64 {
	if x != nil {
		return x.BytesFoundCount
	}
	return 0
}

func (x *TransferCounters) GetObjectsSkippedCount() int64 {
	if x != nil {
		return x.ObjectsSkippedCount
	}
	return 0
}

func (x *TransferCounters) GetBytesSkippedCount() int64 {
	if x != nil {
		return x.BytesSkippedCount
	}
	return 0
}

func (x *TransferCounters) GetObjectsCopiedCount() int64 {
	if x != nil {
		return x.ObjectsCopiedCount
	}
	return 0
}

func (x *TransferCounters) GetBytesCopiedCount() int64 {
	if x != nil {
		return x.BytesCopiedCount
	}
	return 0
}

func (x *TransferCounters) GetObjectsFailedCount() int64 {
	if x != nil {
		return x.ObjectsFailedCount
	}
	return 0
}

func (x *TransferCounters) GetBytesFailedCount() int64 {
	if x != nil {
		return x.BytesFailedCount
	}
	return 0
}

// An entry describing an error that has occurred.
type ErrorLogEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. A URL that refers to the target (a data source, a data sink,
	// or an object) with which the error is associated.
	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	// A list of messages that carry the error details.
	ErrorDetails []string `protobuf:"bytes,2,rep,name=error_details,json=errorDetails,proto3" json:"error_details,omitempty"`
}

func (x *ErrorLogEntry) Reset() {
	*x = ErrorLogEntry{}
	mi := &file_google_cloud_lustre_v1_transfer_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorLogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorLogEntry) ProtoMessage() {}

func (x *ErrorLogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_lustre_v1_transfer_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorLogEntry.ProtoReflect.Descriptor instead.
func (*ErrorLogEntry) Descriptor() ([]byte, []int) {
	return file_google_cloud_lustre_v1_transfer_proto_rawDescGZIP(), []int{9}
}

func (x *ErrorLogEntry) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *ErrorLogEntry) GetErrorDetails() []string {
	if x != nil {
		return x.ErrorDetails
	}
	return nil
}

// A summary of errors by error code, plus a count and sample error log
// entries.
type ErrorSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	ErrorCode code.Code `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=google.rpc.Code" json:"error_code,omitempty"`
	// Required. Count of this type of error.
	ErrorCount int64 `protobuf:"varint,2,opt,name=error_count,json=errorCount,proto3" json:"error_count,omitempty"`
	// Error samples.
	//
	// At most 5 error log entries are recorded for a given
	// error code for a single transfer operation.
	ErrorLogEntries []*ErrorLogEntry `protobuf:"bytes,3,rep,name=error_log_entries,json=errorLogEntries,proto3" json:"error_log_entries,omitempty"`
}

func (x *ErrorSummary) Reset() {
	*x = ErrorSummary{}
	mi := &file_google_cloud_lustre_v1_transfer_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorSummary) ProtoMessage() {}

func (x *ErrorSummary) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_lustre_v1_transfer_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorSummary.ProtoReflect.Descriptor instead.
func (*ErrorSummary) Descriptor() ([]byte, []int) {
	return file_google_cloud_lustre_v1_transfer_proto_rawDescGZIP(), []int{10}
}

func (x *ErrorSummary) GetErrorCode() code.Code {
	if x != nil {
		return x.ErrorCode
	}
	return code.Code(0)
}

func (x *ErrorSummary) GetErrorCount() int64 {
	if x != nil {
		return x.ErrorCount
	}
	return 0
}

func (x *ErrorSummary) GetErrorLogEntries() []*ErrorLogEntry {
	if x != nil {
		return x.ErrorLogEntries
	}
	return nil
}

// Represents the metadata of the long-running transfer operation.
type TransferOperationMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The source of transfer operation.
	//
	// Types that are assignable to Source:
	//
	//	*TransferOperationMetadata_SourceLustrePath
	//	*TransferOperationMetadata_SourceGcsPath
	Source isTransferOperationMetadata_Source `protobuf_oneof:"source"`
	// The destination of transfer operation.
	//
	// Types that are assignable to Destination:
	//
	//	*TransferOperationMetadata_DestinationGcsPath
	//	*TransferOperationMetadata_DestinationLustrePath
	Destination isTransferOperationMetadata_Destination `protobuf_oneof:"destination"`
	// Output only. The progress of the transfer operation.
	Counters *TransferCounters `protobuf:"bytes,1,opt,name=counters,proto3" json:"counters,omitempty"`
	// Output only. The type of transfer occurring.
	TransferType TransferType `protobuf:"varint,2,opt,name=transfer_type,json=transferType,proto3,enum=google.cloud.lustre.v1.TransferType" json:"transfer_type,omitempty"`
	// Output only. Error summary about the transfer operation
	ErrorSummaries []*ErrorSummary `protobuf:"bytes,7,rep,name=error_summaries,json=errorSummaries,proto3" json:"error_summaries,omitempty"`
}

func (x *TransferOperationMetadata) Reset() {
	*x = TransferOperationMetadata{}
	mi := &file_google_cloud_lustre_v1_transfer_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferOperationMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferOperationMetadata) ProtoMessage() {}

func (x *TransferOperationMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_lustre_v1_transfer_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferOperationMetadata.ProtoReflect.Descriptor instead.
func (*TransferOperationMetadata) Descriptor() ([]byte, []int) {
	return file_google_cloud_lustre_v1_transfer_proto_rawDescGZIP(), []int{11}
}

func (m *TransferOperationMetadata) GetSource() isTransferOperationMetadata_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *TransferOperationMetadata) GetSourceLustrePath() *LustrePath {
	if x, ok := x.GetSource().(*TransferOperationMetadata_SourceLustrePath); ok {
		return x.SourceLustrePath
	}
	return nil
}

func (x *TransferOperationMetadata) GetSourceGcsPath() *GcsPath {
	if x, ok := x.GetSource().(*TransferOperationMetadata_SourceGcsPath); ok {
		return x.SourceGcsPath
	}
	return nil
}

func (m *TransferOperationMetadata) GetDestination() isTransferOperationMetadata_Destination {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (x *TransferOperationMetadata) GetDestinationGcsPath() *GcsPath {
	if x, ok := x.GetDestination().(*TransferOperationMetadata_DestinationGcsPath); ok {
		return x.DestinationGcsPath
	}
	return nil
}

func (x *TransferOperationMetadata) GetDestinationLustrePath() *LustrePath {
	if x, ok := x.GetDestination().(*TransferOperationMetadata_DestinationLustrePath); ok {
		return x.DestinationLustrePath
	}
	return nil
}

func (x *TransferOperationMetadata) GetCounters() *TransferCounters {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *TransferOperationMetadata) GetTransferType() TransferType {
	if x != nil {
		return x.TransferType
	}
	return TransferType_TRANSFER_TYPE_UNSPECIFIED
}

func (x *TransferOperationMetadata) GetErrorSummaries() []*ErrorSummary {
	if x != nil {
		return x.ErrorSummaries
	}
	return nil
}

type isTransferOperationMetadata_Source interface {
	isTransferOperationMetadata_Source()
}

type TransferOperationMetadata_SourceLustrePath struct {
	// Output only. Lustre source.
	SourceLustrePath *LustrePath `protobuf:"bytes,3,opt,name=source_lustre_path,json=sourceLustrePath,proto3,oneof"`
}

type TransferOperationMetadata_SourceGcsPath struct {
	// Output only. Cloud Storage source.
	SourceGcsPath *GcsPath `protobuf:"bytes,4,opt,name=source_gcs_path,json=sourceGcsPath,proto3,oneof"`
}

func (*TransferOperationMetadata_SourceLustrePath) isTransferOperationMetadata_Source() {}

func (*TransferOperationMetadata_SourceGcsPath) isTransferOperationMetadata_Source() {}

type isTransferOperationMetadata_Destination interface {
	isTransferOperationMetadata_Destination()
}

type TransferOperationMetadata_DestinationGcsPath struct {
	// Output only. Cloud Storage destination.
	DestinationGcsPath *GcsPath `protobuf:"bytes,5,opt,name=destination_gcs_path,json=destinationGcsPath,proto3,oneof"`
}

type TransferOperationMetadata_DestinationLustrePath struct {
	// Output only. Lustre destination.
	DestinationLustrePath *LustrePath `protobuf:"bytes,6,opt,name=destination_lustre_path,json=destinationLustrePath,proto3,oneof"`
}

func (*TransferOperationMetadata_DestinationGcsPath) isTransferOperationMetadata_Destination() {}

func (*TransferOperationMetadata_DestinationLustrePath) isTransferOperationMetadata_Destination() {}

var File_google_cloud_lustre_v1_transfer_proto protoreflect.FileDescriptor

var file_google_cloud_lustre_v1_transfer_proto_rawDesc = []byte{
	0x0a, 0x25, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6c,
	0x75, 0x73, 0x74, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xed, 0x02, 0x0a, 0x11, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x67, 0x63, 0x73, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x63, 0x73, 0x50, 0x61, 0x74, 0x68, 0x48, 0x00, 0x52, 0x07, 0x67, 0x63, 0x73,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x45, 0x0a, 0x0b, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x65, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x75, 0x73, 0x74, 0x72, 0x65, 0x50, 0x61, 0x74, 0x68, 0x48, 0x01, 0x52,
	0x0a, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3a, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0xe0, 0x41, 0x02, 0xfa, 0x41,
	0x20, 0x0a, 0x1e, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xe0, 0x41, 0x01,
	0xe2, 0x8c, 0xcf, 0xd7, 0x08, 0x02, 0x08, 0x01, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xe0, 0x41,
	0x01, 0xfa, 0x41, 0x23, 0x0a, 0x21, 0x69, 0x61, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xed, 0x02, 0x0a, 0x11, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x0b, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x65,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x75, 0x73, 0x74, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x75, 0x73, 0x74, 0x72, 0x65, 0x50, 0x61, 0x74, 0x68, 0x48,
	0x00, 0x52, 0x0a, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3c, 0x0a,
	0x08, 0x67, 0x63, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c,
	0x75, 0x73, 0x74, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x63, 0x73, 0x50, 0x61, 0x74, 0x68,
	0x48, 0x01, 0x52, 0x07, 0x67, 0x63, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3a, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0xe0, 0x41, 0x02, 0xfa, 0x41,
	0x20, 0x0a, 0x1e, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xe0, 0x41, 0x01,
	0xe2, 0x8c, 0xcf, 0xd7, 0x08, 0x02, 0x08, 0x01, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xe0, 0x41,
	0x01, 0xfa, 0x41, 0x23, 0x0a, 0x21, 0x69, 0x61, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x14, 0x0a, 0x12, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x14, 0x0a, 0x12, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb8, 0x03, 0x0a,
	0x12, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x60, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c,
	0x75, 0x73, 0x74, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x17, 0x0a, 0x04, 0x76, 0x65, 0x72, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x04, 0x76, 0x65, 0x72, 0x62, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x16, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x15, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x24, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x61, 0x70, 0x69,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x9f, 0x03, 0x0a, 0x12, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x60,
	0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x11, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x0e, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x16, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x15, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x61,
	0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x20, 0x0a, 0x07, 0x47, 0x63, 0x73,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x75, 0x72, 0x69, 0x22, 0x25, 0x0a, 0x0a, 0x4c,
	0x75, 0x73, 0x74, 0x72, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x22, 0x9c, 0x03, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x73,
	0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x13, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x53, 0x6b, 0x69, 0x70, 0x70,
	0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x62, 0x79, 0x74, 0x65, 0x73, 0x53, 0x6b, 0x69, 0x70, 0x70,
	0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x5f, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x43, 0x6f,
	0x70, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x62, 0x79, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x70, 0x69,
	0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x14, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x12, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31,
	0x0a, 0x12, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x10, 0x62, 0x79, 0x74, 0x65, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x4b, 0x0a, 0x0d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xbd,
	0x01, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x34, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x51, 0x0a, 0x11, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x89,
	0x05, 0x0a, 0x19, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x57, 0x0a, 0x12,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x65, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x75, 0x73, 0x74, 0x72, 0x65, 0x50, 0x61, 0x74, 0x68, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x48, 0x00, 0x52, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x75, 0x73, 0x74, 0x72,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x4e, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x67, 0x63, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x75,
	0x73, 0x74, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x63, 0x73, 0x50, 0x61, 0x74, 0x68, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x63,
	0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x58, 0x0a, 0x14, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x63, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x63, 0x73,
	0x50, 0x61, 0x74, 0x68, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x01, 0x52, 0x12, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x63, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x61, 0x0a, 0x17, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c,
	0x75, 0x73, 0x74, 0x72, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x6c, 0x75, 0x73, 0x74, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x75, 0x73, 0x74, 0x72, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x01, 0x52, 0x15, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x75, 0x73, 0x74, 0x72, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x49, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x4e, 0x0a,
	0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x52, 0x0a,
	0x0f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65,
	0x73, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2a, 0x45, 0x0a, 0x0c, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x4d, 0x50,
	0x4f, 0x52, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x10,
	0x02, 0x42, 0x61, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x42,
	0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2f, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x65, 0x70, 0x62, 0x3b, 0x6c, 0x75, 0x73, 0x74,
	0x72, 0x65, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_lustre_v1_transfer_proto_rawDescOnce sync.Once
	file_google_cloud_lustre_v1_transfer_proto_rawDescData = file_google_cloud_lustre_v1_transfer_proto_rawDesc
)

func file_google_cloud_lustre_v1_transfer_proto_rawDescGZIP() []byte {
	file_google_cloud_lustre_v1_transfer_proto_rawDescOnce.Do(func() {
		file_google_cloud_lustre_v1_transfer_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_lustre_v1_transfer_proto_rawDescData)
	})
	return file_google_cloud_lustre_v1_transfer_proto_rawDescData
}

var file_google_cloud_lustre_v1_transfer_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_google_cloud_lustre_v1_transfer_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_google_cloud_lustre_v1_transfer_proto_goTypes = []any{
	(TransferType)(0),                 // 0: google.cloud.lustre.v1.TransferType
	(*ImportDataRequest)(nil),         // 1: google.cloud.lustre.v1.ImportDataRequest
	(*ExportDataRequest)(nil),         // 2: google.cloud.lustre.v1.ExportDataRequest
	(*ExportDataResponse)(nil),        // 3: google.cloud.lustre.v1.ExportDataResponse
	(*ImportDataResponse)(nil),        // 4: google.cloud.lustre.v1.ImportDataResponse
	(*ExportDataMetadata)(nil),        // 5: google.cloud.lustre.v1.ExportDataMetadata
	(*ImportDataMetadata)(nil),        // 6: google.cloud.lustre.v1.ImportDataMetadata
	(*GcsPath)(nil),                   // 7: google.cloud.lustre.v1.GcsPath
	(*LustrePath)(nil),                // 8: google.cloud.lustre.v1.LustrePath
	(*TransferCounters)(nil),          // 9: google.cloud.lustre.v1.TransferCounters
	(*ErrorLogEntry)(nil),             // 10: google.cloud.lustre.v1.ErrorLogEntry
	(*ErrorSummary)(nil),              // 11: google.cloud.lustre.v1.ErrorSummary
	(*TransferOperationMetadata)(nil), // 12: google.cloud.lustre.v1.TransferOperationMetadata
	(*timestamppb.Timestamp)(nil),     // 13: google.protobuf.Timestamp
	(code.Code)(0),                    // 14: google.rpc.Code
}
var file_google_cloud_lustre_v1_transfer_proto_depIdxs = []int32{
	7,  // 0: google.cloud.lustre.v1.ImportDataRequest.gcs_path:type_name -> google.cloud.lustre.v1.GcsPath
	8,  // 1: google.cloud.lustre.v1.ImportDataRequest.lustre_path:type_name -> google.cloud.lustre.v1.LustrePath
	8,  // 2: google.cloud.lustre.v1.ExportDataRequest.lustre_path:type_name -> google.cloud.lustre.v1.LustrePath
	7,  // 3: google.cloud.lustre.v1.ExportDataRequest.gcs_path:type_name -> google.cloud.lustre.v1.GcsPath
	12, // 4: google.cloud.lustre.v1.ExportDataMetadata.operation_metadata:type_name -> google.cloud.lustre.v1.TransferOperationMetadata
	13, // 5: google.cloud.lustre.v1.ExportDataMetadata.create_time:type_name -> google.protobuf.Timestamp
	13, // 6: google.cloud.lustre.v1.ExportDataMetadata.end_time:type_name -> google.protobuf.Timestamp
	12, // 7: google.cloud.lustre.v1.ImportDataMetadata.operation_metadata:type_name -> google.cloud.lustre.v1.TransferOperationMetadata
	13, // 8: google.cloud.lustre.v1.ImportDataMetadata.create_time:type_name -> google.protobuf.Timestamp
	13, // 9: google.cloud.lustre.v1.ImportDataMetadata.end_time:type_name -> google.protobuf.Timestamp
	14, // 10: google.cloud.lustre.v1.ErrorSummary.error_code:type_name -> google.rpc.Code
	10, // 11: google.cloud.lustre.v1.ErrorSummary.error_log_entries:type_name -> google.cloud.lustre.v1.ErrorLogEntry
	8,  // 12: google.cloud.lustre.v1.TransferOperationMetadata.source_lustre_path:type_name -> google.cloud.lustre.v1.LustrePath
	7,  // 13: google.cloud.lustre.v1.TransferOperationMetadata.source_gcs_path:type_name -> google.cloud.lustre.v1.GcsPath
	7,  // 14: google.cloud.lustre.v1.TransferOperationMetadata.destination_gcs_path:type_name -> google.cloud.lustre.v1.GcsPath
	8,  // 15: google.cloud.lustre.v1.TransferOperationMetadata.destination_lustre_path:type_name -> google.cloud.lustre.v1.LustrePath
	9,  // 16: google.cloud.lustre.v1.TransferOperationMetadata.counters:type_name -> google.cloud.lustre.v1.TransferCounters
	0,  // 17: google.cloud.lustre.v1.TransferOperationMetadata.transfer_type:type_name -> google.cloud.lustre.v1.TransferType
	11, // 18: google.cloud.lustre.v1.TransferOperationMetadata.error_summaries:type_name -> google.cloud.lustre.v1.ErrorSummary
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_google_cloud_lustre_v1_transfer_proto_init() }
func file_google_cloud_lustre_v1_transfer_proto_init() {
	if File_google_cloud_lustre_v1_transfer_proto != nil {
		return
	}
	file_google_cloud_lustre_v1_transfer_proto_msgTypes[0].OneofWrappers = []any{
		(*ImportDataRequest_GcsPath)(nil),
		(*ImportDataRequest_LustrePath)(nil),
	}
	file_google_cloud_lustre_v1_transfer_proto_msgTypes[1].OneofWrappers = []any{
		(*ExportDataRequest_LustrePath)(nil),
		(*ExportDataRequest_GcsPath)(nil),
	}
	file_google_cloud_lustre_v1_transfer_proto_msgTypes[11].OneofWrappers = []any{
		(*TransferOperationMetadata_SourceLustrePath)(nil),
		(*TransferOperationMetadata_SourceGcsPath)(nil),
		(*TransferOperationMetadata_DestinationGcsPath)(nil),
		(*TransferOperationMetadata_DestinationLustrePath)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_lustre_v1_transfer_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_cloud_lustre_v1_transfer_proto_goTypes,
		DependencyIndexes: file_google_cloud_lustre_v1_transfer_proto_depIdxs,
		EnumInfos:         file_google_cloud_lustre_v1_transfer_proto_enumTypes,
		MessageInfos:      file_google_cloud_lustre_v1_transfer_proto_msgTypes,
	}.Build()
	File_google_cloud_lustre_v1_transfer_proto = out.File
	file_google_cloud_lustre_v1_transfer_proto_rawDesc = nil
	file_google_cloud_lustre_v1_transfer_proto_goTypes = nil
	file_google_cloud_lustre_v1_transfer_proto_depIdxs = nil
}
