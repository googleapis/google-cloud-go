// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/financialservices/v1/service.proto

package financialservicespb

import (
	context "context"

	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AML_ListInstances_FullMethodName                  = "/google.cloud.financialservices.v1.AML/ListInstances"
	AML_GetInstance_FullMethodName                    = "/google.cloud.financialservices.v1.AML/GetInstance"
	AML_CreateInstance_FullMethodName                 = "/google.cloud.financialservices.v1.AML/CreateInstance"
	AML_UpdateInstance_FullMethodName                 = "/google.cloud.financialservices.v1.AML/UpdateInstance"
	AML_DeleteInstance_FullMethodName                 = "/google.cloud.financialservices.v1.AML/DeleteInstance"
	AML_ImportRegisteredParties_FullMethodName        = "/google.cloud.financialservices.v1.AML/ImportRegisteredParties"
	AML_ExportRegisteredParties_FullMethodName        = "/google.cloud.financialservices.v1.AML/ExportRegisteredParties"
	AML_ListDatasets_FullMethodName                   = "/google.cloud.financialservices.v1.AML/ListDatasets"
	AML_GetDataset_FullMethodName                     = "/google.cloud.financialservices.v1.AML/GetDataset"
	AML_CreateDataset_FullMethodName                  = "/google.cloud.financialservices.v1.AML/CreateDataset"
	AML_UpdateDataset_FullMethodName                  = "/google.cloud.financialservices.v1.AML/UpdateDataset"
	AML_DeleteDataset_FullMethodName                  = "/google.cloud.financialservices.v1.AML/DeleteDataset"
	AML_ListModels_FullMethodName                     = "/google.cloud.financialservices.v1.AML/ListModels"
	AML_GetModel_FullMethodName                       = "/google.cloud.financialservices.v1.AML/GetModel"
	AML_CreateModel_FullMethodName                    = "/google.cloud.financialservices.v1.AML/CreateModel"
	AML_UpdateModel_FullMethodName                    = "/google.cloud.financialservices.v1.AML/UpdateModel"
	AML_ExportModelMetadata_FullMethodName            = "/google.cloud.financialservices.v1.AML/ExportModelMetadata"
	AML_DeleteModel_FullMethodName                    = "/google.cloud.financialservices.v1.AML/DeleteModel"
	AML_ListEngineConfigs_FullMethodName              = "/google.cloud.financialservices.v1.AML/ListEngineConfigs"
	AML_GetEngineConfig_FullMethodName                = "/google.cloud.financialservices.v1.AML/GetEngineConfig"
	AML_CreateEngineConfig_FullMethodName             = "/google.cloud.financialservices.v1.AML/CreateEngineConfig"
	AML_UpdateEngineConfig_FullMethodName             = "/google.cloud.financialservices.v1.AML/UpdateEngineConfig"
	AML_ExportEngineConfigMetadata_FullMethodName     = "/google.cloud.financialservices.v1.AML/ExportEngineConfigMetadata"
	AML_DeleteEngineConfig_FullMethodName             = "/google.cloud.financialservices.v1.AML/DeleteEngineConfig"
	AML_GetEngineVersion_FullMethodName               = "/google.cloud.financialservices.v1.AML/GetEngineVersion"
	AML_ListEngineVersions_FullMethodName             = "/google.cloud.financialservices.v1.AML/ListEngineVersions"
	AML_ListPredictionResults_FullMethodName          = "/google.cloud.financialservices.v1.AML/ListPredictionResults"
	AML_GetPredictionResult_FullMethodName            = "/google.cloud.financialservices.v1.AML/GetPredictionResult"
	AML_CreatePredictionResult_FullMethodName         = "/google.cloud.financialservices.v1.AML/CreatePredictionResult"
	AML_UpdatePredictionResult_FullMethodName         = "/google.cloud.financialservices.v1.AML/UpdatePredictionResult"
	AML_ExportPredictionResultMetadata_FullMethodName = "/google.cloud.financialservices.v1.AML/ExportPredictionResultMetadata"
	AML_DeletePredictionResult_FullMethodName         = "/google.cloud.financialservices.v1.AML/DeletePredictionResult"
	AML_ListBacktestResults_FullMethodName            = "/google.cloud.financialservices.v1.AML/ListBacktestResults"
	AML_GetBacktestResult_FullMethodName              = "/google.cloud.financialservices.v1.AML/GetBacktestResult"
	AML_CreateBacktestResult_FullMethodName           = "/google.cloud.financialservices.v1.AML/CreateBacktestResult"
	AML_UpdateBacktestResult_FullMethodName           = "/google.cloud.financialservices.v1.AML/UpdateBacktestResult"
	AML_ExportBacktestResultMetadata_FullMethodName   = "/google.cloud.financialservices.v1.AML/ExportBacktestResultMetadata"
	AML_DeleteBacktestResult_FullMethodName           = "/google.cloud.financialservices.v1.AML/DeleteBacktestResult"
)

// AMLClient is the client API for AML service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AMLClient interface {
	// Lists instances.
	ListInstances(ctx context.Context, in *ListInstancesRequest, opts ...grpc.CallOption) (*ListInstancesResponse, error)
	// Gets an instance.
	GetInstance(ctx context.Context, in *GetInstanceRequest, opts ...grpc.CallOption) (*Instance, error)
	// Creates an instance.
	CreateInstance(ctx context.Context, in *CreateInstanceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates the parameters of a single Instance.
	UpdateInstance(ctx context.Context, in *UpdateInstanceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes an instance.
	DeleteInstance(ctx context.Context, in *DeleteInstanceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Imports the list of registered parties. See
	// [Create and manage
	// instances](https://cloud.google.com/financial-services/anti-money-laundering/docs/create-and-manage-instances#import-registered-parties)
	// for information on the input schema and response for this method.
	ImportRegisteredParties(ctx context.Context, in *ImportRegisteredPartiesRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Exports the list of registered parties. See
	// [Create and manage
	// instances](https://cloud.google.com/financial-services/anti-money-laundering/docs/create-and-manage-instances#export-registered-parties)
	// for information on the output schema for this method.
	ExportRegisteredParties(ctx context.Context, in *ExportRegisteredPartiesRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists datasets.
	ListDatasets(ctx context.Context, in *ListDatasetsRequest, opts ...grpc.CallOption) (*ListDatasetsResponse, error)
	// Gets a dataset.
	GetDataset(ctx context.Context, in *GetDatasetRequest, opts ...grpc.CallOption) (*Dataset, error)
	// Creates a dataset.
	CreateDataset(ctx context.Context, in *CreateDatasetRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates the parameters of a single Dataset.
	UpdateDataset(ctx context.Context, in *UpdateDatasetRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a dataset.
	DeleteDataset(ctx context.Context, in *DeleteDatasetRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists models.
	ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error)
	// Gets a model.
	GetModel(ctx context.Context, in *GetModelRequest, opts ...grpc.CallOption) (*Model, error)
	// Creates a model.
	CreateModel(ctx context.Context, in *CreateModelRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates the parameters of a single Model.
	UpdateModel(ctx context.Context, in *UpdateModelRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Export governance information for a Model resource. For
	// information on the exported fields, see
	// [AML output data
	// model](https://cloud.google.com/financial-services/anti-money-laundering/docs/reference/schemas/aml-output-data-model#model).
	ExportModelMetadata(ctx context.Context, in *ExportModelMetadataRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a model.
	DeleteModel(ctx context.Context, in *DeleteModelRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists engine configs.
	ListEngineConfigs(ctx context.Context, in *ListEngineConfigsRequest, opts ...grpc.CallOption) (*ListEngineConfigsResponse, error)
	// Gets an engine config.
	GetEngineConfig(ctx context.Context, in *GetEngineConfigRequest, opts ...grpc.CallOption) (*EngineConfig, error)
	// Creates an engine config.
	CreateEngineConfig(ctx context.Context, in *CreateEngineConfigRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates the parameters of a single EngineConfig.
	UpdateEngineConfig(ctx context.Context, in *UpdateEngineConfigRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Export governance information for an EngineConfig resource. For
	// information on the exported fields, see
	// [AML output data
	// model](https://cloud.google.com/financial-services/anti-money-laundering/docs/reference/schemas/aml-output-data-model#engine-config).
	ExportEngineConfigMetadata(ctx context.Context, in *ExportEngineConfigMetadataRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes an engine config.
	DeleteEngineConfig(ctx context.Context, in *DeleteEngineConfigRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets a single EngineVersion.
	GetEngineVersion(ctx context.Context, in *GetEngineVersionRequest, opts ...grpc.CallOption) (*EngineVersion, error)
	// Lists EngineVersions for given location.
	ListEngineVersions(ctx context.Context, in *ListEngineVersionsRequest, opts ...grpc.CallOption) (*ListEngineVersionsResponse, error)
	// List PredictionResults.
	ListPredictionResults(ctx context.Context, in *ListPredictionResultsRequest, opts ...grpc.CallOption) (*ListPredictionResultsResponse, error)
	// Gets a PredictionResult.
	GetPredictionResult(ctx context.Context, in *GetPredictionResultRequest, opts ...grpc.CallOption) (*PredictionResult, error)
	// Create a PredictionResult.
	CreatePredictionResult(ctx context.Context, in *CreatePredictionResultRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates the parameters of a single PredictionResult.
	UpdatePredictionResult(ctx context.Context, in *UpdatePredictionResultRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Export governance information for a PredictionResult resource. For
	// information on the exported fields, see
	// [AML output data
	// model](https://cloud.google.com/financial-services/anti-money-laundering/docs/reference/schemas/aml-output-data-model#prediction-results).
	ExportPredictionResultMetadata(ctx context.Context, in *ExportPredictionResultMetadataRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a PredictionResult.
	DeletePredictionResult(ctx context.Context, in *DeletePredictionResultRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// List BacktestResults.
	ListBacktestResults(ctx context.Context, in *ListBacktestResultsRequest, opts ...grpc.CallOption) (*ListBacktestResultsResponse, error)
	// Gets a BacktestResult.
	GetBacktestResult(ctx context.Context, in *GetBacktestResultRequest, opts ...grpc.CallOption) (*BacktestResult, error)
	// Create a BacktestResult.
	CreateBacktestResult(ctx context.Context, in *CreateBacktestResultRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates the parameters of a single BacktestResult.
	UpdateBacktestResult(ctx context.Context, in *UpdateBacktestResultRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Export governance information for a BacktestResult resource. For
	// information on the exported fields, see
	// [AML output data
	// model](https://cloud.google.com/financial-services/anti-money-laundering/docs/reference/schemas/aml-output-data-model#backtest-results).
	ExportBacktestResultMetadata(ctx context.Context, in *ExportBacktestResultMetadataRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a BacktestResult.
	DeleteBacktestResult(ctx context.Context, in *DeleteBacktestResultRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type aMLClient struct {
	cc grpc.ClientConnInterface
}

func NewAMLClient(cc grpc.ClientConnInterface) AMLClient {
	return &aMLClient{cc}
}

func (c *aMLClient) ListInstances(ctx context.Context, in *ListInstancesRequest, opts ...grpc.CallOption) (*ListInstancesResponse, error) {
	out := new(ListInstancesResponse)
	err := c.cc.Invoke(ctx, AML_ListInstances_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aMLClient) GetInstance(ctx context.Context, in *GetInstanceRequest, opts ...grpc.CallOption) (*Instance, error) {
	out := new(Instance)
	err := c.cc.Invoke(ctx, AML_GetInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aMLClient) CreateInstance(ctx context.Context, in *CreateInstanceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, AML_CreateInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aMLClient) UpdateInstance(ctx context.Context, in *UpdateInstanceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, AML_UpdateInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aMLClient) DeleteInstance(ctx context.Context, in *DeleteInstanceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, AML_DeleteInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aMLClient) ImportRegisteredParties(ctx context.Context, in *ImportRegisteredPartiesRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, AML_ImportRegisteredParties_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aMLClient) ExportRegisteredParties(ctx context.Context, in *ExportRegisteredPartiesRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, AML_ExportRegisteredParties_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aMLClient) ListDatasets(ctx context.Context, in *ListDatasetsRequest, opts ...grpc.CallOption) (*ListDatasetsResponse, error) {
	out := new(ListDatasetsResponse)
	err := c.cc.Invoke(ctx, AML_ListDatasets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aMLClient) GetDataset(ctx context.Context, in *GetDatasetRequest, opts ...grpc.CallOption) (*Dataset, error) {
	out := new(Dataset)
	err := c.cc.Invoke(ctx, AML_GetDataset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aMLClient) CreateDataset(ctx context.Context, in *CreateDatasetRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, AML_CreateDataset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aMLClient) UpdateDataset(ctx context.Context, in *UpdateDatasetRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, AML_UpdateDataset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aMLClient) DeleteDataset(ctx context.Context, in *DeleteDatasetRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, AML_DeleteDataset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aMLClient) ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error) {
	out := new(ListModelsResponse)
	err := c.cc.Invoke(ctx, AML_ListModels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aMLClient) GetModel(ctx context.Context, in *GetModelRequest, opts ...grpc.CallOption) (*Model, error) {
	out := new(Model)
	err := c.cc.Invoke(ctx, AML_GetModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aMLClient) CreateModel(ctx context.Context, in *CreateModelRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, AML_CreateModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aMLClient) UpdateModel(ctx context.Context, in *UpdateModelRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, AML_UpdateModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aMLClient) ExportModelMetadata(ctx context.Context, in *ExportModelMetadataRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, AML_ExportModelMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aMLClient) DeleteModel(ctx context.Context, in *DeleteModelRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, AML_DeleteModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aMLClient) ListEngineConfigs(ctx context.Context, in *ListEngineConfigsRequest, opts ...grpc.CallOption) (*ListEngineConfigsResponse, error) {
	out := new(ListEngineConfigsResponse)
	err := c.cc.Invoke(ctx, AML_ListEngineConfigs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aMLClient) GetEngineConfig(ctx context.Context, in *GetEngineConfigRequest, opts ...grpc.CallOption) (*EngineConfig, error) {
	out := new(EngineConfig)
	err := c.cc.Invoke(ctx, AML_GetEngineConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aMLClient) CreateEngineConfig(ctx context.Context, in *CreateEngineConfigRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, AML_CreateEngineConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aMLClient) UpdateEngineConfig(ctx context.Context, in *UpdateEngineConfigRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, AML_UpdateEngineConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aMLClient) ExportEngineConfigMetadata(ctx context.Context, in *ExportEngineConfigMetadataRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, AML_ExportEngineConfigMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aMLClient) DeleteEngineConfig(ctx context.Context, in *DeleteEngineConfigRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, AML_DeleteEngineConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aMLClient) GetEngineVersion(ctx context.Context, in *GetEngineVersionRequest, opts ...grpc.CallOption) (*EngineVersion, error) {
	out := new(EngineVersion)
	err := c.cc.Invoke(ctx, AML_GetEngineVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aMLClient) ListEngineVersions(ctx context.Context, in *ListEngineVersionsRequest, opts ...grpc.CallOption) (*ListEngineVersionsResponse, error) {
	out := new(ListEngineVersionsResponse)
	err := c.cc.Invoke(ctx, AML_ListEngineVersions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aMLClient) ListPredictionResults(ctx context.Context, in *ListPredictionResultsRequest, opts ...grpc.CallOption) (*ListPredictionResultsResponse, error) {
	out := new(ListPredictionResultsResponse)
	err := c.cc.Invoke(ctx, AML_ListPredictionResults_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aMLClient) GetPredictionResult(ctx context.Context, in *GetPredictionResultRequest, opts ...grpc.CallOption) (*PredictionResult, error) {
	out := new(PredictionResult)
	err := c.cc.Invoke(ctx, AML_GetPredictionResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aMLClient) CreatePredictionResult(ctx context.Context, in *CreatePredictionResultRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, AML_CreatePredictionResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aMLClient) UpdatePredictionResult(ctx context.Context, in *UpdatePredictionResultRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, AML_UpdatePredictionResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aMLClient) ExportPredictionResultMetadata(ctx context.Context, in *ExportPredictionResultMetadataRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, AML_ExportPredictionResultMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aMLClient) DeletePredictionResult(ctx context.Context, in *DeletePredictionResultRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, AML_DeletePredictionResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aMLClient) ListBacktestResults(ctx context.Context, in *ListBacktestResultsRequest, opts ...grpc.CallOption) (*ListBacktestResultsResponse, error) {
	out := new(ListBacktestResultsResponse)
	err := c.cc.Invoke(ctx, AML_ListBacktestResults_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aMLClient) GetBacktestResult(ctx context.Context, in *GetBacktestResultRequest, opts ...grpc.CallOption) (*BacktestResult, error) {
	out := new(BacktestResult)
	err := c.cc.Invoke(ctx, AML_GetBacktestResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aMLClient) CreateBacktestResult(ctx context.Context, in *CreateBacktestResultRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, AML_CreateBacktestResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aMLClient) UpdateBacktestResult(ctx context.Context, in *UpdateBacktestResultRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, AML_UpdateBacktestResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aMLClient) ExportBacktestResultMetadata(ctx context.Context, in *ExportBacktestResultMetadataRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, AML_ExportBacktestResultMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aMLClient) DeleteBacktestResult(ctx context.Context, in *DeleteBacktestResultRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, AML_DeleteBacktestResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AMLServer is the server API for AML service.
// All implementations should embed UnimplementedAMLServer
// for forward compatibility
type AMLServer interface {
	// Lists instances.
	ListInstances(context.Context, *ListInstancesRequest) (*ListInstancesResponse, error)
	// Gets an instance.
	GetInstance(context.Context, *GetInstanceRequest) (*Instance, error)
	// Creates an instance.
	CreateInstance(context.Context, *CreateInstanceRequest) (*longrunningpb.Operation, error)
	// Updates the parameters of a single Instance.
	UpdateInstance(context.Context, *UpdateInstanceRequest) (*longrunningpb.Operation, error)
	// Deletes an instance.
	DeleteInstance(context.Context, *DeleteInstanceRequest) (*longrunningpb.Operation, error)
	// Imports the list of registered parties. See
	// [Create and manage
	// instances](https://cloud.google.com/financial-services/anti-money-laundering/docs/create-and-manage-instances#import-registered-parties)
	// for information on the input schema and response for this method.
	ImportRegisteredParties(context.Context, *ImportRegisteredPartiesRequest) (*longrunningpb.Operation, error)
	// Exports the list of registered parties. See
	// [Create and manage
	// instances](https://cloud.google.com/financial-services/anti-money-laundering/docs/create-and-manage-instances#export-registered-parties)
	// for information on the output schema for this method.
	ExportRegisteredParties(context.Context, *ExportRegisteredPartiesRequest) (*longrunningpb.Operation, error)
	// Lists datasets.
	ListDatasets(context.Context, *ListDatasetsRequest) (*ListDatasetsResponse, error)
	// Gets a dataset.
	GetDataset(context.Context, *GetDatasetRequest) (*Dataset, error)
	// Creates a dataset.
	CreateDataset(context.Context, *CreateDatasetRequest) (*longrunningpb.Operation, error)
	// Updates the parameters of a single Dataset.
	UpdateDataset(context.Context, *UpdateDatasetRequest) (*longrunningpb.Operation, error)
	// Deletes a dataset.
	DeleteDataset(context.Context, *DeleteDatasetRequest) (*longrunningpb.Operation, error)
	// Lists models.
	ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error)
	// Gets a model.
	GetModel(context.Context, *GetModelRequest) (*Model, error)
	// Creates a model.
	CreateModel(context.Context, *CreateModelRequest) (*longrunningpb.Operation, error)
	// Updates the parameters of a single Model.
	UpdateModel(context.Context, *UpdateModelRequest) (*longrunningpb.Operation, error)
	// Export governance information for a Model resource. For
	// information on the exported fields, see
	// [AML output data
	// model](https://cloud.google.com/financial-services/anti-money-laundering/docs/reference/schemas/aml-output-data-model#model).
	ExportModelMetadata(context.Context, *ExportModelMetadataRequest) (*longrunningpb.Operation, error)
	// Deletes a model.
	DeleteModel(context.Context, *DeleteModelRequest) (*longrunningpb.Operation, error)
	// Lists engine configs.
	ListEngineConfigs(context.Context, *ListEngineConfigsRequest) (*ListEngineConfigsResponse, error)
	// Gets an engine config.
	GetEngineConfig(context.Context, *GetEngineConfigRequest) (*EngineConfig, error)
	// Creates an engine config.
	CreateEngineConfig(context.Context, *CreateEngineConfigRequest) (*longrunningpb.Operation, error)
	// Updates the parameters of a single EngineConfig.
	UpdateEngineConfig(context.Context, *UpdateEngineConfigRequest) (*longrunningpb.Operation, error)
	// Export governance information for an EngineConfig resource. For
	// information on the exported fields, see
	// [AML output data
	// model](https://cloud.google.com/financial-services/anti-money-laundering/docs/reference/schemas/aml-output-data-model#engine-config).
	ExportEngineConfigMetadata(context.Context, *ExportEngineConfigMetadataRequest) (*longrunningpb.Operation, error)
	// Deletes an engine config.
	DeleteEngineConfig(context.Context, *DeleteEngineConfigRequest) (*longrunningpb.Operation, error)
	// Gets a single EngineVersion.
	GetEngineVersion(context.Context, *GetEngineVersionRequest) (*EngineVersion, error)
	// Lists EngineVersions for given location.
	ListEngineVersions(context.Context, *ListEngineVersionsRequest) (*ListEngineVersionsResponse, error)
	// List PredictionResults.
	ListPredictionResults(context.Context, *ListPredictionResultsRequest) (*ListPredictionResultsResponse, error)
	// Gets a PredictionResult.
	GetPredictionResult(context.Context, *GetPredictionResultRequest) (*PredictionResult, error)
	// Create a PredictionResult.
	CreatePredictionResult(context.Context, *CreatePredictionResultRequest) (*longrunningpb.Operation, error)
	// Updates the parameters of a single PredictionResult.
	UpdatePredictionResult(context.Context, *UpdatePredictionResultRequest) (*longrunningpb.Operation, error)
	// Export governance information for a PredictionResult resource. For
	// information on the exported fields, see
	// [AML output data
	// model](https://cloud.google.com/financial-services/anti-money-laundering/docs/reference/schemas/aml-output-data-model#prediction-results).
	ExportPredictionResultMetadata(context.Context, *ExportPredictionResultMetadataRequest) (*longrunningpb.Operation, error)
	// Deletes a PredictionResult.
	DeletePredictionResult(context.Context, *DeletePredictionResultRequest) (*longrunningpb.Operation, error)
	// List BacktestResults.
	ListBacktestResults(context.Context, *ListBacktestResultsRequest) (*ListBacktestResultsResponse, error)
	// Gets a BacktestResult.
	GetBacktestResult(context.Context, *GetBacktestResultRequest) (*BacktestResult, error)
	// Create a BacktestResult.
	CreateBacktestResult(context.Context, *CreateBacktestResultRequest) (*longrunningpb.Operation, error)
	// Updates the parameters of a single BacktestResult.
	UpdateBacktestResult(context.Context, *UpdateBacktestResultRequest) (*longrunningpb.Operation, error)
	// Export governance information for a BacktestResult resource. For
	// information on the exported fields, see
	// [AML output data
	// model](https://cloud.google.com/financial-services/anti-money-laundering/docs/reference/schemas/aml-output-data-model#backtest-results).
	ExportBacktestResultMetadata(context.Context, *ExportBacktestResultMetadataRequest) (*longrunningpb.Operation, error)
	// Deletes a BacktestResult.
	DeleteBacktestResult(context.Context, *DeleteBacktestResultRequest) (*longrunningpb.Operation, error)
}

// UnimplementedAMLServer should be embedded to have forward compatible implementations.
type UnimplementedAMLServer struct {
}

func (UnimplementedAMLServer) ListInstances(context.Context, *ListInstancesRequest) (*ListInstancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInstances not implemented")
}
func (UnimplementedAMLServer) GetInstance(context.Context, *GetInstanceRequest) (*Instance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstance not implemented")
}
func (UnimplementedAMLServer) CreateInstance(context.Context, *CreateInstanceRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInstance not implemented")
}
func (UnimplementedAMLServer) UpdateInstance(context.Context, *UpdateInstanceRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInstance not implemented")
}
func (UnimplementedAMLServer) DeleteInstance(context.Context, *DeleteInstanceRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInstance not implemented")
}
func (UnimplementedAMLServer) ImportRegisteredParties(context.Context, *ImportRegisteredPartiesRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportRegisteredParties not implemented")
}
func (UnimplementedAMLServer) ExportRegisteredParties(context.Context, *ExportRegisteredPartiesRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportRegisteredParties not implemented")
}
func (UnimplementedAMLServer) ListDatasets(context.Context, *ListDatasetsRequest) (*ListDatasetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDatasets not implemented")
}
func (UnimplementedAMLServer) GetDataset(context.Context, *GetDatasetRequest) (*Dataset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataset not implemented")
}
func (UnimplementedAMLServer) CreateDataset(context.Context, *CreateDatasetRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataset not implemented")
}
func (UnimplementedAMLServer) UpdateDataset(context.Context, *UpdateDatasetRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDataset not implemented")
}
func (UnimplementedAMLServer) DeleteDataset(context.Context, *DeleteDatasetRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataset not implemented")
}
func (UnimplementedAMLServer) ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModels not implemented")
}
func (UnimplementedAMLServer) GetModel(context.Context, *GetModelRequest) (*Model, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModel not implemented")
}
func (UnimplementedAMLServer) CreateModel(context.Context, *CreateModelRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModel not implemented")
}
func (UnimplementedAMLServer) UpdateModel(context.Context, *UpdateModelRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModel not implemented")
}
func (UnimplementedAMLServer) ExportModelMetadata(context.Context, *ExportModelMetadataRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportModelMetadata not implemented")
}
func (UnimplementedAMLServer) DeleteModel(context.Context, *DeleteModelRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModel not implemented")
}
func (UnimplementedAMLServer) ListEngineConfigs(context.Context, *ListEngineConfigsRequest) (*ListEngineConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEngineConfigs not implemented")
}
func (UnimplementedAMLServer) GetEngineConfig(context.Context, *GetEngineConfigRequest) (*EngineConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEngineConfig not implemented")
}
func (UnimplementedAMLServer) CreateEngineConfig(context.Context, *CreateEngineConfigRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEngineConfig not implemented")
}
func (UnimplementedAMLServer) UpdateEngineConfig(context.Context, *UpdateEngineConfigRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEngineConfig not implemented")
}
func (UnimplementedAMLServer) ExportEngineConfigMetadata(context.Context, *ExportEngineConfigMetadataRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportEngineConfigMetadata not implemented")
}
func (UnimplementedAMLServer) DeleteEngineConfig(context.Context, *DeleteEngineConfigRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEngineConfig not implemented")
}
func (UnimplementedAMLServer) GetEngineVersion(context.Context, *GetEngineVersionRequest) (*EngineVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEngineVersion not implemented")
}
func (UnimplementedAMLServer) ListEngineVersions(context.Context, *ListEngineVersionsRequest) (*ListEngineVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEngineVersions not implemented")
}
func (UnimplementedAMLServer) ListPredictionResults(context.Context, *ListPredictionResultsRequest) (*ListPredictionResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPredictionResults not implemented")
}
func (UnimplementedAMLServer) GetPredictionResult(context.Context, *GetPredictionResultRequest) (*PredictionResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPredictionResult not implemented")
}
func (UnimplementedAMLServer) CreatePredictionResult(context.Context, *CreatePredictionResultRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePredictionResult not implemented")
}
func (UnimplementedAMLServer) UpdatePredictionResult(context.Context, *UpdatePredictionResultRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePredictionResult not implemented")
}
func (UnimplementedAMLServer) ExportPredictionResultMetadata(context.Context, *ExportPredictionResultMetadataRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportPredictionResultMetadata not implemented")
}
func (UnimplementedAMLServer) DeletePredictionResult(context.Context, *DeletePredictionResultRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePredictionResult not implemented")
}
func (UnimplementedAMLServer) ListBacktestResults(context.Context, *ListBacktestResultsRequest) (*ListBacktestResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBacktestResults not implemented")
}
func (UnimplementedAMLServer) GetBacktestResult(context.Context, *GetBacktestResultRequest) (*BacktestResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBacktestResult not implemented")
}
func (UnimplementedAMLServer) CreateBacktestResult(context.Context, *CreateBacktestResultRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBacktestResult not implemented")
}
func (UnimplementedAMLServer) UpdateBacktestResult(context.Context, *UpdateBacktestResultRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBacktestResult not implemented")
}
func (UnimplementedAMLServer) ExportBacktestResultMetadata(context.Context, *ExportBacktestResultMetadataRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportBacktestResultMetadata not implemented")
}
func (UnimplementedAMLServer) DeleteBacktestResult(context.Context, *DeleteBacktestResultRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBacktestResult not implemented")
}

// UnsafeAMLServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AMLServer will
// result in compilation errors.
type UnsafeAMLServer interface {
	mustEmbedUnimplementedAMLServer()
}

func RegisterAMLServer(s grpc.ServiceRegistrar, srv AMLServer) {
	s.RegisterService(&AML_ServiceDesc, srv)
}

func _AML_ListInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInstancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMLServer).ListInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AML_ListInstances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMLServer).ListInstances(ctx, req.(*ListInstancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AML_GetInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMLServer).GetInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AML_GetInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMLServer).GetInstance(ctx, req.(*GetInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AML_CreateInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMLServer).CreateInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AML_CreateInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMLServer).CreateInstance(ctx, req.(*CreateInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AML_UpdateInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMLServer).UpdateInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AML_UpdateInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMLServer).UpdateInstance(ctx, req.(*UpdateInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AML_DeleteInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMLServer).DeleteInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AML_DeleteInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMLServer).DeleteInstance(ctx, req.(*DeleteInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AML_ImportRegisteredParties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportRegisteredPartiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMLServer).ImportRegisteredParties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AML_ImportRegisteredParties_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMLServer).ImportRegisteredParties(ctx, req.(*ImportRegisteredPartiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AML_ExportRegisteredParties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportRegisteredPartiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMLServer).ExportRegisteredParties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AML_ExportRegisteredParties_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMLServer).ExportRegisteredParties(ctx, req.(*ExportRegisteredPartiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AML_ListDatasets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDatasetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMLServer).ListDatasets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AML_ListDatasets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMLServer).ListDatasets(ctx, req.(*ListDatasetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AML_GetDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMLServer).GetDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AML_GetDataset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMLServer).GetDataset(ctx, req.(*GetDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AML_CreateDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMLServer).CreateDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AML_CreateDataset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMLServer).CreateDataset(ctx, req.(*CreateDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AML_UpdateDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMLServer).UpdateDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AML_UpdateDataset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMLServer).UpdateDataset(ctx, req.(*UpdateDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AML_DeleteDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMLServer).DeleteDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AML_DeleteDataset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMLServer).DeleteDataset(ctx, req.(*DeleteDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AML_ListModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMLServer).ListModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AML_ListModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMLServer).ListModels(ctx, req.(*ListModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AML_GetModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMLServer).GetModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AML_GetModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMLServer).GetModel(ctx, req.(*GetModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AML_CreateModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMLServer).CreateModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AML_CreateModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMLServer).CreateModel(ctx, req.(*CreateModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AML_UpdateModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMLServer).UpdateModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AML_UpdateModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMLServer).UpdateModel(ctx, req.(*UpdateModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AML_ExportModelMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportModelMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMLServer).ExportModelMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AML_ExportModelMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMLServer).ExportModelMetadata(ctx, req.(*ExportModelMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AML_DeleteModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMLServer).DeleteModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AML_DeleteModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMLServer).DeleteModel(ctx, req.(*DeleteModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AML_ListEngineConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEngineConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMLServer).ListEngineConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AML_ListEngineConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMLServer).ListEngineConfigs(ctx, req.(*ListEngineConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AML_GetEngineConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEngineConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMLServer).GetEngineConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AML_GetEngineConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMLServer).GetEngineConfig(ctx, req.(*GetEngineConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AML_CreateEngineConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEngineConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMLServer).CreateEngineConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AML_CreateEngineConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMLServer).CreateEngineConfig(ctx, req.(*CreateEngineConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AML_UpdateEngineConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEngineConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMLServer).UpdateEngineConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AML_UpdateEngineConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMLServer).UpdateEngineConfig(ctx, req.(*UpdateEngineConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AML_ExportEngineConfigMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportEngineConfigMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMLServer).ExportEngineConfigMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AML_ExportEngineConfigMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMLServer).ExportEngineConfigMetadata(ctx, req.(*ExportEngineConfigMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AML_DeleteEngineConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEngineConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMLServer).DeleteEngineConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AML_DeleteEngineConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMLServer).DeleteEngineConfig(ctx, req.(*DeleteEngineConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AML_GetEngineVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEngineVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMLServer).GetEngineVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AML_GetEngineVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMLServer).GetEngineVersion(ctx, req.(*GetEngineVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AML_ListEngineVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEngineVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMLServer).ListEngineVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AML_ListEngineVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMLServer).ListEngineVersions(ctx, req.(*ListEngineVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AML_ListPredictionResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPredictionResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMLServer).ListPredictionResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AML_ListPredictionResults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMLServer).ListPredictionResults(ctx, req.(*ListPredictionResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AML_GetPredictionResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPredictionResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMLServer).GetPredictionResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AML_GetPredictionResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMLServer).GetPredictionResult(ctx, req.(*GetPredictionResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AML_CreatePredictionResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePredictionResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMLServer).CreatePredictionResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AML_CreatePredictionResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMLServer).CreatePredictionResult(ctx, req.(*CreatePredictionResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AML_UpdatePredictionResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePredictionResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMLServer).UpdatePredictionResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AML_UpdatePredictionResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMLServer).UpdatePredictionResult(ctx, req.(*UpdatePredictionResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AML_ExportPredictionResultMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportPredictionResultMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMLServer).ExportPredictionResultMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AML_ExportPredictionResultMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMLServer).ExportPredictionResultMetadata(ctx, req.(*ExportPredictionResultMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AML_DeletePredictionResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePredictionResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMLServer).DeletePredictionResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AML_DeletePredictionResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMLServer).DeletePredictionResult(ctx, req.(*DeletePredictionResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AML_ListBacktestResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBacktestResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMLServer).ListBacktestResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AML_ListBacktestResults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMLServer).ListBacktestResults(ctx, req.(*ListBacktestResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AML_GetBacktestResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBacktestResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMLServer).GetBacktestResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AML_GetBacktestResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMLServer).GetBacktestResult(ctx, req.(*GetBacktestResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AML_CreateBacktestResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBacktestResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMLServer).CreateBacktestResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AML_CreateBacktestResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMLServer).CreateBacktestResult(ctx, req.(*CreateBacktestResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AML_UpdateBacktestResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBacktestResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMLServer).UpdateBacktestResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AML_UpdateBacktestResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMLServer).UpdateBacktestResult(ctx, req.(*UpdateBacktestResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AML_ExportBacktestResultMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportBacktestResultMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMLServer).ExportBacktestResultMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AML_ExportBacktestResultMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMLServer).ExportBacktestResultMetadata(ctx, req.(*ExportBacktestResultMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AML_DeleteBacktestResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBacktestResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AMLServer).DeleteBacktestResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AML_DeleteBacktestResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AMLServer).DeleteBacktestResult(ctx, req.(*DeleteBacktestResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AML_ServiceDesc is the grpc.ServiceDesc for AML service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AML_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.financialservices.v1.AML",
	HandlerType: (*AMLServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListInstances",
			Handler:    _AML_ListInstances_Handler,
		},
		{
			MethodName: "GetInstance",
			Handler:    _AML_GetInstance_Handler,
		},
		{
			MethodName: "CreateInstance",
			Handler:    _AML_CreateInstance_Handler,
		},
		{
			MethodName: "UpdateInstance",
			Handler:    _AML_UpdateInstance_Handler,
		},
		{
			MethodName: "DeleteInstance",
			Handler:    _AML_DeleteInstance_Handler,
		},
		{
			MethodName: "ImportRegisteredParties",
			Handler:    _AML_ImportRegisteredParties_Handler,
		},
		{
			MethodName: "ExportRegisteredParties",
			Handler:    _AML_ExportRegisteredParties_Handler,
		},
		{
			MethodName: "ListDatasets",
			Handler:    _AML_ListDatasets_Handler,
		},
		{
			MethodName: "GetDataset",
			Handler:    _AML_GetDataset_Handler,
		},
		{
			MethodName: "CreateDataset",
			Handler:    _AML_CreateDataset_Handler,
		},
		{
			MethodName: "UpdateDataset",
			Handler:    _AML_UpdateDataset_Handler,
		},
		{
			MethodName: "DeleteDataset",
			Handler:    _AML_DeleteDataset_Handler,
		},
		{
			MethodName: "ListModels",
			Handler:    _AML_ListModels_Handler,
		},
		{
			MethodName: "GetModel",
			Handler:    _AML_GetModel_Handler,
		},
		{
			MethodName: "CreateModel",
			Handler:    _AML_CreateModel_Handler,
		},
		{
			MethodName: "UpdateModel",
			Handler:    _AML_UpdateModel_Handler,
		},
		{
			MethodName: "ExportModelMetadata",
			Handler:    _AML_ExportModelMetadata_Handler,
		},
		{
			MethodName: "DeleteModel",
			Handler:    _AML_DeleteModel_Handler,
		},
		{
			MethodName: "ListEngineConfigs",
			Handler:    _AML_ListEngineConfigs_Handler,
		},
		{
			MethodName: "GetEngineConfig",
			Handler:    _AML_GetEngineConfig_Handler,
		},
		{
			MethodName: "CreateEngineConfig",
			Handler:    _AML_CreateEngineConfig_Handler,
		},
		{
			MethodName: "UpdateEngineConfig",
			Handler:    _AML_UpdateEngineConfig_Handler,
		},
		{
			MethodName: "ExportEngineConfigMetadata",
			Handler:    _AML_ExportEngineConfigMetadata_Handler,
		},
		{
			MethodName: "DeleteEngineConfig",
			Handler:    _AML_DeleteEngineConfig_Handler,
		},
		{
			MethodName: "GetEngineVersion",
			Handler:    _AML_GetEngineVersion_Handler,
		},
		{
			MethodName: "ListEngineVersions",
			Handler:    _AML_ListEngineVersions_Handler,
		},
		{
			MethodName: "ListPredictionResults",
			Handler:    _AML_ListPredictionResults_Handler,
		},
		{
			MethodName: "GetPredictionResult",
			Handler:    _AML_GetPredictionResult_Handler,
		},
		{
			MethodName: "CreatePredictionResult",
			Handler:    _AML_CreatePredictionResult_Handler,
		},
		{
			MethodName: "UpdatePredictionResult",
			Handler:    _AML_UpdatePredictionResult_Handler,
		},
		{
			MethodName: "ExportPredictionResultMetadata",
			Handler:    _AML_ExportPredictionResultMetadata_Handler,
		},
		{
			MethodName: "DeletePredictionResult",
			Handler:    _AML_DeletePredictionResult_Handler,
		},
		{
			MethodName: "ListBacktestResults",
			Handler:    _AML_ListBacktestResults_Handler,
		},
		{
			MethodName: "GetBacktestResult",
			Handler:    _AML_GetBacktestResult_Handler,
		},
		{
			MethodName: "CreateBacktestResult",
			Handler:    _AML_CreateBacktestResult_Handler,
		},
		{
			MethodName: "UpdateBacktestResult",
			Handler:    _AML_UpdateBacktestResult_Handler,
		},
		{
			MethodName: "ExportBacktestResultMetadata",
			Handler:    _AML_ExportBacktestResultMetadata_Handler,
		},
		{
			MethodName: "DeleteBacktestResult",
			Handler:    _AML_DeleteBacktestResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/financialservices/v1/service.proto",
}
