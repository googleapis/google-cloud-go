// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/rapidmigrationassessment/v1/rapidmigrationassessment.proto

package rapidmigrationassessmentpb

import (
	context "context"

	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RapidMigrationAssessment_CreateCollector_FullMethodName   = "/google.cloud.rapidmigrationassessment.v1.RapidMigrationAssessment/CreateCollector"
	RapidMigrationAssessment_CreateAnnotation_FullMethodName  = "/google.cloud.rapidmigrationassessment.v1.RapidMigrationAssessment/CreateAnnotation"
	RapidMigrationAssessment_GetAnnotation_FullMethodName     = "/google.cloud.rapidmigrationassessment.v1.RapidMigrationAssessment/GetAnnotation"
	RapidMigrationAssessment_ListCollectors_FullMethodName    = "/google.cloud.rapidmigrationassessment.v1.RapidMigrationAssessment/ListCollectors"
	RapidMigrationAssessment_GetCollector_FullMethodName      = "/google.cloud.rapidmigrationassessment.v1.RapidMigrationAssessment/GetCollector"
	RapidMigrationAssessment_UpdateCollector_FullMethodName   = "/google.cloud.rapidmigrationassessment.v1.RapidMigrationAssessment/UpdateCollector"
	RapidMigrationAssessment_DeleteCollector_FullMethodName   = "/google.cloud.rapidmigrationassessment.v1.RapidMigrationAssessment/DeleteCollector"
	RapidMigrationAssessment_ResumeCollector_FullMethodName   = "/google.cloud.rapidmigrationassessment.v1.RapidMigrationAssessment/ResumeCollector"
	RapidMigrationAssessment_RegisterCollector_FullMethodName = "/google.cloud.rapidmigrationassessment.v1.RapidMigrationAssessment/RegisterCollector"
	RapidMigrationAssessment_PauseCollector_FullMethodName    = "/google.cloud.rapidmigrationassessment.v1.RapidMigrationAssessment/PauseCollector"
)

// RapidMigrationAssessmentClient is the client API for RapidMigrationAssessment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RapidMigrationAssessmentClient interface {
	// Create a Collector to manage the on-prem appliance which collects
	// information about Customer assets.
	CreateCollector(ctx context.Context, in *CreateCollectorRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Creates an Annotation
	CreateAnnotation(ctx context.Context, in *CreateAnnotationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets details of a single Annotation.
	GetAnnotation(ctx context.Context, in *GetAnnotationRequest, opts ...grpc.CallOption) (*Annotation, error)
	// Lists Collectors in a given project and location.
	ListCollectors(ctx context.Context, in *ListCollectorsRequest, opts ...grpc.CallOption) (*ListCollectorsResponse, error)
	// Gets details of a single Collector.
	GetCollector(ctx context.Context, in *GetCollectorRequest, opts ...grpc.CallOption) (*Collector, error)
	// Updates the parameters of a single Collector.
	UpdateCollector(ctx context.Context, in *UpdateCollectorRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single Collector - changes state of collector to "Deleting".
	// Background jobs does final deletion through producer API.
	DeleteCollector(ctx context.Context, in *DeleteCollectorRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Resumes the given collector.
	ResumeCollector(ctx context.Context, in *ResumeCollectorRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Registers the given collector.
	RegisterCollector(ctx context.Context, in *RegisterCollectorRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Pauses the given collector.
	PauseCollector(ctx context.Context, in *PauseCollectorRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type rapidMigrationAssessmentClient struct {
	cc grpc.ClientConnInterface
}

func NewRapidMigrationAssessmentClient(cc grpc.ClientConnInterface) RapidMigrationAssessmentClient {
	return &rapidMigrationAssessmentClient{cc}
}

func (c *rapidMigrationAssessmentClient) CreateCollector(ctx context.Context, in *CreateCollectorRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, RapidMigrationAssessment_CreateCollector_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rapidMigrationAssessmentClient) CreateAnnotation(ctx context.Context, in *CreateAnnotationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, RapidMigrationAssessment_CreateAnnotation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rapidMigrationAssessmentClient) GetAnnotation(ctx context.Context, in *GetAnnotationRequest, opts ...grpc.CallOption) (*Annotation, error) {
	out := new(Annotation)
	err := c.cc.Invoke(ctx, RapidMigrationAssessment_GetAnnotation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rapidMigrationAssessmentClient) ListCollectors(ctx context.Context, in *ListCollectorsRequest, opts ...grpc.CallOption) (*ListCollectorsResponse, error) {
	out := new(ListCollectorsResponse)
	err := c.cc.Invoke(ctx, RapidMigrationAssessment_ListCollectors_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rapidMigrationAssessmentClient) GetCollector(ctx context.Context, in *GetCollectorRequest, opts ...grpc.CallOption) (*Collector, error) {
	out := new(Collector)
	err := c.cc.Invoke(ctx, RapidMigrationAssessment_GetCollector_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rapidMigrationAssessmentClient) UpdateCollector(ctx context.Context, in *UpdateCollectorRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, RapidMigrationAssessment_UpdateCollector_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rapidMigrationAssessmentClient) DeleteCollector(ctx context.Context, in *DeleteCollectorRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, RapidMigrationAssessment_DeleteCollector_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rapidMigrationAssessmentClient) ResumeCollector(ctx context.Context, in *ResumeCollectorRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, RapidMigrationAssessment_ResumeCollector_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rapidMigrationAssessmentClient) RegisterCollector(ctx context.Context, in *RegisterCollectorRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, RapidMigrationAssessment_RegisterCollector_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rapidMigrationAssessmentClient) PauseCollector(ctx context.Context, in *PauseCollectorRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, RapidMigrationAssessment_PauseCollector_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RapidMigrationAssessmentServer is the server API for RapidMigrationAssessment service.
// All implementations should embed UnimplementedRapidMigrationAssessmentServer
// for forward compatibility
type RapidMigrationAssessmentServer interface {
	// Create a Collector to manage the on-prem appliance which collects
	// information about Customer assets.
	CreateCollector(context.Context, *CreateCollectorRequest) (*longrunningpb.Operation, error)
	// Creates an Annotation
	CreateAnnotation(context.Context, *CreateAnnotationRequest) (*longrunningpb.Operation, error)
	// Gets details of a single Annotation.
	GetAnnotation(context.Context, *GetAnnotationRequest) (*Annotation, error)
	// Lists Collectors in a given project and location.
	ListCollectors(context.Context, *ListCollectorsRequest) (*ListCollectorsResponse, error)
	// Gets details of a single Collector.
	GetCollector(context.Context, *GetCollectorRequest) (*Collector, error)
	// Updates the parameters of a single Collector.
	UpdateCollector(context.Context, *UpdateCollectorRequest) (*longrunningpb.Operation, error)
	// Deletes a single Collector - changes state of collector to "Deleting".
	// Background jobs does final deletion through producer API.
	DeleteCollector(context.Context, *DeleteCollectorRequest) (*longrunningpb.Operation, error)
	// Resumes the given collector.
	ResumeCollector(context.Context, *ResumeCollectorRequest) (*longrunningpb.Operation, error)
	// Registers the given collector.
	RegisterCollector(context.Context, *RegisterCollectorRequest) (*longrunningpb.Operation, error)
	// Pauses the given collector.
	PauseCollector(context.Context, *PauseCollectorRequest) (*longrunningpb.Operation, error)
}

// UnimplementedRapidMigrationAssessmentServer should be embedded to have forward compatible implementations.
type UnimplementedRapidMigrationAssessmentServer struct {
}

func (UnimplementedRapidMigrationAssessmentServer) CreateCollector(context.Context, *CreateCollectorRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCollector not implemented")
}
func (UnimplementedRapidMigrationAssessmentServer) CreateAnnotation(context.Context, *CreateAnnotationRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnnotation not implemented")
}
func (UnimplementedRapidMigrationAssessmentServer) GetAnnotation(context.Context, *GetAnnotationRequest) (*Annotation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnnotation not implemented")
}
func (UnimplementedRapidMigrationAssessmentServer) ListCollectors(context.Context, *ListCollectorsRequest) (*ListCollectorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCollectors not implemented")
}
func (UnimplementedRapidMigrationAssessmentServer) GetCollector(context.Context, *GetCollectorRequest) (*Collector, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollector not implemented")
}
func (UnimplementedRapidMigrationAssessmentServer) UpdateCollector(context.Context, *UpdateCollectorRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCollector not implemented")
}
func (UnimplementedRapidMigrationAssessmentServer) DeleteCollector(context.Context, *DeleteCollectorRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCollector not implemented")
}
func (UnimplementedRapidMigrationAssessmentServer) ResumeCollector(context.Context, *ResumeCollectorRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeCollector not implemented")
}
func (UnimplementedRapidMigrationAssessmentServer) RegisterCollector(context.Context, *RegisterCollectorRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCollector not implemented")
}
func (UnimplementedRapidMigrationAssessmentServer) PauseCollector(context.Context, *PauseCollectorRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseCollector not implemented")
}

// UnsafeRapidMigrationAssessmentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RapidMigrationAssessmentServer will
// result in compilation errors.
type UnsafeRapidMigrationAssessmentServer interface {
	mustEmbedUnimplementedRapidMigrationAssessmentServer()
}

func RegisterRapidMigrationAssessmentServer(s grpc.ServiceRegistrar, srv RapidMigrationAssessmentServer) {
	s.RegisterService(&RapidMigrationAssessment_ServiceDesc, srv)
}

func _RapidMigrationAssessment_CreateCollector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCollectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RapidMigrationAssessmentServer).CreateCollector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RapidMigrationAssessment_CreateCollector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RapidMigrationAssessmentServer).CreateCollector(ctx, req.(*CreateCollectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RapidMigrationAssessment_CreateAnnotation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnnotationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RapidMigrationAssessmentServer).CreateAnnotation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RapidMigrationAssessment_CreateAnnotation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RapidMigrationAssessmentServer).CreateAnnotation(ctx, req.(*CreateAnnotationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RapidMigrationAssessment_GetAnnotation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnnotationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RapidMigrationAssessmentServer).GetAnnotation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RapidMigrationAssessment_GetAnnotation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RapidMigrationAssessmentServer).GetAnnotation(ctx, req.(*GetAnnotationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RapidMigrationAssessment_ListCollectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCollectorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RapidMigrationAssessmentServer).ListCollectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RapidMigrationAssessment_ListCollectors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RapidMigrationAssessmentServer).ListCollectors(ctx, req.(*ListCollectorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RapidMigrationAssessment_GetCollector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RapidMigrationAssessmentServer).GetCollector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RapidMigrationAssessment_GetCollector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RapidMigrationAssessmentServer).GetCollector(ctx, req.(*GetCollectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RapidMigrationAssessment_UpdateCollector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCollectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RapidMigrationAssessmentServer).UpdateCollector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RapidMigrationAssessment_UpdateCollector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RapidMigrationAssessmentServer).UpdateCollector(ctx, req.(*UpdateCollectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RapidMigrationAssessment_DeleteCollector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCollectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RapidMigrationAssessmentServer).DeleteCollector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RapidMigrationAssessment_DeleteCollector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RapidMigrationAssessmentServer).DeleteCollector(ctx, req.(*DeleteCollectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RapidMigrationAssessment_ResumeCollector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeCollectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RapidMigrationAssessmentServer).ResumeCollector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RapidMigrationAssessment_ResumeCollector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RapidMigrationAssessmentServer).ResumeCollector(ctx, req.(*ResumeCollectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RapidMigrationAssessment_RegisterCollector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterCollectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RapidMigrationAssessmentServer).RegisterCollector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RapidMigrationAssessment_RegisterCollector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RapidMigrationAssessmentServer).RegisterCollector(ctx, req.(*RegisterCollectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RapidMigrationAssessment_PauseCollector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseCollectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RapidMigrationAssessmentServer).PauseCollector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RapidMigrationAssessment_PauseCollector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RapidMigrationAssessmentServer).PauseCollector(ctx, req.(*PauseCollectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RapidMigrationAssessment_ServiceDesc is the grpc.ServiceDesc for RapidMigrationAssessment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RapidMigrationAssessment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.rapidmigrationassessment.v1.RapidMigrationAssessment",
	HandlerType: (*RapidMigrationAssessmentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCollector",
			Handler:    _RapidMigrationAssessment_CreateCollector_Handler,
		},
		{
			MethodName: "CreateAnnotation",
			Handler:    _RapidMigrationAssessment_CreateAnnotation_Handler,
		},
		{
			MethodName: "GetAnnotation",
			Handler:    _RapidMigrationAssessment_GetAnnotation_Handler,
		},
		{
			MethodName: "ListCollectors",
			Handler:    _RapidMigrationAssessment_ListCollectors_Handler,
		},
		{
			MethodName: "GetCollector",
			Handler:    _RapidMigrationAssessment_GetCollector_Handler,
		},
		{
			MethodName: "UpdateCollector",
			Handler:    _RapidMigrationAssessment_UpdateCollector_Handler,
		},
		{
			MethodName: "DeleteCollector",
			Handler:    _RapidMigrationAssessment_DeleteCollector_Handler,
		},
		{
			MethodName: "ResumeCollector",
			Handler:    _RapidMigrationAssessment_ResumeCollector_Handler,
		},
		{
			MethodName: "RegisterCollector",
			Handler:    _RapidMigrationAssessment_RegisterCollector_Handler,
		},
		{
			MethodName: "PauseCollector",
			Handler:    _RapidMigrationAssessment_PauseCollector_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/rapidmigrationassessment/v1/rapidmigrationassessment.proto",
}
