// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/migrationcenter/v1/migrationcenter.proto

package migrationcenterpb

import (
	context "context"

	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MigrationCenter_ListAssets_FullMethodName            = "/google.cloud.migrationcenter.v1.MigrationCenter/ListAssets"
	MigrationCenter_GetAsset_FullMethodName              = "/google.cloud.migrationcenter.v1.MigrationCenter/GetAsset"
	MigrationCenter_UpdateAsset_FullMethodName           = "/google.cloud.migrationcenter.v1.MigrationCenter/UpdateAsset"
	MigrationCenter_BatchUpdateAssets_FullMethodName     = "/google.cloud.migrationcenter.v1.MigrationCenter/BatchUpdateAssets"
	MigrationCenter_DeleteAsset_FullMethodName           = "/google.cloud.migrationcenter.v1.MigrationCenter/DeleteAsset"
	MigrationCenter_BatchDeleteAssets_FullMethodName     = "/google.cloud.migrationcenter.v1.MigrationCenter/BatchDeleteAssets"
	MigrationCenter_ReportAssetFrames_FullMethodName     = "/google.cloud.migrationcenter.v1.MigrationCenter/ReportAssetFrames"
	MigrationCenter_AggregateAssetsValues_FullMethodName = "/google.cloud.migrationcenter.v1.MigrationCenter/AggregateAssetsValues"
	MigrationCenter_CreateImportJob_FullMethodName       = "/google.cloud.migrationcenter.v1.MigrationCenter/CreateImportJob"
	MigrationCenter_ListImportJobs_FullMethodName        = "/google.cloud.migrationcenter.v1.MigrationCenter/ListImportJobs"
	MigrationCenter_GetImportJob_FullMethodName          = "/google.cloud.migrationcenter.v1.MigrationCenter/GetImportJob"
	MigrationCenter_DeleteImportJob_FullMethodName       = "/google.cloud.migrationcenter.v1.MigrationCenter/DeleteImportJob"
	MigrationCenter_UpdateImportJob_FullMethodName       = "/google.cloud.migrationcenter.v1.MigrationCenter/UpdateImportJob"
	MigrationCenter_ValidateImportJob_FullMethodName     = "/google.cloud.migrationcenter.v1.MigrationCenter/ValidateImportJob"
	MigrationCenter_RunImportJob_FullMethodName          = "/google.cloud.migrationcenter.v1.MigrationCenter/RunImportJob"
	MigrationCenter_GetImportDataFile_FullMethodName     = "/google.cloud.migrationcenter.v1.MigrationCenter/GetImportDataFile"
	MigrationCenter_ListImportDataFiles_FullMethodName   = "/google.cloud.migrationcenter.v1.MigrationCenter/ListImportDataFiles"
	MigrationCenter_CreateImportDataFile_FullMethodName  = "/google.cloud.migrationcenter.v1.MigrationCenter/CreateImportDataFile"
	MigrationCenter_DeleteImportDataFile_FullMethodName  = "/google.cloud.migrationcenter.v1.MigrationCenter/DeleteImportDataFile"
	MigrationCenter_ListGroups_FullMethodName            = "/google.cloud.migrationcenter.v1.MigrationCenter/ListGroups"
	MigrationCenter_GetGroup_FullMethodName              = "/google.cloud.migrationcenter.v1.MigrationCenter/GetGroup"
	MigrationCenter_CreateGroup_FullMethodName           = "/google.cloud.migrationcenter.v1.MigrationCenter/CreateGroup"
	MigrationCenter_UpdateGroup_FullMethodName           = "/google.cloud.migrationcenter.v1.MigrationCenter/UpdateGroup"
	MigrationCenter_DeleteGroup_FullMethodName           = "/google.cloud.migrationcenter.v1.MigrationCenter/DeleteGroup"
	MigrationCenter_AddAssetsToGroup_FullMethodName      = "/google.cloud.migrationcenter.v1.MigrationCenter/AddAssetsToGroup"
	MigrationCenter_RemoveAssetsFromGroup_FullMethodName = "/google.cloud.migrationcenter.v1.MigrationCenter/RemoveAssetsFromGroup"
	MigrationCenter_ListErrorFrames_FullMethodName       = "/google.cloud.migrationcenter.v1.MigrationCenter/ListErrorFrames"
	MigrationCenter_GetErrorFrame_FullMethodName         = "/google.cloud.migrationcenter.v1.MigrationCenter/GetErrorFrame"
	MigrationCenter_ListSources_FullMethodName           = "/google.cloud.migrationcenter.v1.MigrationCenter/ListSources"
	MigrationCenter_GetSource_FullMethodName             = "/google.cloud.migrationcenter.v1.MigrationCenter/GetSource"
	MigrationCenter_CreateSource_FullMethodName          = "/google.cloud.migrationcenter.v1.MigrationCenter/CreateSource"
	MigrationCenter_UpdateSource_FullMethodName          = "/google.cloud.migrationcenter.v1.MigrationCenter/UpdateSource"
	MigrationCenter_DeleteSource_FullMethodName          = "/google.cloud.migrationcenter.v1.MigrationCenter/DeleteSource"
	MigrationCenter_ListPreferenceSets_FullMethodName    = "/google.cloud.migrationcenter.v1.MigrationCenter/ListPreferenceSets"
	MigrationCenter_GetPreferenceSet_FullMethodName      = "/google.cloud.migrationcenter.v1.MigrationCenter/GetPreferenceSet"
	MigrationCenter_CreatePreferenceSet_FullMethodName   = "/google.cloud.migrationcenter.v1.MigrationCenter/CreatePreferenceSet"
	MigrationCenter_UpdatePreferenceSet_FullMethodName   = "/google.cloud.migrationcenter.v1.MigrationCenter/UpdatePreferenceSet"
	MigrationCenter_DeletePreferenceSet_FullMethodName   = "/google.cloud.migrationcenter.v1.MigrationCenter/DeletePreferenceSet"
	MigrationCenter_GetSettings_FullMethodName           = "/google.cloud.migrationcenter.v1.MigrationCenter/GetSettings"
	MigrationCenter_UpdateSettings_FullMethodName        = "/google.cloud.migrationcenter.v1.MigrationCenter/UpdateSettings"
	MigrationCenter_CreateReportConfig_FullMethodName    = "/google.cloud.migrationcenter.v1.MigrationCenter/CreateReportConfig"
	MigrationCenter_GetReportConfig_FullMethodName       = "/google.cloud.migrationcenter.v1.MigrationCenter/GetReportConfig"
	MigrationCenter_ListReportConfigs_FullMethodName     = "/google.cloud.migrationcenter.v1.MigrationCenter/ListReportConfigs"
	MigrationCenter_DeleteReportConfig_FullMethodName    = "/google.cloud.migrationcenter.v1.MigrationCenter/DeleteReportConfig"
	MigrationCenter_CreateReport_FullMethodName          = "/google.cloud.migrationcenter.v1.MigrationCenter/CreateReport"
	MigrationCenter_GetReport_FullMethodName             = "/google.cloud.migrationcenter.v1.MigrationCenter/GetReport"
	MigrationCenter_ListReports_FullMethodName           = "/google.cloud.migrationcenter.v1.MigrationCenter/ListReports"
	MigrationCenter_DeleteReport_FullMethodName          = "/google.cloud.migrationcenter.v1.MigrationCenter/DeleteReport"
)

// MigrationCenterClient is the client API for MigrationCenter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MigrationCenterClient interface {
	// Lists all the assets in a given project and location.
	ListAssets(ctx context.Context, in *ListAssetsRequest, opts ...grpc.CallOption) (*ListAssetsResponse, error)
	// Gets the details of an asset.
	GetAsset(ctx context.Context, in *GetAssetRequest, opts ...grpc.CallOption) (*Asset, error)
	// Updates the parameters of an asset.
	UpdateAsset(ctx context.Context, in *UpdateAssetRequest, opts ...grpc.CallOption) (*Asset, error)
	// Updates the parameters of a list of assets.
	BatchUpdateAssets(ctx context.Context, in *BatchUpdateAssetsRequest, opts ...grpc.CallOption) (*BatchUpdateAssetsResponse, error)
	// Deletes an asset.
	DeleteAsset(ctx context.Context, in *DeleteAssetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Deletes list of Assets.
	BatchDeleteAssets(ctx context.Context, in *BatchDeleteAssetsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Reports a set of frames.
	ReportAssetFrames(ctx context.Context, in *ReportAssetFramesRequest, opts ...grpc.CallOption) (*ReportAssetFramesResponse, error)
	// Aggregates the requested fields based on provided function.
	AggregateAssetsValues(ctx context.Context, in *AggregateAssetsValuesRequest, opts ...grpc.CallOption) (*AggregateAssetsValuesResponse, error)
	// Creates an import job.
	CreateImportJob(ctx context.Context, in *CreateImportJobRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists all import jobs.
	ListImportJobs(ctx context.Context, in *ListImportJobsRequest, opts ...grpc.CallOption) (*ListImportJobsResponse, error)
	// Gets the details of an import job.
	GetImportJob(ctx context.Context, in *GetImportJobRequest, opts ...grpc.CallOption) (*ImportJob, error)
	// Deletes an import job.
	DeleteImportJob(ctx context.Context, in *DeleteImportJobRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates an import job.
	UpdateImportJob(ctx context.Context, in *UpdateImportJobRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Validates an import job.
	ValidateImportJob(ctx context.Context, in *ValidateImportJobRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Runs an import job.
	RunImportJob(ctx context.Context, in *RunImportJobRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets an import data file.
	GetImportDataFile(ctx context.Context, in *GetImportDataFileRequest, opts ...grpc.CallOption) (*ImportDataFile, error)
	// List import data files.
	ListImportDataFiles(ctx context.Context, in *ListImportDataFilesRequest, opts ...grpc.CallOption) (*ListImportDataFilesResponse, error)
	// Creates an import data file.
	CreateImportDataFile(ctx context.Context, in *CreateImportDataFileRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Delete an import data file.
	DeleteImportDataFile(ctx context.Context, in *DeleteImportDataFileRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists all groups in a given project and location.
	ListGroups(ctx context.Context, in *ListGroupsRequest, opts ...grpc.CallOption) (*ListGroupsResponse, error)
	// Gets the details of a group.
	GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*Group, error)
	// Creates a new group in a given project and location.
	CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates the parameters of a group.
	UpdateGroup(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a group.
	DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Adds assets to a group.
	AddAssetsToGroup(ctx context.Context, in *AddAssetsToGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Removes assets from a group.
	RemoveAssetsFromGroup(ctx context.Context, in *RemoveAssetsFromGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists all error frames in a given source and location.
	ListErrorFrames(ctx context.Context, in *ListErrorFramesRequest, opts ...grpc.CallOption) (*ListErrorFramesResponse, error)
	// Gets the details of an error frame.
	GetErrorFrame(ctx context.Context, in *GetErrorFrameRequest, opts ...grpc.CallOption) (*ErrorFrame, error)
	// Lists all the sources in a given project and location.
	ListSources(ctx context.Context, in *ListSourcesRequest, opts ...grpc.CallOption) (*ListSourcesResponse, error)
	// Gets the details of a source.
	GetSource(ctx context.Context, in *GetSourceRequest, opts ...grpc.CallOption) (*Source, error)
	// Creates a new source in a given project and location.
	CreateSource(ctx context.Context, in *CreateSourceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates the parameters of a source.
	UpdateSource(ctx context.Context, in *UpdateSourceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a source.
	DeleteSource(ctx context.Context, in *DeleteSourceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists all the preference sets in a given project and location.
	ListPreferenceSets(ctx context.Context, in *ListPreferenceSetsRequest, opts ...grpc.CallOption) (*ListPreferenceSetsResponse, error)
	// Gets the details of a preference set.
	GetPreferenceSet(ctx context.Context, in *GetPreferenceSetRequest, opts ...grpc.CallOption) (*PreferenceSet, error)
	// Creates a new preference set in a given project and location.
	CreatePreferenceSet(ctx context.Context, in *CreatePreferenceSetRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates the parameters of a preference set.
	UpdatePreferenceSet(ctx context.Context, in *UpdatePreferenceSetRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a preference set.
	DeletePreferenceSet(ctx context.Context, in *DeletePreferenceSetRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets the details of regional settings.
	GetSettings(ctx context.Context, in *GetSettingsRequest, opts ...grpc.CallOption) (*Settings, error)
	// Updates the regional-level project settings.
	UpdateSettings(ctx context.Context, in *UpdateSettingsRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Creates a report configuration.
	CreateReportConfig(ctx context.Context, in *CreateReportConfigRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets details of a single ReportConfig.
	GetReportConfig(ctx context.Context, in *GetReportConfigRequest, opts ...grpc.CallOption) (*ReportConfig, error)
	// Lists ReportConfigs in a given project and location.
	ListReportConfigs(ctx context.Context, in *ListReportConfigsRequest, opts ...grpc.CallOption) (*ListReportConfigsResponse, error)
	// Deletes a ReportConfig.
	DeleteReportConfig(ctx context.Context, in *DeleteReportConfigRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Creates a report.
	CreateReport(ctx context.Context, in *CreateReportRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets details of a single Report.
	GetReport(ctx context.Context, in *GetReportRequest, opts ...grpc.CallOption) (*Report, error)
	// Lists Reports in a given ReportConfig.
	ListReports(ctx context.Context, in *ListReportsRequest, opts ...grpc.CallOption) (*ListReportsResponse, error)
	// Deletes a Report.
	DeleteReport(ctx context.Context, in *DeleteReportRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type migrationCenterClient struct {
	cc grpc.ClientConnInterface
}

func NewMigrationCenterClient(cc grpc.ClientConnInterface) MigrationCenterClient {
	return &migrationCenterClient{cc}
}

func (c *migrationCenterClient) ListAssets(ctx context.Context, in *ListAssetsRequest, opts ...grpc.CallOption) (*ListAssetsResponse, error) {
	out := new(ListAssetsResponse)
	err := c.cc.Invoke(ctx, MigrationCenter_ListAssets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationCenterClient) GetAsset(ctx context.Context, in *GetAssetRequest, opts ...grpc.CallOption) (*Asset, error) {
	out := new(Asset)
	err := c.cc.Invoke(ctx, MigrationCenter_GetAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationCenterClient) UpdateAsset(ctx context.Context, in *UpdateAssetRequest, opts ...grpc.CallOption) (*Asset, error) {
	out := new(Asset)
	err := c.cc.Invoke(ctx, MigrationCenter_UpdateAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationCenterClient) BatchUpdateAssets(ctx context.Context, in *BatchUpdateAssetsRequest, opts ...grpc.CallOption) (*BatchUpdateAssetsResponse, error) {
	out := new(BatchUpdateAssetsResponse)
	err := c.cc.Invoke(ctx, MigrationCenter_BatchUpdateAssets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationCenterClient) DeleteAsset(ctx context.Context, in *DeleteAssetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MigrationCenter_DeleteAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationCenterClient) BatchDeleteAssets(ctx context.Context, in *BatchDeleteAssetsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MigrationCenter_BatchDeleteAssets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationCenterClient) ReportAssetFrames(ctx context.Context, in *ReportAssetFramesRequest, opts ...grpc.CallOption) (*ReportAssetFramesResponse, error) {
	out := new(ReportAssetFramesResponse)
	err := c.cc.Invoke(ctx, MigrationCenter_ReportAssetFrames_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationCenterClient) AggregateAssetsValues(ctx context.Context, in *AggregateAssetsValuesRequest, opts ...grpc.CallOption) (*AggregateAssetsValuesResponse, error) {
	out := new(AggregateAssetsValuesResponse)
	err := c.cc.Invoke(ctx, MigrationCenter_AggregateAssetsValues_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationCenterClient) CreateImportJob(ctx context.Context, in *CreateImportJobRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, MigrationCenter_CreateImportJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationCenterClient) ListImportJobs(ctx context.Context, in *ListImportJobsRequest, opts ...grpc.CallOption) (*ListImportJobsResponse, error) {
	out := new(ListImportJobsResponse)
	err := c.cc.Invoke(ctx, MigrationCenter_ListImportJobs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationCenterClient) GetImportJob(ctx context.Context, in *GetImportJobRequest, opts ...grpc.CallOption) (*ImportJob, error) {
	out := new(ImportJob)
	err := c.cc.Invoke(ctx, MigrationCenter_GetImportJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationCenterClient) DeleteImportJob(ctx context.Context, in *DeleteImportJobRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, MigrationCenter_DeleteImportJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationCenterClient) UpdateImportJob(ctx context.Context, in *UpdateImportJobRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, MigrationCenter_UpdateImportJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationCenterClient) ValidateImportJob(ctx context.Context, in *ValidateImportJobRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, MigrationCenter_ValidateImportJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationCenterClient) RunImportJob(ctx context.Context, in *RunImportJobRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, MigrationCenter_RunImportJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationCenterClient) GetImportDataFile(ctx context.Context, in *GetImportDataFileRequest, opts ...grpc.CallOption) (*ImportDataFile, error) {
	out := new(ImportDataFile)
	err := c.cc.Invoke(ctx, MigrationCenter_GetImportDataFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationCenterClient) ListImportDataFiles(ctx context.Context, in *ListImportDataFilesRequest, opts ...grpc.CallOption) (*ListImportDataFilesResponse, error) {
	out := new(ListImportDataFilesResponse)
	err := c.cc.Invoke(ctx, MigrationCenter_ListImportDataFiles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationCenterClient) CreateImportDataFile(ctx context.Context, in *CreateImportDataFileRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, MigrationCenter_CreateImportDataFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationCenterClient) DeleteImportDataFile(ctx context.Context, in *DeleteImportDataFileRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, MigrationCenter_DeleteImportDataFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationCenterClient) ListGroups(ctx context.Context, in *ListGroupsRequest, opts ...grpc.CallOption) (*ListGroupsResponse, error) {
	out := new(ListGroupsResponse)
	err := c.cc.Invoke(ctx, MigrationCenter_ListGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationCenterClient) GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, MigrationCenter_GetGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationCenterClient) CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, MigrationCenter_CreateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationCenterClient) UpdateGroup(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, MigrationCenter_UpdateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationCenterClient) DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, MigrationCenter_DeleteGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationCenterClient) AddAssetsToGroup(ctx context.Context, in *AddAssetsToGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, MigrationCenter_AddAssetsToGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationCenterClient) RemoveAssetsFromGroup(ctx context.Context, in *RemoveAssetsFromGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, MigrationCenter_RemoveAssetsFromGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationCenterClient) ListErrorFrames(ctx context.Context, in *ListErrorFramesRequest, opts ...grpc.CallOption) (*ListErrorFramesResponse, error) {
	out := new(ListErrorFramesResponse)
	err := c.cc.Invoke(ctx, MigrationCenter_ListErrorFrames_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationCenterClient) GetErrorFrame(ctx context.Context, in *GetErrorFrameRequest, opts ...grpc.CallOption) (*ErrorFrame, error) {
	out := new(ErrorFrame)
	err := c.cc.Invoke(ctx, MigrationCenter_GetErrorFrame_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationCenterClient) ListSources(ctx context.Context, in *ListSourcesRequest, opts ...grpc.CallOption) (*ListSourcesResponse, error) {
	out := new(ListSourcesResponse)
	err := c.cc.Invoke(ctx, MigrationCenter_ListSources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationCenterClient) GetSource(ctx context.Context, in *GetSourceRequest, opts ...grpc.CallOption) (*Source, error) {
	out := new(Source)
	err := c.cc.Invoke(ctx, MigrationCenter_GetSource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationCenterClient) CreateSource(ctx context.Context, in *CreateSourceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, MigrationCenter_CreateSource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationCenterClient) UpdateSource(ctx context.Context, in *UpdateSourceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, MigrationCenter_UpdateSource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationCenterClient) DeleteSource(ctx context.Context, in *DeleteSourceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, MigrationCenter_DeleteSource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationCenterClient) ListPreferenceSets(ctx context.Context, in *ListPreferenceSetsRequest, opts ...grpc.CallOption) (*ListPreferenceSetsResponse, error) {
	out := new(ListPreferenceSetsResponse)
	err := c.cc.Invoke(ctx, MigrationCenter_ListPreferenceSets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationCenterClient) GetPreferenceSet(ctx context.Context, in *GetPreferenceSetRequest, opts ...grpc.CallOption) (*PreferenceSet, error) {
	out := new(PreferenceSet)
	err := c.cc.Invoke(ctx, MigrationCenter_GetPreferenceSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationCenterClient) CreatePreferenceSet(ctx context.Context, in *CreatePreferenceSetRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, MigrationCenter_CreatePreferenceSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationCenterClient) UpdatePreferenceSet(ctx context.Context, in *UpdatePreferenceSetRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, MigrationCenter_UpdatePreferenceSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationCenterClient) DeletePreferenceSet(ctx context.Context, in *DeletePreferenceSetRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, MigrationCenter_DeletePreferenceSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationCenterClient) GetSettings(ctx context.Context, in *GetSettingsRequest, opts ...grpc.CallOption) (*Settings, error) {
	out := new(Settings)
	err := c.cc.Invoke(ctx, MigrationCenter_GetSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationCenterClient) UpdateSettings(ctx context.Context, in *UpdateSettingsRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, MigrationCenter_UpdateSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationCenterClient) CreateReportConfig(ctx context.Context, in *CreateReportConfigRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, MigrationCenter_CreateReportConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationCenterClient) GetReportConfig(ctx context.Context, in *GetReportConfigRequest, opts ...grpc.CallOption) (*ReportConfig, error) {
	out := new(ReportConfig)
	err := c.cc.Invoke(ctx, MigrationCenter_GetReportConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationCenterClient) ListReportConfigs(ctx context.Context, in *ListReportConfigsRequest, opts ...grpc.CallOption) (*ListReportConfigsResponse, error) {
	out := new(ListReportConfigsResponse)
	err := c.cc.Invoke(ctx, MigrationCenter_ListReportConfigs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationCenterClient) DeleteReportConfig(ctx context.Context, in *DeleteReportConfigRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, MigrationCenter_DeleteReportConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationCenterClient) CreateReport(ctx context.Context, in *CreateReportRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, MigrationCenter_CreateReport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationCenterClient) GetReport(ctx context.Context, in *GetReportRequest, opts ...grpc.CallOption) (*Report, error) {
	out := new(Report)
	err := c.cc.Invoke(ctx, MigrationCenter_GetReport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationCenterClient) ListReports(ctx context.Context, in *ListReportsRequest, opts ...grpc.CallOption) (*ListReportsResponse, error) {
	out := new(ListReportsResponse)
	err := c.cc.Invoke(ctx, MigrationCenter_ListReports_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationCenterClient) DeleteReport(ctx context.Context, in *DeleteReportRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, MigrationCenter_DeleteReport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MigrationCenterServer is the server API for MigrationCenter service.
// All implementations should embed UnimplementedMigrationCenterServer
// for forward compatibility
type MigrationCenterServer interface {
	// Lists all the assets in a given project and location.
	ListAssets(context.Context, *ListAssetsRequest) (*ListAssetsResponse, error)
	// Gets the details of an asset.
	GetAsset(context.Context, *GetAssetRequest) (*Asset, error)
	// Updates the parameters of an asset.
	UpdateAsset(context.Context, *UpdateAssetRequest) (*Asset, error)
	// Updates the parameters of a list of assets.
	BatchUpdateAssets(context.Context, *BatchUpdateAssetsRequest) (*BatchUpdateAssetsResponse, error)
	// Deletes an asset.
	DeleteAsset(context.Context, *DeleteAssetRequest) (*emptypb.Empty, error)
	// Deletes list of Assets.
	BatchDeleteAssets(context.Context, *BatchDeleteAssetsRequest) (*emptypb.Empty, error)
	// Reports a set of frames.
	ReportAssetFrames(context.Context, *ReportAssetFramesRequest) (*ReportAssetFramesResponse, error)
	// Aggregates the requested fields based on provided function.
	AggregateAssetsValues(context.Context, *AggregateAssetsValuesRequest) (*AggregateAssetsValuesResponse, error)
	// Creates an import job.
	CreateImportJob(context.Context, *CreateImportJobRequest) (*longrunningpb.Operation, error)
	// Lists all import jobs.
	ListImportJobs(context.Context, *ListImportJobsRequest) (*ListImportJobsResponse, error)
	// Gets the details of an import job.
	GetImportJob(context.Context, *GetImportJobRequest) (*ImportJob, error)
	// Deletes an import job.
	DeleteImportJob(context.Context, *DeleteImportJobRequest) (*longrunningpb.Operation, error)
	// Updates an import job.
	UpdateImportJob(context.Context, *UpdateImportJobRequest) (*longrunningpb.Operation, error)
	// Validates an import job.
	ValidateImportJob(context.Context, *ValidateImportJobRequest) (*longrunningpb.Operation, error)
	// Runs an import job.
	RunImportJob(context.Context, *RunImportJobRequest) (*longrunningpb.Operation, error)
	// Gets an import data file.
	GetImportDataFile(context.Context, *GetImportDataFileRequest) (*ImportDataFile, error)
	// List import data files.
	ListImportDataFiles(context.Context, *ListImportDataFilesRequest) (*ListImportDataFilesResponse, error)
	// Creates an import data file.
	CreateImportDataFile(context.Context, *CreateImportDataFileRequest) (*longrunningpb.Operation, error)
	// Delete an import data file.
	DeleteImportDataFile(context.Context, *DeleteImportDataFileRequest) (*longrunningpb.Operation, error)
	// Lists all groups in a given project and location.
	ListGroups(context.Context, *ListGroupsRequest) (*ListGroupsResponse, error)
	// Gets the details of a group.
	GetGroup(context.Context, *GetGroupRequest) (*Group, error)
	// Creates a new group in a given project and location.
	CreateGroup(context.Context, *CreateGroupRequest) (*longrunningpb.Operation, error)
	// Updates the parameters of a group.
	UpdateGroup(context.Context, *UpdateGroupRequest) (*longrunningpb.Operation, error)
	// Deletes a group.
	DeleteGroup(context.Context, *DeleteGroupRequest) (*longrunningpb.Operation, error)
	// Adds assets to a group.
	AddAssetsToGroup(context.Context, *AddAssetsToGroupRequest) (*longrunningpb.Operation, error)
	// Removes assets from a group.
	RemoveAssetsFromGroup(context.Context, *RemoveAssetsFromGroupRequest) (*longrunningpb.Operation, error)
	// Lists all error frames in a given source and location.
	ListErrorFrames(context.Context, *ListErrorFramesRequest) (*ListErrorFramesResponse, error)
	// Gets the details of an error frame.
	GetErrorFrame(context.Context, *GetErrorFrameRequest) (*ErrorFrame, error)
	// Lists all the sources in a given project and location.
	ListSources(context.Context, *ListSourcesRequest) (*ListSourcesResponse, error)
	// Gets the details of a source.
	GetSource(context.Context, *GetSourceRequest) (*Source, error)
	// Creates a new source in a given project and location.
	CreateSource(context.Context, *CreateSourceRequest) (*longrunningpb.Operation, error)
	// Updates the parameters of a source.
	UpdateSource(context.Context, *UpdateSourceRequest) (*longrunningpb.Operation, error)
	// Deletes a source.
	DeleteSource(context.Context, *DeleteSourceRequest) (*longrunningpb.Operation, error)
	// Lists all the preference sets in a given project and location.
	ListPreferenceSets(context.Context, *ListPreferenceSetsRequest) (*ListPreferenceSetsResponse, error)
	// Gets the details of a preference set.
	GetPreferenceSet(context.Context, *GetPreferenceSetRequest) (*PreferenceSet, error)
	// Creates a new preference set in a given project and location.
	CreatePreferenceSet(context.Context, *CreatePreferenceSetRequest) (*longrunningpb.Operation, error)
	// Updates the parameters of a preference set.
	UpdatePreferenceSet(context.Context, *UpdatePreferenceSetRequest) (*longrunningpb.Operation, error)
	// Deletes a preference set.
	DeletePreferenceSet(context.Context, *DeletePreferenceSetRequest) (*longrunningpb.Operation, error)
	// Gets the details of regional settings.
	GetSettings(context.Context, *GetSettingsRequest) (*Settings, error)
	// Updates the regional-level project settings.
	UpdateSettings(context.Context, *UpdateSettingsRequest) (*longrunningpb.Operation, error)
	// Creates a report configuration.
	CreateReportConfig(context.Context, *CreateReportConfigRequest) (*longrunningpb.Operation, error)
	// Gets details of a single ReportConfig.
	GetReportConfig(context.Context, *GetReportConfigRequest) (*ReportConfig, error)
	// Lists ReportConfigs in a given project and location.
	ListReportConfigs(context.Context, *ListReportConfigsRequest) (*ListReportConfigsResponse, error)
	// Deletes a ReportConfig.
	DeleteReportConfig(context.Context, *DeleteReportConfigRequest) (*longrunningpb.Operation, error)
	// Creates a report.
	CreateReport(context.Context, *CreateReportRequest) (*longrunningpb.Operation, error)
	// Gets details of a single Report.
	GetReport(context.Context, *GetReportRequest) (*Report, error)
	// Lists Reports in a given ReportConfig.
	ListReports(context.Context, *ListReportsRequest) (*ListReportsResponse, error)
	// Deletes a Report.
	DeleteReport(context.Context, *DeleteReportRequest) (*longrunningpb.Operation, error)
}

// UnimplementedMigrationCenterServer should be embedded to have forward compatible implementations.
type UnimplementedMigrationCenterServer struct {
}

func (UnimplementedMigrationCenterServer) ListAssets(context.Context, *ListAssetsRequest) (*ListAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAssets not implemented")
}
func (UnimplementedMigrationCenterServer) GetAsset(context.Context, *GetAssetRequest) (*Asset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAsset not implemented")
}
func (UnimplementedMigrationCenterServer) UpdateAsset(context.Context, *UpdateAssetRequest) (*Asset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAsset not implemented")
}
func (UnimplementedMigrationCenterServer) BatchUpdateAssets(context.Context, *BatchUpdateAssetsRequest) (*BatchUpdateAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpdateAssets not implemented")
}
func (UnimplementedMigrationCenterServer) DeleteAsset(context.Context, *DeleteAssetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAsset not implemented")
}
func (UnimplementedMigrationCenterServer) BatchDeleteAssets(context.Context, *BatchDeleteAssetsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteAssets not implemented")
}
func (UnimplementedMigrationCenterServer) ReportAssetFrames(context.Context, *ReportAssetFramesRequest) (*ReportAssetFramesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportAssetFrames not implemented")
}
func (UnimplementedMigrationCenterServer) AggregateAssetsValues(context.Context, *AggregateAssetsValuesRequest) (*AggregateAssetsValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggregateAssetsValues not implemented")
}
func (UnimplementedMigrationCenterServer) CreateImportJob(context.Context, *CreateImportJobRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateImportJob not implemented")
}
func (UnimplementedMigrationCenterServer) ListImportJobs(context.Context, *ListImportJobsRequest) (*ListImportJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListImportJobs not implemented")
}
func (UnimplementedMigrationCenterServer) GetImportJob(context.Context, *GetImportJobRequest) (*ImportJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImportJob not implemented")
}
func (UnimplementedMigrationCenterServer) DeleteImportJob(context.Context, *DeleteImportJobRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteImportJob not implemented")
}
func (UnimplementedMigrationCenterServer) UpdateImportJob(context.Context, *UpdateImportJobRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateImportJob not implemented")
}
func (UnimplementedMigrationCenterServer) ValidateImportJob(context.Context, *ValidateImportJobRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateImportJob not implemented")
}
func (UnimplementedMigrationCenterServer) RunImportJob(context.Context, *RunImportJobRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunImportJob not implemented")
}
func (UnimplementedMigrationCenterServer) GetImportDataFile(context.Context, *GetImportDataFileRequest) (*ImportDataFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImportDataFile not implemented")
}
func (UnimplementedMigrationCenterServer) ListImportDataFiles(context.Context, *ListImportDataFilesRequest) (*ListImportDataFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListImportDataFiles not implemented")
}
func (UnimplementedMigrationCenterServer) CreateImportDataFile(context.Context, *CreateImportDataFileRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateImportDataFile not implemented")
}
func (UnimplementedMigrationCenterServer) DeleteImportDataFile(context.Context, *DeleteImportDataFileRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteImportDataFile not implemented")
}
func (UnimplementedMigrationCenterServer) ListGroups(context.Context, *ListGroupsRequest) (*ListGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroups not implemented")
}
func (UnimplementedMigrationCenterServer) GetGroup(context.Context, *GetGroupRequest) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (UnimplementedMigrationCenterServer) CreateGroup(context.Context, *CreateGroupRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedMigrationCenterServer) UpdateGroup(context.Context, *UpdateGroupRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (UnimplementedMigrationCenterServer) DeleteGroup(context.Context, *DeleteGroupRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedMigrationCenterServer) AddAssetsToGroup(context.Context, *AddAssetsToGroupRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAssetsToGroup not implemented")
}
func (UnimplementedMigrationCenterServer) RemoveAssetsFromGroup(context.Context, *RemoveAssetsFromGroupRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAssetsFromGroup not implemented")
}
func (UnimplementedMigrationCenterServer) ListErrorFrames(context.Context, *ListErrorFramesRequest) (*ListErrorFramesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListErrorFrames not implemented")
}
func (UnimplementedMigrationCenterServer) GetErrorFrame(context.Context, *GetErrorFrameRequest) (*ErrorFrame, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetErrorFrame not implemented")
}
func (UnimplementedMigrationCenterServer) ListSources(context.Context, *ListSourcesRequest) (*ListSourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSources not implemented")
}
func (UnimplementedMigrationCenterServer) GetSource(context.Context, *GetSourceRequest) (*Source, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSource not implemented")
}
func (UnimplementedMigrationCenterServer) CreateSource(context.Context, *CreateSourceRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSource not implemented")
}
func (UnimplementedMigrationCenterServer) UpdateSource(context.Context, *UpdateSourceRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSource not implemented")
}
func (UnimplementedMigrationCenterServer) DeleteSource(context.Context, *DeleteSourceRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSource not implemented")
}
func (UnimplementedMigrationCenterServer) ListPreferenceSets(context.Context, *ListPreferenceSetsRequest) (*ListPreferenceSetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPreferenceSets not implemented")
}
func (UnimplementedMigrationCenterServer) GetPreferenceSet(context.Context, *GetPreferenceSetRequest) (*PreferenceSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPreferenceSet not implemented")
}
func (UnimplementedMigrationCenterServer) CreatePreferenceSet(context.Context, *CreatePreferenceSetRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePreferenceSet not implemented")
}
func (UnimplementedMigrationCenterServer) UpdatePreferenceSet(context.Context, *UpdatePreferenceSetRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePreferenceSet not implemented")
}
func (UnimplementedMigrationCenterServer) DeletePreferenceSet(context.Context, *DeletePreferenceSetRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePreferenceSet not implemented")
}
func (UnimplementedMigrationCenterServer) GetSettings(context.Context, *GetSettingsRequest) (*Settings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSettings not implemented")
}
func (UnimplementedMigrationCenterServer) UpdateSettings(context.Context, *UpdateSettingsRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSettings not implemented")
}
func (UnimplementedMigrationCenterServer) CreateReportConfig(context.Context, *CreateReportConfigRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReportConfig not implemented")
}
func (UnimplementedMigrationCenterServer) GetReportConfig(context.Context, *GetReportConfigRequest) (*ReportConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReportConfig not implemented")
}
func (UnimplementedMigrationCenterServer) ListReportConfigs(context.Context, *ListReportConfigsRequest) (*ListReportConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReportConfigs not implemented")
}
func (UnimplementedMigrationCenterServer) DeleteReportConfig(context.Context, *DeleteReportConfigRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReportConfig not implemented")
}
func (UnimplementedMigrationCenterServer) CreateReport(context.Context, *CreateReportRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReport not implemented")
}
func (UnimplementedMigrationCenterServer) GetReport(context.Context, *GetReportRequest) (*Report, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReport not implemented")
}
func (UnimplementedMigrationCenterServer) ListReports(context.Context, *ListReportsRequest) (*ListReportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReports not implemented")
}
func (UnimplementedMigrationCenterServer) DeleteReport(context.Context, *DeleteReportRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReport not implemented")
}

// UnsafeMigrationCenterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MigrationCenterServer will
// result in compilation errors.
type UnsafeMigrationCenterServer interface {
	mustEmbedUnimplementedMigrationCenterServer()
}

func RegisterMigrationCenterServer(s grpc.ServiceRegistrar, srv MigrationCenterServer) {
	s.RegisterService(&MigrationCenter_ServiceDesc, srv)
}

func _MigrationCenter_ListAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationCenterServer).ListAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationCenter_ListAssets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationCenterServer).ListAssets(ctx, req.(*ListAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationCenter_GetAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationCenterServer).GetAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationCenter_GetAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationCenterServer).GetAsset(ctx, req.(*GetAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationCenter_UpdateAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationCenterServer).UpdateAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationCenter_UpdateAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationCenterServer).UpdateAsset(ctx, req.(*UpdateAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationCenter_BatchUpdateAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpdateAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationCenterServer).BatchUpdateAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationCenter_BatchUpdateAssets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationCenterServer).BatchUpdateAssets(ctx, req.(*BatchUpdateAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationCenter_DeleteAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationCenterServer).DeleteAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationCenter_DeleteAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationCenterServer).DeleteAsset(ctx, req.(*DeleteAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationCenter_BatchDeleteAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDeleteAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationCenterServer).BatchDeleteAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationCenter_BatchDeleteAssets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationCenterServer).BatchDeleteAssets(ctx, req.(*BatchDeleteAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationCenter_ReportAssetFrames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportAssetFramesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationCenterServer).ReportAssetFrames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationCenter_ReportAssetFrames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationCenterServer).ReportAssetFrames(ctx, req.(*ReportAssetFramesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationCenter_AggregateAssetsValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregateAssetsValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationCenterServer).AggregateAssetsValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationCenter_AggregateAssetsValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationCenterServer).AggregateAssetsValues(ctx, req.(*AggregateAssetsValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationCenter_CreateImportJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateImportJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationCenterServer).CreateImportJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationCenter_CreateImportJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationCenterServer).CreateImportJob(ctx, req.(*CreateImportJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationCenter_ListImportJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListImportJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationCenterServer).ListImportJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationCenter_ListImportJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationCenterServer).ListImportJobs(ctx, req.(*ListImportJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationCenter_GetImportJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImportJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationCenterServer).GetImportJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationCenter_GetImportJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationCenterServer).GetImportJob(ctx, req.(*GetImportJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationCenter_DeleteImportJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteImportJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationCenterServer).DeleteImportJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationCenter_DeleteImportJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationCenterServer).DeleteImportJob(ctx, req.(*DeleteImportJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationCenter_UpdateImportJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateImportJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationCenterServer).UpdateImportJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationCenter_UpdateImportJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationCenterServer).UpdateImportJob(ctx, req.(*UpdateImportJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationCenter_ValidateImportJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateImportJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationCenterServer).ValidateImportJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationCenter_ValidateImportJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationCenterServer).ValidateImportJob(ctx, req.(*ValidateImportJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationCenter_RunImportJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunImportJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationCenterServer).RunImportJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationCenter_RunImportJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationCenterServer).RunImportJob(ctx, req.(*RunImportJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationCenter_GetImportDataFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImportDataFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationCenterServer).GetImportDataFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationCenter_GetImportDataFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationCenterServer).GetImportDataFile(ctx, req.(*GetImportDataFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationCenter_ListImportDataFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListImportDataFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationCenterServer).ListImportDataFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationCenter_ListImportDataFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationCenterServer).ListImportDataFiles(ctx, req.(*ListImportDataFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationCenter_CreateImportDataFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateImportDataFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationCenterServer).CreateImportDataFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationCenter_CreateImportDataFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationCenterServer).CreateImportDataFile(ctx, req.(*CreateImportDataFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationCenter_DeleteImportDataFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteImportDataFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationCenterServer).DeleteImportDataFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationCenter_DeleteImportDataFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationCenterServer).DeleteImportDataFile(ctx, req.(*DeleteImportDataFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationCenter_ListGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationCenterServer).ListGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationCenter_ListGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationCenterServer).ListGroups(ctx, req.(*ListGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationCenter_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationCenterServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationCenter_GetGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationCenterServer).GetGroup(ctx, req.(*GetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationCenter_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationCenterServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationCenter_CreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationCenterServer).CreateGroup(ctx, req.(*CreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationCenter_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationCenterServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationCenter_UpdateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationCenterServer).UpdateGroup(ctx, req.(*UpdateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationCenter_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationCenterServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationCenter_DeleteGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationCenterServer).DeleteGroup(ctx, req.(*DeleteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationCenter_AddAssetsToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAssetsToGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationCenterServer).AddAssetsToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationCenter_AddAssetsToGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationCenterServer).AddAssetsToGroup(ctx, req.(*AddAssetsToGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationCenter_RemoveAssetsFromGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAssetsFromGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationCenterServer).RemoveAssetsFromGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationCenter_RemoveAssetsFromGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationCenterServer).RemoveAssetsFromGroup(ctx, req.(*RemoveAssetsFromGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationCenter_ListErrorFrames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListErrorFramesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationCenterServer).ListErrorFrames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationCenter_ListErrorFrames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationCenterServer).ListErrorFrames(ctx, req.(*ListErrorFramesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationCenter_GetErrorFrame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetErrorFrameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationCenterServer).GetErrorFrame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationCenter_GetErrorFrame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationCenterServer).GetErrorFrame(ctx, req.(*GetErrorFrameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationCenter_ListSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationCenterServer).ListSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationCenter_ListSources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationCenterServer).ListSources(ctx, req.(*ListSourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationCenter_GetSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationCenterServer).GetSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationCenter_GetSource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationCenterServer).GetSource(ctx, req.(*GetSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationCenter_CreateSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationCenterServer).CreateSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationCenter_CreateSource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationCenterServer).CreateSource(ctx, req.(*CreateSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationCenter_UpdateSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationCenterServer).UpdateSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationCenter_UpdateSource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationCenterServer).UpdateSource(ctx, req.(*UpdateSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationCenter_DeleteSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationCenterServer).DeleteSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationCenter_DeleteSource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationCenterServer).DeleteSource(ctx, req.(*DeleteSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationCenter_ListPreferenceSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPreferenceSetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationCenterServer).ListPreferenceSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationCenter_ListPreferenceSets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationCenterServer).ListPreferenceSets(ctx, req.(*ListPreferenceSetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationCenter_GetPreferenceSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPreferenceSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationCenterServer).GetPreferenceSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationCenter_GetPreferenceSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationCenterServer).GetPreferenceSet(ctx, req.(*GetPreferenceSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationCenter_CreatePreferenceSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePreferenceSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationCenterServer).CreatePreferenceSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationCenter_CreatePreferenceSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationCenterServer).CreatePreferenceSet(ctx, req.(*CreatePreferenceSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationCenter_UpdatePreferenceSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePreferenceSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationCenterServer).UpdatePreferenceSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationCenter_UpdatePreferenceSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationCenterServer).UpdatePreferenceSet(ctx, req.(*UpdatePreferenceSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationCenter_DeletePreferenceSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePreferenceSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationCenterServer).DeletePreferenceSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationCenter_DeletePreferenceSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationCenterServer).DeletePreferenceSet(ctx, req.(*DeletePreferenceSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationCenter_GetSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationCenterServer).GetSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationCenter_GetSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationCenterServer).GetSettings(ctx, req.(*GetSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationCenter_UpdateSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationCenterServer).UpdateSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationCenter_UpdateSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationCenterServer).UpdateSettings(ctx, req.(*UpdateSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationCenter_CreateReportConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReportConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationCenterServer).CreateReportConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationCenter_CreateReportConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationCenterServer).CreateReportConfig(ctx, req.(*CreateReportConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationCenter_GetReportConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReportConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationCenterServer).GetReportConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationCenter_GetReportConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationCenterServer).GetReportConfig(ctx, req.(*GetReportConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationCenter_ListReportConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReportConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationCenterServer).ListReportConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationCenter_ListReportConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationCenterServer).ListReportConfigs(ctx, req.(*ListReportConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationCenter_DeleteReportConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReportConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationCenterServer).DeleteReportConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationCenter_DeleteReportConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationCenterServer).DeleteReportConfig(ctx, req.(*DeleteReportConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationCenter_CreateReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationCenterServer).CreateReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationCenter_CreateReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationCenterServer).CreateReport(ctx, req.(*CreateReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationCenter_GetReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationCenterServer).GetReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationCenter_GetReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationCenterServer).GetReport(ctx, req.(*GetReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationCenter_ListReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationCenterServer).ListReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationCenter_ListReports_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationCenterServer).ListReports(ctx, req.(*ListReportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationCenter_DeleteReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationCenterServer).DeleteReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationCenter_DeleteReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationCenterServer).DeleteReport(ctx, req.(*DeleteReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MigrationCenter_ServiceDesc is the grpc.ServiceDesc for MigrationCenter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MigrationCenter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.migrationcenter.v1.MigrationCenter",
	HandlerType: (*MigrationCenterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAssets",
			Handler:    _MigrationCenter_ListAssets_Handler,
		},
		{
			MethodName: "GetAsset",
			Handler:    _MigrationCenter_GetAsset_Handler,
		},
		{
			MethodName: "UpdateAsset",
			Handler:    _MigrationCenter_UpdateAsset_Handler,
		},
		{
			MethodName: "BatchUpdateAssets",
			Handler:    _MigrationCenter_BatchUpdateAssets_Handler,
		},
		{
			MethodName: "DeleteAsset",
			Handler:    _MigrationCenter_DeleteAsset_Handler,
		},
		{
			MethodName: "BatchDeleteAssets",
			Handler:    _MigrationCenter_BatchDeleteAssets_Handler,
		},
		{
			MethodName: "ReportAssetFrames",
			Handler:    _MigrationCenter_ReportAssetFrames_Handler,
		},
		{
			MethodName: "AggregateAssetsValues",
			Handler:    _MigrationCenter_AggregateAssetsValues_Handler,
		},
		{
			MethodName: "CreateImportJob",
			Handler:    _MigrationCenter_CreateImportJob_Handler,
		},
		{
			MethodName: "ListImportJobs",
			Handler:    _MigrationCenter_ListImportJobs_Handler,
		},
		{
			MethodName: "GetImportJob",
			Handler:    _MigrationCenter_GetImportJob_Handler,
		},
		{
			MethodName: "DeleteImportJob",
			Handler:    _MigrationCenter_DeleteImportJob_Handler,
		},
		{
			MethodName: "UpdateImportJob",
			Handler:    _MigrationCenter_UpdateImportJob_Handler,
		},
		{
			MethodName: "ValidateImportJob",
			Handler:    _MigrationCenter_ValidateImportJob_Handler,
		},
		{
			MethodName: "RunImportJob",
			Handler:    _MigrationCenter_RunImportJob_Handler,
		},
		{
			MethodName: "GetImportDataFile",
			Handler:    _MigrationCenter_GetImportDataFile_Handler,
		},
		{
			MethodName: "ListImportDataFiles",
			Handler:    _MigrationCenter_ListImportDataFiles_Handler,
		},
		{
			MethodName: "CreateImportDataFile",
			Handler:    _MigrationCenter_CreateImportDataFile_Handler,
		},
		{
			MethodName: "DeleteImportDataFile",
			Handler:    _MigrationCenter_DeleteImportDataFile_Handler,
		},
		{
			MethodName: "ListGroups",
			Handler:    _MigrationCenter_ListGroups_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _MigrationCenter_GetGroup_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _MigrationCenter_CreateGroup_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _MigrationCenter_UpdateGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _MigrationCenter_DeleteGroup_Handler,
		},
		{
			MethodName: "AddAssetsToGroup",
			Handler:    _MigrationCenter_AddAssetsToGroup_Handler,
		},
		{
			MethodName: "RemoveAssetsFromGroup",
			Handler:    _MigrationCenter_RemoveAssetsFromGroup_Handler,
		},
		{
			MethodName: "ListErrorFrames",
			Handler:    _MigrationCenter_ListErrorFrames_Handler,
		},
		{
			MethodName: "GetErrorFrame",
			Handler:    _MigrationCenter_GetErrorFrame_Handler,
		},
		{
			MethodName: "ListSources",
			Handler:    _MigrationCenter_ListSources_Handler,
		},
		{
			MethodName: "GetSource",
			Handler:    _MigrationCenter_GetSource_Handler,
		},
		{
			MethodName: "CreateSource",
			Handler:    _MigrationCenter_CreateSource_Handler,
		},
		{
			MethodName: "UpdateSource",
			Handler:    _MigrationCenter_UpdateSource_Handler,
		},
		{
			MethodName: "DeleteSource",
			Handler:    _MigrationCenter_DeleteSource_Handler,
		},
		{
			MethodName: "ListPreferenceSets",
			Handler:    _MigrationCenter_ListPreferenceSets_Handler,
		},
		{
			MethodName: "GetPreferenceSet",
			Handler:    _MigrationCenter_GetPreferenceSet_Handler,
		},
		{
			MethodName: "CreatePreferenceSet",
			Handler:    _MigrationCenter_CreatePreferenceSet_Handler,
		},
		{
			MethodName: "UpdatePreferenceSet",
			Handler:    _MigrationCenter_UpdatePreferenceSet_Handler,
		},
		{
			MethodName: "DeletePreferenceSet",
			Handler:    _MigrationCenter_DeletePreferenceSet_Handler,
		},
		{
			MethodName: "GetSettings",
			Handler:    _MigrationCenter_GetSettings_Handler,
		},
		{
			MethodName: "UpdateSettings",
			Handler:    _MigrationCenter_UpdateSettings_Handler,
		},
		{
			MethodName: "CreateReportConfig",
			Handler:    _MigrationCenter_CreateReportConfig_Handler,
		},
		{
			MethodName: "GetReportConfig",
			Handler:    _MigrationCenter_GetReportConfig_Handler,
		},
		{
			MethodName: "ListReportConfigs",
			Handler:    _MigrationCenter_ListReportConfigs_Handler,
		},
		{
			MethodName: "DeleteReportConfig",
			Handler:    _MigrationCenter_DeleteReportConfig_Handler,
		},
		{
			MethodName: "CreateReport",
			Handler:    _MigrationCenter_CreateReport_Handler,
		},
		{
			MethodName: "GetReport",
			Handler:    _MigrationCenter_GetReport_Handler,
		},
		{
			MethodName: "ListReports",
			Handler:    _MigrationCenter_ListReports_Handler,
		},
		{
			MethodName: "DeleteReport",
			Handler:    _MigrationCenter_DeleteReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/migrationcenter/v1/migrationcenter.proto",
}
