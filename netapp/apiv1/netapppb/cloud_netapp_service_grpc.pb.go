// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/netapp/v1/cloud_netapp_service.proto

package netapppb

import (
	context "context"

	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NetApp_ListStoragePools_FullMethodName            = "/google.cloud.netapp.v1.NetApp/ListStoragePools"
	NetApp_CreateStoragePool_FullMethodName           = "/google.cloud.netapp.v1.NetApp/CreateStoragePool"
	NetApp_GetStoragePool_FullMethodName              = "/google.cloud.netapp.v1.NetApp/GetStoragePool"
	NetApp_UpdateStoragePool_FullMethodName           = "/google.cloud.netapp.v1.NetApp/UpdateStoragePool"
	NetApp_DeleteStoragePool_FullMethodName           = "/google.cloud.netapp.v1.NetApp/DeleteStoragePool"
	NetApp_ValidateDirectoryService_FullMethodName    = "/google.cloud.netapp.v1.NetApp/ValidateDirectoryService"
	NetApp_SwitchActiveReplicaZone_FullMethodName     = "/google.cloud.netapp.v1.NetApp/SwitchActiveReplicaZone"
	NetApp_ListVolumes_FullMethodName                 = "/google.cloud.netapp.v1.NetApp/ListVolumes"
	NetApp_GetVolume_FullMethodName                   = "/google.cloud.netapp.v1.NetApp/GetVolume"
	NetApp_CreateVolume_FullMethodName                = "/google.cloud.netapp.v1.NetApp/CreateVolume"
	NetApp_UpdateVolume_FullMethodName                = "/google.cloud.netapp.v1.NetApp/UpdateVolume"
	NetApp_DeleteVolume_FullMethodName                = "/google.cloud.netapp.v1.NetApp/DeleteVolume"
	NetApp_RevertVolume_FullMethodName                = "/google.cloud.netapp.v1.NetApp/RevertVolume"
	NetApp_ListSnapshots_FullMethodName               = "/google.cloud.netapp.v1.NetApp/ListSnapshots"
	NetApp_GetSnapshot_FullMethodName                 = "/google.cloud.netapp.v1.NetApp/GetSnapshot"
	NetApp_CreateSnapshot_FullMethodName              = "/google.cloud.netapp.v1.NetApp/CreateSnapshot"
	NetApp_DeleteSnapshot_FullMethodName              = "/google.cloud.netapp.v1.NetApp/DeleteSnapshot"
	NetApp_UpdateSnapshot_FullMethodName              = "/google.cloud.netapp.v1.NetApp/UpdateSnapshot"
	NetApp_ListActiveDirectories_FullMethodName       = "/google.cloud.netapp.v1.NetApp/ListActiveDirectories"
	NetApp_GetActiveDirectory_FullMethodName          = "/google.cloud.netapp.v1.NetApp/GetActiveDirectory"
	NetApp_CreateActiveDirectory_FullMethodName       = "/google.cloud.netapp.v1.NetApp/CreateActiveDirectory"
	NetApp_UpdateActiveDirectory_FullMethodName       = "/google.cloud.netapp.v1.NetApp/UpdateActiveDirectory"
	NetApp_DeleteActiveDirectory_FullMethodName       = "/google.cloud.netapp.v1.NetApp/DeleteActiveDirectory"
	NetApp_ListKmsConfigs_FullMethodName              = "/google.cloud.netapp.v1.NetApp/ListKmsConfigs"
	NetApp_CreateKmsConfig_FullMethodName             = "/google.cloud.netapp.v1.NetApp/CreateKmsConfig"
	NetApp_GetKmsConfig_FullMethodName                = "/google.cloud.netapp.v1.NetApp/GetKmsConfig"
	NetApp_UpdateKmsConfig_FullMethodName             = "/google.cloud.netapp.v1.NetApp/UpdateKmsConfig"
	NetApp_EncryptVolumes_FullMethodName              = "/google.cloud.netapp.v1.NetApp/EncryptVolumes"
	NetApp_VerifyKmsConfig_FullMethodName             = "/google.cloud.netapp.v1.NetApp/VerifyKmsConfig"
	NetApp_DeleteKmsConfig_FullMethodName             = "/google.cloud.netapp.v1.NetApp/DeleteKmsConfig"
	NetApp_ListReplications_FullMethodName            = "/google.cloud.netapp.v1.NetApp/ListReplications"
	NetApp_GetReplication_FullMethodName              = "/google.cloud.netapp.v1.NetApp/GetReplication"
	NetApp_CreateReplication_FullMethodName           = "/google.cloud.netapp.v1.NetApp/CreateReplication"
	NetApp_DeleteReplication_FullMethodName           = "/google.cloud.netapp.v1.NetApp/DeleteReplication"
	NetApp_UpdateReplication_FullMethodName           = "/google.cloud.netapp.v1.NetApp/UpdateReplication"
	NetApp_StopReplication_FullMethodName             = "/google.cloud.netapp.v1.NetApp/StopReplication"
	NetApp_ResumeReplication_FullMethodName           = "/google.cloud.netapp.v1.NetApp/ResumeReplication"
	NetApp_ReverseReplicationDirection_FullMethodName = "/google.cloud.netapp.v1.NetApp/ReverseReplicationDirection"
	NetApp_EstablishPeering_FullMethodName            = "/google.cloud.netapp.v1.NetApp/EstablishPeering"
	NetApp_SyncReplication_FullMethodName             = "/google.cloud.netapp.v1.NetApp/SyncReplication"
	NetApp_CreateBackupVault_FullMethodName           = "/google.cloud.netapp.v1.NetApp/CreateBackupVault"
	NetApp_GetBackupVault_FullMethodName              = "/google.cloud.netapp.v1.NetApp/GetBackupVault"
	NetApp_ListBackupVaults_FullMethodName            = "/google.cloud.netapp.v1.NetApp/ListBackupVaults"
	NetApp_UpdateBackupVault_FullMethodName           = "/google.cloud.netapp.v1.NetApp/UpdateBackupVault"
	NetApp_DeleteBackupVault_FullMethodName           = "/google.cloud.netapp.v1.NetApp/DeleteBackupVault"
	NetApp_CreateBackup_FullMethodName                = "/google.cloud.netapp.v1.NetApp/CreateBackup"
	NetApp_GetBackup_FullMethodName                   = "/google.cloud.netapp.v1.NetApp/GetBackup"
	NetApp_ListBackups_FullMethodName                 = "/google.cloud.netapp.v1.NetApp/ListBackups"
	NetApp_DeleteBackup_FullMethodName                = "/google.cloud.netapp.v1.NetApp/DeleteBackup"
	NetApp_UpdateBackup_FullMethodName                = "/google.cloud.netapp.v1.NetApp/UpdateBackup"
	NetApp_CreateBackupPolicy_FullMethodName          = "/google.cloud.netapp.v1.NetApp/CreateBackupPolicy"
	NetApp_GetBackupPolicy_FullMethodName             = "/google.cloud.netapp.v1.NetApp/GetBackupPolicy"
	NetApp_ListBackupPolicies_FullMethodName          = "/google.cloud.netapp.v1.NetApp/ListBackupPolicies"
	NetApp_UpdateBackupPolicy_FullMethodName          = "/google.cloud.netapp.v1.NetApp/UpdateBackupPolicy"
	NetApp_DeleteBackupPolicy_FullMethodName          = "/google.cloud.netapp.v1.NetApp/DeleteBackupPolicy"
	NetApp_ListQuotaRules_FullMethodName              = "/google.cloud.netapp.v1.NetApp/ListQuotaRules"
	NetApp_GetQuotaRule_FullMethodName                = "/google.cloud.netapp.v1.NetApp/GetQuotaRule"
	NetApp_CreateQuotaRule_FullMethodName             = "/google.cloud.netapp.v1.NetApp/CreateQuotaRule"
	NetApp_UpdateQuotaRule_FullMethodName             = "/google.cloud.netapp.v1.NetApp/UpdateQuotaRule"
	NetApp_DeleteQuotaRule_FullMethodName             = "/google.cloud.netapp.v1.NetApp/DeleteQuotaRule"
)

// NetAppClient is the client API for NetApp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetAppClient interface {
	// Returns descriptions of all storage pools owned by the caller.
	ListStoragePools(ctx context.Context, in *ListStoragePoolsRequest, opts ...grpc.CallOption) (*ListStoragePoolsResponse, error)
	// Creates a new storage pool.
	CreateStoragePool(ctx context.Context, in *CreateStoragePoolRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Returns the description of the specified storage pool by poolId.
	GetStoragePool(ctx context.Context, in *GetStoragePoolRequest, opts ...grpc.CallOption) (*StoragePool, error)
	// Updates the storage pool properties with the full spec
	UpdateStoragePool(ctx context.Context, in *UpdateStoragePoolRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Warning! This operation will permanently delete the storage pool.
	DeleteStoragePool(ctx context.Context, in *DeleteStoragePoolRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// ValidateDirectoryService does a connectivity check for a directory service
	// policy attached to the storage pool.
	ValidateDirectoryService(ctx context.Context, in *ValidateDirectoryServiceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// This operation will switch the active/replica zone for a regional
	// storagePool.
	SwitchActiveReplicaZone(ctx context.Context, in *SwitchActiveReplicaZoneRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists Volumes in a given project.
	ListVolumes(ctx context.Context, in *ListVolumesRequest, opts ...grpc.CallOption) (*ListVolumesResponse, error)
	// Gets details of a single Volume.
	GetVolume(ctx context.Context, in *GetVolumeRequest, opts ...grpc.CallOption) (*Volume, error)
	// Creates a new Volume in a given project and location.
	CreateVolume(ctx context.Context, in *CreateVolumeRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates the parameters of a single Volume.
	UpdateVolume(ctx context.Context, in *UpdateVolumeRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single Volume.
	DeleteVolume(ctx context.Context, in *DeleteVolumeRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Revert an existing volume to a specified snapshot.
	// Warning! This operation will permanently revert all changes made after the
	// snapshot was created.
	RevertVolume(ctx context.Context, in *RevertVolumeRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Returns descriptions of all snapshots for a volume.
	ListSnapshots(ctx context.Context, in *ListSnapshotsRequest, opts ...grpc.CallOption) (*ListSnapshotsResponse, error)
	// Describe a snapshot for a volume.
	GetSnapshot(ctx context.Context, in *GetSnapshotRequest, opts ...grpc.CallOption) (*Snapshot, error)
	// Create a new snapshot for a volume.
	CreateSnapshot(ctx context.Context, in *CreateSnapshotRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a snapshot.
	DeleteSnapshot(ctx context.Context, in *DeleteSnapshotRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates the settings of a specific snapshot.
	UpdateSnapshot(ctx context.Context, in *UpdateSnapshotRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists active directories.
	ListActiveDirectories(ctx context.Context, in *ListActiveDirectoriesRequest, opts ...grpc.CallOption) (*ListActiveDirectoriesResponse, error)
	// Describes a specified active directory.
	GetActiveDirectory(ctx context.Context, in *GetActiveDirectoryRequest, opts ...grpc.CallOption) (*ActiveDirectory, error)
	// CreateActiveDirectory
	// Creates the active directory specified in the request.
	CreateActiveDirectory(ctx context.Context, in *CreateActiveDirectoryRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Update the parameters of an active directories.
	UpdateActiveDirectory(ctx context.Context, in *UpdateActiveDirectoryRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Delete the active directory specified in the request.
	DeleteActiveDirectory(ctx context.Context, in *DeleteActiveDirectoryRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Returns descriptions of all KMS configs owned by the caller.
	ListKmsConfigs(ctx context.Context, in *ListKmsConfigsRequest, opts ...grpc.CallOption) (*ListKmsConfigsResponse, error)
	// Creates a new KMS config.
	CreateKmsConfig(ctx context.Context, in *CreateKmsConfigRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Returns the description of the specified KMS config by kms_config_id.
	GetKmsConfig(ctx context.Context, in *GetKmsConfigRequest, opts ...grpc.CallOption) (*KmsConfig, error)
	// Updates the Kms config properties with the full spec
	UpdateKmsConfig(ctx context.Context, in *UpdateKmsConfigRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Encrypt the existing volumes without CMEK encryption with the desired the
	// KMS config for the whole region.
	EncryptVolumes(ctx context.Context, in *EncryptVolumesRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Verifies KMS config reachability.
	VerifyKmsConfig(ctx context.Context, in *VerifyKmsConfigRequest, opts ...grpc.CallOption) (*VerifyKmsConfigResponse, error)
	// Warning! This operation will permanently delete the Kms config.
	DeleteKmsConfig(ctx context.Context, in *DeleteKmsConfigRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Returns descriptions of all replications for a volume.
	ListReplications(ctx context.Context, in *ListReplicationsRequest, opts ...grpc.CallOption) (*ListReplicationsResponse, error)
	// Describe a replication for a volume.
	GetReplication(ctx context.Context, in *GetReplicationRequest, opts ...grpc.CallOption) (*Replication, error)
	// Create a new replication for a volume.
	CreateReplication(ctx context.Context, in *CreateReplicationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a replication.
	DeleteReplication(ctx context.Context, in *DeleteReplicationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates the settings of a specific replication.
	UpdateReplication(ctx context.Context, in *UpdateReplicationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Stop Cross Region Replication.
	StopReplication(ctx context.Context, in *StopReplicationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Resume Cross Region Replication.
	ResumeReplication(ctx context.Context, in *ResumeReplicationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Reverses direction of replication. Source becomes destination and
	// destination becomes source.
	ReverseReplicationDirection(ctx context.Context, in *ReverseReplicationDirectionRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Establish replication peering.
	EstablishPeering(ctx context.Context, in *EstablishPeeringRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Syncs the replication. This will invoke one time volume data transfer from
	// source to destination.
	SyncReplication(ctx context.Context, in *SyncReplicationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Creates new backup vault
	CreateBackupVault(ctx context.Context, in *CreateBackupVaultRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Returns the description of the specified backup vault
	GetBackupVault(ctx context.Context, in *GetBackupVaultRequest, opts ...grpc.CallOption) (*BackupVault, error)
	// Returns list of all available backup vaults.
	ListBackupVaults(ctx context.Context, in *ListBackupVaultsRequest, opts ...grpc.CallOption) (*ListBackupVaultsResponse, error)
	// Updates the settings of a specific backup vault.
	UpdateBackupVault(ctx context.Context, in *UpdateBackupVaultRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Warning! This operation will permanently delete the backup vault.
	DeleteBackupVault(ctx context.Context, in *DeleteBackupVaultRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Creates a backup from the volume specified in the request
	// The backup can be created from the given snapshot if specified in the
	// request. If no snapshot specified, there'll be a new snapshot taken to
	// initiate the backup creation.
	CreateBackup(ctx context.Context, in *CreateBackupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Returns the description of the specified backup
	GetBackup(ctx context.Context, in *GetBackupRequest, opts ...grpc.CallOption) (*Backup, error)
	// Returns descriptions of all backups for a backupVault.
	ListBackups(ctx context.Context, in *ListBackupsRequest, opts ...grpc.CallOption) (*ListBackupsResponse, error)
	// Warning! This operation will permanently delete the backup.
	DeleteBackup(ctx context.Context, in *DeleteBackupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Update backup with full spec.
	UpdateBackup(ctx context.Context, in *UpdateBackupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Creates new backup policy
	CreateBackupPolicy(ctx context.Context, in *CreateBackupPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Returns the description of the specified backup policy by backup_policy_id.
	GetBackupPolicy(ctx context.Context, in *GetBackupPolicyRequest, opts ...grpc.CallOption) (*BackupPolicy, error)
	// Returns list of all available backup policies.
	ListBackupPolicies(ctx context.Context, in *ListBackupPoliciesRequest, opts ...grpc.CallOption) (*ListBackupPoliciesResponse, error)
	// Updates settings of a specific backup policy.
	UpdateBackupPolicy(ctx context.Context, in *UpdateBackupPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Warning! This operation will permanently delete the backup policy.
	DeleteBackupPolicy(ctx context.Context, in *DeleteBackupPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Returns list of all quota rules in a location.
	ListQuotaRules(ctx context.Context, in *ListQuotaRulesRequest, opts ...grpc.CallOption) (*ListQuotaRulesResponse, error)
	// Returns details of the specified quota rule.
	GetQuotaRule(ctx context.Context, in *GetQuotaRuleRequest, opts ...grpc.CallOption) (*QuotaRule, error)
	// Creates a new quota rule.
	CreateQuotaRule(ctx context.Context, in *CreateQuotaRuleRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates a quota rule.
	UpdateQuotaRule(ctx context.Context, in *UpdateQuotaRuleRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a quota rule.
	DeleteQuotaRule(ctx context.Context, in *DeleteQuotaRuleRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type netAppClient struct {
	cc grpc.ClientConnInterface
}

func NewNetAppClient(cc grpc.ClientConnInterface) NetAppClient {
	return &netAppClient{cc}
}

func (c *netAppClient) ListStoragePools(ctx context.Context, in *ListStoragePoolsRequest, opts ...grpc.CallOption) (*ListStoragePoolsResponse, error) {
	out := new(ListStoragePoolsResponse)
	err := c.cc.Invoke(ctx, NetApp_ListStoragePools_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) CreateStoragePool(ctx context.Context, in *CreateStoragePoolRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetApp_CreateStoragePool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) GetStoragePool(ctx context.Context, in *GetStoragePoolRequest, opts ...grpc.CallOption) (*StoragePool, error) {
	out := new(StoragePool)
	err := c.cc.Invoke(ctx, NetApp_GetStoragePool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) UpdateStoragePool(ctx context.Context, in *UpdateStoragePoolRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetApp_UpdateStoragePool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) DeleteStoragePool(ctx context.Context, in *DeleteStoragePoolRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetApp_DeleteStoragePool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) ValidateDirectoryService(ctx context.Context, in *ValidateDirectoryServiceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetApp_ValidateDirectoryService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) SwitchActiveReplicaZone(ctx context.Context, in *SwitchActiveReplicaZoneRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetApp_SwitchActiveReplicaZone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) ListVolumes(ctx context.Context, in *ListVolumesRequest, opts ...grpc.CallOption) (*ListVolumesResponse, error) {
	out := new(ListVolumesResponse)
	err := c.cc.Invoke(ctx, NetApp_ListVolumes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) GetVolume(ctx context.Context, in *GetVolumeRequest, opts ...grpc.CallOption) (*Volume, error) {
	out := new(Volume)
	err := c.cc.Invoke(ctx, NetApp_GetVolume_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) CreateVolume(ctx context.Context, in *CreateVolumeRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetApp_CreateVolume_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) UpdateVolume(ctx context.Context, in *UpdateVolumeRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetApp_UpdateVolume_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) DeleteVolume(ctx context.Context, in *DeleteVolumeRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetApp_DeleteVolume_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) RevertVolume(ctx context.Context, in *RevertVolumeRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetApp_RevertVolume_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) ListSnapshots(ctx context.Context, in *ListSnapshotsRequest, opts ...grpc.CallOption) (*ListSnapshotsResponse, error) {
	out := new(ListSnapshotsResponse)
	err := c.cc.Invoke(ctx, NetApp_ListSnapshots_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) GetSnapshot(ctx context.Context, in *GetSnapshotRequest, opts ...grpc.CallOption) (*Snapshot, error) {
	out := new(Snapshot)
	err := c.cc.Invoke(ctx, NetApp_GetSnapshot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) CreateSnapshot(ctx context.Context, in *CreateSnapshotRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetApp_CreateSnapshot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) DeleteSnapshot(ctx context.Context, in *DeleteSnapshotRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetApp_DeleteSnapshot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) UpdateSnapshot(ctx context.Context, in *UpdateSnapshotRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetApp_UpdateSnapshot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) ListActiveDirectories(ctx context.Context, in *ListActiveDirectoriesRequest, opts ...grpc.CallOption) (*ListActiveDirectoriesResponse, error) {
	out := new(ListActiveDirectoriesResponse)
	err := c.cc.Invoke(ctx, NetApp_ListActiveDirectories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) GetActiveDirectory(ctx context.Context, in *GetActiveDirectoryRequest, opts ...grpc.CallOption) (*ActiveDirectory, error) {
	out := new(ActiveDirectory)
	err := c.cc.Invoke(ctx, NetApp_GetActiveDirectory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) CreateActiveDirectory(ctx context.Context, in *CreateActiveDirectoryRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetApp_CreateActiveDirectory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) UpdateActiveDirectory(ctx context.Context, in *UpdateActiveDirectoryRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetApp_UpdateActiveDirectory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) DeleteActiveDirectory(ctx context.Context, in *DeleteActiveDirectoryRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetApp_DeleteActiveDirectory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) ListKmsConfigs(ctx context.Context, in *ListKmsConfigsRequest, opts ...grpc.CallOption) (*ListKmsConfigsResponse, error) {
	out := new(ListKmsConfigsResponse)
	err := c.cc.Invoke(ctx, NetApp_ListKmsConfigs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) CreateKmsConfig(ctx context.Context, in *CreateKmsConfigRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetApp_CreateKmsConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) GetKmsConfig(ctx context.Context, in *GetKmsConfigRequest, opts ...grpc.CallOption) (*KmsConfig, error) {
	out := new(KmsConfig)
	err := c.cc.Invoke(ctx, NetApp_GetKmsConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) UpdateKmsConfig(ctx context.Context, in *UpdateKmsConfigRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetApp_UpdateKmsConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) EncryptVolumes(ctx context.Context, in *EncryptVolumesRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetApp_EncryptVolumes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) VerifyKmsConfig(ctx context.Context, in *VerifyKmsConfigRequest, opts ...grpc.CallOption) (*VerifyKmsConfigResponse, error) {
	out := new(VerifyKmsConfigResponse)
	err := c.cc.Invoke(ctx, NetApp_VerifyKmsConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) DeleteKmsConfig(ctx context.Context, in *DeleteKmsConfigRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetApp_DeleteKmsConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) ListReplications(ctx context.Context, in *ListReplicationsRequest, opts ...grpc.CallOption) (*ListReplicationsResponse, error) {
	out := new(ListReplicationsResponse)
	err := c.cc.Invoke(ctx, NetApp_ListReplications_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) GetReplication(ctx context.Context, in *GetReplicationRequest, opts ...grpc.CallOption) (*Replication, error) {
	out := new(Replication)
	err := c.cc.Invoke(ctx, NetApp_GetReplication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) CreateReplication(ctx context.Context, in *CreateReplicationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetApp_CreateReplication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) DeleteReplication(ctx context.Context, in *DeleteReplicationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetApp_DeleteReplication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) UpdateReplication(ctx context.Context, in *UpdateReplicationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetApp_UpdateReplication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) StopReplication(ctx context.Context, in *StopReplicationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetApp_StopReplication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) ResumeReplication(ctx context.Context, in *ResumeReplicationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetApp_ResumeReplication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) ReverseReplicationDirection(ctx context.Context, in *ReverseReplicationDirectionRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetApp_ReverseReplicationDirection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) EstablishPeering(ctx context.Context, in *EstablishPeeringRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetApp_EstablishPeering_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) SyncReplication(ctx context.Context, in *SyncReplicationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetApp_SyncReplication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) CreateBackupVault(ctx context.Context, in *CreateBackupVaultRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetApp_CreateBackupVault_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) GetBackupVault(ctx context.Context, in *GetBackupVaultRequest, opts ...grpc.CallOption) (*BackupVault, error) {
	out := new(BackupVault)
	err := c.cc.Invoke(ctx, NetApp_GetBackupVault_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) ListBackupVaults(ctx context.Context, in *ListBackupVaultsRequest, opts ...grpc.CallOption) (*ListBackupVaultsResponse, error) {
	out := new(ListBackupVaultsResponse)
	err := c.cc.Invoke(ctx, NetApp_ListBackupVaults_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) UpdateBackupVault(ctx context.Context, in *UpdateBackupVaultRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetApp_UpdateBackupVault_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) DeleteBackupVault(ctx context.Context, in *DeleteBackupVaultRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetApp_DeleteBackupVault_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) CreateBackup(ctx context.Context, in *CreateBackupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetApp_CreateBackup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) GetBackup(ctx context.Context, in *GetBackupRequest, opts ...grpc.CallOption) (*Backup, error) {
	out := new(Backup)
	err := c.cc.Invoke(ctx, NetApp_GetBackup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) ListBackups(ctx context.Context, in *ListBackupsRequest, opts ...grpc.CallOption) (*ListBackupsResponse, error) {
	out := new(ListBackupsResponse)
	err := c.cc.Invoke(ctx, NetApp_ListBackups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) DeleteBackup(ctx context.Context, in *DeleteBackupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetApp_DeleteBackup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) UpdateBackup(ctx context.Context, in *UpdateBackupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetApp_UpdateBackup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) CreateBackupPolicy(ctx context.Context, in *CreateBackupPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetApp_CreateBackupPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) GetBackupPolicy(ctx context.Context, in *GetBackupPolicyRequest, opts ...grpc.CallOption) (*BackupPolicy, error) {
	out := new(BackupPolicy)
	err := c.cc.Invoke(ctx, NetApp_GetBackupPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) ListBackupPolicies(ctx context.Context, in *ListBackupPoliciesRequest, opts ...grpc.CallOption) (*ListBackupPoliciesResponse, error) {
	out := new(ListBackupPoliciesResponse)
	err := c.cc.Invoke(ctx, NetApp_ListBackupPolicies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) UpdateBackupPolicy(ctx context.Context, in *UpdateBackupPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetApp_UpdateBackupPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) DeleteBackupPolicy(ctx context.Context, in *DeleteBackupPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetApp_DeleteBackupPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) ListQuotaRules(ctx context.Context, in *ListQuotaRulesRequest, opts ...grpc.CallOption) (*ListQuotaRulesResponse, error) {
	out := new(ListQuotaRulesResponse)
	err := c.cc.Invoke(ctx, NetApp_ListQuotaRules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) GetQuotaRule(ctx context.Context, in *GetQuotaRuleRequest, opts ...grpc.CallOption) (*QuotaRule, error) {
	out := new(QuotaRule)
	err := c.cc.Invoke(ctx, NetApp_GetQuotaRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) CreateQuotaRule(ctx context.Context, in *CreateQuotaRuleRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetApp_CreateQuotaRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) UpdateQuotaRule(ctx context.Context, in *UpdateQuotaRuleRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetApp_UpdateQuotaRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAppClient) DeleteQuotaRule(ctx context.Context, in *DeleteQuotaRuleRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, NetApp_DeleteQuotaRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetAppServer is the server API for NetApp service.
// All implementations should embed UnimplementedNetAppServer
// for forward compatibility
type NetAppServer interface {
	// Returns descriptions of all storage pools owned by the caller.
	ListStoragePools(context.Context, *ListStoragePoolsRequest) (*ListStoragePoolsResponse, error)
	// Creates a new storage pool.
	CreateStoragePool(context.Context, *CreateStoragePoolRequest) (*longrunningpb.Operation, error)
	// Returns the description of the specified storage pool by poolId.
	GetStoragePool(context.Context, *GetStoragePoolRequest) (*StoragePool, error)
	// Updates the storage pool properties with the full spec
	UpdateStoragePool(context.Context, *UpdateStoragePoolRequest) (*longrunningpb.Operation, error)
	// Warning! This operation will permanently delete the storage pool.
	DeleteStoragePool(context.Context, *DeleteStoragePoolRequest) (*longrunningpb.Operation, error)
	// ValidateDirectoryService does a connectivity check for a directory service
	// policy attached to the storage pool.
	ValidateDirectoryService(context.Context, *ValidateDirectoryServiceRequest) (*longrunningpb.Operation, error)
	// This operation will switch the active/replica zone for a regional
	// storagePool.
	SwitchActiveReplicaZone(context.Context, *SwitchActiveReplicaZoneRequest) (*longrunningpb.Operation, error)
	// Lists Volumes in a given project.
	ListVolumes(context.Context, *ListVolumesRequest) (*ListVolumesResponse, error)
	// Gets details of a single Volume.
	GetVolume(context.Context, *GetVolumeRequest) (*Volume, error)
	// Creates a new Volume in a given project and location.
	CreateVolume(context.Context, *CreateVolumeRequest) (*longrunningpb.Operation, error)
	// Updates the parameters of a single Volume.
	UpdateVolume(context.Context, *UpdateVolumeRequest) (*longrunningpb.Operation, error)
	// Deletes a single Volume.
	DeleteVolume(context.Context, *DeleteVolumeRequest) (*longrunningpb.Operation, error)
	// Revert an existing volume to a specified snapshot.
	// Warning! This operation will permanently revert all changes made after the
	// snapshot was created.
	RevertVolume(context.Context, *RevertVolumeRequest) (*longrunningpb.Operation, error)
	// Returns descriptions of all snapshots for a volume.
	ListSnapshots(context.Context, *ListSnapshotsRequest) (*ListSnapshotsResponse, error)
	// Describe a snapshot for a volume.
	GetSnapshot(context.Context, *GetSnapshotRequest) (*Snapshot, error)
	// Create a new snapshot for a volume.
	CreateSnapshot(context.Context, *CreateSnapshotRequest) (*longrunningpb.Operation, error)
	// Deletes a snapshot.
	DeleteSnapshot(context.Context, *DeleteSnapshotRequest) (*longrunningpb.Operation, error)
	// Updates the settings of a specific snapshot.
	UpdateSnapshot(context.Context, *UpdateSnapshotRequest) (*longrunningpb.Operation, error)
	// Lists active directories.
	ListActiveDirectories(context.Context, *ListActiveDirectoriesRequest) (*ListActiveDirectoriesResponse, error)
	// Describes a specified active directory.
	GetActiveDirectory(context.Context, *GetActiveDirectoryRequest) (*ActiveDirectory, error)
	// CreateActiveDirectory
	// Creates the active directory specified in the request.
	CreateActiveDirectory(context.Context, *CreateActiveDirectoryRequest) (*longrunningpb.Operation, error)
	// Update the parameters of an active directories.
	UpdateActiveDirectory(context.Context, *UpdateActiveDirectoryRequest) (*longrunningpb.Operation, error)
	// Delete the active directory specified in the request.
	DeleteActiveDirectory(context.Context, *DeleteActiveDirectoryRequest) (*longrunningpb.Operation, error)
	// Returns descriptions of all KMS configs owned by the caller.
	ListKmsConfigs(context.Context, *ListKmsConfigsRequest) (*ListKmsConfigsResponse, error)
	// Creates a new KMS config.
	CreateKmsConfig(context.Context, *CreateKmsConfigRequest) (*longrunningpb.Operation, error)
	// Returns the description of the specified KMS config by kms_config_id.
	GetKmsConfig(context.Context, *GetKmsConfigRequest) (*KmsConfig, error)
	// Updates the Kms config properties with the full spec
	UpdateKmsConfig(context.Context, *UpdateKmsConfigRequest) (*longrunningpb.Operation, error)
	// Encrypt the existing volumes without CMEK encryption with the desired the
	// KMS config for the whole region.
	EncryptVolumes(context.Context, *EncryptVolumesRequest) (*longrunningpb.Operation, error)
	// Verifies KMS config reachability.
	VerifyKmsConfig(context.Context, *VerifyKmsConfigRequest) (*VerifyKmsConfigResponse, error)
	// Warning! This operation will permanently delete the Kms config.
	DeleteKmsConfig(context.Context, *DeleteKmsConfigRequest) (*longrunningpb.Operation, error)
	// Returns descriptions of all replications for a volume.
	ListReplications(context.Context, *ListReplicationsRequest) (*ListReplicationsResponse, error)
	// Describe a replication for a volume.
	GetReplication(context.Context, *GetReplicationRequest) (*Replication, error)
	// Create a new replication for a volume.
	CreateReplication(context.Context, *CreateReplicationRequest) (*longrunningpb.Operation, error)
	// Deletes a replication.
	DeleteReplication(context.Context, *DeleteReplicationRequest) (*longrunningpb.Operation, error)
	// Updates the settings of a specific replication.
	UpdateReplication(context.Context, *UpdateReplicationRequest) (*longrunningpb.Operation, error)
	// Stop Cross Region Replication.
	StopReplication(context.Context, *StopReplicationRequest) (*longrunningpb.Operation, error)
	// Resume Cross Region Replication.
	ResumeReplication(context.Context, *ResumeReplicationRequest) (*longrunningpb.Operation, error)
	// Reverses direction of replication. Source becomes destination and
	// destination becomes source.
	ReverseReplicationDirection(context.Context, *ReverseReplicationDirectionRequest) (*longrunningpb.Operation, error)
	// Establish replication peering.
	EstablishPeering(context.Context, *EstablishPeeringRequest) (*longrunningpb.Operation, error)
	// Syncs the replication. This will invoke one time volume data transfer from
	// source to destination.
	SyncReplication(context.Context, *SyncReplicationRequest) (*longrunningpb.Operation, error)
	// Creates new backup vault
	CreateBackupVault(context.Context, *CreateBackupVaultRequest) (*longrunningpb.Operation, error)
	// Returns the description of the specified backup vault
	GetBackupVault(context.Context, *GetBackupVaultRequest) (*BackupVault, error)
	// Returns list of all available backup vaults.
	ListBackupVaults(context.Context, *ListBackupVaultsRequest) (*ListBackupVaultsResponse, error)
	// Updates the settings of a specific backup vault.
	UpdateBackupVault(context.Context, *UpdateBackupVaultRequest) (*longrunningpb.Operation, error)
	// Warning! This operation will permanently delete the backup vault.
	DeleteBackupVault(context.Context, *DeleteBackupVaultRequest) (*longrunningpb.Operation, error)
	// Creates a backup from the volume specified in the request
	// The backup can be created from the given snapshot if specified in the
	// request. If no snapshot specified, there'll be a new snapshot taken to
	// initiate the backup creation.
	CreateBackup(context.Context, *CreateBackupRequest) (*longrunningpb.Operation, error)
	// Returns the description of the specified backup
	GetBackup(context.Context, *GetBackupRequest) (*Backup, error)
	// Returns descriptions of all backups for a backupVault.
	ListBackups(context.Context, *ListBackupsRequest) (*ListBackupsResponse, error)
	// Warning! This operation will permanently delete the backup.
	DeleteBackup(context.Context, *DeleteBackupRequest) (*longrunningpb.Operation, error)
	// Update backup with full spec.
	UpdateBackup(context.Context, *UpdateBackupRequest) (*longrunningpb.Operation, error)
	// Creates new backup policy
	CreateBackupPolicy(context.Context, *CreateBackupPolicyRequest) (*longrunningpb.Operation, error)
	// Returns the description of the specified backup policy by backup_policy_id.
	GetBackupPolicy(context.Context, *GetBackupPolicyRequest) (*BackupPolicy, error)
	// Returns list of all available backup policies.
	ListBackupPolicies(context.Context, *ListBackupPoliciesRequest) (*ListBackupPoliciesResponse, error)
	// Updates settings of a specific backup policy.
	UpdateBackupPolicy(context.Context, *UpdateBackupPolicyRequest) (*longrunningpb.Operation, error)
	// Warning! This operation will permanently delete the backup policy.
	DeleteBackupPolicy(context.Context, *DeleteBackupPolicyRequest) (*longrunningpb.Operation, error)
	// Returns list of all quota rules in a location.
	ListQuotaRules(context.Context, *ListQuotaRulesRequest) (*ListQuotaRulesResponse, error)
	// Returns details of the specified quota rule.
	GetQuotaRule(context.Context, *GetQuotaRuleRequest) (*QuotaRule, error)
	// Creates a new quota rule.
	CreateQuotaRule(context.Context, *CreateQuotaRuleRequest) (*longrunningpb.Operation, error)
	// Updates a quota rule.
	UpdateQuotaRule(context.Context, *UpdateQuotaRuleRequest) (*longrunningpb.Operation, error)
	// Deletes a quota rule.
	DeleteQuotaRule(context.Context, *DeleteQuotaRuleRequest) (*longrunningpb.Operation, error)
}

// UnimplementedNetAppServer should be embedded to have forward compatible implementations.
type UnimplementedNetAppServer struct {
}

func (UnimplementedNetAppServer) ListStoragePools(context.Context, *ListStoragePoolsRequest) (*ListStoragePoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStoragePools not implemented")
}
func (UnimplementedNetAppServer) CreateStoragePool(context.Context, *CreateStoragePoolRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStoragePool not implemented")
}
func (UnimplementedNetAppServer) GetStoragePool(context.Context, *GetStoragePoolRequest) (*StoragePool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoragePool not implemented")
}
func (UnimplementedNetAppServer) UpdateStoragePool(context.Context, *UpdateStoragePoolRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStoragePool not implemented")
}
func (UnimplementedNetAppServer) DeleteStoragePool(context.Context, *DeleteStoragePoolRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStoragePool not implemented")
}
func (UnimplementedNetAppServer) ValidateDirectoryService(context.Context, *ValidateDirectoryServiceRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateDirectoryService not implemented")
}
func (UnimplementedNetAppServer) SwitchActiveReplicaZone(context.Context, *SwitchActiveReplicaZoneRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchActiveReplicaZone not implemented")
}
func (UnimplementedNetAppServer) ListVolumes(context.Context, *ListVolumesRequest) (*ListVolumesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVolumes not implemented")
}
func (UnimplementedNetAppServer) GetVolume(context.Context, *GetVolumeRequest) (*Volume, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVolume not implemented")
}
func (UnimplementedNetAppServer) CreateVolume(context.Context, *CreateVolumeRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVolume not implemented")
}
func (UnimplementedNetAppServer) UpdateVolume(context.Context, *UpdateVolumeRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVolume not implemented")
}
func (UnimplementedNetAppServer) DeleteVolume(context.Context, *DeleteVolumeRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVolume not implemented")
}
func (UnimplementedNetAppServer) RevertVolume(context.Context, *RevertVolumeRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevertVolume not implemented")
}
func (UnimplementedNetAppServer) ListSnapshots(context.Context, *ListSnapshotsRequest) (*ListSnapshotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSnapshots not implemented")
}
func (UnimplementedNetAppServer) GetSnapshot(context.Context, *GetSnapshotRequest) (*Snapshot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSnapshot not implemented")
}
func (UnimplementedNetAppServer) CreateSnapshot(context.Context, *CreateSnapshotRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSnapshot not implemented")
}
func (UnimplementedNetAppServer) DeleteSnapshot(context.Context, *DeleteSnapshotRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSnapshot not implemented")
}
func (UnimplementedNetAppServer) UpdateSnapshot(context.Context, *UpdateSnapshotRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSnapshot not implemented")
}
func (UnimplementedNetAppServer) ListActiveDirectories(context.Context, *ListActiveDirectoriesRequest) (*ListActiveDirectoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListActiveDirectories not implemented")
}
func (UnimplementedNetAppServer) GetActiveDirectory(context.Context, *GetActiveDirectoryRequest) (*ActiveDirectory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveDirectory not implemented")
}
func (UnimplementedNetAppServer) CreateActiveDirectory(context.Context, *CreateActiveDirectoryRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateActiveDirectory not implemented")
}
func (UnimplementedNetAppServer) UpdateActiveDirectory(context.Context, *UpdateActiveDirectoryRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateActiveDirectory not implemented")
}
func (UnimplementedNetAppServer) DeleteActiveDirectory(context.Context, *DeleteActiveDirectoryRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteActiveDirectory not implemented")
}
func (UnimplementedNetAppServer) ListKmsConfigs(context.Context, *ListKmsConfigsRequest) (*ListKmsConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKmsConfigs not implemented")
}
func (UnimplementedNetAppServer) CreateKmsConfig(context.Context, *CreateKmsConfigRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKmsConfig not implemented")
}
func (UnimplementedNetAppServer) GetKmsConfig(context.Context, *GetKmsConfigRequest) (*KmsConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKmsConfig not implemented")
}
func (UnimplementedNetAppServer) UpdateKmsConfig(context.Context, *UpdateKmsConfigRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKmsConfig not implemented")
}
func (UnimplementedNetAppServer) EncryptVolumes(context.Context, *EncryptVolumesRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncryptVolumes not implemented")
}
func (UnimplementedNetAppServer) VerifyKmsConfig(context.Context, *VerifyKmsConfigRequest) (*VerifyKmsConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyKmsConfig not implemented")
}
func (UnimplementedNetAppServer) DeleteKmsConfig(context.Context, *DeleteKmsConfigRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKmsConfig not implemented")
}
func (UnimplementedNetAppServer) ListReplications(context.Context, *ListReplicationsRequest) (*ListReplicationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReplications not implemented")
}
func (UnimplementedNetAppServer) GetReplication(context.Context, *GetReplicationRequest) (*Replication, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReplication not implemented")
}
func (UnimplementedNetAppServer) CreateReplication(context.Context, *CreateReplicationRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReplication not implemented")
}
func (UnimplementedNetAppServer) DeleteReplication(context.Context, *DeleteReplicationRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReplication not implemented")
}
func (UnimplementedNetAppServer) UpdateReplication(context.Context, *UpdateReplicationRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReplication not implemented")
}
func (UnimplementedNetAppServer) StopReplication(context.Context, *StopReplicationRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopReplication not implemented")
}
func (UnimplementedNetAppServer) ResumeReplication(context.Context, *ResumeReplicationRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeReplication not implemented")
}
func (UnimplementedNetAppServer) ReverseReplicationDirection(context.Context, *ReverseReplicationDirectionRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReverseReplicationDirection not implemented")
}
func (UnimplementedNetAppServer) EstablishPeering(context.Context, *EstablishPeeringRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstablishPeering not implemented")
}
func (UnimplementedNetAppServer) SyncReplication(context.Context, *SyncReplicationRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncReplication not implemented")
}
func (UnimplementedNetAppServer) CreateBackupVault(context.Context, *CreateBackupVaultRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBackupVault not implemented")
}
func (UnimplementedNetAppServer) GetBackupVault(context.Context, *GetBackupVaultRequest) (*BackupVault, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBackupVault not implemented")
}
func (UnimplementedNetAppServer) ListBackupVaults(context.Context, *ListBackupVaultsRequest) (*ListBackupVaultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBackupVaults not implemented")
}
func (UnimplementedNetAppServer) UpdateBackupVault(context.Context, *UpdateBackupVaultRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBackupVault not implemented")
}
func (UnimplementedNetAppServer) DeleteBackupVault(context.Context, *DeleteBackupVaultRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBackupVault not implemented")
}
func (UnimplementedNetAppServer) CreateBackup(context.Context, *CreateBackupRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBackup not implemented")
}
func (UnimplementedNetAppServer) GetBackup(context.Context, *GetBackupRequest) (*Backup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBackup not implemented")
}
func (UnimplementedNetAppServer) ListBackups(context.Context, *ListBackupsRequest) (*ListBackupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBackups not implemented")
}
func (UnimplementedNetAppServer) DeleteBackup(context.Context, *DeleteBackupRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBackup not implemented")
}
func (UnimplementedNetAppServer) UpdateBackup(context.Context, *UpdateBackupRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBackup not implemented")
}
func (UnimplementedNetAppServer) CreateBackupPolicy(context.Context, *CreateBackupPolicyRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBackupPolicy not implemented")
}
func (UnimplementedNetAppServer) GetBackupPolicy(context.Context, *GetBackupPolicyRequest) (*BackupPolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBackupPolicy not implemented")
}
func (UnimplementedNetAppServer) ListBackupPolicies(context.Context, *ListBackupPoliciesRequest) (*ListBackupPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBackupPolicies not implemented")
}
func (UnimplementedNetAppServer) UpdateBackupPolicy(context.Context, *UpdateBackupPolicyRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBackupPolicy not implemented")
}
func (UnimplementedNetAppServer) DeleteBackupPolicy(context.Context, *DeleteBackupPolicyRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBackupPolicy not implemented")
}
func (UnimplementedNetAppServer) ListQuotaRules(context.Context, *ListQuotaRulesRequest) (*ListQuotaRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQuotaRules not implemented")
}
func (UnimplementedNetAppServer) GetQuotaRule(context.Context, *GetQuotaRuleRequest) (*QuotaRule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuotaRule not implemented")
}
func (UnimplementedNetAppServer) CreateQuotaRule(context.Context, *CreateQuotaRuleRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuotaRule not implemented")
}
func (UnimplementedNetAppServer) UpdateQuotaRule(context.Context, *UpdateQuotaRuleRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuotaRule not implemented")
}
func (UnimplementedNetAppServer) DeleteQuotaRule(context.Context, *DeleteQuotaRuleRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQuotaRule not implemented")
}

// UnsafeNetAppServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetAppServer will
// result in compilation errors.
type UnsafeNetAppServer interface {
	mustEmbedUnimplementedNetAppServer()
}

func RegisterNetAppServer(s grpc.ServiceRegistrar, srv NetAppServer) {
	s.RegisterService(&NetApp_ServiceDesc, srv)
}

func _NetApp_ListStoragePools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStoragePoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).ListStoragePools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_ListStoragePools_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).ListStoragePools(ctx, req.(*ListStoragePoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_CreateStoragePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStoragePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).CreateStoragePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_CreateStoragePool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).CreateStoragePool(ctx, req.(*CreateStoragePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_GetStoragePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoragePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).GetStoragePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_GetStoragePool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).GetStoragePool(ctx, req.(*GetStoragePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_UpdateStoragePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStoragePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).UpdateStoragePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_UpdateStoragePool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).UpdateStoragePool(ctx, req.(*UpdateStoragePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_DeleteStoragePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStoragePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).DeleteStoragePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_DeleteStoragePool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).DeleteStoragePool(ctx, req.(*DeleteStoragePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_ValidateDirectoryService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateDirectoryServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).ValidateDirectoryService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_ValidateDirectoryService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).ValidateDirectoryService(ctx, req.(*ValidateDirectoryServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_SwitchActiveReplicaZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchActiveReplicaZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).SwitchActiveReplicaZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_SwitchActiveReplicaZone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).SwitchActiveReplicaZone(ctx, req.(*SwitchActiveReplicaZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_ListVolumes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVolumesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).ListVolumes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_ListVolumes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).ListVolumes(ctx, req.(*ListVolumesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_GetVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).GetVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_GetVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).GetVolume(ctx, req.(*GetVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_CreateVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).CreateVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_CreateVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).CreateVolume(ctx, req.(*CreateVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_UpdateVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).UpdateVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_UpdateVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).UpdateVolume(ctx, req.(*UpdateVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_DeleteVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).DeleteVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_DeleteVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).DeleteVolume(ctx, req.(*DeleteVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_RevertVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevertVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).RevertVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_RevertVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).RevertVolume(ctx, req.(*RevertVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_ListSnapshots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSnapshotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).ListSnapshots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_ListSnapshots_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).ListSnapshots(ctx, req.(*ListSnapshotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_GetSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).GetSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_GetSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).GetSnapshot(ctx, req.(*GetSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_CreateSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).CreateSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_CreateSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).CreateSnapshot(ctx, req.(*CreateSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_DeleteSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).DeleteSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_DeleteSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).DeleteSnapshot(ctx, req.(*DeleteSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_UpdateSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).UpdateSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_UpdateSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).UpdateSnapshot(ctx, req.(*UpdateSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_ListActiveDirectories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListActiveDirectoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).ListActiveDirectories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_ListActiveDirectories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).ListActiveDirectories(ctx, req.(*ListActiveDirectoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_GetActiveDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).GetActiveDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_GetActiveDirectory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).GetActiveDirectory(ctx, req.(*GetActiveDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_CreateActiveDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateActiveDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).CreateActiveDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_CreateActiveDirectory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).CreateActiveDirectory(ctx, req.(*CreateActiveDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_UpdateActiveDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateActiveDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).UpdateActiveDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_UpdateActiveDirectory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).UpdateActiveDirectory(ctx, req.(*UpdateActiveDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_DeleteActiveDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteActiveDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).DeleteActiveDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_DeleteActiveDirectory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).DeleteActiveDirectory(ctx, req.(*DeleteActiveDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_ListKmsConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKmsConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).ListKmsConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_ListKmsConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).ListKmsConfigs(ctx, req.(*ListKmsConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_CreateKmsConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKmsConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).CreateKmsConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_CreateKmsConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).CreateKmsConfig(ctx, req.(*CreateKmsConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_GetKmsConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKmsConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).GetKmsConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_GetKmsConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).GetKmsConfig(ctx, req.(*GetKmsConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_UpdateKmsConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKmsConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).UpdateKmsConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_UpdateKmsConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).UpdateKmsConfig(ctx, req.(*UpdateKmsConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_EncryptVolumes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptVolumesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).EncryptVolumes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_EncryptVolumes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).EncryptVolumes(ctx, req.(*EncryptVolumesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_VerifyKmsConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyKmsConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).VerifyKmsConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_VerifyKmsConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).VerifyKmsConfig(ctx, req.(*VerifyKmsConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_DeleteKmsConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKmsConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).DeleteKmsConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_DeleteKmsConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).DeleteKmsConfig(ctx, req.(*DeleteKmsConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_ListReplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReplicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).ListReplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_ListReplications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).ListReplications(ctx, req.(*ListReplicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_GetReplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).GetReplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_GetReplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).GetReplication(ctx, req.(*GetReplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_CreateReplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).CreateReplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_CreateReplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).CreateReplication(ctx, req.(*CreateReplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_DeleteReplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).DeleteReplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_DeleteReplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).DeleteReplication(ctx, req.(*DeleteReplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_UpdateReplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).UpdateReplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_UpdateReplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).UpdateReplication(ctx, req.(*UpdateReplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_StopReplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopReplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).StopReplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_StopReplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).StopReplication(ctx, req.(*StopReplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_ResumeReplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeReplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).ResumeReplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_ResumeReplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).ResumeReplication(ctx, req.(*ResumeReplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_ReverseReplicationDirection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReverseReplicationDirectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).ReverseReplicationDirection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_ReverseReplicationDirection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).ReverseReplicationDirection(ctx, req.(*ReverseReplicationDirectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_EstablishPeering_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstablishPeeringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).EstablishPeering(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_EstablishPeering_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).EstablishPeering(ctx, req.(*EstablishPeeringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_SyncReplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncReplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).SyncReplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_SyncReplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).SyncReplication(ctx, req.(*SyncReplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_CreateBackupVault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBackupVaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).CreateBackupVault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_CreateBackupVault_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).CreateBackupVault(ctx, req.(*CreateBackupVaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_GetBackupVault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBackupVaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).GetBackupVault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_GetBackupVault_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).GetBackupVault(ctx, req.(*GetBackupVaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_ListBackupVaults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBackupVaultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).ListBackupVaults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_ListBackupVaults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).ListBackupVaults(ctx, req.(*ListBackupVaultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_UpdateBackupVault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBackupVaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).UpdateBackupVault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_UpdateBackupVault_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).UpdateBackupVault(ctx, req.(*UpdateBackupVaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_DeleteBackupVault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBackupVaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).DeleteBackupVault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_DeleteBackupVault_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).DeleteBackupVault(ctx, req.(*DeleteBackupVaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_CreateBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).CreateBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_CreateBackup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).CreateBackup(ctx, req.(*CreateBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_GetBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).GetBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_GetBackup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).GetBackup(ctx, req.(*GetBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_ListBackups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBackupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).ListBackups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_ListBackups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).ListBackups(ctx, req.(*ListBackupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_DeleteBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).DeleteBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_DeleteBackup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).DeleteBackup(ctx, req.(*DeleteBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_UpdateBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).UpdateBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_UpdateBackup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).UpdateBackup(ctx, req.(*UpdateBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_CreateBackupPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBackupPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).CreateBackupPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_CreateBackupPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).CreateBackupPolicy(ctx, req.(*CreateBackupPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_GetBackupPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBackupPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).GetBackupPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_GetBackupPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).GetBackupPolicy(ctx, req.(*GetBackupPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_ListBackupPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBackupPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).ListBackupPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_ListBackupPolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).ListBackupPolicies(ctx, req.(*ListBackupPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_UpdateBackupPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBackupPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).UpdateBackupPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_UpdateBackupPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).UpdateBackupPolicy(ctx, req.(*UpdateBackupPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_DeleteBackupPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBackupPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).DeleteBackupPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_DeleteBackupPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).DeleteBackupPolicy(ctx, req.(*DeleteBackupPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_ListQuotaRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQuotaRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).ListQuotaRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_ListQuotaRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).ListQuotaRules(ctx, req.(*ListQuotaRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_GetQuotaRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuotaRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).GetQuotaRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_GetQuotaRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).GetQuotaRule(ctx, req.(*GetQuotaRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_CreateQuotaRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuotaRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).CreateQuotaRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_CreateQuotaRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).CreateQuotaRule(ctx, req.(*CreateQuotaRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_UpdateQuotaRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuotaRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).UpdateQuotaRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_UpdateQuotaRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).UpdateQuotaRule(ctx, req.(*UpdateQuotaRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetApp_DeleteQuotaRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQuotaRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAppServer).DeleteQuotaRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetApp_DeleteQuotaRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAppServer).DeleteQuotaRule(ctx, req.(*DeleteQuotaRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NetApp_ServiceDesc is the grpc.ServiceDesc for NetApp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetApp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.netapp.v1.NetApp",
	HandlerType: (*NetAppServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListStoragePools",
			Handler:    _NetApp_ListStoragePools_Handler,
		},
		{
			MethodName: "CreateStoragePool",
			Handler:    _NetApp_CreateStoragePool_Handler,
		},
		{
			MethodName: "GetStoragePool",
			Handler:    _NetApp_GetStoragePool_Handler,
		},
		{
			MethodName: "UpdateStoragePool",
			Handler:    _NetApp_UpdateStoragePool_Handler,
		},
		{
			MethodName: "DeleteStoragePool",
			Handler:    _NetApp_DeleteStoragePool_Handler,
		},
		{
			MethodName: "ValidateDirectoryService",
			Handler:    _NetApp_ValidateDirectoryService_Handler,
		},
		{
			MethodName: "SwitchActiveReplicaZone",
			Handler:    _NetApp_SwitchActiveReplicaZone_Handler,
		},
		{
			MethodName: "ListVolumes",
			Handler:    _NetApp_ListVolumes_Handler,
		},
		{
			MethodName: "GetVolume",
			Handler:    _NetApp_GetVolume_Handler,
		},
		{
			MethodName: "CreateVolume",
			Handler:    _NetApp_CreateVolume_Handler,
		},
		{
			MethodName: "UpdateVolume",
			Handler:    _NetApp_UpdateVolume_Handler,
		},
		{
			MethodName: "DeleteVolume",
			Handler:    _NetApp_DeleteVolume_Handler,
		},
		{
			MethodName: "RevertVolume",
			Handler:    _NetApp_RevertVolume_Handler,
		},
		{
			MethodName: "ListSnapshots",
			Handler:    _NetApp_ListSnapshots_Handler,
		},
		{
			MethodName: "GetSnapshot",
			Handler:    _NetApp_GetSnapshot_Handler,
		},
		{
			MethodName: "CreateSnapshot",
			Handler:    _NetApp_CreateSnapshot_Handler,
		},
		{
			MethodName: "DeleteSnapshot",
			Handler:    _NetApp_DeleteSnapshot_Handler,
		},
		{
			MethodName: "UpdateSnapshot",
			Handler:    _NetApp_UpdateSnapshot_Handler,
		},
		{
			MethodName: "ListActiveDirectories",
			Handler:    _NetApp_ListActiveDirectories_Handler,
		},
		{
			MethodName: "GetActiveDirectory",
			Handler:    _NetApp_GetActiveDirectory_Handler,
		},
		{
			MethodName: "CreateActiveDirectory",
			Handler:    _NetApp_CreateActiveDirectory_Handler,
		},
		{
			MethodName: "UpdateActiveDirectory",
			Handler:    _NetApp_UpdateActiveDirectory_Handler,
		},
		{
			MethodName: "DeleteActiveDirectory",
			Handler:    _NetApp_DeleteActiveDirectory_Handler,
		},
		{
			MethodName: "ListKmsConfigs",
			Handler:    _NetApp_ListKmsConfigs_Handler,
		},
		{
			MethodName: "CreateKmsConfig",
			Handler:    _NetApp_CreateKmsConfig_Handler,
		},
		{
			MethodName: "GetKmsConfig",
			Handler:    _NetApp_GetKmsConfig_Handler,
		},
		{
			MethodName: "UpdateKmsConfig",
			Handler:    _NetApp_UpdateKmsConfig_Handler,
		},
		{
			MethodName: "EncryptVolumes",
			Handler:    _NetApp_EncryptVolumes_Handler,
		},
		{
			MethodName: "VerifyKmsConfig",
			Handler:    _NetApp_VerifyKmsConfig_Handler,
		},
		{
			MethodName: "DeleteKmsConfig",
			Handler:    _NetApp_DeleteKmsConfig_Handler,
		},
		{
			MethodName: "ListReplications",
			Handler:    _NetApp_ListReplications_Handler,
		},
		{
			MethodName: "GetReplication",
			Handler:    _NetApp_GetReplication_Handler,
		},
		{
			MethodName: "CreateReplication",
			Handler:    _NetApp_CreateReplication_Handler,
		},
		{
			MethodName: "DeleteReplication",
			Handler:    _NetApp_DeleteReplication_Handler,
		},
		{
			MethodName: "UpdateReplication",
			Handler:    _NetApp_UpdateReplication_Handler,
		},
		{
			MethodName: "StopReplication",
			Handler:    _NetApp_StopReplication_Handler,
		},
		{
			MethodName: "ResumeReplication",
			Handler:    _NetApp_ResumeReplication_Handler,
		},
		{
			MethodName: "ReverseReplicationDirection",
			Handler:    _NetApp_ReverseReplicationDirection_Handler,
		},
		{
			MethodName: "EstablishPeering",
			Handler:    _NetApp_EstablishPeering_Handler,
		},
		{
			MethodName: "SyncReplication",
			Handler:    _NetApp_SyncReplication_Handler,
		},
		{
			MethodName: "CreateBackupVault",
			Handler:    _NetApp_CreateBackupVault_Handler,
		},
		{
			MethodName: "GetBackupVault",
			Handler:    _NetApp_GetBackupVault_Handler,
		},
		{
			MethodName: "ListBackupVaults",
			Handler:    _NetApp_ListBackupVaults_Handler,
		},
		{
			MethodName: "UpdateBackupVault",
			Handler:    _NetApp_UpdateBackupVault_Handler,
		},
		{
			MethodName: "DeleteBackupVault",
			Handler:    _NetApp_DeleteBackupVault_Handler,
		},
		{
			MethodName: "CreateBackup",
			Handler:    _NetApp_CreateBackup_Handler,
		},
		{
			MethodName: "GetBackup",
			Handler:    _NetApp_GetBackup_Handler,
		},
		{
			MethodName: "ListBackups",
			Handler:    _NetApp_ListBackups_Handler,
		},
		{
			MethodName: "DeleteBackup",
			Handler:    _NetApp_DeleteBackup_Handler,
		},
		{
			MethodName: "UpdateBackup",
			Handler:    _NetApp_UpdateBackup_Handler,
		},
		{
			MethodName: "CreateBackupPolicy",
			Handler:    _NetApp_CreateBackupPolicy_Handler,
		},
		{
			MethodName: "GetBackupPolicy",
			Handler:    _NetApp_GetBackupPolicy_Handler,
		},
		{
			MethodName: "ListBackupPolicies",
			Handler:    _NetApp_ListBackupPolicies_Handler,
		},
		{
			MethodName: "UpdateBackupPolicy",
			Handler:    _NetApp_UpdateBackupPolicy_Handler,
		},
		{
			MethodName: "DeleteBackupPolicy",
			Handler:    _NetApp_DeleteBackupPolicy_Handler,
		},
		{
			MethodName: "ListQuotaRules",
			Handler:    _NetApp_ListQuotaRules_Handler,
		},
		{
			MethodName: "GetQuotaRule",
			Handler:    _NetApp_GetQuotaRule_Handler,
		},
		{
			MethodName: "CreateQuotaRule",
			Handler:    _NetApp_CreateQuotaRule_Handler,
		},
		{
			MethodName: "UpdateQuotaRule",
			Handler:    _NetApp_UpdateQuotaRule_Handler,
		},
		{
			MethodName: "DeleteQuotaRule",
			Handler:    _NetApp_DeleteQuotaRule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/netapp/v1/cloud_netapp_service.proto",
}
