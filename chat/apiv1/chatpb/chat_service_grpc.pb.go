// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/chat/v1/chat_service.proto

package chatpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ChatService_CreateMessage_FullMethodName                  = "/google.chat.v1.ChatService/CreateMessage"
	ChatService_ListMessages_FullMethodName                   = "/google.chat.v1.ChatService/ListMessages"
	ChatService_ListMemberships_FullMethodName                = "/google.chat.v1.ChatService/ListMemberships"
	ChatService_GetMembership_FullMethodName                  = "/google.chat.v1.ChatService/GetMembership"
	ChatService_GetMessage_FullMethodName                     = "/google.chat.v1.ChatService/GetMessage"
	ChatService_UpdateMessage_FullMethodName                  = "/google.chat.v1.ChatService/UpdateMessage"
	ChatService_DeleteMessage_FullMethodName                  = "/google.chat.v1.ChatService/DeleteMessage"
	ChatService_GetAttachment_FullMethodName                  = "/google.chat.v1.ChatService/GetAttachment"
	ChatService_UploadAttachment_FullMethodName               = "/google.chat.v1.ChatService/UploadAttachment"
	ChatService_ListSpaces_FullMethodName                     = "/google.chat.v1.ChatService/ListSpaces"
	ChatService_SearchSpaces_FullMethodName                   = "/google.chat.v1.ChatService/SearchSpaces"
	ChatService_GetSpace_FullMethodName                       = "/google.chat.v1.ChatService/GetSpace"
	ChatService_CreateSpace_FullMethodName                    = "/google.chat.v1.ChatService/CreateSpace"
	ChatService_SetUpSpace_FullMethodName                     = "/google.chat.v1.ChatService/SetUpSpace"
	ChatService_UpdateSpace_FullMethodName                    = "/google.chat.v1.ChatService/UpdateSpace"
	ChatService_DeleteSpace_FullMethodName                    = "/google.chat.v1.ChatService/DeleteSpace"
	ChatService_CompleteImportSpace_FullMethodName            = "/google.chat.v1.ChatService/CompleteImportSpace"
	ChatService_FindDirectMessage_FullMethodName              = "/google.chat.v1.ChatService/FindDirectMessage"
	ChatService_CreateMembership_FullMethodName               = "/google.chat.v1.ChatService/CreateMembership"
	ChatService_UpdateMembership_FullMethodName               = "/google.chat.v1.ChatService/UpdateMembership"
	ChatService_DeleteMembership_FullMethodName               = "/google.chat.v1.ChatService/DeleteMembership"
	ChatService_CreateReaction_FullMethodName                 = "/google.chat.v1.ChatService/CreateReaction"
	ChatService_ListReactions_FullMethodName                  = "/google.chat.v1.ChatService/ListReactions"
	ChatService_DeleteReaction_FullMethodName                 = "/google.chat.v1.ChatService/DeleteReaction"
	ChatService_CreateCustomEmoji_FullMethodName              = "/google.chat.v1.ChatService/CreateCustomEmoji"
	ChatService_GetCustomEmoji_FullMethodName                 = "/google.chat.v1.ChatService/GetCustomEmoji"
	ChatService_ListCustomEmojis_FullMethodName               = "/google.chat.v1.ChatService/ListCustomEmojis"
	ChatService_DeleteCustomEmoji_FullMethodName              = "/google.chat.v1.ChatService/DeleteCustomEmoji"
	ChatService_GetSpaceReadState_FullMethodName              = "/google.chat.v1.ChatService/GetSpaceReadState"
	ChatService_UpdateSpaceReadState_FullMethodName           = "/google.chat.v1.ChatService/UpdateSpaceReadState"
	ChatService_GetThreadReadState_FullMethodName             = "/google.chat.v1.ChatService/GetThreadReadState"
	ChatService_GetSpaceEvent_FullMethodName                  = "/google.chat.v1.ChatService/GetSpaceEvent"
	ChatService_ListSpaceEvents_FullMethodName                = "/google.chat.v1.ChatService/ListSpaceEvents"
	ChatService_GetSpaceNotificationSetting_FullMethodName    = "/google.chat.v1.ChatService/GetSpaceNotificationSetting"
	ChatService_UpdateSpaceNotificationSetting_FullMethodName = "/google.chat.v1.ChatService/UpdateSpaceNotificationSetting"
)

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatServiceClient interface {
	// Creates a message in a Google Chat space. For an example, see [Send a
	// message](https://developers.google.com/workspace/chat/create-messages).
	//
	// The `create()` method requires either [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
	// or [app
	// authentication](https://developers.google.com/workspace/chat/authorize-import).
	// Chat attributes the message sender differently depending on the type of
	// authentication that you use in your request.
	//
	// The following image shows how Chat attributes a message when you use app
	// authentication. Chat displays the Chat app as the message
	// sender. The content of the message can contain text (`text`), cards
	// (`cardsV2`), and accessory widgets (`accessoryWidgets`).
	//
	// ![Message sent with app
	// authentication](https://developers.google.com/workspace/chat/images/message-app-auth.svg)
	//
	// The following image shows how Chat attributes a message when you use user
	// authentication. Chat displays the user as the message sender and attributes
	// the Chat app to the message by displaying its name. The content of message
	// can only contain text (`text`).
	//
	// ![Message sent with user
	// authentication](https://developers.google.com/workspace/chat/images/message-user-auth.svg)
	//
	// The maximum message size, including the message contents, is 32,000 bytes.
	//
	// For
	// [webhook](https://developers.google.com/workspace/chat/quickstart/webhooks)
	// requests, the response doesn't contain the full message. The response only
	// populates the `name` and `thread.name` fields in addition to the
	// information that was in the request.
	CreateMessage(ctx context.Context, in *CreateMessageRequest, opts ...grpc.CallOption) (*Message, error)
	// Lists messages in a space that the caller is a member of, including
	// messages from blocked members and spaces. If you list messages from a
	// space with no messages, the response is an empty object. When using a
	// REST/HTTP interface, the response contains an empty JSON object, `{}`.
	// For an example, see
	// [List
	// messages](https://developers.google.com/workspace/chat/api/guides/v1/messages/list).
	//
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	ListMessages(ctx context.Context, in *ListMessagesRequest, opts ...grpc.CallOption) (*ListMessagesResponse, error)
	// Lists memberships in a space. For an example, see [List users and Google
	// Chat apps in a
	// space](https://developers.google.com/workspace/chat/list-members). Listing
	// memberships with [app
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
	// lists memberships in spaces that the Chat app has
	// access to, but excludes Chat app memberships,
	// including its own. Listing memberships with
	// [User
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
	// lists memberships in spaces that the authenticated user has access to.
	//
	// Supports the following types of
	// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
	//
	// - [App
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
	//
	// - [User
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
	// You can authenticate and authorize this method with administrator
	// privileges by setting the `use_admin_access` field in the request.
	ListMemberships(ctx context.Context, in *ListMembershipsRequest, opts ...grpc.CallOption) (*ListMembershipsResponse, error)
	// Returns details about a membership. For an example, see
	// [Get details about a user's or Google Chat app's
	// membership](https://developers.google.com/workspace/chat/get-members).
	//
	// Supports the following types of
	// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
	//
	// - [App
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
	//
	// - [User
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
	// You can authenticate and authorize this method with administrator
	// privileges by setting the `use_admin_access` field in the request.
	GetMembership(ctx context.Context, in *GetMembershipRequest, opts ...grpc.CallOption) (*Membership, error)
	// Returns details about a message.
	// For an example, see [Get details about a
	// message](https://developers.google.com/workspace/chat/get-messages).
	//
	// Supports the following types of
	// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
	//
	// - [App
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
	//
	// - [User
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
	//
	// Note: Might return a message from a blocked member or space.
	GetMessage(ctx context.Context, in *GetMessageRequest, opts ...grpc.CallOption) (*Message, error)
	// Updates a message. There's a difference between the `patch` and `update`
	// methods. The `patch`
	// method uses a `patch` request while the `update` method uses a `put`
	// request. We recommend using the `patch` method. For an example, see
	// [Update a
	// message](https://developers.google.com/workspace/chat/update-messages).
	//
	// Supports the following types of
	// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
	//
	// - [App
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
	//
	// - [User
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
	//
	// When using app authentication, requests can only update messages
	// created by the calling Chat app.
	UpdateMessage(ctx context.Context, in *UpdateMessageRequest, opts ...grpc.CallOption) (*Message, error)
	// Deletes a message.
	// For an example, see [Delete a
	// message](https://developers.google.com/workspace/chat/delete-messages).
	//
	// Supports the following types of
	// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
	//
	// - [App
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
	//
	// - [User
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
	//
	// When using app authentication, requests can only delete messages
	// created by the calling Chat app.
	DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Gets the metadata of a message attachment. The attachment data is fetched
	// using the [media
	// API](https://developers.google.com/workspace/chat/api/reference/rest/v1/media/download).
	// For an example, see
	// [Get metadata about a message
	// attachment](https://developers.google.com/workspace/chat/get-media-attachments).
	// Requires [app
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app).
	GetAttachment(ctx context.Context, in *GetAttachmentRequest, opts ...grpc.CallOption) (*Attachment, error)
	// Uploads an attachment. For an example, see
	// [Upload media as a file
	// attachment](https://developers.google.com/workspace/chat/upload-media-attachments).
	//
	// Requires user
	// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	//
	// You can upload attachments up to 200 MB. Certain file types aren't
	// supported. For details, see [File types blocked by Google
	// Chat](https://support.google.com/chat/answer/7651457?&co=GENIE.Platform%3DDesktop#File%20types%20blocked%20in%20Google%20Chat).
	UploadAttachment(ctx context.Context, in *UploadAttachmentRequest, opts ...grpc.CallOption) (*UploadAttachmentResponse, error)
	// Lists spaces the caller is a member of. Group chats and DMs aren't listed
	// until the first message is sent. For an example, see
	// [List
	// spaces](https://developers.google.com/workspace/chat/list-spaces).
	//
	// Supports the following types of
	// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
	//
	// - [App
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
	//
	// - [User
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
	//
	// To list all named spaces by Google Workspace organization, use the
	// [`spaces.search()`](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces/search)
	// method using Workspace administrator privileges instead.
	ListSpaces(ctx context.Context, in *ListSpacesRequest, opts ...grpc.CallOption) (*ListSpacesResponse, error)
	// Returns a list of spaces in a Google Workspace organization based on an
	// administrator's search.
	//
	// Requires [user
	// authentication with administrator
	// privileges](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user#admin-privileges).
	// In the request, set `use_admin_access` to `true`.
	SearchSpaces(ctx context.Context, in *SearchSpacesRequest, opts ...grpc.CallOption) (*SearchSpacesResponse, error)
	// Returns details about a space. For an example, see
	// [Get details about a
	// space](https://developers.google.com/workspace/chat/get-spaces).
	//
	// Supports the following types of
	// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
	//
	// - [App
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
	//
	// - [User
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
	// You can authenticate and authorize this method with administrator
	// privileges by setting the `use_admin_access` field in the request.
	GetSpace(ctx context.Context, in *GetSpaceRequest, opts ...grpc.CallOption) (*Space, error)
	// Creates a space with no members. Can be used to create a named space, or a
	// group chat in `Import mode`. For an example, see [Create a
	// space](https://developers.google.com/workspace/chat/create-spaces).
	//
	//	If you receive the error message `ALREADY_EXISTS` when creating
	//	a space, try a different `displayName`. An existing space within
	//	the Google Workspace organization might already use this display name.
	//
	// Supports the following types of
	// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
	//
	// - [App
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
	// with [administrator approval](https://support.google.com/a?p=chat-app-auth)
	// in [Developer Preview](https://developers.google.com/workspace/preview)
	//
	// - [User
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
	//
	// When authenticating as an app, the `space.customer` field must be set in
	// the request.
	CreateSpace(ctx context.Context, in *CreateSpaceRequest, opts ...grpc.CallOption) (*Space, error)
	// Creates a space and adds specified users to it. The calling user is
	// automatically added to the space, and shouldn't be specified as a
	// membership in the request. For an example, see
	// [Set up a space with initial
	// members](https://developers.google.com/workspace/chat/set-up-spaces).
	//
	// To specify the human members to add, add memberships with the appropriate
	// `membership.member.name`. To add a human user, use `users/{user}`, where
	// `{user}` can be the email address for the user. For users in the same
	// Workspace organization `{user}` can also be the `id` for the person from
	// the People API, or the `id` for the user in the Directory API. For example,
	// if the People API Person profile ID for `user@example.com` is `123456789`,
	// you can add the user to the space by setting the `membership.member.name`
	// to `users/user@example.com` or `users/123456789`.
	//
	// To specify the Google groups to add, add memberships with the
	// appropriate `membership.group_member.name`. To add or invite a Google
	// group, use `groups/{group}`, where `{group}` is the `id` for the group from
	// the Cloud Identity Groups API. For example, you can use [Cloud Identity
	// Groups lookup
	// API](https://cloud.google.com/identity/docs/reference/rest/v1/groups/lookup)
	// to retrieve the ID `123456789` for group email `group@example.com`, then
	// you can add the group to the space by setting the
	// `membership.group_member.name` to `groups/123456789`. Group email is not
	// supported, and Google groups can only be added as members in named spaces.
	//
	// For a named space or group chat, if the caller blocks, or is blocked
	// by some members, or doesn't have permission to add some members, then
	// those members aren't added to the created space.
	//
	// To create a direct message (DM) between the calling user and another human
	// user, specify exactly one membership to represent the human user. If
	// one user blocks the other, the request fails and the DM isn't created.
	//
	// To create a DM between the calling user and the calling app, set
	// `Space.singleUserBotDm` to `true` and don't specify any memberships. You
	// can only use this method to set up a DM with the calling app. To add the
	// calling app as a member of a space or an existing DM between two human
	// users, see
	// [Invite or add a user or app to a
	// space](https://developers.google.com/workspace/chat/create-members).
	//
	// If a DM already exists between two users, even when one user blocks the
	// other at the time a request is made, then the existing DM is returned.
	//
	// Spaces with threaded replies aren't supported. If you receive the error
	// message `ALREADY_EXISTS` when setting up a space, try a different
	// `displayName`. An existing space within the Google Workspace organization
	// might already use this display name.
	//
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	SetUpSpace(ctx context.Context, in *SetUpSpaceRequest, opts ...grpc.CallOption) (*Space, error)
	// Updates a space. For an example, see
	// [Update a
	// space](https://developers.google.com/workspace/chat/update-spaces).
	//
	// If you're updating the `displayName` field and receive the error message
	// `ALREADY_EXISTS`, try a different display name.. An existing space within
	// the Google Workspace organization might already use this display name.
	//
	// Supports the following types of
	// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
	//
	// - [App
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
	// with [administrator approval](https://support.google.com/a?p=chat-app-auth)
	// in [Developer Preview](https://developers.google.com/workspace/preview)
	//
	// - [User
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
	// You can authenticate and authorize this method with administrator
	// privileges by setting the `use_admin_access` field in the request.
	UpdateSpace(ctx context.Context, in *UpdateSpaceRequest, opts ...grpc.CallOption) (*Space, error)
	// Deletes a named space. Always performs a cascading delete, which means
	// that the space's child resources—like messages posted in the space and
	// memberships in the space—are also deleted. For an example, see
	// [Delete a
	// space](https://developers.google.com/workspace/chat/delete-spaces).
	//
	// Supports the following types of
	// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
	//
	// - [App
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
	// with [administrator approval](https://support.google.com/a?p=chat-app-auth)
	// in [Developer Preview](https://developers.google.com/workspace/preview)
	//
	// - [User
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
	// You can authenticate and authorize this method with administrator
	// privileges by setting the `use_admin_access` field in the request.
	DeleteSpace(ctx context.Context, in *DeleteSpaceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Completes the
	// [import process](https://developers.google.com/workspace/chat/import-data)
	// for the specified space and makes it visible to users.
	//
	// Requires [app
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
	// and domain-wide delegation. For more information, see [Authorize Google
	// Chat apps to import
	// data](https://developers.google.com/workspace/chat/authorize-import).
	CompleteImportSpace(ctx context.Context, in *CompleteImportSpaceRequest, opts ...grpc.CallOption) (*CompleteImportSpaceResponse, error)
	// Returns the existing direct message with the specified user. If no direct
	// message space is found, returns a `404 NOT_FOUND` error. For an example,
	// see
	// [Find a direct message](/chat/api/guides/v1/spaces/find-direct-message).
	//
	// With [app
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app),
	// returns the direct message space between the specified user and the calling
	// Chat app.
	//
	// With [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user),
	// returns the direct message space between the specified user and the
	// authenticated user.
	//
	// // Supports the following types of
	// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
	//
	// - [App
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
	//
	// - [User
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
	FindDirectMessage(ctx context.Context, in *FindDirectMessageRequest, opts ...grpc.CallOption) (*Space, error)
	// Creates a membership for the calling Chat app, a user, or a Google Group.
	// Creating memberships for other Chat apps isn't supported.
	// When creating a membership, if the specified member has their auto-accept
	// policy turned off, then they're invited, and must accept the space
	// invitation before joining. Otherwise, creating a membership adds the member
	// directly to the specified space.
	//
	// Supports the following types of
	// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
	//
	// - [App
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
	// with [administrator approval](https://support.google.com/a?p=chat-app-auth)
	// in [Developer Preview](https://developers.google.com/workspace/preview)
	//
	// - [User
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
	// You can authenticate and authorize this method with administrator
	// privileges by setting the `use_admin_access` field in the request.
	//
	// For example usage, see:
	//
	// - [Invite or add a user to a
	// space](https://developers.google.com/workspace/chat/create-members#create-user-membership).
	//
	// - [Invite or add a Google Group to a
	// space](https://developers.google.com/workspace/chat/create-members#create-group-membership).
	//
	// - [Add the Chat app to a
	// space](https://developers.google.com/workspace/chat/create-members#create-membership-calling-api).
	CreateMembership(ctx context.Context, in *CreateMembershipRequest, opts ...grpc.CallOption) (*Membership, error)
	// Updates a membership. For an example, see [Update a user's membership in
	// a space](https://developers.google.com/workspace/chat/update-members).
	//
	// Supports the following types of
	// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
	//
	// - [App
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
	// with [administrator approval](https://support.google.com/a?p=chat-app-auth)
	// in [Developer Preview](https://developers.google.com/workspace/preview)
	//
	// - [User
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
	// You can authenticate and authorize this method with administrator
	// privileges by setting the `use_admin_access` field in the request.
	UpdateMembership(ctx context.Context, in *UpdateMembershipRequest, opts ...grpc.CallOption) (*Membership, error)
	// Deletes a membership. For an example, see
	// [Remove a user or a Google Chat app from a
	// space](https://developers.google.com/workspace/chat/delete-members).
	//
	// Supports the following types of
	// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
	//
	// - [App
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
	// with [administrator approval](https://support.google.com/a?p=chat-app-auth)
	// in [Developer Preview](https://developers.google.com/workspace/preview)
	//
	// - [User
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
	// You can authenticate and authorize this method with administrator
	// privileges by setting the `use_admin_access` field in the request.
	DeleteMembership(ctx context.Context, in *DeleteMembershipRequest, opts ...grpc.CallOption) (*Membership, error)
	// Creates a reaction and adds it to a message. For an example, see
	// [Add a reaction to a
	// message](https://developers.google.com/workspace/chat/create-reactions).
	//
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	CreateReaction(ctx context.Context, in *CreateReactionRequest, opts ...grpc.CallOption) (*Reaction, error)
	// Lists reactions to a message. For an example, see
	// [List reactions for a
	// message](https://developers.google.com/workspace/chat/list-reactions).
	//
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	ListReactions(ctx context.Context, in *ListReactionsRequest, opts ...grpc.CallOption) (*ListReactionsResponse, error)
	// Deletes a reaction to a message. For an example, see
	// [Delete a
	// reaction](https://developers.google.com/workspace/chat/delete-reactions).
	//
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	DeleteReaction(ctx context.Context, in *DeleteReactionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Creates a custom emoji.
	//
	// Custom emojis are only available for Google Workspace accounts, and the
	// administrator must turn custom emojis on for the organization. For more
	// information, see [Learn about custom emojis in Google
	// Chat](https://support.google.com/chat/answer/12800149) and
	// [Manage custom emoji
	// permissions](https://support.google.com/a/answer/12850085).
	//
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	CreateCustomEmoji(ctx context.Context, in *CreateCustomEmojiRequest, opts ...grpc.CallOption) (*CustomEmoji, error)
	// Returns details about a custom emoji.
	//
	// Custom emojis are only available for Google Workspace accounts, and the
	// administrator must turn custom emojis on for the organization. For more
	// information, see [Learn about custom emojis in Google
	// Chat](https://support.google.com/chat/answer/12800149) and
	// [Manage custom emoji
	// permissions](https://support.google.com/a/answer/12850085).
	//
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	GetCustomEmoji(ctx context.Context, in *GetCustomEmojiRequest, opts ...grpc.CallOption) (*CustomEmoji, error)
	// Lists custom emojis visible to the authenticated user.
	//
	// Custom emojis are only available for Google Workspace accounts, and the
	// administrator must turn custom emojis on for the organization. For more
	// information, see [Learn about custom emojis in Google
	// Chat](https://support.google.com/chat/answer/12800149) and
	// [Manage custom emoji
	// permissions](https://support.google.com/a/answer/12850085).
	//
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	ListCustomEmojis(ctx context.Context, in *ListCustomEmojisRequest, opts ...grpc.CallOption) (*ListCustomEmojisResponse, error)
	// Deletes a custom emoji. By default, users can only delete custom emoji they
	// created. [Emoji managers](https://support.google.com/a/answer/12850085)
	// assigned by the administrator can delete any custom emoji in the
	// organization. See [Learn about custom emojis in Google
	// Chat](https://support.google.com/chat/answer/12800149).
	//
	// Custom emojis are only available for Google Workspace accounts, and the
	// administrator must turn custom emojis on for the organization. For more
	// information, see [Learn about custom emojis in Google
	// Chat](https://support.google.com/chat/answer/12800149) and
	// [Manage custom emoji
	// permissions](https://support.google.com/a/answer/12850085).
	//
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	DeleteCustomEmoji(ctx context.Context, in *DeleteCustomEmojiRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Returns details about a user's read state within a space, used to identify
	// read and unread messages. For an example, see [Get details about a user's
	// space read
	// state](https://developers.google.com/workspace/chat/get-space-read-state).
	//
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	GetSpaceReadState(ctx context.Context, in *GetSpaceReadStateRequest, opts ...grpc.CallOption) (*SpaceReadState, error)
	// Updates a user's read state within a space, used to identify read and
	// unread messages. For an example, see [Update a user's space read
	// state](https://developers.google.com/workspace/chat/update-space-read-state).
	//
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	UpdateSpaceReadState(ctx context.Context, in *UpdateSpaceReadStateRequest, opts ...grpc.CallOption) (*SpaceReadState, error)
	// Returns details about a user's read state within a thread, used to identify
	// read and unread messages. For an example, see [Get details about a user's
	// thread read
	// state](https://developers.google.com/workspace/chat/get-thread-read-state).
	//
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	GetThreadReadState(ctx context.Context, in *GetThreadReadStateRequest, opts ...grpc.CallOption) (*ThreadReadState, error)
	// Returns an event from a Google Chat space. The [event
	// payload](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.spaceEvents#SpaceEvent.FIELDS.oneof_payload)
	// contains the most recent version of the resource that changed. For example,
	// if you request an event about a new message but the message was later
	// updated, the server returns the updated `Message` resource in the event
	// payload.
	//
	// Note: The `permissionSettings` field is not returned in the Space
	// object of the Space event data for this request.
	//
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	// To get an event, the authenticated user must be a member of the space.
	//
	// For an example, see [Get details about an
	// event from a Google Chat
	// space](https://developers.google.com/workspace/chat/get-space-event).
	GetSpaceEvent(ctx context.Context, in *GetSpaceEventRequest, opts ...grpc.CallOption) (*SpaceEvent, error)
	// Lists events from a Google Chat space. For each event, the
	// [payload](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.spaceEvents#SpaceEvent.FIELDS.oneof_payload)
	// contains the most recent version of the Chat resource. For example, if you
	// list events about new space members, the server returns `Membership`
	// resources that contain the latest membership details. If new members were
	// removed during the requested period, the event payload contains an empty
	// `Membership` resource.
	//
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	// To list events, the authenticated user must be a member of the space.
	//
	// For an example, see [List events from a Google Chat
	// space](https://developers.google.com/workspace/chat/list-space-events).
	ListSpaceEvents(ctx context.Context, in *ListSpaceEventsRequest, opts ...grpc.CallOption) (*ListSpaceEventsResponse, error)
	// Gets the space notification setting. For an example, see [Get the
	// caller's space notification
	// setting](https://developers.google.com/workspace/chat/get-space-notification-setting).
	//
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	GetSpaceNotificationSetting(ctx context.Context, in *GetSpaceNotificationSettingRequest, opts ...grpc.CallOption) (*SpaceNotificationSetting, error)
	// Updates the space notification setting. For an example, see [Update
	// the caller's space notification
	// setting](https://developers.google.com/workspace/chat/update-space-notification-setting).
	//
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	UpdateSpaceNotificationSetting(ctx context.Context, in *UpdateSpaceNotificationSettingRequest, opts ...grpc.CallOption) (*SpaceNotificationSetting, error)
}

type chatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceClient(cc grpc.ClientConnInterface) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) CreateMessage(ctx context.Context, in *CreateMessageRequest, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, ChatService_CreateMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ListMessages(ctx context.Context, in *ListMessagesRequest, opts ...grpc.CallOption) (*ListMessagesResponse, error) {
	out := new(ListMessagesResponse)
	err := c.cc.Invoke(ctx, ChatService_ListMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ListMemberships(ctx context.Context, in *ListMembershipsRequest, opts ...grpc.CallOption) (*ListMembershipsResponse, error) {
	out := new(ListMembershipsResponse)
	err := c.cc.Invoke(ctx, ChatService_ListMemberships_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetMembership(ctx context.Context, in *GetMembershipRequest, opts ...grpc.CallOption) (*Membership, error) {
	out := new(Membership)
	err := c.cc.Invoke(ctx, ChatService_GetMembership_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetMessage(ctx context.Context, in *GetMessageRequest, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, ChatService_GetMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) UpdateMessage(ctx context.Context, in *UpdateMessageRequest, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, ChatService_UpdateMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ChatService_DeleteMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetAttachment(ctx context.Context, in *GetAttachmentRequest, opts ...grpc.CallOption) (*Attachment, error) {
	out := new(Attachment)
	err := c.cc.Invoke(ctx, ChatService_GetAttachment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) UploadAttachment(ctx context.Context, in *UploadAttachmentRequest, opts ...grpc.CallOption) (*UploadAttachmentResponse, error) {
	out := new(UploadAttachmentResponse)
	err := c.cc.Invoke(ctx, ChatService_UploadAttachment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ListSpaces(ctx context.Context, in *ListSpacesRequest, opts ...grpc.CallOption) (*ListSpacesResponse, error) {
	out := new(ListSpacesResponse)
	err := c.cc.Invoke(ctx, ChatService_ListSpaces_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) SearchSpaces(ctx context.Context, in *SearchSpacesRequest, opts ...grpc.CallOption) (*SearchSpacesResponse, error) {
	out := new(SearchSpacesResponse)
	err := c.cc.Invoke(ctx, ChatService_SearchSpaces_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetSpace(ctx context.Context, in *GetSpaceRequest, opts ...grpc.CallOption) (*Space, error) {
	out := new(Space)
	err := c.cc.Invoke(ctx, ChatService_GetSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) CreateSpace(ctx context.Context, in *CreateSpaceRequest, opts ...grpc.CallOption) (*Space, error) {
	out := new(Space)
	err := c.cc.Invoke(ctx, ChatService_CreateSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) SetUpSpace(ctx context.Context, in *SetUpSpaceRequest, opts ...grpc.CallOption) (*Space, error) {
	out := new(Space)
	err := c.cc.Invoke(ctx, ChatService_SetUpSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) UpdateSpace(ctx context.Context, in *UpdateSpaceRequest, opts ...grpc.CallOption) (*Space, error) {
	out := new(Space)
	err := c.cc.Invoke(ctx, ChatService_UpdateSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) DeleteSpace(ctx context.Context, in *DeleteSpaceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ChatService_DeleteSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) CompleteImportSpace(ctx context.Context, in *CompleteImportSpaceRequest, opts ...grpc.CallOption) (*CompleteImportSpaceResponse, error) {
	out := new(CompleteImportSpaceResponse)
	err := c.cc.Invoke(ctx, ChatService_CompleteImportSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) FindDirectMessage(ctx context.Context, in *FindDirectMessageRequest, opts ...grpc.CallOption) (*Space, error) {
	out := new(Space)
	err := c.cc.Invoke(ctx, ChatService_FindDirectMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) CreateMembership(ctx context.Context, in *CreateMembershipRequest, opts ...grpc.CallOption) (*Membership, error) {
	out := new(Membership)
	err := c.cc.Invoke(ctx, ChatService_CreateMembership_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) UpdateMembership(ctx context.Context, in *UpdateMembershipRequest, opts ...grpc.CallOption) (*Membership, error) {
	out := new(Membership)
	err := c.cc.Invoke(ctx, ChatService_UpdateMembership_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) DeleteMembership(ctx context.Context, in *DeleteMembershipRequest, opts ...grpc.CallOption) (*Membership, error) {
	out := new(Membership)
	err := c.cc.Invoke(ctx, ChatService_DeleteMembership_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) CreateReaction(ctx context.Context, in *CreateReactionRequest, opts ...grpc.CallOption) (*Reaction, error) {
	out := new(Reaction)
	err := c.cc.Invoke(ctx, ChatService_CreateReaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ListReactions(ctx context.Context, in *ListReactionsRequest, opts ...grpc.CallOption) (*ListReactionsResponse, error) {
	out := new(ListReactionsResponse)
	err := c.cc.Invoke(ctx, ChatService_ListReactions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) DeleteReaction(ctx context.Context, in *DeleteReactionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ChatService_DeleteReaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) CreateCustomEmoji(ctx context.Context, in *CreateCustomEmojiRequest, opts ...grpc.CallOption) (*CustomEmoji, error) {
	out := new(CustomEmoji)
	err := c.cc.Invoke(ctx, ChatService_CreateCustomEmoji_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetCustomEmoji(ctx context.Context, in *GetCustomEmojiRequest, opts ...grpc.CallOption) (*CustomEmoji, error) {
	out := new(CustomEmoji)
	err := c.cc.Invoke(ctx, ChatService_GetCustomEmoji_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ListCustomEmojis(ctx context.Context, in *ListCustomEmojisRequest, opts ...grpc.CallOption) (*ListCustomEmojisResponse, error) {
	out := new(ListCustomEmojisResponse)
	err := c.cc.Invoke(ctx, ChatService_ListCustomEmojis_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) DeleteCustomEmoji(ctx context.Context, in *DeleteCustomEmojiRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ChatService_DeleteCustomEmoji_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetSpaceReadState(ctx context.Context, in *GetSpaceReadStateRequest, opts ...grpc.CallOption) (*SpaceReadState, error) {
	out := new(SpaceReadState)
	err := c.cc.Invoke(ctx, ChatService_GetSpaceReadState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) UpdateSpaceReadState(ctx context.Context, in *UpdateSpaceReadStateRequest, opts ...grpc.CallOption) (*SpaceReadState, error) {
	out := new(SpaceReadState)
	err := c.cc.Invoke(ctx, ChatService_UpdateSpaceReadState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetThreadReadState(ctx context.Context, in *GetThreadReadStateRequest, opts ...grpc.CallOption) (*ThreadReadState, error) {
	out := new(ThreadReadState)
	err := c.cc.Invoke(ctx, ChatService_GetThreadReadState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetSpaceEvent(ctx context.Context, in *GetSpaceEventRequest, opts ...grpc.CallOption) (*SpaceEvent, error) {
	out := new(SpaceEvent)
	err := c.cc.Invoke(ctx, ChatService_GetSpaceEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ListSpaceEvents(ctx context.Context, in *ListSpaceEventsRequest, opts ...grpc.CallOption) (*ListSpaceEventsResponse, error) {
	out := new(ListSpaceEventsResponse)
	err := c.cc.Invoke(ctx, ChatService_ListSpaceEvents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetSpaceNotificationSetting(ctx context.Context, in *GetSpaceNotificationSettingRequest, opts ...grpc.CallOption) (*SpaceNotificationSetting, error) {
	out := new(SpaceNotificationSetting)
	err := c.cc.Invoke(ctx, ChatService_GetSpaceNotificationSetting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) UpdateSpaceNotificationSetting(ctx context.Context, in *UpdateSpaceNotificationSettingRequest, opts ...grpc.CallOption) (*SpaceNotificationSetting, error) {
	out := new(SpaceNotificationSetting)
	err := c.cc.Invoke(ctx, ChatService_UpdateSpaceNotificationSetting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServiceServer is the server API for ChatService service.
// All implementations should embed UnimplementedChatServiceServer
// for forward compatibility
type ChatServiceServer interface {
	// Creates a message in a Google Chat space. For an example, see [Send a
	// message](https://developers.google.com/workspace/chat/create-messages).
	//
	// The `create()` method requires either [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
	// or [app
	// authentication](https://developers.google.com/workspace/chat/authorize-import).
	// Chat attributes the message sender differently depending on the type of
	// authentication that you use in your request.
	//
	// The following image shows how Chat attributes a message when you use app
	// authentication. Chat displays the Chat app as the message
	// sender. The content of the message can contain text (`text`), cards
	// (`cardsV2`), and accessory widgets (`accessoryWidgets`).
	//
	// ![Message sent with app
	// authentication](https://developers.google.com/workspace/chat/images/message-app-auth.svg)
	//
	// The following image shows how Chat attributes a message when you use user
	// authentication. Chat displays the user as the message sender and attributes
	// the Chat app to the message by displaying its name. The content of message
	// can only contain text (`text`).
	//
	// ![Message sent with user
	// authentication](https://developers.google.com/workspace/chat/images/message-user-auth.svg)
	//
	// The maximum message size, including the message contents, is 32,000 bytes.
	//
	// For
	// [webhook](https://developers.google.com/workspace/chat/quickstart/webhooks)
	// requests, the response doesn't contain the full message. The response only
	// populates the `name` and `thread.name` fields in addition to the
	// information that was in the request.
	CreateMessage(context.Context, *CreateMessageRequest) (*Message, error)
	// Lists messages in a space that the caller is a member of, including
	// messages from blocked members and spaces. If you list messages from a
	// space with no messages, the response is an empty object. When using a
	// REST/HTTP interface, the response contains an empty JSON object, `{}`.
	// For an example, see
	// [List
	// messages](https://developers.google.com/workspace/chat/api/guides/v1/messages/list).
	//
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	ListMessages(context.Context, *ListMessagesRequest) (*ListMessagesResponse, error)
	// Lists memberships in a space. For an example, see [List users and Google
	// Chat apps in a
	// space](https://developers.google.com/workspace/chat/list-members). Listing
	// memberships with [app
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
	// lists memberships in spaces that the Chat app has
	// access to, but excludes Chat app memberships,
	// including its own. Listing memberships with
	// [User
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
	// lists memberships in spaces that the authenticated user has access to.
	//
	// Supports the following types of
	// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
	//
	// - [App
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
	//
	// - [User
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
	// You can authenticate and authorize this method with administrator
	// privileges by setting the `use_admin_access` field in the request.
	ListMemberships(context.Context, *ListMembershipsRequest) (*ListMembershipsResponse, error)
	// Returns details about a membership. For an example, see
	// [Get details about a user's or Google Chat app's
	// membership](https://developers.google.com/workspace/chat/get-members).
	//
	// Supports the following types of
	// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
	//
	// - [App
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
	//
	// - [User
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
	// You can authenticate and authorize this method with administrator
	// privileges by setting the `use_admin_access` field in the request.
	GetMembership(context.Context, *GetMembershipRequest) (*Membership, error)
	// Returns details about a message.
	// For an example, see [Get details about a
	// message](https://developers.google.com/workspace/chat/get-messages).
	//
	// Supports the following types of
	// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
	//
	// - [App
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
	//
	// - [User
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
	//
	// Note: Might return a message from a blocked member or space.
	GetMessage(context.Context, *GetMessageRequest) (*Message, error)
	// Updates a message. There's a difference between the `patch` and `update`
	// methods. The `patch`
	// method uses a `patch` request while the `update` method uses a `put`
	// request. We recommend using the `patch` method. For an example, see
	// [Update a
	// message](https://developers.google.com/workspace/chat/update-messages).
	//
	// Supports the following types of
	// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
	//
	// - [App
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
	//
	// - [User
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
	//
	// When using app authentication, requests can only update messages
	// created by the calling Chat app.
	UpdateMessage(context.Context, *UpdateMessageRequest) (*Message, error)
	// Deletes a message.
	// For an example, see [Delete a
	// message](https://developers.google.com/workspace/chat/delete-messages).
	//
	// Supports the following types of
	// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
	//
	// - [App
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
	//
	// - [User
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
	//
	// When using app authentication, requests can only delete messages
	// created by the calling Chat app.
	DeleteMessage(context.Context, *DeleteMessageRequest) (*emptypb.Empty, error)
	// Gets the metadata of a message attachment. The attachment data is fetched
	// using the [media
	// API](https://developers.google.com/workspace/chat/api/reference/rest/v1/media/download).
	// For an example, see
	// [Get metadata about a message
	// attachment](https://developers.google.com/workspace/chat/get-media-attachments).
	// Requires [app
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app).
	GetAttachment(context.Context, *GetAttachmentRequest) (*Attachment, error)
	// Uploads an attachment. For an example, see
	// [Upload media as a file
	// attachment](https://developers.google.com/workspace/chat/upload-media-attachments).
	//
	// Requires user
	// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	//
	// You can upload attachments up to 200 MB. Certain file types aren't
	// supported. For details, see [File types blocked by Google
	// Chat](https://support.google.com/chat/answer/7651457?&co=GENIE.Platform%3DDesktop#File%20types%20blocked%20in%20Google%20Chat).
	UploadAttachment(context.Context, *UploadAttachmentRequest) (*UploadAttachmentResponse, error)
	// Lists spaces the caller is a member of. Group chats and DMs aren't listed
	// until the first message is sent. For an example, see
	// [List
	// spaces](https://developers.google.com/workspace/chat/list-spaces).
	//
	// Supports the following types of
	// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
	//
	// - [App
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
	//
	// - [User
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
	//
	// To list all named spaces by Google Workspace organization, use the
	// [`spaces.search()`](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces/search)
	// method using Workspace administrator privileges instead.
	ListSpaces(context.Context, *ListSpacesRequest) (*ListSpacesResponse, error)
	// Returns a list of spaces in a Google Workspace organization based on an
	// administrator's search.
	//
	// Requires [user
	// authentication with administrator
	// privileges](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user#admin-privileges).
	// In the request, set `use_admin_access` to `true`.
	SearchSpaces(context.Context, *SearchSpacesRequest) (*SearchSpacesResponse, error)
	// Returns details about a space. For an example, see
	// [Get details about a
	// space](https://developers.google.com/workspace/chat/get-spaces).
	//
	// Supports the following types of
	// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
	//
	// - [App
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
	//
	// - [User
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
	// You can authenticate and authorize this method with administrator
	// privileges by setting the `use_admin_access` field in the request.
	GetSpace(context.Context, *GetSpaceRequest) (*Space, error)
	// Creates a space with no members. Can be used to create a named space, or a
	// group chat in `Import mode`. For an example, see [Create a
	// space](https://developers.google.com/workspace/chat/create-spaces).
	//
	//	If you receive the error message `ALREADY_EXISTS` when creating
	//	a space, try a different `displayName`. An existing space within
	//	the Google Workspace organization might already use this display name.
	//
	// Supports the following types of
	// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
	//
	// - [App
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
	// with [administrator approval](https://support.google.com/a?p=chat-app-auth)
	// in [Developer Preview](https://developers.google.com/workspace/preview)
	//
	// - [User
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
	//
	// When authenticating as an app, the `space.customer` field must be set in
	// the request.
	CreateSpace(context.Context, *CreateSpaceRequest) (*Space, error)
	// Creates a space and adds specified users to it. The calling user is
	// automatically added to the space, and shouldn't be specified as a
	// membership in the request. For an example, see
	// [Set up a space with initial
	// members](https://developers.google.com/workspace/chat/set-up-spaces).
	//
	// To specify the human members to add, add memberships with the appropriate
	// `membership.member.name`. To add a human user, use `users/{user}`, where
	// `{user}` can be the email address for the user. For users in the same
	// Workspace organization `{user}` can also be the `id` for the person from
	// the People API, or the `id` for the user in the Directory API. For example,
	// if the People API Person profile ID for `user@example.com` is `123456789`,
	// you can add the user to the space by setting the `membership.member.name`
	// to `users/user@example.com` or `users/123456789`.
	//
	// To specify the Google groups to add, add memberships with the
	// appropriate `membership.group_member.name`. To add or invite a Google
	// group, use `groups/{group}`, where `{group}` is the `id` for the group from
	// the Cloud Identity Groups API. For example, you can use [Cloud Identity
	// Groups lookup
	// API](https://cloud.google.com/identity/docs/reference/rest/v1/groups/lookup)
	// to retrieve the ID `123456789` for group email `group@example.com`, then
	// you can add the group to the space by setting the
	// `membership.group_member.name` to `groups/123456789`. Group email is not
	// supported, and Google groups can only be added as members in named spaces.
	//
	// For a named space or group chat, if the caller blocks, or is blocked
	// by some members, or doesn't have permission to add some members, then
	// those members aren't added to the created space.
	//
	// To create a direct message (DM) between the calling user and another human
	// user, specify exactly one membership to represent the human user. If
	// one user blocks the other, the request fails and the DM isn't created.
	//
	// To create a DM between the calling user and the calling app, set
	// `Space.singleUserBotDm` to `true` and don't specify any memberships. You
	// can only use this method to set up a DM with the calling app. To add the
	// calling app as a member of a space or an existing DM between two human
	// users, see
	// [Invite or add a user or app to a
	// space](https://developers.google.com/workspace/chat/create-members).
	//
	// If a DM already exists between two users, even when one user blocks the
	// other at the time a request is made, then the existing DM is returned.
	//
	// Spaces with threaded replies aren't supported. If you receive the error
	// message `ALREADY_EXISTS` when setting up a space, try a different
	// `displayName`. An existing space within the Google Workspace organization
	// might already use this display name.
	//
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	SetUpSpace(context.Context, *SetUpSpaceRequest) (*Space, error)
	// Updates a space. For an example, see
	// [Update a
	// space](https://developers.google.com/workspace/chat/update-spaces).
	//
	// If you're updating the `displayName` field and receive the error message
	// `ALREADY_EXISTS`, try a different display name.. An existing space within
	// the Google Workspace organization might already use this display name.
	//
	// Supports the following types of
	// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
	//
	// - [App
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
	// with [administrator approval](https://support.google.com/a?p=chat-app-auth)
	// in [Developer Preview](https://developers.google.com/workspace/preview)
	//
	// - [User
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
	// You can authenticate and authorize this method with administrator
	// privileges by setting the `use_admin_access` field in the request.
	UpdateSpace(context.Context, *UpdateSpaceRequest) (*Space, error)
	// Deletes a named space. Always performs a cascading delete, which means
	// that the space's child resources—like messages posted in the space and
	// memberships in the space—are also deleted. For an example, see
	// [Delete a
	// space](https://developers.google.com/workspace/chat/delete-spaces).
	//
	// Supports the following types of
	// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
	//
	// - [App
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
	// with [administrator approval](https://support.google.com/a?p=chat-app-auth)
	// in [Developer Preview](https://developers.google.com/workspace/preview)
	//
	// - [User
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
	// You can authenticate and authorize this method with administrator
	// privileges by setting the `use_admin_access` field in the request.
	DeleteSpace(context.Context, *DeleteSpaceRequest) (*emptypb.Empty, error)
	// Completes the
	// [import process](https://developers.google.com/workspace/chat/import-data)
	// for the specified space and makes it visible to users.
	//
	// Requires [app
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
	// and domain-wide delegation. For more information, see [Authorize Google
	// Chat apps to import
	// data](https://developers.google.com/workspace/chat/authorize-import).
	CompleteImportSpace(context.Context, *CompleteImportSpaceRequest) (*CompleteImportSpaceResponse, error)
	// Returns the existing direct message with the specified user. If no direct
	// message space is found, returns a `404 NOT_FOUND` error. For an example,
	// see
	// [Find a direct message](/chat/api/guides/v1/spaces/find-direct-message).
	//
	// With [app
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app),
	// returns the direct message space between the specified user and the calling
	// Chat app.
	//
	// With [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user),
	// returns the direct message space between the specified user and the
	// authenticated user.
	//
	// // Supports the following types of
	// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
	//
	// - [App
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
	//
	// - [User
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
	FindDirectMessage(context.Context, *FindDirectMessageRequest) (*Space, error)
	// Creates a membership for the calling Chat app, a user, or a Google Group.
	// Creating memberships for other Chat apps isn't supported.
	// When creating a membership, if the specified member has their auto-accept
	// policy turned off, then they're invited, and must accept the space
	// invitation before joining. Otherwise, creating a membership adds the member
	// directly to the specified space.
	//
	// Supports the following types of
	// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
	//
	// - [App
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
	// with [administrator approval](https://support.google.com/a?p=chat-app-auth)
	// in [Developer Preview](https://developers.google.com/workspace/preview)
	//
	// - [User
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
	// You can authenticate and authorize this method with administrator
	// privileges by setting the `use_admin_access` field in the request.
	//
	// For example usage, see:
	//
	// - [Invite or add a user to a
	// space](https://developers.google.com/workspace/chat/create-members#create-user-membership).
	//
	// - [Invite or add a Google Group to a
	// space](https://developers.google.com/workspace/chat/create-members#create-group-membership).
	//
	// - [Add the Chat app to a
	// space](https://developers.google.com/workspace/chat/create-members#create-membership-calling-api).
	CreateMembership(context.Context, *CreateMembershipRequest) (*Membership, error)
	// Updates a membership. For an example, see [Update a user's membership in
	// a space](https://developers.google.com/workspace/chat/update-members).
	//
	// Supports the following types of
	// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
	//
	// - [App
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
	// with [administrator approval](https://support.google.com/a?p=chat-app-auth)
	// in [Developer Preview](https://developers.google.com/workspace/preview)
	//
	// - [User
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
	// You can authenticate and authorize this method with administrator
	// privileges by setting the `use_admin_access` field in the request.
	UpdateMembership(context.Context, *UpdateMembershipRequest) (*Membership, error)
	// Deletes a membership. For an example, see
	// [Remove a user or a Google Chat app from a
	// space](https://developers.google.com/workspace/chat/delete-members).
	//
	// Supports the following types of
	// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
	//
	// - [App
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
	// with [administrator approval](https://support.google.com/a?p=chat-app-auth)
	// in [Developer Preview](https://developers.google.com/workspace/preview)
	//
	// - [User
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
	// You can authenticate and authorize this method with administrator
	// privileges by setting the `use_admin_access` field in the request.
	DeleteMembership(context.Context, *DeleteMembershipRequest) (*Membership, error)
	// Creates a reaction and adds it to a message. For an example, see
	// [Add a reaction to a
	// message](https://developers.google.com/workspace/chat/create-reactions).
	//
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	CreateReaction(context.Context, *CreateReactionRequest) (*Reaction, error)
	// Lists reactions to a message. For an example, see
	// [List reactions for a
	// message](https://developers.google.com/workspace/chat/list-reactions).
	//
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	ListReactions(context.Context, *ListReactionsRequest) (*ListReactionsResponse, error)
	// Deletes a reaction to a message. For an example, see
	// [Delete a
	// reaction](https://developers.google.com/workspace/chat/delete-reactions).
	//
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	DeleteReaction(context.Context, *DeleteReactionRequest) (*emptypb.Empty, error)
	// Creates a custom emoji.
	//
	// Custom emojis are only available for Google Workspace accounts, and the
	// administrator must turn custom emojis on for the organization. For more
	// information, see [Learn about custom emojis in Google
	// Chat](https://support.google.com/chat/answer/12800149) and
	// [Manage custom emoji
	// permissions](https://support.google.com/a/answer/12850085).
	//
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	CreateCustomEmoji(context.Context, *CreateCustomEmojiRequest) (*CustomEmoji, error)
	// Returns details about a custom emoji.
	//
	// Custom emojis are only available for Google Workspace accounts, and the
	// administrator must turn custom emojis on for the organization. For more
	// information, see [Learn about custom emojis in Google
	// Chat](https://support.google.com/chat/answer/12800149) and
	// [Manage custom emoji
	// permissions](https://support.google.com/a/answer/12850085).
	//
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	GetCustomEmoji(context.Context, *GetCustomEmojiRequest) (*CustomEmoji, error)
	// Lists custom emojis visible to the authenticated user.
	//
	// Custom emojis are only available for Google Workspace accounts, and the
	// administrator must turn custom emojis on for the organization. For more
	// information, see [Learn about custom emojis in Google
	// Chat](https://support.google.com/chat/answer/12800149) and
	// [Manage custom emoji
	// permissions](https://support.google.com/a/answer/12850085).
	//
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	ListCustomEmojis(context.Context, *ListCustomEmojisRequest) (*ListCustomEmojisResponse, error)
	// Deletes a custom emoji. By default, users can only delete custom emoji they
	// created. [Emoji managers](https://support.google.com/a/answer/12850085)
	// assigned by the administrator can delete any custom emoji in the
	// organization. See [Learn about custom emojis in Google
	// Chat](https://support.google.com/chat/answer/12800149).
	//
	// Custom emojis are only available for Google Workspace accounts, and the
	// administrator must turn custom emojis on for the organization. For more
	// information, see [Learn about custom emojis in Google
	// Chat](https://support.google.com/chat/answer/12800149) and
	// [Manage custom emoji
	// permissions](https://support.google.com/a/answer/12850085).
	//
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	DeleteCustomEmoji(context.Context, *DeleteCustomEmojiRequest) (*emptypb.Empty, error)
	// Returns details about a user's read state within a space, used to identify
	// read and unread messages. For an example, see [Get details about a user's
	// space read
	// state](https://developers.google.com/workspace/chat/get-space-read-state).
	//
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	GetSpaceReadState(context.Context, *GetSpaceReadStateRequest) (*SpaceReadState, error)
	// Updates a user's read state within a space, used to identify read and
	// unread messages. For an example, see [Update a user's space read
	// state](https://developers.google.com/workspace/chat/update-space-read-state).
	//
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	UpdateSpaceReadState(context.Context, *UpdateSpaceReadStateRequest) (*SpaceReadState, error)
	// Returns details about a user's read state within a thread, used to identify
	// read and unread messages. For an example, see [Get details about a user's
	// thread read
	// state](https://developers.google.com/workspace/chat/get-thread-read-state).
	//
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	GetThreadReadState(context.Context, *GetThreadReadStateRequest) (*ThreadReadState, error)
	// Returns an event from a Google Chat space. The [event
	// payload](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.spaceEvents#SpaceEvent.FIELDS.oneof_payload)
	// contains the most recent version of the resource that changed. For example,
	// if you request an event about a new message but the message was later
	// updated, the server returns the updated `Message` resource in the event
	// payload.
	//
	// Note: The `permissionSettings` field is not returned in the Space
	// object of the Space event data for this request.
	//
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	// To get an event, the authenticated user must be a member of the space.
	//
	// For an example, see [Get details about an
	// event from a Google Chat
	// space](https://developers.google.com/workspace/chat/get-space-event).
	GetSpaceEvent(context.Context, *GetSpaceEventRequest) (*SpaceEvent, error)
	// Lists events from a Google Chat space. For each event, the
	// [payload](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.spaceEvents#SpaceEvent.FIELDS.oneof_payload)
	// contains the most recent version of the Chat resource. For example, if you
	// list events about new space members, the server returns `Membership`
	// resources that contain the latest membership details. If new members were
	// removed during the requested period, the event payload contains an empty
	// `Membership` resource.
	//
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	// To list events, the authenticated user must be a member of the space.
	//
	// For an example, see [List events from a Google Chat
	// space](https://developers.google.com/workspace/chat/list-space-events).
	ListSpaceEvents(context.Context, *ListSpaceEventsRequest) (*ListSpaceEventsResponse, error)
	// Gets the space notification setting. For an example, see [Get the
	// caller's space notification
	// setting](https://developers.google.com/workspace/chat/get-space-notification-setting).
	//
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	GetSpaceNotificationSetting(context.Context, *GetSpaceNotificationSettingRequest) (*SpaceNotificationSetting, error)
	// Updates the space notification setting. For an example, see [Update
	// the caller's space notification
	// setting](https://developers.google.com/workspace/chat/update-space-notification-setting).
	//
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	UpdateSpaceNotificationSetting(context.Context, *UpdateSpaceNotificationSettingRequest) (*SpaceNotificationSetting, error)
}

// UnimplementedChatServiceServer should be embedded to have forward compatible implementations.
type UnimplementedChatServiceServer struct {
}

func (UnimplementedChatServiceServer) CreateMessage(context.Context, *CreateMessageRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMessage not implemented")
}
func (UnimplementedChatServiceServer) ListMessages(context.Context, *ListMessagesRequest) (*ListMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMessages not implemented")
}
func (UnimplementedChatServiceServer) ListMemberships(context.Context, *ListMembershipsRequest) (*ListMembershipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMemberships not implemented")
}
func (UnimplementedChatServiceServer) GetMembership(context.Context, *GetMembershipRequest) (*Membership, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMembership not implemented")
}
func (UnimplementedChatServiceServer) GetMessage(context.Context, *GetMessageRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessage not implemented")
}
func (UnimplementedChatServiceServer) UpdateMessage(context.Context, *UpdateMessageRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMessage not implemented")
}
func (UnimplementedChatServiceServer) DeleteMessage(context.Context, *DeleteMessageRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessage not implemented")
}
func (UnimplementedChatServiceServer) GetAttachment(context.Context, *GetAttachmentRequest) (*Attachment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttachment not implemented")
}
func (UnimplementedChatServiceServer) UploadAttachment(context.Context, *UploadAttachmentRequest) (*UploadAttachmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadAttachment not implemented")
}
func (UnimplementedChatServiceServer) ListSpaces(context.Context, *ListSpacesRequest) (*ListSpacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSpaces not implemented")
}
func (UnimplementedChatServiceServer) SearchSpaces(context.Context, *SearchSpacesRequest) (*SearchSpacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchSpaces not implemented")
}
func (UnimplementedChatServiceServer) GetSpace(context.Context, *GetSpaceRequest) (*Space, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpace not implemented")
}
func (UnimplementedChatServiceServer) CreateSpace(context.Context, *CreateSpaceRequest) (*Space, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSpace not implemented")
}
func (UnimplementedChatServiceServer) SetUpSpace(context.Context, *SetUpSpaceRequest) (*Space, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUpSpace not implemented")
}
func (UnimplementedChatServiceServer) UpdateSpace(context.Context, *UpdateSpaceRequest) (*Space, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSpace not implemented")
}
func (UnimplementedChatServiceServer) DeleteSpace(context.Context, *DeleteSpaceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSpace not implemented")
}
func (UnimplementedChatServiceServer) CompleteImportSpace(context.Context, *CompleteImportSpaceRequest) (*CompleteImportSpaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteImportSpace not implemented")
}
func (UnimplementedChatServiceServer) FindDirectMessage(context.Context, *FindDirectMessageRequest) (*Space, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindDirectMessage not implemented")
}
func (UnimplementedChatServiceServer) CreateMembership(context.Context, *CreateMembershipRequest) (*Membership, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMembership not implemented")
}
func (UnimplementedChatServiceServer) UpdateMembership(context.Context, *UpdateMembershipRequest) (*Membership, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMembership not implemented")
}
func (UnimplementedChatServiceServer) DeleteMembership(context.Context, *DeleteMembershipRequest) (*Membership, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMembership not implemented")
}
func (UnimplementedChatServiceServer) CreateReaction(context.Context, *CreateReactionRequest) (*Reaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReaction not implemented")
}
func (UnimplementedChatServiceServer) ListReactions(context.Context, *ListReactionsRequest) (*ListReactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReactions not implemented")
}
func (UnimplementedChatServiceServer) DeleteReaction(context.Context, *DeleteReactionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReaction not implemented")
}
func (UnimplementedChatServiceServer) CreateCustomEmoji(context.Context, *CreateCustomEmojiRequest) (*CustomEmoji, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomEmoji not implemented")
}
func (UnimplementedChatServiceServer) GetCustomEmoji(context.Context, *GetCustomEmojiRequest) (*CustomEmoji, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomEmoji not implemented")
}
func (UnimplementedChatServiceServer) ListCustomEmojis(context.Context, *ListCustomEmojisRequest) (*ListCustomEmojisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCustomEmojis not implemented")
}
func (UnimplementedChatServiceServer) DeleteCustomEmoji(context.Context, *DeleteCustomEmojiRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCustomEmoji not implemented")
}
func (UnimplementedChatServiceServer) GetSpaceReadState(context.Context, *GetSpaceReadStateRequest) (*SpaceReadState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpaceReadState not implemented")
}
func (UnimplementedChatServiceServer) UpdateSpaceReadState(context.Context, *UpdateSpaceReadStateRequest) (*SpaceReadState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSpaceReadState not implemented")
}
func (UnimplementedChatServiceServer) GetThreadReadState(context.Context, *GetThreadReadStateRequest) (*ThreadReadState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThreadReadState not implemented")
}
func (UnimplementedChatServiceServer) GetSpaceEvent(context.Context, *GetSpaceEventRequest) (*SpaceEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpaceEvent not implemented")
}
func (UnimplementedChatServiceServer) ListSpaceEvents(context.Context, *ListSpaceEventsRequest) (*ListSpaceEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSpaceEvents not implemented")
}
func (UnimplementedChatServiceServer) GetSpaceNotificationSetting(context.Context, *GetSpaceNotificationSettingRequest) (*SpaceNotificationSetting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpaceNotificationSetting not implemented")
}
func (UnimplementedChatServiceServer) UpdateSpaceNotificationSetting(context.Context, *UpdateSpaceNotificationSettingRequest) (*SpaceNotificationSetting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSpaceNotificationSetting not implemented")
}

// UnsafeChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServiceServer will
// result in compilation errors.
type UnsafeChatServiceServer interface {
	mustEmbedUnimplementedChatServiceServer()
}

func RegisterChatServiceServer(s grpc.ServiceRegistrar, srv ChatServiceServer) {
	s.RegisterService(&ChatService_ServiceDesc, srv)
}

func _ChatService_CreateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CreateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_CreateMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CreateMessage(ctx, req.(*CreateMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ListMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ListMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_ListMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ListMessages(ctx, req.(*ListMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ListMemberships_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMembershipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ListMemberships(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_ListMemberships_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ListMemberships(ctx, req.(*ListMembershipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMembershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_GetMembership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetMembership(ctx, req.(*GetMembershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_GetMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetMessage(ctx, req.(*GetMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_UpdateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).UpdateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_UpdateMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).UpdateMessage(ctx, req.(*UpdateMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_DeleteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).DeleteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_DeleteMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).DeleteMessage(ctx, req.(*DeleteMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_GetAttachment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetAttachment(ctx, req.(*GetAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_UploadAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).UploadAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_UploadAttachment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).UploadAttachment(ctx, req.(*UploadAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ListSpaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSpacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ListSpaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_ListSpaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ListSpaces(ctx, req.(*ListSpacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_SearchSpaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchSpacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).SearchSpaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_SearchSpaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).SearchSpaces(ctx, req.(*SearchSpacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_GetSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetSpace(ctx, req.(*GetSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_CreateSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CreateSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_CreateSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CreateSpace(ctx, req.(*CreateSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_SetUpSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUpSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).SetUpSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_SetUpSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).SetUpSpace(ctx, req.(*SetUpSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_UpdateSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).UpdateSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_UpdateSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).UpdateSpace(ctx, req.(*UpdateSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_DeleteSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).DeleteSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_DeleteSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).DeleteSpace(ctx, req.(*DeleteSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_CompleteImportSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteImportSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CompleteImportSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_CompleteImportSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CompleteImportSpace(ctx, req.(*CompleteImportSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_FindDirectMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindDirectMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).FindDirectMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_FindDirectMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).FindDirectMessage(ctx, req.(*FindDirectMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_CreateMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMembershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CreateMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_CreateMembership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CreateMembership(ctx, req.(*CreateMembershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_UpdateMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMembershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).UpdateMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_UpdateMembership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).UpdateMembership(ctx, req.(*UpdateMembershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_DeleteMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMembershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).DeleteMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_DeleteMembership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).DeleteMembership(ctx, req.(*DeleteMembershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_CreateReaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CreateReaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_CreateReaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CreateReaction(ctx, req.(*CreateReactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ListReactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ListReactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_ListReactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ListReactions(ctx, req.(*ListReactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_DeleteReaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).DeleteReaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_DeleteReaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).DeleteReaction(ctx, req.(*DeleteReactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_CreateCustomEmoji_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCustomEmojiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CreateCustomEmoji(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_CreateCustomEmoji_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CreateCustomEmoji(ctx, req.(*CreateCustomEmojiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetCustomEmoji_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomEmojiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetCustomEmoji(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_GetCustomEmoji_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetCustomEmoji(ctx, req.(*GetCustomEmojiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ListCustomEmojis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCustomEmojisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ListCustomEmojis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_ListCustomEmojis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ListCustomEmojis(ctx, req.(*ListCustomEmojisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_DeleteCustomEmoji_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCustomEmojiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).DeleteCustomEmoji(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_DeleteCustomEmoji_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).DeleteCustomEmoji(ctx, req.(*DeleteCustomEmojiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetSpaceReadState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpaceReadStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetSpaceReadState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_GetSpaceReadState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetSpaceReadState(ctx, req.(*GetSpaceReadStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_UpdateSpaceReadState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSpaceReadStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).UpdateSpaceReadState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_UpdateSpaceReadState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).UpdateSpaceReadState(ctx, req.(*UpdateSpaceReadStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetThreadReadState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetThreadReadStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetThreadReadState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_GetThreadReadState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetThreadReadState(ctx, req.(*GetThreadReadStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetSpaceEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpaceEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetSpaceEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_GetSpaceEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetSpaceEvent(ctx, req.(*GetSpaceEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ListSpaceEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSpaceEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ListSpaceEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_ListSpaceEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ListSpaceEvents(ctx, req.(*ListSpaceEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetSpaceNotificationSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpaceNotificationSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetSpaceNotificationSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_GetSpaceNotificationSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetSpaceNotificationSetting(ctx, req.(*GetSpaceNotificationSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_UpdateSpaceNotificationSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSpaceNotificationSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).UpdateSpaceNotificationSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_UpdateSpaceNotificationSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).UpdateSpaceNotificationSetting(ctx, req.(*UpdateSpaceNotificationSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatService_ServiceDesc is the grpc.ServiceDesc for ChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.chat.v1.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMessage",
			Handler:    _ChatService_CreateMessage_Handler,
		},
		{
			MethodName: "ListMessages",
			Handler:    _ChatService_ListMessages_Handler,
		},
		{
			MethodName: "ListMemberships",
			Handler:    _ChatService_ListMemberships_Handler,
		},
		{
			MethodName: "GetMembership",
			Handler:    _ChatService_GetMembership_Handler,
		},
		{
			MethodName: "GetMessage",
			Handler:    _ChatService_GetMessage_Handler,
		},
		{
			MethodName: "UpdateMessage",
			Handler:    _ChatService_UpdateMessage_Handler,
		},
		{
			MethodName: "DeleteMessage",
			Handler:    _ChatService_DeleteMessage_Handler,
		},
		{
			MethodName: "GetAttachment",
			Handler:    _ChatService_GetAttachment_Handler,
		},
		{
			MethodName: "UploadAttachment",
			Handler:    _ChatService_UploadAttachment_Handler,
		},
		{
			MethodName: "ListSpaces",
			Handler:    _ChatService_ListSpaces_Handler,
		},
		{
			MethodName: "SearchSpaces",
			Handler:    _ChatService_SearchSpaces_Handler,
		},
		{
			MethodName: "GetSpace",
			Handler:    _ChatService_GetSpace_Handler,
		},
		{
			MethodName: "CreateSpace",
			Handler:    _ChatService_CreateSpace_Handler,
		},
		{
			MethodName: "SetUpSpace",
			Handler:    _ChatService_SetUpSpace_Handler,
		},
		{
			MethodName: "UpdateSpace",
			Handler:    _ChatService_UpdateSpace_Handler,
		},
		{
			MethodName: "DeleteSpace",
			Handler:    _ChatService_DeleteSpace_Handler,
		},
		{
			MethodName: "CompleteImportSpace",
			Handler:    _ChatService_CompleteImportSpace_Handler,
		},
		{
			MethodName: "FindDirectMessage",
			Handler:    _ChatService_FindDirectMessage_Handler,
		},
		{
			MethodName: "CreateMembership",
			Handler:    _ChatService_CreateMembership_Handler,
		},
		{
			MethodName: "UpdateMembership",
			Handler:    _ChatService_UpdateMembership_Handler,
		},
		{
			MethodName: "DeleteMembership",
			Handler:    _ChatService_DeleteMembership_Handler,
		},
		{
			MethodName: "CreateReaction",
			Handler:    _ChatService_CreateReaction_Handler,
		},
		{
			MethodName: "ListReactions",
			Handler:    _ChatService_ListReactions_Handler,
		},
		{
			MethodName: "DeleteReaction",
			Handler:    _ChatService_DeleteReaction_Handler,
		},
		{
			MethodName: "CreateCustomEmoji",
			Handler:    _ChatService_CreateCustomEmoji_Handler,
		},
		{
			MethodName: "GetCustomEmoji",
			Handler:    _ChatService_GetCustomEmoji_Handler,
		},
		{
			MethodName: "ListCustomEmojis",
			Handler:    _ChatService_ListCustomEmojis_Handler,
		},
		{
			MethodName: "DeleteCustomEmoji",
			Handler:    _ChatService_DeleteCustomEmoji_Handler,
		},
		{
			MethodName: "GetSpaceReadState",
			Handler:    _ChatService_GetSpaceReadState_Handler,
		},
		{
			MethodName: "UpdateSpaceReadState",
			Handler:    _ChatService_UpdateSpaceReadState_Handler,
		},
		{
			MethodName: "GetThreadReadState",
			Handler:    _ChatService_GetThreadReadState_Handler,
		},
		{
			MethodName: "GetSpaceEvent",
			Handler:    _ChatService_GetSpaceEvent_Handler,
		},
		{
			MethodName: "ListSpaceEvents",
			Handler:    _ChatService_ListSpaceEvents_Handler,
		},
		{
			MethodName: "GetSpaceNotificationSetting",
			Handler:    _ChatService_GetSpaceNotificationSetting_Handler,
		},
		{
			MethodName: "UpdateSpaceNotificationSetting",
			Handler:    _ChatService_UpdateSpaceNotificationSetting_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/chat/v1/chat_service.proto",
}
