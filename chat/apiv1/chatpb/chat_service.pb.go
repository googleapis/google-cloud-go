// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v4.25.3
// source: google/chat/v1/chat_service.proto

package chatpb

import (
	context "context"
	reflect "reflect"

	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_google_chat_v1_chat_service_proto protoreflect.FileDescriptor

var file_google_chat_v1_chat_service_proto_rawDesc = []byte{
	0x0a, 0x21, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x68,
	0x61, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x32, 0xde, 0x24, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x9b, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x4b, 0xda, 0x41, 0x19, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x2c,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x8a, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0xda,
	0x41, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x92,
	0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x73, 0x12, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2e, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x3d, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x12, 0x7f, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x12, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x22, 0x2c, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x3d, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x77, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2d,
	0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x2a, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xd1, 0x01,
	0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x80,
	0x01, 0xda, 0x41, 0x13, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2c, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x64, 0x3a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5a, 0x31, 0x3a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x32, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x1a, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x2a,
	0x7d, 0x12, 0x7c, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x2d, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x2a,
	0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x2a, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12,
	0x8e, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x3b, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2e, 0x12, 0x2c, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f,
	0x2a, 0x2f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x7d,
	0x12, 0x9a, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d,
	0x3a, 0x01, 0x2a, 0x22, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x3d, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x6a, 0x0a,
	0x0a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x15, 0xda, 0x41, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x12, 0x0a, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x66, 0x0a, 0x08, 0x47, 0x65, 0x74,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x22, 0x22, 0xda,
	0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x2a,
	0x7d, 0x12, 0x6b, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x22, 0x21, 0xda, 0x41, 0x05,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x3a, 0x05, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x22, 0x0a, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x63,
	0x0a, 0x0a, 0x53, 0x65, 0x74, 0x55, 0x70, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x74, 0x55, 0x70, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x15, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01,
	0x2a, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x3a, 0x73, 0x65,
	0x74, 0x75, 0x70, 0x12, 0x86, 0x01, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x22, 0x3c,
	0xda, 0x41, 0x11, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x05, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x32, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x6e, 0x61,
	0x6d, 0x65, 0x3d, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x6d, 0x0a, 0x0b,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x22, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x2a, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x9d, 0x01, 0x0a, 0x13,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x3d, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x7a, 0x0a, 0x11, 0x46,
	0x69, 0x6e, 0x64, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x3a, 0x66, 0x69, 0x6e, 0x64, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x9e, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x27, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x22, 0x45, 0xda, 0x41, 0x11, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x2c, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x0a, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x22, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x7d,
	0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0xae, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x27, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x22, 0x55, 0xda, 0x41, 0x16, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x2c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x36, 0x3a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x32,
	0x28, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x85, 0x01, 0x0a, 0x10, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x27,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x22, 0x2c, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1f, 0x2a, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2f, 0x2a,
	0x7d, 0x12, 0xa1, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4e, 0xda, 0x41, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x2c, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x3a,
	0x08, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2a, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x2f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x72, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x99, 0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x3d, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x8a, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x39, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2c, 0x2a, 0x2a, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f,
	0x2a, 0x2f, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x98,
	0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x61, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x39,
	0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x2a,
	0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x7d, 0x12, 0xd9, 0x01, 0x0a, 0x14, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22,
	0x74, 0xda, 0x41, 0x1c, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4f, 0x3a, 0x10, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x32, 0x3b, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x61, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x7d, 0x12, 0xa6, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x29, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52,
	0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x44, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x12, 0x35, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x3d, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x73, 0x2f, 0x2a, 0x2f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x2a, 0x2f, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x7d, 0x1a, 0x93,
	0x07, 0xca, 0x41, 0x13, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0xd2, 0x41, 0xf9, 0x06, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x62, 0x6f, 0x74, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61,
	0x75, 0x74, 0x68, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2c,
	0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x2c, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x2c, 0x68, 0x74, 0x74,
	0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x2e, 0x61, 0x70,
	0x70, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74,
	0x68, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x73, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x2c, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a,
	0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2c, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x72, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77,
	0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77,
	0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x72, 0x65,
	0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77,
	0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x2c, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a,
	0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2c, 0x68, 0x74, 0x74,
	0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c,
	0x79, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74,
	0x68, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x72, 0x65, 0x61,
	0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77,
	0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x72, 0x65, 0x61, 0x64,
	0x6f, 0x6e, 0x6c, 0x79, 0x42, 0x9b, 0x01, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x42, 0x10, 0x43, 0x68, 0x61,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x2c, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2f,
	0x63, 0x68, 0x61, 0x74, 0x70, 0x62, 0x3b, 0x63, 0x68, 0x61, 0x74, 0x70, 0x62, 0xaa, 0x02, 0x13,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x2e, 0x56, 0x31, 0xca, 0x02, 0x13, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5c, 0x41, 0x70, 0x70,
	0x73, 0x5c, 0x43, 0x68, 0x61, 0x74, 0x5c, 0x56, 0x31, 0xea, 0x02, 0x16, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x3a, 0x3a, 0x41, 0x70, 0x70, 0x73, 0x3a, 0x3a, 0x43, 0x68, 0x61, 0x74, 0x3a, 0x3a,
	0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_google_chat_v1_chat_service_proto_goTypes = []interface{}{
	(*CreateMessageRequest)(nil),        // 0: google.chat.v1.CreateMessageRequest
	(*ListMessagesRequest)(nil),         // 1: google.chat.v1.ListMessagesRequest
	(*ListMembershipsRequest)(nil),      // 2: google.chat.v1.ListMembershipsRequest
	(*GetMembershipRequest)(nil),        // 3: google.chat.v1.GetMembershipRequest
	(*GetMessageRequest)(nil),           // 4: google.chat.v1.GetMessageRequest
	(*UpdateMessageRequest)(nil),        // 5: google.chat.v1.UpdateMessageRequest
	(*DeleteMessageRequest)(nil),        // 6: google.chat.v1.DeleteMessageRequest
	(*GetAttachmentRequest)(nil),        // 7: google.chat.v1.GetAttachmentRequest
	(*UploadAttachmentRequest)(nil),     // 8: google.chat.v1.UploadAttachmentRequest
	(*ListSpacesRequest)(nil),           // 9: google.chat.v1.ListSpacesRequest
	(*GetSpaceRequest)(nil),             // 10: google.chat.v1.GetSpaceRequest
	(*CreateSpaceRequest)(nil),          // 11: google.chat.v1.CreateSpaceRequest
	(*SetUpSpaceRequest)(nil),           // 12: google.chat.v1.SetUpSpaceRequest
	(*UpdateSpaceRequest)(nil),          // 13: google.chat.v1.UpdateSpaceRequest
	(*DeleteSpaceRequest)(nil),          // 14: google.chat.v1.DeleteSpaceRequest
	(*CompleteImportSpaceRequest)(nil),  // 15: google.chat.v1.CompleteImportSpaceRequest
	(*FindDirectMessageRequest)(nil),    // 16: google.chat.v1.FindDirectMessageRequest
	(*CreateMembershipRequest)(nil),     // 17: google.chat.v1.CreateMembershipRequest
	(*UpdateMembershipRequest)(nil),     // 18: google.chat.v1.UpdateMembershipRequest
	(*DeleteMembershipRequest)(nil),     // 19: google.chat.v1.DeleteMembershipRequest
	(*CreateReactionRequest)(nil),       // 20: google.chat.v1.CreateReactionRequest
	(*ListReactionsRequest)(nil),        // 21: google.chat.v1.ListReactionsRequest
	(*DeleteReactionRequest)(nil),       // 22: google.chat.v1.DeleteReactionRequest
	(*GetSpaceReadStateRequest)(nil),    // 23: google.chat.v1.GetSpaceReadStateRequest
	(*UpdateSpaceReadStateRequest)(nil), // 24: google.chat.v1.UpdateSpaceReadStateRequest
	(*GetThreadReadStateRequest)(nil),   // 25: google.chat.v1.GetThreadReadStateRequest
	(*Message)(nil),                     // 26: google.chat.v1.Message
	(*ListMessagesResponse)(nil),        // 27: google.chat.v1.ListMessagesResponse
	(*ListMembershipsResponse)(nil),     // 28: google.chat.v1.ListMembershipsResponse
	(*Membership)(nil),                  // 29: google.chat.v1.Membership
	(*emptypb.Empty)(nil),               // 30: google.protobuf.Empty
	(*Attachment)(nil),                  // 31: google.chat.v1.Attachment
	(*UploadAttachmentResponse)(nil),    // 32: google.chat.v1.UploadAttachmentResponse
	(*ListSpacesResponse)(nil),          // 33: google.chat.v1.ListSpacesResponse
	(*Space)(nil),                       // 34: google.chat.v1.Space
	(*CompleteImportSpaceResponse)(nil), // 35: google.chat.v1.CompleteImportSpaceResponse
	(*Reaction)(nil),                    // 36: google.chat.v1.Reaction
	(*ListReactionsResponse)(nil),       // 37: google.chat.v1.ListReactionsResponse
	(*SpaceReadState)(nil),              // 38: google.chat.v1.SpaceReadState
	(*ThreadReadState)(nil),             // 39: google.chat.v1.ThreadReadState
}
var file_google_chat_v1_chat_service_proto_depIdxs = []int32{
	0,  // 0: google.chat.v1.ChatService.CreateMessage:input_type -> google.chat.v1.CreateMessageRequest
	1,  // 1: google.chat.v1.ChatService.ListMessages:input_type -> google.chat.v1.ListMessagesRequest
	2,  // 2: google.chat.v1.ChatService.ListMemberships:input_type -> google.chat.v1.ListMembershipsRequest
	3,  // 3: google.chat.v1.ChatService.GetMembership:input_type -> google.chat.v1.GetMembershipRequest
	4,  // 4: google.chat.v1.ChatService.GetMessage:input_type -> google.chat.v1.GetMessageRequest
	5,  // 5: google.chat.v1.ChatService.UpdateMessage:input_type -> google.chat.v1.UpdateMessageRequest
	6,  // 6: google.chat.v1.ChatService.DeleteMessage:input_type -> google.chat.v1.DeleteMessageRequest
	7,  // 7: google.chat.v1.ChatService.GetAttachment:input_type -> google.chat.v1.GetAttachmentRequest
	8,  // 8: google.chat.v1.ChatService.UploadAttachment:input_type -> google.chat.v1.UploadAttachmentRequest
	9,  // 9: google.chat.v1.ChatService.ListSpaces:input_type -> google.chat.v1.ListSpacesRequest
	10, // 10: google.chat.v1.ChatService.GetSpace:input_type -> google.chat.v1.GetSpaceRequest
	11, // 11: google.chat.v1.ChatService.CreateSpace:input_type -> google.chat.v1.CreateSpaceRequest
	12, // 12: google.chat.v1.ChatService.SetUpSpace:input_type -> google.chat.v1.SetUpSpaceRequest
	13, // 13: google.chat.v1.ChatService.UpdateSpace:input_type -> google.chat.v1.UpdateSpaceRequest
	14, // 14: google.chat.v1.ChatService.DeleteSpace:input_type -> google.chat.v1.DeleteSpaceRequest
	15, // 15: google.chat.v1.ChatService.CompleteImportSpace:input_type -> google.chat.v1.CompleteImportSpaceRequest
	16, // 16: google.chat.v1.ChatService.FindDirectMessage:input_type -> google.chat.v1.FindDirectMessageRequest
	17, // 17: google.chat.v1.ChatService.CreateMembership:input_type -> google.chat.v1.CreateMembershipRequest
	18, // 18: google.chat.v1.ChatService.UpdateMembership:input_type -> google.chat.v1.UpdateMembershipRequest
	19, // 19: google.chat.v1.ChatService.DeleteMembership:input_type -> google.chat.v1.DeleteMembershipRequest
	20, // 20: google.chat.v1.ChatService.CreateReaction:input_type -> google.chat.v1.CreateReactionRequest
	21, // 21: google.chat.v1.ChatService.ListReactions:input_type -> google.chat.v1.ListReactionsRequest
	22, // 22: google.chat.v1.ChatService.DeleteReaction:input_type -> google.chat.v1.DeleteReactionRequest
	23, // 23: google.chat.v1.ChatService.GetSpaceReadState:input_type -> google.chat.v1.GetSpaceReadStateRequest
	24, // 24: google.chat.v1.ChatService.UpdateSpaceReadState:input_type -> google.chat.v1.UpdateSpaceReadStateRequest
	25, // 25: google.chat.v1.ChatService.GetThreadReadState:input_type -> google.chat.v1.GetThreadReadStateRequest
	26, // 26: google.chat.v1.ChatService.CreateMessage:output_type -> google.chat.v1.Message
	27, // 27: google.chat.v1.ChatService.ListMessages:output_type -> google.chat.v1.ListMessagesResponse
	28, // 28: google.chat.v1.ChatService.ListMemberships:output_type -> google.chat.v1.ListMembershipsResponse
	29, // 29: google.chat.v1.ChatService.GetMembership:output_type -> google.chat.v1.Membership
	26, // 30: google.chat.v1.ChatService.GetMessage:output_type -> google.chat.v1.Message
	26, // 31: google.chat.v1.ChatService.UpdateMessage:output_type -> google.chat.v1.Message
	30, // 32: google.chat.v1.ChatService.DeleteMessage:output_type -> google.protobuf.Empty
	31, // 33: google.chat.v1.ChatService.GetAttachment:output_type -> google.chat.v1.Attachment
	32, // 34: google.chat.v1.ChatService.UploadAttachment:output_type -> google.chat.v1.UploadAttachmentResponse
	33, // 35: google.chat.v1.ChatService.ListSpaces:output_type -> google.chat.v1.ListSpacesResponse
	34, // 36: google.chat.v1.ChatService.GetSpace:output_type -> google.chat.v1.Space
	34, // 37: google.chat.v1.ChatService.CreateSpace:output_type -> google.chat.v1.Space
	34, // 38: google.chat.v1.ChatService.SetUpSpace:output_type -> google.chat.v1.Space
	34, // 39: google.chat.v1.ChatService.UpdateSpace:output_type -> google.chat.v1.Space
	30, // 40: google.chat.v1.ChatService.DeleteSpace:output_type -> google.protobuf.Empty
	35, // 41: google.chat.v1.ChatService.CompleteImportSpace:output_type -> google.chat.v1.CompleteImportSpaceResponse
	34, // 42: google.chat.v1.ChatService.FindDirectMessage:output_type -> google.chat.v1.Space
	29, // 43: google.chat.v1.ChatService.CreateMembership:output_type -> google.chat.v1.Membership
	29, // 44: google.chat.v1.ChatService.UpdateMembership:output_type -> google.chat.v1.Membership
	29, // 45: google.chat.v1.ChatService.DeleteMembership:output_type -> google.chat.v1.Membership
	36, // 46: google.chat.v1.ChatService.CreateReaction:output_type -> google.chat.v1.Reaction
	37, // 47: google.chat.v1.ChatService.ListReactions:output_type -> google.chat.v1.ListReactionsResponse
	30, // 48: google.chat.v1.ChatService.DeleteReaction:output_type -> google.protobuf.Empty
	38, // 49: google.chat.v1.ChatService.GetSpaceReadState:output_type -> google.chat.v1.SpaceReadState
	38, // 50: google.chat.v1.ChatService.UpdateSpaceReadState:output_type -> google.chat.v1.SpaceReadState
	39, // 51: google.chat.v1.ChatService.GetThreadReadState:output_type -> google.chat.v1.ThreadReadState
	26, // [26:52] is the sub-list for method output_type
	0,  // [0:26] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_google_chat_v1_chat_service_proto_init() }
func file_google_chat_v1_chat_service_proto_init() {
	if File_google_chat_v1_chat_service_proto != nil {
		return
	}
	file_google_chat_v1_attachment_proto_init()
	file_google_chat_v1_membership_proto_init()
	file_google_chat_v1_message_proto_init()
	file_google_chat_v1_reaction_proto_init()
	file_google_chat_v1_space_proto_init()
	file_google_chat_v1_space_read_state_proto_init()
	file_google_chat_v1_space_setup_proto_init()
	file_google_chat_v1_thread_read_state_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_chat_v1_chat_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_google_chat_v1_chat_service_proto_goTypes,
		DependencyIndexes: file_google_chat_v1_chat_service_proto_depIdxs,
	}.Build()
	File_google_chat_v1_chat_service_proto = out.File
	file_google_chat_v1_chat_service_proto_rawDesc = nil
	file_google_chat_v1_chat_service_proto_goTypes = nil
	file_google_chat_v1_chat_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChatServiceClient interface {
	// Creates a message in a Google Chat space. For an example, see [Send a
	// message](https://developers.google.com/workspace/chat/create-messages).
	//
	// Calling this method requires
	// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize)
	// and supports the following authentication types:
	//
	// - For text messages, user authentication or app authentication are
	// supported.
	// - For card messages, only app authentication is supported. (Only Chat apps
	// can create card messages.)
	CreateMessage(ctx context.Context, in *CreateMessageRequest, opts ...grpc.CallOption) (*Message, error)
	// Lists messages in a space that the caller is a member of, including
	// messages from blocked members and spaces. For an example, see
	// [List messages](/chat/api/guides/v1/messages/list).
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	ListMessages(ctx context.Context, in *ListMessagesRequest, opts ...grpc.CallOption) (*ListMessagesResponse, error)
	// Lists memberships in a space. For an example, see [List users and Google
	// Chat apps in a
	// space](https://developers.google.com/workspace/chat/list-members). Listing
	// memberships with [app
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
	// lists memberships in spaces that the Chat app has
	// access to, but excludes Chat app memberships,
	// including its own. Listing memberships with
	// [User
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
	// lists memberships in spaces that the authenticated user has access to.
	//
	// Requires
	// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
	// Supports
	// [app
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
	// and [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	ListMemberships(ctx context.Context, in *ListMembershipsRequest, opts ...grpc.CallOption) (*ListMembershipsResponse, error)
	// Returns details about a membership. For an example, see
	// [Get details about a user's or Google Chat app's
	// membership](https://developers.google.com/workspace/chat/get-members).
	//
	// Requires
	// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
	// Supports
	// [app
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
	// and [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	GetMembership(ctx context.Context, in *GetMembershipRequest, opts ...grpc.CallOption) (*Membership, error)
	// Returns details about a message.
	// For an example, see [Get details about a
	// message](https://developers.google.com/workspace/chat/get-messages).
	//
	// Requires
	// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
	// Supports
	// [app
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
	// and [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	//
	// Note: Might return a message from a blocked member or space.
	GetMessage(ctx context.Context, in *GetMessageRequest, opts ...grpc.CallOption) (*Message, error)
	// Updates a message. There's a difference between the `patch` and `update`
	// methods. The `patch`
	// method uses a `patch` request while the `update` method uses a `put`
	// request. We recommend using the `patch` method. For an example, see
	// [Update a
	// message](https://developers.google.com/workspace/chat/update-messages).
	//
	// Requires
	// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
	// Supports
	// [app
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
	// and [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	// When using app authentication, requests can only update messages
	// created by the calling Chat app.
	UpdateMessage(ctx context.Context, in *UpdateMessageRequest, opts ...grpc.CallOption) (*Message, error)
	// Deletes a message.
	// For an example, see [Delete a
	// message](https://developers.google.com/workspace/chat/delete-messages).
	//
	// Requires
	// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
	// Supports
	// [app
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
	// and [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	// When using app authentication, requests can only delete messages
	// created by the calling Chat app.
	DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Gets the metadata of a message attachment. The attachment data is fetched
	// using the [media
	// API](https://developers.google.com/workspace/chat/api/reference/rest/v1/media/download).
	// For an example, see
	// [Get metadata about a message
	// attachment](https://developers.google.com/workspace/chat/get-media-attachments).
	// Requires [app
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app).
	GetAttachment(ctx context.Context, in *GetAttachmentRequest, opts ...grpc.CallOption) (*Attachment, error)
	// Uploads an attachment. For an example, see
	// [Upload media as a file
	// attachment](https://developers.google.com/workspace/chat/upload-media-attachments).
	// Requires user
	// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	//
	// You can upload attachments up to 200 MB. Certain file types aren't
	// supported. For details, see [File types blocked by Google
	// Chat](https://support.google.com/chat/answer/7651457?&co=GENIE.Platform%3DDesktop#File%20types%20blocked%20in%20Google%20Chat).
	UploadAttachment(ctx context.Context, in *UploadAttachmentRequest, opts ...grpc.CallOption) (*UploadAttachmentResponse, error)
	// Lists spaces the caller is a member of. Group chats and DMs aren't listed
	// until the first message is sent. For an example, see
	// [List
	// spaces](https://developers.google.com/workspace/chat/list-spaces).
	//
	// Requires
	// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
	// Supports
	// [app
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
	// and [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	//
	// Lists spaces visible to the caller or authenticated user. Group chats
	// and DMs aren't listed until the first message is sent.
	ListSpaces(ctx context.Context, in *ListSpacesRequest, opts ...grpc.CallOption) (*ListSpacesResponse, error)
	// Returns details about a space. For an example, see
	// [Get details about a
	// space](https://developers.google.com/workspace/chat/get-spaces).
	//
	// Requires
	// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
	// Supports
	// [app
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
	// and [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	GetSpace(ctx context.Context, in *GetSpaceRequest, opts ...grpc.CallOption) (*Space, error)
	// Creates a named space. Spaces grouped by topics aren't supported. For an
	// example, see [Create a
	// space](https://developers.google.com/workspace/chat/create-spaces).
	//
	//	If you receive the error message `ALREADY_EXISTS` when creating
	//	a space, try a different `displayName`. An existing space within
	//	the Google Workspace organization might already use this display name.
	//
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	CreateSpace(ctx context.Context, in *CreateSpaceRequest, opts ...grpc.CallOption) (*Space, error)
	// Creates a space and adds specified users to it. The calling user is
	// automatically added to the space, and shouldn't be specified as a
	// membership in the request. For an example, see
	// [Set up a space with initial
	// members](https://developers.google.com/workspace/chat/set-up-spaces).
	//
	// To specify the human members to add, add memberships with the appropriate
	// `member.name` in the `SetUpSpaceRequest`. To add a human user, use
	// `users/{user}`, where `{user}` can be the email address for the user. For
	// users in the same Workspace organization `{user}` can also be the `id` for
	// the person from the People API, or the `id` for the user in the Directory
	// API. For example, if the People API Person profile ID for
	// `user@example.com` is `123456789`, you can add the user to the space by
	// setting the `membership.member.name` to `users/user@example.com` or
	// `users/123456789`.
	//
	// For a space or group chat, if the caller blocks or is blocked by some
	// members, then those members aren't added to the created space.
	//
	// To create a direct message (DM) between the calling user and another human
	// user, specify exactly one membership to represent the human user. If
	// one user blocks the other, the request fails and the DM isn't created.
	//
	// To create a DM between the calling user and the calling app, set
	// `Space.singleUserBotDm` to `true` and don't specify any memberships. You
	// can only use this method to set up a DM with the calling app. To add the
	// calling app as a member of a space or an existing DM between two human
	// users, see
	// [Invite or add a user or app to a
	// space](https://developers.google.com/workspace/chat/create-members).
	//
	// If a DM already exists between two users, even when one user blocks the
	// other at the time a request is made, then the existing DM is returned.
	//
	// Spaces with threaded replies aren't supported. If you receive the error
	// message `ALREADY_EXISTS` when setting up a space, try a different
	// `displayName`. An existing space within the Google Workspace organization
	// might already use this display name.
	//
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	SetUpSpace(ctx context.Context, in *SetUpSpaceRequest, opts ...grpc.CallOption) (*Space, error)
	// Updates a space. For an example, see
	// [Update a
	// space](https://developers.google.com/workspace/chat/update-spaces).
	//
	// If you're updating the `displayName` field and receive the error message
	// `ALREADY_EXISTS`, try a different display name.. An existing space within
	// the Google Workspace organization might already use this display name.
	//
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	UpdateSpace(ctx context.Context, in *UpdateSpaceRequest, opts ...grpc.CallOption) (*Space, error)
	// Deletes a named space. Always performs a cascading delete, which means
	// that the space's child resources—like messages posted in the space and
	// memberships in the space—are also deleted. For an example, see
	// [Delete a
	// space](https://developers.google.com/workspace/chat/delete-spaces).
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
	// from a user who has permission to delete the space.
	DeleteSpace(ctx context.Context, in *DeleteSpaceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Completes the
	// [import process](https://developers.google.com/workspace/chat/import-data)
	// for the specified space and makes it visible to users.
	// Requires app authentication and domain-wide delegation. For more
	// information, see [Authorize Google Chat apps to import
	// data](https://developers.google.com/workspace/chat/authorize-import).
	CompleteImportSpace(ctx context.Context, in *CompleteImportSpaceRequest, opts ...grpc.CallOption) (*CompleteImportSpaceResponse, error)
	// Returns the existing direct message with the specified user. If no direct
	// message space is found, returns a `404 NOT_FOUND` error. For an example,
	// see
	// [Find a direct message](/chat/api/guides/v1/spaces/find-direct-message).
	//
	// With [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user),
	// returns the direct message space between the specified user and the
	// authenticated user.
	//
	// With [app
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app),
	// returns the direct message space between the specified user and the calling
	// Chat app.
	//
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
	// or [app
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app).
	FindDirectMessage(ctx context.Context, in *FindDirectMessageRequest, opts ...grpc.CallOption) (*Space, error)
	// Creates a human membership or app membership for the calling app. Creating
	// memberships for other apps isn't supported. For an example, see
	// [Invite or add a user or a Google Chat app to a
	// space](https://developers.google.com/workspace/chat/create-members).
	// When creating a membership, if the specified member has their auto-accept
	// policy turned off, then they're invited, and must accept the space
	// invitation before joining. Otherwise, creating a membership adds the member
	// directly to the specified space. Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	//
	// To specify the member to add, set the `membership.member.name` in the
	// `CreateMembershipRequest`:
	//
	//   - To add the calling app to a space or a direct message between two human
	//     users, use `users/app`. Unable to add other
	//     apps to the space.
	//
	// - To add a human user, use `users/{user}`, where `{user}` can be the email
	// address for the user. For users in the same Workspace organization `{user}`
	// can also be the `id` for the person from the People API, or the `id` for
	// the user in the Directory API. For example, if the People API Person
	// profile ID for `user@example.com` is `123456789`, you can add the user to
	// the space by setting the `membership.member.name` to
	// `users/user@example.com` or `users/123456789`.
	CreateMembership(ctx context.Context, in *CreateMembershipRequest, opts ...grpc.CallOption) (*Membership, error)
	// Updates a membership. Requires [user
	// authentication](https://developers.google.com/chat/api/guides/auth/users).
	UpdateMembership(ctx context.Context, in *UpdateMembershipRequest, opts ...grpc.CallOption) (*Membership, error)
	// Deletes a membership. For an example, see
	// [Remove a user or a Google Chat app from a
	// space](https://developers.google.com/workspace/chat/delete-members).
	//
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	DeleteMembership(ctx context.Context, in *DeleteMembershipRequest, opts ...grpc.CallOption) (*Membership, error)
	// Creates a reaction and adds it to a message. Only unicode emojis are
	// supported. For an example, see
	// [Add a reaction to a
	// message](https://developers.google.com/workspace/chat/create-reactions).
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	CreateReaction(ctx context.Context, in *CreateReactionRequest, opts ...grpc.CallOption) (*Reaction, error)
	// Lists reactions to a message. For an example, see
	// [List reactions for a
	// message](https://developers.google.com/workspace/chat/list-reactions).
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	ListReactions(ctx context.Context, in *ListReactionsRequest, opts ...grpc.CallOption) (*ListReactionsResponse, error)
	// Deletes a reaction to a message. Only unicode emojis are supported.
	// For an example, see
	// [Delete a
	// reaction](https://developers.google.com/workspace/chat/delete-reactions).
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	DeleteReaction(ctx context.Context, in *DeleteReactionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Returns details about a user's read state within a space, used to identify
	// read and unread messages.
	//
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	GetSpaceReadState(ctx context.Context, in *GetSpaceReadStateRequest, opts ...grpc.CallOption) (*SpaceReadState, error)
	// Updates a user's read state within a space, used to identify read and
	// unread messages.
	//
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	UpdateSpaceReadState(ctx context.Context, in *UpdateSpaceReadStateRequest, opts ...grpc.CallOption) (*SpaceReadState, error)
	// Returns details about a user's read state within a thread, used to identify
	// read and unread messages.
	//
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	GetThreadReadState(ctx context.Context, in *GetThreadReadStateRequest, opts ...grpc.CallOption) (*ThreadReadState, error)
}

type chatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceClient(cc grpc.ClientConnInterface) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) CreateMessage(ctx context.Context, in *CreateMessageRequest, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/google.chat.v1.ChatService/CreateMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ListMessages(ctx context.Context, in *ListMessagesRequest, opts ...grpc.CallOption) (*ListMessagesResponse, error) {
	out := new(ListMessagesResponse)
	err := c.cc.Invoke(ctx, "/google.chat.v1.ChatService/ListMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ListMemberships(ctx context.Context, in *ListMembershipsRequest, opts ...grpc.CallOption) (*ListMembershipsResponse, error) {
	out := new(ListMembershipsResponse)
	err := c.cc.Invoke(ctx, "/google.chat.v1.ChatService/ListMemberships", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetMembership(ctx context.Context, in *GetMembershipRequest, opts ...grpc.CallOption) (*Membership, error) {
	out := new(Membership)
	err := c.cc.Invoke(ctx, "/google.chat.v1.ChatService/GetMembership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetMessage(ctx context.Context, in *GetMessageRequest, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/google.chat.v1.ChatService/GetMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) UpdateMessage(ctx context.Context, in *UpdateMessageRequest, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/google.chat.v1.ChatService/UpdateMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/google.chat.v1.ChatService/DeleteMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetAttachment(ctx context.Context, in *GetAttachmentRequest, opts ...grpc.CallOption) (*Attachment, error) {
	out := new(Attachment)
	err := c.cc.Invoke(ctx, "/google.chat.v1.ChatService/GetAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) UploadAttachment(ctx context.Context, in *UploadAttachmentRequest, opts ...grpc.CallOption) (*UploadAttachmentResponse, error) {
	out := new(UploadAttachmentResponse)
	err := c.cc.Invoke(ctx, "/google.chat.v1.ChatService/UploadAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ListSpaces(ctx context.Context, in *ListSpacesRequest, opts ...grpc.CallOption) (*ListSpacesResponse, error) {
	out := new(ListSpacesResponse)
	err := c.cc.Invoke(ctx, "/google.chat.v1.ChatService/ListSpaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetSpace(ctx context.Context, in *GetSpaceRequest, opts ...grpc.CallOption) (*Space, error) {
	out := new(Space)
	err := c.cc.Invoke(ctx, "/google.chat.v1.ChatService/GetSpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) CreateSpace(ctx context.Context, in *CreateSpaceRequest, opts ...grpc.CallOption) (*Space, error) {
	out := new(Space)
	err := c.cc.Invoke(ctx, "/google.chat.v1.ChatService/CreateSpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) SetUpSpace(ctx context.Context, in *SetUpSpaceRequest, opts ...grpc.CallOption) (*Space, error) {
	out := new(Space)
	err := c.cc.Invoke(ctx, "/google.chat.v1.ChatService/SetUpSpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) UpdateSpace(ctx context.Context, in *UpdateSpaceRequest, opts ...grpc.CallOption) (*Space, error) {
	out := new(Space)
	err := c.cc.Invoke(ctx, "/google.chat.v1.ChatService/UpdateSpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) DeleteSpace(ctx context.Context, in *DeleteSpaceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/google.chat.v1.ChatService/DeleteSpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) CompleteImportSpace(ctx context.Context, in *CompleteImportSpaceRequest, opts ...grpc.CallOption) (*CompleteImportSpaceResponse, error) {
	out := new(CompleteImportSpaceResponse)
	err := c.cc.Invoke(ctx, "/google.chat.v1.ChatService/CompleteImportSpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) FindDirectMessage(ctx context.Context, in *FindDirectMessageRequest, opts ...grpc.CallOption) (*Space, error) {
	out := new(Space)
	err := c.cc.Invoke(ctx, "/google.chat.v1.ChatService/FindDirectMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) CreateMembership(ctx context.Context, in *CreateMembershipRequest, opts ...grpc.CallOption) (*Membership, error) {
	out := new(Membership)
	err := c.cc.Invoke(ctx, "/google.chat.v1.ChatService/CreateMembership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) UpdateMembership(ctx context.Context, in *UpdateMembershipRequest, opts ...grpc.CallOption) (*Membership, error) {
	out := new(Membership)
	err := c.cc.Invoke(ctx, "/google.chat.v1.ChatService/UpdateMembership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) DeleteMembership(ctx context.Context, in *DeleteMembershipRequest, opts ...grpc.CallOption) (*Membership, error) {
	out := new(Membership)
	err := c.cc.Invoke(ctx, "/google.chat.v1.ChatService/DeleteMembership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) CreateReaction(ctx context.Context, in *CreateReactionRequest, opts ...grpc.CallOption) (*Reaction, error) {
	out := new(Reaction)
	err := c.cc.Invoke(ctx, "/google.chat.v1.ChatService/CreateReaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ListReactions(ctx context.Context, in *ListReactionsRequest, opts ...grpc.CallOption) (*ListReactionsResponse, error) {
	out := new(ListReactionsResponse)
	err := c.cc.Invoke(ctx, "/google.chat.v1.ChatService/ListReactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) DeleteReaction(ctx context.Context, in *DeleteReactionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/google.chat.v1.ChatService/DeleteReaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetSpaceReadState(ctx context.Context, in *GetSpaceReadStateRequest, opts ...grpc.CallOption) (*SpaceReadState, error) {
	out := new(SpaceReadState)
	err := c.cc.Invoke(ctx, "/google.chat.v1.ChatService/GetSpaceReadState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) UpdateSpaceReadState(ctx context.Context, in *UpdateSpaceReadStateRequest, opts ...grpc.CallOption) (*SpaceReadState, error) {
	out := new(SpaceReadState)
	err := c.cc.Invoke(ctx, "/google.chat.v1.ChatService/UpdateSpaceReadState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetThreadReadState(ctx context.Context, in *GetThreadReadStateRequest, opts ...grpc.CallOption) (*ThreadReadState, error) {
	out := new(ThreadReadState)
	err := c.cc.Invoke(ctx, "/google.chat.v1.ChatService/GetThreadReadState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServiceServer is the server API for ChatService service.
type ChatServiceServer interface {
	// Creates a message in a Google Chat space. For an example, see [Send a
	// message](https://developers.google.com/workspace/chat/create-messages).
	//
	// Calling this method requires
	// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize)
	// and supports the following authentication types:
	//
	// - For text messages, user authentication or app authentication are
	// supported.
	// - For card messages, only app authentication is supported. (Only Chat apps
	// can create card messages.)
	CreateMessage(context.Context, *CreateMessageRequest) (*Message, error)
	// Lists messages in a space that the caller is a member of, including
	// messages from blocked members and spaces. For an example, see
	// [List messages](/chat/api/guides/v1/messages/list).
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	ListMessages(context.Context, *ListMessagesRequest) (*ListMessagesResponse, error)
	// Lists memberships in a space. For an example, see [List users and Google
	// Chat apps in a
	// space](https://developers.google.com/workspace/chat/list-members). Listing
	// memberships with [app
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
	// lists memberships in spaces that the Chat app has
	// access to, but excludes Chat app memberships,
	// including its own. Listing memberships with
	// [User
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
	// lists memberships in spaces that the authenticated user has access to.
	//
	// Requires
	// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
	// Supports
	// [app
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
	// and [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	ListMemberships(context.Context, *ListMembershipsRequest) (*ListMembershipsResponse, error)
	// Returns details about a membership. For an example, see
	// [Get details about a user's or Google Chat app's
	// membership](https://developers.google.com/workspace/chat/get-members).
	//
	// Requires
	// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
	// Supports
	// [app
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
	// and [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	GetMembership(context.Context, *GetMembershipRequest) (*Membership, error)
	// Returns details about a message.
	// For an example, see [Get details about a
	// message](https://developers.google.com/workspace/chat/get-messages).
	//
	// Requires
	// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
	// Supports
	// [app
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
	// and [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	//
	// Note: Might return a message from a blocked member or space.
	GetMessage(context.Context, *GetMessageRequest) (*Message, error)
	// Updates a message. There's a difference between the `patch` and `update`
	// methods. The `patch`
	// method uses a `patch` request while the `update` method uses a `put`
	// request. We recommend using the `patch` method. For an example, see
	// [Update a
	// message](https://developers.google.com/workspace/chat/update-messages).
	//
	// Requires
	// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
	// Supports
	// [app
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
	// and [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	// When using app authentication, requests can only update messages
	// created by the calling Chat app.
	UpdateMessage(context.Context, *UpdateMessageRequest) (*Message, error)
	// Deletes a message.
	// For an example, see [Delete a
	// message](https://developers.google.com/workspace/chat/delete-messages).
	//
	// Requires
	// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
	// Supports
	// [app
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
	// and [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	// When using app authentication, requests can only delete messages
	// created by the calling Chat app.
	DeleteMessage(context.Context, *DeleteMessageRequest) (*emptypb.Empty, error)
	// Gets the metadata of a message attachment. The attachment data is fetched
	// using the [media
	// API](https://developers.google.com/workspace/chat/api/reference/rest/v1/media/download).
	// For an example, see
	// [Get metadata about a message
	// attachment](https://developers.google.com/workspace/chat/get-media-attachments).
	// Requires [app
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app).
	GetAttachment(context.Context, *GetAttachmentRequest) (*Attachment, error)
	// Uploads an attachment. For an example, see
	// [Upload media as a file
	// attachment](https://developers.google.com/workspace/chat/upload-media-attachments).
	// Requires user
	// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	//
	// You can upload attachments up to 200 MB. Certain file types aren't
	// supported. For details, see [File types blocked by Google
	// Chat](https://support.google.com/chat/answer/7651457?&co=GENIE.Platform%3DDesktop#File%20types%20blocked%20in%20Google%20Chat).
	UploadAttachment(context.Context, *UploadAttachmentRequest) (*UploadAttachmentResponse, error)
	// Lists spaces the caller is a member of. Group chats and DMs aren't listed
	// until the first message is sent. For an example, see
	// [List
	// spaces](https://developers.google.com/workspace/chat/list-spaces).
	//
	// Requires
	// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
	// Supports
	// [app
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
	// and [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	//
	// Lists spaces visible to the caller or authenticated user. Group chats
	// and DMs aren't listed until the first message is sent.
	ListSpaces(context.Context, *ListSpacesRequest) (*ListSpacesResponse, error)
	// Returns details about a space. For an example, see
	// [Get details about a
	// space](https://developers.google.com/workspace/chat/get-spaces).
	//
	// Requires
	// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
	// Supports
	// [app
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
	// and [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	GetSpace(context.Context, *GetSpaceRequest) (*Space, error)
	// Creates a named space. Spaces grouped by topics aren't supported. For an
	// example, see [Create a
	// space](https://developers.google.com/workspace/chat/create-spaces).
	//
	//	If you receive the error message `ALREADY_EXISTS` when creating
	//	a space, try a different `displayName`. An existing space within
	//	the Google Workspace organization might already use this display name.
	//
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	CreateSpace(context.Context, *CreateSpaceRequest) (*Space, error)
	// Creates a space and adds specified users to it. The calling user is
	// automatically added to the space, and shouldn't be specified as a
	// membership in the request. For an example, see
	// [Set up a space with initial
	// members](https://developers.google.com/workspace/chat/set-up-spaces).
	//
	// To specify the human members to add, add memberships with the appropriate
	// `member.name` in the `SetUpSpaceRequest`. To add a human user, use
	// `users/{user}`, where `{user}` can be the email address for the user. For
	// users in the same Workspace organization `{user}` can also be the `id` for
	// the person from the People API, or the `id` for the user in the Directory
	// API. For example, if the People API Person profile ID for
	// `user@example.com` is `123456789`, you can add the user to the space by
	// setting the `membership.member.name` to `users/user@example.com` or
	// `users/123456789`.
	//
	// For a space or group chat, if the caller blocks or is blocked by some
	// members, then those members aren't added to the created space.
	//
	// To create a direct message (DM) between the calling user and another human
	// user, specify exactly one membership to represent the human user. If
	// one user blocks the other, the request fails and the DM isn't created.
	//
	// To create a DM between the calling user and the calling app, set
	// `Space.singleUserBotDm` to `true` and don't specify any memberships. You
	// can only use this method to set up a DM with the calling app. To add the
	// calling app as a member of a space or an existing DM between two human
	// users, see
	// [Invite or add a user or app to a
	// space](https://developers.google.com/workspace/chat/create-members).
	//
	// If a DM already exists between two users, even when one user blocks the
	// other at the time a request is made, then the existing DM is returned.
	//
	// Spaces with threaded replies aren't supported. If you receive the error
	// message `ALREADY_EXISTS` when setting up a space, try a different
	// `displayName`. An existing space within the Google Workspace organization
	// might already use this display name.
	//
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	SetUpSpace(context.Context, *SetUpSpaceRequest) (*Space, error)
	// Updates a space. For an example, see
	// [Update a
	// space](https://developers.google.com/workspace/chat/update-spaces).
	//
	// If you're updating the `displayName` field and receive the error message
	// `ALREADY_EXISTS`, try a different display name.. An existing space within
	// the Google Workspace organization might already use this display name.
	//
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	UpdateSpace(context.Context, *UpdateSpaceRequest) (*Space, error)
	// Deletes a named space. Always performs a cascading delete, which means
	// that the space's child resources—like messages posted in the space and
	// memberships in the space—are also deleted. For an example, see
	// [Delete a
	// space](https://developers.google.com/workspace/chat/delete-spaces).
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
	// from a user who has permission to delete the space.
	DeleteSpace(context.Context, *DeleteSpaceRequest) (*emptypb.Empty, error)
	// Completes the
	// [import process](https://developers.google.com/workspace/chat/import-data)
	// for the specified space and makes it visible to users.
	// Requires app authentication and domain-wide delegation. For more
	// information, see [Authorize Google Chat apps to import
	// data](https://developers.google.com/workspace/chat/authorize-import).
	CompleteImportSpace(context.Context, *CompleteImportSpaceRequest) (*CompleteImportSpaceResponse, error)
	// Returns the existing direct message with the specified user. If no direct
	// message space is found, returns a `404 NOT_FOUND` error. For an example,
	// see
	// [Find a direct message](/chat/api/guides/v1/spaces/find-direct-message).
	//
	// With [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user),
	// returns the direct message space between the specified user and the
	// authenticated user.
	//
	// With [app
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app),
	// returns the direct message space between the specified user and the calling
	// Chat app.
	//
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
	// or [app
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app).
	FindDirectMessage(context.Context, *FindDirectMessageRequest) (*Space, error)
	// Creates a human membership or app membership for the calling app. Creating
	// memberships for other apps isn't supported. For an example, see
	// [Invite or add a user or a Google Chat app to a
	// space](https://developers.google.com/workspace/chat/create-members).
	// When creating a membership, if the specified member has their auto-accept
	// policy turned off, then they're invited, and must accept the space
	// invitation before joining. Otherwise, creating a membership adds the member
	// directly to the specified space. Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	//
	// To specify the member to add, set the `membership.member.name` in the
	// `CreateMembershipRequest`:
	//
	//   - To add the calling app to a space or a direct message between two human
	//     users, use `users/app`. Unable to add other
	//     apps to the space.
	//
	// - To add a human user, use `users/{user}`, where `{user}` can be the email
	// address for the user. For users in the same Workspace organization `{user}`
	// can also be the `id` for the person from the People API, or the `id` for
	// the user in the Directory API. For example, if the People API Person
	// profile ID for `user@example.com` is `123456789`, you can add the user to
	// the space by setting the `membership.member.name` to
	// `users/user@example.com` or `users/123456789`.
	CreateMembership(context.Context, *CreateMembershipRequest) (*Membership, error)
	// Updates a membership. Requires [user
	// authentication](https://developers.google.com/chat/api/guides/auth/users).
	UpdateMembership(context.Context, *UpdateMembershipRequest) (*Membership, error)
	// Deletes a membership. For an example, see
	// [Remove a user or a Google Chat app from a
	// space](https://developers.google.com/workspace/chat/delete-members).
	//
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	DeleteMembership(context.Context, *DeleteMembershipRequest) (*Membership, error)
	// Creates a reaction and adds it to a message. Only unicode emojis are
	// supported. For an example, see
	// [Add a reaction to a
	// message](https://developers.google.com/workspace/chat/create-reactions).
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	CreateReaction(context.Context, *CreateReactionRequest) (*Reaction, error)
	// Lists reactions to a message. For an example, see
	// [List reactions for a
	// message](https://developers.google.com/workspace/chat/list-reactions).
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	ListReactions(context.Context, *ListReactionsRequest) (*ListReactionsResponse, error)
	// Deletes a reaction to a message. Only unicode emojis are supported.
	// For an example, see
	// [Delete a
	// reaction](https://developers.google.com/workspace/chat/delete-reactions).
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	DeleteReaction(context.Context, *DeleteReactionRequest) (*emptypb.Empty, error)
	// Returns details about a user's read state within a space, used to identify
	// read and unread messages.
	//
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	GetSpaceReadState(context.Context, *GetSpaceReadStateRequest) (*SpaceReadState, error)
	// Updates a user's read state within a space, used to identify read and
	// unread messages.
	//
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	UpdateSpaceReadState(context.Context, *UpdateSpaceReadStateRequest) (*SpaceReadState, error)
	// Returns details about a user's read state within a thread, used to identify
	// read and unread messages.
	//
	// Requires [user
	// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
	GetThreadReadState(context.Context, *GetThreadReadStateRequest) (*ThreadReadState, error)
}

// UnimplementedChatServiceServer can be embedded to have forward compatible implementations.
type UnimplementedChatServiceServer struct {
}

func (*UnimplementedChatServiceServer) CreateMessage(context.Context, *CreateMessageRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMessage not implemented")
}
func (*UnimplementedChatServiceServer) ListMessages(context.Context, *ListMessagesRequest) (*ListMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMessages not implemented")
}
func (*UnimplementedChatServiceServer) ListMemberships(context.Context, *ListMembershipsRequest) (*ListMembershipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMemberships not implemented")
}
func (*UnimplementedChatServiceServer) GetMembership(context.Context, *GetMembershipRequest) (*Membership, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMembership not implemented")
}
func (*UnimplementedChatServiceServer) GetMessage(context.Context, *GetMessageRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessage not implemented")
}
func (*UnimplementedChatServiceServer) UpdateMessage(context.Context, *UpdateMessageRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMessage not implemented")
}
func (*UnimplementedChatServiceServer) DeleteMessage(context.Context, *DeleteMessageRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessage not implemented")
}
func (*UnimplementedChatServiceServer) GetAttachment(context.Context, *GetAttachmentRequest) (*Attachment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttachment not implemented")
}
func (*UnimplementedChatServiceServer) UploadAttachment(context.Context, *UploadAttachmentRequest) (*UploadAttachmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadAttachment not implemented")
}
func (*UnimplementedChatServiceServer) ListSpaces(context.Context, *ListSpacesRequest) (*ListSpacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSpaces not implemented")
}
func (*UnimplementedChatServiceServer) GetSpace(context.Context, *GetSpaceRequest) (*Space, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpace not implemented")
}
func (*UnimplementedChatServiceServer) CreateSpace(context.Context, *CreateSpaceRequest) (*Space, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSpace not implemented")
}
func (*UnimplementedChatServiceServer) SetUpSpace(context.Context, *SetUpSpaceRequest) (*Space, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUpSpace not implemented")
}
func (*UnimplementedChatServiceServer) UpdateSpace(context.Context, *UpdateSpaceRequest) (*Space, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSpace not implemented")
}
func (*UnimplementedChatServiceServer) DeleteSpace(context.Context, *DeleteSpaceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSpace not implemented")
}
func (*UnimplementedChatServiceServer) CompleteImportSpace(context.Context, *CompleteImportSpaceRequest) (*CompleteImportSpaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteImportSpace not implemented")
}
func (*UnimplementedChatServiceServer) FindDirectMessage(context.Context, *FindDirectMessageRequest) (*Space, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindDirectMessage not implemented")
}
func (*UnimplementedChatServiceServer) CreateMembership(context.Context, *CreateMembershipRequest) (*Membership, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMembership not implemented")
}
func (*UnimplementedChatServiceServer) UpdateMembership(context.Context, *UpdateMembershipRequest) (*Membership, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMembership not implemented")
}
func (*UnimplementedChatServiceServer) DeleteMembership(context.Context, *DeleteMembershipRequest) (*Membership, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMembership not implemented")
}
func (*UnimplementedChatServiceServer) CreateReaction(context.Context, *CreateReactionRequest) (*Reaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReaction not implemented")
}
func (*UnimplementedChatServiceServer) ListReactions(context.Context, *ListReactionsRequest) (*ListReactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReactions not implemented")
}
func (*UnimplementedChatServiceServer) DeleteReaction(context.Context, *DeleteReactionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReaction not implemented")
}
func (*UnimplementedChatServiceServer) GetSpaceReadState(context.Context, *GetSpaceReadStateRequest) (*SpaceReadState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpaceReadState not implemented")
}
func (*UnimplementedChatServiceServer) UpdateSpaceReadState(context.Context, *UpdateSpaceReadStateRequest) (*SpaceReadState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSpaceReadState not implemented")
}
func (*UnimplementedChatServiceServer) GetThreadReadState(context.Context, *GetThreadReadStateRequest) (*ThreadReadState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThreadReadState not implemented")
}

func RegisterChatServiceServer(s *grpc.Server, srv ChatServiceServer) {
	s.RegisterService(&_ChatService_serviceDesc, srv)
}

func _ChatService_CreateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CreateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.chat.v1.ChatService/CreateMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CreateMessage(ctx, req.(*CreateMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ListMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ListMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.chat.v1.ChatService/ListMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ListMessages(ctx, req.(*ListMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ListMemberships_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMembershipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ListMemberships(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.chat.v1.ChatService/ListMemberships",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ListMemberships(ctx, req.(*ListMembershipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMembershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.chat.v1.ChatService/GetMembership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetMembership(ctx, req.(*GetMembershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.chat.v1.ChatService/GetMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetMessage(ctx, req.(*GetMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_UpdateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).UpdateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.chat.v1.ChatService/UpdateMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).UpdateMessage(ctx, req.(*UpdateMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_DeleteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).DeleteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.chat.v1.ChatService/DeleteMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).DeleteMessage(ctx, req.(*DeleteMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.chat.v1.ChatService/GetAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetAttachment(ctx, req.(*GetAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_UploadAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).UploadAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.chat.v1.ChatService/UploadAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).UploadAttachment(ctx, req.(*UploadAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ListSpaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSpacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ListSpaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.chat.v1.ChatService/ListSpaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ListSpaces(ctx, req.(*ListSpacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.chat.v1.ChatService/GetSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetSpace(ctx, req.(*GetSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_CreateSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CreateSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.chat.v1.ChatService/CreateSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CreateSpace(ctx, req.(*CreateSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_SetUpSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUpSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).SetUpSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.chat.v1.ChatService/SetUpSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).SetUpSpace(ctx, req.(*SetUpSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_UpdateSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).UpdateSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.chat.v1.ChatService/UpdateSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).UpdateSpace(ctx, req.(*UpdateSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_DeleteSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).DeleteSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.chat.v1.ChatService/DeleteSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).DeleteSpace(ctx, req.(*DeleteSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_CompleteImportSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteImportSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CompleteImportSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.chat.v1.ChatService/CompleteImportSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CompleteImportSpace(ctx, req.(*CompleteImportSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_FindDirectMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindDirectMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).FindDirectMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.chat.v1.ChatService/FindDirectMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).FindDirectMessage(ctx, req.(*FindDirectMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_CreateMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMembershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CreateMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.chat.v1.ChatService/CreateMembership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CreateMembership(ctx, req.(*CreateMembershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_UpdateMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMembershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).UpdateMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.chat.v1.ChatService/UpdateMembership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).UpdateMembership(ctx, req.(*UpdateMembershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_DeleteMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMembershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).DeleteMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.chat.v1.ChatService/DeleteMembership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).DeleteMembership(ctx, req.(*DeleteMembershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_CreateReaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CreateReaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.chat.v1.ChatService/CreateReaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CreateReaction(ctx, req.(*CreateReactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ListReactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ListReactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.chat.v1.ChatService/ListReactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ListReactions(ctx, req.(*ListReactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_DeleteReaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).DeleteReaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.chat.v1.ChatService/DeleteReaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).DeleteReaction(ctx, req.(*DeleteReactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetSpaceReadState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpaceReadStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetSpaceReadState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.chat.v1.ChatService/GetSpaceReadState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetSpaceReadState(ctx, req.(*GetSpaceReadStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_UpdateSpaceReadState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSpaceReadStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).UpdateSpaceReadState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.chat.v1.ChatService/UpdateSpaceReadState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).UpdateSpaceReadState(ctx, req.(*UpdateSpaceReadStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetThreadReadState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetThreadReadStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetThreadReadState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.chat.v1.ChatService/GetThreadReadState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetThreadReadState(ctx, req.(*GetThreadReadStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChatService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.chat.v1.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMessage",
			Handler:    _ChatService_CreateMessage_Handler,
		},
		{
			MethodName: "ListMessages",
			Handler:    _ChatService_ListMessages_Handler,
		},
		{
			MethodName: "ListMemberships",
			Handler:    _ChatService_ListMemberships_Handler,
		},
		{
			MethodName: "GetMembership",
			Handler:    _ChatService_GetMembership_Handler,
		},
		{
			MethodName: "GetMessage",
			Handler:    _ChatService_GetMessage_Handler,
		},
		{
			MethodName: "UpdateMessage",
			Handler:    _ChatService_UpdateMessage_Handler,
		},
		{
			MethodName: "DeleteMessage",
			Handler:    _ChatService_DeleteMessage_Handler,
		},
		{
			MethodName: "GetAttachment",
			Handler:    _ChatService_GetAttachment_Handler,
		},
		{
			MethodName: "UploadAttachment",
			Handler:    _ChatService_UploadAttachment_Handler,
		},
		{
			MethodName: "ListSpaces",
			Handler:    _ChatService_ListSpaces_Handler,
		},
		{
			MethodName: "GetSpace",
			Handler:    _ChatService_GetSpace_Handler,
		},
		{
			MethodName: "CreateSpace",
			Handler:    _ChatService_CreateSpace_Handler,
		},
		{
			MethodName: "SetUpSpace",
			Handler:    _ChatService_SetUpSpace_Handler,
		},
		{
			MethodName: "UpdateSpace",
			Handler:    _ChatService_UpdateSpace_Handler,
		},
		{
			MethodName: "DeleteSpace",
			Handler:    _ChatService_DeleteSpace_Handler,
		},
		{
			MethodName: "CompleteImportSpace",
			Handler:    _ChatService_CompleteImportSpace_Handler,
		},
		{
			MethodName: "FindDirectMessage",
			Handler:    _ChatService_FindDirectMessage_Handler,
		},
		{
			MethodName: "CreateMembership",
			Handler:    _ChatService_CreateMembership_Handler,
		},
		{
			MethodName: "UpdateMembership",
			Handler:    _ChatService_UpdateMembership_Handler,
		},
		{
			MethodName: "DeleteMembership",
			Handler:    _ChatService_DeleteMembership_Handler,
		},
		{
			MethodName: "CreateReaction",
			Handler:    _ChatService_CreateReaction_Handler,
		},
		{
			MethodName: "ListReactions",
			Handler:    _ChatService_ListReactions_Handler,
		},
		{
			MethodName: "DeleteReaction",
			Handler:    _ChatService_DeleteReaction_Handler,
		},
		{
			MethodName: "GetSpaceReadState",
			Handler:    _ChatService_GetSpaceReadState_Handler,
		},
		{
			MethodName: "UpdateSpaceReadState",
			Handler:    _ChatService_UpdateSpaceReadState_Handler,
		},
		{
			MethodName: "GetThreadReadState",
			Handler:    _ChatService_GetThreadReadState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/chat/v1/chat_service.proto",
}
