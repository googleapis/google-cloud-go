// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/visionai/v1/warehouse.proto

package visionaipb

import (
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Warehouse_CreateAsset_FullMethodName          = "/google.cloud.visionai.v1.Warehouse/CreateAsset"
	Warehouse_UpdateAsset_FullMethodName          = "/google.cloud.visionai.v1.Warehouse/UpdateAsset"
	Warehouse_GetAsset_FullMethodName             = "/google.cloud.visionai.v1.Warehouse/GetAsset"
	Warehouse_ListAssets_FullMethodName           = "/google.cloud.visionai.v1.Warehouse/ListAssets"
	Warehouse_DeleteAsset_FullMethodName          = "/google.cloud.visionai.v1.Warehouse/DeleteAsset"
	Warehouse_UploadAsset_FullMethodName          = "/google.cloud.visionai.v1.Warehouse/UploadAsset"
	Warehouse_GenerateRetrievalUrl_FullMethodName = "/google.cloud.visionai.v1.Warehouse/GenerateRetrievalUrl"
	Warehouse_AnalyzeAsset_FullMethodName         = "/google.cloud.visionai.v1.Warehouse/AnalyzeAsset"
	Warehouse_IndexAsset_FullMethodName           = "/google.cloud.visionai.v1.Warehouse/IndexAsset"
	Warehouse_RemoveIndexAsset_FullMethodName     = "/google.cloud.visionai.v1.Warehouse/RemoveIndexAsset"
	Warehouse_ViewIndexedAssets_FullMethodName    = "/google.cloud.visionai.v1.Warehouse/ViewIndexedAssets"
	Warehouse_CreateIndex_FullMethodName          = "/google.cloud.visionai.v1.Warehouse/CreateIndex"
	Warehouse_UpdateIndex_FullMethodName          = "/google.cloud.visionai.v1.Warehouse/UpdateIndex"
	Warehouse_GetIndex_FullMethodName             = "/google.cloud.visionai.v1.Warehouse/GetIndex"
	Warehouse_ListIndexes_FullMethodName          = "/google.cloud.visionai.v1.Warehouse/ListIndexes"
	Warehouse_DeleteIndex_FullMethodName          = "/google.cloud.visionai.v1.Warehouse/DeleteIndex"
	Warehouse_CreateCorpus_FullMethodName         = "/google.cloud.visionai.v1.Warehouse/CreateCorpus"
	Warehouse_GetCorpus_FullMethodName            = "/google.cloud.visionai.v1.Warehouse/GetCorpus"
	Warehouse_UpdateCorpus_FullMethodName         = "/google.cloud.visionai.v1.Warehouse/UpdateCorpus"
	Warehouse_ListCorpora_FullMethodName          = "/google.cloud.visionai.v1.Warehouse/ListCorpora"
	Warehouse_DeleteCorpus_FullMethodName         = "/google.cloud.visionai.v1.Warehouse/DeleteCorpus"
	Warehouse_AnalyzeCorpus_FullMethodName        = "/google.cloud.visionai.v1.Warehouse/AnalyzeCorpus"
	Warehouse_CreateDataSchema_FullMethodName     = "/google.cloud.visionai.v1.Warehouse/CreateDataSchema"
	Warehouse_UpdateDataSchema_FullMethodName     = "/google.cloud.visionai.v1.Warehouse/UpdateDataSchema"
	Warehouse_GetDataSchema_FullMethodName        = "/google.cloud.visionai.v1.Warehouse/GetDataSchema"
	Warehouse_DeleteDataSchema_FullMethodName     = "/google.cloud.visionai.v1.Warehouse/DeleteDataSchema"
	Warehouse_ListDataSchemas_FullMethodName      = "/google.cloud.visionai.v1.Warehouse/ListDataSchemas"
	Warehouse_CreateAnnotation_FullMethodName     = "/google.cloud.visionai.v1.Warehouse/CreateAnnotation"
	Warehouse_GetAnnotation_FullMethodName        = "/google.cloud.visionai.v1.Warehouse/GetAnnotation"
	Warehouse_ListAnnotations_FullMethodName      = "/google.cloud.visionai.v1.Warehouse/ListAnnotations"
	Warehouse_UpdateAnnotation_FullMethodName     = "/google.cloud.visionai.v1.Warehouse/UpdateAnnotation"
	Warehouse_DeleteAnnotation_FullMethodName     = "/google.cloud.visionai.v1.Warehouse/DeleteAnnotation"
	Warehouse_IngestAsset_FullMethodName          = "/google.cloud.visionai.v1.Warehouse/IngestAsset"
	Warehouse_ClipAsset_FullMethodName            = "/google.cloud.visionai.v1.Warehouse/ClipAsset"
	Warehouse_GenerateHlsUri_FullMethodName       = "/google.cloud.visionai.v1.Warehouse/GenerateHlsUri"
	Warehouse_ImportAssets_FullMethodName         = "/google.cloud.visionai.v1.Warehouse/ImportAssets"
	Warehouse_CreateSearchConfig_FullMethodName   = "/google.cloud.visionai.v1.Warehouse/CreateSearchConfig"
	Warehouse_UpdateSearchConfig_FullMethodName   = "/google.cloud.visionai.v1.Warehouse/UpdateSearchConfig"
	Warehouse_GetSearchConfig_FullMethodName      = "/google.cloud.visionai.v1.Warehouse/GetSearchConfig"
	Warehouse_DeleteSearchConfig_FullMethodName   = "/google.cloud.visionai.v1.Warehouse/DeleteSearchConfig"
	Warehouse_ListSearchConfigs_FullMethodName    = "/google.cloud.visionai.v1.Warehouse/ListSearchConfigs"
	Warehouse_CreateSearchHypernym_FullMethodName = "/google.cloud.visionai.v1.Warehouse/CreateSearchHypernym"
	Warehouse_UpdateSearchHypernym_FullMethodName = "/google.cloud.visionai.v1.Warehouse/UpdateSearchHypernym"
	Warehouse_GetSearchHypernym_FullMethodName    = "/google.cloud.visionai.v1.Warehouse/GetSearchHypernym"
	Warehouse_DeleteSearchHypernym_FullMethodName = "/google.cloud.visionai.v1.Warehouse/DeleteSearchHypernym"
	Warehouse_ListSearchHypernyms_FullMethodName  = "/google.cloud.visionai.v1.Warehouse/ListSearchHypernyms"
	Warehouse_SearchAssets_FullMethodName         = "/google.cloud.visionai.v1.Warehouse/SearchAssets"
	Warehouse_SearchIndexEndpoint_FullMethodName  = "/google.cloud.visionai.v1.Warehouse/SearchIndexEndpoint"
	Warehouse_CreateIndexEndpoint_FullMethodName  = "/google.cloud.visionai.v1.Warehouse/CreateIndexEndpoint"
	Warehouse_GetIndexEndpoint_FullMethodName     = "/google.cloud.visionai.v1.Warehouse/GetIndexEndpoint"
	Warehouse_ListIndexEndpoints_FullMethodName   = "/google.cloud.visionai.v1.Warehouse/ListIndexEndpoints"
	Warehouse_UpdateIndexEndpoint_FullMethodName  = "/google.cloud.visionai.v1.Warehouse/UpdateIndexEndpoint"
	Warehouse_DeleteIndexEndpoint_FullMethodName  = "/google.cloud.visionai.v1.Warehouse/DeleteIndexEndpoint"
	Warehouse_DeployIndex_FullMethodName          = "/google.cloud.visionai.v1.Warehouse/DeployIndex"
	Warehouse_UndeployIndex_FullMethodName        = "/google.cloud.visionai.v1.Warehouse/UndeployIndex"
	Warehouse_CreateCollection_FullMethodName     = "/google.cloud.visionai.v1.Warehouse/CreateCollection"
	Warehouse_DeleteCollection_FullMethodName     = "/google.cloud.visionai.v1.Warehouse/DeleteCollection"
	Warehouse_GetCollection_FullMethodName        = "/google.cloud.visionai.v1.Warehouse/GetCollection"
	Warehouse_UpdateCollection_FullMethodName     = "/google.cloud.visionai.v1.Warehouse/UpdateCollection"
	Warehouse_ListCollections_FullMethodName      = "/google.cloud.visionai.v1.Warehouse/ListCollections"
	Warehouse_AddCollectionItem_FullMethodName    = "/google.cloud.visionai.v1.Warehouse/AddCollectionItem"
	Warehouse_RemoveCollectionItem_FullMethodName = "/google.cloud.visionai.v1.Warehouse/RemoveCollectionItem"
	Warehouse_ViewCollectionItems_FullMethodName  = "/google.cloud.visionai.v1.Warehouse/ViewCollectionItems"
)

// WarehouseClient is the client API for Warehouse service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WarehouseClient interface {
	// Creates an asset inside corpus.
	CreateAsset(ctx context.Context, in *CreateAssetRequest, opts ...grpc.CallOption) (*Asset, error)
	// Updates an asset inside corpus.
	UpdateAsset(ctx context.Context, in *UpdateAssetRequest, opts ...grpc.CallOption) (*Asset, error)
	// Reads an asset inside corpus.
	GetAsset(ctx context.Context, in *GetAssetRequest, opts ...grpc.CallOption) (*Asset, error)
	// Lists an list of assets inside corpus.
	ListAssets(ctx context.Context, in *ListAssetsRequest, opts ...grpc.CallOption) (*ListAssetsResponse, error)
	// Deletes asset inside corpus.
	DeleteAsset(ctx context.Context, in *DeleteAssetRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Upload asset by specifing the asset Cloud Storage uri.
	// For video warehouse, it requires users who call this API have read access
	// to the cloud storage file. Once it is uploaded, it can be retrieved by
	// GenerateRetrievalUrl API which by default, only can retrieve cloud storage
	// files from the same project of the warehouse. To allow retrieval cloud
	// storage files that are in a separate project, it requires to find the
	// vision ai service account (Go to IAM, check checkbox to show "Include
	// Google-provided role grants", search for "Cloud Vision AI Service Agent")
	// and grant the read access of the cloud storage files to that service
	// account.
	UploadAsset(ctx context.Context, in *UploadAssetRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Generates a signed url for downloading the asset.
	// For video warehouse, please see comment of UploadAsset about how to allow
	// retrieval of cloud storage files in a different project.
	GenerateRetrievalUrl(ctx context.Context, in *GenerateRetrievalUrlRequest, opts ...grpc.CallOption) (*GenerateRetrievalUrlResponse, error)
	// Analyze asset to power search capability.
	AnalyzeAsset(ctx context.Context, in *AnalyzeAssetRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Index one asset for search.
	// Supported corpus type: Corpus.Type.VIDEO_ON_DEMAND
	IndexAsset(ctx context.Context, in *IndexAssetRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Remove one asset's index data for search.
	// Supported corpus type: Corpus.Type.VIDEO_ON_DEMAND
	RemoveIndexAsset(ctx context.Context, in *RemoveIndexAssetRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists assets inside an index.
	ViewIndexedAssets(ctx context.Context, in *ViewIndexedAssetsRequest, opts ...grpc.CallOption) (*ViewIndexedAssetsResponse, error)
	// Creates an Index under the corpus.
	CreateIndex(ctx context.Context, in *CreateIndexRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates an Index under the corpus.
	// Users can perform a metadata-only update or trigger a full index rebuild
	// with different update_mask values.
	UpdateIndex(ctx context.Context, in *UpdateIndexRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets the details of a single Index under a Corpus.
	GetIndex(ctx context.Context, in *GetIndexRequest, opts ...grpc.CallOption) (*Index, error)
	// List all Indexes in a given Corpus.
	ListIndexes(ctx context.Context, in *ListIndexesRequest, opts ...grpc.CallOption) (*ListIndexesResponse, error)
	// Delete a single Index. In order to delete an index, the caller must
	// make sure that it is not deployed to any index endpoint.
	DeleteIndex(ctx context.Context, in *DeleteIndexRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Creates a corpus inside a project.
	CreateCorpus(ctx context.Context, in *CreateCorpusRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets corpus details inside a project.
	GetCorpus(ctx context.Context, in *GetCorpusRequest, opts ...grpc.CallOption) (*Corpus, error)
	// Updates a corpus in a project.
	UpdateCorpus(ctx context.Context, in *UpdateCorpusRequest, opts ...grpc.CallOption) (*Corpus, error)
	// Lists all corpora in a project.
	ListCorpora(ctx context.Context, in *ListCorporaRequest, opts ...grpc.CallOption) (*ListCorporaResponse, error)
	// Deletes a corpus only if its empty.
	// Returns empty response.
	DeleteCorpus(ctx context.Context, in *DeleteCorpusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Analyzes a corpus.
	AnalyzeCorpus(ctx context.Context, in *AnalyzeCorpusRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Creates data schema inside corpus.
	CreateDataSchema(ctx context.Context, in *CreateDataSchemaRequest, opts ...grpc.CallOption) (*DataSchema, error)
	// Updates data schema inside corpus.
	UpdateDataSchema(ctx context.Context, in *UpdateDataSchemaRequest, opts ...grpc.CallOption) (*DataSchema, error)
	// Gets data schema inside corpus.
	GetDataSchema(ctx context.Context, in *GetDataSchemaRequest, opts ...grpc.CallOption) (*DataSchema, error)
	// Deletes data schema inside corpus.
	DeleteDataSchema(ctx context.Context, in *DeleteDataSchemaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Lists a list of data schemas inside corpus.
	ListDataSchemas(ctx context.Context, in *ListDataSchemasRequest, opts ...grpc.CallOption) (*ListDataSchemasResponse, error)
	// Creates annotation inside asset.
	CreateAnnotation(ctx context.Context, in *CreateAnnotationRequest, opts ...grpc.CallOption) (*Annotation, error)
	// Reads annotation inside asset.
	GetAnnotation(ctx context.Context, in *GetAnnotationRequest, opts ...grpc.CallOption) (*Annotation, error)
	// Lists a list of annotations inside asset.
	ListAnnotations(ctx context.Context, in *ListAnnotationsRequest, opts ...grpc.CallOption) (*ListAnnotationsResponse, error)
	// Updates annotation inside asset.
	UpdateAnnotation(ctx context.Context, in *UpdateAnnotationRequest, opts ...grpc.CallOption) (*Annotation, error)
	// Deletes annotation inside asset.
	DeleteAnnotation(ctx context.Context, in *DeleteAnnotationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Ingests data for the asset. It is not allowed to ingest a data chunk which
	// is already expired according to TTL.
	// This method is only available via the gRPC API (not HTTP since
	// bi-directional streaming is not supported via HTTP).
	IngestAsset(ctx context.Context, opts ...grpc.CallOption) (Warehouse_IngestAssetClient, error)
	// Supported by STREAM_VIDEO corpus type.
	// Generates clips for downloading. The api takes in a time range, and
	// generates a clip of the first content available after start_time and
	// before end_time, which may overflow beyond these bounds.
	// Returned clips are truncated if the total size of the clips are larger
	// than 100MB.
	ClipAsset(ctx context.Context, in *ClipAssetRequest, opts ...grpc.CallOption) (*ClipAssetResponse, error)
	// Generates a uri for an HLS manifest. The api takes in a collection of time
	// ranges, and generates a URI for an HLS manifest that covers all the
	// requested time ranges.
	GenerateHlsUri(ctx context.Context, in *GenerateHlsUriRequest, opts ...grpc.CallOption) (*GenerateHlsUriResponse, error)
	// Imports assets (images plus annotations) from a meta file on cloud storage.
	// Each row in the meta file is corresponding to an image (specified by a
	// cloud storage uri) and its annotations.
	ImportAssets(ctx context.Context, in *ImportAssetsRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Creates a search configuration inside a corpus.
	//
	// Please follow the rules below to create a valid CreateSearchConfigRequest.
	// --- General Rules ---
	//  1. Request.search_config_id must not be associated with an existing
	//     SearchConfig.
	//  2. Request must contain at least one non-empty search_criteria_property or
	//     facet_property.
	//  3. mapped_fields must not be empty, and must map to existing UGA keys.
	//  4. All mapped_fields must be of the same type.
	//  5. All mapped_fields must share the same granularity.
	//  6. All mapped_fields must share the same semantic SearchConfig match
	//     options.
	//
	// For property-specific rules, please reference the comments for
	// FacetProperty and SearchCriteriaProperty.
	CreateSearchConfig(ctx context.Context, in *CreateSearchConfigRequest, opts ...grpc.CallOption) (*SearchConfig, error)
	// Updates a search configuration inside a corpus.
	//
	// Please follow the rules below to create a valid UpdateSearchConfigRequest.
	// --- General Rules ---
	// 1. Request.search_configuration.name must already exist.
	// 2. Request must contain at least one non-empty search_criteria_property or
	// facet_property.
	//  3. mapped_fields must not be empty, and must map to existing UGA keys.
	//  4. All mapped_fields must be of the same type.
	//  5. All mapped_fields must share the same granularity.
	//  6. All mapped_fields must share the same semantic SearchConfig match
	//     options.
	//
	// For property-specific rules, please reference the comments for
	// FacetProperty and SearchCriteriaProperty.
	UpdateSearchConfig(ctx context.Context, in *UpdateSearchConfigRequest, opts ...grpc.CallOption) (*SearchConfig, error)
	// Gets a search configuration inside a corpus.
	GetSearchConfig(ctx context.Context, in *GetSearchConfigRequest, opts ...grpc.CallOption) (*SearchConfig, error)
	// Deletes a search configuration inside a corpus.
	//
	// For a DeleteSearchConfigRequest to be valid,
	// Request.search_configuration.name must already exist.
	DeleteSearchConfig(ctx context.Context, in *DeleteSearchConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Lists all search configurations inside a corpus.
	ListSearchConfigs(ctx context.Context, in *ListSearchConfigsRequest, opts ...grpc.CallOption) (*ListSearchConfigsResponse, error)
	// Creates a SearchHypernym inside a corpus.
	CreateSearchHypernym(ctx context.Context, in *CreateSearchHypernymRequest, opts ...grpc.CallOption) (*SearchHypernym, error)
	// Updates a SearchHypernym inside a corpus.
	UpdateSearchHypernym(ctx context.Context, in *UpdateSearchHypernymRequest, opts ...grpc.CallOption) (*SearchHypernym, error)
	// Gets a SearchHypernym inside a corpus.
	GetSearchHypernym(ctx context.Context, in *GetSearchHypernymRequest, opts ...grpc.CallOption) (*SearchHypernym, error)
	// Deletes a SearchHypernym inside a corpus.
	DeleteSearchHypernym(ctx context.Context, in *DeleteSearchHypernymRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Lists SearchHypernyms inside a corpus.
	ListSearchHypernyms(ctx context.Context, in *ListSearchHypernymsRequest, opts ...grpc.CallOption) (*ListSearchHypernymsResponse, error)
	// Search media asset.
	SearchAssets(ctx context.Context, in *SearchAssetsRequest, opts ...grpc.CallOption) (*SearchAssetsResponse, error)
	// Search a deployed index endpoint (IMAGE corpus type only).
	SearchIndexEndpoint(ctx context.Context, in *SearchIndexEndpointRequest, opts ...grpc.CallOption) (*SearchIndexEndpointResponse, error)
	// Creates an IndexEndpoint.
	CreateIndexEndpoint(ctx context.Context, in *CreateIndexEndpointRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets an IndexEndpoint.
	GetIndexEndpoint(ctx context.Context, in *GetIndexEndpointRequest, opts ...grpc.CallOption) (*IndexEndpoint, error)
	// Lists all IndexEndpoints in a project.
	ListIndexEndpoints(ctx context.Context, in *ListIndexEndpointsRequest, opts ...grpc.CallOption) (*ListIndexEndpointsResponse, error)
	// Updates an IndexEndpoint.
	UpdateIndexEndpoint(ctx context.Context, in *UpdateIndexEndpointRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes an IndexEndpoint.
	DeleteIndexEndpoint(ctx context.Context, in *DeleteIndexEndpointRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deploys an Index to IndexEndpoint.
	DeployIndex(ctx context.Context, in *DeployIndexRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Undeploys an Index from IndexEndpoint.
	UndeployIndex(ctx context.Context, in *UndeployIndexRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Creates a collection.
	CreateCollection(ctx context.Context, in *CreateCollectionRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a collection.
	DeleteCollection(ctx context.Context, in *DeleteCollectionRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets a collection.
	GetCollection(ctx context.Context, in *GetCollectionRequest, opts ...grpc.CallOption) (*Collection, error)
	// Updates a collection.
	UpdateCollection(ctx context.Context, in *UpdateCollectionRequest, opts ...grpc.CallOption) (*Collection, error)
	// Lists collections inside a corpus.
	ListCollections(ctx context.Context, in *ListCollectionsRequest, opts ...grpc.CallOption) (*ListCollectionsResponse, error)
	// Adds an item into a Collection.
	AddCollectionItem(ctx context.Context, in *AddCollectionItemRequest, opts ...grpc.CallOption) (*AddCollectionItemResponse, error)
	// Removes an item from a collection.
	RemoveCollectionItem(ctx context.Context, in *RemoveCollectionItemRequest, opts ...grpc.CallOption) (*RemoveCollectionItemResponse, error)
	// View items inside a collection.
	ViewCollectionItems(ctx context.Context, in *ViewCollectionItemsRequest, opts ...grpc.CallOption) (*ViewCollectionItemsResponse, error)
}

type warehouseClient struct {
	cc grpc.ClientConnInterface
}

func NewWarehouseClient(cc grpc.ClientConnInterface) WarehouseClient {
	return &warehouseClient{cc}
}

func (c *warehouseClient) CreateAsset(ctx context.Context, in *CreateAssetRequest, opts ...grpc.CallOption) (*Asset, error) {
	out := new(Asset)
	err := c.cc.Invoke(ctx, Warehouse_CreateAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) UpdateAsset(ctx context.Context, in *UpdateAssetRequest, opts ...grpc.CallOption) (*Asset, error) {
	out := new(Asset)
	err := c.cc.Invoke(ctx, Warehouse_UpdateAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) GetAsset(ctx context.Context, in *GetAssetRequest, opts ...grpc.CallOption) (*Asset, error) {
	out := new(Asset)
	err := c.cc.Invoke(ctx, Warehouse_GetAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) ListAssets(ctx context.Context, in *ListAssetsRequest, opts ...grpc.CallOption) (*ListAssetsResponse, error) {
	out := new(ListAssetsResponse)
	err := c.cc.Invoke(ctx, Warehouse_ListAssets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) DeleteAsset(ctx context.Context, in *DeleteAssetRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, Warehouse_DeleteAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) UploadAsset(ctx context.Context, in *UploadAssetRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, Warehouse_UploadAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) GenerateRetrievalUrl(ctx context.Context, in *GenerateRetrievalUrlRequest, opts ...grpc.CallOption) (*GenerateRetrievalUrlResponse, error) {
	out := new(GenerateRetrievalUrlResponse)
	err := c.cc.Invoke(ctx, Warehouse_GenerateRetrievalUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) AnalyzeAsset(ctx context.Context, in *AnalyzeAssetRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, Warehouse_AnalyzeAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) IndexAsset(ctx context.Context, in *IndexAssetRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, Warehouse_IndexAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) RemoveIndexAsset(ctx context.Context, in *RemoveIndexAssetRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, Warehouse_RemoveIndexAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) ViewIndexedAssets(ctx context.Context, in *ViewIndexedAssetsRequest, opts ...grpc.CallOption) (*ViewIndexedAssetsResponse, error) {
	out := new(ViewIndexedAssetsResponse)
	err := c.cc.Invoke(ctx, Warehouse_ViewIndexedAssets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) CreateIndex(ctx context.Context, in *CreateIndexRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, Warehouse_CreateIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) UpdateIndex(ctx context.Context, in *UpdateIndexRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, Warehouse_UpdateIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) GetIndex(ctx context.Context, in *GetIndexRequest, opts ...grpc.CallOption) (*Index, error) {
	out := new(Index)
	err := c.cc.Invoke(ctx, Warehouse_GetIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) ListIndexes(ctx context.Context, in *ListIndexesRequest, opts ...grpc.CallOption) (*ListIndexesResponse, error) {
	out := new(ListIndexesResponse)
	err := c.cc.Invoke(ctx, Warehouse_ListIndexes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) DeleteIndex(ctx context.Context, in *DeleteIndexRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, Warehouse_DeleteIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) CreateCorpus(ctx context.Context, in *CreateCorpusRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, Warehouse_CreateCorpus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) GetCorpus(ctx context.Context, in *GetCorpusRequest, opts ...grpc.CallOption) (*Corpus, error) {
	out := new(Corpus)
	err := c.cc.Invoke(ctx, Warehouse_GetCorpus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) UpdateCorpus(ctx context.Context, in *UpdateCorpusRequest, opts ...grpc.CallOption) (*Corpus, error) {
	out := new(Corpus)
	err := c.cc.Invoke(ctx, Warehouse_UpdateCorpus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) ListCorpora(ctx context.Context, in *ListCorporaRequest, opts ...grpc.CallOption) (*ListCorporaResponse, error) {
	out := new(ListCorporaResponse)
	err := c.cc.Invoke(ctx, Warehouse_ListCorpora_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) DeleteCorpus(ctx context.Context, in *DeleteCorpusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Warehouse_DeleteCorpus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) AnalyzeCorpus(ctx context.Context, in *AnalyzeCorpusRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, Warehouse_AnalyzeCorpus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) CreateDataSchema(ctx context.Context, in *CreateDataSchemaRequest, opts ...grpc.CallOption) (*DataSchema, error) {
	out := new(DataSchema)
	err := c.cc.Invoke(ctx, Warehouse_CreateDataSchema_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) UpdateDataSchema(ctx context.Context, in *UpdateDataSchemaRequest, opts ...grpc.CallOption) (*DataSchema, error) {
	out := new(DataSchema)
	err := c.cc.Invoke(ctx, Warehouse_UpdateDataSchema_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) GetDataSchema(ctx context.Context, in *GetDataSchemaRequest, opts ...grpc.CallOption) (*DataSchema, error) {
	out := new(DataSchema)
	err := c.cc.Invoke(ctx, Warehouse_GetDataSchema_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) DeleteDataSchema(ctx context.Context, in *DeleteDataSchemaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Warehouse_DeleteDataSchema_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) ListDataSchemas(ctx context.Context, in *ListDataSchemasRequest, opts ...grpc.CallOption) (*ListDataSchemasResponse, error) {
	out := new(ListDataSchemasResponse)
	err := c.cc.Invoke(ctx, Warehouse_ListDataSchemas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) CreateAnnotation(ctx context.Context, in *CreateAnnotationRequest, opts ...grpc.CallOption) (*Annotation, error) {
	out := new(Annotation)
	err := c.cc.Invoke(ctx, Warehouse_CreateAnnotation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) GetAnnotation(ctx context.Context, in *GetAnnotationRequest, opts ...grpc.CallOption) (*Annotation, error) {
	out := new(Annotation)
	err := c.cc.Invoke(ctx, Warehouse_GetAnnotation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) ListAnnotations(ctx context.Context, in *ListAnnotationsRequest, opts ...grpc.CallOption) (*ListAnnotationsResponse, error) {
	out := new(ListAnnotationsResponse)
	err := c.cc.Invoke(ctx, Warehouse_ListAnnotations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) UpdateAnnotation(ctx context.Context, in *UpdateAnnotationRequest, opts ...grpc.CallOption) (*Annotation, error) {
	out := new(Annotation)
	err := c.cc.Invoke(ctx, Warehouse_UpdateAnnotation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) DeleteAnnotation(ctx context.Context, in *DeleteAnnotationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Warehouse_DeleteAnnotation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) IngestAsset(ctx context.Context, opts ...grpc.CallOption) (Warehouse_IngestAssetClient, error) {
	stream, err := c.cc.NewStream(ctx, &Warehouse_ServiceDesc.Streams[0], Warehouse_IngestAsset_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &warehouseIngestAssetClient{stream}
	return x, nil
}

type Warehouse_IngestAssetClient interface {
	Send(*IngestAssetRequest) error
	Recv() (*IngestAssetResponse, error)
	grpc.ClientStream
}

type warehouseIngestAssetClient struct {
	grpc.ClientStream
}

func (x *warehouseIngestAssetClient) Send(m *IngestAssetRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *warehouseIngestAssetClient) Recv() (*IngestAssetResponse, error) {
	m := new(IngestAssetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *warehouseClient) ClipAsset(ctx context.Context, in *ClipAssetRequest, opts ...grpc.CallOption) (*ClipAssetResponse, error) {
	out := new(ClipAssetResponse)
	err := c.cc.Invoke(ctx, Warehouse_ClipAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) GenerateHlsUri(ctx context.Context, in *GenerateHlsUriRequest, opts ...grpc.CallOption) (*GenerateHlsUriResponse, error) {
	out := new(GenerateHlsUriResponse)
	err := c.cc.Invoke(ctx, Warehouse_GenerateHlsUri_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) ImportAssets(ctx context.Context, in *ImportAssetsRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, Warehouse_ImportAssets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) CreateSearchConfig(ctx context.Context, in *CreateSearchConfigRequest, opts ...grpc.CallOption) (*SearchConfig, error) {
	out := new(SearchConfig)
	err := c.cc.Invoke(ctx, Warehouse_CreateSearchConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) UpdateSearchConfig(ctx context.Context, in *UpdateSearchConfigRequest, opts ...grpc.CallOption) (*SearchConfig, error) {
	out := new(SearchConfig)
	err := c.cc.Invoke(ctx, Warehouse_UpdateSearchConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) GetSearchConfig(ctx context.Context, in *GetSearchConfigRequest, opts ...grpc.CallOption) (*SearchConfig, error) {
	out := new(SearchConfig)
	err := c.cc.Invoke(ctx, Warehouse_GetSearchConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) DeleteSearchConfig(ctx context.Context, in *DeleteSearchConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Warehouse_DeleteSearchConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) ListSearchConfigs(ctx context.Context, in *ListSearchConfigsRequest, opts ...grpc.CallOption) (*ListSearchConfigsResponse, error) {
	out := new(ListSearchConfigsResponse)
	err := c.cc.Invoke(ctx, Warehouse_ListSearchConfigs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) CreateSearchHypernym(ctx context.Context, in *CreateSearchHypernymRequest, opts ...grpc.CallOption) (*SearchHypernym, error) {
	out := new(SearchHypernym)
	err := c.cc.Invoke(ctx, Warehouse_CreateSearchHypernym_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) UpdateSearchHypernym(ctx context.Context, in *UpdateSearchHypernymRequest, opts ...grpc.CallOption) (*SearchHypernym, error) {
	out := new(SearchHypernym)
	err := c.cc.Invoke(ctx, Warehouse_UpdateSearchHypernym_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) GetSearchHypernym(ctx context.Context, in *GetSearchHypernymRequest, opts ...grpc.CallOption) (*SearchHypernym, error) {
	out := new(SearchHypernym)
	err := c.cc.Invoke(ctx, Warehouse_GetSearchHypernym_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) DeleteSearchHypernym(ctx context.Context, in *DeleteSearchHypernymRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Warehouse_DeleteSearchHypernym_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) ListSearchHypernyms(ctx context.Context, in *ListSearchHypernymsRequest, opts ...grpc.CallOption) (*ListSearchHypernymsResponse, error) {
	out := new(ListSearchHypernymsResponse)
	err := c.cc.Invoke(ctx, Warehouse_ListSearchHypernyms_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) SearchAssets(ctx context.Context, in *SearchAssetsRequest, opts ...grpc.CallOption) (*SearchAssetsResponse, error) {
	out := new(SearchAssetsResponse)
	err := c.cc.Invoke(ctx, Warehouse_SearchAssets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) SearchIndexEndpoint(ctx context.Context, in *SearchIndexEndpointRequest, opts ...grpc.CallOption) (*SearchIndexEndpointResponse, error) {
	out := new(SearchIndexEndpointResponse)
	err := c.cc.Invoke(ctx, Warehouse_SearchIndexEndpoint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) CreateIndexEndpoint(ctx context.Context, in *CreateIndexEndpointRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, Warehouse_CreateIndexEndpoint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) GetIndexEndpoint(ctx context.Context, in *GetIndexEndpointRequest, opts ...grpc.CallOption) (*IndexEndpoint, error) {
	out := new(IndexEndpoint)
	err := c.cc.Invoke(ctx, Warehouse_GetIndexEndpoint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) ListIndexEndpoints(ctx context.Context, in *ListIndexEndpointsRequest, opts ...grpc.CallOption) (*ListIndexEndpointsResponse, error) {
	out := new(ListIndexEndpointsResponse)
	err := c.cc.Invoke(ctx, Warehouse_ListIndexEndpoints_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) UpdateIndexEndpoint(ctx context.Context, in *UpdateIndexEndpointRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, Warehouse_UpdateIndexEndpoint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) DeleteIndexEndpoint(ctx context.Context, in *DeleteIndexEndpointRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, Warehouse_DeleteIndexEndpoint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) DeployIndex(ctx context.Context, in *DeployIndexRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, Warehouse_DeployIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) UndeployIndex(ctx context.Context, in *UndeployIndexRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, Warehouse_UndeployIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) CreateCollection(ctx context.Context, in *CreateCollectionRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, Warehouse_CreateCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) DeleteCollection(ctx context.Context, in *DeleteCollectionRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, Warehouse_DeleteCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) GetCollection(ctx context.Context, in *GetCollectionRequest, opts ...grpc.CallOption) (*Collection, error) {
	out := new(Collection)
	err := c.cc.Invoke(ctx, Warehouse_GetCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) UpdateCollection(ctx context.Context, in *UpdateCollectionRequest, opts ...grpc.CallOption) (*Collection, error) {
	out := new(Collection)
	err := c.cc.Invoke(ctx, Warehouse_UpdateCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) ListCollections(ctx context.Context, in *ListCollectionsRequest, opts ...grpc.CallOption) (*ListCollectionsResponse, error) {
	out := new(ListCollectionsResponse)
	err := c.cc.Invoke(ctx, Warehouse_ListCollections_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) AddCollectionItem(ctx context.Context, in *AddCollectionItemRequest, opts ...grpc.CallOption) (*AddCollectionItemResponse, error) {
	out := new(AddCollectionItemResponse)
	err := c.cc.Invoke(ctx, Warehouse_AddCollectionItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) RemoveCollectionItem(ctx context.Context, in *RemoveCollectionItemRequest, opts ...grpc.CallOption) (*RemoveCollectionItemResponse, error) {
	out := new(RemoveCollectionItemResponse)
	err := c.cc.Invoke(ctx, Warehouse_RemoveCollectionItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) ViewCollectionItems(ctx context.Context, in *ViewCollectionItemsRequest, opts ...grpc.CallOption) (*ViewCollectionItemsResponse, error) {
	out := new(ViewCollectionItemsResponse)
	err := c.cc.Invoke(ctx, Warehouse_ViewCollectionItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WarehouseServer is the server API for Warehouse service.
// All implementations should embed UnimplementedWarehouseServer
// for forward compatibility
type WarehouseServer interface {
	// Creates an asset inside corpus.
	CreateAsset(context.Context, *CreateAssetRequest) (*Asset, error)
	// Updates an asset inside corpus.
	UpdateAsset(context.Context, *UpdateAssetRequest) (*Asset, error)
	// Reads an asset inside corpus.
	GetAsset(context.Context, *GetAssetRequest) (*Asset, error)
	// Lists an list of assets inside corpus.
	ListAssets(context.Context, *ListAssetsRequest) (*ListAssetsResponse, error)
	// Deletes asset inside corpus.
	DeleteAsset(context.Context, *DeleteAssetRequest) (*longrunningpb.Operation, error)
	// Upload asset by specifing the asset Cloud Storage uri.
	// For video warehouse, it requires users who call this API have read access
	// to the cloud storage file. Once it is uploaded, it can be retrieved by
	// GenerateRetrievalUrl API which by default, only can retrieve cloud storage
	// files from the same project of the warehouse. To allow retrieval cloud
	// storage files that are in a separate project, it requires to find the
	// vision ai service account (Go to IAM, check checkbox to show "Include
	// Google-provided role grants", search for "Cloud Vision AI Service Agent")
	// and grant the read access of the cloud storage files to that service
	// account.
	UploadAsset(context.Context, *UploadAssetRequest) (*longrunningpb.Operation, error)
	// Generates a signed url for downloading the asset.
	// For video warehouse, please see comment of UploadAsset about how to allow
	// retrieval of cloud storage files in a different project.
	GenerateRetrievalUrl(context.Context, *GenerateRetrievalUrlRequest) (*GenerateRetrievalUrlResponse, error)
	// Analyze asset to power search capability.
	AnalyzeAsset(context.Context, *AnalyzeAssetRequest) (*longrunningpb.Operation, error)
	// Index one asset for search.
	// Supported corpus type: Corpus.Type.VIDEO_ON_DEMAND
	IndexAsset(context.Context, *IndexAssetRequest) (*longrunningpb.Operation, error)
	// Remove one asset's index data for search.
	// Supported corpus type: Corpus.Type.VIDEO_ON_DEMAND
	RemoveIndexAsset(context.Context, *RemoveIndexAssetRequest) (*longrunningpb.Operation, error)
	// Lists assets inside an index.
	ViewIndexedAssets(context.Context, *ViewIndexedAssetsRequest) (*ViewIndexedAssetsResponse, error)
	// Creates an Index under the corpus.
	CreateIndex(context.Context, *CreateIndexRequest) (*longrunningpb.Operation, error)
	// Updates an Index under the corpus.
	// Users can perform a metadata-only update or trigger a full index rebuild
	// with different update_mask values.
	UpdateIndex(context.Context, *UpdateIndexRequest) (*longrunningpb.Operation, error)
	// Gets the details of a single Index under a Corpus.
	GetIndex(context.Context, *GetIndexRequest) (*Index, error)
	// List all Indexes in a given Corpus.
	ListIndexes(context.Context, *ListIndexesRequest) (*ListIndexesResponse, error)
	// Delete a single Index. In order to delete an index, the caller must
	// make sure that it is not deployed to any index endpoint.
	DeleteIndex(context.Context, *DeleteIndexRequest) (*longrunningpb.Operation, error)
	// Creates a corpus inside a project.
	CreateCorpus(context.Context, *CreateCorpusRequest) (*longrunningpb.Operation, error)
	// Gets corpus details inside a project.
	GetCorpus(context.Context, *GetCorpusRequest) (*Corpus, error)
	// Updates a corpus in a project.
	UpdateCorpus(context.Context, *UpdateCorpusRequest) (*Corpus, error)
	// Lists all corpora in a project.
	ListCorpora(context.Context, *ListCorporaRequest) (*ListCorporaResponse, error)
	// Deletes a corpus only if its empty.
	// Returns empty response.
	DeleteCorpus(context.Context, *DeleteCorpusRequest) (*emptypb.Empty, error)
	// Analyzes a corpus.
	AnalyzeCorpus(context.Context, *AnalyzeCorpusRequest) (*longrunningpb.Operation, error)
	// Creates data schema inside corpus.
	CreateDataSchema(context.Context, *CreateDataSchemaRequest) (*DataSchema, error)
	// Updates data schema inside corpus.
	UpdateDataSchema(context.Context, *UpdateDataSchemaRequest) (*DataSchema, error)
	// Gets data schema inside corpus.
	GetDataSchema(context.Context, *GetDataSchemaRequest) (*DataSchema, error)
	// Deletes data schema inside corpus.
	DeleteDataSchema(context.Context, *DeleteDataSchemaRequest) (*emptypb.Empty, error)
	// Lists a list of data schemas inside corpus.
	ListDataSchemas(context.Context, *ListDataSchemasRequest) (*ListDataSchemasResponse, error)
	// Creates annotation inside asset.
	CreateAnnotation(context.Context, *CreateAnnotationRequest) (*Annotation, error)
	// Reads annotation inside asset.
	GetAnnotation(context.Context, *GetAnnotationRequest) (*Annotation, error)
	// Lists a list of annotations inside asset.
	ListAnnotations(context.Context, *ListAnnotationsRequest) (*ListAnnotationsResponse, error)
	// Updates annotation inside asset.
	UpdateAnnotation(context.Context, *UpdateAnnotationRequest) (*Annotation, error)
	// Deletes annotation inside asset.
	DeleteAnnotation(context.Context, *DeleteAnnotationRequest) (*emptypb.Empty, error)
	// Ingests data for the asset. It is not allowed to ingest a data chunk which
	// is already expired according to TTL.
	// This method is only available via the gRPC API (not HTTP since
	// bi-directional streaming is not supported via HTTP).
	IngestAsset(Warehouse_IngestAssetServer) error
	// Supported by STREAM_VIDEO corpus type.
	// Generates clips for downloading. The api takes in a time range, and
	// generates a clip of the first content available after start_time and
	// before end_time, which may overflow beyond these bounds.
	// Returned clips are truncated if the total size of the clips are larger
	// than 100MB.
	ClipAsset(context.Context, *ClipAssetRequest) (*ClipAssetResponse, error)
	// Generates a uri for an HLS manifest. The api takes in a collection of time
	// ranges, and generates a URI for an HLS manifest that covers all the
	// requested time ranges.
	GenerateHlsUri(context.Context, *GenerateHlsUriRequest) (*GenerateHlsUriResponse, error)
	// Imports assets (images plus annotations) from a meta file on cloud storage.
	// Each row in the meta file is corresponding to an image (specified by a
	// cloud storage uri) and its annotations.
	ImportAssets(context.Context, *ImportAssetsRequest) (*longrunningpb.Operation, error)
	// Creates a search configuration inside a corpus.
	//
	// Please follow the rules below to create a valid CreateSearchConfigRequest.
	// --- General Rules ---
	//  1. Request.search_config_id must not be associated with an existing
	//     SearchConfig.
	//  2. Request must contain at least one non-empty search_criteria_property or
	//     facet_property.
	//  3. mapped_fields must not be empty, and must map to existing UGA keys.
	//  4. All mapped_fields must be of the same type.
	//  5. All mapped_fields must share the same granularity.
	//  6. All mapped_fields must share the same semantic SearchConfig match
	//     options.
	//
	// For property-specific rules, please reference the comments for
	// FacetProperty and SearchCriteriaProperty.
	CreateSearchConfig(context.Context, *CreateSearchConfigRequest) (*SearchConfig, error)
	// Updates a search configuration inside a corpus.
	//
	// Please follow the rules below to create a valid UpdateSearchConfigRequest.
	// --- General Rules ---
	// 1. Request.search_configuration.name must already exist.
	// 2. Request must contain at least one non-empty search_criteria_property or
	// facet_property.
	//  3. mapped_fields must not be empty, and must map to existing UGA keys.
	//  4. All mapped_fields must be of the same type.
	//  5. All mapped_fields must share the same granularity.
	//  6. All mapped_fields must share the same semantic SearchConfig match
	//     options.
	//
	// For property-specific rules, please reference the comments for
	// FacetProperty and SearchCriteriaProperty.
	UpdateSearchConfig(context.Context, *UpdateSearchConfigRequest) (*SearchConfig, error)
	// Gets a search configuration inside a corpus.
	GetSearchConfig(context.Context, *GetSearchConfigRequest) (*SearchConfig, error)
	// Deletes a search configuration inside a corpus.
	//
	// For a DeleteSearchConfigRequest to be valid,
	// Request.search_configuration.name must already exist.
	DeleteSearchConfig(context.Context, *DeleteSearchConfigRequest) (*emptypb.Empty, error)
	// Lists all search configurations inside a corpus.
	ListSearchConfigs(context.Context, *ListSearchConfigsRequest) (*ListSearchConfigsResponse, error)
	// Creates a SearchHypernym inside a corpus.
	CreateSearchHypernym(context.Context, *CreateSearchHypernymRequest) (*SearchHypernym, error)
	// Updates a SearchHypernym inside a corpus.
	UpdateSearchHypernym(context.Context, *UpdateSearchHypernymRequest) (*SearchHypernym, error)
	// Gets a SearchHypernym inside a corpus.
	GetSearchHypernym(context.Context, *GetSearchHypernymRequest) (*SearchHypernym, error)
	// Deletes a SearchHypernym inside a corpus.
	DeleteSearchHypernym(context.Context, *DeleteSearchHypernymRequest) (*emptypb.Empty, error)
	// Lists SearchHypernyms inside a corpus.
	ListSearchHypernyms(context.Context, *ListSearchHypernymsRequest) (*ListSearchHypernymsResponse, error)
	// Search media asset.
	SearchAssets(context.Context, *SearchAssetsRequest) (*SearchAssetsResponse, error)
	// Search a deployed index endpoint (IMAGE corpus type only).
	SearchIndexEndpoint(context.Context, *SearchIndexEndpointRequest) (*SearchIndexEndpointResponse, error)
	// Creates an IndexEndpoint.
	CreateIndexEndpoint(context.Context, *CreateIndexEndpointRequest) (*longrunningpb.Operation, error)
	// Gets an IndexEndpoint.
	GetIndexEndpoint(context.Context, *GetIndexEndpointRequest) (*IndexEndpoint, error)
	// Lists all IndexEndpoints in a project.
	ListIndexEndpoints(context.Context, *ListIndexEndpointsRequest) (*ListIndexEndpointsResponse, error)
	// Updates an IndexEndpoint.
	UpdateIndexEndpoint(context.Context, *UpdateIndexEndpointRequest) (*longrunningpb.Operation, error)
	// Deletes an IndexEndpoint.
	DeleteIndexEndpoint(context.Context, *DeleteIndexEndpointRequest) (*longrunningpb.Operation, error)
	// Deploys an Index to IndexEndpoint.
	DeployIndex(context.Context, *DeployIndexRequest) (*longrunningpb.Operation, error)
	// Undeploys an Index from IndexEndpoint.
	UndeployIndex(context.Context, *UndeployIndexRequest) (*longrunningpb.Operation, error)
	// Creates a collection.
	CreateCollection(context.Context, *CreateCollectionRequest) (*longrunningpb.Operation, error)
	// Deletes a collection.
	DeleteCollection(context.Context, *DeleteCollectionRequest) (*longrunningpb.Operation, error)
	// Gets a collection.
	GetCollection(context.Context, *GetCollectionRequest) (*Collection, error)
	// Updates a collection.
	UpdateCollection(context.Context, *UpdateCollectionRequest) (*Collection, error)
	// Lists collections inside a corpus.
	ListCollections(context.Context, *ListCollectionsRequest) (*ListCollectionsResponse, error)
	// Adds an item into a Collection.
	AddCollectionItem(context.Context, *AddCollectionItemRequest) (*AddCollectionItemResponse, error)
	// Removes an item from a collection.
	RemoveCollectionItem(context.Context, *RemoveCollectionItemRequest) (*RemoveCollectionItemResponse, error)
	// View items inside a collection.
	ViewCollectionItems(context.Context, *ViewCollectionItemsRequest) (*ViewCollectionItemsResponse, error)
}

// UnimplementedWarehouseServer should be embedded to have forward compatible implementations.
type UnimplementedWarehouseServer struct {
}

func (UnimplementedWarehouseServer) CreateAsset(context.Context, *CreateAssetRequest) (*Asset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAsset not implemented")
}
func (UnimplementedWarehouseServer) UpdateAsset(context.Context, *UpdateAssetRequest) (*Asset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAsset not implemented")
}
func (UnimplementedWarehouseServer) GetAsset(context.Context, *GetAssetRequest) (*Asset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAsset not implemented")
}
func (UnimplementedWarehouseServer) ListAssets(context.Context, *ListAssetsRequest) (*ListAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAssets not implemented")
}
func (UnimplementedWarehouseServer) DeleteAsset(context.Context, *DeleteAssetRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAsset not implemented")
}
func (UnimplementedWarehouseServer) UploadAsset(context.Context, *UploadAssetRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadAsset not implemented")
}
func (UnimplementedWarehouseServer) GenerateRetrievalUrl(context.Context, *GenerateRetrievalUrlRequest) (*GenerateRetrievalUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateRetrievalUrl not implemented")
}
func (UnimplementedWarehouseServer) AnalyzeAsset(context.Context, *AnalyzeAssetRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeAsset not implemented")
}
func (UnimplementedWarehouseServer) IndexAsset(context.Context, *IndexAssetRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IndexAsset not implemented")
}
func (UnimplementedWarehouseServer) RemoveIndexAsset(context.Context, *RemoveIndexAssetRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveIndexAsset not implemented")
}
func (UnimplementedWarehouseServer) ViewIndexedAssets(context.Context, *ViewIndexedAssetsRequest) (*ViewIndexedAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewIndexedAssets not implemented")
}
func (UnimplementedWarehouseServer) CreateIndex(context.Context, *CreateIndexRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIndex not implemented")
}
func (UnimplementedWarehouseServer) UpdateIndex(context.Context, *UpdateIndexRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIndex not implemented")
}
func (UnimplementedWarehouseServer) GetIndex(context.Context, *GetIndexRequest) (*Index, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIndex not implemented")
}
func (UnimplementedWarehouseServer) ListIndexes(context.Context, *ListIndexesRequest) (*ListIndexesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIndexes not implemented")
}
func (UnimplementedWarehouseServer) DeleteIndex(context.Context, *DeleteIndexRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIndex not implemented")
}
func (UnimplementedWarehouseServer) CreateCorpus(context.Context, *CreateCorpusRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCorpus not implemented")
}
func (UnimplementedWarehouseServer) GetCorpus(context.Context, *GetCorpusRequest) (*Corpus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCorpus not implemented")
}
func (UnimplementedWarehouseServer) UpdateCorpus(context.Context, *UpdateCorpusRequest) (*Corpus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCorpus not implemented")
}
func (UnimplementedWarehouseServer) ListCorpora(context.Context, *ListCorporaRequest) (*ListCorporaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCorpora not implemented")
}
func (UnimplementedWarehouseServer) DeleteCorpus(context.Context, *DeleteCorpusRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCorpus not implemented")
}
func (UnimplementedWarehouseServer) AnalyzeCorpus(context.Context, *AnalyzeCorpusRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeCorpus not implemented")
}
func (UnimplementedWarehouseServer) CreateDataSchema(context.Context, *CreateDataSchemaRequest) (*DataSchema, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataSchema not implemented")
}
func (UnimplementedWarehouseServer) UpdateDataSchema(context.Context, *UpdateDataSchemaRequest) (*DataSchema, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDataSchema not implemented")
}
func (UnimplementedWarehouseServer) GetDataSchema(context.Context, *GetDataSchemaRequest) (*DataSchema, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataSchema not implemented")
}
func (UnimplementedWarehouseServer) DeleteDataSchema(context.Context, *DeleteDataSchemaRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataSchema not implemented")
}
func (UnimplementedWarehouseServer) ListDataSchemas(context.Context, *ListDataSchemasRequest) (*ListDataSchemasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDataSchemas not implemented")
}
func (UnimplementedWarehouseServer) CreateAnnotation(context.Context, *CreateAnnotationRequest) (*Annotation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnnotation not implemented")
}
func (UnimplementedWarehouseServer) GetAnnotation(context.Context, *GetAnnotationRequest) (*Annotation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnnotation not implemented")
}
func (UnimplementedWarehouseServer) ListAnnotations(context.Context, *ListAnnotationsRequest) (*ListAnnotationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAnnotations not implemented")
}
func (UnimplementedWarehouseServer) UpdateAnnotation(context.Context, *UpdateAnnotationRequest) (*Annotation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAnnotation not implemented")
}
func (UnimplementedWarehouseServer) DeleteAnnotation(context.Context, *DeleteAnnotationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAnnotation not implemented")
}
func (UnimplementedWarehouseServer) IngestAsset(Warehouse_IngestAssetServer) error {
	return status.Errorf(codes.Unimplemented, "method IngestAsset not implemented")
}
func (UnimplementedWarehouseServer) ClipAsset(context.Context, *ClipAssetRequest) (*ClipAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClipAsset not implemented")
}
func (UnimplementedWarehouseServer) GenerateHlsUri(context.Context, *GenerateHlsUriRequest) (*GenerateHlsUriResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateHlsUri not implemented")
}
func (UnimplementedWarehouseServer) ImportAssets(context.Context, *ImportAssetsRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportAssets not implemented")
}
func (UnimplementedWarehouseServer) CreateSearchConfig(context.Context, *CreateSearchConfigRequest) (*SearchConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSearchConfig not implemented")
}
func (UnimplementedWarehouseServer) UpdateSearchConfig(context.Context, *UpdateSearchConfigRequest) (*SearchConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSearchConfig not implemented")
}
func (UnimplementedWarehouseServer) GetSearchConfig(context.Context, *GetSearchConfigRequest) (*SearchConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSearchConfig not implemented")
}
func (UnimplementedWarehouseServer) DeleteSearchConfig(context.Context, *DeleteSearchConfigRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSearchConfig not implemented")
}
func (UnimplementedWarehouseServer) ListSearchConfigs(context.Context, *ListSearchConfigsRequest) (*ListSearchConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSearchConfigs not implemented")
}
func (UnimplementedWarehouseServer) CreateSearchHypernym(context.Context, *CreateSearchHypernymRequest) (*SearchHypernym, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSearchHypernym not implemented")
}
func (UnimplementedWarehouseServer) UpdateSearchHypernym(context.Context, *UpdateSearchHypernymRequest) (*SearchHypernym, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSearchHypernym not implemented")
}
func (UnimplementedWarehouseServer) GetSearchHypernym(context.Context, *GetSearchHypernymRequest) (*SearchHypernym, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSearchHypernym not implemented")
}
func (UnimplementedWarehouseServer) DeleteSearchHypernym(context.Context, *DeleteSearchHypernymRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSearchHypernym not implemented")
}
func (UnimplementedWarehouseServer) ListSearchHypernyms(context.Context, *ListSearchHypernymsRequest) (*ListSearchHypernymsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSearchHypernyms not implemented")
}
func (UnimplementedWarehouseServer) SearchAssets(context.Context, *SearchAssetsRequest) (*SearchAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAssets not implemented")
}
func (UnimplementedWarehouseServer) SearchIndexEndpoint(context.Context, *SearchIndexEndpointRequest) (*SearchIndexEndpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchIndexEndpoint not implemented")
}
func (UnimplementedWarehouseServer) CreateIndexEndpoint(context.Context, *CreateIndexEndpointRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIndexEndpoint not implemented")
}
func (UnimplementedWarehouseServer) GetIndexEndpoint(context.Context, *GetIndexEndpointRequest) (*IndexEndpoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIndexEndpoint not implemented")
}
func (UnimplementedWarehouseServer) ListIndexEndpoints(context.Context, *ListIndexEndpointsRequest) (*ListIndexEndpointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIndexEndpoints not implemented")
}
func (UnimplementedWarehouseServer) UpdateIndexEndpoint(context.Context, *UpdateIndexEndpointRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIndexEndpoint not implemented")
}
func (UnimplementedWarehouseServer) DeleteIndexEndpoint(context.Context, *DeleteIndexEndpointRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIndexEndpoint not implemented")
}
func (UnimplementedWarehouseServer) DeployIndex(context.Context, *DeployIndexRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployIndex not implemented")
}
func (UnimplementedWarehouseServer) UndeployIndex(context.Context, *UndeployIndexRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndeployIndex not implemented")
}
func (UnimplementedWarehouseServer) CreateCollection(context.Context, *CreateCollectionRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCollection not implemented")
}
func (UnimplementedWarehouseServer) DeleteCollection(context.Context, *DeleteCollectionRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCollection not implemented")
}
func (UnimplementedWarehouseServer) GetCollection(context.Context, *GetCollectionRequest) (*Collection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollection not implemented")
}
func (UnimplementedWarehouseServer) UpdateCollection(context.Context, *UpdateCollectionRequest) (*Collection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCollection not implemented")
}
func (UnimplementedWarehouseServer) ListCollections(context.Context, *ListCollectionsRequest) (*ListCollectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCollections not implemented")
}
func (UnimplementedWarehouseServer) AddCollectionItem(context.Context, *AddCollectionItemRequest) (*AddCollectionItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCollectionItem not implemented")
}
func (UnimplementedWarehouseServer) RemoveCollectionItem(context.Context, *RemoveCollectionItemRequest) (*RemoveCollectionItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCollectionItem not implemented")
}
func (UnimplementedWarehouseServer) ViewCollectionItems(context.Context, *ViewCollectionItemsRequest) (*ViewCollectionItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewCollectionItems not implemented")
}

// UnsafeWarehouseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WarehouseServer will
// result in compilation errors.
type UnsafeWarehouseServer interface {
	mustEmbedUnimplementedWarehouseServer()
}

func RegisterWarehouseServer(s grpc.ServiceRegistrar, srv WarehouseServer) {
	s.RegisterService(&Warehouse_ServiceDesc, srv)
}

func _Warehouse_CreateAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).CreateAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_CreateAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).CreateAsset(ctx, req.(*CreateAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_UpdateAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).UpdateAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_UpdateAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).UpdateAsset(ctx, req.(*UpdateAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_GetAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).GetAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_GetAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).GetAsset(ctx, req.(*GetAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_ListAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).ListAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_ListAssets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).ListAssets(ctx, req.(*ListAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_DeleteAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).DeleteAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_DeleteAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).DeleteAsset(ctx, req.(*DeleteAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_UploadAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).UploadAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_UploadAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).UploadAsset(ctx, req.(*UploadAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_GenerateRetrievalUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateRetrievalUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).GenerateRetrievalUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_GenerateRetrievalUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).GenerateRetrievalUrl(ctx, req.(*GenerateRetrievalUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_AnalyzeAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzeAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).AnalyzeAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_AnalyzeAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).AnalyzeAsset(ctx, req.(*AnalyzeAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_IndexAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).IndexAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_IndexAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).IndexAsset(ctx, req.(*IndexAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_RemoveIndexAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveIndexAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).RemoveIndexAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_RemoveIndexAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).RemoveIndexAsset(ctx, req.(*RemoveIndexAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_ViewIndexedAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewIndexedAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).ViewIndexedAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_ViewIndexedAssets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).ViewIndexedAssets(ctx, req.(*ViewIndexedAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_CreateIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).CreateIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_CreateIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).CreateIndex(ctx, req.(*CreateIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_UpdateIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).UpdateIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_UpdateIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).UpdateIndex(ctx, req.(*UpdateIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_GetIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).GetIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_GetIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).GetIndex(ctx, req.(*GetIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_ListIndexes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIndexesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).ListIndexes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_ListIndexes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).ListIndexes(ctx, req.(*ListIndexesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_DeleteIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).DeleteIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_DeleteIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).DeleteIndex(ctx, req.(*DeleteIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_CreateCorpus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCorpusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).CreateCorpus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_CreateCorpus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).CreateCorpus(ctx, req.(*CreateCorpusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_GetCorpus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCorpusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).GetCorpus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_GetCorpus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).GetCorpus(ctx, req.(*GetCorpusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_UpdateCorpus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCorpusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).UpdateCorpus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_UpdateCorpus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).UpdateCorpus(ctx, req.(*UpdateCorpusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_ListCorpora_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCorporaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).ListCorpora(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_ListCorpora_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).ListCorpora(ctx, req.(*ListCorporaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_DeleteCorpus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCorpusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).DeleteCorpus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_DeleteCorpus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).DeleteCorpus(ctx, req.(*DeleteCorpusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_AnalyzeCorpus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzeCorpusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).AnalyzeCorpus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_AnalyzeCorpus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).AnalyzeCorpus(ctx, req.(*AnalyzeCorpusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_CreateDataSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDataSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).CreateDataSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_CreateDataSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).CreateDataSchema(ctx, req.(*CreateDataSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_UpdateDataSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDataSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).UpdateDataSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_UpdateDataSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).UpdateDataSchema(ctx, req.(*UpdateDataSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_GetDataSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).GetDataSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_GetDataSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).GetDataSchema(ctx, req.(*GetDataSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_DeleteDataSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDataSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).DeleteDataSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_DeleteDataSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).DeleteDataSchema(ctx, req.(*DeleteDataSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_ListDataSchemas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDataSchemasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).ListDataSchemas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_ListDataSchemas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).ListDataSchemas(ctx, req.(*ListDataSchemasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_CreateAnnotation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnnotationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).CreateAnnotation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_CreateAnnotation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).CreateAnnotation(ctx, req.(*CreateAnnotationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_GetAnnotation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnnotationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).GetAnnotation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_GetAnnotation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).GetAnnotation(ctx, req.(*GetAnnotationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_ListAnnotations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAnnotationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).ListAnnotations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_ListAnnotations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).ListAnnotations(ctx, req.(*ListAnnotationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_UpdateAnnotation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAnnotationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).UpdateAnnotation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_UpdateAnnotation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).UpdateAnnotation(ctx, req.(*UpdateAnnotationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_DeleteAnnotation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAnnotationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).DeleteAnnotation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_DeleteAnnotation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).DeleteAnnotation(ctx, req.(*DeleteAnnotationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_IngestAsset_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WarehouseServer).IngestAsset(&warehouseIngestAssetServer{stream})
}

type Warehouse_IngestAssetServer interface {
	Send(*IngestAssetResponse) error
	Recv() (*IngestAssetRequest, error)
	grpc.ServerStream
}

type warehouseIngestAssetServer struct {
	grpc.ServerStream
}

func (x *warehouseIngestAssetServer) Send(m *IngestAssetResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *warehouseIngestAssetServer) Recv() (*IngestAssetRequest, error) {
	m := new(IngestAssetRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Warehouse_ClipAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClipAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).ClipAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_ClipAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).ClipAsset(ctx, req.(*ClipAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_GenerateHlsUri_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateHlsUriRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).GenerateHlsUri(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_GenerateHlsUri_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).GenerateHlsUri(ctx, req.(*GenerateHlsUriRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_ImportAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).ImportAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_ImportAssets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).ImportAssets(ctx, req.(*ImportAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_CreateSearchConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSearchConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).CreateSearchConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_CreateSearchConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).CreateSearchConfig(ctx, req.(*CreateSearchConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_UpdateSearchConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSearchConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).UpdateSearchConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_UpdateSearchConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).UpdateSearchConfig(ctx, req.(*UpdateSearchConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_GetSearchConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSearchConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).GetSearchConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_GetSearchConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).GetSearchConfig(ctx, req.(*GetSearchConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_DeleteSearchConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSearchConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).DeleteSearchConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_DeleteSearchConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).DeleteSearchConfig(ctx, req.(*DeleteSearchConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_ListSearchConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSearchConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).ListSearchConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_ListSearchConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).ListSearchConfigs(ctx, req.(*ListSearchConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_CreateSearchHypernym_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSearchHypernymRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).CreateSearchHypernym(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_CreateSearchHypernym_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).CreateSearchHypernym(ctx, req.(*CreateSearchHypernymRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_UpdateSearchHypernym_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSearchHypernymRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).UpdateSearchHypernym(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_UpdateSearchHypernym_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).UpdateSearchHypernym(ctx, req.(*UpdateSearchHypernymRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_GetSearchHypernym_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSearchHypernymRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).GetSearchHypernym(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_GetSearchHypernym_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).GetSearchHypernym(ctx, req.(*GetSearchHypernymRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_DeleteSearchHypernym_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSearchHypernymRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).DeleteSearchHypernym(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_DeleteSearchHypernym_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).DeleteSearchHypernym(ctx, req.(*DeleteSearchHypernymRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_ListSearchHypernyms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSearchHypernymsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).ListSearchHypernyms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_ListSearchHypernyms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).ListSearchHypernyms(ctx, req.(*ListSearchHypernymsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_SearchAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).SearchAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_SearchAssets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).SearchAssets(ctx, req.(*SearchAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_SearchIndexEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchIndexEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).SearchIndexEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_SearchIndexEndpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).SearchIndexEndpoint(ctx, req.(*SearchIndexEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_CreateIndexEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIndexEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).CreateIndexEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_CreateIndexEndpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).CreateIndexEndpoint(ctx, req.(*CreateIndexEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_GetIndexEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIndexEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).GetIndexEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_GetIndexEndpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).GetIndexEndpoint(ctx, req.(*GetIndexEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_ListIndexEndpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIndexEndpointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).ListIndexEndpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_ListIndexEndpoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).ListIndexEndpoints(ctx, req.(*ListIndexEndpointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_UpdateIndexEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIndexEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).UpdateIndexEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_UpdateIndexEndpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).UpdateIndexEndpoint(ctx, req.(*UpdateIndexEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_DeleteIndexEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIndexEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).DeleteIndexEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_DeleteIndexEndpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).DeleteIndexEndpoint(ctx, req.(*DeleteIndexEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_DeployIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).DeployIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_DeployIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).DeployIndex(ctx, req.(*DeployIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_UndeployIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndeployIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).UndeployIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_UndeployIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).UndeployIndex(ctx, req.(*UndeployIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_CreateCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).CreateCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_CreateCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).CreateCollection(ctx, req.(*CreateCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_DeleteCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).DeleteCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_DeleteCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).DeleteCollection(ctx, req.(*DeleteCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_GetCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).GetCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_GetCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).GetCollection(ctx, req.(*GetCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_UpdateCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).UpdateCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_UpdateCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).UpdateCollection(ctx, req.(*UpdateCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_ListCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCollectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).ListCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_ListCollections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).ListCollections(ctx, req.(*ListCollectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_AddCollectionItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCollectionItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).AddCollectionItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_AddCollectionItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).AddCollectionItem(ctx, req.(*AddCollectionItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_RemoveCollectionItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCollectionItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).RemoveCollectionItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_RemoveCollectionItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).RemoveCollectionItem(ctx, req.(*RemoveCollectionItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_ViewCollectionItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewCollectionItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).ViewCollectionItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warehouse_ViewCollectionItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).ViewCollectionItems(ctx, req.(*ViewCollectionItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Warehouse_ServiceDesc is the grpc.ServiceDesc for Warehouse service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Warehouse_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.visionai.v1.Warehouse",
	HandlerType: (*WarehouseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAsset",
			Handler:    _Warehouse_CreateAsset_Handler,
		},
		{
			MethodName: "UpdateAsset",
			Handler:    _Warehouse_UpdateAsset_Handler,
		},
		{
			MethodName: "GetAsset",
			Handler:    _Warehouse_GetAsset_Handler,
		},
		{
			MethodName: "ListAssets",
			Handler:    _Warehouse_ListAssets_Handler,
		},
		{
			MethodName: "DeleteAsset",
			Handler:    _Warehouse_DeleteAsset_Handler,
		},
		{
			MethodName: "UploadAsset",
			Handler:    _Warehouse_UploadAsset_Handler,
		},
		{
			MethodName: "GenerateRetrievalUrl",
			Handler:    _Warehouse_GenerateRetrievalUrl_Handler,
		},
		{
			MethodName: "AnalyzeAsset",
			Handler:    _Warehouse_AnalyzeAsset_Handler,
		},
		{
			MethodName: "IndexAsset",
			Handler:    _Warehouse_IndexAsset_Handler,
		},
		{
			MethodName: "RemoveIndexAsset",
			Handler:    _Warehouse_RemoveIndexAsset_Handler,
		},
		{
			MethodName: "ViewIndexedAssets",
			Handler:    _Warehouse_ViewIndexedAssets_Handler,
		},
		{
			MethodName: "CreateIndex",
			Handler:    _Warehouse_CreateIndex_Handler,
		},
		{
			MethodName: "UpdateIndex",
			Handler:    _Warehouse_UpdateIndex_Handler,
		},
		{
			MethodName: "GetIndex",
			Handler:    _Warehouse_GetIndex_Handler,
		},
		{
			MethodName: "ListIndexes",
			Handler:    _Warehouse_ListIndexes_Handler,
		},
		{
			MethodName: "DeleteIndex",
			Handler:    _Warehouse_DeleteIndex_Handler,
		},
		{
			MethodName: "CreateCorpus",
			Handler:    _Warehouse_CreateCorpus_Handler,
		},
		{
			MethodName: "GetCorpus",
			Handler:    _Warehouse_GetCorpus_Handler,
		},
		{
			MethodName: "UpdateCorpus",
			Handler:    _Warehouse_UpdateCorpus_Handler,
		},
		{
			MethodName: "ListCorpora",
			Handler:    _Warehouse_ListCorpora_Handler,
		},
		{
			MethodName: "DeleteCorpus",
			Handler:    _Warehouse_DeleteCorpus_Handler,
		},
		{
			MethodName: "AnalyzeCorpus",
			Handler:    _Warehouse_AnalyzeCorpus_Handler,
		},
		{
			MethodName: "CreateDataSchema",
			Handler:    _Warehouse_CreateDataSchema_Handler,
		},
		{
			MethodName: "UpdateDataSchema",
			Handler:    _Warehouse_UpdateDataSchema_Handler,
		},
		{
			MethodName: "GetDataSchema",
			Handler:    _Warehouse_GetDataSchema_Handler,
		},
		{
			MethodName: "DeleteDataSchema",
			Handler:    _Warehouse_DeleteDataSchema_Handler,
		},
		{
			MethodName: "ListDataSchemas",
			Handler:    _Warehouse_ListDataSchemas_Handler,
		},
		{
			MethodName: "CreateAnnotation",
			Handler:    _Warehouse_CreateAnnotation_Handler,
		},
		{
			MethodName: "GetAnnotation",
			Handler:    _Warehouse_GetAnnotation_Handler,
		},
		{
			MethodName: "ListAnnotations",
			Handler:    _Warehouse_ListAnnotations_Handler,
		},
		{
			MethodName: "UpdateAnnotation",
			Handler:    _Warehouse_UpdateAnnotation_Handler,
		},
		{
			MethodName: "DeleteAnnotation",
			Handler:    _Warehouse_DeleteAnnotation_Handler,
		},
		{
			MethodName: "ClipAsset",
			Handler:    _Warehouse_ClipAsset_Handler,
		},
		{
			MethodName: "GenerateHlsUri",
			Handler:    _Warehouse_GenerateHlsUri_Handler,
		},
		{
			MethodName: "ImportAssets",
			Handler:    _Warehouse_ImportAssets_Handler,
		},
		{
			MethodName: "CreateSearchConfig",
			Handler:    _Warehouse_CreateSearchConfig_Handler,
		},
		{
			MethodName: "UpdateSearchConfig",
			Handler:    _Warehouse_UpdateSearchConfig_Handler,
		},
		{
			MethodName: "GetSearchConfig",
			Handler:    _Warehouse_GetSearchConfig_Handler,
		},
		{
			MethodName: "DeleteSearchConfig",
			Handler:    _Warehouse_DeleteSearchConfig_Handler,
		},
		{
			MethodName: "ListSearchConfigs",
			Handler:    _Warehouse_ListSearchConfigs_Handler,
		},
		{
			MethodName: "CreateSearchHypernym",
			Handler:    _Warehouse_CreateSearchHypernym_Handler,
		},
		{
			MethodName: "UpdateSearchHypernym",
			Handler:    _Warehouse_UpdateSearchHypernym_Handler,
		},
		{
			MethodName: "GetSearchHypernym",
			Handler:    _Warehouse_GetSearchHypernym_Handler,
		},
		{
			MethodName: "DeleteSearchHypernym",
			Handler:    _Warehouse_DeleteSearchHypernym_Handler,
		},
		{
			MethodName: "ListSearchHypernyms",
			Handler:    _Warehouse_ListSearchHypernyms_Handler,
		},
		{
			MethodName: "SearchAssets",
			Handler:    _Warehouse_SearchAssets_Handler,
		},
		{
			MethodName: "SearchIndexEndpoint",
			Handler:    _Warehouse_SearchIndexEndpoint_Handler,
		},
		{
			MethodName: "CreateIndexEndpoint",
			Handler:    _Warehouse_CreateIndexEndpoint_Handler,
		},
		{
			MethodName: "GetIndexEndpoint",
			Handler:    _Warehouse_GetIndexEndpoint_Handler,
		},
		{
			MethodName: "ListIndexEndpoints",
			Handler:    _Warehouse_ListIndexEndpoints_Handler,
		},
		{
			MethodName: "UpdateIndexEndpoint",
			Handler:    _Warehouse_UpdateIndexEndpoint_Handler,
		},
		{
			MethodName: "DeleteIndexEndpoint",
			Handler:    _Warehouse_DeleteIndexEndpoint_Handler,
		},
		{
			MethodName: "DeployIndex",
			Handler:    _Warehouse_DeployIndex_Handler,
		},
		{
			MethodName: "UndeployIndex",
			Handler:    _Warehouse_UndeployIndex_Handler,
		},
		{
			MethodName: "CreateCollection",
			Handler:    _Warehouse_CreateCollection_Handler,
		},
		{
			MethodName: "DeleteCollection",
			Handler:    _Warehouse_DeleteCollection_Handler,
		},
		{
			MethodName: "GetCollection",
			Handler:    _Warehouse_GetCollection_Handler,
		},
		{
			MethodName: "UpdateCollection",
			Handler:    _Warehouse_UpdateCollection_Handler,
		},
		{
			MethodName: "ListCollections",
			Handler:    _Warehouse_ListCollections_Handler,
		},
		{
			MethodName: "AddCollectionItem",
			Handler:    _Warehouse_AddCollectionItem_Handler,
		},
		{
			MethodName: "RemoveCollectionItem",
			Handler:    _Warehouse_RemoveCollectionItem_Handler,
		},
		{
			MethodName: "ViewCollectionItems",
			Handler:    _Warehouse_ViewCollectionItems_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "IngestAsset",
			Handler:       _Warehouse_IngestAsset_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "google/cloud/visionai/v1/warehouse.proto",
}
