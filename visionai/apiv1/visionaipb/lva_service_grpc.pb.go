// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/visionai/v1/lva_service.proto

package visionaipb

import (
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LiveVideoAnalytics_ListPublicOperators_FullMethodName = "/google.cloud.visionai.v1.LiveVideoAnalytics/ListPublicOperators"
	LiveVideoAnalytics_ResolveOperatorInfo_FullMethodName = "/google.cloud.visionai.v1.LiveVideoAnalytics/ResolveOperatorInfo"
	LiveVideoAnalytics_ListOperators_FullMethodName       = "/google.cloud.visionai.v1.LiveVideoAnalytics/ListOperators"
	LiveVideoAnalytics_GetOperator_FullMethodName         = "/google.cloud.visionai.v1.LiveVideoAnalytics/GetOperator"
	LiveVideoAnalytics_CreateOperator_FullMethodName      = "/google.cloud.visionai.v1.LiveVideoAnalytics/CreateOperator"
	LiveVideoAnalytics_UpdateOperator_FullMethodName      = "/google.cloud.visionai.v1.LiveVideoAnalytics/UpdateOperator"
	LiveVideoAnalytics_DeleteOperator_FullMethodName      = "/google.cloud.visionai.v1.LiveVideoAnalytics/DeleteOperator"
	LiveVideoAnalytics_ListAnalyses_FullMethodName        = "/google.cloud.visionai.v1.LiveVideoAnalytics/ListAnalyses"
	LiveVideoAnalytics_GetAnalysis_FullMethodName         = "/google.cloud.visionai.v1.LiveVideoAnalytics/GetAnalysis"
	LiveVideoAnalytics_CreateAnalysis_FullMethodName      = "/google.cloud.visionai.v1.LiveVideoAnalytics/CreateAnalysis"
	LiveVideoAnalytics_UpdateAnalysis_FullMethodName      = "/google.cloud.visionai.v1.LiveVideoAnalytics/UpdateAnalysis"
	LiveVideoAnalytics_DeleteAnalysis_FullMethodName      = "/google.cloud.visionai.v1.LiveVideoAnalytics/DeleteAnalysis"
	LiveVideoAnalytics_ListProcesses_FullMethodName       = "/google.cloud.visionai.v1.LiveVideoAnalytics/ListProcesses"
	LiveVideoAnalytics_GetProcess_FullMethodName          = "/google.cloud.visionai.v1.LiveVideoAnalytics/GetProcess"
	LiveVideoAnalytics_CreateProcess_FullMethodName       = "/google.cloud.visionai.v1.LiveVideoAnalytics/CreateProcess"
	LiveVideoAnalytics_UpdateProcess_FullMethodName       = "/google.cloud.visionai.v1.LiveVideoAnalytics/UpdateProcess"
	LiveVideoAnalytics_DeleteProcess_FullMethodName       = "/google.cloud.visionai.v1.LiveVideoAnalytics/DeleteProcess"
	LiveVideoAnalytics_BatchRunProcess_FullMethodName     = "/google.cloud.visionai.v1.LiveVideoAnalytics/BatchRunProcess"
)

// LiveVideoAnalyticsClient is the client API for LiveVideoAnalytics service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LiveVideoAnalyticsClient interface {
	// ListPublicOperators returns all the operators in public registry.
	ListPublicOperators(ctx context.Context, in *ListPublicOperatorsRequest, opts ...grpc.CallOption) (*ListPublicOperatorsResponse, error)
	// ResolveOperatorInfo returns the operator information based on the request.
	ResolveOperatorInfo(ctx context.Context, in *ResolveOperatorInfoRequest, opts ...grpc.CallOption) (*ResolveOperatorInfoResponse, error)
	// Lists Operators in a given project and location.
	ListOperators(ctx context.Context, in *ListOperatorsRequest, opts ...grpc.CallOption) (*ListOperatorsResponse, error)
	// Gets details of a single Operator.
	GetOperator(ctx context.Context, in *GetOperatorRequest, opts ...grpc.CallOption) (*Operator, error)
	// Creates a new Operator in a given project and location.
	CreateOperator(ctx context.Context, in *CreateOperatorRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates the parameters of a single Operator.
	UpdateOperator(ctx context.Context, in *UpdateOperatorRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single Operator.
	DeleteOperator(ctx context.Context, in *DeleteOperatorRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists Analyses in a given project and location.
	ListAnalyses(ctx context.Context, in *ListAnalysesRequest, opts ...grpc.CallOption) (*ListAnalysesResponse, error)
	// Gets details of a single Analysis.
	GetAnalysis(ctx context.Context, in *GetAnalysisRequest, opts ...grpc.CallOption) (*Analysis, error)
	// Creates a new Analysis in a given project and location.
	CreateAnalysis(ctx context.Context, in *CreateAnalysisRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates the parameters of a single Analysis.
	UpdateAnalysis(ctx context.Context, in *UpdateAnalysisRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single Analysis.
	DeleteAnalysis(ctx context.Context, in *DeleteAnalysisRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists Processes in a given project and location.
	ListProcesses(ctx context.Context, in *ListProcessesRequest, opts ...grpc.CallOption) (*ListProcessesResponse, error)
	// Gets details of a single Process.
	GetProcess(ctx context.Context, in *GetProcessRequest, opts ...grpc.CallOption) (*Process, error)
	// Creates a new Process in a given project and location.
	CreateProcess(ctx context.Context, in *CreateProcessRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates the parameters of a single Process.
	UpdateProcess(ctx context.Context, in *UpdateProcessRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single Process.
	DeleteProcess(ctx context.Context, in *DeleteProcessRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Run all of the processes to "completion". Max time for each process is
	// the LRO time limit.
	BatchRunProcess(ctx context.Context, in *BatchRunProcessRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type liveVideoAnalyticsClient struct {
	cc grpc.ClientConnInterface
}

func NewLiveVideoAnalyticsClient(cc grpc.ClientConnInterface) LiveVideoAnalyticsClient {
	return &liveVideoAnalyticsClient{cc}
}

func (c *liveVideoAnalyticsClient) ListPublicOperators(ctx context.Context, in *ListPublicOperatorsRequest, opts ...grpc.CallOption) (*ListPublicOperatorsResponse, error) {
	out := new(ListPublicOperatorsResponse)
	err := c.cc.Invoke(ctx, LiveVideoAnalytics_ListPublicOperators_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveVideoAnalyticsClient) ResolveOperatorInfo(ctx context.Context, in *ResolveOperatorInfoRequest, opts ...grpc.CallOption) (*ResolveOperatorInfoResponse, error) {
	out := new(ResolveOperatorInfoResponse)
	err := c.cc.Invoke(ctx, LiveVideoAnalytics_ResolveOperatorInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveVideoAnalyticsClient) ListOperators(ctx context.Context, in *ListOperatorsRequest, opts ...grpc.CallOption) (*ListOperatorsResponse, error) {
	out := new(ListOperatorsResponse)
	err := c.cc.Invoke(ctx, LiveVideoAnalytics_ListOperators_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveVideoAnalyticsClient) GetOperator(ctx context.Context, in *GetOperatorRequest, opts ...grpc.CallOption) (*Operator, error) {
	out := new(Operator)
	err := c.cc.Invoke(ctx, LiveVideoAnalytics_GetOperator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveVideoAnalyticsClient) CreateOperator(ctx context.Context, in *CreateOperatorRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, LiveVideoAnalytics_CreateOperator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveVideoAnalyticsClient) UpdateOperator(ctx context.Context, in *UpdateOperatorRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, LiveVideoAnalytics_UpdateOperator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveVideoAnalyticsClient) DeleteOperator(ctx context.Context, in *DeleteOperatorRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, LiveVideoAnalytics_DeleteOperator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveVideoAnalyticsClient) ListAnalyses(ctx context.Context, in *ListAnalysesRequest, opts ...grpc.CallOption) (*ListAnalysesResponse, error) {
	out := new(ListAnalysesResponse)
	err := c.cc.Invoke(ctx, LiveVideoAnalytics_ListAnalyses_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveVideoAnalyticsClient) GetAnalysis(ctx context.Context, in *GetAnalysisRequest, opts ...grpc.CallOption) (*Analysis, error) {
	out := new(Analysis)
	err := c.cc.Invoke(ctx, LiveVideoAnalytics_GetAnalysis_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveVideoAnalyticsClient) CreateAnalysis(ctx context.Context, in *CreateAnalysisRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, LiveVideoAnalytics_CreateAnalysis_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveVideoAnalyticsClient) UpdateAnalysis(ctx context.Context, in *UpdateAnalysisRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, LiveVideoAnalytics_UpdateAnalysis_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveVideoAnalyticsClient) DeleteAnalysis(ctx context.Context, in *DeleteAnalysisRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, LiveVideoAnalytics_DeleteAnalysis_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveVideoAnalyticsClient) ListProcesses(ctx context.Context, in *ListProcessesRequest, opts ...grpc.CallOption) (*ListProcessesResponse, error) {
	out := new(ListProcessesResponse)
	err := c.cc.Invoke(ctx, LiveVideoAnalytics_ListProcesses_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveVideoAnalyticsClient) GetProcess(ctx context.Context, in *GetProcessRequest, opts ...grpc.CallOption) (*Process, error) {
	out := new(Process)
	err := c.cc.Invoke(ctx, LiveVideoAnalytics_GetProcess_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveVideoAnalyticsClient) CreateProcess(ctx context.Context, in *CreateProcessRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, LiveVideoAnalytics_CreateProcess_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveVideoAnalyticsClient) UpdateProcess(ctx context.Context, in *UpdateProcessRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, LiveVideoAnalytics_UpdateProcess_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveVideoAnalyticsClient) DeleteProcess(ctx context.Context, in *DeleteProcessRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, LiveVideoAnalytics_DeleteProcess_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveVideoAnalyticsClient) BatchRunProcess(ctx context.Context, in *BatchRunProcessRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, LiveVideoAnalytics_BatchRunProcess_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LiveVideoAnalyticsServer is the server API for LiveVideoAnalytics service.
// All implementations should embed UnimplementedLiveVideoAnalyticsServer
// for forward compatibility
type LiveVideoAnalyticsServer interface {
	// ListPublicOperators returns all the operators in public registry.
	ListPublicOperators(context.Context, *ListPublicOperatorsRequest) (*ListPublicOperatorsResponse, error)
	// ResolveOperatorInfo returns the operator information based on the request.
	ResolveOperatorInfo(context.Context, *ResolveOperatorInfoRequest) (*ResolveOperatorInfoResponse, error)
	// Lists Operators in a given project and location.
	ListOperators(context.Context, *ListOperatorsRequest) (*ListOperatorsResponse, error)
	// Gets details of a single Operator.
	GetOperator(context.Context, *GetOperatorRequest) (*Operator, error)
	// Creates a new Operator in a given project and location.
	CreateOperator(context.Context, *CreateOperatorRequest) (*longrunningpb.Operation, error)
	// Updates the parameters of a single Operator.
	UpdateOperator(context.Context, *UpdateOperatorRequest) (*longrunningpb.Operation, error)
	// Deletes a single Operator.
	DeleteOperator(context.Context, *DeleteOperatorRequest) (*longrunningpb.Operation, error)
	// Lists Analyses in a given project and location.
	ListAnalyses(context.Context, *ListAnalysesRequest) (*ListAnalysesResponse, error)
	// Gets details of a single Analysis.
	GetAnalysis(context.Context, *GetAnalysisRequest) (*Analysis, error)
	// Creates a new Analysis in a given project and location.
	CreateAnalysis(context.Context, *CreateAnalysisRequest) (*longrunningpb.Operation, error)
	// Updates the parameters of a single Analysis.
	UpdateAnalysis(context.Context, *UpdateAnalysisRequest) (*longrunningpb.Operation, error)
	// Deletes a single Analysis.
	DeleteAnalysis(context.Context, *DeleteAnalysisRequest) (*longrunningpb.Operation, error)
	// Lists Processes in a given project and location.
	ListProcesses(context.Context, *ListProcessesRequest) (*ListProcessesResponse, error)
	// Gets details of a single Process.
	GetProcess(context.Context, *GetProcessRequest) (*Process, error)
	// Creates a new Process in a given project and location.
	CreateProcess(context.Context, *CreateProcessRequest) (*longrunningpb.Operation, error)
	// Updates the parameters of a single Process.
	UpdateProcess(context.Context, *UpdateProcessRequest) (*longrunningpb.Operation, error)
	// Deletes a single Process.
	DeleteProcess(context.Context, *DeleteProcessRequest) (*longrunningpb.Operation, error)
	// Run all of the processes to "completion". Max time for each process is
	// the LRO time limit.
	BatchRunProcess(context.Context, *BatchRunProcessRequest) (*longrunningpb.Operation, error)
}

// UnimplementedLiveVideoAnalyticsServer should be embedded to have forward compatible implementations.
type UnimplementedLiveVideoAnalyticsServer struct {
}

func (UnimplementedLiveVideoAnalyticsServer) ListPublicOperators(context.Context, *ListPublicOperatorsRequest) (*ListPublicOperatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPublicOperators not implemented")
}
func (UnimplementedLiveVideoAnalyticsServer) ResolveOperatorInfo(context.Context, *ResolveOperatorInfoRequest) (*ResolveOperatorInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveOperatorInfo not implemented")
}
func (UnimplementedLiveVideoAnalyticsServer) ListOperators(context.Context, *ListOperatorsRequest) (*ListOperatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOperators not implemented")
}
func (UnimplementedLiveVideoAnalyticsServer) GetOperator(context.Context, *GetOperatorRequest) (*Operator, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperator not implemented")
}
func (UnimplementedLiveVideoAnalyticsServer) CreateOperator(context.Context, *CreateOperatorRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOperator not implemented")
}
func (UnimplementedLiveVideoAnalyticsServer) UpdateOperator(context.Context, *UpdateOperatorRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOperator not implemented")
}
func (UnimplementedLiveVideoAnalyticsServer) DeleteOperator(context.Context, *DeleteOperatorRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOperator not implemented")
}
func (UnimplementedLiveVideoAnalyticsServer) ListAnalyses(context.Context, *ListAnalysesRequest) (*ListAnalysesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAnalyses not implemented")
}
func (UnimplementedLiveVideoAnalyticsServer) GetAnalysis(context.Context, *GetAnalysisRequest) (*Analysis, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnalysis not implemented")
}
func (UnimplementedLiveVideoAnalyticsServer) CreateAnalysis(context.Context, *CreateAnalysisRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnalysis not implemented")
}
func (UnimplementedLiveVideoAnalyticsServer) UpdateAnalysis(context.Context, *UpdateAnalysisRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAnalysis not implemented")
}
func (UnimplementedLiveVideoAnalyticsServer) DeleteAnalysis(context.Context, *DeleteAnalysisRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAnalysis not implemented")
}
func (UnimplementedLiveVideoAnalyticsServer) ListProcesses(context.Context, *ListProcessesRequest) (*ListProcessesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProcesses not implemented")
}
func (UnimplementedLiveVideoAnalyticsServer) GetProcess(context.Context, *GetProcessRequest) (*Process, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProcess not implemented")
}
func (UnimplementedLiveVideoAnalyticsServer) CreateProcess(context.Context, *CreateProcessRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProcess not implemented")
}
func (UnimplementedLiveVideoAnalyticsServer) UpdateProcess(context.Context, *UpdateProcessRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProcess not implemented")
}
func (UnimplementedLiveVideoAnalyticsServer) DeleteProcess(context.Context, *DeleteProcessRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProcess not implemented")
}
func (UnimplementedLiveVideoAnalyticsServer) BatchRunProcess(context.Context, *BatchRunProcessRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchRunProcess not implemented")
}

// UnsafeLiveVideoAnalyticsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LiveVideoAnalyticsServer will
// result in compilation errors.
type UnsafeLiveVideoAnalyticsServer interface {
	mustEmbedUnimplementedLiveVideoAnalyticsServer()
}

func RegisterLiveVideoAnalyticsServer(s grpc.ServiceRegistrar, srv LiveVideoAnalyticsServer) {
	s.RegisterService(&LiveVideoAnalytics_ServiceDesc, srv)
}

func _LiveVideoAnalytics_ListPublicOperators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPublicOperatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveVideoAnalyticsServer).ListPublicOperators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveVideoAnalytics_ListPublicOperators_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveVideoAnalyticsServer).ListPublicOperators(ctx, req.(*ListPublicOperatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveVideoAnalytics_ResolveOperatorInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveOperatorInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveVideoAnalyticsServer).ResolveOperatorInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveVideoAnalytics_ResolveOperatorInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveVideoAnalyticsServer).ResolveOperatorInfo(ctx, req.(*ResolveOperatorInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveVideoAnalytics_ListOperators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOperatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveVideoAnalyticsServer).ListOperators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveVideoAnalytics_ListOperators_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveVideoAnalyticsServer).ListOperators(ctx, req.(*ListOperatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveVideoAnalytics_GetOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveVideoAnalyticsServer).GetOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveVideoAnalytics_GetOperator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveVideoAnalyticsServer).GetOperator(ctx, req.(*GetOperatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveVideoAnalytics_CreateOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOperatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveVideoAnalyticsServer).CreateOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveVideoAnalytics_CreateOperator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveVideoAnalyticsServer).CreateOperator(ctx, req.(*CreateOperatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveVideoAnalytics_UpdateOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOperatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveVideoAnalyticsServer).UpdateOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveVideoAnalytics_UpdateOperator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveVideoAnalyticsServer).UpdateOperator(ctx, req.(*UpdateOperatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveVideoAnalytics_DeleteOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOperatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveVideoAnalyticsServer).DeleteOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveVideoAnalytics_DeleteOperator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveVideoAnalyticsServer).DeleteOperator(ctx, req.(*DeleteOperatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveVideoAnalytics_ListAnalyses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAnalysesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveVideoAnalyticsServer).ListAnalyses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveVideoAnalytics_ListAnalyses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveVideoAnalyticsServer).ListAnalyses(ctx, req.(*ListAnalysesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveVideoAnalytics_GetAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnalysisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveVideoAnalyticsServer).GetAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveVideoAnalytics_GetAnalysis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveVideoAnalyticsServer).GetAnalysis(ctx, req.(*GetAnalysisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveVideoAnalytics_CreateAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnalysisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveVideoAnalyticsServer).CreateAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveVideoAnalytics_CreateAnalysis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveVideoAnalyticsServer).CreateAnalysis(ctx, req.(*CreateAnalysisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveVideoAnalytics_UpdateAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAnalysisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveVideoAnalyticsServer).UpdateAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveVideoAnalytics_UpdateAnalysis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveVideoAnalyticsServer).UpdateAnalysis(ctx, req.(*UpdateAnalysisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveVideoAnalytics_DeleteAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAnalysisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveVideoAnalyticsServer).DeleteAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveVideoAnalytics_DeleteAnalysis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveVideoAnalyticsServer).DeleteAnalysis(ctx, req.(*DeleteAnalysisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveVideoAnalytics_ListProcesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProcessesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveVideoAnalyticsServer).ListProcesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveVideoAnalytics_ListProcesses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveVideoAnalyticsServer).ListProcesses(ctx, req.(*ListProcessesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveVideoAnalytics_GetProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveVideoAnalyticsServer).GetProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveVideoAnalytics_GetProcess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveVideoAnalyticsServer).GetProcess(ctx, req.(*GetProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveVideoAnalytics_CreateProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveVideoAnalyticsServer).CreateProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveVideoAnalytics_CreateProcess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveVideoAnalyticsServer).CreateProcess(ctx, req.(*CreateProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveVideoAnalytics_UpdateProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveVideoAnalyticsServer).UpdateProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveVideoAnalytics_UpdateProcess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveVideoAnalyticsServer).UpdateProcess(ctx, req.(*UpdateProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveVideoAnalytics_DeleteProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveVideoAnalyticsServer).DeleteProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveVideoAnalytics_DeleteProcess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveVideoAnalyticsServer).DeleteProcess(ctx, req.(*DeleteProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveVideoAnalytics_BatchRunProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchRunProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveVideoAnalyticsServer).BatchRunProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveVideoAnalytics_BatchRunProcess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveVideoAnalyticsServer).BatchRunProcess(ctx, req.(*BatchRunProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LiveVideoAnalytics_ServiceDesc is the grpc.ServiceDesc for LiveVideoAnalytics service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LiveVideoAnalytics_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.visionai.v1.LiveVideoAnalytics",
	HandlerType: (*LiveVideoAnalyticsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPublicOperators",
			Handler:    _LiveVideoAnalytics_ListPublicOperators_Handler,
		},
		{
			MethodName: "ResolveOperatorInfo",
			Handler:    _LiveVideoAnalytics_ResolveOperatorInfo_Handler,
		},
		{
			MethodName: "ListOperators",
			Handler:    _LiveVideoAnalytics_ListOperators_Handler,
		},
		{
			MethodName: "GetOperator",
			Handler:    _LiveVideoAnalytics_GetOperator_Handler,
		},
		{
			MethodName: "CreateOperator",
			Handler:    _LiveVideoAnalytics_CreateOperator_Handler,
		},
		{
			MethodName: "UpdateOperator",
			Handler:    _LiveVideoAnalytics_UpdateOperator_Handler,
		},
		{
			MethodName: "DeleteOperator",
			Handler:    _LiveVideoAnalytics_DeleteOperator_Handler,
		},
		{
			MethodName: "ListAnalyses",
			Handler:    _LiveVideoAnalytics_ListAnalyses_Handler,
		},
		{
			MethodName: "GetAnalysis",
			Handler:    _LiveVideoAnalytics_GetAnalysis_Handler,
		},
		{
			MethodName: "CreateAnalysis",
			Handler:    _LiveVideoAnalytics_CreateAnalysis_Handler,
		},
		{
			MethodName: "UpdateAnalysis",
			Handler:    _LiveVideoAnalytics_UpdateAnalysis_Handler,
		},
		{
			MethodName: "DeleteAnalysis",
			Handler:    _LiveVideoAnalytics_DeleteAnalysis_Handler,
		},
		{
			MethodName: "ListProcesses",
			Handler:    _LiveVideoAnalytics_ListProcesses_Handler,
		},
		{
			MethodName: "GetProcess",
			Handler:    _LiveVideoAnalytics_GetProcess_Handler,
		},
		{
			MethodName: "CreateProcess",
			Handler:    _LiveVideoAnalytics_CreateProcess_Handler,
		},
		{
			MethodName: "UpdateProcess",
			Handler:    _LiveVideoAnalytics_UpdateProcess_Handler,
		},
		{
			MethodName: "DeleteProcess",
			Handler:    _LiveVideoAnalytics_DeleteProcess_Handler,
		},
		{
			MethodName: "BatchRunProcess",
			Handler:    _LiveVideoAnalytics_BatchRunProcess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/visionai/v1/lva_service.proto",
}
