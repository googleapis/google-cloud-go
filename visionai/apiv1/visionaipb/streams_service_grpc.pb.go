// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/visionai/v1/streams_service.proto

package visionaipb

import (
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StreamsService_ListClusters_FullMethodName           = "/google.cloud.visionai.v1.StreamsService/ListClusters"
	StreamsService_GetCluster_FullMethodName             = "/google.cloud.visionai.v1.StreamsService/GetCluster"
	StreamsService_CreateCluster_FullMethodName          = "/google.cloud.visionai.v1.StreamsService/CreateCluster"
	StreamsService_UpdateCluster_FullMethodName          = "/google.cloud.visionai.v1.StreamsService/UpdateCluster"
	StreamsService_DeleteCluster_FullMethodName          = "/google.cloud.visionai.v1.StreamsService/DeleteCluster"
	StreamsService_ListStreams_FullMethodName            = "/google.cloud.visionai.v1.StreamsService/ListStreams"
	StreamsService_GetStream_FullMethodName              = "/google.cloud.visionai.v1.StreamsService/GetStream"
	StreamsService_CreateStream_FullMethodName           = "/google.cloud.visionai.v1.StreamsService/CreateStream"
	StreamsService_UpdateStream_FullMethodName           = "/google.cloud.visionai.v1.StreamsService/UpdateStream"
	StreamsService_DeleteStream_FullMethodName           = "/google.cloud.visionai.v1.StreamsService/DeleteStream"
	StreamsService_GetStreamThumbnail_FullMethodName     = "/google.cloud.visionai.v1.StreamsService/GetStreamThumbnail"
	StreamsService_GenerateStreamHlsToken_FullMethodName = "/google.cloud.visionai.v1.StreamsService/GenerateStreamHlsToken"
	StreamsService_ListEvents_FullMethodName             = "/google.cloud.visionai.v1.StreamsService/ListEvents"
	StreamsService_GetEvent_FullMethodName               = "/google.cloud.visionai.v1.StreamsService/GetEvent"
	StreamsService_CreateEvent_FullMethodName            = "/google.cloud.visionai.v1.StreamsService/CreateEvent"
	StreamsService_UpdateEvent_FullMethodName            = "/google.cloud.visionai.v1.StreamsService/UpdateEvent"
	StreamsService_DeleteEvent_FullMethodName            = "/google.cloud.visionai.v1.StreamsService/DeleteEvent"
	StreamsService_ListSeries_FullMethodName             = "/google.cloud.visionai.v1.StreamsService/ListSeries"
	StreamsService_GetSeries_FullMethodName              = "/google.cloud.visionai.v1.StreamsService/GetSeries"
	StreamsService_CreateSeries_FullMethodName           = "/google.cloud.visionai.v1.StreamsService/CreateSeries"
	StreamsService_UpdateSeries_FullMethodName           = "/google.cloud.visionai.v1.StreamsService/UpdateSeries"
	StreamsService_DeleteSeries_FullMethodName           = "/google.cloud.visionai.v1.StreamsService/DeleteSeries"
	StreamsService_MaterializeChannel_FullMethodName     = "/google.cloud.visionai.v1.StreamsService/MaterializeChannel"
)

// StreamsServiceClient is the client API for StreamsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamsServiceClient interface {
	// Lists Clusters in a given project and location.
	ListClusters(ctx context.Context, in *ListClustersRequest, opts ...grpc.CallOption) (*ListClustersResponse, error)
	// Gets details of a single Cluster.
	GetCluster(ctx context.Context, in *GetClusterRequest, opts ...grpc.CallOption) (*Cluster, error)
	// Creates a new Cluster in a given project and location.
	CreateCluster(ctx context.Context, in *CreateClusterRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates the parameters of a single Cluster.
	UpdateCluster(ctx context.Context, in *UpdateClusterRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single Cluster.
	DeleteCluster(ctx context.Context, in *DeleteClusterRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists Streams in a given project and location.
	ListStreams(ctx context.Context, in *ListStreamsRequest, opts ...grpc.CallOption) (*ListStreamsResponse, error)
	// Gets details of a single Stream.
	GetStream(ctx context.Context, in *GetStreamRequest, opts ...grpc.CallOption) (*Stream, error)
	// Creates a new Stream in a given project and location.
	CreateStream(ctx context.Context, in *CreateStreamRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates the parameters of a single Stream.
	UpdateStream(ctx context.Context, in *UpdateStreamRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single Stream.
	DeleteStream(ctx context.Context, in *DeleteStreamRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets the thumbnail (image snapshot) of a single Stream.
	GetStreamThumbnail(ctx context.Context, in *GetStreamThumbnailRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Generate the JWT auth token required to get the stream HLS contents.
	GenerateStreamHlsToken(ctx context.Context, in *GenerateStreamHlsTokenRequest, opts ...grpc.CallOption) (*GenerateStreamHlsTokenResponse, error)
	// Lists Events in a given project and location.
	ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*ListEventsResponse, error)
	// Gets details of a single Event.
	GetEvent(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*Event, error)
	// Creates a new Event in a given project and location.
	CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates the parameters of a single Event.
	UpdateEvent(ctx context.Context, in *UpdateEventRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single Event.
	DeleteEvent(ctx context.Context, in *DeleteEventRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists Series in a given project and location.
	ListSeries(ctx context.Context, in *ListSeriesRequest, opts ...grpc.CallOption) (*ListSeriesResponse, error)
	// Gets details of a single Series.
	GetSeries(ctx context.Context, in *GetSeriesRequest, opts ...grpc.CallOption) (*Series, error)
	// Creates a new Series in a given project and location.
	CreateSeries(ctx context.Context, in *CreateSeriesRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates the parameters of a single Event.
	UpdateSeries(ctx context.Context, in *UpdateSeriesRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single Series.
	DeleteSeries(ctx context.Context, in *DeleteSeriesRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Materialize a channel.
	MaterializeChannel(ctx context.Context, in *MaterializeChannelRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type streamsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamsServiceClient(cc grpc.ClientConnInterface) StreamsServiceClient {
	return &streamsServiceClient{cc}
}

func (c *streamsServiceClient) ListClusters(ctx context.Context, in *ListClustersRequest, opts ...grpc.CallOption) (*ListClustersResponse, error) {
	out := new(ListClustersResponse)
	err := c.cc.Invoke(ctx, StreamsService_ListClusters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamsServiceClient) GetCluster(ctx context.Context, in *GetClusterRequest, opts ...grpc.CallOption) (*Cluster, error) {
	out := new(Cluster)
	err := c.cc.Invoke(ctx, StreamsService_GetCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamsServiceClient) CreateCluster(ctx context.Context, in *CreateClusterRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, StreamsService_CreateCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamsServiceClient) UpdateCluster(ctx context.Context, in *UpdateClusterRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, StreamsService_UpdateCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamsServiceClient) DeleteCluster(ctx context.Context, in *DeleteClusterRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, StreamsService_DeleteCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamsServiceClient) ListStreams(ctx context.Context, in *ListStreamsRequest, opts ...grpc.CallOption) (*ListStreamsResponse, error) {
	out := new(ListStreamsResponse)
	err := c.cc.Invoke(ctx, StreamsService_ListStreams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamsServiceClient) GetStream(ctx context.Context, in *GetStreamRequest, opts ...grpc.CallOption) (*Stream, error) {
	out := new(Stream)
	err := c.cc.Invoke(ctx, StreamsService_GetStream_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamsServiceClient) CreateStream(ctx context.Context, in *CreateStreamRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, StreamsService_CreateStream_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamsServiceClient) UpdateStream(ctx context.Context, in *UpdateStreamRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, StreamsService_UpdateStream_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamsServiceClient) DeleteStream(ctx context.Context, in *DeleteStreamRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, StreamsService_DeleteStream_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamsServiceClient) GetStreamThumbnail(ctx context.Context, in *GetStreamThumbnailRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, StreamsService_GetStreamThumbnail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamsServiceClient) GenerateStreamHlsToken(ctx context.Context, in *GenerateStreamHlsTokenRequest, opts ...grpc.CallOption) (*GenerateStreamHlsTokenResponse, error) {
	out := new(GenerateStreamHlsTokenResponse)
	err := c.cc.Invoke(ctx, StreamsService_GenerateStreamHlsToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamsServiceClient) ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*ListEventsResponse, error) {
	out := new(ListEventsResponse)
	err := c.cc.Invoke(ctx, StreamsService_ListEvents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamsServiceClient) GetEvent(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, StreamsService_GetEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamsServiceClient) CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, StreamsService_CreateEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamsServiceClient) UpdateEvent(ctx context.Context, in *UpdateEventRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, StreamsService_UpdateEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamsServiceClient) DeleteEvent(ctx context.Context, in *DeleteEventRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, StreamsService_DeleteEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamsServiceClient) ListSeries(ctx context.Context, in *ListSeriesRequest, opts ...grpc.CallOption) (*ListSeriesResponse, error) {
	out := new(ListSeriesResponse)
	err := c.cc.Invoke(ctx, StreamsService_ListSeries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamsServiceClient) GetSeries(ctx context.Context, in *GetSeriesRequest, opts ...grpc.CallOption) (*Series, error) {
	out := new(Series)
	err := c.cc.Invoke(ctx, StreamsService_GetSeries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamsServiceClient) CreateSeries(ctx context.Context, in *CreateSeriesRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, StreamsService_CreateSeries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamsServiceClient) UpdateSeries(ctx context.Context, in *UpdateSeriesRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, StreamsService_UpdateSeries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamsServiceClient) DeleteSeries(ctx context.Context, in *DeleteSeriesRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, StreamsService_DeleteSeries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamsServiceClient) MaterializeChannel(ctx context.Context, in *MaterializeChannelRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, StreamsService_MaterializeChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamsServiceServer is the server API for StreamsService service.
// All implementations should embed UnimplementedStreamsServiceServer
// for forward compatibility
type StreamsServiceServer interface {
	// Lists Clusters in a given project and location.
	ListClusters(context.Context, *ListClustersRequest) (*ListClustersResponse, error)
	// Gets details of a single Cluster.
	GetCluster(context.Context, *GetClusterRequest) (*Cluster, error)
	// Creates a new Cluster in a given project and location.
	CreateCluster(context.Context, *CreateClusterRequest) (*longrunningpb.Operation, error)
	// Updates the parameters of a single Cluster.
	UpdateCluster(context.Context, *UpdateClusterRequest) (*longrunningpb.Operation, error)
	// Deletes a single Cluster.
	DeleteCluster(context.Context, *DeleteClusterRequest) (*longrunningpb.Operation, error)
	// Lists Streams in a given project and location.
	ListStreams(context.Context, *ListStreamsRequest) (*ListStreamsResponse, error)
	// Gets details of a single Stream.
	GetStream(context.Context, *GetStreamRequest) (*Stream, error)
	// Creates a new Stream in a given project and location.
	CreateStream(context.Context, *CreateStreamRequest) (*longrunningpb.Operation, error)
	// Updates the parameters of a single Stream.
	UpdateStream(context.Context, *UpdateStreamRequest) (*longrunningpb.Operation, error)
	// Deletes a single Stream.
	DeleteStream(context.Context, *DeleteStreamRequest) (*longrunningpb.Operation, error)
	// Gets the thumbnail (image snapshot) of a single Stream.
	GetStreamThumbnail(context.Context, *GetStreamThumbnailRequest) (*longrunningpb.Operation, error)
	// Generate the JWT auth token required to get the stream HLS contents.
	GenerateStreamHlsToken(context.Context, *GenerateStreamHlsTokenRequest) (*GenerateStreamHlsTokenResponse, error)
	// Lists Events in a given project and location.
	ListEvents(context.Context, *ListEventsRequest) (*ListEventsResponse, error)
	// Gets details of a single Event.
	GetEvent(context.Context, *GetEventRequest) (*Event, error)
	// Creates a new Event in a given project and location.
	CreateEvent(context.Context, *CreateEventRequest) (*longrunningpb.Operation, error)
	// Updates the parameters of a single Event.
	UpdateEvent(context.Context, *UpdateEventRequest) (*longrunningpb.Operation, error)
	// Deletes a single Event.
	DeleteEvent(context.Context, *DeleteEventRequest) (*longrunningpb.Operation, error)
	// Lists Series in a given project and location.
	ListSeries(context.Context, *ListSeriesRequest) (*ListSeriesResponse, error)
	// Gets details of a single Series.
	GetSeries(context.Context, *GetSeriesRequest) (*Series, error)
	// Creates a new Series in a given project and location.
	CreateSeries(context.Context, *CreateSeriesRequest) (*longrunningpb.Operation, error)
	// Updates the parameters of a single Event.
	UpdateSeries(context.Context, *UpdateSeriesRequest) (*longrunningpb.Operation, error)
	// Deletes a single Series.
	DeleteSeries(context.Context, *DeleteSeriesRequest) (*longrunningpb.Operation, error)
	// Materialize a channel.
	MaterializeChannel(context.Context, *MaterializeChannelRequest) (*longrunningpb.Operation, error)
}

// UnimplementedStreamsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedStreamsServiceServer struct {
}

func (UnimplementedStreamsServiceServer) ListClusters(context.Context, *ListClustersRequest) (*ListClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClusters not implemented")
}
func (UnimplementedStreamsServiceServer) GetCluster(context.Context, *GetClusterRequest) (*Cluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCluster not implemented")
}
func (UnimplementedStreamsServiceServer) CreateCluster(context.Context, *CreateClusterRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCluster not implemented")
}
func (UnimplementedStreamsServiceServer) UpdateCluster(context.Context, *UpdateClusterRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCluster not implemented")
}
func (UnimplementedStreamsServiceServer) DeleteCluster(context.Context, *DeleteClusterRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCluster not implemented")
}
func (UnimplementedStreamsServiceServer) ListStreams(context.Context, *ListStreamsRequest) (*ListStreamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStreams not implemented")
}
func (UnimplementedStreamsServiceServer) GetStream(context.Context, *GetStreamRequest) (*Stream, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStream not implemented")
}
func (UnimplementedStreamsServiceServer) CreateStream(context.Context, *CreateStreamRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStream not implemented")
}
func (UnimplementedStreamsServiceServer) UpdateStream(context.Context, *UpdateStreamRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStream not implemented")
}
func (UnimplementedStreamsServiceServer) DeleteStream(context.Context, *DeleteStreamRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStream not implemented")
}
func (UnimplementedStreamsServiceServer) GetStreamThumbnail(context.Context, *GetStreamThumbnailRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamThumbnail not implemented")
}
func (UnimplementedStreamsServiceServer) GenerateStreamHlsToken(context.Context, *GenerateStreamHlsTokenRequest) (*GenerateStreamHlsTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateStreamHlsToken not implemented")
}
func (UnimplementedStreamsServiceServer) ListEvents(context.Context, *ListEventsRequest) (*ListEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEvents not implemented")
}
func (UnimplementedStreamsServiceServer) GetEvent(context.Context, *GetEventRequest) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvent not implemented")
}
func (UnimplementedStreamsServiceServer) CreateEvent(context.Context, *CreateEventRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEvent not implemented")
}
func (UnimplementedStreamsServiceServer) UpdateEvent(context.Context, *UpdateEventRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEvent not implemented")
}
func (UnimplementedStreamsServiceServer) DeleteEvent(context.Context, *DeleteEventRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEvent not implemented")
}
func (UnimplementedStreamsServiceServer) ListSeries(context.Context, *ListSeriesRequest) (*ListSeriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSeries not implemented")
}
func (UnimplementedStreamsServiceServer) GetSeries(context.Context, *GetSeriesRequest) (*Series, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeries not implemented")
}
func (UnimplementedStreamsServiceServer) CreateSeries(context.Context, *CreateSeriesRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSeries not implemented")
}
func (UnimplementedStreamsServiceServer) UpdateSeries(context.Context, *UpdateSeriesRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSeries not implemented")
}
func (UnimplementedStreamsServiceServer) DeleteSeries(context.Context, *DeleteSeriesRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSeries not implemented")
}
func (UnimplementedStreamsServiceServer) MaterializeChannel(context.Context, *MaterializeChannelRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MaterializeChannel not implemented")
}

// UnsafeStreamsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamsServiceServer will
// result in compilation errors.
type UnsafeStreamsServiceServer interface {
	mustEmbedUnimplementedStreamsServiceServer()
}

func RegisterStreamsServiceServer(s grpc.ServiceRegistrar, srv StreamsServiceServer) {
	s.RegisterService(&StreamsService_ServiceDesc, srv)
}

func _StreamsService_ListClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamsServiceServer).ListClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamsService_ListClusters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamsServiceServer).ListClusters(ctx, req.(*ListClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamsService_GetCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamsServiceServer).GetCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamsService_GetCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamsServiceServer).GetCluster(ctx, req.(*GetClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamsService_CreateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamsServiceServer).CreateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamsService_CreateCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamsServiceServer).CreateCluster(ctx, req.(*CreateClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamsService_UpdateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamsServiceServer).UpdateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamsService_UpdateCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamsServiceServer).UpdateCluster(ctx, req.(*UpdateClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamsService_DeleteCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamsServiceServer).DeleteCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamsService_DeleteCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamsServiceServer).DeleteCluster(ctx, req.(*DeleteClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamsService_ListStreams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStreamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamsServiceServer).ListStreams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamsService_ListStreams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamsServiceServer).ListStreams(ctx, req.(*ListStreamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamsService_GetStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamsServiceServer).GetStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamsService_GetStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamsServiceServer).GetStream(ctx, req.(*GetStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamsService_CreateStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamsServiceServer).CreateStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamsService_CreateStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamsServiceServer).CreateStream(ctx, req.(*CreateStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamsService_UpdateStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamsServiceServer).UpdateStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamsService_UpdateStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamsServiceServer).UpdateStream(ctx, req.(*UpdateStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamsService_DeleteStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamsServiceServer).DeleteStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamsService_DeleteStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamsServiceServer).DeleteStream(ctx, req.(*DeleteStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamsService_GetStreamThumbnail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamThumbnailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamsServiceServer).GetStreamThumbnail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamsService_GetStreamThumbnail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamsServiceServer).GetStreamThumbnail(ctx, req.(*GetStreamThumbnailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamsService_GenerateStreamHlsToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateStreamHlsTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamsServiceServer).GenerateStreamHlsToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamsService_GenerateStreamHlsToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamsServiceServer).GenerateStreamHlsToken(ctx, req.(*GenerateStreamHlsTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamsService_ListEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamsServiceServer).ListEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamsService_ListEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamsServiceServer).ListEvents(ctx, req.(*ListEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamsService_GetEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamsServiceServer).GetEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamsService_GetEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamsServiceServer).GetEvent(ctx, req.(*GetEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamsService_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamsServiceServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamsService_CreateEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamsServiceServer).CreateEvent(ctx, req.(*CreateEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamsService_UpdateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamsServiceServer).UpdateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamsService_UpdateEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamsServiceServer).UpdateEvent(ctx, req.(*UpdateEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamsService_DeleteEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamsServiceServer).DeleteEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamsService_DeleteEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamsServiceServer).DeleteEvent(ctx, req.(*DeleteEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamsService_ListSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSeriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamsServiceServer).ListSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamsService_ListSeries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamsServiceServer).ListSeries(ctx, req.(*ListSeriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamsService_GetSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSeriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamsServiceServer).GetSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamsService_GetSeries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamsServiceServer).GetSeries(ctx, req.(*GetSeriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamsService_CreateSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSeriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamsServiceServer).CreateSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamsService_CreateSeries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamsServiceServer).CreateSeries(ctx, req.(*CreateSeriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamsService_UpdateSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSeriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamsServiceServer).UpdateSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamsService_UpdateSeries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamsServiceServer).UpdateSeries(ctx, req.(*UpdateSeriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamsService_DeleteSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSeriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamsServiceServer).DeleteSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamsService_DeleteSeries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamsServiceServer).DeleteSeries(ctx, req.(*DeleteSeriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamsService_MaterializeChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaterializeChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamsServiceServer).MaterializeChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamsService_MaterializeChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamsServiceServer).MaterializeChannel(ctx, req.(*MaterializeChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StreamsService_ServiceDesc is the grpc.ServiceDesc for StreamsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.visionai.v1.StreamsService",
	HandlerType: (*StreamsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListClusters",
			Handler:    _StreamsService_ListClusters_Handler,
		},
		{
			MethodName: "GetCluster",
			Handler:    _StreamsService_GetCluster_Handler,
		},
		{
			MethodName: "CreateCluster",
			Handler:    _StreamsService_CreateCluster_Handler,
		},
		{
			MethodName: "UpdateCluster",
			Handler:    _StreamsService_UpdateCluster_Handler,
		},
		{
			MethodName: "DeleteCluster",
			Handler:    _StreamsService_DeleteCluster_Handler,
		},
		{
			MethodName: "ListStreams",
			Handler:    _StreamsService_ListStreams_Handler,
		},
		{
			MethodName: "GetStream",
			Handler:    _StreamsService_GetStream_Handler,
		},
		{
			MethodName: "CreateStream",
			Handler:    _StreamsService_CreateStream_Handler,
		},
		{
			MethodName: "UpdateStream",
			Handler:    _StreamsService_UpdateStream_Handler,
		},
		{
			MethodName: "DeleteStream",
			Handler:    _StreamsService_DeleteStream_Handler,
		},
		{
			MethodName: "GetStreamThumbnail",
			Handler:    _StreamsService_GetStreamThumbnail_Handler,
		},
		{
			MethodName: "GenerateStreamHlsToken",
			Handler:    _StreamsService_GenerateStreamHlsToken_Handler,
		},
		{
			MethodName: "ListEvents",
			Handler:    _StreamsService_ListEvents_Handler,
		},
		{
			MethodName: "GetEvent",
			Handler:    _StreamsService_GetEvent_Handler,
		},
		{
			MethodName: "CreateEvent",
			Handler:    _StreamsService_CreateEvent_Handler,
		},
		{
			MethodName: "UpdateEvent",
			Handler:    _StreamsService_UpdateEvent_Handler,
		},
		{
			MethodName: "DeleteEvent",
			Handler:    _StreamsService_DeleteEvent_Handler,
		},
		{
			MethodName: "ListSeries",
			Handler:    _StreamsService_ListSeries_Handler,
		},
		{
			MethodName: "GetSeries",
			Handler:    _StreamsService_GetSeries_Handler,
		},
		{
			MethodName: "CreateSeries",
			Handler:    _StreamsService_CreateSeries_Handler,
		},
		{
			MethodName: "UpdateSeries",
			Handler:    _StreamsService_UpdateSeries_Handler,
		},
		{
			MethodName: "DeleteSeries",
			Handler:    _StreamsService_DeleteSeries_Handler,
		},
		{
			MethodName: "MaterializeChannel",
			Handler:    _StreamsService_MaterializeChannel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/visionai/v1/streams_service.proto",
}
