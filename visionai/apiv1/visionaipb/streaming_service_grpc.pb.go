// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/visionai/v1/streaming_service.proto

package visionaipb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StreamingService_SendPackets_FullMethodName    = "/google.cloud.visionai.v1.StreamingService/SendPackets"
	StreamingService_ReceivePackets_FullMethodName = "/google.cloud.visionai.v1.StreamingService/ReceivePackets"
	StreamingService_ReceiveEvents_FullMethodName  = "/google.cloud.visionai.v1.StreamingService/ReceiveEvents"
	StreamingService_AcquireLease_FullMethodName   = "/google.cloud.visionai.v1.StreamingService/AcquireLease"
	StreamingService_RenewLease_FullMethodName     = "/google.cloud.visionai.v1.StreamingService/RenewLease"
	StreamingService_ReleaseLease_FullMethodName   = "/google.cloud.visionai.v1.StreamingService/ReleaseLease"
)

// StreamingServiceClient is the client API for StreamingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamingServiceClient interface {
	// Send packets to the series.
	SendPackets(ctx context.Context, opts ...grpc.CallOption) (StreamingService_SendPacketsClient, error)
	// Receive packets from the series.
	ReceivePackets(ctx context.Context, opts ...grpc.CallOption) (StreamingService_ReceivePacketsClient, error)
	// Receive events given the stream name.
	ReceiveEvents(ctx context.Context, opts ...grpc.CallOption) (StreamingService_ReceiveEventsClient, error)
	// AcquireLease acquires a lease.
	AcquireLease(ctx context.Context, in *AcquireLeaseRequest, opts ...grpc.CallOption) (*Lease, error)
	// RenewLease renews a lease.
	RenewLease(ctx context.Context, in *RenewLeaseRequest, opts ...grpc.CallOption) (*Lease, error)
	// RleaseLease releases a lease.
	ReleaseLease(ctx context.Context, in *ReleaseLeaseRequest, opts ...grpc.CallOption) (*ReleaseLeaseResponse, error)
}

type streamingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamingServiceClient(cc grpc.ClientConnInterface) StreamingServiceClient {
	return &streamingServiceClient{cc}
}

func (c *streamingServiceClient) SendPackets(ctx context.Context, opts ...grpc.CallOption) (StreamingService_SendPacketsClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamingService_ServiceDesc.Streams[0], StreamingService_SendPackets_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamingServiceSendPacketsClient{stream}
	return x, nil
}

type StreamingService_SendPacketsClient interface {
	Send(*SendPacketsRequest) error
	Recv() (*SendPacketsResponse, error)
	grpc.ClientStream
}

type streamingServiceSendPacketsClient struct {
	grpc.ClientStream
}

func (x *streamingServiceSendPacketsClient) Send(m *SendPacketsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamingServiceSendPacketsClient) Recv() (*SendPacketsResponse, error) {
	m := new(SendPacketsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamingServiceClient) ReceivePackets(ctx context.Context, opts ...grpc.CallOption) (StreamingService_ReceivePacketsClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamingService_ServiceDesc.Streams[1], StreamingService_ReceivePackets_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamingServiceReceivePacketsClient{stream}
	return x, nil
}

type StreamingService_ReceivePacketsClient interface {
	Send(*ReceivePacketsRequest) error
	Recv() (*ReceivePacketsResponse, error)
	grpc.ClientStream
}

type streamingServiceReceivePacketsClient struct {
	grpc.ClientStream
}

func (x *streamingServiceReceivePacketsClient) Send(m *ReceivePacketsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamingServiceReceivePacketsClient) Recv() (*ReceivePacketsResponse, error) {
	m := new(ReceivePacketsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamingServiceClient) ReceiveEvents(ctx context.Context, opts ...grpc.CallOption) (StreamingService_ReceiveEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamingService_ServiceDesc.Streams[2], StreamingService_ReceiveEvents_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamingServiceReceiveEventsClient{stream}
	return x, nil
}

type StreamingService_ReceiveEventsClient interface {
	Send(*ReceiveEventsRequest) error
	Recv() (*ReceiveEventsResponse, error)
	grpc.ClientStream
}

type streamingServiceReceiveEventsClient struct {
	grpc.ClientStream
}

func (x *streamingServiceReceiveEventsClient) Send(m *ReceiveEventsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamingServiceReceiveEventsClient) Recv() (*ReceiveEventsResponse, error) {
	m := new(ReceiveEventsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamingServiceClient) AcquireLease(ctx context.Context, in *AcquireLeaseRequest, opts ...grpc.CallOption) (*Lease, error) {
	out := new(Lease)
	err := c.cc.Invoke(ctx, StreamingService_AcquireLease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamingServiceClient) RenewLease(ctx context.Context, in *RenewLeaseRequest, opts ...grpc.CallOption) (*Lease, error) {
	out := new(Lease)
	err := c.cc.Invoke(ctx, StreamingService_RenewLease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamingServiceClient) ReleaseLease(ctx context.Context, in *ReleaseLeaseRequest, opts ...grpc.CallOption) (*ReleaseLeaseResponse, error) {
	out := new(ReleaseLeaseResponse)
	err := c.cc.Invoke(ctx, StreamingService_ReleaseLease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamingServiceServer is the server API for StreamingService service.
// All implementations should embed UnimplementedStreamingServiceServer
// for forward compatibility
type StreamingServiceServer interface {
	// Send packets to the series.
	SendPackets(StreamingService_SendPacketsServer) error
	// Receive packets from the series.
	ReceivePackets(StreamingService_ReceivePacketsServer) error
	// Receive events given the stream name.
	ReceiveEvents(StreamingService_ReceiveEventsServer) error
	// AcquireLease acquires a lease.
	AcquireLease(context.Context, *AcquireLeaseRequest) (*Lease, error)
	// RenewLease renews a lease.
	RenewLease(context.Context, *RenewLeaseRequest) (*Lease, error)
	// RleaseLease releases a lease.
	ReleaseLease(context.Context, *ReleaseLeaseRequest) (*ReleaseLeaseResponse, error)
}

// UnimplementedStreamingServiceServer should be embedded to have forward compatible implementations.
type UnimplementedStreamingServiceServer struct {
}

func (UnimplementedStreamingServiceServer) SendPackets(StreamingService_SendPacketsServer) error {
	return status.Errorf(codes.Unimplemented, "method SendPackets not implemented")
}
func (UnimplementedStreamingServiceServer) ReceivePackets(StreamingService_ReceivePacketsServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceivePackets not implemented")
}
func (UnimplementedStreamingServiceServer) ReceiveEvents(StreamingService_ReceiveEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveEvents not implemented")
}
func (UnimplementedStreamingServiceServer) AcquireLease(context.Context, *AcquireLeaseRequest) (*Lease, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcquireLease not implemented")
}
func (UnimplementedStreamingServiceServer) RenewLease(context.Context, *RenewLeaseRequest) (*Lease, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenewLease not implemented")
}
func (UnimplementedStreamingServiceServer) ReleaseLease(context.Context, *ReleaseLeaseRequest) (*ReleaseLeaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseLease not implemented")
}

// UnsafeStreamingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamingServiceServer will
// result in compilation errors.
type UnsafeStreamingServiceServer interface {
	mustEmbedUnimplementedStreamingServiceServer()
}

func RegisterStreamingServiceServer(s grpc.ServiceRegistrar, srv StreamingServiceServer) {
	s.RegisterService(&StreamingService_ServiceDesc, srv)
}

func _StreamingService_SendPackets_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamingServiceServer).SendPackets(&streamingServiceSendPacketsServer{stream})
}

type StreamingService_SendPacketsServer interface {
	Send(*SendPacketsResponse) error
	Recv() (*SendPacketsRequest, error)
	grpc.ServerStream
}

type streamingServiceSendPacketsServer struct {
	grpc.ServerStream
}

func (x *streamingServiceSendPacketsServer) Send(m *SendPacketsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamingServiceSendPacketsServer) Recv() (*SendPacketsRequest, error) {
	m := new(SendPacketsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StreamingService_ReceivePackets_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamingServiceServer).ReceivePackets(&streamingServiceReceivePacketsServer{stream})
}

type StreamingService_ReceivePacketsServer interface {
	Send(*ReceivePacketsResponse) error
	Recv() (*ReceivePacketsRequest, error)
	grpc.ServerStream
}

type streamingServiceReceivePacketsServer struct {
	grpc.ServerStream
}

func (x *streamingServiceReceivePacketsServer) Send(m *ReceivePacketsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamingServiceReceivePacketsServer) Recv() (*ReceivePacketsRequest, error) {
	m := new(ReceivePacketsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StreamingService_ReceiveEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamingServiceServer).ReceiveEvents(&streamingServiceReceiveEventsServer{stream})
}

type StreamingService_ReceiveEventsServer interface {
	Send(*ReceiveEventsResponse) error
	Recv() (*ReceiveEventsRequest, error)
	grpc.ServerStream
}

type streamingServiceReceiveEventsServer struct {
	grpc.ServerStream
}

func (x *streamingServiceReceiveEventsServer) Send(m *ReceiveEventsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamingServiceReceiveEventsServer) Recv() (*ReceiveEventsRequest, error) {
	m := new(ReceiveEventsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StreamingService_AcquireLease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcquireLeaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamingServiceServer).AcquireLease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamingService_AcquireLease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamingServiceServer).AcquireLease(ctx, req.(*AcquireLeaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamingService_RenewLease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenewLeaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamingServiceServer).RenewLease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamingService_RenewLease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamingServiceServer).RenewLease(ctx, req.(*RenewLeaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamingService_ReleaseLease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseLeaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamingServiceServer).ReleaseLease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamingService_ReleaseLease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamingServiceServer).ReleaseLease(ctx, req.(*ReleaseLeaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StreamingService_ServiceDesc is the grpc.ServiceDesc for StreamingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.visionai.v1.StreamingService",
	HandlerType: (*StreamingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AcquireLease",
			Handler:    _StreamingService_AcquireLease_Handler,
		},
		{
			MethodName: "RenewLease",
			Handler:    _StreamingService_RenewLease_Handler,
		},
		{
			MethodName: "ReleaseLease",
			Handler:    _StreamingService_ReleaseLease_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendPackets",
			Handler:       _StreamingService_SendPackets_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ReceivePackets",
			Handler:       _StreamingService_ReceivePackets_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ReceiveEvents",
			Handler:       _StreamingService_ReceiveEvents_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "google/cloud/visionai/v1/streaming_service.proto",
}
