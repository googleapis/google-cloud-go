// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/telcoautomation/v1/telcoautomation.proto

package telcoautomationpb

import (
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TelcoAutomation_ListOrchestrationClusters_FullMethodName  = "/google.cloud.telcoautomation.v1.TelcoAutomation/ListOrchestrationClusters"
	TelcoAutomation_GetOrchestrationCluster_FullMethodName    = "/google.cloud.telcoautomation.v1.TelcoAutomation/GetOrchestrationCluster"
	TelcoAutomation_CreateOrchestrationCluster_FullMethodName = "/google.cloud.telcoautomation.v1.TelcoAutomation/CreateOrchestrationCluster"
	TelcoAutomation_DeleteOrchestrationCluster_FullMethodName = "/google.cloud.telcoautomation.v1.TelcoAutomation/DeleteOrchestrationCluster"
	TelcoAutomation_ListEdgeSlms_FullMethodName               = "/google.cloud.telcoautomation.v1.TelcoAutomation/ListEdgeSlms"
	TelcoAutomation_GetEdgeSlm_FullMethodName                 = "/google.cloud.telcoautomation.v1.TelcoAutomation/GetEdgeSlm"
	TelcoAutomation_CreateEdgeSlm_FullMethodName              = "/google.cloud.telcoautomation.v1.TelcoAutomation/CreateEdgeSlm"
	TelcoAutomation_DeleteEdgeSlm_FullMethodName              = "/google.cloud.telcoautomation.v1.TelcoAutomation/DeleteEdgeSlm"
	TelcoAutomation_CreateBlueprint_FullMethodName            = "/google.cloud.telcoautomation.v1.TelcoAutomation/CreateBlueprint"
	TelcoAutomation_UpdateBlueprint_FullMethodName            = "/google.cloud.telcoautomation.v1.TelcoAutomation/UpdateBlueprint"
	TelcoAutomation_GetBlueprint_FullMethodName               = "/google.cloud.telcoautomation.v1.TelcoAutomation/GetBlueprint"
	TelcoAutomation_DeleteBlueprint_FullMethodName            = "/google.cloud.telcoautomation.v1.TelcoAutomation/DeleteBlueprint"
	TelcoAutomation_ListBlueprints_FullMethodName             = "/google.cloud.telcoautomation.v1.TelcoAutomation/ListBlueprints"
	TelcoAutomation_ApproveBlueprint_FullMethodName           = "/google.cloud.telcoautomation.v1.TelcoAutomation/ApproveBlueprint"
	TelcoAutomation_ProposeBlueprint_FullMethodName           = "/google.cloud.telcoautomation.v1.TelcoAutomation/ProposeBlueprint"
	TelcoAutomation_RejectBlueprint_FullMethodName            = "/google.cloud.telcoautomation.v1.TelcoAutomation/RejectBlueprint"
	TelcoAutomation_ListBlueprintRevisions_FullMethodName     = "/google.cloud.telcoautomation.v1.TelcoAutomation/ListBlueprintRevisions"
	TelcoAutomation_SearchBlueprintRevisions_FullMethodName   = "/google.cloud.telcoautomation.v1.TelcoAutomation/SearchBlueprintRevisions"
	TelcoAutomation_SearchDeploymentRevisions_FullMethodName  = "/google.cloud.telcoautomation.v1.TelcoAutomation/SearchDeploymentRevisions"
	TelcoAutomation_DiscardBlueprintChanges_FullMethodName    = "/google.cloud.telcoautomation.v1.TelcoAutomation/DiscardBlueprintChanges"
	TelcoAutomation_ListPublicBlueprints_FullMethodName       = "/google.cloud.telcoautomation.v1.TelcoAutomation/ListPublicBlueprints"
	TelcoAutomation_GetPublicBlueprint_FullMethodName         = "/google.cloud.telcoautomation.v1.TelcoAutomation/GetPublicBlueprint"
	TelcoAutomation_CreateDeployment_FullMethodName           = "/google.cloud.telcoautomation.v1.TelcoAutomation/CreateDeployment"
	TelcoAutomation_UpdateDeployment_FullMethodName           = "/google.cloud.telcoautomation.v1.TelcoAutomation/UpdateDeployment"
	TelcoAutomation_GetDeployment_FullMethodName              = "/google.cloud.telcoautomation.v1.TelcoAutomation/GetDeployment"
	TelcoAutomation_RemoveDeployment_FullMethodName           = "/google.cloud.telcoautomation.v1.TelcoAutomation/RemoveDeployment"
	TelcoAutomation_ListDeployments_FullMethodName            = "/google.cloud.telcoautomation.v1.TelcoAutomation/ListDeployments"
	TelcoAutomation_ListDeploymentRevisions_FullMethodName    = "/google.cloud.telcoautomation.v1.TelcoAutomation/ListDeploymentRevisions"
	TelcoAutomation_DiscardDeploymentChanges_FullMethodName   = "/google.cloud.telcoautomation.v1.TelcoAutomation/DiscardDeploymentChanges"
	TelcoAutomation_ApplyDeployment_FullMethodName            = "/google.cloud.telcoautomation.v1.TelcoAutomation/ApplyDeployment"
	TelcoAutomation_ComputeDeploymentStatus_FullMethodName    = "/google.cloud.telcoautomation.v1.TelcoAutomation/ComputeDeploymentStatus"
	TelcoAutomation_RollbackDeployment_FullMethodName         = "/google.cloud.telcoautomation.v1.TelcoAutomation/RollbackDeployment"
	TelcoAutomation_GetHydratedDeployment_FullMethodName      = "/google.cloud.telcoautomation.v1.TelcoAutomation/GetHydratedDeployment"
	TelcoAutomation_ListHydratedDeployments_FullMethodName    = "/google.cloud.telcoautomation.v1.TelcoAutomation/ListHydratedDeployments"
	TelcoAutomation_UpdateHydratedDeployment_FullMethodName   = "/google.cloud.telcoautomation.v1.TelcoAutomation/UpdateHydratedDeployment"
	TelcoAutomation_ApplyHydratedDeployment_FullMethodName    = "/google.cloud.telcoautomation.v1.TelcoAutomation/ApplyHydratedDeployment"
)

// TelcoAutomationClient is the client API for TelcoAutomation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TelcoAutomationClient interface {
	// Lists OrchestrationClusters in a given project and location.
	ListOrchestrationClusters(ctx context.Context, in *ListOrchestrationClustersRequest, opts ...grpc.CallOption) (*ListOrchestrationClustersResponse, error)
	// Gets details of a single OrchestrationCluster.
	GetOrchestrationCluster(ctx context.Context, in *GetOrchestrationClusterRequest, opts ...grpc.CallOption) (*OrchestrationCluster, error)
	// Creates a new OrchestrationCluster in a given project and location.
	CreateOrchestrationCluster(ctx context.Context, in *CreateOrchestrationClusterRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single OrchestrationCluster.
	DeleteOrchestrationCluster(ctx context.Context, in *DeleteOrchestrationClusterRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists EdgeSlms in a given project and location.
	ListEdgeSlms(ctx context.Context, in *ListEdgeSlmsRequest, opts ...grpc.CallOption) (*ListEdgeSlmsResponse, error)
	// Gets details of a single EdgeSlm.
	GetEdgeSlm(ctx context.Context, in *GetEdgeSlmRequest, opts ...grpc.CallOption) (*EdgeSlm, error)
	// Creates a new EdgeSlm in a given project and location.
	CreateEdgeSlm(ctx context.Context, in *CreateEdgeSlmRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single EdgeSlm.
	DeleteEdgeSlm(ctx context.Context, in *DeleteEdgeSlmRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Creates a blueprint.
	CreateBlueprint(ctx context.Context, in *CreateBlueprintRequest, opts ...grpc.CallOption) (*Blueprint, error)
	// Updates a blueprint.
	UpdateBlueprint(ctx context.Context, in *UpdateBlueprintRequest, opts ...grpc.CallOption) (*Blueprint, error)
	// Returns the requested blueprint.
	GetBlueprint(ctx context.Context, in *GetBlueprintRequest, opts ...grpc.CallOption) (*Blueprint, error)
	// Deletes a blueprint and all its revisions.
	DeleteBlueprint(ctx context.Context, in *DeleteBlueprintRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// List all blueprints.
	ListBlueprints(ctx context.Context, in *ListBlueprintsRequest, opts ...grpc.CallOption) (*ListBlueprintsResponse, error)
	// Approves a blueprint and commits a new revision.
	ApproveBlueprint(ctx context.Context, in *ApproveBlueprintRequest, opts ...grpc.CallOption) (*Blueprint, error)
	// Proposes a blueprint for approval of changes.
	ProposeBlueprint(ctx context.Context, in *ProposeBlueprintRequest, opts ...grpc.CallOption) (*Blueprint, error)
	// Rejects a blueprint revision proposal and flips it back to Draft state.
	RejectBlueprint(ctx context.Context, in *RejectBlueprintRequest, opts ...grpc.CallOption) (*Blueprint, error)
	// List blueprint revisions of a given blueprint.
	ListBlueprintRevisions(ctx context.Context, in *ListBlueprintRevisionsRequest, opts ...grpc.CallOption) (*ListBlueprintRevisionsResponse, error)
	// Searches across blueprint revisions.
	SearchBlueprintRevisions(ctx context.Context, in *SearchBlueprintRevisionsRequest, opts ...grpc.CallOption) (*SearchBlueprintRevisionsResponse, error)
	// Searches across deployment revisions.
	SearchDeploymentRevisions(ctx context.Context, in *SearchDeploymentRevisionsRequest, opts ...grpc.CallOption) (*SearchDeploymentRevisionsResponse, error)
	// Discards the changes in a blueprint and reverts the blueprint to the last
	// approved blueprint revision. No changes take place if a blueprint does not
	// have revisions.
	DiscardBlueprintChanges(ctx context.Context, in *DiscardBlueprintChangesRequest, opts ...grpc.CallOption) (*DiscardBlueprintChangesResponse, error)
	// Lists the blueprints in TNA's public catalog. Default page size = 20,
	// Max Page Size = 100.
	ListPublicBlueprints(ctx context.Context, in *ListPublicBlueprintsRequest, opts ...grpc.CallOption) (*ListPublicBlueprintsResponse, error)
	// Returns the requested public blueprint.
	GetPublicBlueprint(ctx context.Context, in *GetPublicBlueprintRequest, opts ...grpc.CallOption) (*PublicBlueprint, error)
	// Creates a deployment.
	CreateDeployment(ctx context.Context, in *CreateDeploymentRequest, opts ...grpc.CallOption) (*Deployment, error)
	// Updates a deployment.
	UpdateDeployment(ctx context.Context, in *UpdateDeploymentRequest, opts ...grpc.CallOption) (*Deployment, error)
	// Returns the requested deployment.
	GetDeployment(ctx context.Context, in *GetDeploymentRequest, opts ...grpc.CallOption) (*Deployment, error)
	// Removes the deployment by marking it as DELETING. Post which deployment and
	// it's revisions gets deleted.
	RemoveDeployment(ctx context.Context, in *RemoveDeploymentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// List all deployments.
	ListDeployments(ctx context.Context, in *ListDeploymentsRequest, opts ...grpc.CallOption) (*ListDeploymentsResponse, error)
	// List deployment revisions of a given deployment.
	ListDeploymentRevisions(ctx context.Context, in *ListDeploymentRevisionsRequest, opts ...grpc.CallOption) (*ListDeploymentRevisionsResponse, error)
	// Discards the changes in a deployment and reverts the deployment to the last
	// approved deployment revision. No changes take place if a deployment does
	// not have revisions.
	DiscardDeploymentChanges(ctx context.Context, in *DiscardDeploymentChangesRequest, opts ...grpc.CallOption) (*DiscardDeploymentChangesResponse, error)
	// Applies the deployment's YAML files to the parent orchestration cluster.
	ApplyDeployment(ctx context.Context, in *ApplyDeploymentRequest, opts ...grpc.CallOption) (*Deployment, error)
	// Returns the requested deployment status.
	ComputeDeploymentStatus(ctx context.Context, in *ComputeDeploymentStatusRequest, opts ...grpc.CallOption) (*ComputeDeploymentStatusResponse, error)
	// Rollback the active deployment to the given past approved deployment
	// revision.
	RollbackDeployment(ctx context.Context, in *RollbackDeploymentRequest, opts ...grpc.CallOption) (*Deployment, error)
	// Returns the requested hydrated deployment.
	GetHydratedDeployment(ctx context.Context, in *GetHydratedDeploymentRequest, opts ...grpc.CallOption) (*HydratedDeployment, error)
	// List all hydrated deployments present under a deployment.
	ListHydratedDeployments(ctx context.Context, in *ListHydratedDeploymentsRequest, opts ...grpc.CallOption) (*ListHydratedDeploymentsResponse, error)
	// Updates a hydrated deployment.
	UpdateHydratedDeployment(ctx context.Context, in *UpdateHydratedDeploymentRequest, opts ...grpc.CallOption) (*HydratedDeployment, error)
	// Applies a hydrated deployment to a workload cluster.
	ApplyHydratedDeployment(ctx context.Context, in *ApplyHydratedDeploymentRequest, opts ...grpc.CallOption) (*HydratedDeployment, error)
}

type telcoAutomationClient struct {
	cc grpc.ClientConnInterface
}

func NewTelcoAutomationClient(cc grpc.ClientConnInterface) TelcoAutomationClient {
	return &telcoAutomationClient{cc}
}

func (c *telcoAutomationClient) ListOrchestrationClusters(ctx context.Context, in *ListOrchestrationClustersRequest, opts ...grpc.CallOption) (*ListOrchestrationClustersResponse, error) {
	out := new(ListOrchestrationClustersResponse)
	err := c.cc.Invoke(ctx, TelcoAutomation_ListOrchestrationClusters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telcoAutomationClient) GetOrchestrationCluster(ctx context.Context, in *GetOrchestrationClusterRequest, opts ...grpc.CallOption) (*OrchestrationCluster, error) {
	out := new(OrchestrationCluster)
	err := c.cc.Invoke(ctx, TelcoAutomation_GetOrchestrationCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telcoAutomationClient) CreateOrchestrationCluster(ctx context.Context, in *CreateOrchestrationClusterRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, TelcoAutomation_CreateOrchestrationCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telcoAutomationClient) DeleteOrchestrationCluster(ctx context.Context, in *DeleteOrchestrationClusterRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, TelcoAutomation_DeleteOrchestrationCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telcoAutomationClient) ListEdgeSlms(ctx context.Context, in *ListEdgeSlmsRequest, opts ...grpc.CallOption) (*ListEdgeSlmsResponse, error) {
	out := new(ListEdgeSlmsResponse)
	err := c.cc.Invoke(ctx, TelcoAutomation_ListEdgeSlms_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telcoAutomationClient) GetEdgeSlm(ctx context.Context, in *GetEdgeSlmRequest, opts ...grpc.CallOption) (*EdgeSlm, error) {
	out := new(EdgeSlm)
	err := c.cc.Invoke(ctx, TelcoAutomation_GetEdgeSlm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telcoAutomationClient) CreateEdgeSlm(ctx context.Context, in *CreateEdgeSlmRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, TelcoAutomation_CreateEdgeSlm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telcoAutomationClient) DeleteEdgeSlm(ctx context.Context, in *DeleteEdgeSlmRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, TelcoAutomation_DeleteEdgeSlm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telcoAutomationClient) CreateBlueprint(ctx context.Context, in *CreateBlueprintRequest, opts ...grpc.CallOption) (*Blueprint, error) {
	out := new(Blueprint)
	err := c.cc.Invoke(ctx, TelcoAutomation_CreateBlueprint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telcoAutomationClient) UpdateBlueprint(ctx context.Context, in *UpdateBlueprintRequest, opts ...grpc.CallOption) (*Blueprint, error) {
	out := new(Blueprint)
	err := c.cc.Invoke(ctx, TelcoAutomation_UpdateBlueprint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telcoAutomationClient) GetBlueprint(ctx context.Context, in *GetBlueprintRequest, opts ...grpc.CallOption) (*Blueprint, error) {
	out := new(Blueprint)
	err := c.cc.Invoke(ctx, TelcoAutomation_GetBlueprint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telcoAutomationClient) DeleteBlueprint(ctx context.Context, in *DeleteBlueprintRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TelcoAutomation_DeleteBlueprint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telcoAutomationClient) ListBlueprints(ctx context.Context, in *ListBlueprintsRequest, opts ...grpc.CallOption) (*ListBlueprintsResponse, error) {
	out := new(ListBlueprintsResponse)
	err := c.cc.Invoke(ctx, TelcoAutomation_ListBlueprints_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telcoAutomationClient) ApproveBlueprint(ctx context.Context, in *ApproveBlueprintRequest, opts ...grpc.CallOption) (*Blueprint, error) {
	out := new(Blueprint)
	err := c.cc.Invoke(ctx, TelcoAutomation_ApproveBlueprint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telcoAutomationClient) ProposeBlueprint(ctx context.Context, in *ProposeBlueprintRequest, opts ...grpc.CallOption) (*Blueprint, error) {
	out := new(Blueprint)
	err := c.cc.Invoke(ctx, TelcoAutomation_ProposeBlueprint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telcoAutomationClient) RejectBlueprint(ctx context.Context, in *RejectBlueprintRequest, opts ...grpc.CallOption) (*Blueprint, error) {
	out := new(Blueprint)
	err := c.cc.Invoke(ctx, TelcoAutomation_RejectBlueprint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telcoAutomationClient) ListBlueprintRevisions(ctx context.Context, in *ListBlueprintRevisionsRequest, opts ...grpc.CallOption) (*ListBlueprintRevisionsResponse, error) {
	out := new(ListBlueprintRevisionsResponse)
	err := c.cc.Invoke(ctx, TelcoAutomation_ListBlueprintRevisions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telcoAutomationClient) SearchBlueprintRevisions(ctx context.Context, in *SearchBlueprintRevisionsRequest, opts ...grpc.CallOption) (*SearchBlueprintRevisionsResponse, error) {
	out := new(SearchBlueprintRevisionsResponse)
	err := c.cc.Invoke(ctx, TelcoAutomation_SearchBlueprintRevisions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telcoAutomationClient) SearchDeploymentRevisions(ctx context.Context, in *SearchDeploymentRevisionsRequest, opts ...grpc.CallOption) (*SearchDeploymentRevisionsResponse, error) {
	out := new(SearchDeploymentRevisionsResponse)
	err := c.cc.Invoke(ctx, TelcoAutomation_SearchDeploymentRevisions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telcoAutomationClient) DiscardBlueprintChanges(ctx context.Context, in *DiscardBlueprintChangesRequest, opts ...grpc.CallOption) (*DiscardBlueprintChangesResponse, error) {
	out := new(DiscardBlueprintChangesResponse)
	err := c.cc.Invoke(ctx, TelcoAutomation_DiscardBlueprintChanges_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telcoAutomationClient) ListPublicBlueprints(ctx context.Context, in *ListPublicBlueprintsRequest, opts ...grpc.CallOption) (*ListPublicBlueprintsResponse, error) {
	out := new(ListPublicBlueprintsResponse)
	err := c.cc.Invoke(ctx, TelcoAutomation_ListPublicBlueprints_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telcoAutomationClient) GetPublicBlueprint(ctx context.Context, in *GetPublicBlueprintRequest, opts ...grpc.CallOption) (*PublicBlueprint, error) {
	out := new(PublicBlueprint)
	err := c.cc.Invoke(ctx, TelcoAutomation_GetPublicBlueprint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telcoAutomationClient) CreateDeployment(ctx context.Context, in *CreateDeploymentRequest, opts ...grpc.CallOption) (*Deployment, error) {
	out := new(Deployment)
	err := c.cc.Invoke(ctx, TelcoAutomation_CreateDeployment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telcoAutomationClient) UpdateDeployment(ctx context.Context, in *UpdateDeploymentRequest, opts ...grpc.CallOption) (*Deployment, error) {
	out := new(Deployment)
	err := c.cc.Invoke(ctx, TelcoAutomation_UpdateDeployment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telcoAutomationClient) GetDeployment(ctx context.Context, in *GetDeploymentRequest, opts ...grpc.CallOption) (*Deployment, error) {
	out := new(Deployment)
	err := c.cc.Invoke(ctx, TelcoAutomation_GetDeployment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telcoAutomationClient) RemoveDeployment(ctx context.Context, in *RemoveDeploymentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TelcoAutomation_RemoveDeployment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telcoAutomationClient) ListDeployments(ctx context.Context, in *ListDeploymentsRequest, opts ...grpc.CallOption) (*ListDeploymentsResponse, error) {
	out := new(ListDeploymentsResponse)
	err := c.cc.Invoke(ctx, TelcoAutomation_ListDeployments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telcoAutomationClient) ListDeploymentRevisions(ctx context.Context, in *ListDeploymentRevisionsRequest, opts ...grpc.CallOption) (*ListDeploymentRevisionsResponse, error) {
	out := new(ListDeploymentRevisionsResponse)
	err := c.cc.Invoke(ctx, TelcoAutomation_ListDeploymentRevisions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telcoAutomationClient) DiscardDeploymentChanges(ctx context.Context, in *DiscardDeploymentChangesRequest, opts ...grpc.CallOption) (*DiscardDeploymentChangesResponse, error) {
	out := new(DiscardDeploymentChangesResponse)
	err := c.cc.Invoke(ctx, TelcoAutomation_DiscardDeploymentChanges_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telcoAutomationClient) ApplyDeployment(ctx context.Context, in *ApplyDeploymentRequest, opts ...grpc.CallOption) (*Deployment, error) {
	out := new(Deployment)
	err := c.cc.Invoke(ctx, TelcoAutomation_ApplyDeployment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telcoAutomationClient) ComputeDeploymentStatus(ctx context.Context, in *ComputeDeploymentStatusRequest, opts ...grpc.CallOption) (*ComputeDeploymentStatusResponse, error) {
	out := new(ComputeDeploymentStatusResponse)
	err := c.cc.Invoke(ctx, TelcoAutomation_ComputeDeploymentStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telcoAutomationClient) RollbackDeployment(ctx context.Context, in *RollbackDeploymentRequest, opts ...grpc.CallOption) (*Deployment, error) {
	out := new(Deployment)
	err := c.cc.Invoke(ctx, TelcoAutomation_RollbackDeployment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telcoAutomationClient) GetHydratedDeployment(ctx context.Context, in *GetHydratedDeploymentRequest, opts ...grpc.CallOption) (*HydratedDeployment, error) {
	out := new(HydratedDeployment)
	err := c.cc.Invoke(ctx, TelcoAutomation_GetHydratedDeployment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telcoAutomationClient) ListHydratedDeployments(ctx context.Context, in *ListHydratedDeploymentsRequest, opts ...grpc.CallOption) (*ListHydratedDeploymentsResponse, error) {
	out := new(ListHydratedDeploymentsResponse)
	err := c.cc.Invoke(ctx, TelcoAutomation_ListHydratedDeployments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telcoAutomationClient) UpdateHydratedDeployment(ctx context.Context, in *UpdateHydratedDeploymentRequest, opts ...grpc.CallOption) (*HydratedDeployment, error) {
	out := new(HydratedDeployment)
	err := c.cc.Invoke(ctx, TelcoAutomation_UpdateHydratedDeployment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telcoAutomationClient) ApplyHydratedDeployment(ctx context.Context, in *ApplyHydratedDeploymentRequest, opts ...grpc.CallOption) (*HydratedDeployment, error) {
	out := new(HydratedDeployment)
	err := c.cc.Invoke(ctx, TelcoAutomation_ApplyHydratedDeployment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TelcoAutomationServer is the server API for TelcoAutomation service.
// All implementations should embed UnimplementedTelcoAutomationServer
// for forward compatibility
type TelcoAutomationServer interface {
	// Lists OrchestrationClusters in a given project and location.
	ListOrchestrationClusters(context.Context, *ListOrchestrationClustersRequest) (*ListOrchestrationClustersResponse, error)
	// Gets details of a single OrchestrationCluster.
	GetOrchestrationCluster(context.Context, *GetOrchestrationClusterRequest) (*OrchestrationCluster, error)
	// Creates a new OrchestrationCluster in a given project and location.
	CreateOrchestrationCluster(context.Context, *CreateOrchestrationClusterRequest) (*longrunningpb.Operation, error)
	// Deletes a single OrchestrationCluster.
	DeleteOrchestrationCluster(context.Context, *DeleteOrchestrationClusterRequest) (*longrunningpb.Operation, error)
	// Lists EdgeSlms in a given project and location.
	ListEdgeSlms(context.Context, *ListEdgeSlmsRequest) (*ListEdgeSlmsResponse, error)
	// Gets details of a single EdgeSlm.
	GetEdgeSlm(context.Context, *GetEdgeSlmRequest) (*EdgeSlm, error)
	// Creates a new EdgeSlm in a given project and location.
	CreateEdgeSlm(context.Context, *CreateEdgeSlmRequest) (*longrunningpb.Operation, error)
	// Deletes a single EdgeSlm.
	DeleteEdgeSlm(context.Context, *DeleteEdgeSlmRequest) (*longrunningpb.Operation, error)
	// Creates a blueprint.
	CreateBlueprint(context.Context, *CreateBlueprintRequest) (*Blueprint, error)
	// Updates a blueprint.
	UpdateBlueprint(context.Context, *UpdateBlueprintRequest) (*Blueprint, error)
	// Returns the requested blueprint.
	GetBlueprint(context.Context, *GetBlueprintRequest) (*Blueprint, error)
	// Deletes a blueprint and all its revisions.
	DeleteBlueprint(context.Context, *DeleteBlueprintRequest) (*emptypb.Empty, error)
	// List all blueprints.
	ListBlueprints(context.Context, *ListBlueprintsRequest) (*ListBlueprintsResponse, error)
	// Approves a blueprint and commits a new revision.
	ApproveBlueprint(context.Context, *ApproveBlueprintRequest) (*Blueprint, error)
	// Proposes a blueprint for approval of changes.
	ProposeBlueprint(context.Context, *ProposeBlueprintRequest) (*Blueprint, error)
	// Rejects a blueprint revision proposal and flips it back to Draft state.
	RejectBlueprint(context.Context, *RejectBlueprintRequest) (*Blueprint, error)
	// List blueprint revisions of a given blueprint.
	ListBlueprintRevisions(context.Context, *ListBlueprintRevisionsRequest) (*ListBlueprintRevisionsResponse, error)
	// Searches across blueprint revisions.
	SearchBlueprintRevisions(context.Context, *SearchBlueprintRevisionsRequest) (*SearchBlueprintRevisionsResponse, error)
	// Searches across deployment revisions.
	SearchDeploymentRevisions(context.Context, *SearchDeploymentRevisionsRequest) (*SearchDeploymentRevisionsResponse, error)
	// Discards the changes in a blueprint and reverts the blueprint to the last
	// approved blueprint revision. No changes take place if a blueprint does not
	// have revisions.
	DiscardBlueprintChanges(context.Context, *DiscardBlueprintChangesRequest) (*DiscardBlueprintChangesResponse, error)
	// Lists the blueprints in TNA's public catalog. Default page size = 20,
	// Max Page Size = 100.
	ListPublicBlueprints(context.Context, *ListPublicBlueprintsRequest) (*ListPublicBlueprintsResponse, error)
	// Returns the requested public blueprint.
	GetPublicBlueprint(context.Context, *GetPublicBlueprintRequest) (*PublicBlueprint, error)
	// Creates a deployment.
	CreateDeployment(context.Context, *CreateDeploymentRequest) (*Deployment, error)
	// Updates a deployment.
	UpdateDeployment(context.Context, *UpdateDeploymentRequest) (*Deployment, error)
	// Returns the requested deployment.
	GetDeployment(context.Context, *GetDeploymentRequest) (*Deployment, error)
	// Removes the deployment by marking it as DELETING. Post which deployment and
	// it's revisions gets deleted.
	RemoveDeployment(context.Context, *RemoveDeploymentRequest) (*emptypb.Empty, error)
	// List all deployments.
	ListDeployments(context.Context, *ListDeploymentsRequest) (*ListDeploymentsResponse, error)
	// List deployment revisions of a given deployment.
	ListDeploymentRevisions(context.Context, *ListDeploymentRevisionsRequest) (*ListDeploymentRevisionsResponse, error)
	// Discards the changes in a deployment and reverts the deployment to the last
	// approved deployment revision. No changes take place if a deployment does
	// not have revisions.
	DiscardDeploymentChanges(context.Context, *DiscardDeploymentChangesRequest) (*DiscardDeploymentChangesResponse, error)
	// Applies the deployment's YAML files to the parent orchestration cluster.
	ApplyDeployment(context.Context, *ApplyDeploymentRequest) (*Deployment, error)
	// Returns the requested deployment status.
	ComputeDeploymentStatus(context.Context, *ComputeDeploymentStatusRequest) (*ComputeDeploymentStatusResponse, error)
	// Rollback the active deployment to the given past approved deployment
	// revision.
	RollbackDeployment(context.Context, *RollbackDeploymentRequest) (*Deployment, error)
	// Returns the requested hydrated deployment.
	GetHydratedDeployment(context.Context, *GetHydratedDeploymentRequest) (*HydratedDeployment, error)
	// List all hydrated deployments present under a deployment.
	ListHydratedDeployments(context.Context, *ListHydratedDeploymentsRequest) (*ListHydratedDeploymentsResponse, error)
	// Updates a hydrated deployment.
	UpdateHydratedDeployment(context.Context, *UpdateHydratedDeploymentRequest) (*HydratedDeployment, error)
	// Applies a hydrated deployment to a workload cluster.
	ApplyHydratedDeployment(context.Context, *ApplyHydratedDeploymentRequest) (*HydratedDeployment, error)
}

// UnimplementedTelcoAutomationServer should be embedded to have forward compatible implementations.
type UnimplementedTelcoAutomationServer struct {
}

func (UnimplementedTelcoAutomationServer) ListOrchestrationClusters(context.Context, *ListOrchestrationClustersRequest) (*ListOrchestrationClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrchestrationClusters not implemented")
}
func (UnimplementedTelcoAutomationServer) GetOrchestrationCluster(context.Context, *GetOrchestrationClusterRequest) (*OrchestrationCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrchestrationCluster not implemented")
}
func (UnimplementedTelcoAutomationServer) CreateOrchestrationCluster(context.Context, *CreateOrchestrationClusterRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrchestrationCluster not implemented")
}
func (UnimplementedTelcoAutomationServer) DeleteOrchestrationCluster(context.Context, *DeleteOrchestrationClusterRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrchestrationCluster not implemented")
}
func (UnimplementedTelcoAutomationServer) ListEdgeSlms(context.Context, *ListEdgeSlmsRequest) (*ListEdgeSlmsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEdgeSlms not implemented")
}
func (UnimplementedTelcoAutomationServer) GetEdgeSlm(context.Context, *GetEdgeSlmRequest) (*EdgeSlm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEdgeSlm not implemented")
}
func (UnimplementedTelcoAutomationServer) CreateEdgeSlm(context.Context, *CreateEdgeSlmRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEdgeSlm not implemented")
}
func (UnimplementedTelcoAutomationServer) DeleteEdgeSlm(context.Context, *DeleteEdgeSlmRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEdgeSlm not implemented")
}
func (UnimplementedTelcoAutomationServer) CreateBlueprint(context.Context, *CreateBlueprintRequest) (*Blueprint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBlueprint not implemented")
}
func (UnimplementedTelcoAutomationServer) UpdateBlueprint(context.Context, *UpdateBlueprintRequest) (*Blueprint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBlueprint not implemented")
}
func (UnimplementedTelcoAutomationServer) GetBlueprint(context.Context, *GetBlueprintRequest) (*Blueprint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlueprint not implemented")
}
func (UnimplementedTelcoAutomationServer) DeleteBlueprint(context.Context, *DeleteBlueprintRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBlueprint not implemented")
}
func (UnimplementedTelcoAutomationServer) ListBlueprints(context.Context, *ListBlueprintsRequest) (*ListBlueprintsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBlueprints not implemented")
}
func (UnimplementedTelcoAutomationServer) ApproveBlueprint(context.Context, *ApproveBlueprintRequest) (*Blueprint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveBlueprint not implemented")
}
func (UnimplementedTelcoAutomationServer) ProposeBlueprint(context.Context, *ProposeBlueprintRequest) (*Blueprint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposeBlueprint not implemented")
}
func (UnimplementedTelcoAutomationServer) RejectBlueprint(context.Context, *RejectBlueprintRequest) (*Blueprint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectBlueprint not implemented")
}
func (UnimplementedTelcoAutomationServer) ListBlueprintRevisions(context.Context, *ListBlueprintRevisionsRequest) (*ListBlueprintRevisionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBlueprintRevisions not implemented")
}
func (UnimplementedTelcoAutomationServer) SearchBlueprintRevisions(context.Context, *SearchBlueprintRevisionsRequest) (*SearchBlueprintRevisionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchBlueprintRevisions not implemented")
}
func (UnimplementedTelcoAutomationServer) SearchDeploymentRevisions(context.Context, *SearchDeploymentRevisionsRequest) (*SearchDeploymentRevisionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchDeploymentRevisions not implemented")
}
func (UnimplementedTelcoAutomationServer) DiscardBlueprintChanges(context.Context, *DiscardBlueprintChangesRequest) (*DiscardBlueprintChangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscardBlueprintChanges not implemented")
}
func (UnimplementedTelcoAutomationServer) ListPublicBlueprints(context.Context, *ListPublicBlueprintsRequest) (*ListPublicBlueprintsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPublicBlueprints not implemented")
}
func (UnimplementedTelcoAutomationServer) GetPublicBlueprint(context.Context, *GetPublicBlueprintRequest) (*PublicBlueprint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicBlueprint not implemented")
}
func (UnimplementedTelcoAutomationServer) CreateDeployment(context.Context, *CreateDeploymentRequest) (*Deployment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeployment not implemented")
}
func (UnimplementedTelcoAutomationServer) UpdateDeployment(context.Context, *UpdateDeploymentRequest) (*Deployment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeployment not implemented")
}
func (UnimplementedTelcoAutomationServer) GetDeployment(context.Context, *GetDeploymentRequest) (*Deployment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeployment not implemented")
}
func (UnimplementedTelcoAutomationServer) RemoveDeployment(context.Context, *RemoveDeploymentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDeployment not implemented")
}
func (UnimplementedTelcoAutomationServer) ListDeployments(context.Context, *ListDeploymentsRequest) (*ListDeploymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeployments not implemented")
}
func (UnimplementedTelcoAutomationServer) ListDeploymentRevisions(context.Context, *ListDeploymentRevisionsRequest) (*ListDeploymentRevisionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeploymentRevisions not implemented")
}
func (UnimplementedTelcoAutomationServer) DiscardDeploymentChanges(context.Context, *DiscardDeploymentChangesRequest) (*DiscardDeploymentChangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscardDeploymentChanges not implemented")
}
func (UnimplementedTelcoAutomationServer) ApplyDeployment(context.Context, *ApplyDeploymentRequest) (*Deployment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyDeployment not implemented")
}
func (UnimplementedTelcoAutomationServer) ComputeDeploymentStatus(context.Context, *ComputeDeploymentStatusRequest) (*ComputeDeploymentStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComputeDeploymentStatus not implemented")
}
func (UnimplementedTelcoAutomationServer) RollbackDeployment(context.Context, *RollbackDeploymentRequest) (*Deployment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackDeployment not implemented")
}
func (UnimplementedTelcoAutomationServer) GetHydratedDeployment(context.Context, *GetHydratedDeploymentRequest) (*HydratedDeployment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHydratedDeployment not implemented")
}
func (UnimplementedTelcoAutomationServer) ListHydratedDeployments(context.Context, *ListHydratedDeploymentsRequest) (*ListHydratedDeploymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHydratedDeployments not implemented")
}
func (UnimplementedTelcoAutomationServer) UpdateHydratedDeployment(context.Context, *UpdateHydratedDeploymentRequest) (*HydratedDeployment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHydratedDeployment not implemented")
}
func (UnimplementedTelcoAutomationServer) ApplyHydratedDeployment(context.Context, *ApplyHydratedDeploymentRequest) (*HydratedDeployment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyHydratedDeployment not implemented")
}

// UnsafeTelcoAutomationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TelcoAutomationServer will
// result in compilation errors.
type UnsafeTelcoAutomationServer interface {
	mustEmbedUnimplementedTelcoAutomationServer()
}

func RegisterTelcoAutomationServer(s grpc.ServiceRegistrar, srv TelcoAutomationServer) {
	s.RegisterService(&TelcoAutomation_ServiceDesc, srv)
}

func _TelcoAutomation_ListOrchestrationClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrchestrationClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelcoAutomationServer).ListOrchestrationClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelcoAutomation_ListOrchestrationClusters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelcoAutomationServer).ListOrchestrationClusters(ctx, req.(*ListOrchestrationClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelcoAutomation_GetOrchestrationCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrchestrationClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelcoAutomationServer).GetOrchestrationCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelcoAutomation_GetOrchestrationCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelcoAutomationServer).GetOrchestrationCluster(ctx, req.(*GetOrchestrationClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelcoAutomation_CreateOrchestrationCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrchestrationClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelcoAutomationServer).CreateOrchestrationCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelcoAutomation_CreateOrchestrationCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelcoAutomationServer).CreateOrchestrationCluster(ctx, req.(*CreateOrchestrationClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelcoAutomation_DeleteOrchestrationCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrchestrationClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelcoAutomationServer).DeleteOrchestrationCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelcoAutomation_DeleteOrchestrationCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelcoAutomationServer).DeleteOrchestrationCluster(ctx, req.(*DeleteOrchestrationClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelcoAutomation_ListEdgeSlms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEdgeSlmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelcoAutomationServer).ListEdgeSlms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelcoAutomation_ListEdgeSlms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelcoAutomationServer).ListEdgeSlms(ctx, req.(*ListEdgeSlmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelcoAutomation_GetEdgeSlm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEdgeSlmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelcoAutomationServer).GetEdgeSlm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelcoAutomation_GetEdgeSlm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelcoAutomationServer).GetEdgeSlm(ctx, req.(*GetEdgeSlmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelcoAutomation_CreateEdgeSlm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEdgeSlmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelcoAutomationServer).CreateEdgeSlm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelcoAutomation_CreateEdgeSlm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelcoAutomationServer).CreateEdgeSlm(ctx, req.(*CreateEdgeSlmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelcoAutomation_DeleteEdgeSlm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEdgeSlmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelcoAutomationServer).DeleteEdgeSlm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelcoAutomation_DeleteEdgeSlm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelcoAutomationServer).DeleteEdgeSlm(ctx, req.(*DeleteEdgeSlmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelcoAutomation_CreateBlueprint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBlueprintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelcoAutomationServer).CreateBlueprint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelcoAutomation_CreateBlueprint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelcoAutomationServer).CreateBlueprint(ctx, req.(*CreateBlueprintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelcoAutomation_UpdateBlueprint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBlueprintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelcoAutomationServer).UpdateBlueprint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelcoAutomation_UpdateBlueprint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelcoAutomationServer).UpdateBlueprint(ctx, req.(*UpdateBlueprintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelcoAutomation_GetBlueprint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlueprintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelcoAutomationServer).GetBlueprint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelcoAutomation_GetBlueprint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelcoAutomationServer).GetBlueprint(ctx, req.(*GetBlueprintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelcoAutomation_DeleteBlueprint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBlueprintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelcoAutomationServer).DeleteBlueprint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelcoAutomation_DeleteBlueprint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelcoAutomationServer).DeleteBlueprint(ctx, req.(*DeleteBlueprintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelcoAutomation_ListBlueprints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBlueprintsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelcoAutomationServer).ListBlueprints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelcoAutomation_ListBlueprints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelcoAutomationServer).ListBlueprints(ctx, req.(*ListBlueprintsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelcoAutomation_ApproveBlueprint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveBlueprintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelcoAutomationServer).ApproveBlueprint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelcoAutomation_ApproveBlueprint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelcoAutomationServer).ApproveBlueprint(ctx, req.(*ApproveBlueprintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelcoAutomation_ProposeBlueprint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposeBlueprintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelcoAutomationServer).ProposeBlueprint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelcoAutomation_ProposeBlueprint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelcoAutomationServer).ProposeBlueprint(ctx, req.(*ProposeBlueprintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelcoAutomation_RejectBlueprint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectBlueprintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelcoAutomationServer).RejectBlueprint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelcoAutomation_RejectBlueprint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelcoAutomationServer).RejectBlueprint(ctx, req.(*RejectBlueprintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelcoAutomation_ListBlueprintRevisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBlueprintRevisionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelcoAutomationServer).ListBlueprintRevisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelcoAutomation_ListBlueprintRevisions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelcoAutomationServer).ListBlueprintRevisions(ctx, req.(*ListBlueprintRevisionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelcoAutomation_SearchBlueprintRevisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchBlueprintRevisionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelcoAutomationServer).SearchBlueprintRevisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelcoAutomation_SearchBlueprintRevisions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelcoAutomationServer).SearchBlueprintRevisions(ctx, req.(*SearchBlueprintRevisionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelcoAutomation_SearchDeploymentRevisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchDeploymentRevisionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelcoAutomationServer).SearchDeploymentRevisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelcoAutomation_SearchDeploymentRevisions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelcoAutomationServer).SearchDeploymentRevisions(ctx, req.(*SearchDeploymentRevisionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelcoAutomation_DiscardBlueprintChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscardBlueprintChangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelcoAutomationServer).DiscardBlueprintChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelcoAutomation_DiscardBlueprintChanges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelcoAutomationServer).DiscardBlueprintChanges(ctx, req.(*DiscardBlueprintChangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelcoAutomation_ListPublicBlueprints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPublicBlueprintsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelcoAutomationServer).ListPublicBlueprints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelcoAutomation_ListPublicBlueprints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelcoAutomationServer).ListPublicBlueprints(ctx, req.(*ListPublicBlueprintsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelcoAutomation_GetPublicBlueprint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublicBlueprintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelcoAutomationServer).GetPublicBlueprint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelcoAutomation_GetPublicBlueprint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelcoAutomationServer).GetPublicBlueprint(ctx, req.(*GetPublicBlueprintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelcoAutomation_CreateDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelcoAutomationServer).CreateDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelcoAutomation_CreateDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelcoAutomationServer).CreateDeployment(ctx, req.(*CreateDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelcoAutomation_UpdateDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelcoAutomationServer).UpdateDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelcoAutomation_UpdateDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelcoAutomationServer).UpdateDeployment(ctx, req.(*UpdateDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelcoAutomation_GetDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelcoAutomationServer).GetDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelcoAutomation_GetDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelcoAutomationServer).GetDeployment(ctx, req.(*GetDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelcoAutomation_RemoveDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelcoAutomationServer).RemoveDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelcoAutomation_RemoveDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelcoAutomationServer).RemoveDeployment(ctx, req.(*RemoveDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelcoAutomation_ListDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeploymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelcoAutomationServer).ListDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelcoAutomation_ListDeployments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelcoAutomationServer).ListDeployments(ctx, req.(*ListDeploymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelcoAutomation_ListDeploymentRevisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeploymentRevisionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelcoAutomationServer).ListDeploymentRevisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelcoAutomation_ListDeploymentRevisions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelcoAutomationServer).ListDeploymentRevisions(ctx, req.(*ListDeploymentRevisionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelcoAutomation_DiscardDeploymentChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscardDeploymentChangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelcoAutomationServer).DiscardDeploymentChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelcoAutomation_DiscardDeploymentChanges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelcoAutomationServer).DiscardDeploymentChanges(ctx, req.(*DiscardDeploymentChangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelcoAutomation_ApplyDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelcoAutomationServer).ApplyDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelcoAutomation_ApplyDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelcoAutomationServer).ApplyDeployment(ctx, req.(*ApplyDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelcoAutomation_ComputeDeploymentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComputeDeploymentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelcoAutomationServer).ComputeDeploymentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelcoAutomation_ComputeDeploymentStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelcoAutomationServer).ComputeDeploymentStatus(ctx, req.(*ComputeDeploymentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelcoAutomation_RollbackDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelcoAutomationServer).RollbackDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelcoAutomation_RollbackDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelcoAutomationServer).RollbackDeployment(ctx, req.(*RollbackDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelcoAutomation_GetHydratedDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHydratedDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelcoAutomationServer).GetHydratedDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelcoAutomation_GetHydratedDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelcoAutomationServer).GetHydratedDeployment(ctx, req.(*GetHydratedDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelcoAutomation_ListHydratedDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHydratedDeploymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelcoAutomationServer).ListHydratedDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelcoAutomation_ListHydratedDeployments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelcoAutomationServer).ListHydratedDeployments(ctx, req.(*ListHydratedDeploymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelcoAutomation_UpdateHydratedDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHydratedDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelcoAutomationServer).UpdateHydratedDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelcoAutomation_UpdateHydratedDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelcoAutomationServer).UpdateHydratedDeployment(ctx, req.(*UpdateHydratedDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelcoAutomation_ApplyHydratedDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyHydratedDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelcoAutomationServer).ApplyHydratedDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelcoAutomation_ApplyHydratedDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelcoAutomationServer).ApplyHydratedDeployment(ctx, req.(*ApplyHydratedDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TelcoAutomation_ServiceDesc is the grpc.ServiceDesc for TelcoAutomation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TelcoAutomation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.telcoautomation.v1.TelcoAutomation",
	HandlerType: (*TelcoAutomationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListOrchestrationClusters",
			Handler:    _TelcoAutomation_ListOrchestrationClusters_Handler,
		},
		{
			MethodName: "GetOrchestrationCluster",
			Handler:    _TelcoAutomation_GetOrchestrationCluster_Handler,
		},
		{
			MethodName: "CreateOrchestrationCluster",
			Handler:    _TelcoAutomation_CreateOrchestrationCluster_Handler,
		},
		{
			MethodName: "DeleteOrchestrationCluster",
			Handler:    _TelcoAutomation_DeleteOrchestrationCluster_Handler,
		},
		{
			MethodName: "ListEdgeSlms",
			Handler:    _TelcoAutomation_ListEdgeSlms_Handler,
		},
		{
			MethodName: "GetEdgeSlm",
			Handler:    _TelcoAutomation_GetEdgeSlm_Handler,
		},
		{
			MethodName: "CreateEdgeSlm",
			Handler:    _TelcoAutomation_CreateEdgeSlm_Handler,
		},
		{
			MethodName: "DeleteEdgeSlm",
			Handler:    _TelcoAutomation_DeleteEdgeSlm_Handler,
		},
		{
			MethodName: "CreateBlueprint",
			Handler:    _TelcoAutomation_CreateBlueprint_Handler,
		},
		{
			MethodName: "UpdateBlueprint",
			Handler:    _TelcoAutomation_UpdateBlueprint_Handler,
		},
		{
			MethodName: "GetBlueprint",
			Handler:    _TelcoAutomation_GetBlueprint_Handler,
		},
		{
			MethodName: "DeleteBlueprint",
			Handler:    _TelcoAutomation_DeleteBlueprint_Handler,
		},
		{
			MethodName: "ListBlueprints",
			Handler:    _TelcoAutomation_ListBlueprints_Handler,
		},
		{
			MethodName: "ApproveBlueprint",
			Handler:    _TelcoAutomation_ApproveBlueprint_Handler,
		},
		{
			MethodName: "ProposeBlueprint",
			Handler:    _TelcoAutomation_ProposeBlueprint_Handler,
		},
		{
			MethodName: "RejectBlueprint",
			Handler:    _TelcoAutomation_RejectBlueprint_Handler,
		},
		{
			MethodName: "ListBlueprintRevisions",
			Handler:    _TelcoAutomation_ListBlueprintRevisions_Handler,
		},
		{
			MethodName: "SearchBlueprintRevisions",
			Handler:    _TelcoAutomation_SearchBlueprintRevisions_Handler,
		},
		{
			MethodName: "SearchDeploymentRevisions",
			Handler:    _TelcoAutomation_SearchDeploymentRevisions_Handler,
		},
		{
			MethodName: "DiscardBlueprintChanges",
			Handler:    _TelcoAutomation_DiscardBlueprintChanges_Handler,
		},
		{
			MethodName: "ListPublicBlueprints",
			Handler:    _TelcoAutomation_ListPublicBlueprints_Handler,
		},
		{
			MethodName: "GetPublicBlueprint",
			Handler:    _TelcoAutomation_GetPublicBlueprint_Handler,
		},
		{
			MethodName: "CreateDeployment",
			Handler:    _TelcoAutomation_CreateDeployment_Handler,
		},
		{
			MethodName: "UpdateDeployment",
			Handler:    _TelcoAutomation_UpdateDeployment_Handler,
		},
		{
			MethodName: "GetDeployment",
			Handler:    _TelcoAutomation_GetDeployment_Handler,
		},
		{
			MethodName: "RemoveDeployment",
			Handler:    _TelcoAutomation_RemoveDeployment_Handler,
		},
		{
			MethodName: "ListDeployments",
			Handler:    _TelcoAutomation_ListDeployments_Handler,
		},
		{
			MethodName: "ListDeploymentRevisions",
			Handler:    _TelcoAutomation_ListDeploymentRevisions_Handler,
		},
		{
			MethodName: "DiscardDeploymentChanges",
			Handler:    _TelcoAutomation_DiscardDeploymentChanges_Handler,
		},
		{
			MethodName: "ApplyDeployment",
			Handler:    _TelcoAutomation_ApplyDeployment_Handler,
		},
		{
			MethodName: "ComputeDeploymentStatus",
			Handler:    _TelcoAutomation_ComputeDeploymentStatus_Handler,
		},
		{
			MethodName: "RollbackDeployment",
			Handler:    _TelcoAutomation_RollbackDeployment_Handler,
		},
		{
			MethodName: "GetHydratedDeployment",
			Handler:    _TelcoAutomation_GetHydratedDeployment_Handler,
		},
		{
			MethodName: "ListHydratedDeployments",
			Handler:    _TelcoAutomation_ListHydratedDeployments_Handler,
		},
		{
			MethodName: "UpdateHydratedDeployment",
			Handler:    _TelcoAutomation_UpdateHydratedDeployment_Handler,
		},
		{
			MethodName: "ApplyHydratedDeployment",
			Handler:    _TelcoAutomation_ApplyHydratedDeployment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/telcoautomation/v1/telcoautomation.proto",
}
