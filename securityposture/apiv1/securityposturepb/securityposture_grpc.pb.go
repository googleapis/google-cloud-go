// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/securityposture/v1/securityposture.proto

package securityposturepb

import (
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SecurityPosture_ListPostures_FullMethodName            = "/google.cloud.securityposture.v1.SecurityPosture/ListPostures"
	SecurityPosture_ListPostureRevisions_FullMethodName    = "/google.cloud.securityposture.v1.SecurityPosture/ListPostureRevisions"
	SecurityPosture_GetPosture_FullMethodName              = "/google.cloud.securityposture.v1.SecurityPosture/GetPosture"
	SecurityPosture_CreatePosture_FullMethodName           = "/google.cloud.securityposture.v1.SecurityPosture/CreatePosture"
	SecurityPosture_UpdatePosture_FullMethodName           = "/google.cloud.securityposture.v1.SecurityPosture/UpdatePosture"
	SecurityPosture_DeletePosture_FullMethodName           = "/google.cloud.securityposture.v1.SecurityPosture/DeletePosture"
	SecurityPosture_ExtractPosture_FullMethodName          = "/google.cloud.securityposture.v1.SecurityPosture/ExtractPosture"
	SecurityPosture_ListPostureDeployments_FullMethodName  = "/google.cloud.securityposture.v1.SecurityPosture/ListPostureDeployments"
	SecurityPosture_GetPostureDeployment_FullMethodName    = "/google.cloud.securityposture.v1.SecurityPosture/GetPostureDeployment"
	SecurityPosture_CreatePostureDeployment_FullMethodName = "/google.cloud.securityposture.v1.SecurityPosture/CreatePostureDeployment"
	SecurityPosture_UpdatePostureDeployment_FullMethodName = "/google.cloud.securityposture.v1.SecurityPosture/UpdatePostureDeployment"
	SecurityPosture_DeletePostureDeployment_FullMethodName = "/google.cloud.securityposture.v1.SecurityPosture/DeletePostureDeployment"
	SecurityPosture_ListPostureTemplates_FullMethodName    = "/google.cloud.securityposture.v1.SecurityPosture/ListPostureTemplates"
	SecurityPosture_GetPostureTemplate_FullMethodName      = "/google.cloud.securityposture.v1.SecurityPosture/GetPostureTemplate"
)

// SecurityPostureClient is the client API for SecurityPosture service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecurityPostureClient interface {
	// (-- This option restricts the visibility of the API to only projects that
	// will
	// (-- be labeled as `PREVIEW` or `GOOGLE_INTERNAL` by the service.
	// (-- option (google.api.api_visibility).restriction =
	// "PREVIEW,GOOGLE_INTERNAL"; Postures Lists Postures in a given organization
	// and location. In case a posture has multiple revisions, the latest revision
	// as per UpdateTime will be returned.
	ListPostures(ctx context.Context, in *ListPosturesRequest, opts ...grpc.CallOption) (*ListPosturesResponse, error)
	// Lists revisions of a Posture in a given organization and location.
	ListPostureRevisions(ctx context.Context, in *ListPostureRevisionsRequest, opts ...grpc.CallOption) (*ListPostureRevisionsResponse, error)
	// Gets a posture in a given organization and location.
	// User must provide revision_id to retrieve a specific revision of the
	// resource.
	// NOT_FOUND error is returned if the revision_id or the Posture name does not
	// exist. In case revision_id is not provided then the latest Posture revision
	// by UpdateTime is returned.
	GetPosture(ctx context.Context, in *GetPostureRequest, opts ...grpc.CallOption) (*Posture, error)
	// Creates a new Posture resource.
	// If a Posture with the specified name already exists in the specified
	// organization and location, the long running operation returns a
	// [ALREADY_EXISTS][google.rpc.Code.ALREADY_EXISTS] error.
	CreatePosture(ctx context.Context, in *CreatePostureRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates an existing Posture.
	// A new revision of the posture will be created if the revision to be
	// updated is currently deployed on a workload.
	// Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
	// Posture does not exist.
	// Returns a `google.rpc.Status` with `google.rpc.Code.ABORTED` if the etag
	// supplied in the request does not match the persisted etag of the Posture.
	// Updatable fields are state, description and policy_sets.
	// State update operation cannot be clubbed with update of description and
	// policy_sets.
	// An ACTIVE posture can be updated to both DRAFT or DEPRECATED states.
	// Postures in DRAFT or DEPRECATED states can only be updated to ACTIVE state.
	UpdatePosture(ctx context.Context, in *UpdatePostureRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes all the revisions of a resource.
	// A posture can only be deleted when none of the revisions are deployed to
	// any workload.
	DeletePosture(ctx context.Context, in *DeletePostureRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Extracts existing policies on a workload as a posture.
	// If a Posture on the given workload already exists, the long running
	// operation returns a [ALREADY_EXISTS][google.rpc.Code.ALREADY_EXISTS] error.
	ExtractPosture(ctx context.Context, in *ExtractPostureRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// PostureDeployments
	// Lists PostureDeployments in a given project and location.
	ListPostureDeployments(ctx context.Context, in *ListPostureDeploymentsRequest, opts ...grpc.CallOption) (*ListPostureDeploymentsResponse, error)
	// Gets details of a single PostureDeployment.
	GetPostureDeployment(ctx context.Context, in *GetPostureDeploymentRequest, opts ...grpc.CallOption) (*PostureDeployment, error)
	// Creates a new PostureDeployment in a given project and location.
	CreatePostureDeployment(ctx context.Context, in *CreatePostureDeploymentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates the parameters of a single PostureDeployment.
	UpdatePostureDeployment(ctx context.Context, in *UpdatePostureDeploymentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single PostureDeployment.
	DeletePostureDeployment(ctx context.Context, in *DeletePostureDeploymentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// PostureTemplates
	// Lists all the PostureTemplates available to the user.
	ListPostureTemplates(ctx context.Context, in *ListPostureTemplatesRequest, opts ...grpc.CallOption) (*ListPostureTemplatesResponse, error)
	// Gets a PostureTemplate.
	// User must provide revision_id to retrieve a specific revision of the
	// resource.
	// NOT_FOUND error is returned if the revision_id or the PostureTemplate name
	// does not exist. In case revision_id is not provided then the
	// PostureTemplate with latest revision_id is returned.
	GetPostureTemplate(ctx context.Context, in *GetPostureTemplateRequest, opts ...grpc.CallOption) (*PostureTemplate, error)
}

type securityPostureClient struct {
	cc grpc.ClientConnInterface
}

func NewSecurityPostureClient(cc grpc.ClientConnInterface) SecurityPostureClient {
	return &securityPostureClient{cc}
}

func (c *securityPostureClient) ListPostures(ctx context.Context, in *ListPosturesRequest, opts ...grpc.CallOption) (*ListPosturesResponse, error) {
	out := new(ListPosturesResponse)
	err := c.cc.Invoke(ctx, SecurityPosture_ListPostures_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityPostureClient) ListPostureRevisions(ctx context.Context, in *ListPostureRevisionsRequest, opts ...grpc.CallOption) (*ListPostureRevisionsResponse, error) {
	out := new(ListPostureRevisionsResponse)
	err := c.cc.Invoke(ctx, SecurityPosture_ListPostureRevisions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityPostureClient) GetPosture(ctx context.Context, in *GetPostureRequest, opts ...grpc.CallOption) (*Posture, error) {
	out := new(Posture)
	err := c.cc.Invoke(ctx, SecurityPosture_GetPosture_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityPostureClient) CreatePosture(ctx context.Context, in *CreatePostureRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, SecurityPosture_CreatePosture_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityPostureClient) UpdatePosture(ctx context.Context, in *UpdatePostureRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, SecurityPosture_UpdatePosture_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityPostureClient) DeletePosture(ctx context.Context, in *DeletePostureRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, SecurityPosture_DeletePosture_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityPostureClient) ExtractPosture(ctx context.Context, in *ExtractPostureRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, SecurityPosture_ExtractPosture_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityPostureClient) ListPostureDeployments(ctx context.Context, in *ListPostureDeploymentsRequest, opts ...grpc.CallOption) (*ListPostureDeploymentsResponse, error) {
	out := new(ListPostureDeploymentsResponse)
	err := c.cc.Invoke(ctx, SecurityPosture_ListPostureDeployments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityPostureClient) GetPostureDeployment(ctx context.Context, in *GetPostureDeploymentRequest, opts ...grpc.CallOption) (*PostureDeployment, error) {
	out := new(PostureDeployment)
	err := c.cc.Invoke(ctx, SecurityPosture_GetPostureDeployment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityPostureClient) CreatePostureDeployment(ctx context.Context, in *CreatePostureDeploymentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, SecurityPosture_CreatePostureDeployment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityPostureClient) UpdatePostureDeployment(ctx context.Context, in *UpdatePostureDeploymentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, SecurityPosture_UpdatePostureDeployment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityPostureClient) DeletePostureDeployment(ctx context.Context, in *DeletePostureDeploymentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, SecurityPosture_DeletePostureDeployment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityPostureClient) ListPostureTemplates(ctx context.Context, in *ListPostureTemplatesRequest, opts ...grpc.CallOption) (*ListPostureTemplatesResponse, error) {
	out := new(ListPostureTemplatesResponse)
	err := c.cc.Invoke(ctx, SecurityPosture_ListPostureTemplates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityPostureClient) GetPostureTemplate(ctx context.Context, in *GetPostureTemplateRequest, opts ...grpc.CallOption) (*PostureTemplate, error) {
	out := new(PostureTemplate)
	err := c.cc.Invoke(ctx, SecurityPosture_GetPostureTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecurityPostureServer is the server API for SecurityPosture service.
// All implementations should embed UnimplementedSecurityPostureServer
// for forward compatibility
type SecurityPostureServer interface {
	// (-- This option restricts the visibility of the API to only projects that
	// will
	// (-- be labeled as `PREVIEW` or `GOOGLE_INTERNAL` by the service.
	// (-- option (google.api.api_visibility).restriction =
	// "PREVIEW,GOOGLE_INTERNAL"; Postures Lists Postures in a given organization
	// and location. In case a posture has multiple revisions, the latest revision
	// as per UpdateTime will be returned.
	ListPostures(context.Context, *ListPosturesRequest) (*ListPosturesResponse, error)
	// Lists revisions of a Posture in a given organization and location.
	ListPostureRevisions(context.Context, *ListPostureRevisionsRequest) (*ListPostureRevisionsResponse, error)
	// Gets a posture in a given organization and location.
	// User must provide revision_id to retrieve a specific revision of the
	// resource.
	// NOT_FOUND error is returned if the revision_id or the Posture name does not
	// exist. In case revision_id is not provided then the latest Posture revision
	// by UpdateTime is returned.
	GetPosture(context.Context, *GetPostureRequest) (*Posture, error)
	// Creates a new Posture resource.
	// If a Posture with the specified name already exists in the specified
	// organization and location, the long running operation returns a
	// [ALREADY_EXISTS][google.rpc.Code.ALREADY_EXISTS] error.
	CreatePosture(context.Context, *CreatePostureRequest) (*longrunningpb.Operation, error)
	// Updates an existing Posture.
	// A new revision of the posture will be created if the revision to be
	// updated is currently deployed on a workload.
	// Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
	// Posture does not exist.
	// Returns a `google.rpc.Status` with `google.rpc.Code.ABORTED` if the etag
	// supplied in the request does not match the persisted etag of the Posture.
	// Updatable fields are state, description and policy_sets.
	// State update operation cannot be clubbed with update of description and
	// policy_sets.
	// An ACTIVE posture can be updated to both DRAFT or DEPRECATED states.
	// Postures in DRAFT or DEPRECATED states can only be updated to ACTIVE state.
	UpdatePosture(context.Context, *UpdatePostureRequest) (*longrunningpb.Operation, error)
	// Deletes all the revisions of a resource.
	// A posture can only be deleted when none of the revisions are deployed to
	// any workload.
	DeletePosture(context.Context, *DeletePostureRequest) (*longrunningpb.Operation, error)
	// Extracts existing policies on a workload as a posture.
	// If a Posture on the given workload already exists, the long running
	// operation returns a [ALREADY_EXISTS][google.rpc.Code.ALREADY_EXISTS] error.
	ExtractPosture(context.Context, *ExtractPostureRequest) (*longrunningpb.Operation, error)
	// PostureDeployments
	// Lists PostureDeployments in a given project and location.
	ListPostureDeployments(context.Context, *ListPostureDeploymentsRequest) (*ListPostureDeploymentsResponse, error)
	// Gets details of a single PostureDeployment.
	GetPostureDeployment(context.Context, *GetPostureDeploymentRequest) (*PostureDeployment, error)
	// Creates a new PostureDeployment in a given project and location.
	CreatePostureDeployment(context.Context, *CreatePostureDeploymentRequest) (*longrunningpb.Operation, error)
	// Updates the parameters of a single PostureDeployment.
	UpdatePostureDeployment(context.Context, *UpdatePostureDeploymentRequest) (*longrunningpb.Operation, error)
	// Deletes a single PostureDeployment.
	DeletePostureDeployment(context.Context, *DeletePostureDeploymentRequest) (*longrunningpb.Operation, error)
	// PostureTemplates
	// Lists all the PostureTemplates available to the user.
	ListPostureTemplates(context.Context, *ListPostureTemplatesRequest) (*ListPostureTemplatesResponse, error)
	// Gets a PostureTemplate.
	// User must provide revision_id to retrieve a specific revision of the
	// resource.
	// NOT_FOUND error is returned if the revision_id or the PostureTemplate name
	// does not exist. In case revision_id is not provided then the
	// PostureTemplate with latest revision_id is returned.
	GetPostureTemplate(context.Context, *GetPostureTemplateRequest) (*PostureTemplate, error)
}

// UnimplementedSecurityPostureServer should be embedded to have forward compatible implementations.
type UnimplementedSecurityPostureServer struct {
}

func (UnimplementedSecurityPostureServer) ListPostures(context.Context, *ListPosturesRequest) (*ListPosturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPostures not implemented")
}
func (UnimplementedSecurityPostureServer) ListPostureRevisions(context.Context, *ListPostureRevisionsRequest) (*ListPostureRevisionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPostureRevisions not implemented")
}
func (UnimplementedSecurityPostureServer) GetPosture(context.Context, *GetPostureRequest) (*Posture, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPosture not implemented")
}
func (UnimplementedSecurityPostureServer) CreatePosture(context.Context, *CreatePostureRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePosture not implemented")
}
func (UnimplementedSecurityPostureServer) UpdatePosture(context.Context, *UpdatePostureRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePosture not implemented")
}
func (UnimplementedSecurityPostureServer) DeletePosture(context.Context, *DeletePostureRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePosture not implemented")
}
func (UnimplementedSecurityPostureServer) ExtractPosture(context.Context, *ExtractPostureRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtractPosture not implemented")
}
func (UnimplementedSecurityPostureServer) ListPostureDeployments(context.Context, *ListPostureDeploymentsRequest) (*ListPostureDeploymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPostureDeployments not implemented")
}
func (UnimplementedSecurityPostureServer) GetPostureDeployment(context.Context, *GetPostureDeploymentRequest) (*PostureDeployment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostureDeployment not implemented")
}
func (UnimplementedSecurityPostureServer) CreatePostureDeployment(context.Context, *CreatePostureDeploymentRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePostureDeployment not implemented")
}
func (UnimplementedSecurityPostureServer) UpdatePostureDeployment(context.Context, *UpdatePostureDeploymentRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePostureDeployment not implemented")
}
func (UnimplementedSecurityPostureServer) DeletePostureDeployment(context.Context, *DeletePostureDeploymentRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePostureDeployment not implemented")
}
func (UnimplementedSecurityPostureServer) ListPostureTemplates(context.Context, *ListPostureTemplatesRequest) (*ListPostureTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPostureTemplates not implemented")
}
func (UnimplementedSecurityPostureServer) GetPostureTemplate(context.Context, *GetPostureTemplateRequest) (*PostureTemplate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostureTemplate not implemented")
}

// UnsafeSecurityPostureServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecurityPostureServer will
// result in compilation errors.
type UnsafeSecurityPostureServer interface {
	mustEmbedUnimplementedSecurityPostureServer()
}

func RegisterSecurityPostureServer(s grpc.ServiceRegistrar, srv SecurityPostureServer) {
	s.RegisterService(&SecurityPosture_ServiceDesc, srv)
}

func _SecurityPosture_ListPostures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPosturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityPostureServer).ListPostures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityPosture_ListPostures_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityPostureServer).ListPostures(ctx, req.(*ListPosturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityPosture_ListPostureRevisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPostureRevisionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityPostureServer).ListPostureRevisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityPosture_ListPostureRevisions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityPostureServer).ListPostureRevisions(ctx, req.(*ListPostureRevisionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityPosture_GetPosture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityPostureServer).GetPosture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityPosture_GetPosture_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityPostureServer).GetPosture(ctx, req.(*GetPostureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityPosture_CreatePosture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityPostureServer).CreatePosture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityPosture_CreatePosture_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityPostureServer).CreatePosture(ctx, req.(*CreatePostureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityPosture_UpdatePosture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePostureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityPostureServer).UpdatePosture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityPosture_UpdatePosture_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityPostureServer).UpdatePosture(ctx, req.(*UpdatePostureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityPosture_DeletePosture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePostureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityPostureServer).DeletePosture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityPosture_DeletePosture_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityPostureServer).DeletePosture(ctx, req.(*DeletePostureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityPosture_ExtractPosture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtractPostureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityPostureServer).ExtractPosture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityPosture_ExtractPosture_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityPostureServer).ExtractPosture(ctx, req.(*ExtractPostureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityPosture_ListPostureDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPostureDeploymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityPostureServer).ListPostureDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityPosture_ListPostureDeployments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityPostureServer).ListPostureDeployments(ctx, req.(*ListPostureDeploymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityPosture_GetPostureDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostureDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityPostureServer).GetPostureDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityPosture_GetPostureDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityPostureServer).GetPostureDeployment(ctx, req.(*GetPostureDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityPosture_CreatePostureDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostureDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityPostureServer).CreatePostureDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityPosture_CreatePostureDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityPostureServer).CreatePostureDeployment(ctx, req.(*CreatePostureDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityPosture_UpdatePostureDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePostureDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityPostureServer).UpdatePostureDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityPosture_UpdatePostureDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityPostureServer).UpdatePostureDeployment(ctx, req.(*UpdatePostureDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityPosture_DeletePostureDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePostureDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityPostureServer).DeletePostureDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityPosture_DeletePostureDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityPostureServer).DeletePostureDeployment(ctx, req.(*DeletePostureDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityPosture_ListPostureTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPostureTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityPostureServer).ListPostureTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityPosture_ListPostureTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityPostureServer).ListPostureTemplates(ctx, req.(*ListPostureTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityPosture_GetPostureTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostureTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityPostureServer).GetPostureTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityPosture_GetPostureTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityPostureServer).GetPostureTemplate(ctx, req.(*GetPostureTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SecurityPosture_ServiceDesc is the grpc.ServiceDesc for SecurityPosture service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecurityPosture_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.securityposture.v1.SecurityPosture",
	HandlerType: (*SecurityPostureServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPostures",
			Handler:    _SecurityPosture_ListPostures_Handler,
		},
		{
			MethodName: "ListPostureRevisions",
			Handler:    _SecurityPosture_ListPostureRevisions_Handler,
		},
		{
			MethodName: "GetPosture",
			Handler:    _SecurityPosture_GetPosture_Handler,
		},
		{
			MethodName: "CreatePosture",
			Handler:    _SecurityPosture_CreatePosture_Handler,
		},
		{
			MethodName: "UpdatePosture",
			Handler:    _SecurityPosture_UpdatePosture_Handler,
		},
		{
			MethodName: "DeletePosture",
			Handler:    _SecurityPosture_DeletePosture_Handler,
		},
		{
			MethodName: "ExtractPosture",
			Handler:    _SecurityPosture_ExtractPosture_Handler,
		},
		{
			MethodName: "ListPostureDeployments",
			Handler:    _SecurityPosture_ListPostureDeployments_Handler,
		},
		{
			MethodName: "GetPostureDeployment",
			Handler:    _SecurityPosture_GetPostureDeployment_Handler,
		},
		{
			MethodName: "CreatePostureDeployment",
			Handler:    _SecurityPosture_CreatePostureDeployment_Handler,
		},
		{
			MethodName: "UpdatePostureDeployment",
			Handler:    _SecurityPosture_UpdatePostureDeployment_Handler,
		},
		{
			MethodName: "DeletePostureDeployment",
			Handler:    _SecurityPosture_DeletePostureDeployment_Handler,
		},
		{
			MethodName: "ListPostureTemplates",
			Handler:    _SecurityPosture_ListPostureTemplates_Handler,
		},
		{
			MethodName: "GetPostureTemplate",
			Handler:    _SecurityPosture_GetPostureTemplate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/securityposture/v1/securityposture.proto",
}
