// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.3
// source: google/cloud/devicestreaming/v1/service.proto

package devicestreamingpb

import (
	context "context"
	reflect "reflect"
	sync "sync"

	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The state that the DeviceSession resides.
type DeviceSession_SessionState int32

const (
	// Default value. This value is unused.
	DeviceSession_SESSION_STATE_UNSPECIFIED DeviceSession_SessionState = 0
	// Initial state of a session request. The session is being validated for
	// correctness and a device is not yet requested.
	DeviceSession_REQUESTED DeviceSession_SessionState = 1
	// The session has been validated and is in the queue for a device.
	DeviceSession_PENDING DeviceSession_SessionState = 2
	// The session has been granted and the device is accepting
	// connections.
	DeviceSession_ACTIVE DeviceSession_SessionState = 3
	// The session duration exceeded the device's reservation time period and
	// timed out automatically.
	DeviceSession_EXPIRED DeviceSession_SessionState = 4
	// The user is finished with the session and it was canceled by the user
	// while the request was still getting allocated or after allocation and
	// during device usage period.
	DeviceSession_FINISHED DeviceSession_SessionState = 5
	// Unable to complete the session because the device was unavailable and
	// it failed to allocate through the scheduler. For example, a device not
	// in the catalog was requested or the request expired in the allocation
	// queue.
	DeviceSession_UNAVAILABLE DeviceSession_SessionState = 6
	// Unable to complete the session for an internal reason, such as an
	// infrastructure failure.
	DeviceSession_ERROR DeviceSession_SessionState = 7
)

// Enum value maps for DeviceSession_SessionState.
var (
	DeviceSession_SessionState_name = map[int32]string{
		0: "SESSION_STATE_UNSPECIFIED",
		1: "REQUESTED",
		2: "PENDING",
		3: "ACTIVE",
		4: "EXPIRED",
		5: "FINISHED",
		6: "UNAVAILABLE",
		7: "ERROR",
	}
	DeviceSession_SessionState_value = map[string]int32{
		"SESSION_STATE_UNSPECIFIED": 0,
		"REQUESTED":                 1,
		"PENDING":                   2,
		"ACTIVE":                    3,
		"EXPIRED":                   4,
		"FINISHED":                  5,
		"UNAVAILABLE":               6,
		"ERROR":                     7,
	}
)

func (x DeviceSession_SessionState) Enum() *DeviceSession_SessionState {
	p := new(DeviceSession_SessionState)
	*p = x
	return p
}

func (x DeviceSession_SessionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceSession_SessionState) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_devicestreaming_v1_service_proto_enumTypes[0].Descriptor()
}

func (DeviceSession_SessionState) Type() protoreflect.EnumType {
	return &file_google_cloud_devicestreaming_v1_service_proto_enumTypes[0]
}

func (x DeviceSession_SessionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceSession_SessionState.Descriptor instead.
func (DeviceSession_SessionState) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_devicestreaming_v1_service_proto_rawDescGZIP(), []int{6, 0}
}

// Request message for DirectAccessService.CreateDeviceSession.
type CreateDeviceSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The Compute Engine project under which this device will be
	// allocated. "projects/{project_id}"
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Required. A DeviceSession to create.
	DeviceSession *DeviceSession `protobuf:"bytes,2,opt,name=device_session,json=deviceSession,proto3" json:"device_session,omitempty"`
	// Optional. The ID to use for the DeviceSession, which will become the final
	// component of the DeviceSession's resource name.
	//
	// This value should be 4-63 characters, and valid characters
	// are /[a-z][0-9]-/.
	DeviceSessionId string `protobuf:"bytes,4,opt,name=device_session_id,json=deviceSessionId,proto3" json:"device_session_id,omitempty"`
}

func (x *CreateDeviceSessionRequest) Reset() {
	*x = CreateDeviceSessionRequest{}
	mi := &file_google_cloud_devicestreaming_v1_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDeviceSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceSessionRequest) ProtoMessage() {}

func (x *CreateDeviceSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_devicestreaming_v1_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceSessionRequest.ProtoReflect.Descriptor instead.
func (*CreateDeviceSessionRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_devicestreaming_v1_service_proto_rawDescGZIP(), []int{0}
}

func (x *CreateDeviceSessionRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateDeviceSessionRequest) GetDeviceSession() *DeviceSession {
	if x != nil {
		return x.DeviceSession
	}
	return nil
}

func (x *CreateDeviceSessionRequest) GetDeviceSessionId() string {
	if x != nil {
		return x.DeviceSessionId
	}
	return ""
}

// Request message for DirectAccessService.ListDeviceSessions.
type ListDeviceSessionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the parent to request, e.g. "projects/{project_id}"
	Parent string `protobuf:"bytes,4,opt,name=parent,proto3" json:"parent,omitempty"`
	// Optional. The maximum number of DeviceSessions to return.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Optional. A continuation token for paging.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Optional. If specified, responses will be filtered by the given filter.
	// Allowed fields are: session_state.
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListDeviceSessionsRequest) Reset() {
	*x = ListDeviceSessionsRequest{}
	mi := &file_google_cloud_devicestreaming_v1_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDeviceSessionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDeviceSessionsRequest) ProtoMessage() {}

func (x *ListDeviceSessionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_devicestreaming_v1_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDeviceSessionsRequest.ProtoReflect.Descriptor instead.
func (*ListDeviceSessionsRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_devicestreaming_v1_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListDeviceSessionsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListDeviceSessionsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListDeviceSessionsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListDeviceSessionsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// Response message for DirectAccessService.ListDeviceSessions.
type ListDeviceSessionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The sessions matching the specified filter in the given cloud project.
	DeviceSessions []*DeviceSession `protobuf:"bytes,1,rep,name=device_sessions,json=deviceSessions,proto3" json:"device_sessions,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListDeviceSessionsResponse) Reset() {
	*x = ListDeviceSessionsResponse{}
	mi := &file_google_cloud_devicestreaming_v1_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDeviceSessionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDeviceSessionsResponse) ProtoMessage() {}

func (x *ListDeviceSessionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_devicestreaming_v1_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDeviceSessionsResponse.ProtoReflect.Descriptor instead.
func (*ListDeviceSessionsResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_devicestreaming_v1_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListDeviceSessionsResponse) GetDeviceSessions() []*DeviceSession {
	if x != nil {
		return x.DeviceSessions
	}
	return nil
}

func (x *ListDeviceSessionsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Request message for DirectAccessService.GetDeviceSession.
type GetDeviceSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Name of the DeviceSession, e.g.
	// "projects/{project_id}/deviceSessions/{session_id}"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetDeviceSessionRequest) Reset() {
	*x = GetDeviceSessionRequest{}
	mi := &file_google_cloud_devicestreaming_v1_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDeviceSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceSessionRequest) ProtoMessage() {}

func (x *GetDeviceSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_devicestreaming_v1_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceSessionRequest.ProtoReflect.Descriptor instead.
func (*GetDeviceSessionRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_devicestreaming_v1_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetDeviceSessionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Request message for DirectAccessService.CancelDeviceSession.
type CancelDeviceSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Name of the DeviceSession, e.g.
	// "projects/{project_id}/deviceSessions/{session_id}"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CancelDeviceSessionRequest) Reset() {
	*x = CancelDeviceSessionRequest{}
	mi := &file_google_cloud_devicestreaming_v1_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelDeviceSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelDeviceSessionRequest) ProtoMessage() {}

func (x *CancelDeviceSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_devicestreaming_v1_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelDeviceSessionRequest.ProtoReflect.Descriptor instead.
func (*CancelDeviceSessionRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_devicestreaming_v1_service_proto_rawDescGZIP(), []int{4}
}

func (x *CancelDeviceSessionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Request message for DirectAccessService.UpdateDeviceSession.
type UpdateDeviceSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. DeviceSession to update.
	// The DeviceSession's `name` field is used to identify the session to update
	// "projects/{project_id}/deviceSessions/{session_id}"
	DeviceSession *DeviceSession `protobuf:"bytes,1,opt,name=device_session,json=deviceSession,proto3" json:"device_session,omitempty"`
	// Optional. The list of fields to update.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateDeviceSessionRequest) Reset() {
	*x = UpdateDeviceSessionRequest{}
	mi := &file_google_cloud_devicestreaming_v1_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDeviceSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceSessionRequest) ProtoMessage() {}

func (x *UpdateDeviceSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_devicestreaming_v1_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceSessionRequest.ProtoReflect.Descriptor instead.
func (*UpdateDeviceSessionRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_devicestreaming_v1_service_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateDeviceSessionRequest) GetDeviceSession() *DeviceSession {
	if x != nil {
		return x.DeviceSession
	}
	return nil
}

func (x *UpdateDeviceSessionRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// Protobuf message describing the device message, used from several RPCs.
type DeviceSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Name of the DeviceSession, e.g.
	// "projects/{project_id}/deviceSessions/{session_id}"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. The title of the DeviceSession to be presented in the UI.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Output only. Current state of the DeviceSession.
	State DeviceSession_SessionState `protobuf:"varint,3,opt,name=state,proto3,enum=google.cloud.devicestreaming.v1.DeviceSession_SessionState" json:"state,omitempty"`
	// Output only. The historical state transitions of the session_state message
	// including the current session state.
	StateHistories []*DeviceSession_SessionStateEvent `protobuf:"bytes,14,rep,name=state_histories,json=stateHistories,proto3" json:"state_histories,omitempty"`
	// The amount of time that a device will be initially allocated for.
	//
	// Types that are assignable to Expiration:
	//
	//	*DeviceSession_Ttl
	//	*DeviceSession_ExpireTime
	Expiration isDeviceSession_Expiration `protobuf_oneof:"expiration"`
	// Output only. The interval of time that this device must be interacted with
	// before it transitions from ACTIVE to TIMEOUT_INACTIVITY.
	InactivityTimeout *durationpb.Duration `protobuf:"bytes,7,opt,name=inactivity_timeout,json=inactivityTimeout,proto3" json:"inactivity_timeout,omitempty"`
	// Output only. The time that the Session was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The timestamp that the session first became ACTIVE.
	ActiveStartTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=active_start_time,json=activeStartTime,proto3" json:"active_start_time,omitempty"`
	// Required. The requested device
	AndroidDevice *AndroidDevice `protobuf:"bytes,15,opt,name=android_device,json=androidDevice,proto3" json:"android_device,omitempty"`
}

func (x *DeviceSession) Reset() {
	*x = DeviceSession{}
	mi := &file_google_cloud_devicestreaming_v1_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceSession) ProtoMessage() {}

func (x *DeviceSession) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_devicestreaming_v1_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceSession.ProtoReflect.Descriptor instead.
func (*DeviceSession) Descriptor() ([]byte, []int) {
	return file_google_cloud_devicestreaming_v1_service_proto_rawDescGZIP(), []int{6}
}

func (x *DeviceSession) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeviceSession) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *DeviceSession) GetState() DeviceSession_SessionState {
	if x != nil {
		return x.State
	}
	return DeviceSession_SESSION_STATE_UNSPECIFIED
}

func (x *DeviceSession) GetStateHistories() []*DeviceSession_SessionStateEvent {
	if x != nil {
		return x.StateHistories
	}
	return nil
}

func (m *DeviceSession) GetExpiration() isDeviceSession_Expiration {
	if m != nil {
		return m.Expiration
	}
	return nil
}

func (x *DeviceSession) GetTtl() *durationpb.Duration {
	if x, ok := x.GetExpiration().(*DeviceSession_Ttl); ok {
		return x.Ttl
	}
	return nil
}

func (x *DeviceSession) GetExpireTime() *timestamppb.Timestamp {
	if x, ok := x.GetExpiration().(*DeviceSession_ExpireTime); ok {
		return x.ExpireTime
	}
	return nil
}

func (x *DeviceSession) GetInactivityTimeout() *durationpb.Duration {
	if x != nil {
		return x.InactivityTimeout
	}
	return nil
}

func (x *DeviceSession) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *DeviceSession) GetActiveStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ActiveStartTime
	}
	return nil
}

func (x *DeviceSession) GetAndroidDevice() *AndroidDevice {
	if x != nil {
		return x.AndroidDevice
	}
	return nil
}

type isDeviceSession_Expiration interface {
	isDeviceSession_Expiration()
}

type DeviceSession_Ttl struct {
	// Optional. The amount of time that a device will be initially allocated
	// for. This can eventually be extended with the UpdateDeviceSession RPC.
	// Default: 15 minutes.
	Ttl *durationpb.Duration `protobuf:"bytes,13,opt,name=ttl,proto3,oneof"`
}

type DeviceSession_ExpireTime struct {
	// Optional. If the device is still in use at this time, any connections
	// will be ended and the SessionState will transition from ACTIVE to
	// FINISHED.
	ExpireTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=expire_time,json=expireTime,proto3,oneof"`
}

func (*DeviceSession_Ttl) isDeviceSession_Expiration() {}

func (*DeviceSession_ExpireTime) isDeviceSession_Expiration() {}

// A single Android device.
type AndroidDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The id of the Android device to be used.
	// Use the TestEnvironmentDiscoveryService to get supported options.
	AndroidModelId string `protobuf:"bytes,1,opt,name=android_model_id,json=androidModelId,proto3" json:"android_model_id,omitempty"`
	// Required. The id of the Android OS version to be used.
	// Use the TestEnvironmentDiscoveryService to get supported options.
	AndroidVersionId string `protobuf:"bytes,2,opt,name=android_version_id,json=androidVersionId,proto3" json:"android_version_id,omitempty"`
	// Optional. The locale the test device used for testing.
	// Use the TestEnvironmentDiscoveryService to get supported options.
	Locale string `protobuf:"bytes,3,opt,name=locale,proto3" json:"locale,omitempty"`
	// Optional. How the device is oriented during the test.
	// Use the TestEnvironmentDiscoveryService to get supported options.
	Orientation string `protobuf:"bytes,4,opt,name=orientation,proto3" json:"orientation,omitempty"`
}

func (x *AndroidDevice) Reset() {
	*x = AndroidDevice{}
	mi := &file_google_cloud_devicestreaming_v1_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AndroidDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidDevice) ProtoMessage() {}

func (x *AndroidDevice) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_devicestreaming_v1_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidDevice.ProtoReflect.Descriptor instead.
func (*AndroidDevice) Descriptor() ([]byte, []int) {
	return file_google_cloud_devicestreaming_v1_service_proto_rawDescGZIP(), []int{7}
}

func (x *AndroidDevice) GetAndroidModelId() string {
	if x != nil {
		return x.AndroidModelId
	}
	return ""
}

func (x *AndroidDevice) GetAndroidVersionId() string {
	if x != nil {
		return x.AndroidVersionId
	}
	return ""
}

func (x *AndroidDevice) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *AndroidDevice) GetOrientation() string {
	if x != nil {
		return x.Orientation
	}
	return ""
}

// A message encapsulating a series of Session states and the time that the
// DeviceSession first entered those states.
type DeviceSession_SessionStateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The session_state tracked by this event
	SessionState DeviceSession_SessionState `protobuf:"varint,1,opt,name=session_state,json=sessionState,proto3,enum=google.cloud.devicestreaming.v1.DeviceSession_SessionState" json:"session_state,omitempty"`
	// Output only. The time that the session_state first encountered that
	// state.
	EventTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`
	// Output only. A human-readable message to explain the state.
	StateMessage string `protobuf:"bytes,3,opt,name=state_message,json=stateMessage,proto3" json:"state_message,omitempty"`
}

func (x *DeviceSession_SessionStateEvent) Reset() {
	*x = DeviceSession_SessionStateEvent{}
	mi := &file_google_cloud_devicestreaming_v1_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceSession_SessionStateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceSession_SessionStateEvent) ProtoMessage() {}

func (x *DeviceSession_SessionStateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_devicestreaming_v1_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceSession_SessionStateEvent.ProtoReflect.Descriptor instead.
func (*DeviceSession_SessionStateEvent) Descriptor() ([]byte, []int) {
	return file_google_cloud_devicestreaming_v1_service_proto_rawDescGZIP(), []int{6, 0}
}

func (x *DeviceSession_SessionStateEvent) GetSessionState() DeviceSession_SessionState {
	if x != nil {
		return x.SessionState
	}
	return DeviceSession_SESSION_STATE_UNSPECIFIED
}

func (x *DeviceSession_SessionStateEvent) GetEventTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EventTime
	}
	return nil
}

func (x *DeviceSession_SessionStateEvent) GetStateMessage() string {
	if x != nil {
		return x.StateMessage
	}
	return ""
}

var File_google_cloud_devicestreaming_v1_service_proto protoreflect.FileDescriptor

var file_google_cloud_devicestreaming_v1_service_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x62, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf6, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2d, 0x0a, 0x2b, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f,
	0x0a, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0xcb, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0xe0,
	0x41, 0x02, 0xfa, 0x41, 0x2d, 0x0a, 0x2b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x1b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x9d, 0x01,
	0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x63, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2e, 0x0a, 0x2c,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x66, 0x0a, 0x1a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x48, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34,
	0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2e, 0x0a, 0x2c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xba, 0x01, 0x0a, 0x1a, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0xd6, 0x09, 0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x56, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x6e, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x32, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48,
	0x00, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x42, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x0a,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x12, 0x69, 0x6e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x11, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x11, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5a, 0x0a, 0x0e, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x1a, 0xe4, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x65, 0x0a, 0x0d, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0c, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x0c,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x19,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x04,
	0x12, 0x0c, 0x0a, 0x08, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0f,
	0x0a, 0x0b, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x06, 0x12,
	0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x07, 0x3a, 0x85, 0x01, 0xea, 0x41, 0x81,
	0x01, 0x0a, 0x2c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x32, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x7d, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x7b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x7d, 0x2a, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x32, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xb5, 0x01, 0x0a, 0x0d, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x2d, 0x0a, 0x10, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x31, 0x0a, 0x12, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x10, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x65, 0x12, 0x25, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x6f, 0x72, 0x69,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0xe0, 0x09, 0x0a, 0x13, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0xec, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x68, 0xda, 0x41, 0x27, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x2c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2c,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x3a, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x7d,
	0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0xc6, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x37, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28,
	0x12, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xb3, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x35, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x12, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xa4,
	0x01, 0x0a, 0x13, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x38, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x32, 0x3a, 0x01, 0x2a, 0x22, 0x2d, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0xee, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x6a, 0xda, 0x41, 0x1a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2c, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x47, 0x3a,
	0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x32,
	0x35, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x6f, 0x0a, 0x0a, 0x41, 0x64, 0x62, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x12, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x1a, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x1a, 0x52, 0xca, 0x41, 0x1e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x2e, 0x68, 0x74, 0x74,
	0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0xed, 0x01, 0x0a, 0x23,
	0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x42, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x4d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x70, 0x62,
	0x3b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x70, 0x62, 0xaa, 0x02, 0x1f, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x1f, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5c, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x5c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x5c, 0x56, 0x31, 0xea, 0x02, 0x22, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a,
	0x3a, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_devicestreaming_v1_service_proto_rawDescOnce sync.Once
	file_google_cloud_devicestreaming_v1_service_proto_rawDescData = file_google_cloud_devicestreaming_v1_service_proto_rawDesc
)

func file_google_cloud_devicestreaming_v1_service_proto_rawDescGZIP() []byte {
	file_google_cloud_devicestreaming_v1_service_proto_rawDescOnce.Do(func() {
		file_google_cloud_devicestreaming_v1_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_devicestreaming_v1_service_proto_rawDescData)
	})
	return file_google_cloud_devicestreaming_v1_service_proto_rawDescData
}

var file_google_cloud_devicestreaming_v1_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_google_cloud_devicestreaming_v1_service_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_google_cloud_devicestreaming_v1_service_proto_goTypes = []any{
	(DeviceSession_SessionState)(0),         // 0: google.cloud.devicestreaming.v1.DeviceSession.SessionState
	(*CreateDeviceSessionRequest)(nil),      // 1: google.cloud.devicestreaming.v1.CreateDeviceSessionRequest
	(*ListDeviceSessionsRequest)(nil),       // 2: google.cloud.devicestreaming.v1.ListDeviceSessionsRequest
	(*ListDeviceSessionsResponse)(nil),      // 3: google.cloud.devicestreaming.v1.ListDeviceSessionsResponse
	(*GetDeviceSessionRequest)(nil),         // 4: google.cloud.devicestreaming.v1.GetDeviceSessionRequest
	(*CancelDeviceSessionRequest)(nil),      // 5: google.cloud.devicestreaming.v1.CancelDeviceSessionRequest
	(*UpdateDeviceSessionRequest)(nil),      // 6: google.cloud.devicestreaming.v1.UpdateDeviceSessionRequest
	(*DeviceSession)(nil),                   // 7: google.cloud.devicestreaming.v1.DeviceSession
	(*AndroidDevice)(nil),                   // 8: google.cloud.devicestreaming.v1.AndroidDevice
	(*DeviceSession_SessionStateEvent)(nil), // 9: google.cloud.devicestreaming.v1.DeviceSession.SessionStateEvent
	(*fieldmaskpb.FieldMask)(nil),           // 10: google.protobuf.FieldMask
	(*durationpb.Duration)(nil),             // 11: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),           // 12: google.protobuf.Timestamp
	(*AdbMessage)(nil),                      // 13: google.cloud.devicestreaming.v1.AdbMessage
	(*emptypb.Empty)(nil),                   // 14: google.protobuf.Empty
	(*DeviceMessage)(nil),                   // 15: google.cloud.devicestreaming.v1.DeviceMessage
}
var file_google_cloud_devicestreaming_v1_service_proto_depIdxs = []int32{
	7,  // 0: google.cloud.devicestreaming.v1.CreateDeviceSessionRequest.device_session:type_name -> google.cloud.devicestreaming.v1.DeviceSession
	7,  // 1: google.cloud.devicestreaming.v1.ListDeviceSessionsResponse.device_sessions:type_name -> google.cloud.devicestreaming.v1.DeviceSession
	7,  // 2: google.cloud.devicestreaming.v1.UpdateDeviceSessionRequest.device_session:type_name -> google.cloud.devicestreaming.v1.DeviceSession
	10, // 3: google.cloud.devicestreaming.v1.UpdateDeviceSessionRequest.update_mask:type_name -> google.protobuf.FieldMask
	0,  // 4: google.cloud.devicestreaming.v1.DeviceSession.state:type_name -> google.cloud.devicestreaming.v1.DeviceSession.SessionState
	9,  // 5: google.cloud.devicestreaming.v1.DeviceSession.state_histories:type_name -> google.cloud.devicestreaming.v1.DeviceSession.SessionStateEvent
	11, // 6: google.cloud.devicestreaming.v1.DeviceSession.ttl:type_name -> google.protobuf.Duration
	12, // 7: google.cloud.devicestreaming.v1.DeviceSession.expire_time:type_name -> google.protobuf.Timestamp
	11, // 8: google.cloud.devicestreaming.v1.DeviceSession.inactivity_timeout:type_name -> google.protobuf.Duration
	12, // 9: google.cloud.devicestreaming.v1.DeviceSession.create_time:type_name -> google.protobuf.Timestamp
	12, // 10: google.cloud.devicestreaming.v1.DeviceSession.active_start_time:type_name -> google.protobuf.Timestamp
	8,  // 11: google.cloud.devicestreaming.v1.DeviceSession.android_device:type_name -> google.cloud.devicestreaming.v1.AndroidDevice
	0,  // 12: google.cloud.devicestreaming.v1.DeviceSession.SessionStateEvent.session_state:type_name -> google.cloud.devicestreaming.v1.DeviceSession.SessionState
	12, // 13: google.cloud.devicestreaming.v1.DeviceSession.SessionStateEvent.event_time:type_name -> google.protobuf.Timestamp
	1,  // 14: google.cloud.devicestreaming.v1.DirectAccessService.CreateDeviceSession:input_type -> google.cloud.devicestreaming.v1.CreateDeviceSessionRequest
	2,  // 15: google.cloud.devicestreaming.v1.DirectAccessService.ListDeviceSessions:input_type -> google.cloud.devicestreaming.v1.ListDeviceSessionsRequest
	4,  // 16: google.cloud.devicestreaming.v1.DirectAccessService.GetDeviceSession:input_type -> google.cloud.devicestreaming.v1.GetDeviceSessionRequest
	5,  // 17: google.cloud.devicestreaming.v1.DirectAccessService.CancelDeviceSession:input_type -> google.cloud.devicestreaming.v1.CancelDeviceSessionRequest
	6,  // 18: google.cloud.devicestreaming.v1.DirectAccessService.UpdateDeviceSession:input_type -> google.cloud.devicestreaming.v1.UpdateDeviceSessionRequest
	13, // 19: google.cloud.devicestreaming.v1.DirectAccessService.AdbConnect:input_type -> google.cloud.devicestreaming.v1.AdbMessage
	7,  // 20: google.cloud.devicestreaming.v1.DirectAccessService.CreateDeviceSession:output_type -> google.cloud.devicestreaming.v1.DeviceSession
	3,  // 21: google.cloud.devicestreaming.v1.DirectAccessService.ListDeviceSessions:output_type -> google.cloud.devicestreaming.v1.ListDeviceSessionsResponse
	7,  // 22: google.cloud.devicestreaming.v1.DirectAccessService.GetDeviceSession:output_type -> google.cloud.devicestreaming.v1.DeviceSession
	14, // 23: google.cloud.devicestreaming.v1.DirectAccessService.CancelDeviceSession:output_type -> google.protobuf.Empty
	7,  // 24: google.cloud.devicestreaming.v1.DirectAccessService.UpdateDeviceSession:output_type -> google.cloud.devicestreaming.v1.DeviceSession
	15, // 25: google.cloud.devicestreaming.v1.DirectAccessService.AdbConnect:output_type -> google.cloud.devicestreaming.v1.DeviceMessage
	20, // [20:26] is the sub-list for method output_type
	14, // [14:20] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_google_cloud_devicestreaming_v1_service_proto_init() }
func file_google_cloud_devicestreaming_v1_service_proto_init() {
	if File_google_cloud_devicestreaming_v1_service_proto != nil {
		return
	}
	file_google_cloud_devicestreaming_v1_adb_service_proto_init()
	file_google_cloud_devicestreaming_v1_service_proto_msgTypes[6].OneofWrappers = []any{
		(*DeviceSession_Ttl)(nil),
		(*DeviceSession_ExpireTime)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_devicestreaming_v1_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_google_cloud_devicestreaming_v1_service_proto_goTypes,
		DependencyIndexes: file_google_cloud_devicestreaming_v1_service_proto_depIdxs,
		EnumInfos:         file_google_cloud_devicestreaming_v1_service_proto_enumTypes,
		MessageInfos:      file_google_cloud_devicestreaming_v1_service_proto_msgTypes,
	}.Build()
	File_google_cloud_devicestreaming_v1_service_proto = out.File
	file_google_cloud_devicestreaming_v1_service_proto_rawDesc = nil
	file_google_cloud_devicestreaming_v1_service_proto_goTypes = nil
	file_google_cloud_devicestreaming_v1_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DirectAccessServiceClient is the client API for DirectAccessService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DirectAccessServiceClient interface {
	// Creates a DeviceSession.
	CreateDeviceSession(ctx context.Context, in *CreateDeviceSessionRequest, opts ...grpc.CallOption) (*DeviceSession, error)
	// Lists DeviceSessions owned by the project user.
	ListDeviceSessions(ctx context.Context, in *ListDeviceSessionsRequest, opts ...grpc.CallOption) (*ListDeviceSessionsResponse, error)
	// Gets a DeviceSession, which documents the allocation status and
	// whether the device is allocated. Clients making requests from this API
	// must poll GetDeviceSession.
	GetDeviceSession(ctx context.Context, in *GetDeviceSessionRequest, opts ...grpc.CallOption) (*DeviceSession, error)
	// Cancel a DeviceSession.
	// This RPC changes the DeviceSession to state FINISHED and terminates all
	// connections.
	// Canceled sessions are not deleted and can be retrieved or
	// listed by the user until they expire based on the 28 day deletion policy.
	CancelDeviceSession(ctx context.Context, in *CancelDeviceSessionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Updates the current DeviceSession to the fields described by the
	// update_mask.
	UpdateDeviceSession(ctx context.Context, in *UpdateDeviceSessionRequest, opts ...grpc.CallOption) (*DeviceSession, error)
	// Exposes an ADB connection if the device supports ADB.
	// gRPC headers are used to authenticate the Connect RPC, as well as
	// associate to a particular DeviceSession.
	// In particular, the user must specify the "X-Omnilab-Session-Name" header.
	AdbConnect(ctx context.Context, opts ...grpc.CallOption) (DirectAccessService_AdbConnectClient, error)
}

type directAccessServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDirectAccessServiceClient(cc grpc.ClientConnInterface) DirectAccessServiceClient {
	return &directAccessServiceClient{cc}
}

func (c *directAccessServiceClient) CreateDeviceSession(ctx context.Context, in *CreateDeviceSessionRequest, opts ...grpc.CallOption) (*DeviceSession, error) {
	out := new(DeviceSession)
	err := c.cc.Invoke(ctx, "/google.cloud.devicestreaming.v1.DirectAccessService/CreateDeviceSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directAccessServiceClient) ListDeviceSessions(ctx context.Context, in *ListDeviceSessionsRequest, opts ...grpc.CallOption) (*ListDeviceSessionsResponse, error) {
	out := new(ListDeviceSessionsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.devicestreaming.v1.DirectAccessService/ListDeviceSessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directAccessServiceClient) GetDeviceSession(ctx context.Context, in *GetDeviceSessionRequest, opts ...grpc.CallOption) (*DeviceSession, error) {
	out := new(DeviceSession)
	err := c.cc.Invoke(ctx, "/google.cloud.devicestreaming.v1.DirectAccessService/GetDeviceSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directAccessServiceClient) CancelDeviceSession(ctx context.Context, in *CancelDeviceSessionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/google.cloud.devicestreaming.v1.DirectAccessService/CancelDeviceSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directAccessServiceClient) UpdateDeviceSession(ctx context.Context, in *UpdateDeviceSessionRequest, opts ...grpc.CallOption) (*DeviceSession, error) {
	out := new(DeviceSession)
	err := c.cc.Invoke(ctx, "/google.cloud.devicestreaming.v1.DirectAccessService/UpdateDeviceSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directAccessServiceClient) AdbConnect(ctx context.Context, opts ...grpc.CallOption) (DirectAccessService_AdbConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DirectAccessService_serviceDesc.Streams[0], "/google.cloud.devicestreaming.v1.DirectAccessService/AdbConnect", opts...)
	if err != nil {
		return nil, err
	}
	x := &directAccessServiceAdbConnectClient{stream}
	return x, nil
}

type DirectAccessService_AdbConnectClient interface {
	Send(*AdbMessage) error
	Recv() (*DeviceMessage, error)
	grpc.ClientStream
}

type directAccessServiceAdbConnectClient struct {
	grpc.ClientStream
}

func (x *directAccessServiceAdbConnectClient) Send(m *AdbMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *directAccessServiceAdbConnectClient) Recv() (*DeviceMessage, error) {
	m := new(DeviceMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DirectAccessServiceServer is the server API for DirectAccessService service.
type DirectAccessServiceServer interface {
	// Creates a DeviceSession.
	CreateDeviceSession(context.Context, *CreateDeviceSessionRequest) (*DeviceSession, error)
	// Lists DeviceSessions owned by the project user.
	ListDeviceSessions(context.Context, *ListDeviceSessionsRequest) (*ListDeviceSessionsResponse, error)
	// Gets a DeviceSession, which documents the allocation status and
	// whether the device is allocated. Clients making requests from this API
	// must poll GetDeviceSession.
	GetDeviceSession(context.Context, *GetDeviceSessionRequest) (*DeviceSession, error)
	// Cancel a DeviceSession.
	// This RPC changes the DeviceSession to state FINISHED and terminates all
	// connections.
	// Canceled sessions are not deleted and can be retrieved or
	// listed by the user until they expire based on the 28 day deletion policy.
	CancelDeviceSession(context.Context, *CancelDeviceSessionRequest) (*emptypb.Empty, error)
	// Updates the current DeviceSession to the fields described by the
	// update_mask.
	UpdateDeviceSession(context.Context, *UpdateDeviceSessionRequest) (*DeviceSession, error)
	// Exposes an ADB connection if the device supports ADB.
	// gRPC headers are used to authenticate the Connect RPC, as well as
	// associate to a particular DeviceSession.
	// In particular, the user must specify the "X-Omnilab-Session-Name" header.
	AdbConnect(DirectAccessService_AdbConnectServer) error
}

// UnimplementedDirectAccessServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDirectAccessServiceServer struct {
}

func (*UnimplementedDirectAccessServiceServer) CreateDeviceSession(context.Context, *CreateDeviceSessionRequest) (*DeviceSession, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeviceSession not implemented")
}
func (*UnimplementedDirectAccessServiceServer) ListDeviceSessions(context.Context, *ListDeviceSessionsRequest) (*ListDeviceSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeviceSessions not implemented")
}
func (*UnimplementedDirectAccessServiceServer) GetDeviceSession(context.Context, *GetDeviceSessionRequest) (*DeviceSession, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceSession not implemented")
}
func (*UnimplementedDirectAccessServiceServer) CancelDeviceSession(context.Context, *CancelDeviceSessionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelDeviceSession not implemented")
}
func (*UnimplementedDirectAccessServiceServer) UpdateDeviceSession(context.Context, *UpdateDeviceSessionRequest) (*DeviceSession, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeviceSession not implemented")
}
func (*UnimplementedDirectAccessServiceServer) AdbConnect(DirectAccessService_AdbConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method AdbConnect not implemented")
}

func RegisterDirectAccessServiceServer(s *grpc.Server, srv DirectAccessServiceServer) {
	s.RegisterService(&_DirectAccessService_serviceDesc, srv)
}

func _DirectAccessService_CreateDeviceSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectAccessServiceServer).CreateDeviceSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.devicestreaming.v1.DirectAccessService/CreateDeviceSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectAccessServiceServer).CreateDeviceSession(ctx, req.(*CreateDeviceSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectAccessService_ListDeviceSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeviceSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectAccessServiceServer).ListDeviceSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.devicestreaming.v1.DirectAccessService/ListDeviceSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectAccessServiceServer).ListDeviceSessions(ctx, req.(*ListDeviceSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectAccessService_GetDeviceSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectAccessServiceServer).GetDeviceSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.devicestreaming.v1.DirectAccessService/GetDeviceSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectAccessServiceServer).GetDeviceSession(ctx, req.(*GetDeviceSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectAccessService_CancelDeviceSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelDeviceSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectAccessServiceServer).CancelDeviceSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.devicestreaming.v1.DirectAccessService/CancelDeviceSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectAccessServiceServer).CancelDeviceSession(ctx, req.(*CancelDeviceSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectAccessService_UpdateDeviceSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectAccessServiceServer).UpdateDeviceSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.devicestreaming.v1.DirectAccessService/UpdateDeviceSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectAccessServiceServer).UpdateDeviceSession(ctx, req.(*UpdateDeviceSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectAccessService_AdbConnect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DirectAccessServiceServer).AdbConnect(&directAccessServiceAdbConnectServer{stream})
}

type DirectAccessService_AdbConnectServer interface {
	Send(*DeviceMessage) error
	Recv() (*AdbMessage, error)
	grpc.ServerStream
}

type directAccessServiceAdbConnectServer struct {
	grpc.ServerStream
}

func (x *directAccessServiceAdbConnectServer) Send(m *DeviceMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *directAccessServiceAdbConnectServer) Recv() (*AdbMessage, error) {
	m := new(AdbMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _DirectAccessService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.devicestreaming.v1.DirectAccessService",
	HandlerType: (*DirectAccessServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDeviceSession",
			Handler:    _DirectAccessService_CreateDeviceSession_Handler,
		},
		{
			MethodName: "ListDeviceSessions",
			Handler:    _DirectAccessService_ListDeviceSessions_Handler,
		},
		{
			MethodName: "GetDeviceSession",
			Handler:    _DirectAccessService_GetDeviceSession_Handler,
		},
		{
			MethodName: "CancelDeviceSession",
			Handler:    _DirectAccessService_CancelDeviceSession_Handler,
		},
		{
			MethodName: "UpdateDeviceSession",
			Handler:    _DirectAccessService_UpdateDeviceSession_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AdbConnect",
			Handler:       _DirectAccessService_AdbConnect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "google/cloud/devicestreaming/v1/service.proto",
}
