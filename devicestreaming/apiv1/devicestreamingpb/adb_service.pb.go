// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.3
// source: google/cloud/devicestreaming/v1/adb_service.proto

package devicestreamingpb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The state displayed with the ADB Device when running "adb devices"
type StatusUpdate_DeviceState int32

const (
	// The device state is unknown.
	StatusUpdate_DEVICE_STATE_UNSPECIFIED StatusUpdate_DeviceState = 0
	// The ADB device is in the "device" status.
	StatusUpdate_DEVICE StatusUpdate_DeviceState = 1
	// The ADB device is in the "recovery" status.
	StatusUpdate_RECOVERY StatusUpdate_DeviceState = 2
	// The ADB device is in the "rescue" status.
	StatusUpdate_RESCUE StatusUpdate_DeviceState = 3
	// The ADB device is in the "sideload" status.
	StatusUpdate_SIDELOAD StatusUpdate_DeviceState = 4
	// The ADB device is in the "missing" status.
	StatusUpdate_MISSING StatusUpdate_DeviceState = 10
	// The ADB device is in the "offline" status.
	StatusUpdate_OFFLINE StatusUpdate_DeviceState = 11
	// The ADB device is in the "unauthorized" status.
	StatusUpdate_UNAUTHORIZED StatusUpdate_DeviceState = 12
	// The ADB device is in the "authorizing" status.
	StatusUpdate_AUTHORIZING StatusUpdate_DeviceState = 13
	// The ADB device is in the "connecting" status.
	StatusUpdate_CONNECTING StatusUpdate_DeviceState = 14
)

// Enum value maps for StatusUpdate_DeviceState.
var (
	StatusUpdate_DeviceState_name = map[int32]string{
		0:  "DEVICE_STATE_UNSPECIFIED",
		1:  "DEVICE",
		2:  "RECOVERY",
		3:  "RESCUE",
		4:  "SIDELOAD",
		10: "MISSING",
		11: "OFFLINE",
		12: "UNAUTHORIZED",
		13: "AUTHORIZING",
		14: "CONNECTING",
	}
	StatusUpdate_DeviceState_value = map[string]int32{
		"DEVICE_STATE_UNSPECIFIED": 0,
		"DEVICE":                   1,
		"RECOVERY":                 2,
		"RESCUE":                   3,
		"SIDELOAD":                 4,
		"MISSING":                  10,
		"OFFLINE":                  11,
		"UNAUTHORIZED":             12,
		"AUTHORIZING":              13,
		"CONNECTING":               14,
	}
)

func (x StatusUpdate_DeviceState) Enum() *StatusUpdate_DeviceState {
	p := new(StatusUpdate_DeviceState)
	*p = x
	return p
}

func (x StatusUpdate_DeviceState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusUpdate_DeviceState) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_devicestreaming_v1_adb_service_proto_enumTypes[0].Descriptor()
}

func (StatusUpdate_DeviceState) Type() protoreflect.EnumType {
	return &file_google_cloud_devicestreaming_v1_adb_service_proto_enumTypes[0]
}

func (x StatusUpdate_DeviceState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatusUpdate_DeviceState.Descriptor instead.
func (StatusUpdate_DeviceState) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_devicestreaming_v1_adb_service_proto_rawDescGZIP(), []int{2, 0}
}

// A message returned from a device.
type DeviceMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Contents:
	//
	//	*DeviceMessage_StatusUpdate
	//	*DeviceMessage_StreamStatus
	//	*DeviceMessage_StreamData
	Contents isDeviceMessage_Contents `protobuf_oneof:"contents"`
}

func (x *DeviceMessage) Reset() {
	*x = DeviceMessage{}
	mi := &file_google_cloud_devicestreaming_v1_adb_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceMessage) ProtoMessage() {}

func (x *DeviceMessage) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_devicestreaming_v1_adb_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceMessage.ProtoReflect.Descriptor instead.
func (*DeviceMessage) Descriptor() ([]byte, []int) {
	return file_google_cloud_devicestreaming_v1_adb_service_proto_rawDescGZIP(), []int{0}
}

func (m *DeviceMessage) GetContents() isDeviceMessage_Contents {
	if m != nil {
		return m.Contents
	}
	return nil
}

func (x *DeviceMessage) GetStatusUpdate() *StatusUpdate {
	if x, ok := x.GetContents().(*DeviceMessage_StatusUpdate); ok {
		return x.StatusUpdate
	}
	return nil
}

func (x *DeviceMessage) GetStreamStatus() *StreamStatus {
	if x, ok := x.GetContents().(*DeviceMessage_StreamStatus); ok {
		return x.StreamStatus
	}
	return nil
}

func (x *DeviceMessage) GetStreamData() *StreamData {
	if x, ok := x.GetContents().(*DeviceMessage_StreamData); ok {
		return x.StreamData
	}
	return nil
}

type isDeviceMessage_Contents interface {
	isDeviceMessage_Contents()
}

type DeviceMessage_StatusUpdate struct {
	// Information about the device's state.
	StatusUpdate *StatusUpdate `protobuf:"bytes,1,opt,name=status_update,json=statusUpdate,proto3,oneof"`
}

type DeviceMessage_StreamStatus struct {
	// The result of a device stream from ADB.
	StreamStatus *StreamStatus `protobuf:"bytes,2,opt,name=stream_status,json=streamStatus,proto3,oneof"`
}

type DeviceMessage_StreamData struct {
	// Data from an open stream.
	StreamData *StreamData `protobuf:"bytes,3,opt,name=stream_data,json=streamData,proto3,oneof"`
}

func (*DeviceMessage_StatusUpdate) isDeviceMessage_Contents() {}

func (*DeviceMessage_StreamStatus) isDeviceMessage_Contents() {}

func (*DeviceMessage_StreamData) isDeviceMessage_Contents() {}

// A message to an ADB server.
type AdbMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Contents:
	//
	//	*AdbMessage_Open
	//	*AdbMessage_StreamData
	Contents isAdbMessage_Contents `protobuf_oneof:"contents"`
}

func (x *AdbMessage) Reset() {
	*x = AdbMessage{}
	mi := &file_google_cloud_devicestreaming_v1_adb_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdbMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdbMessage) ProtoMessage() {}

func (x *AdbMessage) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_devicestreaming_v1_adb_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdbMessage.ProtoReflect.Descriptor instead.
func (*AdbMessage) Descriptor() ([]byte, []int) {
	return file_google_cloud_devicestreaming_v1_adb_service_proto_rawDescGZIP(), []int{1}
}

func (m *AdbMessage) GetContents() isAdbMessage_Contents {
	if m != nil {
		return m.Contents
	}
	return nil
}

func (x *AdbMessage) GetOpen() *Open {
	if x, ok := x.GetContents().(*AdbMessage_Open); ok {
		return x.Open
	}
	return nil
}

func (x *AdbMessage) GetStreamData() *StreamData {
	if x, ok := x.GetContents().(*AdbMessage_StreamData); ok {
		return x.StreamData
	}
	return nil
}

type isAdbMessage_Contents interface {
	isAdbMessage_Contents()
}

type AdbMessage_Open struct {
	// Open a new stream.
	Open *Open `protobuf:"bytes,1,opt,name=open,proto3,oneof"`
}

type AdbMessage_StreamData struct {
	// Send data to a stream.
	StreamData *StreamData `protobuf:"bytes,2,opt,name=stream_data,json=streamData,proto3,oneof"`
}

func (*AdbMessage_Open) isAdbMessage_Contents() {}

func (*AdbMessage_StreamData) isAdbMessage_Contents() {}

// A StatusUpdate message given over the ADB protocol for the device state.
type StatusUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The device's state
	State StatusUpdate_DeviceState `protobuf:"varint,1,opt,name=state,proto3,enum=google.cloud.devicestreaming.v1.StatusUpdate_DeviceState" json:"state,omitempty"`
	// A map of properties with information about this device.
	Properties map[string]string `protobuf:"bytes,2,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// A comma-separated list of "features" that this device supports.
	Features string `protobuf:"bytes,3,opt,name=features,proto3" json:"features,omitempty"`
}

func (x *StatusUpdate) Reset() {
	*x = StatusUpdate{}
	mi := &file_google_cloud_devicestreaming_v1_adb_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusUpdate) ProtoMessage() {}

func (x *StatusUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_devicestreaming_v1_adb_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusUpdate.ProtoReflect.Descriptor instead.
func (*StatusUpdate) Descriptor() ([]byte, []int) {
	return file_google_cloud_devicestreaming_v1_adb_service_proto_rawDescGZIP(), []int{2}
}

func (x *StatusUpdate) GetState() StatusUpdate_DeviceState {
	if x != nil {
		return x.State
	}
	return StatusUpdate_DEVICE_STATE_UNSPECIFIED
}

func (x *StatusUpdate) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *StatusUpdate) GetFeatures() string {
	if x != nil {
		return x.Features
	}
	return ""
}

// The result of a stream.
type StreamStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique ID of this stream, assigned by the client.
	StreamId int32 `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	// The result of the stream. Either "Okay" for success or "Fail" for failure.
	//
	// Types that are assignable to Status:
	//
	//	*StreamStatus_Okay
	//	*StreamStatus_Fail
	Status isStreamStatus_Status `protobuf_oneof:"status"`
}

func (x *StreamStatus) Reset() {
	*x = StreamStatus{}
	mi := &file_google_cloud_devicestreaming_v1_adb_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamStatus) ProtoMessage() {}

func (x *StreamStatus) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_devicestreaming_v1_adb_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamStatus.ProtoReflect.Descriptor instead.
func (*StreamStatus) Descriptor() ([]byte, []int) {
	return file_google_cloud_devicestreaming_v1_adb_service_proto_rawDescGZIP(), []int{3}
}

func (x *StreamStatus) GetStreamId() int32 {
	if x != nil {
		return x.StreamId
	}
	return 0
}

func (m *StreamStatus) GetStatus() isStreamStatus_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (x *StreamStatus) GetOkay() *Okay {
	if x, ok := x.GetStatus().(*StreamStatus_Okay); ok {
		return x.Okay
	}
	return nil
}

func (x *StreamStatus) GetFail() *Fail {
	if x, ok := x.GetStatus().(*StreamStatus_Fail); ok {
		return x.Fail
	}
	return nil
}

type isStreamStatus_Status interface {
	isStreamStatus_Status()
}

type StreamStatus_Okay struct {
	// Okay for success.
	Okay *Okay `protobuf:"bytes,2,opt,name=okay,proto3,oneof"`
}

type StreamStatus_Fail struct {
	// Fail for failure.
	Fail *Fail `protobuf:"bytes,3,opt,name=fail,proto3,oneof"`
}

func (*StreamStatus_Okay) isStreamStatus_Status() {}

func (*StreamStatus_Fail) isStreamStatus_Status() {}

// Message for opening a new stream.
type Open struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The unique ID that will be used to talk to this stream. This
	// should probably just be a number that increments for each new Open request.
	StreamId int32 `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	// Optional. An ADB service to use in the new stream.
	Service string `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *Open) Reset() {
	*x = Open{}
	mi := &file_google_cloud_devicestreaming_v1_adb_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Open) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Open) ProtoMessage() {}

func (x *Open) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_devicestreaming_v1_adb_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Open.ProtoReflect.Descriptor instead.
func (*Open) Descriptor() ([]byte, []int) {
	return file_google_cloud_devicestreaming_v1_adb_service_proto_rawDescGZIP(), []int{4}
}

func (x *Open) GetStreamId() int32 {
	if x != nil {
		return x.StreamId
	}
	return 0
}

func (x *Open) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

// Data for a stream.
type StreamData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The unique ID of this stream, assigned by the client.
	StreamId int32 `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	// The data of the stream, either bytes or "Close", indicating that the stream
	// is done.
	//
	// Types that are assignable to Contents:
	//
	//	*StreamData_Data
	//	*StreamData_Close
	Contents isStreamData_Contents `protobuf_oneof:"contents"`
}

func (x *StreamData) Reset() {
	*x = StreamData{}
	mi := &file_google_cloud_devicestreaming_v1_adb_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamData) ProtoMessage() {}

func (x *StreamData) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_devicestreaming_v1_adb_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamData.ProtoReflect.Descriptor instead.
func (*StreamData) Descriptor() ([]byte, []int) {
	return file_google_cloud_devicestreaming_v1_adb_service_proto_rawDescGZIP(), []int{5}
}

func (x *StreamData) GetStreamId() int32 {
	if x != nil {
		return x.StreamId
	}
	return 0
}

func (m *StreamData) GetContents() isStreamData_Contents {
	if m != nil {
		return m.Contents
	}
	return nil
}

func (x *StreamData) GetData() []byte {
	if x, ok := x.GetContents().(*StreamData_Data); ok {
		return x.Data
	}
	return nil
}

func (x *StreamData) GetClose() *Close {
	if x, ok := x.GetContents().(*StreamData_Close); ok {
		return x.Close
	}
	return nil
}

type isStreamData_Contents interface {
	isStreamData_Contents()
}

type StreamData_Data struct {
	// Data in the stream.
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3,oneof"`
}

type StreamData_Close struct {
	// The stream is closing. EOF.
	Close *Close `protobuf:"bytes,3,opt,name=close,proto3,oneof"`
}

func (*StreamData_Data) isStreamData_Contents() {}

func (*StreamData_Close) isStreamData_Contents() {}

// Message signifying that the stream is open
type Okay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Okay) Reset() {
	*x = Okay{}
	mi := &file_google_cloud_devicestreaming_v1_adb_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Okay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Okay) ProtoMessage() {}

func (x *Okay) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_devicestreaming_v1_adb_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Okay.ProtoReflect.Descriptor instead.
func (*Okay) Descriptor() ([]byte, []int) {
	return file_google_cloud_devicestreaming_v1_adb_service_proto_rawDescGZIP(), []int{6}
}

// Message signifying that the stream failed to open
type Fail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A user-displayable failure reason.
	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *Fail) Reset() {
	*x = Fail{}
	mi := &file_google_cloud_devicestreaming_v1_adb_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Fail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fail) ProtoMessage() {}

func (x *Fail) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_devicestreaming_v1_adb_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fail.ProtoReflect.Descriptor instead.
func (*Fail) Descriptor() ([]byte, []int) {
	return file_google_cloud_devicestreaming_v1_adb_service_proto_rawDescGZIP(), []int{7}
}

func (x *Fail) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// Message signifying that the stream closed.
type Close struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Close) Reset() {
	*x = Close{}
	mi := &file_google_cloud_devicestreaming_v1_adb_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Close) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Close) ProtoMessage() {}

func (x *Close) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_devicestreaming_v1_adb_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Close.ProtoReflect.Descriptor instead.
func (*Close) Descriptor() ([]byte, []int) {
	return file_google_cloud_devicestreaming_v1_adb_service_proto_rawDescGZIP(), []int{8}
}

var File_google_cloud_devicestreaming_v1_adb_service_proto protoreflect.FileDescriptor

var file_google_cloud_devicestreaming_v1_adb_service_proto_rawDesc = []byte{
	0x0a, 0x31, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x64, 0x62, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x97, 0x02, 0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x54, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x54, 0x0a,
	0x0d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x4e, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x0a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0xa5, 0x01, 0x0a, 0x0a, 0x41, 0x64, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3b,
	0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x4e, 0x0a, 0x0b, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x42, 0x0a, 0x0a, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xc8, 0x03, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x4f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x5d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xac, 0x01, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x52,
	0x45, 0x53, 0x43, 0x55, 0x45, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x49, 0x44, 0x45, 0x4c,
	0x4f, 0x41, 0x44, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47,
	0x10, 0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x0b, 0x12,
	0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x0c, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x49, 0x4e, 0x47,
	0x10, 0x0d, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4e, 0x47,
	0x10, 0x0e, 0x22, 0xaf, 0x01, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x12, 0x3b, 0x0a, 0x04, 0x6f, 0x6b, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x6b, 0x61, 0x79, 0x48, 0x00, 0x52, 0x04, 0x6f, 0x6b, 0x61, 0x79, 0x12, 0x3b, 0x0a,
	0x04, 0x66, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61,
	0x69, 0x6c, 0x48, 0x00, 0x52, 0x04, 0x66, 0x61, 0x69, 0x6c, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x47, 0x0a, 0x04, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x09,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x90, 0x01,
	0x0a, 0x0a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x09,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x3e, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x48, 0x00, 0x52, 0x05, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0x06, 0x0a, 0x04, 0x4f, 0x6b, 0x61, 0x79, 0x22, 0x1e, 0x0a, 0x04, 0x46, 0x61, 0x69, 0x6c,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x07, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x42, 0xf0, 0x01, 0x0a, 0x23, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x42, 0x0f, 0x41, 0x64, 0x62, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4d, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67,
	0x6f, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x3b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x70, 0x62, 0xaa, 0x02, 0x1f, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x1f,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5c, 0x56, 0x31, 0xea,
	0x02, 0x22, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a,
	0x3a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_devicestreaming_v1_adb_service_proto_rawDescOnce sync.Once
	file_google_cloud_devicestreaming_v1_adb_service_proto_rawDescData = file_google_cloud_devicestreaming_v1_adb_service_proto_rawDesc
)

func file_google_cloud_devicestreaming_v1_adb_service_proto_rawDescGZIP() []byte {
	file_google_cloud_devicestreaming_v1_adb_service_proto_rawDescOnce.Do(func() {
		file_google_cloud_devicestreaming_v1_adb_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_devicestreaming_v1_adb_service_proto_rawDescData)
	})
	return file_google_cloud_devicestreaming_v1_adb_service_proto_rawDescData
}

var file_google_cloud_devicestreaming_v1_adb_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_google_cloud_devicestreaming_v1_adb_service_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_google_cloud_devicestreaming_v1_adb_service_proto_goTypes = []any{
	(StatusUpdate_DeviceState)(0), // 0: google.cloud.devicestreaming.v1.StatusUpdate.DeviceState
	(*DeviceMessage)(nil),         // 1: google.cloud.devicestreaming.v1.DeviceMessage
	(*AdbMessage)(nil),            // 2: google.cloud.devicestreaming.v1.AdbMessage
	(*StatusUpdate)(nil),          // 3: google.cloud.devicestreaming.v1.StatusUpdate
	(*StreamStatus)(nil),          // 4: google.cloud.devicestreaming.v1.StreamStatus
	(*Open)(nil),                  // 5: google.cloud.devicestreaming.v1.Open
	(*StreamData)(nil),            // 6: google.cloud.devicestreaming.v1.StreamData
	(*Okay)(nil),                  // 7: google.cloud.devicestreaming.v1.Okay
	(*Fail)(nil),                  // 8: google.cloud.devicestreaming.v1.Fail
	(*Close)(nil),                 // 9: google.cloud.devicestreaming.v1.Close
	nil,                           // 10: google.cloud.devicestreaming.v1.StatusUpdate.PropertiesEntry
}
var file_google_cloud_devicestreaming_v1_adb_service_proto_depIdxs = []int32{
	3,  // 0: google.cloud.devicestreaming.v1.DeviceMessage.status_update:type_name -> google.cloud.devicestreaming.v1.StatusUpdate
	4,  // 1: google.cloud.devicestreaming.v1.DeviceMessage.stream_status:type_name -> google.cloud.devicestreaming.v1.StreamStatus
	6,  // 2: google.cloud.devicestreaming.v1.DeviceMessage.stream_data:type_name -> google.cloud.devicestreaming.v1.StreamData
	5,  // 3: google.cloud.devicestreaming.v1.AdbMessage.open:type_name -> google.cloud.devicestreaming.v1.Open
	6,  // 4: google.cloud.devicestreaming.v1.AdbMessage.stream_data:type_name -> google.cloud.devicestreaming.v1.StreamData
	0,  // 5: google.cloud.devicestreaming.v1.StatusUpdate.state:type_name -> google.cloud.devicestreaming.v1.StatusUpdate.DeviceState
	10, // 6: google.cloud.devicestreaming.v1.StatusUpdate.properties:type_name -> google.cloud.devicestreaming.v1.StatusUpdate.PropertiesEntry
	7,  // 7: google.cloud.devicestreaming.v1.StreamStatus.okay:type_name -> google.cloud.devicestreaming.v1.Okay
	8,  // 8: google.cloud.devicestreaming.v1.StreamStatus.fail:type_name -> google.cloud.devicestreaming.v1.Fail
	9,  // 9: google.cloud.devicestreaming.v1.StreamData.close:type_name -> google.cloud.devicestreaming.v1.Close
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_google_cloud_devicestreaming_v1_adb_service_proto_init() }
func file_google_cloud_devicestreaming_v1_adb_service_proto_init() {
	if File_google_cloud_devicestreaming_v1_adb_service_proto != nil {
		return
	}
	file_google_cloud_devicestreaming_v1_adb_service_proto_msgTypes[0].OneofWrappers = []any{
		(*DeviceMessage_StatusUpdate)(nil),
		(*DeviceMessage_StreamStatus)(nil),
		(*DeviceMessage_StreamData)(nil),
	}
	file_google_cloud_devicestreaming_v1_adb_service_proto_msgTypes[1].OneofWrappers = []any{
		(*AdbMessage_Open)(nil),
		(*AdbMessage_StreamData)(nil),
	}
	file_google_cloud_devicestreaming_v1_adb_service_proto_msgTypes[3].OneofWrappers = []any{
		(*StreamStatus_Okay)(nil),
		(*StreamStatus_Fail)(nil),
	}
	file_google_cloud_devicestreaming_v1_adb_service_proto_msgTypes[5].OneofWrappers = []any{
		(*StreamData_Data)(nil),
		(*StreamData_Close)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_devicestreaming_v1_adb_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_cloud_devicestreaming_v1_adb_service_proto_goTypes,
		DependencyIndexes: file_google_cloud_devicestreaming_v1_adb_service_proto_depIdxs,
		EnumInfos:         file_google_cloud_devicestreaming_v1_adb_service_proto_enumTypes,
		MessageInfos:      file_google_cloud_devicestreaming_v1_adb_service_proto_msgTypes,
	}.Build()
	File_google_cloud_devicestreaming_v1_adb_service_proto = out.File
	file_google_cloud_devicestreaming_v1_adb_service_proto_rawDesc = nil
	file_google_cloud_devicestreaming_v1_adb_service_proto_goTypes = nil
	file_google_cloud_devicestreaming_v1_adb_service_proto_depIdxs = nil
}
