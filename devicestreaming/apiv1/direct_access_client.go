// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package devicestreaming

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"log/slog"
	"math"
	"net/http"
	"net/url"
	"time"

	devicestreamingpb "cloud.google.com/go/devicestreaming/apiv1/devicestreamingpb"
	gax "github.com/googleapis/gax-go/v2"
	"google.golang.org/api/iterator"
	"google.golang.org/api/option"
	"google.golang.org/api/option/internaloption"
	gtransport "google.golang.org/api/transport/grpc"
	httptransport "google.golang.org/api/transport/http"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
)

var newDirectAccessClientHook clientHook

// DirectAccessCallOptions contains the retry settings for each method of DirectAccessClient.
type DirectAccessCallOptions struct {
	CreateDeviceSession []gax.CallOption
	ListDeviceSessions  []gax.CallOption
	GetDeviceSession    []gax.CallOption
	CancelDeviceSession []gax.CallOption
	UpdateDeviceSession []gax.CallOption
	AdbConnect          []gax.CallOption
}

func defaultDirectAccessGRPCClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("devicestreaming.googleapis.com:443"),
		internaloption.WithDefaultEndpointTemplate("devicestreaming.UNIVERSE_DOMAIN:443"),
		internaloption.WithDefaultMTLSEndpoint("devicestreaming.mtls.googleapis.com:443"),
		internaloption.WithDefaultUniverseDomain("googleapis.com"),
		internaloption.WithDefaultAudience("https://devicestreaming.googleapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableJwtWithScope(),
		internaloption.EnableNewAuthLibrary(),
		option.WithGRPCDialOption(grpc.WithDefaultCallOptions(
			grpc.MaxCallRecvMsgSize(math.MaxInt32))),
	}
}

func defaultDirectAccessCallOptions() *DirectAccessCallOptions {
	return &DirectAccessCallOptions{
		CreateDeviceSession: []gax.CallOption{
			gax.WithTimeout(20000 * time.Millisecond),
		},
		ListDeviceSessions: []gax.CallOption{
			gax.WithTimeout(20000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		GetDeviceSession: []gax.CallOption{
			gax.WithTimeout(20000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		CancelDeviceSession: []gax.CallOption{
			gax.WithTimeout(20000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		UpdateDeviceSession: []gax.CallOption{
			gax.WithTimeout(20000 * time.Millisecond),
		},
		AdbConnect: []gax.CallOption{},
	}
}

func defaultDirectAccessRESTCallOptions() *DirectAccessCallOptions {
	return &DirectAccessCallOptions{
		CreateDeviceSession: []gax.CallOption{
			gax.WithTimeout(20000 * time.Millisecond),
		},
		ListDeviceSessions: []gax.CallOption{
			gax.WithTimeout(20000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnHTTPCodes(gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				},
					http.StatusServiceUnavailable)
			}),
		},
		GetDeviceSession: []gax.CallOption{
			gax.WithTimeout(20000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnHTTPCodes(gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				},
					http.StatusServiceUnavailable)
			}),
		},
		CancelDeviceSession: []gax.CallOption{
			gax.WithTimeout(20000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnHTTPCodes(gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				},
					http.StatusServiceUnavailable)
			}),
		},
		UpdateDeviceSession: []gax.CallOption{
			gax.WithTimeout(20000 * time.Millisecond),
		},
		AdbConnect: []gax.CallOption{
			gax.WithTimeout(1800000 * time.Millisecond),
		},
	}
}

// internalDirectAccessClient is an interface that defines the methods available from Device Streaming API.
type internalDirectAccessClient interface {
	Close() error
	setGoogleClientInfo(...string)
	Connection() *grpc.ClientConn
	CreateDeviceSession(context.Context, *devicestreamingpb.CreateDeviceSessionRequest, ...gax.CallOption) (*devicestreamingpb.DeviceSession, error)
	ListDeviceSessions(context.Context, *devicestreamingpb.ListDeviceSessionsRequest, ...gax.CallOption) *DeviceSessionIterator
	GetDeviceSession(context.Context, *devicestreamingpb.GetDeviceSessionRequest, ...gax.CallOption) (*devicestreamingpb.DeviceSession, error)
	CancelDeviceSession(context.Context, *devicestreamingpb.CancelDeviceSessionRequest, ...gax.CallOption) error
	UpdateDeviceSession(context.Context, *devicestreamingpb.UpdateDeviceSessionRequest, ...gax.CallOption) (*devicestreamingpb.DeviceSession, error)
	AdbConnect(context.Context, ...gax.CallOption) (devicestreamingpb.DirectAccessService_AdbConnectClient, error)
}

// DirectAccessClient is a client for interacting with Device Streaming API.
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
//
// A service for allocating Android devices and interacting with the
// live-allocated devices.
//
// Each Session will wait for available capacity, at a higher
// priority over Test Execution. When allocated, the session will be exposed
// through a stream for integration.
//
// DirectAccessService is currently available as a preview to select developers.
// You can register today on behalf of you and your team at
// https://developer.android.com/studio/preview/android-device-streaming (at https://developer.android.com/studio/preview/android-device-streaming)
type DirectAccessClient struct {
	// The internal transport-dependent client.
	internalClient internalDirectAccessClient

	// The call options for this service.
	CallOptions *DirectAccessCallOptions
}

// Wrapper methods routed to the internal client.

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *DirectAccessClient) Close() error {
	return c.internalClient.Close()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *DirectAccessClient) setGoogleClientInfo(keyval ...string) {
	c.internalClient.setGoogleClientInfo(keyval...)
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *DirectAccessClient) Connection() *grpc.ClientConn {
	return c.internalClient.Connection()
}

// CreateDeviceSession creates a DeviceSession.
func (c *DirectAccessClient) CreateDeviceSession(ctx context.Context, req *devicestreamingpb.CreateDeviceSessionRequest, opts ...gax.CallOption) (*devicestreamingpb.DeviceSession, error) {
	return c.internalClient.CreateDeviceSession(ctx, req, opts...)
}

// ListDeviceSessions lists DeviceSessions owned by the project user.
func (c *DirectAccessClient) ListDeviceSessions(ctx context.Context, req *devicestreamingpb.ListDeviceSessionsRequest, opts ...gax.CallOption) *DeviceSessionIterator {
	return c.internalClient.ListDeviceSessions(ctx, req, opts...)
}

// GetDeviceSession gets a DeviceSession, which documents the allocation status and
// whether the device is allocated. Clients making requests from this API
// must poll GetDeviceSession.
func (c *DirectAccessClient) GetDeviceSession(ctx context.Context, req *devicestreamingpb.GetDeviceSessionRequest, opts ...gax.CallOption) (*devicestreamingpb.DeviceSession, error) {
	return c.internalClient.GetDeviceSession(ctx, req, opts...)
}

// CancelDeviceSession cancel a DeviceSession.
// This RPC changes the DeviceSession to state FINISHED and terminates all
// connections.
// Canceled sessions are not deleted and can be retrieved or
// listed by the user until they expire based on the 28 day deletion policy.
func (c *DirectAccessClient) CancelDeviceSession(ctx context.Context, req *devicestreamingpb.CancelDeviceSessionRequest, opts ...gax.CallOption) error {
	return c.internalClient.CancelDeviceSession(ctx, req, opts...)
}

// UpdateDeviceSession updates the current DeviceSession to the fields described by the
// update_mask.
func (c *DirectAccessClient) UpdateDeviceSession(ctx context.Context, req *devicestreamingpb.UpdateDeviceSessionRequest, opts ...gax.CallOption) (*devicestreamingpb.DeviceSession, error) {
	return c.internalClient.UpdateDeviceSession(ctx, req, opts...)
}

// AdbConnect exposes an ADB connection if the device supports ADB.
// gRPC headers are used to authenticate the Connect RPC, as well as
// associate to a particular DeviceSession.
// In particular, the user must specify the “X-Omnilab-Session-Name” header.
//
// This method is not supported for the REST transport.
func (c *DirectAccessClient) AdbConnect(ctx context.Context, opts ...gax.CallOption) (devicestreamingpb.DirectAccessService_AdbConnectClient, error) {
	return c.internalClient.AdbConnect(ctx, opts...)
}

// directAccessGRPCClient is a client for interacting with Device Streaming API over gRPC transport.
//
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type directAccessGRPCClient struct {
	// Connection pool of gRPC connections to the service.
	connPool gtransport.ConnPool

	// Points back to the CallOptions field of the containing DirectAccessClient
	CallOptions **DirectAccessCallOptions

	// The gRPC API client.
	directAccessClient devicestreamingpb.DirectAccessServiceClient

	// The x-goog-* metadata to be sent with each request.
	xGoogHeaders []string

	logger *slog.Logger
}

// NewDirectAccessClient creates a new direct access service client based on gRPC.
// The returned client must be Closed when it is done being used to clean up its underlying connections.
//
// A service for allocating Android devices and interacting with the
// live-allocated devices.
//
// Each Session will wait for available capacity, at a higher
// priority over Test Execution. When allocated, the session will be exposed
// through a stream for integration.
//
// DirectAccessService is currently available as a preview to select developers.
// You can register today on behalf of you and your team at
// https://developer.android.com/studio/preview/android-device-streaming (at https://developer.android.com/studio/preview/android-device-streaming)
func NewDirectAccessClient(ctx context.Context, opts ...option.ClientOption) (*DirectAccessClient, error) {
	clientOpts := defaultDirectAccessGRPCClientOptions()
	if newDirectAccessClientHook != nil {
		hookOpts, err := newDirectAccessClientHook(ctx, clientHookParams{})
		if err != nil {
			return nil, err
		}
		clientOpts = append(clientOpts, hookOpts...)
	}

	connPool, err := gtransport.DialPool(ctx, append(clientOpts, opts...)...)
	if err != nil {
		return nil, err
	}
	client := DirectAccessClient{CallOptions: defaultDirectAccessCallOptions()}

	c := &directAccessGRPCClient{
		connPool:           connPool,
		directAccessClient: devicestreamingpb.NewDirectAccessServiceClient(connPool),
		CallOptions:        &client.CallOptions,
		logger:             internaloption.GetLogger(opts),
	}
	c.setGoogleClientInfo()

	client.internalClient = c

	return &client, nil
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *directAccessGRPCClient) Connection() *grpc.ClientConn {
	return c.connPool.Conn()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *directAccessGRPCClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", gax.GoVersion}, keyval...)
	kv = append(kv, "gapic", getVersionClient(), "gax", gax.Version, "grpc", grpc.Version)
	c.xGoogHeaders = []string{
		"x-goog-api-client", gax.XGoogHeader(kv...),
	}
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *directAccessGRPCClient) Close() error {
	return c.connPool.Close()
}

// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type directAccessRESTClient struct {
	// The http endpoint to connect to.
	endpoint string

	// The http client.
	httpClient *http.Client

	// The x-goog-* headers to be sent with each request.
	xGoogHeaders []string

	// Points back to the CallOptions field of the containing DirectAccessClient
	CallOptions **DirectAccessCallOptions

	logger *slog.Logger
}

// NewDirectAccessRESTClient creates a new direct access service rest client.
//
// A service for allocating Android devices and interacting with the
// live-allocated devices.
//
// Each Session will wait for available capacity, at a higher
// priority over Test Execution. When allocated, the session will be exposed
// through a stream for integration.
//
// DirectAccessService is currently available as a preview to select developers.
// You can register today on behalf of you and your team at
// https://developer.android.com/studio/preview/android-device-streaming (at https://developer.android.com/studio/preview/android-device-streaming)
func NewDirectAccessRESTClient(ctx context.Context, opts ...option.ClientOption) (*DirectAccessClient, error) {
	clientOpts := append(defaultDirectAccessRESTClientOptions(), opts...)
	httpClient, endpoint, err := httptransport.NewClient(ctx, clientOpts...)
	if err != nil {
		return nil, err
	}

	callOpts := defaultDirectAccessRESTCallOptions()
	c := &directAccessRESTClient{
		endpoint:    endpoint,
		httpClient:  httpClient,
		CallOptions: &callOpts,
		logger:      internaloption.GetLogger(opts),
	}
	c.setGoogleClientInfo()

	return &DirectAccessClient{internalClient: c, CallOptions: callOpts}, nil
}

func defaultDirectAccessRESTClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("https://devicestreaming.googleapis.com"),
		internaloption.WithDefaultEndpointTemplate("https://devicestreaming.UNIVERSE_DOMAIN"),
		internaloption.WithDefaultMTLSEndpoint("https://devicestreaming.mtls.googleapis.com"),
		internaloption.WithDefaultUniverseDomain("googleapis.com"),
		internaloption.WithDefaultAudience("https://devicestreaming.googleapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableNewAuthLibrary(),
	}
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *directAccessRESTClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", gax.GoVersion}, keyval...)
	kv = append(kv, "gapic", getVersionClient(), "gax", gax.Version, "rest", "UNKNOWN")
	c.xGoogHeaders = []string{
		"x-goog-api-client", gax.XGoogHeader(kv...),
	}
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *directAccessRESTClient) Close() error {
	// Replace httpClient with nil to force cleanup.
	c.httpClient = nil
	return nil
}

// Connection returns a connection to the API service.
//
// Deprecated: This method always returns nil.
func (c *directAccessRESTClient) Connection() *grpc.ClientConn {
	return nil
}
func (c *directAccessGRPCClient) CreateDeviceSession(ctx context.Context, req *devicestreamingpb.CreateDeviceSessionRequest, opts ...gax.CallOption) (*devicestreamingpb.DeviceSession, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).CreateDeviceSession[0:len((*c.CallOptions).CreateDeviceSession):len((*c.CallOptions).CreateDeviceSession)], opts...)
	var resp *devicestreamingpb.DeviceSession
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = executeRPC(ctx, c.directAccessClient.CreateDeviceSession, req, settings.GRPC, c.logger, "CreateDeviceSession")
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *directAccessGRPCClient) ListDeviceSessions(ctx context.Context, req *devicestreamingpb.ListDeviceSessionsRequest, opts ...gax.CallOption) *DeviceSessionIterator {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ListDeviceSessions[0:len((*c.CallOptions).ListDeviceSessions):len((*c.CallOptions).ListDeviceSessions)], opts...)
	it := &DeviceSessionIterator{}
	req = proto.Clone(req).(*devicestreamingpb.ListDeviceSessionsRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*devicestreamingpb.DeviceSession, string, error) {
		resp := &devicestreamingpb.ListDeviceSessionsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = executeRPC(ctx, c.directAccessClient.ListDeviceSessions, req, settings.GRPC, c.logger, "ListDeviceSessions")
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetDeviceSessions(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

func (c *directAccessGRPCClient) GetDeviceSession(ctx context.Context, req *devicestreamingpb.GetDeviceSessionRequest, opts ...gax.CallOption) (*devicestreamingpb.DeviceSession, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).GetDeviceSession[0:len((*c.CallOptions).GetDeviceSession):len((*c.CallOptions).GetDeviceSession)], opts...)
	var resp *devicestreamingpb.DeviceSession
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = executeRPC(ctx, c.directAccessClient.GetDeviceSession, req, settings.GRPC, c.logger, "GetDeviceSession")
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *directAccessGRPCClient) CancelDeviceSession(ctx context.Context, req *devicestreamingpb.CancelDeviceSessionRequest, opts ...gax.CallOption) error {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).CancelDeviceSession[0:len((*c.CallOptions).CancelDeviceSession):len((*c.CallOptions).CancelDeviceSession)], opts...)
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		_, err = executeRPC(ctx, c.directAccessClient.CancelDeviceSession, req, settings.GRPC, c.logger, "CancelDeviceSession")
		return err
	}, opts...)
	return err
}

func (c *directAccessGRPCClient) UpdateDeviceSession(ctx context.Context, req *devicestreamingpb.UpdateDeviceSessionRequest, opts ...gax.CallOption) (*devicestreamingpb.DeviceSession, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "device_session.name", url.QueryEscape(req.GetDeviceSession().GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).UpdateDeviceSession[0:len((*c.CallOptions).UpdateDeviceSession):len((*c.CallOptions).UpdateDeviceSession)], opts...)
	var resp *devicestreamingpb.DeviceSession
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = executeRPC(ctx, c.directAccessClient.UpdateDeviceSession, req, settings.GRPC, c.logger, "UpdateDeviceSession")
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *directAccessGRPCClient) AdbConnect(ctx context.Context, opts ...gax.CallOption) (devicestreamingpb.DirectAccessService_AdbConnectClient, error) {
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, c.xGoogHeaders...)
	var resp devicestreamingpb.DirectAccessService_AdbConnectClient
	opts = append((*c.CallOptions).AdbConnect[0:len((*c.CallOptions).AdbConnect):len((*c.CallOptions).AdbConnect)], opts...)
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		c.logger.DebugContext(ctx, "api streaming client request", "serviceName", serviceName, "rpcName", "AdbConnect")
		resp, err = c.directAccessClient.AdbConnect(ctx, settings.GRPC...)
		c.logger.DebugContext(ctx, "api streaming client response", "serviceName", serviceName, "rpcName", "AdbConnect")
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// CreateDeviceSession creates a DeviceSession.
func (c *directAccessRESTClient) CreateDeviceSession(ctx context.Context, req *devicestreamingpb.CreateDeviceSessionRequest, opts ...gax.CallOption) (*devicestreamingpb.DeviceSession, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	body := req.GetDeviceSession()
	jsonReq, err := m.Marshal(body)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1/%v/deviceSessions", req.GetParent())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")
	if req.GetDeviceSessionId() != "" {
		params.Add("deviceSessionId", fmt.Sprintf("%v", req.GetDeviceSessionId()))
	}

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).CreateDeviceSession[0:len((*c.CallOptions).CreateDeviceSession):len((*c.CallOptions).CreateDeviceSession)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &devicestreamingpb.DeviceSession{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		buf, err := executeHTTPRequest(ctx, c.httpClient, httpReq, c.logger, jsonReq, "CreateDeviceSession")
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// ListDeviceSessions lists DeviceSessions owned by the project user.
func (c *directAccessRESTClient) ListDeviceSessions(ctx context.Context, req *devicestreamingpb.ListDeviceSessionsRequest, opts ...gax.CallOption) *DeviceSessionIterator {
	it := &DeviceSessionIterator{}
	req = proto.Clone(req).(*devicestreamingpb.ListDeviceSessionsRequest)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	it.InternalFetch = func(pageSize int, pageToken string) ([]*devicestreamingpb.DeviceSession, string, error) {
		resp := &devicestreamingpb.ListDeviceSessionsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		baseUrl, err := url.Parse(c.endpoint)
		if err != nil {
			return nil, "", err
		}
		baseUrl.Path += fmt.Sprintf("/v1/%v/deviceSessions", req.GetParent())

		params := url.Values{}
		params.Add("$alt", "json;enum-encoding=int")
		if req.GetFilter() != "" {
			params.Add("filter", fmt.Sprintf("%v", req.GetFilter()))
		}
		if req.GetPageSize() != 0 {
			params.Add("pageSize", fmt.Sprintf("%v", req.GetPageSize()))
		}
		if req.GetPageToken() != "" {
			params.Add("pageToken", fmt.Sprintf("%v", req.GetPageToken()))
		}

		baseUrl.RawQuery = params.Encode()

		// Build HTTP headers from client and context metadata.
		hds := append(c.xGoogHeaders, "Content-Type", "application/json")
		headers := gax.BuildHeaders(ctx, hds...)
		e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			if settings.Path != "" {
				baseUrl.Path = settings.Path
			}
			httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
			if err != nil {
				return err
			}
			httpReq.Header = headers

			buf, err := executeHTTPRequest(ctx, c.httpClient, httpReq, c.logger, nil, "ListDeviceSessions")
			if err != nil {
				return err
			}
			if err := unm.Unmarshal(buf, resp); err != nil {
				return err
			}

			return nil
		}, opts...)
		if e != nil {
			return nil, "", e
		}
		it.Response = resp
		return resp.GetDeviceSessions(), resp.GetNextPageToken(), nil
	}

	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

// GetDeviceSession gets a DeviceSession, which documents the allocation status and
// whether the device is allocated. Clients making requests from this API
// must poll GetDeviceSession.
func (c *directAccessRESTClient) GetDeviceSession(ctx context.Context, req *devicestreamingpb.GetDeviceSessionRequest, opts ...gax.CallOption) (*devicestreamingpb.DeviceSession, error) {
	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1/%v", req.GetName())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).GetDeviceSession[0:len((*c.CallOptions).GetDeviceSession):len((*c.CallOptions).GetDeviceSession)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &devicestreamingpb.DeviceSession{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		buf, err := executeHTTPRequest(ctx, c.httpClient, httpReq, c.logger, nil, "GetDeviceSession")
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// CancelDeviceSession cancel a DeviceSession.
// This RPC changes the DeviceSession to state FINISHED and terminates all
// connections.
// Canceled sessions are not deleted and can be retrieved or
// listed by the user until they expire based on the 28 day deletion policy.
func (c *directAccessRESTClient) CancelDeviceSession(ctx context.Context, req *devicestreamingpb.CancelDeviceSessionRequest, opts ...gax.CallOption) error {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	jsonReq, err := m.Marshal(req)
	if err != nil {
		return err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return err
	}
	baseUrl.Path += fmt.Sprintf("/v1/%v:cancel", req.GetName())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	return gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		_, err = executeHTTPRequest(ctx, c.httpClient, httpReq, c.logger, jsonReq, "CancelDeviceSession")
		return err
	}, opts...)
}

// UpdateDeviceSession updates the current DeviceSession to the fields described by the
// update_mask.
func (c *directAccessRESTClient) UpdateDeviceSession(ctx context.Context, req *devicestreamingpb.UpdateDeviceSessionRequest, opts ...gax.CallOption) (*devicestreamingpb.DeviceSession, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	body := req.GetDeviceSession()
	jsonReq, err := m.Marshal(body)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1/%v", req.GetDeviceSession().GetName())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")
	if req.GetUpdateMask() != nil {
		field, err := protojson.Marshal(req.GetUpdateMask())
		if err != nil {
			return nil, err
		}
		params.Add("updateMask", string(field[1:len(field)-1]))
	}

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "device_session.name", url.QueryEscape(req.GetDeviceSession().GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).UpdateDeviceSession[0:len((*c.CallOptions).UpdateDeviceSession):len((*c.CallOptions).UpdateDeviceSession)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &devicestreamingpb.DeviceSession{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("PATCH", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		buf, err := executeHTTPRequest(ctx, c.httpClient, httpReq, c.logger, jsonReq, "UpdateDeviceSession")
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// AdbConnect exposes an ADB connection if the device supports ADB.
// gRPC headers are used to authenticate the Connect RPC, as well as
// associate to a particular DeviceSession.
// In particular, the user must specify the “X-Omnilab-Session-Name” header.
//
// This method is not supported for the REST transport.
func (c *directAccessRESTClient) AdbConnect(ctx context.Context, opts ...gax.CallOption) (devicestreamingpb.DirectAccessService_AdbConnectClient, error) {
	return nil, errors.New("AdbConnect not yet supported for REST clients")
}
