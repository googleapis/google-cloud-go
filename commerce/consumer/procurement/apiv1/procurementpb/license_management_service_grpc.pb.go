// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/commerce/consumer/procurement/v1/license_management_service.proto

package procurementpb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LicenseManagementService_GetLicensePool_FullMethodName         = "/google.cloud.commerce.consumer.procurement.v1.LicenseManagementService/GetLicensePool"
	LicenseManagementService_UpdateLicensePool_FullMethodName      = "/google.cloud.commerce.consumer.procurement.v1.LicenseManagementService/UpdateLicensePool"
	LicenseManagementService_Assign_FullMethodName                 = "/google.cloud.commerce.consumer.procurement.v1.LicenseManagementService/Assign"
	LicenseManagementService_Unassign_FullMethodName               = "/google.cloud.commerce.consumer.procurement.v1.LicenseManagementService/Unassign"
	LicenseManagementService_EnumerateLicensedUsers_FullMethodName = "/google.cloud.commerce.consumer.procurement.v1.LicenseManagementService/EnumerateLicensedUsers"
)

// LicenseManagementServiceClient is the client API for LicenseManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LicenseManagementServiceClient interface {
	// Gets the license pool.
	GetLicensePool(ctx context.Context, in *GetLicensePoolRequest, opts ...grpc.CallOption) (*LicensePool, error)
	// Updates the license pool if one exists for this Order.
	UpdateLicensePool(ctx context.Context, in *UpdateLicensePoolRequest, opts ...grpc.CallOption) (*LicensePool, error)
	// Assigns a license to a user.
	Assign(ctx context.Context, in *AssignRequest, opts ...grpc.CallOption) (*AssignResponse, error)
	// Unassigns a license from a user.
	Unassign(ctx context.Context, in *UnassignRequest, opts ...grpc.CallOption) (*UnassignResponse, error)
	// Enumerates all users assigned a license.
	EnumerateLicensedUsers(ctx context.Context, in *EnumerateLicensedUsersRequest, opts ...grpc.CallOption) (*EnumerateLicensedUsersResponse, error)
}

type licenseManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLicenseManagementServiceClient(cc grpc.ClientConnInterface) LicenseManagementServiceClient {
	return &licenseManagementServiceClient{cc}
}

func (c *licenseManagementServiceClient) GetLicensePool(ctx context.Context, in *GetLicensePoolRequest, opts ...grpc.CallOption) (*LicensePool, error) {
	out := new(LicensePool)
	err := c.cc.Invoke(ctx, LicenseManagementService_GetLicensePool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *licenseManagementServiceClient) UpdateLicensePool(ctx context.Context, in *UpdateLicensePoolRequest, opts ...grpc.CallOption) (*LicensePool, error) {
	out := new(LicensePool)
	err := c.cc.Invoke(ctx, LicenseManagementService_UpdateLicensePool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *licenseManagementServiceClient) Assign(ctx context.Context, in *AssignRequest, opts ...grpc.CallOption) (*AssignResponse, error) {
	out := new(AssignResponse)
	err := c.cc.Invoke(ctx, LicenseManagementService_Assign_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *licenseManagementServiceClient) Unassign(ctx context.Context, in *UnassignRequest, opts ...grpc.CallOption) (*UnassignResponse, error) {
	out := new(UnassignResponse)
	err := c.cc.Invoke(ctx, LicenseManagementService_Unassign_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *licenseManagementServiceClient) EnumerateLicensedUsers(ctx context.Context, in *EnumerateLicensedUsersRequest, opts ...grpc.CallOption) (*EnumerateLicensedUsersResponse, error) {
	out := new(EnumerateLicensedUsersResponse)
	err := c.cc.Invoke(ctx, LicenseManagementService_EnumerateLicensedUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LicenseManagementServiceServer is the server API for LicenseManagementService service.
// All implementations should embed UnimplementedLicenseManagementServiceServer
// for forward compatibility
type LicenseManagementServiceServer interface {
	// Gets the license pool.
	GetLicensePool(context.Context, *GetLicensePoolRequest) (*LicensePool, error)
	// Updates the license pool if one exists for this Order.
	UpdateLicensePool(context.Context, *UpdateLicensePoolRequest) (*LicensePool, error)
	// Assigns a license to a user.
	Assign(context.Context, *AssignRequest) (*AssignResponse, error)
	// Unassigns a license from a user.
	Unassign(context.Context, *UnassignRequest) (*UnassignResponse, error)
	// Enumerates all users assigned a license.
	EnumerateLicensedUsers(context.Context, *EnumerateLicensedUsersRequest) (*EnumerateLicensedUsersResponse, error)
}

// UnimplementedLicenseManagementServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLicenseManagementServiceServer struct {
}

func (UnimplementedLicenseManagementServiceServer) GetLicensePool(context.Context, *GetLicensePoolRequest) (*LicensePool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLicensePool not implemented")
}
func (UnimplementedLicenseManagementServiceServer) UpdateLicensePool(context.Context, *UpdateLicensePoolRequest) (*LicensePool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLicensePool not implemented")
}
func (UnimplementedLicenseManagementServiceServer) Assign(context.Context, *AssignRequest) (*AssignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Assign not implemented")
}
func (UnimplementedLicenseManagementServiceServer) Unassign(context.Context, *UnassignRequest) (*UnassignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unassign not implemented")
}
func (UnimplementedLicenseManagementServiceServer) EnumerateLicensedUsers(context.Context, *EnumerateLicensedUsersRequest) (*EnumerateLicensedUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnumerateLicensedUsers not implemented")
}

// UnsafeLicenseManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LicenseManagementServiceServer will
// result in compilation errors.
type UnsafeLicenseManagementServiceServer interface {
	mustEmbedUnimplementedLicenseManagementServiceServer()
}

func RegisterLicenseManagementServiceServer(s grpc.ServiceRegistrar, srv LicenseManagementServiceServer) {
	s.RegisterService(&LicenseManagementService_ServiceDesc, srv)
}

func _LicenseManagementService_GetLicensePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLicensePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LicenseManagementServiceServer).GetLicensePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LicenseManagementService_GetLicensePool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LicenseManagementServiceServer).GetLicensePool(ctx, req.(*GetLicensePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LicenseManagementService_UpdateLicensePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLicensePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LicenseManagementServiceServer).UpdateLicensePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LicenseManagementService_UpdateLicensePool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LicenseManagementServiceServer).UpdateLicensePool(ctx, req.(*UpdateLicensePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LicenseManagementService_Assign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LicenseManagementServiceServer).Assign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LicenseManagementService_Assign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LicenseManagementServiceServer).Assign(ctx, req.(*AssignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LicenseManagementService_Unassign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnassignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LicenseManagementServiceServer).Unassign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LicenseManagementService_Unassign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LicenseManagementServiceServer).Unassign(ctx, req.(*UnassignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LicenseManagementService_EnumerateLicensedUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnumerateLicensedUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LicenseManagementServiceServer).EnumerateLicensedUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LicenseManagementService_EnumerateLicensedUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LicenseManagementServiceServer).EnumerateLicensedUsers(ctx, req.(*EnumerateLicensedUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LicenseManagementService_ServiceDesc is the grpc.ServiceDesc for LicenseManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LicenseManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.commerce.consumer.procurement.v1.LicenseManagementService",
	HandlerType: (*LicenseManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLicensePool",
			Handler:    _LicenseManagementService_GetLicensePool_Handler,
		},
		{
			MethodName: "UpdateLicensePool",
			Handler:    _LicenseManagementService_UpdateLicensePool_Handler,
		},
		{
			MethodName: "Assign",
			Handler:    _LicenseManagementService_Assign_Handler,
		},
		{
			MethodName: "Unassign",
			Handler:    _LicenseManagementService_Unassign_Handler,
		},
		{
			MethodName: "EnumerateLicensedUsers",
			Handler:    _LicenseManagementService_EnumerateLicensedUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/commerce/consumer/procurement/v1/license_management_service.proto",
}
