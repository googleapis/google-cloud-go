// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.7
// source: google/cloud/commerce/consumer/procurement/v1/procurement_service.proto

package procurementpb

import (
	context "context"

	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ConsumerProcurementService_PlaceOrder_FullMethodName  = "/google.cloud.commerce.consumer.procurement.v1.ConsumerProcurementService/PlaceOrder"
	ConsumerProcurementService_GetOrder_FullMethodName    = "/google.cloud.commerce.consumer.procurement.v1.ConsumerProcurementService/GetOrder"
	ConsumerProcurementService_ListOrders_FullMethodName  = "/google.cloud.commerce.consumer.procurement.v1.ConsumerProcurementService/ListOrders"
	ConsumerProcurementService_ModifyOrder_FullMethodName = "/google.cloud.commerce.consumer.procurement.v1.ConsumerProcurementService/ModifyOrder"
	ConsumerProcurementService_CancelOrder_FullMethodName = "/google.cloud.commerce.consumer.procurement.v1.ConsumerProcurementService/CancelOrder"
)

// ConsumerProcurementServiceClient is the client API for ConsumerProcurementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConsumerProcurementServiceClient interface {
	// Creates a new [Order][google.cloud.commerce.consumer.procurement.v1.Order].
	//
	// This API only supports GCP spend-based committed use
	// discounts specified by GCP documentation.
	//
	// The returned long-running operation is in-progress until the backend
	// completes the creation of the resource. Once completed, the order is
	// in
	// [OrderState.ORDER_STATE_ACTIVE][google.cloud.commerce.consumer.procurement.v1.OrderState.ORDER_STATE_ACTIVE].
	// In case of failure, the order resource will be removed.
	PlaceOrder(ctx context.Context, in *PlaceOrderRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Returns the requested
	// [Order][google.cloud.commerce.consumer.procurement.v1.Order] resource.
	GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*Order, error)
	// Lists [Order][google.cloud.commerce.consumer.procurement.v1.Order]
	// resources that the user has access to, within the scope of the parent
	// resource.
	ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...grpc.CallOption) (*ListOrdersResponse, error)
	// Modifies an existing
	// [Order][google.cloud.commerce.consumer.procurement.v1.Order] resource.
	ModifyOrder(ctx context.Context, in *ModifyOrderRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Cancels an existing
	// [Order][google.cloud.commerce.consumer.procurement.v1.Order]. Every product
	// procured in the Order will be cancelled.
	CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type consumerProcurementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConsumerProcurementServiceClient(cc grpc.ClientConnInterface) ConsumerProcurementServiceClient {
	return &consumerProcurementServiceClient{cc}
}

func (c *consumerProcurementServiceClient) PlaceOrder(ctx context.Context, in *PlaceOrderRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, ConsumerProcurementService_PlaceOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerProcurementServiceClient) GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, ConsumerProcurementService_GetOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerProcurementServiceClient) ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...grpc.CallOption) (*ListOrdersResponse, error) {
	out := new(ListOrdersResponse)
	err := c.cc.Invoke(ctx, ConsumerProcurementService_ListOrders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerProcurementServiceClient) ModifyOrder(ctx context.Context, in *ModifyOrderRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, ConsumerProcurementService_ModifyOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerProcurementServiceClient) CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, ConsumerProcurementService_CancelOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsumerProcurementServiceServer is the server API for ConsumerProcurementService service.
// All implementations should embed UnimplementedConsumerProcurementServiceServer
// for forward compatibility
type ConsumerProcurementServiceServer interface {
	// Creates a new [Order][google.cloud.commerce.consumer.procurement.v1.Order].
	//
	// This API only supports GCP spend-based committed use
	// discounts specified by GCP documentation.
	//
	// The returned long-running operation is in-progress until the backend
	// completes the creation of the resource. Once completed, the order is
	// in
	// [OrderState.ORDER_STATE_ACTIVE][google.cloud.commerce.consumer.procurement.v1.OrderState.ORDER_STATE_ACTIVE].
	// In case of failure, the order resource will be removed.
	PlaceOrder(context.Context, *PlaceOrderRequest) (*longrunningpb.Operation, error)
	// Returns the requested
	// [Order][google.cloud.commerce.consumer.procurement.v1.Order] resource.
	GetOrder(context.Context, *GetOrderRequest) (*Order, error)
	// Lists [Order][google.cloud.commerce.consumer.procurement.v1.Order]
	// resources that the user has access to, within the scope of the parent
	// resource.
	ListOrders(context.Context, *ListOrdersRequest) (*ListOrdersResponse, error)
	// Modifies an existing
	// [Order][google.cloud.commerce.consumer.procurement.v1.Order] resource.
	ModifyOrder(context.Context, *ModifyOrderRequest) (*longrunningpb.Operation, error)
	// Cancels an existing
	// [Order][google.cloud.commerce.consumer.procurement.v1.Order]. Every product
	// procured in the Order will be cancelled.
	CancelOrder(context.Context, *CancelOrderRequest) (*longrunningpb.Operation, error)
}

// UnimplementedConsumerProcurementServiceServer should be embedded to have forward compatible implementations.
type UnimplementedConsumerProcurementServiceServer struct {
}

func (UnimplementedConsumerProcurementServiceServer) PlaceOrder(context.Context, *PlaceOrderRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceOrder not implemented")
}
func (UnimplementedConsumerProcurementServiceServer) GetOrder(context.Context, *GetOrderRequest) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedConsumerProcurementServiceServer) ListOrders(context.Context, *ListOrdersRequest) (*ListOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrders not implemented")
}
func (UnimplementedConsumerProcurementServiceServer) ModifyOrder(context.Context, *ModifyOrderRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyOrder not implemented")
}
func (UnimplementedConsumerProcurementServiceServer) CancelOrder(context.Context, *CancelOrderRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}

// UnsafeConsumerProcurementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsumerProcurementServiceServer will
// result in compilation errors.
type UnsafeConsumerProcurementServiceServer interface {
	mustEmbedUnimplementedConsumerProcurementServiceServer()
}

func RegisterConsumerProcurementServiceServer(s grpc.ServiceRegistrar, srv ConsumerProcurementServiceServer) {
	s.RegisterService(&ConsumerProcurementService_ServiceDesc, srv)
}

func _ConsumerProcurementService_PlaceOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerProcurementServiceServer).PlaceOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsumerProcurementService_PlaceOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerProcurementServiceServer).PlaceOrder(ctx, req.(*PlaceOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsumerProcurementService_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerProcurementServiceServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsumerProcurementService_GetOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerProcurementServiceServer).GetOrder(ctx, req.(*GetOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsumerProcurementService_ListOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerProcurementServiceServer).ListOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsumerProcurementService_ListOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerProcurementServiceServer).ListOrders(ctx, req.(*ListOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsumerProcurementService_ModifyOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerProcurementServiceServer).ModifyOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsumerProcurementService_ModifyOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerProcurementServiceServer).ModifyOrder(ctx, req.(*ModifyOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsumerProcurementService_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerProcurementServiceServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsumerProcurementService_CancelOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerProcurementServiceServer).CancelOrder(ctx, req.(*CancelOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConsumerProcurementService_ServiceDesc is the grpc.ServiceDesc for ConsumerProcurementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConsumerProcurementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.commerce.consumer.procurement.v1.ConsumerProcurementService",
	HandlerType: (*ConsumerProcurementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlaceOrder",
			Handler:    _ConsumerProcurementService_PlaceOrder_Handler,
		},
		{
			MethodName: "GetOrder",
			Handler:    _ConsumerProcurementService_GetOrder_Handler,
		},
		{
			MethodName: "ListOrders",
			Handler:    _ConsumerProcurementService_ListOrders_Handler,
		},
		{
			MethodName: "ModifyOrder",
			Handler:    _ConsumerProcurementService_ModifyOrder_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _ConsumerProcurementService_CancelOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/commerce/consumer/procurement/v1/procurement_service.proto",
}
